

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 04 21:58:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     _TRISGbits	set	3975
    62   000000                     _TRISEbits	set	3973
    63   000000                     _TRISFbits	set	3974
    64   000000                     _TRISHbits	set	3976
    65   000000                     _RC7PPS	set	3689
    66   000000                     _RE2PPS	set	3700
    67   000000                     _ANSELFbits	set	3764
    68   000000                     _CCPR4H	set	3873
    69   000000                     _CCPR3H	set	3877
    70   000000                     _CCPR2H	set	4006
    71   000000                     _CCPR1H	set	4010
    72   000000                     _CCP1CONbits	set	4011
    73   000000                     _CCPTMRS0bits	set	4013
    74   000000                     _T2PR	set	4028
    75   000000                     _T2CONbits	set	4029
    76   000000                     _CCP2CONbits	set	4007
    77   000000                     _ADREFbits	set	3928
    78   000000                     _CCP3CONbits	set	3878
    79   000000                     _LATCbits	set	3963
    80   000000                     _LATDbits	set	3964
    81   000000                     _CCP4CONbits	set	3874
    82   000000                     _LATGbits	set	3967
    83   000000                     _LATEbits	set	3965
    84   000000                     _LATHbits	set	3968
    85   000000                     _TRISDbits	set	3972
    86   000000                     _TRISCbits	set	3971
    87   000000                     _PORTFbits	set	3982
    88   000000                     _RE4PPS	set	3702
    89   000000                     _RG6PPS	set	3720
    90   000000                     _T2CLKCONbits	set	4031
    91   000000                     _T2HLTbits	set	4030
    92   000000                     _ADPCH	set	3935
    93   000000                     _ADRESH	set	3940
    94   000000                     _ADCON0bits	set	3936
    95                           
    96                           ; #config settings
    97                           
    98                           	psect	cinit
    99   001D98                     __pcinit:
   100                           	callstack 0
   101   001D98                     start_initialization:
   102                           	callstack 0
   103   001D98                     __initialization:
   104                           	callstack 0
   105   001D98                     end_of_initialization:
   106                           	callstack 0
   107   001D98                     __end_of__initialization:
   108                           	callstack 0
   109   001D98  0100               	movlb	0
   110   001D9A  EFB8  F00C         	goto	_main	;jump to C main() function
   111                           
   112                           	psect	cstackCOMRAM
   113   000001                     __pcstackCOMRAM:
   114                           	callstack 0
   115   000001                     ?___wmul:
   116                           	callstack 0
   117   000001                     ?___awdiv:
   118                           	callstack 0
   119   000001                     ADC_getval@tmpval:
   120                           	callstack 0
   121   000001                     initDCmotorsPWM@PWMperiod:
   122                           	callstack 0
   123   000001                     ___wmul@multiplier:
   124                           	callstack 0
   125   000001                     ___awdiv@dividend:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x0
   129   000001                     	ds	2
   130   000003                     ___wmul@multiplicand:
   131                           	callstack 0
   132   000003                     ___awdiv@divisor:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x2
   136   000003                     	ds	2
   137   000005                     ___awdiv@counter:
   138                           	callstack 0
   139   000005                     ___wmul@product:
   140                           	callstack 0
   141                           
   142                           ; 2 bytes @ 0x4
   143   000005                     	ds	1
   144   000006                     ___awdiv@sign:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x5
   148   000006                     	ds	1
   149   000007                     ?___lwdiv:
   150                           	callstack 0
   151   000007                     ___awdiv@quotient:
   152                           	callstack 0
   153   000007                     ___lwdiv@dividend:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x6
   157   000007                     	ds	2
   158   000009                     batteryLevel@batteryVoltage:
   159                           	callstack 0
   160   000009                     ___lwdiv@divisor:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x8
   164   000009                     	ds	1
   165   00000A                     batteryLevel@batteryQuarter:
   166                           	callstack 0
   167                           
   168                           ; 1 bytes @ 0x9
   169   00000A                     	ds	1
   170   00000B                     ___lwdiv@quotient:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0xA
   174   00000B                     	ds	2
   175   00000D                     ___lwdiv@counter:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0xC
   179   00000D                     	ds	1
   180   00000E                     setMotorPWM@m:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xD
   184   00000E                     	ds	1
   185   00000F                     ??_setMotorPWM:
   186                           
   187                           ; 1 bytes @ 0xE
   188   00000F                     	ds	2
   189   000011                     setMotorPWM@posDuty:
   190                           	callstack 0
   191                           
   192                           ; 1 bytes @ 0x10
   193   000011                     	ds	1
   194   000012                     setMotorPWM@negDuty:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x11
   198   000012                     	ds	1
   199   000013                     turnLeft@mL:
   200                           	callstack 0
   201   000013                     turnRight@mL:
   202                           	callstack 0
   203   000013                     fullSpeedAhead@mL:
   204                           	callstack 0
   205   000013                     reverseOneSquare@mL:
   206                           	callstack 0
   207                           
   208                           ; 1 bytes @ 0x12
   209   000013                     	ds	1
   210   000014                     turnLeft@mR:
   211                           	callstack 0
   212   000014                     turnRight@mR:
   213                           	callstack 0
   214   000014                     fullSpeedAhead@mR:
   215                           	callstack 0
   216   000014                     reverseOneSquare@mR:
   217                           	callstack 0
   218                           
   219                           ; 1 bytes @ 0x13
   220   000014                     	ds	1
   221   000015                     turnLeft@turnSpeed:
   222                           	callstack 0
   223   000015                     turnRight@turnSpeed:
   224                           	callstack 0
   225   000015                     fullSpeedAhead@straightSpeed:
   226                           	callstack 0
   227   000015                     reverseOneSquare@straightSpeed:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0x14
   231   000015                     	ds	1
   232   000016                     turnLeft@turnDuration:
   233                           	callstack 0
   234   000016                     turnRight@turnDuration:
   235                           	callstack 0
   236   000016                     fullSpeedAhead@straightRamp:
   237                           	callstack 0
   238   000016                     reverseOneSquare@reverseDuration:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0x15
   242   000016                     	ds	1
   243   000017                     ??_fullSpeedAhead:
   244   000017                     turnLeft@turnRamp:
   245                           	callstack 0
   246   000017                     turnRight@turnRamp:
   247                           	callstack 0
   248   000017                     reverseOneSquare@straightRamp:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x16
   252   000017                     	ds	1
   253   000018                     ??_turnRight:
   254   000018                     ??_turnLeft:
   255   000018                     ??_reverseOneSquare:
   256                           
   257                           ; 1 bytes @ 0x17
   258   000018                     	ds	2
   259   00001A                     fullSpeedAhead@i:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x19
   263   00001A                     	ds	1
   264   00001B                     turnLeft@i:
   265                           	callstack 0
   266   00001B                     turnRight@i:
   267                           	callstack 0
   268   00001B                     reverseOneSquare@i:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x1A
   272   00001B                     	ds	1
   273   00001C                     fullSpeedAhead@cur_power:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x1B
   277   00001C                     	ds	1
   278   00001D                     turnLeft@cur_power:
   279                           	callstack 0
   280   00001D                     turnRight@cur_power:
   281                           	callstack 0
   282   00001D                     reverseOneSquare@cur_power:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x1C
   286   00001D                     	ds	2
   287   00001F                     move@mL:
   288                           	callstack 0
   289   00001F                     calibration@mL:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x1E
   293   00001F                     	ds	1
   294   000020                     move@mR:
   295                           	callstack 0
   296   000020                     calibration@mR:
   297                           	callstack 0
   298                           
   299                           ; 1 bytes @ 0x1F
   300   000020                     	ds	1
   301   000021                     move@color:
   302                           	callstack 0
   303   000021                     calibration@turnSpeed:
   304                           	callstack 0
   305                           
   306                           ; 1 bytes @ 0x20
   307   000021                     	ds	1
   308   000022                     move@straightSpeed:
   309                           	callstack 0
   310   000022                     calibration@turnDuration:
   311                           	callstack 0
   312                           
   313                           ; 1 bytes @ 0x21
   314   000022                     	ds	1
   315   000023                     move@reverseDuration:
   316                           	callstack 0
   317   000023                     calibration@turnRamp:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x22
   321   000023                     	ds	1
   322   000024                     ??_calibration:
   323   000024                     move@straightRamp:
   324                           	callstack 0
   325                           
   326                           ; 1 bytes @ 0x23
   327   000024                     	ds	1
   328   000025                     move@turnSpeed:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x24
   332   000025                     	ds	1
   333   000026                     move@turnDuration:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x25
   337   000026                     	ds	1
   338   000027                     move@turnRamp:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x26
   342   000027                     	ds	1
   343   000028                     ??_move:
   344                           
   345                           ; 1 bytes @ 0x27
   346   000028                     	ds	2
   347   00002A                     ??_main:
   348                           
   349                           ; 1 bytes @ 0x29
   350   00002A                     	ds	2
   351   00002C                     main@turnDuration:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x2B
   355   00002C                     	ds	1
   356   00002D                     main@motorL:
   357                           	callstack 0
   358                           
   359                           ; 10 bytes @ 0x2C
   360   00002D                     	ds	10
   361   000037                     main@motorR:
   362                           	callstack 0
   363                           
   364                           ; 10 bytes @ 0x36
   365   000037                     	ds	10
   366                           
   367 ;;
   368 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   369 ;;
   370 ;; *************** function _main *****************
   371 ;; Defined at:
   372 ;;		line 14 in file "main.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  motorR         10   54[COMRAM] struct DC_motor
   377 ;;  motorL         10   44[COMRAM] struct DC_motor
   378 ;;  PWMcycle        2    0        unsigned int 
   379 ;;  turnDuration    1   43[COMRAM] unsigned char 
   380 ;;  turnRamp        1    0        unsigned char 
   381 ;;  turnSpeed       1    0        unsigned char 
   382 ;;  color           1    0        unsigned char 
   383 ;;  reverseDurat    1    0        unsigned char 
   384 ;;  straightRamp    1    0        unsigned char 
   385 ;;  straightSpee    1    0        unsigned char 
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   396 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   398 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   399 ;;Total ram usage:       23 bytes
   400 ;; Hardware stack levels required when called: 4
   401 ;; This function calls:
   402 ;;		_batteryLevel
   403 ;;		_calibration
   404 ;;		_initDCmotorsPWM
   405 ;;		_move
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text0
   412   001970                     __ptext0:
   413                           	callstack 0
   414   001970                     _main:
   415                           	callstack 27
   416   001970                     
   417                           ;main.c: 16:     initDCmotorsPWM(PWMcycle);
   418   001970  0E00               	movlw	0
   419   001972  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   420   001974  0EC7               	movlw	199
   421   001976  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   422   001978  ECF7  F00D         	call	_initDCmotorsPWM	;wreg free
   423   00197C                     
   424                           ;main.c: 18:     struct DC_motor motorL, motorR;;main.c: 20:     motorL.power=0;
   425   00197C  0E00               	movlw	0
   426   00197E  6E2D               	movwf	main@motorL^0,c
   427   001980                     
   428                           ;main.c: 21:     motorL.direction=1;
   429   001980  0E01               	movlw	1
   430   001982  6E2E               	movwf	(main@motorL+1)^0,c
   431   001984                     
   432                           ;main.c: 22:     motorL.brakemode=1;
   433   001984  0E01               	movlw	1
   434   001986  6E2F               	movwf	(main@motorL+2)^0,c
   435   001988                     
   436                           ;main.c: 23:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   437   001988  0EAA               	movlw	170
   438   00198A  6E32               	movwf	(main@motorL+5)^0,c
   439   00198C  0E0F               	movlw	15
   440   00198E  6E33               	movwf	(main@motorL+6)^0,c
   441   001990                     
   442                           ;main.c: 24:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   443   001990  0EA6               	movlw	166
   444   001992  6E34               	movwf	(main@motorL+7)^0,c
   445   001994  0E0F               	movlw	15
   446   001996  6E35               	movwf	(main@motorL+8)^0,c
   447   001998                     
   448                           ;main.c: 25:     motorL.PWMperiod=PWMcycle;
   449   001998  0E00               	movlw	0
   450   00199A  6E31               	movwf	(main@motorL+4)^0,c
   451   00199C  0EC7               	movlw	199
   452   00199E  6E30               	movwf	(main@motorL+3)^0,c
   453   0019A0                     
   454                           ;main.c: 26:     motorL.compensation=3;
   455   0019A0  0E03               	movlw	3
   456   0019A2  6E36               	movwf	(main@motorL+9)^0,c
   457   0019A4                     
   458                           ;main.c: 28:     motorR.power=0;
   459   0019A4  0E00               	movlw	0
   460   0019A6  6E37               	movwf	main@motorR^0,c
   461   0019A8                     
   462                           ;main.c: 29:     motorR.direction=1;
   463   0019A8  0E01               	movlw	1
   464   0019AA  6E38               	movwf	(main@motorR+1)^0,c
   465   0019AC                     
   466                           ;main.c: 30:     motorR.brakemode=1;
   467   0019AC  0E01               	movlw	1
   468   0019AE  6E39               	movwf	(main@motorR+2)^0,c
   469   0019B0                     
   470                           ;main.c: 31:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   471   0019B0  0E25               	movlw	37
   472   0019B2  6E3C               	movwf	(main@motorR+5)^0,c
   473   0019B4  0E0F               	movlw	15
   474   0019B6  6E3D               	movwf	(main@motorR+6)^0,c
   475   0019B8                     
   476                           ;main.c: 32:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   477   0019B8  0E21               	movlw	33
   478   0019BA  6E3E               	movwf	(main@motorR+7)^0,c
   479   0019BC  0E0F               	movlw	15
   480   0019BE  6E3F               	movwf	(main@motorR+8)^0,c
   481   0019C0                     
   482                           ;main.c: 33:     motorR.PWMperiod=PWMcycle;
   483   0019C0  0E00               	movlw	0
   484   0019C2  6E3B               	movwf	(main@motorR+4)^0,c
   485   0019C4  0EC7               	movlw	199
   486   0019C6  6E3A               	movwf	(main@motorR+3)^0,c
   487   0019C8                     
   488                           ;main.c: 34:     motorR.compensation=0;
   489   0019C8  0E00               	movlw	0
   490   0019CA  6E40               	movwf	(main@motorR+9)^0,c
   491   0019CC                     
   492                           ;main.c: 43:     unsigned char turnDuration=10;
   493   0019CC  0E0A               	movlw	10
   494   0019CE  6E2C               	movwf	main@turnDuration^0,c
   495   0019D0                     
   496                           ;main.c: 47:     LATDbits.LATD7=0;
   497   0019D0  9E7C               	bcf	124,7,c	;volatile
   498   0019D2                     
   499                           ;main.c: 48:     TRISDbits.TRISD7=0;
   500   0019D2  9E84               	bcf	132,7,c	;volatile
   501   0019D4                     
   502                           ;main.c: 49:     LATHbits.LATH3=0;
   503   0019D4  9680               	bcf	128,3,c	;volatile
   504   0019D6                     
   505                           ;main.c: 50:     TRISHbits.TRISH3=0;
   506   0019D6  9688               	bcf	136,3,c	;volatile
   507   0019D8                     
   508                           ;main.c: 53:     TRISFbits.TRISF2=1;
   509   0019D8  8486               	bsf	134,2,c	;volatile
   510   0019DA                     
   511                           ;main.c: 54:     ANSELFbits.ANSELF2=0;
   512   0019DA  010E               	movlb	14	; () banked
   513   0019DC  95B4               	bcf	180,2,b	;volatile
   514   0019DE                     
   515                           ; BSR set to: 14
   516                           ;main.c: 55:     TRISFbits.TRISF3=1;
   517   0019DE  8686               	bsf	134,3,c	;volatile
   518   0019E0                     
   519                           ; BSR set to: 14
   520                           ;main.c: 56:     ANSELFbits.ANSELF3=0;
   521   0019E0  97B4               	bcf	180,3,b	;volatile
   522   0019E2                     
   523                           ; BSR set to: 14
   524                           ;main.c: 59:     batteryLevel();
   525   0019E2  EC79  F00E         	call	_batteryLevel	;wreg free
   526   0019E6                     l37:
   527   0019E6  B48E               	btfsc	142,2,c	;volatile
   528   0019E8  EFF8  F00C         	goto	u911
   529   0019EC  EFFA  F00C         	goto	u910
   530   0019F0                     u911:
   531   0019F0  EFF3  F00C         	goto	l37
   532   0019F4                     u910:
   533   0019F4                     
   534                           ;main.c: 63:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   535   0019F4  9680               	bcf	128,3,c	;volatile
   536   0019F6  9E7C               	bcf	124,7,c	;volatile
   537   0019F8                     
   538                           ;main.c: 64:     _delay((unsigned long)((500)*(64000000/4000.0)));
   539   0019F8  0E29               	movlw	41
   540   0019FA  6E2B               	movwf	(??_main+1)^0,c
   541   0019FC  0E96               	movlw	150
   542   0019FE  6E2A               	movwf	??_main^0,c
   543   001A00  0E7F               	movlw	127
   544   001A02                     u947:
   545   001A02  2EE8               	decfsz	wreg,f,c
   546   001A04  D7FE               	bra	u947
   547   001A06  2E2A               	decfsz	??_main^0,f,c
   548   001A08  D7FC               	bra	u947
   549   001A0A  2E2B               	decfsz	(??_main+1)^0,f,c
   550   001A0C  D7FA               	bra	u947
   551   001A0E  0000               	nop	
   552   001A10                     
   553                           ;main.c: 66:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
   554   001A10  0E2D               	movlw	low main@motorL
   555   001A12  6E1F               	movwf	calibration@mL^0,c
   556   001A14  0E37               	movlw	low main@motorR
   557   001A16  6E20               	movwf	calibration@mR^0,c
   558   001A18  0E15               	movlw	21
   559   001A1A  6E21               	movwf	calibration@turnSpeed^0,c
   560   001A1C  0E2C               	movlw	low main@turnDuration
   561   001A1E  6E22               	movwf	calibration@turnDuration^0,c
   562   001A20  0E04               	movlw	4
   563   001A22  6E23               	movwf	calibration@turnRamp^0,c
   564   001A24  EC56  F00B         	call	_calibration	;wreg free
   565   001A28                     
   566                           ;main.c: 69:     move(&motorL, &motorR, color, straightSpeed, reverseDuration, straightR
      +                          amp, turnSpeed, turnDuration, turnRamp);
   567   001A28  0E2D               	movlw	low main@motorL
   568   001A2A  6E1F               	movwf	move@mL^0,c
   569   001A2C  0E37               	movlw	low main@motorR
   570   001A2E  6E20               	movwf	move@mR^0,c
   571   001A30  0E01               	movlw	1
   572   001A32  6E21               	movwf	move@color^0,c
   573   001A34  0E3C               	movlw	60
   574   001A36  6E22               	movwf	move@straightSpeed^0,c
   575   001A38  0E0A               	movlw	10
   576   001A3A  6E23               	movwf	move@reverseDuration^0,c
   577   001A3C  0E02               	movlw	2
   578   001A3E  6E24               	movwf	move@straightRamp^0,c
   579   001A40  0E15               	movlw	21
   580   001A42  6E25               	movwf	move@turnSpeed^0,c
   581   001A44  C02C  F026         	movff	main@turnDuration,move@turnDuration
   582   001A48  0E04               	movlw	4
   583   001A4A  6E27               	movwf	move@turnRamp^0,c
   584   001A4C  EC01  F007         	call	_move	;wreg free
   585   001A50                     l40:
   586   001A50  EF28  F00D         	goto	l40
   587   001A54  EF00  F000         	goto	start
   588   001A58                     __end_of_main:
   589                           	callstack 0
   590                           
   591 ;; *************** function _move *****************
   592 ;; Defined at:
   593 ;;		line 87 in file "dc_motor.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;  mL              1   30[COMRAM] PTR struct DC_motor
   596 ;;		 -> main@motorL(10), 
   597 ;;  mR              1   31[COMRAM] PTR struct DC_motor
   598 ;;		 -> main@motorR(10), 
   599 ;;  color           1   32[COMRAM] unsigned char 
   600 ;;  straightSpee    1   33[COMRAM] unsigned char 
   601 ;;  reverseDurat    1   34[COMRAM] unsigned char 
   602 ;;  straightRamp    1   35[COMRAM] unsigned char 
   603 ;;  turnSpeed       1   36[COMRAM] unsigned char 
   604 ;;  turnDuration    1   37[COMRAM] unsigned char 
   605 ;;  turnRamp        1   38[COMRAM] unsigned char 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;		None
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   617 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   620 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   621 ;;Total ram usage:       11 bytes
   622 ;; Hardware stack levels used: 1
   623 ;; Hardware stack levels required when called: 3
   624 ;; This function calls:
   625 ;;		_fullSpeedAhead
   626 ;;		_reverseOneSquare
   627 ;;		_turnLeft
   628 ;;		_turnRight
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text1
   635   000E02                     __ptext1:
   636                           	callstack 0
   637   000E02                     _move:
   638                           	callstack 27
   639   000E02                     
   640                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
   641   000E02  0421               	decf	move@color^0,w,c
   642   000E04  A4D8               	btfss	status,2,c
   643   000E06  EF07  F007         	goto	u841
   644   000E0A  EF09  F007         	goto	u840
   645   000E0E                     u841:
   646   000E0E  EF45  F007         	goto	l1782
   647   000E12                     u840:
   648   000E12                     
   649                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
   650   000E12  C01F  F013         	movff	move@mL,turnRight@mL
   651   000E16  C020  F014         	movff	move@mR,turnRight@mR
   652   000E1A  C025  F015         	movff	move@turnSpeed,turnRight@turnSpeed
   653   000E1E  C026  F016         	movff	move@turnDuration,turnRight@turnDuration
   654   000E22  C027  F017         	movff	move@turnRamp,turnRight@turnRamp
   655   000E26  ECA0  F009         	call	_turnRight	;wreg free
   656   000E2A                     
   657                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
   658   000E2A  0E05               	movlw	5
   659   000E2C  6E29               	movwf	(??_move+1)^0,c
   660   000E2E  0E0F               	movlw	15
   661   000E30  6E28               	movwf	??_move^0,c
   662   000E32  0EF1               	movlw	241
   663   000E34                     u957:
   664   000E34  2EE8               	decfsz	wreg,f,c
   665   000E36  D7FE               	bra	u957
   666   000E38  2E28               	decfsz	??_move^0,f,c
   667   000E3A  D7FC               	bra	u957
   668   000E3C  2E29               	decfsz	(??_move+1)^0,f,c
   669   000E3E  D7FA               	bra	u957
   670   000E40  0000               	nop	
   671   000E42                     
   672                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
   673   000E42  C01F  F013         	movff	move@mL,turnRight@mL
   674   000E46  C020  F014         	movff	move@mR,turnRight@mR
   675   000E4A  C025  F015         	movff	move@turnSpeed,turnRight@turnSpeed
   676   000E4E  C026  F016         	movff	move@turnDuration,turnRight@turnDuration
   677   000E52  C027  F017         	movff	move@turnRamp,turnRight@turnRamp
   678   000E56  ECA0  F009         	call	_turnRight	;wreg free
   679                           
   680                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
   681   000E5A  0E05               	movlw	5
   682   000E5C  6E29               	movwf	(??_move+1)^0,c
   683   000E5E  0E0F               	movlw	15
   684   000E60  6E28               	movwf	??_move^0,c
   685   000E62  0EF1               	movlw	241
   686   000E64                     u967:
   687   000E64  2EE8               	decfsz	wreg,f,c
   688   000E66  D7FE               	bra	u967
   689   000E68  2E28               	decfsz	??_move^0,f,c
   690   000E6A  D7FC               	bra	u967
   691   000E6C  2E29               	decfsz	(??_move+1)^0,f,c
   692   000E6E  D7FA               	bra	u967
   693   000E70  0000               	nop	
   694   000E72                     l1780:
   695                           
   696                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
   697   000E72  C01F  F013         	movff	move@mL,fullSpeedAhead@mL
   698   000E76  C020  F014         	movff	move@mR,fullSpeedAhead@mR
   699   000E7A  C022  F015         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
   700   000E7E  C024  F016         	movff	move@straightRamp,fullSpeedAhead@straightRamp
   701   000E82  EC2C  F00D         	call	_fullSpeedAhead	;wreg free
   702                           
   703                           ;dc_motor.c: 95:     }
   704   000E86  EFBD  F008         	goto	l133
   705   000E8A                     l1782:
   706   000E8A  0E02               	movlw	2
   707   000E8C  1821               	xorwf	move@color^0,w,c
   708   000E8E  A4D8               	btfss	status,2,c
   709   000E90  EF4C  F007         	goto	u851
   710   000E94  EF4E  F007         	goto	u850
   711   000E98                     u851:
   712   000E98  EF80  F007         	goto	l1792
   713   000E9C                     u850:
   714   000E9C                     
   715                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   716   000E9C  C01F  F013         	movff	move@mL,turnLeft@mL
   717   000EA0  C020  F014         	movff	move@mR,turnLeft@mR
   718   000EA4  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   719   000EA8  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   720   000EAC  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   721   000EB0  EC7B  F00A         	call	_turnLeft	;wreg free
   722   000EB4                     
   723                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
   724   000EB4  0E05               	movlw	5
   725   000EB6  6E29               	movwf	(??_move+1)^0,c
   726   000EB8  0E0F               	movlw	15
   727   000EBA  6E28               	movwf	??_move^0,c
   728   000EBC  0EF1               	movlw	241
   729   000EBE                     u977:
   730   000EBE  2EE8               	decfsz	wreg,f,c
   731   000EC0  D7FE               	bra	u977
   732   000EC2  2E28               	decfsz	??_move^0,f,c
   733   000EC4  D7FC               	bra	u977
   734   000EC6  2E29               	decfsz	(??_move+1)^0,f,c
   735   000EC8  D7FA               	bra	u977
   736   000ECA  0000               	nop	
   737   000ECC                     
   738                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   739   000ECC  C01F  F013         	movff	move@mL,turnLeft@mL
   740   000ED0  C020  F014         	movff	move@mR,turnLeft@mR
   741   000ED4  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   742   000ED8  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   743   000EDC  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   744   000EE0  EC7B  F00A         	call	_turnLeft	;wreg free
   745                           
   746                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
   747   000EE4  0E05               	movlw	5
   748   000EE6  6E29               	movwf	(??_move+1)^0,c
   749   000EE8  0E0F               	movlw	15
   750   000EEA  6E28               	movwf	??_move^0,c
   751   000EEC  0EF1               	movlw	241
   752   000EEE                     u987:
   753   000EEE  2EE8               	decfsz	wreg,f,c
   754   000EF0  D7FE               	bra	u987
   755   000EF2  2E28               	decfsz	??_move^0,f,c
   756   000EF4  D7FC               	bra	u987
   757   000EF6  2E29               	decfsz	(??_move+1)^0,f,c
   758   000EF8  D7FA               	bra	u987
   759   000EFA  0000               	nop	
   760   000EFC  EF39  F007         	goto	l1780
   761   000F00                     l1792:
   762   000F00  0E03               	movlw	3
   763   000F02  1821               	xorwf	move@color^0,w,c
   764   000F04  A4D8               	btfss	status,2,c
   765   000F06  EF87  F007         	goto	u861
   766   000F0A  EF89  F007         	goto	u860
   767   000F0E                     u861:
   768   000F0E  EFEB  F007         	goto	l1808
   769   000F12                     u860:
   770   000F12                     
   771                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   772   000F12  C01F  F013         	movff	move@mL,turnLeft@mL
   773   000F16  C020  F014         	movff	move@mR,turnLeft@mR
   774   000F1A  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   775   000F1E  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   776   000F22  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   777   000F26  EC7B  F00A         	call	_turnLeft	;wreg free
   778   000F2A                     
   779                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
   780   000F2A  0E05               	movlw	5
   781   000F2C  6E29               	movwf	(??_move+1)^0,c
   782   000F2E  0E0F               	movlw	15
   783   000F30  6E28               	movwf	??_move^0,c
   784   000F32  0EF1               	movlw	241
   785   000F34                     u997:
   786   000F34  2EE8               	decfsz	wreg,f,c
   787   000F36  D7FE               	bra	u997
   788   000F38  2E28               	decfsz	??_move^0,f,c
   789   000F3A  D7FC               	bra	u997
   790   000F3C  2E29               	decfsz	(??_move+1)^0,f,c
   791   000F3E  D7FA               	bra	u997
   792   000F40  0000               	nop	
   793   000F42                     
   794                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   795   000F42  C01F  F013         	movff	move@mL,turnLeft@mL
   796   000F46  C020  F014         	movff	move@mR,turnLeft@mR
   797   000F4A  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   798   000F4E  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   799   000F52  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   800   000F56  EC7B  F00A         	call	_turnLeft	;wreg free
   801                           
   802                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
   803   000F5A  0E05               	movlw	5
   804   000F5C  6E29               	movwf	(??_move+1)^0,c
   805   000F5E  0E0F               	movlw	15
   806   000F60  6E28               	movwf	??_move^0,c
   807   000F62  0EF1               	movlw	241
   808   000F64                     u1007:
   809   000F64  2EE8               	decfsz	wreg,f,c
   810   000F66  D7FE               	bra	u1007
   811   000F68  2E28               	decfsz	??_move^0,f,c
   812   000F6A  D7FC               	bra	u1007
   813   000F6C  2E29               	decfsz	(??_move+1)^0,f,c
   814   000F6E  D7FA               	bra	u1007
   815   000F70  0000               	nop	
   816   000F72                     
   817                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   818   000F72  C01F  F013         	movff	move@mL,turnLeft@mL
   819   000F76  C020  F014         	movff	move@mR,turnLeft@mR
   820   000F7A  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   821   000F7E  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   822   000F82  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   823   000F86  EC7B  F00A         	call	_turnLeft	;wreg free
   824   000F8A                     
   825                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
   826   000F8A  0E05               	movlw	5
   827   000F8C  6E29               	movwf	(??_move+1)^0,c
   828   000F8E  0E0F               	movlw	15
   829   000F90  6E28               	movwf	??_move^0,c
   830   000F92  0EF1               	movlw	241
   831   000F94                     u1017:
   832   000F94  2EE8               	decfsz	wreg,f,c
   833   000F96  D7FE               	bra	u1017
   834   000F98  2E28               	decfsz	??_move^0,f,c
   835   000F9A  D7FC               	bra	u1017
   836   000F9C  2E29               	decfsz	(??_move+1)^0,f,c
   837   000F9E  D7FA               	bra	u1017
   838   000FA0  0000               	nop	
   839                           
   840                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   841   000FA2  C01F  F013         	movff	move@mL,turnLeft@mL
   842   000FA6  C020  F014         	movff	move@mR,turnLeft@mR
   843   000FAA  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   844   000FAE  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   845   000FB2  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   846   000FB6  EC7B  F00A         	call	_turnLeft	;wreg free
   847   000FBA                     
   848                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
   849   000FBA  0E05               	movlw	5
   850   000FBC  6E29               	movwf	(??_move+1)^0,c
   851   000FBE  0E0F               	movlw	15
   852   000FC0  6E28               	movwf	??_move^0,c
   853   000FC2  0EF1               	movlw	241
   854   000FC4                     u1027:
   855   000FC4  2EE8               	decfsz	wreg,f,c
   856   000FC6  D7FE               	bra	u1027
   857   000FC8  2E28               	decfsz	??_move^0,f,c
   858   000FCA  D7FC               	bra	u1027
   859   000FCC  2E29               	decfsz	(??_move+1)^0,f,c
   860   000FCE  D7FA               	bra	u1027
   861   000FD0  0000               	nop	
   862   000FD2  EF39  F007         	goto	l1780
   863   000FD6                     l1808:
   864   000FD6  0E04               	movlw	4
   865   000FD8  1821               	xorwf	move@color^0,w,c
   866   000FDA  A4D8               	btfss	status,2,c
   867   000FDC  EFF2  F007         	goto	u871
   868   000FE0  EFF4  F007         	goto	u870
   869   000FE4                     u871:
   870   000FE4  EF48  F008         	goto	l1820
   871   000FE8                     u870:
   872   000FE8                     
   873                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
   874   000FE8  C01F  F013         	movff	move@mL,reverseOneSquare@mL
   875   000FEC  C020  F014         	movff	move@mR,reverseOneSquare@mR
   876   000FF0  C022  F015         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
   877   000FF4  C023  F016         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
   878   000FF8  C024  F017         	movff	move@straightRamp,reverseOneSquare@straightRamp
   879   000FFC  ECBE  F008         	call	_reverseOneSquare	;wreg free
   880   001000                     l1812:
   881                           
   882                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
   883   001000  0E05               	movlw	5
   884   001002  6E29               	movwf	(??_move+1)^0,c
   885   001004  0E0F               	movlw	15
   886   001006  6E28               	movwf	??_move^0,c
   887   001008  0EF1               	movlw	241
   888   00100A                     u1037:
   889   00100A  2EE8               	decfsz	wreg,f,c
   890   00100C  D7FE               	bra	u1037
   891   00100E  2E28               	decfsz	??_move^0,f,c
   892   001010  D7FC               	bra	u1037
   893   001012  2E29               	decfsz	(??_move+1)^0,f,c
   894   001014  D7FA               	bra	u1037
   895   001016  0000               	nop	
   896   001018                     
   897                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
   898   001018  C01F  F013         	movff	move@mL,turnRight@mL
   899   00101C  C020  F014         	movff	move@mR,turnRight@mR
   900   001020  C025  F015         	movff	move@turnSpeed,turnRight@turnSpeed
   901   001024  C026  F016         	movff	move@turnDuration,turnRight@turnDuration
   902   001028  C027  F017         	movff	move@turnRamp,turnRight@turnRamp
   903   00102C  ECA0  F009         	call	_turnRight	;wreg free
   904                           
   905                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
   906   001030  0E05               	movlw	5
   907   001032  6E29               	movwf	(??_move+1)^0,c
   908   001034  0E0F               	movlw	15
   909   001036  6E28               	movwf	??_move^0,c
   910   001038  0EF1               	movlw	241
   911   00103A                     u1047:
   912   00103A  2EE8               	decfsz	wreg,f,c
   913   00103C  D7FE               	bra	u1047
   914   00103E  2E28               	decfsz	??_move^0,f,c
   915   001040  D7FC               	bra	u1047
   916   001042  2E29               	decfsz	(??_move+1)^0,f,c
   917   001044  D7FA               	bra	u1047
   918   001046  0000               	nop	
   919   001048                     
   920                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
   921   001048  C01F  F013         	movff	move@mL,turnRight@mL
   922   00104C  C020  F014         	movff	move@mR,turnRight@mR
   923   001050  C025  F015         	movff	move@turnSpeed,turnRight@turnSpeed
   924   001054  C026  F016         	movff	move@turnDuration,turnRight@turnDuration
   925   001058  C027  F017         	movff	move@turnRamp,turnRight@turnRamp
   926   00105C  ECA0  F009         	call	_turnRight	;wreg free
   927   001060                     l1818:
   928                           
   929                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
   930   001060  0E05               	movlw	5
   931   001062  6E29               	movwf	(??_move+1)^0,c
   932   001064  0E0F               	movlw	15
   933   001066  6E28               	movwf	??_move^0,c
   934   001068  0EF1               	movlw	241
   935   00106A                     u1057:
   936   00106A  2EE8               	decfsz	wreg,f,c
   937   00106C  D7FE               	bra	u1057
   938   00106E  2E28               	decfsz	??_move^0,f,c
   939   001070  D7FC               	bra	u1057
   940   001072  2E29               	decfsz	(??_move+1)^0,f,c
   941   001074  D7FA               	bra	u1057
   942   001076  0000               	nop	
   943                           
   944                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
   945   001078  C01F  F013         	movff	move@mL,fullSpeedAhead@mL
   946   00107C  C020  F014         	movff	move@mR,fullSpeedAhead@mR
   947   001080  C022  F015         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
   948   001084  C024  F016         	movff	move@straightRamp,fullSpeedAhead@straightRamp
   949   001088  EC2C  F00D         	call	_fullSpeedAhead	;wreg free
   950                           
   951                           ;dc_motor.c: 125:     }
   952   00108C  EFBD  F008         	goto	l133
   953   001090                     l1820:
   954   001090  0E05               	movlw	5
   955   001092  1821               	xorwf	move@color^0,w,c
   956   001094  A4D8               	btfss	status,2,c
   957   001096  EF4F  F008         	goto	u881
   958   00109A  EF51  F008         	goto	u880
   959   00109E                     u881:
   960   00109E  EF8F  F008         	goto	l1832
   961   0010A2                     u880:
   962   0010A2                     
   963                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
   964   0010A2  C01F  F013         	movff	move@mL,reverseOneSquare@mL
   965   0010A6  C020  F014         	movff	move@mR,reverseOneSquare@mR
   966   0010AA  C022  F015         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
   967   0010AE  C023  F016         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
   968   0010B2  C024  F017         	movff	move@straightRamp,reverseOneSquare@straightRamp
   969   0010B6  ECBE  F008         	call	_reverseOneSquare	;wreg free
   970   0010BA                     l1824:
   971                           
   972                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
   973   0010BA  0E05               	movlw	5
   974   0010BC  6E29               	movwf	(??_move+1)^0,c
   975   0010BE  0E0F               	movlw	15
   976   0010C0  6E28               	movwf	??_move^0,c
   977   0010C2  0EF1               	movlw	241
   978   0010C4                     u1067:
   979   0010C4  2EE8               	decfsz	wreg,f,c
   980   0010C6  D7FE               	bra	u1067
   981   0010C8  2E28               	decfsz	??_move^0,f,c
   982   0010CA  D7FC               	bra	u1067
   983   0010CC  2E29               	decfsz	(??_move+1)^0,f,c
   984   0010CE  D7FA               	bra	u1067
   985   0010D0  0000               	nop	
   986   0010D2                     
   987                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
   988   0010D2  C01F  F013         	movff	move@mL,turnLeft@mL
   989   0010D6  C020  F014         	movff	move@mR,turnLeft@mR
   990   0010DA  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
   991   0010DE  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
   992   0010E2  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
   993   0010E6  EC7B  F00A         	call	_turnLeft	;wreg free
   994                           
   995                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
   996   0010EA  0E05               	movlw	5
   997   0010EC  6E29               	movwf	(??_move+1)^0,c
   998   0010EE  0E0F               	movlw	15
   999   0010F0  6E28               	movwf	??_move^0,c
  1000   0010F2  0EF1               	movlw	241
  1001   0010F4                     u1077:
  1002   0010F4  2EE8               	decfsz	wreg,f,c
  1003   0010F6  D7FE               	bra	u1077
  1004   0010F8  2E28               	decfsz	??_move^0,f,c
  1005   0010FA  D7FC               	bra	u1077
  1006   0010FC  2E29               	decfsz	(??_move+1)^0,f,c
  1007   0010FE  D7FA               	bra	u1077
  1008   001100  0000               	nop	
  1009   001102                     
  1010                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1011   001102  C01F  F013         	movff	move@mL,turnLeft@mL
  1012   001106  C020  F014         	movff	move@mR,turnLeft@mR
  1013   00110A  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
  1014   00110E  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
  1015   001112  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
  1016   001116  EC7B  F00A         	call	_turnLeft	;wreg free
  1017   00111A  EF30  F008         	goto	l1818
  1018   00111E                     l1832:
  1019   00111E  0E06               	movlw	6
  1020   001120  1821               	xorwf	move@color^0,w,c
  1021   001122  A4D8               	btfss	status,2,c
  1022   001124  EF96  F008         	goto	u891
  1023   001128  EF98  F008         	goto	u890
  1024   00112C                     u891:
  1025   00112C  EFA6  F008         	goto	l1844
  1026   001130                     u890:
  1027   001130                     
  1028                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1029   001130  C01F  F013         	movff	move@mL,turnRight@mL
  1030   001134  C020  F014         	movff	move@mR,turnRight@mR
  1031   001138  C025  F015         	movff	move@turnSpeed,turnRight@turnSpeed
  1032   00113C  C026  F016         	movff	move@turnDuration,turnRight@turnDuration
  1033   001140  C027  F017         	movff	move@turnRamp,turnRight@turnRamp
  1034   001144  ECA0  F009         	call	_turnRight	;wreg free
  1035   001148  EF00  F008         	goto	l1812
  1036   00114C                     l1844:
  1037   00114C  0E07               	movlw	7
  1038   00114E  1821               	xorwf	move@color^0,w,c
  1039   001150  A4D8               	btfss	status,2,c
  1040   001152  EFAD  F008         	goto	u901
  1041   001156  EFAF  F008         	goto	u900
  1042   00115A                     u901:
  1043   00115A  EFBD  F008         	goto	l131
  1044   00115E                     u900:
  1045   00115E                     
  1046                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1047   00115E  C01F  F013         	movff	move@mL,turnLeft@mL
  1048   001162  C020  F014         	movff	move@mR,turnLeft@mR
  1049   001166  C025  F015         	movff	move@turnSpeed,turnLeft@turnSpeed
  1050   00116A  C026  F016         	movff	move@turnDuration,turnLeft@turnDuration
  1051   00116E  C027  F017         	movff	move@turnRamp,turnLeft@turnRamp
  1052   001172  EC7B  F00A         	call	_turnLeft	;wreg free
  1053   001176  EF5D  F008         	goto	l1824
  1054   00117A                     l131:
  1055   00117A                     l133:
  1056   00117A  0012               	return		;funcret
  1057   00117C                     __end_of_move:
  1058                           	callstack 0
  1059                           
  1060 ;; *************** function _reverseOneSquare *****************
  1061 ;; Defined at:
  1062 ;;		line 263 in file "dc_motor.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1065 ;;		 -> main@motorL(10), 
  1066 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1067 ;;		 -> main@motorR(10), 
  1068 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1069 ;;  reverseDurat    1   21[COMRAM] unsigned char 
  1070 ;;  straightRamp    1   22[COMRAM] unsigned char 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  cur_power       2   28[COMRAM] int 
  1073 ;;  i               2   26[COMRAM] int 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1083 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;Total ram usage:       12 bytes
  1088 ;; Hardware stack levels used: 1
  1089 ;; Hardware stack levels required when called: 2
  1090 ;; This function calls:
  1091 ;;		_setMotorPWM
  1092 ;; This function is called by:
  1093 ;;		_move
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text2
  1098   00117C                     __ptext2:
  1099                           	callstack 0
  1100   00117C                     _reverseOneSquare:
  1101                           	callstack 27
  1102   00117C                     
  1103                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  1104   00117C  5013               	movf	reverseOneSquare@mL^0,w,c
  1105   00117E  6ED9               	movwf	fsr2l,c
  1106   001180  6ADA               	clrf	fsr2h,c
  1107   001182  0E01               	movlw	1
  1108   001184  26D9               	addwf	fsr2l,f,c
  1109   001186  6ADF               	clrf	indf2,c
  1110                           
  1111                           ;dc_motor.c: 266:     mR->direction = 0;
  1112   001188  5014               	movf	reverseOneSquare@mR^0,w,c
  1113   00118A  6ED9               	movwf	fsr2l,c
  1114   00118C  6ADA               	clrf	fsr2h,c
  1115   00118E  0E01               	movlw	1
  1116   001190  26D9               	addwf	fsr2l,f,c
  1117   001192  6ADF               	clrf	indf2,c
  1118   001194                     
  1119                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1120   001194  0E00               	movlw	0
  1121   001196  6E1E               	movwf	(reverseOneSquare@cur_power+1)^0,c
  1122   001198  0E01               	movlw	1
  1123   00119A  6E1D               	movwf	reverseOneSquare@cur_power^0,c
  1124   00119C  EF12  F009         	goto	l1622
  1125   0011A0                     l1608:
  1126                           
  1127                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  1128   0011A0  5013               	movf	reverseOneSquare@mL^0,w,c
  1129   0011A2  6ED9               	movwf	fsr2l,c
  1130   0011A4  6ADA               	clrf	fsr2h,c
  1131   0011A6  5013               	movf	reverseOneSquare@mL^0,w,c
  1132   0011A8  6EE1               	movwf	fsr1l,c
  1133   0011AA  6AE2               	clrf	fsr1h,c
  1134   0011AC  0E09               	movlw	9
  1135   0011AE  26E1               	addwf	fsr1l,f,c
  1136   0011B0  50E7               	movf	indf1,w,c
  1137   0011B2  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1138   0011B4  6EDF               	movwf	indf2,c
  1139                           
  1140                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  1141   0011B6  5014               	movf	reverseOneSquare@mR^0,w,c
  1142   0011B8  6ED9               	movwf	fsr2l,c
  1143   0011BA  6ADA               	clrf	fsr2h,c
  1144   0011BC  5014               	movf	reverseOneSquare@mR^0,w,c
  1145   0011BE  6EE1               	movwf	fsr1l,c
  1146   0011C0  6AE2               	clrf	fsr1h,c
  1147   0011C2  0E09               	movlw	9
  1148   0011C4  26E1               	addwf	fsr1l,f,c
  1149   0011C6  50E7               	movf	indf1,w,c
  1150   0011C8  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1151   0011CA  6EDF               	movwf	indf2,c
  1152   0011CC                     
  1153                           ;dc_motor.c: 272:         setMotorPWM(mL);
  1154   0011CC  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1155   0011D0  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1156   0011D4                     
  1157                           ;dc_motor.c: 273:         setMotorPWM(mR);
  1158   0011D4  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1159   0011D8  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1160   0011DC                     
  1161                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  1162   0011DC  0E00               	movlw	0
  1163   0011DE  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1164   0011E0  0E00               	movlw	0
  1165   0011E2  6E1B               	movwf	reverseOneSquare@i^0,c
  1166   0011E4  EFFE  F008         	goto	l189
  1167   0011E8                     l1616:
  1168                           
  1169                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1170   0011E8  0E68               	movlw	104
  1171   0011EA  6E18               	movwf	??_reverseOneSquare^0,c
  1172   0011EC  0EE4               	movlw	228
  1173   0011EE                     u1087:
  1174   0011EE  2EE8               	decfsz	wreg,f,c
  1175   0011F0  D7FE               	bra	u1087
  1176   0011F2  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1177   0011F4  D7FC               	bra	u1087
  1178   0011F6  D000               	nop2	
  1179   0011F8                     
  1180                           ;dc_motor.c: 276:         }
  1181   0011F8  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1182   0011FA  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1183   0011FC                     l189:
  1184   0011FC  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1185   0011FE  6E18               	movwf	??_reverseOneSquare^0,c
  1186   001200  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1187   001202  5018               	movf	??_reverseOneSquare^0,w,c
  1188   001204  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1189   001206  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1190   001208  0A80               	xorlw	128
  1191   00120A  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1192   00120C  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1193   00120E  0A80               	xorlw	128
  1194   001210  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1195   001212  A0D8               	btfss	status,0,c
  1196   001214  EF0E  F009         	goto	u651
  1197   001218  EF10  F009         	goto	u650
  1198   00121C                     u651:
  1199   00121C  EFF4  F008         	goto	l1616
  1200   001220                     u650:
  1201   001220                     
  1202                           ;dc_motor.c: 277:     }
  1203   001220  4A1D               	infsnz	reverseOneSquare@cur_power^0,f,c
  1204   001222  2A1E               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  1205   001224                     l1622:
  1206   001224  5015               	movf	reverseOneSquare@straightSpeed^0,w,c
  1207   001226  6E18               	movwf	??_reverseOneSquare^0,c
  1208   001228  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1209   00122A  501D               	movf	reverseOneSquare@cur_power^0,w,c
  1210   00122C  5C18               	subwf	??_reverseOneSquare^0,w,c
  1211   00122E  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1212   001230  0A80               	xorlw	128
  1213   001232  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1214   001234  501E               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  1215   001236  0A80               	xorlw	128
  1216   001238  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1217   00123A  B0D8               	btfsc	status,0,c
  1218   00123C  EF22  F009         	goto	u661
  1219   001240  EF24  F009         	goto	u660
  1220   001244                     u661:
  1221   001244  EFD0  F008         	goto	l1608
  1222   001248                     u660:
  1223   001248                     
  1224                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  1225   001248  0E00               	movlw	0
  1226   00124A  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1227   00124C  0E00               	movlw	0
  1228   00124E  6E1B               	movwf	reverseOneSquare@i^0,c
  1229   001250  EF34  F009         	goto	l193
  1230   001254                     l1626:
  1231                           
  1232                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1233   001254  0E68               	movlw	104
  1234   001256  6E18               	movwf	??_reverseOneSquare^0,c
  1235   001258  0EE4               	movlw	228
  1236   00125A                     u1097:
  1237   00125A  2EE8               	decfsz	wreg,f,c
  1238   00125C  D7FE               	bra	u1097
  1239   00125E  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1240   001260  D7FC               	bra	u1097
  1241   001262  D000               	nop2	
  1242   001264                     
  1243                           ;dc_motor.c: 281:         }
  1244   001264  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1245   001266  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1246   001268                     l193:
  1247   001268  5016               	movf	reverseOneSquare@reverseDuration^0,w,c
  1248   00126A  6E18               	movwf	??_reverseOneSquare^0,c
  1249   00126C  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1250   00126E  5018               	movf	??_reverseOneSquare^0,w,c
  1251   001270  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1252   001272  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1253   001274  0A80               	xorlw	128
  1254   001276  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1255   001278  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1256   00127A  0A80               	xorlw	128
  1257   00127C  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1258   00127E  A0D8               	btfss	status,0,c
  1259   001280  EF44  F009         	goto	u671
  1260   001284  EF46  F009         	goto	u670
  1261   001288                     u671:
  1262   001288  EF2A  F009         	goto	l1626
  1263   00128C                     u670:
  1264   00128C                     
  1265                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  1266   00128C  C015  F01D         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  1267   001290  6A1E               	clrf	(reverseOneSquare@cur_power+1)^0,c
  1268   001292                     l1630:
  1269   001292  BE1E               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  1270   001294  EF50  F009         	goto	u680
  1271   001298  EF4E  F009         	goto	u681
  1272   00129C                     u681:
  1273   00129C  EF52  F009         	goto	l1634
  1274   0012A0                     u680:
  1275   0012A0  EF97  F009         	goto	l1650
  1276   0012A4                     l1634:
  1277                           
  1278                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  1279   0012A4  5013               	movf	reverseOneSquare@mL^0,w,c
  1280   0012A6  6ED9               	movwf	fsr2l,c
  1281   0012A8  6ADA               	clrf	fsr2h,c
  1282   0012AA  5013               	movf	reverseOneSquare@mL^0,w,c
  1283   0012AC  6EE1               	movwf	fsr1l,c
  1284   0012AE  6AE2               	clrf	fsr1h,c
  1285   0012B0  0E09               	movlw	9
  1286   0012B2  26E1               	addwf	fsr1l,f,c
  1287   0012B4  50E7               	movf	indf1,w,c
  1288   0012B6  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1289   0012B8  6EDF               	movwf	indf2,c
  1290                           
  1291                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  1292   0012BA  5014               	movf	reverseOneSquare@mR^0,w,c
  1293   0012BC  6ED9               	movwf	fsr2l,c
  1294   0012BE  6ADA               	clrf	fsr2h,c
  1295   0012C0  5014               	movf	reverseOneSquare@mR^0,w,c
  1296   0012C2  6EE1               	movwf	fsr1l,c
  1297   0012C4  6AE2               	clrf	fsr1h,c
  1298   0012C6  0E09               	movlw	9
  1299   0012C8  26E1               	addwf	fsr1l,f,c
  1300   0012CA  50E7               	movf	indf1,w,c
  1301   0012CC  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1302   0012CE  6EDF               	movwf	indf2,c
  1303   0012D0                     
  1304                           ;dc_motor.c: 286:         setMotorPWM(mL);
  1305   0012D0  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1306   0012D4  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1307   0012D8                     
  1308                           ;dc_motor.c: 287:         setMotorPWM(mR);
  1309   0012D8  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1310   0012DC  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1311   0012E0                     
  1312                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  1313   0012E0  0E00               	movlw	0
  1314   0012E2  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1315   0012E4  0E00               	movlw	0
  1316   0012E6  6E1B               	movwf	reverseOneSquare@i^0,c
  1317   0012E8  EF80  F009         	goto	l198
  1318   0012EC                     l1642:
  1319                           
  1320                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1321   0012EC  0E68               	movlw	104
  1322   0012EE  6E18               	movwf	??_reverseOneSquare^0,c
  1323   0012F0  0EE4               	movlw	228
  1324   0012F2                     u1107:
  1325   0012F2  2EE8               	decfsz	wreg,f,c
  1326   0012F4  D7FE               	bra	u1107
  1327   0012F6  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1328   0012F8  D7FC               	bra	u1107
  1329   0012FA  D000               	nop2	
  1330   0012FC                     
  1331                           ;dc_motor.c: 290:         }
  1332   0012FC  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1333   0012FE  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1334   001300                     l198:
  1335   001300  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1336   001302  6E18               	movwf	??_reverseOneSquare^0,c
  1337   001304  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1338   001306  5018               	movf	??_reverseOneSquare^0,w,c
  1339   001308  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1340   00130A  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1341   00130C  0A80               	xorlw	128
  1342   00130E  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1343   001310  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1344   001312  0A80               	xorlw	128
  1345   001314  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1346   001316  A0D8               	btfss	status,0,c
  1347   001318  EF90  F009         	goto	u691
  1348   00131C  EF92  F009         	goto	u690
  1349   001320                     u691:
  1350   001320  EF76  F009         	goto	l1642
  1351   001324                     u690:
  1352   001324                     
  1353                           ;dc_motor.c: 291:     }
  1354   001324  061D               	decf	reverseOneSquare@cur_power^0,f,c
  1355   001326  A0D8               	btfss	status,0,c
  1356   001328  061E               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  1357   00132A  EF49  F009         	goto	l1630
  1358   00132E                     l1650:
  1359                           
  1360                           ;dc_motor.c: 292:     mL->power = 0;
  1361   00132E  5013               	movf	reverseOneSquare@mL^0,w,c
  1362   001330  6ED9               	movwf	fsr2l,c
  1363   001332  6ADA               	clrf	fsr2h,c
  1364   001334  6ADF               	clrf	indf2,c
  1365                           
  1366                           ;dc_motor.c: 293:     mR->power = 0;
  1367   001336  5014               	movf	reverseOneSquare@mR^0,w,c
  1368   001338  6ED9               	movwf	fsr2l,c
  1369   00133A  6ADA               	clrf	fsr2h,c
  1370   00133C  6ADF               	clrf	indf2,c
  1371   00133E  0012               	return		;funcret
  1372   001340                     __end_of_reverseOneSquare:
  1373                           	callstack 0
  1374                           
  1375 ;; *************** function _fullSpeedAhead *****************
  1376 ;; Defined at:
  1377 ;;		line 246 in file "dc_motor.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1380 ;;		 -> main@motorL(10), 
  1381 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1382 ;;		 -> main@motorR(10), 
  1383 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1384 ;;  straightRamp    1   21[COMRAM] unsigned char 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  cur_power       2   27[COMRAM] int 
  1387 ;;  i               2   25[COMRAM] int 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1399 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1400 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1401 ;;Total ram usage:       11 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; Hardware stack levels required when called: 2
  1404 ;; This function calls:
  1405 ;;		_setMotorPWM
  1406 ;; This function is called by:
  1407 ;;		_move
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text3
  1412   001A58                     __ptext3:
  1413                           	callstack 0
  1414   001A58                     _fullSpeedAhead:
  1415                           	callstack 27
  1416   001A58                     
  1417                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  1418   001A58  5013               	movf	fullSpeedAhead@mL^0,w,c
  1419   001A5A  6ED9               	movwf	fsr2l,c
  1420   001A5C  6ADA               	clrf	fsr2h,c
  1421   001A5E  0E01               	movlw	1
  1422   001A60  26D9               	addwf	fsr2l,f,c
  1423   001A62  0E01               	movlw	1
  1424   001A64  6EDF               	movwf	indf2,c
  1425                           
  1426                           ;dc_motor.c: 249:     mR->direction = 1;
  1427   001A66  5014               	movf	fullSpeedAhead@mR^0,w,c
  1428   001A68  6ED9               	movwf	fsr2l,c
  1429   001A6A  6ADA               	clrf	fsr2h,c
  1430   001A6C  0E01               	movlw	1
  1431   001A6E  26D9               	addwf	fsr2l,f,c
  1432   001A70  0E01               	movlw	1
  1433   001A72  6EDF               	movwf	indf2,c
  1434   001A74                     
  1435                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1436   001A74  0E00               	movlw	0
  1437   001A76  6E1D               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  1438   001A78  0E01               	movlw	1
  1439   001A7A  6E1C               	movwf	fullSpeedAhead@cur_power^0,c
  1440   001A7C  EF82  F00D         	goto	l1556
  1441   001A80                     l1542:
  1442                           
  1443                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  1444   001A80  5013               	movf	fullSpeedAhead@mL^0,w,c
  1445   001A82  6ED9               	movwf	fsr2l,c
  1446   001A84  6ADA               	clrf	fsr2h,c
  1447   001A86  5013               	movf	fullSpeedAhead@mL^0,w,c
  1448   001A88  6EE1               	movwf	fsr1l,c
  1449   001A8A  6AE2               	clrf	fsr1h,c
  1450   001A8C  0E09               	movlw	9
  1451   001A8E  26E1               	addwf	fsr1l,f,c
  1452   001A90  50E7               	movf	indf1,w,c
  1453   001A92  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1454   001A94  6EDF               	movwf	indf2,c
  1455                           
  1456                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  1457   001A96  5014               	movf	fullSpeedAhead@mR^0,w,c
  1458   001A98  6ED9               	movwf	fsr2l,c
  1459   001A9A  6ADA               	clrf	fsr2h,c
  1460   001A9C  5014               	movf	fullSpeedAhead@mR^0,w,c
  1461   001A9E  6EE1               	movwf	fsr1l,c
  1462   001AA0  6AE2               	clrf	fsr1h,c
  1463   001AA2  0E09               	movlw	9
  1464   001AA4  26E1               	addwf	fsr1l,f,c
  1465   001AA6  50E7               	movf	indf1,w,c
  1466   001AA8  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1467   001AAA  6EDF               	movwf	indf2,c
  1468   001AAC                     
  1469                           ;dc_motor.c: 255:         setMotorPWM(mL);
  1470   001AAC  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1471   001AB0  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1472   001AB4                     
  1473                           ;dc_motor.c: 256:         setMotorPWM(mR);
  1474   001AB4  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1475   001AB8  EC0E  F00C         	call	_setMotorPWM	;wreg free
  1476   001ABC                     
  1477                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  1478   001ABC  0E00               	movlw	0
  1479   001ABE  6E1B               	movwf	(fullSpeedAhead@i+1)^0,c
  1480   001AC0  0E00               	movlw	0
  1481   001AC2  6E1A               	movwf	fullSpeedAhead@i^0,c
  1482   001AC4  EF6E  F00D         	goto	l180
  1483   001AC8                     l1550:
  1484                           
  1485                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1486   001AC8  0E68               	movlw	104
  1487   001ACA  6E17               	movwf	??_fullSpeedAhead^0,c
  1488   001ACC  0EE4               	movlw	228
  1489   001ACE                     u1117:
  1490   001ACE  2EE8               	decfsz	wreg,f,c
  1491   001AD0  D7FE               	bra	u1117
  1492   001AD2  2E17               	decfsz	??_fullSpeedAhead^0,f,c
  1493   001AD4  D7FC               	bra	u1117
  1494   001AD6  D000               	nop2	
  1495   001AD8                     
  1496                           ;dc_motor.c: 259:         }
  1497   001AD8  4A1A               	infsnz	fullSpeedAhead@i^0,f,c
  1498   001ADA  2A1B               	incf	(fullSpeedAhead@i+1)^0,f,c
  1499   001ADC                     l180:
  1500   001ADC  5016               	movf	fullSpeedAhead@straightRamp^0,w,c
  1501   001ADE  6E17               	movwf	??_fullSpeedAhead^0,c
  1502   001AE0  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1503   001AE2  5017               	movf	??_fullSpeedAhead^0,w,c
  1504   001AE4  5C1A               	subwf	fullSpeedAhead@i^0,w,c
  1505   001AE6  501B               	movf	(fullSpeedAhead@i+1)^0,w,c
  1506   001AE8  0A80               	xorlw	128
  1507   001AEA  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1508   001AEC  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1509   001AEE  0A80               	xorlw	128
  1510   001AF0  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1511   001AF2  A0D8               	btfss	status,0,c
  1512   001AF4  EF7E  F00D         	goto	u581
  1513   001AF8  EF80  F00D         	goto	u580
  1514   001AFC                     u581:
  1515   001AFC  EF64  F00D         	goto	l1550
  1516   001B00                     u580:
  1517   001B00                     
  1518                           ;dc_motor.c: 260:     }
  1519   001B00  4A1C               	infsnz	fullSpeedAhead@cur_power^0,f,c
  1520   001B02  2A1D               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  1521   001B04                     l1556:
  1522   001B04  5015               	movf	fullSpeedAhead@straightSpeed^0,w,c
  1523   001B06  6E17               	movwf	??_fullSpeedAhead^0,c
  1524   001B08  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1525   001B0A  501C               	movf	fullSpeedAhead@cur_power^0,w,c
  1526   001B0C  5C17               	subwf	??_fullSpeedAhead^0,w,c
  1527   001B0E  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1528   001B10  0A80               	xorlw	128
  1529   001B12  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1530   001B14  501D               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  1531   001B16  0A80               	xorlw	128
  1532   001B18  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1533   001B1A  B0D8               	btfsc	status,0,c
  1534   001B1C  EF92  F00D         	goto	u591
  1535   001B20  EF94  F00D         	goto	u590
  1536   001B24                     u591:
  1537   001B24  EF40  F00D         	goto	l1542
  1538   001B28                     u590:
  1539   001B28  0012               	return		;funcret
  1540   001B2A                     __end_of_fullSpeedAhead:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _initDCmotorsPWM *****************
  1544 ;; Defined at:
  1545 ;;		line 5 in file "dc_motor.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1563 ;;Total ram usage:        2 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text4
  1573   001BEE                     __ptext4:
  1574                           	callstack 0
  1575   001BEE                     _initDCmotorsPWM:
  1576                           	callstack 30
  1577   001BEE                     
  1578                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  1579   001BEE  947D               	bcf	125,2,c	;volatile
  1580                           
  1581                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  1582   001BF0  9485               	bcf	133,2,c	;volatile
  1583                           
  1584                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  1585   001BF2  987D               	bcf	125,4,c	;volatile
  1586                           
  1587                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  1588   001BF4  9885               	bcf	133,4,c	;volatile
  1589                           
  1590                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  1591   001BF6  9E7B               	bcf	123,7,c	;volatile
  1592                           
  1593                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  1594   001BF8  9E83               	bcf	131,7,c	;volatile
  1595                           
  1596                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  1597   001BFA  9C7F               	bcf	127,6,c	;volatile
  1598                           
  1599                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  1600   001BFC  9C87               	bcf	135,6,c	;volatile
  1601   001BFE                     
  1602                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1603   001BFE  0E05               	movlw	5
  1604   001C00  010E               	movlb	14	; () banked
  1605   001C02  6F74               	movwf	116,b	;volatile
  1606                           
  1607                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1608   001C04  0E06               	movlw	6
  1609   001C06  6F76               	movwf	118,b	;volatile
  1610                           
  1611                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1612   001C08  0E07               	movlw	7
  1613   001C0A  6F69               	movwf	105,b	;volatile
  1614                           
  1615                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1616   001C0C  0E08               	movlw	8
  1617   001C0E  6F88               	movwf	136,b	;volatile
  1618                           
  1619                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  1620   001C10  50BD               	movf	189,w,c	;volatile
  1621   001C12  0B8F               	andlw	-113
  1622   001C14  0930               	iorlw	48
  1623   001C16  6EBD               	movwf	189,c	;volatile
  1624                           
  1625                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1626   001C18  0EE0               	movlw	-32
  1627   001C1A  16BE               	andwf	190,f,c	;volatile
  1628                           
  1629                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1630   001C1C  50BF               	movf	191,w,c	;volatile
  1631   001C1E  0BF0               	andlw	-16
  1632   001C20  0901               	iorlw	1
  1633   001C22  6EBF               	movwf	191,c	;volatile
  1634   001C24                     
  1635                           ; BSR set to: 14
  1636                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1637   001C24  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1638   001C28                     
  1639                           ; BSR set to: 14
  1640                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1641   001C28  8EBD               	bsf	189,7,c	;volatile
  1642                           
  1643                           ;dc_motor.c: 35:     CCPR1H=0;
  1644   001C2A  0E00               	movlw	0
  1645   001C2C  6EAA               	movwf	170,c	;volatile
  1646                           
  1647                           ;dc_motor.c: 36:     CCPR2H=0;
  1648   001C2E  0E00               	movlw	0
  1649   001C30  6EA6               	movwf	166,c	;volatile
  1650                           
  1651                           ;dc_motor.c: 37:     CCPR3H=0;
  1652   001C32  0E00               	movlw	0
  1653   001C34  010F               	movlb	15	; () banked
  1654   001C36  6F25               	movwf	37,b	;volatile
  1655                           
  1656                           ;dc_motor.c: 38:     CCPR4H=0;
  1657   001C38  0E00               	movlw	0
  1658   001C3A  6F21               	movwf	33,b	;volatile
  1659                           
  1660                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1661   001C3C  0EFC               	movlw	-4
  1662   001C3E  16AD               	andwf	173,f,c	;volatile
  1663                           
  1664                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1665   001C40  0EF3               	movlw	-13
  1666   001C42  16AD               	andwf	173,f,c	;volatile
  1667                           
  1668                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1669   001C44  0ECF               	movlw	-49
  1670   001C46  16AD               	andwf	173,f,c	;volatile
  1671                           
  1672                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1673   001C48  0E3F               	movlw	-193
  1674   001C4A  16AD               	andwf	173,f,c	;volatile
  1675   001C4C                     
  1676                           ; BSR set to: 15
  1677                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1678   001C4C  88AB               	bsf	171,4,c	;volatile
  1679                           
  1680                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1681   001C4E  50AB               	movf	171,w,c	;volatile
  1682   001C50  0BF0               	andlw	-16
  1683   001C52  090C               	iorlw	12
  1684   001C54  6EAB               	movwf	171,c	;volatile
  1685   001C56                     
  1686                           ; BSR set to: 15
  1687                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1688   001C56  8EAB               	bsf	171,7,c	;volatile
  1689   001C58                     
  1690                           ; BSR set to: 15
  1691                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1692   001C58  88A7               	bsf	167,4,c	;volatile
  1693                           
  1694                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1695   001C5A  50A7               	movf	167,w,c	;volatile
  1696   001C5C  0BF0               	andlw	-16
  1697   001C5E  090C               	iorlw	12
  1698   001C60  6EA7               	movwf	167,c	;volatile
  1699   001C62                     
  1700                           ; BSR set to: 15
  1701                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1702   001C62  8EA7               	bsf	167,7,c	;volatile
  1703   001C64                     
  1704                           ; BSR set to: 15
  1705                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1706   001C64  8926               	bsf	38,4,b	;volatile
  1707                           
  1708                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1709   001C66  5126               	movf	38,w,b	;volatile
  1710   001C68  0BF0               	andlw	-16
  1711   001C6A  090C               	iorlw	12
  1712   001C6C  6F26               	movwf	38,b	;volatile
  1713   001C6E                     
  1714                           ; BSR set to: 15
  1715                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1716   001C6E  8F26               	bsf	38,7,b	;volatile
  1717   001C70                     
  1718                           ; BSR set to: 15
  1719                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1720   001C70  8922               	bsf	34,4,b	;volatile
  1721                           
  1722                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1723   001C72  5122               	movf	34,w,b	;volatile
  1724   001C74  0BF0               	andlw	-16
  1725   001C76  090C               	iorlw	12
  1726   001C78  6F22               	movwf	34,b	;volatile
  1727   001C7A                     
  1728                           ; BSR set to: 15
  1729                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1730   001C7A  8F22               	bsf	34,7,b	;volatile
  1731   001C7C                     
  1732                           ; BSR set to: 15
  1733   001C7C  0012               	return		;funcret
  1734   001C7E                     __end_of_initDCmotorsPWM:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _calibration *****************
  1738 ;; Defined at:
  1739 ;;		line 296 in file "dc_motor.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  1742 ;;		 -> main@motorL(10), 
  1743 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  1744 ;;		 -> main@motorR(10), 
  1745 ;;  turnSpeed       1   32[COMRAM] unsigned char 
  1746 ;;  turnDuration    1   33[COMRAM] PTR unsigned char 
  1747 ;;		 -> main@turnDuration(1), 
  1748 ;;  turnRamp        1   34[COMRAM] unsigned char 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1760 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;Total ram usage:        7 bytes
  1765 ;; Hardware stack levels used: 1
  1766 ;; Hardware stack levels required when called: 3
  1767 ;; This function calls:
  1768 ;;		_turnLeft
  1769 ;;		_turnRight
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text5
  1776   0016AC                     __ptext5:
  1777                           	callstack 0
  1778   0016AC                     _calibration:
  1779                           	callstack 27
  1780   0016AC                     l1730:
  1781                           
  1782                           ;dc_motor.c: 296: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 297: {;dc_motor.c: 299:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1783   0016AC  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1784   0016B0  C020  F014         	movff	calibration@mR,turnLeft@mR
  1785   0016B4  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1786   0016B8  5022               	movf	calibration@turnDuration^0,w,c
  1787   0016BA  6ED9               	movwf	fsr2l,c
  1788   0016BC  6ADA               	clrf	fsr2h,c
  1789   0016BE  50DF               	movf	indf2,w,c
  1790   0016C0  6E16               	movwf	turnLeft@turnDuration^0,c
  1791   0016C2  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1792   0016C6  EC7B  F00A         	call	_turnLeft	;wreg free
  1793   0016CA                     
  1794                           ;dc_motor.c: 300:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1795   0016CA  0E05               	movlw	5
  1796   0016CC  6E25               	movwf	(??_calibration+1)^0,c
  1797   0016CE  0E0F               	movlw	15
  1798   0016D0  6E24               	movwf	??_calibration^0,c
  1799   0016D2  0EF1               	movlw	241
  1800   0016D4                     u1127:
  1801   0016D4  2EE8               	decfsz	wreg,f,c
  1802   0016D6  D7FE               	bra	u1127
  1803   0016D8  2E24               	decfsz	??_calibration^0,f,c
  1804   0016DA  D7FC               	bra	u1127
  1805   0016DC  2E25               	decfsz	(??_calibration+1)^0,f,c
  1806   0016DE  D7FA               	bra	u1127
  1807   0016E0  0000               	nop	
  1808   0016E2                     
  1809                           ;dc_motor.c: 301:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1810   0016E2  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1811   0016E6  C020  F014         	movff	calibration@mR,turnLeft@mR
  1812   0016EA  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1813   0016EE  5022               	movf	calibration@turnDuration^0,w,c
  1814   0016F0  6ED9               	movwf	fsr2l,c
  1815   0016F2  6ADA               	clrf	fsr2h,c
  1816   0016F4  50DF               	movf	indf2,w,c
  1817   0016F6  6E16               	movwf	turnLeft@turnDuration^0,c
  1818   0016F8  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1819   0016FC  EC7B  F00A         	call	_turnLeft	;wreg free
  1820                           
  1821                           ;dc_motor.c: 302:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1822   001700  0E05               	movlw	5
  1823   001702  6E25               	movwf	(??_calibration+1)^0,c
  1824   001704  0E0F               	movlw	15
  1825   001706  6E24               	movwf	??_calibration^0,c
  1826   001708  0EF1               	movlw	241
  1827   00170A                     u1137:
  1828   00170A  2EE8               	decfsz	wreg,f,c
  1829   00170C  D7FE               	bra	u1137
  1830   00170E  2E24               	decfsz	??_calibration^0,f,c
  1831   001710  D7FC               	bra	u1137
  1832   001712  2E25               	decfsz	(??_calibration+1)^0,f,c
  1833   001714  D7FA               	bra	u1137
  1834   001716  0000               	nop	
  1835   001718                     
  1836                           ;dc_motor.c: 303:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1837   001718  C01F  F013         	movff	calibration@mL,turnRight@mL
  1838   00171C  C020  F014         	movff	calibration@mR,turnRight@mR
  1839   001720  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1840   001724  5022               	movf	calibration@turnDuration^0,w,c
  1841   001726  6ED9               	movwf	fsr2l,c
  1842   001728  6ADA               	clrf	fsr2h,c
  1843   00172A  50DF               	movf	indf2,w,c
  1844   00172C  6E16               	movwf	turnRight@turnDuration^0,c
  1845   00172E  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1846   001732  ECA0  F009         	call	_turnRight	;wreg free
  1847   001736                     
  1848                           ;dc_motor.c: 304:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1849   001736  0E05               	movlw	5
  1850   001738  6E25               	movwf	(??_calibration+1)^0,c
  1851   00173A  0E0F               	movlw	15
  1852   00173C  6E24               	movwf	??_calibration^0,c
  1853   00173E  0EF1               	movlw	241
  1854   001740                     u1147:
  1855   001740  2EE8               	decfsz	wreg,f,c
  1856   001742  D7FE               	bra	u1147
  1857   001744  2E24               	decfsz	??_calibration^0,f,c
  1858   001746  D7FC               	bra	u1147
  1859   001748  2E25               	decfsz	(??_calibration+1)^0,f,c
  1860   00174A  D7FA               	bra	u1147
  1861   00174C  0000               	nop	
  1862                           
  1863                           ;dc_motor.c: 305:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1864   00174E  C01F  F013         	movff	calibration@mL,turnRight@mL
  1865   001752  C020  F014         	movff	calibration@mR,turnRight@mR
  1866   001756  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1867   00175A  5022               	movf	calibration@turnDuration^0,w,c
  1868   00175C  6ED9               	movwf	fsr2l,c
  1869   00175E  6ADA               	clrf	fsr2h,c
  1870   001760  50DF               	movf	indf2,w,c
  1871   001762  6E16               	movwf	turnRight@turnDuration^0,c
  1872   001764  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1873   001768  ECA0  F009         	call	_turnRight	;wreg free
  1874   00176C                     l205:
  1875   00176C  A48E               	btfss	142,2,c	;volatile
  1876   00176E  EFBB  F00B         	goto	u781
  1877   001772  EFBD  F00B         	goto	u780
  1878   001776                     u781:
  1879   001776  EFC4  F00B         	goto	l209
  1880   00177A                     u780:
  1881   00177A  B68E               	btfsc	142,3,c	;volatile
  1882   00177C  EFC2  F00B         	goto	u791
  1883   001780  EFC4  F00B         	goto	u790
  1884   001784                     u791:
  1885   001784  EFB6  F00B         	goto	l205
  1886   001788                     u790:
  1887   001788                     l209:
  1888                           
  1889                           ;dc_motor.c: 310:         if (!PORTFbits.RF2 && *turnDuration>0) {
  1890   001788  B48E               	btfsc	142,2,c	;volatile
  1891   00178A  EFC9  F00B         	goto	u801
  1892   00178E  EFCB  F00B         	goto	u800
  1893   001792                     u801:
  1894   001792  EFDA  F00B         	goto	l210
  1895   001796                     u800:
  1896   001796  5022               	movf	calibration@turnDuration^0,w,c
  1897   001798  6ED9               	movwf	fsr2l,c
  1898   00179A  6ADA               	clrf	fsr2h,c
  1899   00179C  50DF               	movf	indf2,w,c
  1900   00179E  B4D8               	btfsc	status,2,c
  1901   0017A0  EFD4  F00B         	goto	u811
  1902   0017A4  EFD6  F00B         	goto	u810
  1903   0017A8                     u811:
  1904   0017A8  EFDA  F00B         	goto	l210
  1905   0017AC                     u810:
  1906   0017AC                     
  1907                           ;dc_motor.c: 311:             *turnDuration--;
  1908   0017AC  0622               	decf	calibration@turnDuration^0,f,c
  1909   0017AE                     
  1910                           ;dc_motor.c: 312:             LATDbits.LATD7 = 1;
  1911   0017AE  8E7C               	bsf	124,7,c	;volatile
  1912                           
  1913                           ;dc_motor.c: 313:         }
  1914   0017B0  EFE3  F00B         	goto	l1752
  1915   0017B4                     l210:
  1916   0017B4  B68E               	btfsc	142,3,c	;volatile
  1917   0017B6  EFDF  F00B         	goto	u821
  1918   0017BA  EFE1  F00B         	goto	u820
  1919   0017BE                     u821:
  1920   0017BE  EFE3  F00B         	goto	l1752
  1921   0017C2                     u820:
  1922   0017C2                     
  1923                           ;dc_motor.c: 316:             *turnDuration++;
  1924   0017C2  2A22               	incf	calibration@turnDuration^0,f,c
  1925   0017C4                     
  1926                           ;dc_motor.c: 317:             LATHbits.LATH3 = 1;
  1927   0017C4  8680               	bsf	128,3,c	;volatile
  1928   0017C6                     l1752:
  1929                           
  1930                           ;dc_motor.c: 320:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1931   0017C6  0E29               	movlw	41
  1932   0017C8  6E25               	movwf	(??_calibration+1)^0,c
  1933   0017CA  0E96               	movlw	150
  1934   0017CC  6E24               	movwf	??_calibration^0,c
  1935   0017CE  0E7F               	movlw	127
  1936   0017D0                     u1157:
  1937   0017D0  2EE8               	decfsz	wreg,f,c
  1938   0017D2  D7FE               	bra	u1157
  1939   0017D4  2E24               	decfsz	??_calibration^0,f,c
  1940   0017D6  D7FC               	bra	u1157
  1941   0017D8  2E25               	decfsz	(??_calibration+1)^0,f,c
  1942   0017DA  D7FA               	bra	u1157
  1943   0017DC  0000               	nop	
  1944   0017DE                     
  1945                           ;dc_motor.c: 322:         if (!PORTFbits.RF3) {
  1946   0017DE  B68E               	btfsc	142,3,c	;volatile
  1947   0017E0  EFF4  F00B         	goto	u831
  1948   0017E4  EFF6  F00B         	goto	u830
  1949   0017E8                     u831:
  1950   0017E8  EFF9  F00B         	goto	l213
  1951   0017EC                     u830:
  1952   0017EC                     
  1953                           ;dc_motor.c: 323:             *turnDuration--;
  1954   0017EC  0622               	decf	calibration@turnDuration^0,f,c
  1955                           
  1956                           ;dc_motor.c: 324:             break;
  1957   0017EE  EFFD  F00B         	goto	l214
  1958   0017F2                     l213:
  1959                           
  1960                           ;dc_motor.c: 327:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1961   0017F2  9680               	bcf	128,3,c	;volatile
  1962   0017F4  9E7C               	bcf	124,7,c	;volatile
  1963   0017F6  EF56  F00B         	goto	l1730
  1964   0017FA                     l214:
  1965                           
  1966                           ;dc_motor.c: 341:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1967   0017FA  8680               	bsf	128,3,c	;volatile
  1968   0017FC  8E7C               	bsf	124,7,c	;volatile
  1969   0017FE                     
  1970                           ;dc_motor.c: 342:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1971   0017FE  0E09               	movlw	9
  1972   001800  6E25               	movwf	(??_calibration+1)^0,c
  1973   001802  0E1E               	movlw	30
  1974   001804  6E24               	movwf	??_calibration^0,c
  1975   001806  0EE4               	movlw	228
  1976   001808                     u1167:
  1977   001808  2EE8               	decfsz	wreg,f,c
  1978   00180A  D7FE               	bra	u1167
  1979   00180C  2E24               	decfsz	??_calibration^0,f,c
  1980   00180E  D7FC               	bra	u1167
  1981   001810  2E25               	decfsz	(??_calibration+1)^0,f,c
  1982   001812  D7FA               	bra	u1167
  1983   001814  D000               	nop2	
  1984   001816                     
  1985                           ;dc_motor.c: 343:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1986   001816  9680               	bcf	128,3,c	;volatile
  1987   001818  9E7C               	bcf	124,7,c	;volatile
  1988   00181A  0012               	return		;funcret
  1989   00181C                     __end_of_calibration:
  1990                           	callstack 0
  1991                           
  1992 ;; *************** function _turnRight *****************
  1993 ;; Defined at:
  1994 ;;		line 214 in file "dc_motor.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1997 ;;		 -> main@motorL(10), 
  1998 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1999 ;;		 -> main@motorR(10), 
  2000 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  2001 ;;  turnDuration    1   21[COMRAM] unsigned char 
  2002 ;;  turnRamp        1   22[COMRAM] unsigned char 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  cur_power       2   28[COMRAM] int 
  2005 ;;  i               2   26[COMRAM] int 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      void 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2015 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2018 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2019 ;;Total ram usage:       12 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; Hardware stack levels required when called: 2
  2022 ;; This function calls:
  2023 ;;		_setMotorPWM
  2024 ;; This function is called by:
  2025 ;;		_move
  2026 ;;		_calibration
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text6
  2031   001340                     __ptext6:
  2032                           	callstack 0
  2033   001340                     _turnRight:
  2034                           	callstack 27
  2035   001340                     
  2036                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  2037   001340  5013               	movf	turnRight@mL^0,w,c
  2038   001342  6ED9               	movwf	fsr2l,c
  2039   001344  6ADA               	clrf	fsr2h,c
  2040   001346  0E01               	movlw	1
  2041   001348  26D9               	addwf	fsr2l,f,c
  2042   00134A  0E01               	movlw	1
  2043   00134C  6EDF               	movwf	indf2,c
  2044                           
  2045                           ;dc_motor.c: 217:     mR->direction = 0;
  2046   00134E  5014               	movf	turnRight@mR^0,w,c
  2047   001350  6ED9               	movwf	fsr2l,c
  2048   001352  6ADA               	clrf	fsr2h,c
  2049   001354  0E01               	movlw	1
  2050   001356  26D9               	addwf	fsr2l,f,c
  2051   001358  6ADF               	clrf	indf2,c
  2052   00135A                     
  2053                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2054   00135A  0E00               	movlw	0
  2055   00135C  6E1E               	movwf	(turnRight@cur_power+1)^0,c
  2056   00135E  0E01               	movlw	1
  2057   001360  6E1D               	movwf	turnRight@cur_power^0,c
  2058   001362  EFF5  F009         	goto	l1510
  2059   001366                     l1496:
  2060                           
  2061                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  2062   001366  5013               	movf	turnRight@mL^0,w,c
  2063   001368  6ED9               	movwf	fsr2l,c
  2064   00136A  6ADA               	clrf	fsr2h,c
  2065   00136C  5013               	movf	turnRight@mL^0,w,c
  2066   00136E  6EE1               	movwf	fsr1l,c
  2067   001370  6AE2               	clrf	fsr1h,c
  2068   001372  0E09               	movlw	9
  2069   001374  26E1               	addwf	fsr1l,f,c
  2070   001376  50E7               	movf	indf1,w,c
  2071   001378  241D               	addwf	turnRight@cur_power^0,w,c
  2072   00137A  6EDF               	movwf	indf2,c
  2073                           
  2074                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  2075   00137C  5014               	movf	turnRight@mR^0,w,c
  2076   00137E  6ED9               	movwf	fsr2l,c
  2077   001380  6ADA               	clrf	fsr2h,c
  2078   001382  5014               	movf	turnRight@mR^0,w,c
  2079   001384  6EE1               	movwf	fsr1l,c
  2080   001386  6AE2               	clrf	fsr1h,c
  2081   001388  0E09               	movlw	9
  2082   00138A  26E1               	addwf	fsr1l,f,c
  2083   00138C  50E7               	movf	indf1,w,c
  2084   00138E  241D               	addwf	turnRight@cur_power^0,w,c
  2085   001390  6EDF               	movwf	indf2,c
  2086   001392                     
  2087                           ;dc_motor.c: 223:         setMotorPWM(mL);
  2088   001392  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  2089   001396  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2090   00139A                     
  2091                           ;dc_motor.c: 224:         setMotorPWM(mR);
  2092   00139A  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  2093   00139E  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2094   0013A2                     
  2095                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  2096   0013A2  0E00               	movlw	0
  2097   0013A4  6E1C               	movwf	(turnRight@i+1)^0,c
  2098   0013A6  0E00               	movlw	0
  2099   0013A8  6E1B               	movwf	turnRight@i^0,c
  2100   0013AA  EFE1  F009         	goto	l163
  2101   0013AE                     l1504:
  2102                           
  2103                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2104   0013AE  0E68               	movlw	104
  2105   0013B0  6E18               	movwf	??_turnRight^0,c
  2106   0013B2  0EE4               	movlw	228
  2107   0013B4                     u1177:
  2108   0013B4  2EE8               	decfsz	wreg,f,c
  2109   0013B6  D7FE               	bra	u1177
  2110   0013B8  2E18               	decfsz	??_turnRight^0,f,c
  2111   0013BA  D7FC               	bra	u1177
  2112   0013BC  D000               	nop2	
  2113   0013BE                     
  2114                           ;dc_motor.c: 227:         }
  2115   0013BE  4A1B               	infsnz	turnRight@i^0,f,c
  2116   0013C0  2A1C               	incf	(turnRight@i+1)^0,f,c
  2117   0013C2                     l163:
  2118   0013C2  5017               	movf	turnRight@turnRamp^0,w,c
  2119   0013C4  6E18               	movwf	??_turnRight^0,c
  2120   0013C6  6A19               	clrf	(??_turnRight+1)^0,c
  2121   0013C8  5018               	movf	??_turnRight^0,w,c
  2122   0013CA  5C1B               	subwf	turnRight@i^0,w,c
  2123   0013CC  501C               	movf	(turnRight@i+1)^0,w,c
  2124   0013CE  0A80               	xorlw	128
  2125   0013D0  6E1A               	movwf	(??_turnRight+2)^0,c
  2126   0013D2  5019               	movf	(??_turnRight+1)^0,w,c
  2127   0013D4  0A80               	xorlw	128
  2128   0013D6  581A               	subwfb	(??_turnRight+2)^0,w,c
  2129   0013D8  A0D8               	btfss	status,0,c
  2130   0013DA  EFF1  F009         	goto	u531
  2131   0013DE  EFF3  F009         	goto	u530
  2132   0013E2                     u531:
  2133   0013E2  EFD7  F009         	goto	l1504
  2134   0013E6                     u530:
  2135   0013E6                     
  2136                           ;dc_motor.c: 228:     }
  2137   0013E6  4A1D               	infsnz	turnRight@cur_power^0,f,c
  2138   0013E8  2A1E               	incf	(turnRight@cur_power+1)^0,f,c
  2139   0013EA                     l1510:
  2140   0013EA  5015               	movf	turnRight@turnSpeed^0,w,c
  2141   0013EC  6E18               	movwf	??_turnRight^0,c
  2142   0013EE  6A19               	clrf	(??_turnRight+1)^0,c
  2143   0013F0  501D               	movf	turnRight@cur_power^0,w,c
  2144   0013F2  5C18               	subwf	??_turnRight^0,w,c
  2145   0013F4  5019               	movf	(??_turnRight+1)^0,w,c
  2146   0013F6  0A80               	xorlw	128
  2147   0013F8  6E1A               	movwf	(??_turnRight+2)^0,c
  2148   0013FA  501E               	movf	(turnRight@cur_power+1)^0,w,c
  2149   0013FC  0A80               	xorlw	128
  2150   0013FE  581A               	subwfb	(??_turnRight+2)^0,w,c
  2151   001400  B0D8               	btfsc	status,0,c
  2152   001402  EF05  F00A         	goto	u541
  2153   001406  EF07  F00A         	goto	u540
  2154   00140A                     u541:
  2155   00140A  EFB3  F009         	goto	l1496
  2156   00140E                     u540:
  2157   00140E                     
  2158                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  2159   00140E  0E00               	movlw	0
  2160   001410  6E1C               	movwf	(turnRight@i+1)^0,c
  2161   001412  0E00               	movlw	0
  2162   001414  6E1B               	movwf	turnRight@i^0,c
  2163   001416  EF17  F00A         	goto	l167
  2164   00141A                     l1514:
  2165                           
  2166                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2167   00141A  0E68               	movlw	104
  2168   00141C  6E18               	movwf	??_turnRight^0,c
  2169   00141E  0EE4               	movlw	228
  2170   001420                     u1187:
  2171   001420  2EE8               	decfsz	wreg,f,c
  2172   001422  D7FE               	bra	u1187
  2173   001424  2E18               	decfsz	??_turnRight^0,f,c
  2174   001426  D7FC               	bra	u1187
  2175   001428  D000               	nop2	
  2176   00142A                     
  2177                           ;dc_motor.c: 232:         }
  2178   00142A  4A1B               	infsnz	turnRight@i^0,f,c
  2179   00142C  2A1C               	incf	(turnRight@i+1)^0,f,c
  2180   00142E                     l167:
  2181   00142E  5016               	movf	turnRight@turnDuration^0,w,c
  2182   001430  6E18               	movwf	??_turnRight^0,c
  2183   001432  6A19               	clrf	(??_turnRight+1)^0,c
  2184   001434  5018               	movf	??_turnRight^0,w,c
  2185   001436  5C1B               	subwf	turnRight@i^0,w,c
  2186   001438  501C               	movf	(turnRight@i+1)^0,w,c
  2187   00143A  0A80               	xorlw	128
  2188   00143C  6E1A               	movwf	(??_turnRight+2)^0,c
  2189   00143E  5019               	movf	(??_turnRight+1)^0,w,c
  2190   001440  0A80               	xorlw	128
  2191   001442  581A               	subwfb	(??_turnRight+2)^0,w,c
  2192   001444  A0D8               	btfss	status,0,c
  2193   001446  EF27  F00A         	goto	u551
  2194   00144A  EF29  F00A         	goto	u550
  2195   00144E                     u551:
  2196   00144E  EF0D  F00A         	goto	l1514
  2197   001452                     u550:
  2198   001452                     
  2199                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2200   001452  C015  F01D         	movff	turnRight@turnSpeed,turnRight@cur_power
  2201   001456  6A1E               	clrf	(turnRight@cur_power+1)^0,c
  2202   001458                     l1518:
  2203   001458  BE1E               	btfsc	(turnRight@cur_power+1)^0,7,c
  2204   00145A  EF33  F00A         	goto	u560
  2205   00145E  EF31  F00A         	goto	u561
  2206   001462                     u561:
  2207   001462  EF35  F00A         	goto	l1522
  2208   001466                     u560:
  2209   001466  EF7A  F00A         	goto	l175
  2210   00146A                     l1522:
  2211                           
  2212                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  2213   00146A  5013               	movf	turnRight@mL^0,w,c
  2214   00146C  6ED9               	movwf	fsr2l,c
  2215   00146E  6ADA               	clrf	fsr2h,c
  2216   001470  5013               	movf	turnRight@mL^0,w,c
  2217   001472  6EE1               	movwf	fsr1l,c
  2218   001474  6AE2               	clrf	fsr1h,c
  2219   001476  0E09               	movlw	9
  2220   001478  26E1               	addwf	fsr1l,f,c
  2221   00147A  50E7               	movf	indf1,w,c
  2222   00147C  241D               	addwf	turnRight@cur_power^0,w,c
  2223   00147E  6EDF               	movwf	indf2,c
  2224                           
  2225                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  2226   001480  5014               	movf	turnRight@mR^0,w,c
  2227   001482  6ED9               	movwf	fsr2l,c
  2228   001484  6ADA               	clrf	fsr2h,c
  2229   001486  5014               	movf	turnRight@mR^0,w,c
  2230   001488  6EE1               	movwf	fsr1l,c
  2231   00148A  6AE2               	clrf	fsr1h,c
  2232   00148C  0E09               	movlw	9
  2233   00148E  26E1               	addwf	fsr1l,f,c
  2234   001490  50E7               	movf	indf1,w,c
  2235   001492  241D               	addwf	turnRight@cur_power^0,w,c
  2236   001494  6EDF               	movwf	indf2,c
  2237   001496                     
  2238                           ;dc_motor.c: 237:         setMotorPWM(mL);
  2239   001496  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  2240   00149A  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2241   00149E                     
  2242                           ;dc_motor.c: 238:         setMotorPWM(mR);
  2243   00149E  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  2244   0014A2  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2245   0014A6                     
  2246                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  2247   0014A6  0E00               	movlw	0
  2248   0014A8  6E1C               	movwf	(turnRight@i+1)^0,c
  2249   0014AA  0E00               	movlw	0
  2250   0014AC  6E1B               	movwf	turnRight@i^0,c
  2251   0014AE  EF63  F00A         	goto	l172
  2252   0014B2                     l1530:
  2253                           
  2254                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2255   0014B2  0E68               	movlw	104
  2256   0014B4  6E18               	movwf	??_turnRight^0,c
  2257   0014B6  0EE4               	movlw	228
  2258   0014B8                     u1197:
  2259   0014B8  2EE8               	decfsz	wreg,f,c
  2260   0014BA  D7FE               	bra	u1197
  2261   0014BC  2E18               	decfsz	??_turnRight^0,f,c
  2262   0014BE  D7FC               	bra	u1197
  2263   0014C0  D000               	nop2	
  2264   0014C2                     
  2265                           ;dc_motor.c: 241:         }
  2266   0014C2  4A1B               	infsnz	turnRight@i^0,f,c
  2267   0014C4  2A1C               	incf	(turnRight@i+1)^0,f,c
  2268   0014C6                     l172:
  2269   0014C6  5017               	movf	turnRight@turnRamp^0,w,c
  2270   0014C8  6E18               	movwf	??_turnRight^0,c
  2271   0014CA  6A19               	clrf	(??_turnRight+1)^0,c
  2272   0014CC  5018               	movf	??_turnRight^0,w,c
  2273   0014CE  5C1B               	subwf	turnRight@i^0,w,c
  2274   0014D0  501C               	movf	(turnRight@i+1)^0,w,c
  2275   0014D2  0A80               	xorlw	128
  2276   0014D4  6E1A               	movwf	(??_turnRight+2)^0,c
  2277   0014D6  5019               	movf	(??_turnRight+1)^0,w,c
  2278   0014D8  0A80               	xorlw	128
  2279   0014DA  581A               	subwfb	(??_turnRight+2)^0,w,c
  2280   0014DC  A0D8               	btfss	status,0,c
  2281   0014DE  EF73  F00A         	goto	u571
  2282   0014E2  EF75  F00A         	goto	u570
  2283   0014E6                     u571:
  2284   0014E6  EF59  F00A         	goto	l1530
  2285   0014EA                     u570:
  2286   0014EA                     
  2287                           ;dc_motor.c: 242:     }
  2288   0014EA  061D               	decf	turnRight@cur_power^0,f,c
  2289   0014EC  A0D8               	btfss	status,0,c
  2290   0014EE  061E               	decf	(turnRight@cur_power+1)^0,f,c
  2291   0014F0  EF2C  F00A         	goto	l1518
  2292   0014F4                     l175:
  2293   0014F4  0012               	return		;funcret
  2294   0014F6                     __end_of_turnRight:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _turnLeft *****************
  2298 ;; Defined at:
  2299 ;;		line 182 in file "dc_motor.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2302 ;;		 -> main@motorL(10), 
  2303 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2304 ;;		 -> main@motorR(10), 
  2305 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  2306 ;;  turnDuration    1   21[COMRAM] unsigned char 
  2307 ;;  turnRamp        1   22[COMRAM] unsigned char 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  cur_power       2   28[COMRAM] int 
  2310 ;;  i               2   26[COMRAM] int 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2320 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2324 ;;Total ram usage:       12 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; Hardware stack levels required when called: 2
  2327 ;; This function calls:
  2328 ;;		_setMotorPWM
  2329 ;; This function is called by:
  2330 ;;		_move
  2331 ;;		_calibration
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text7
  2336   0014F6                     __ptext7:
  2337                           	callstack 0
  2338   0014F6                     _turnLeft:
  2339                           	callstack 27
  2340   0014F6                     
  2341                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  2342   0014F6  5013               	movf	turnLeft@mL^0,w,c
  2343   0014F8  6ED9               	movwf	fsr2l,c
  2344   0014FA  6ADA               	clrf	fsr2h,c
  2345   0014FC  0E01               	movlw	1
  2346   0014FE  26D9               	addwf	fsr2l,f,c
  2347   001500  6ADF               	clrf	indf2,c
  2348                           
  2349                           ;dc_motor.c: 185:     mR->direction = 1;
  2350   001502  5014               	movf	turnLeft@mR^0,w,c
  2351   001504  6ED9               	movwf	fsr2l,c
  2352   001506  6ADA               	clrf	fsr2h,c
  2353   001508  0E01               	movlw	1
  2354   00150A  26D9               	addwf	fsr2l,f,c
  2355   00150C  0E01               	movlw	1
  2356   00150E  6EDF               	movwf	indf2,c
  2357   001510                     
  2358                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2359   001510  0E00               	movlw	0
  2360   001512  6E1E               	movwf	(turnLeft@cur_power+1)^0,c
  2361   001514  0E01               	movlw	1
  2362   001516  6E1D               	movwf	turnLeft@cur_power^0,c
  2363   001518  EFD0  F00A         	goto	l1576
  2364   00151C                     l1562:
  2365                           
  2366                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  2367   00151C  5013               	movf	turnLeft@mL^0,w,c
  2368   00151E  6ED9               	movwf	fsr2l,c
  2369   001520  6ADA               	clrf	fsr2h,c
  2370   001522  5013               	movf	turnLeft@mL^0,w,c
  2371   001524  6EE1               	movwf	fsr1l,c
  2372   001526  6AE2               	clrf	fsr1h,c
  2373   001528  0E09               	movlw	9
  2374   00152A  26E1               	addwf	fsr1l,f,c
  2375   00152C  50E7               	movf	indf1,w,c
  2376   00152E  241D               	addwf	turnLeft@cur_power^0,w,c
  2377   001530  6EDF               	movwf	indf2,c
  2378                           
  2379                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  2380   001532  5014               	movf	turnLeft@mR^0,w,c
  2381   001534  6ED9               	movwf	fsr2l,c
  2382   001536  6ADA               	clrf	fsr2h,c
  2383   001538  5014               	movf	turnLeft@mR^0,w,c
  2384   00153A  6EE1               	movwf	fsr1l,c
  2385   00153C  6AE2               	clrf	fsr1h,c
  2386   00153E  0E09               	movlw	9
  2387   001540  26E1               	addwf	fsr1l,f,c
  2388   001542  50E7               	movf	indf1,w,c
  2389   001544  241D               	addwf	turnLeft@cur_power^0,w,c
  2390   001546  6EDF               	movwf	indf2,c
  2391   001548                     
  2392                           ;dc_motor.c: 191:         setMotorPWM(mL);
  2393   001548  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2394   00154C  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2395   001550                     
  2396                           ;dc_motor.c: 192:         setMotorPWM(mR);
  2397   001550  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2398   001554  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2399   001558                     
  2400                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  2401   001558  0E00               	movlw	0
  2402   00155A  6E1C               	movwf	(turnLeft@i+1)^0,c
  2403   00155C  0E00               	movlw	0
  2404   00155E  6E1B               	movwf	turnLeft@i^0,c
  2405   001560  EFBC  F00A         	goto	l146
  2406   001564                     l1570:
  2407                           
  2408                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2409   001564  0E68               	movlw	104
  2410   001566  6E18               	movwf	??_turnLeft^0,c
  2411   001568  0EE4               	movlw	228
  2412   00156A                     u1207:
  2413   00156A  2EE8               	decfsz	wreg,f,c
  2414   00156C  D7FE               	bra	u1207
  2415   00156E  2E18               	decfsz	??_turnLeft^0,f,c
  2416   001570  D7FC               	bra	u1207
  2417   001572  D000               	nop2	
  2418   001574                     
  2419                           ;dc_motor.c: 195:         }
  2420   001574  4A1B               	infsnz	turnLeft@i^0,f,c
  2421   001576  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2422   001578                     l146:
  2423   001578  5017               	movf	turnLeft@turnRamp^0,w,c
  2424   00157A  6E18               	movwf	??_turnLeft^0,c
  2425   00157C  6A19               	clrf	(??_turnLeft+1)^0,c
  2426   00157E  5018               	movf	??_turnLeft^0,w,c
  2427   001580  5C1B               	subwf	turnLeft@i^0,w,c
  2428   001582  501C               	movf	(turnLeft@i+1)^0,w,c
  2429   001584  0A80               	xorlw	128
  2430   001586  6E1A               	movwf	(??_turnLeft+2)^0,c
  2431   001588  5019               	movf	(??_turnLeft+1)^0,w,c
  2432   00158A  0A80               	xorlw	128
  2433   00158C  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2434   00158E  A0D8               	btfss	status,0,c
  2435   001590  EFCC  F00A         	goto	u601
  2436   001594  EFCE  F00A         	goto	u600
  2437   001598                     u601:
  2438   001598  EFB2  F00A         	goto	l1570
  2439   00159C                     u600:
  2440   00159C                     
  2441                           ;dc_motor.c: 196:     }
  2442   00159C  4A1D               	infsnz	turnLeft@cur_power^0,f,c
  2443   00159E  2A1E               	incf	(turnLeft@cur_power+1)^0,f,c
  2444   0015A0                     l1576:
  2445   0015A0  5015               	movf	turnLeft@turnSpeed^0,w,c
  2446   0015A2  6E18               	movwf	??_turnLeft^0,c
  2447   0015A4  6A19               	clrf	(??_turnLeft+1)^0,c
  2448   0015A6  501D               	movf	turnLeft@cur_power^0,w,c
  2449   0015A8  5C18               	subwf	??_turnLeft^0,w,c
  2450   0015AA  5019               	movf	(??_turnLeft+1)^0,w,c
  2451   0015AC  0A80               	xorlw	128
  2452   0015AE  6E1A               	movwf	(??_turnLeft+2)^0,c
  2453   0015B0  501E               	movf	(turnLeft@cur_power+1)^0,w,c
  2454   0015B2  0A80               	xorlw	128
  2455   0015B4  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2456   0015B6  B0D8               	btfsc	status,0,c
  2457   0015B8  EFE0  F00A         	goto	u611
  2458   0015BC  EFE2  F00A         	goto	u610
  2459   0015C0                     u611:
  2460   0015C0  EF8E  F00A         	goto	l1562
  2461   0015C4                     u610:
  2462   0015C4                     
  2463                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  2464   0015C4  0E00               	movlw	0
  2465   0015C6  6E1C               	movwf	(turnLeft@i+1)^0,c
  2466   0015C8  0E00               	movlw	0
  2467   0015CA  6E1B               	movwf	turnLeft@i^0,c
  2468   0015CC  EFF2  F00A         	goto	l150
  2469   0015D0                     l1580:
  2470                           
  2471                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2472   0015D0  0E68               	movlw	104
  2473   0015D2  6E18               	movwf	??_turnLeft^0,c
  2474   0015D4  0EE4               	movlw	228
  2475   0015D6                     u1217:
  2476   0015D6  2EE8               	decfsz	wreg,f,c
  2477   0015D8  D7FE               	bra	u1217
  2478   0015DA  2E18               	decfsz	??_turnLeft^0,f,c
  2479   0015DC  D7FC               	bra	u1217
  2480   0015DE  D000               	nop2	
  2481   0015E0                     
  2482                           ;dc_motor.c: 200:         }
  2483   0015E0  4A1B               	infsnz	turnLeft@i^0,f,c
  2484   0015E2  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2485   0015E4                     l150:
  2486   0015E4  5016               	movf	turnLeft@turnDuration^0,w,c
  2487   0015E6  6E18               	movwf	??_turnLeft^0,c
  2488   0015E8  6A19               	clrf	(??_turnLeft+1)^0,c
  2489   0015EA  5018               	movf	??_turnLeft^0,w,c
  2490   0015EC  5C1B               	subwf	turnLeft@i^0,w,c
  2491   0015EE  501C               	movf	(turnLeft@i+1)^0,w,c
  2492   0015F0  0A80               	xorlw	128
  2493   0015F2  6E1A               	movwf	(??_turnLeft+2)^0,c
  2494   0015F4  5019               	movf	(??_turnLeft+1)^0,w,c
  2495   0015F6  0A80               	xorlw	128
  2496   0015F8  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2497   0015FA  A0D8               	btfss	status,0,c
  2498   0015FC  EF02  F00B         	goto	u621
  2499   001600  EF04  F00B         	goto	u620
  2500   001604                     u621:
  2501   001604  EFE8  F00A         	goto	l1580
  2502   001608                     u620:
  2503   001608                     
  2504                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2505   001608  C015  F01D         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  2506   00160C  6A1E               	clrf	(turnLeft@cur_power+1)^0,c
  2507   00160E                     l1584:
  2508   00160E  BE1E               	btfsc	(turnLeft@cur_power+1)^0,7,c
  2509   001610  EF0E  F00B         	goto	u630
  2510   001614  EF0C  F00B         	goto	u631
  2511   001618                     u631:
  2512   001618  EF10  F00B         	goto	l1588
  2513   00161C                     u630:
  2514   00161C  EF55  F00B         	goto	l158
  2515   001620                     l1588:
  2516                           
  2517                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  2518   001620  5013               	movf	turnLeft@mL^0,w,c
  2519   001622  6ED9               	movwf	fsr2l,c
  2520   001624  6ADA               	clrf	fsr2h,c
  2521   001626  5013               	movf	turnLeft@mL^0,w,c
  2522   001628  6EE1               	movwf	fsr1l,c
  2523   00162A  6AE2               	clrf	fsr1h,c
  2524   00162C  0E09               	movlw	9
  2525   00162E  26E1               	addwf	fsr1l,f,c
  2526   001630  50E7               	movf	indf1,w,c
  2527   001632  241D               	addwf	turnLeft@cur_power^0,w,c
  2528   001634  6EDF               	movwf	indf2,c
  2529                           
  2530                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  2531   001636  5014               	movf	turnLeft@mR^0,w,c
  2532   001638  6ED9               	movwf	fsr2l,c
  2533   00163A  6ADA               	clrf	fsr2h,c
  2534   00163C  5014               	movf	turnLeft@mR^0,w,c
  2535   00163E  6EE1               	movwf	fsr1l,c
  2536   001640  6AE2               	clrf	fsr1h,c
  2537   001642  0E09               	movlw	9
  2538   001644  26E1               	addwf	fsr1l,f,c
  2539   001646  50E7               	movf	indf1,w,c
  2540   001648  241D               	addwf	turnLeft@cur_power^0,w,c
  2541   00164A  6EDF               	movwf	indf2,c
  2542   00164C                     
  2543                           ;dc_motor.c: 205:         setMotorPWM(mL);
  2544   00164C  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2545   001650  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2546   001654                     
  2547                           ;dc_motor.c: 206:         setMotorPWM(mR);
  2548   001654  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2549   001658  EC0E  F00C         	call	_setMotorPWM	;wreg free
  2550   00165C                     
  2551                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  2552   00165C  0E00               	movlw	0
  2553   00165E  6E1C               	movwf	(turnLeft@i+1)^0,c
  2554   001660  0E00               	movlw	0
  2555   001662  6E1B               	movwf	turnLeft@i^0,c
  2556   001664  EF3E  F00B         	goto	l155
  2557   001668                     l1596:
  2558                           
  2559                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2560   001668  0E68               	movlw	104
  2561   00166A  6E18               	movwf	??_turnLeft^0,c
  2562   00166C  0EE4               	movlw	228
  2563   00166E                     u1227:
  2564   00166E  2EE8               	decfsz	wreg,f,c
  2565   001670  D7FE               	bra	u1227
  2566   001672  2E18               	decfsz	??_turnLeft^0,f,c
  2567   001674  D7FC               	bra	u1227
  2568   001676  D000               	nop2	
  2569   001678                     
  2570                           ;dc_motor.c: 209:         }
  2571   001678  4A1B               	infsnz	turnLeft@i^0,f,c
  2572   00167A  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2573   00167C                     l155:
  2574   00167C  5017               	movf	turnLeft@turnRamp^0,w,c
  2575   00167E  6E18               	movwf	??_turnLeft^0,c
  2576   001680  6A19               	clrf	(??_turnLeft+1)^0,c
  2577   001682  5018               	movf	??_turnLeft^0,w,c
  2578   001684  5C1B               	subwf	turnLeft@i^0,w,c
  2579   001686  501C               	movf	(turnLeft@i+1)^0,w,c
  2580   001688  0A80               	xorlw	128
  2581   00168A  6E1A               	movwf	(??_turnLeft+2)^0,c
  2582   00168C  5019               	movf	(??_turnLeft+1)^0,w,c
  2583   00168E  0A80               	xorlw	128
  2584   001690  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2585   001692  A0D8               	btfss	status,0,c
  2586   001694  EF4E  F00B         	goto	u641
  2587   001698  EF50  F00B         	goto	u640
  2588   00169C                     u641:
  2589   00169C  EF34  F00B         	goto	l1596
  2590   0016A0                     u640:
  2591   0016A0                     
  2592                           ;dc_motor.c: 210:     }
  2593   0016A0  061D               	decf	turnLeft@cur_power^0,f,c
  2594   0016A2  A0D8               	btfss	status,0,c
  2595   0016A4  061E               	decf	(turnLeft@cur_power+1)^0,f,c
  2596   0016A6  EF07  F00B         	goto	l1584
  2597   0016AA                     l158:
  2598   0016AA  0012               	return		;funcret
  2599   0016AC                     __end_of_turnLeft:
  2600                           	callstack 0
  2601                           
  2602 ;; *************** function _setMotorPWM *****************
  2603 ;; Defined at:
  2604 ;;		line 65 in file "dc_motor.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2607 ;;		 -> main@motorR(10), main@motorL(10), 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  negDuty         1   17[COMRAM] unsigned char 
  2610 ;;  posDuty         1   16[COMRAM] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2620 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;Total ram usage:        5 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 1
  2627 ;; This function calls:
  2628 ;;		___lwdiv
  2629 ;;		___wmul
  2630 ;; This function is called by:
  2631 ;;		_turnLeft
  2632 ;;		_turnRight
  2633 ;;		_fullSpeedAhead
  2634 ;;		_reverseOneSquare
  2635 ;;		_stop
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text8
  2640   00181C                     __ptext8:
  2641                           	callstack 0
  2642   00181C                     _setMotorPWM:
  2643                           	callstack 27
  2644   00181C                     
  2645                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2646   00181C  500E               	movf	setMotorPWM@m^0,w,c
  2647   00181E  6ED9               	movwf	fsr2l,c
  2648   001820  6ADA               	clrf	fsr2h,c
  2649   001822  0E02               	movlw	2
  2650   001824  26D9               	addwf	fsr2l,f,c
  2651   001826  50DF               	movf	indf2,w,c
  2652   001828  B4D8               	btfsc	status,2,c
  2653   00182A  EF19  F00C         	goto	u511
  2654   00182E  EF1B  F00C         	goto	u510
  2655   001832                     u511:
  2656   001832  EF4B  F00C         	goto	l1482
  2657   001836                     u510:
  2658   001836                     
  2659                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2660   001836  500E               	movf	setMotorPWM@m^0,w,c
  2661   001838  6ED9               	movwf	fsr2l,c
  2662   00183A  6ADA               	clrf	fsr2h,c
  2663   00183C  50DF               	movf	indf2,w,c
  2664   00183E  6E0F               	movwf	??_setMotorPWM^0,c
  2665   001840  500F               	movf	??_setMotorPWM^0,w,c
  2666   001842  6E01               	movwf	___wmul@multiplier^0,c
  2667   001844  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2668   001846  500E               	movf	setMotorPWM@m^0,w,c
  2669   001848  6ED9               	movwf	fsr2l,c
  2670   00184A  6ADA               	clrf	fsr2h,c
  2671   00184C  0E03               	movlw	3
  2672   00184E  26D9               	addwf	fsr2l,f,c
  2673   001850  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2674   001854  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2675   001858  ECA0  F00E         	call	___wmul	;wreg free
  2676   00185C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2677   001860  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2678   001864  0E00               	movlw	0
  2679   001866  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2680   001868  0E64               	movlw	100
  2681   00186A  6E09               	movwf	___lwdiv@divisor^0,c
  2682   00186C  EC3F  F00E         	call	___lwdiv	;wreg free
  2683   001870  500E               	movf	setMotorPWM@m^0,w,c
  2684   001872  6ED9               	movwf	fsr2l,c
  2685   001874  6ADA               	clrf	fsr2h,c
  2686   001876  0E03               	movlw	3
  2687   001878  26D9               	addwf	fsr2l,f,c
  2688   00187A  50DF               	movf	indf2,w,c
  2689   00187C  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2690   00187E  5007               	movf	?___lwdiv^0,w,c
  2691   001880  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2692   001882  6E11               	movwf	setMotorPWM@posDuty^0,c
  2693   001884                     
  2694                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2695   001884  500E               	movf	setMotorPWM@m^0,w,c
  2696   001886  6ED9               	movwf	fsr2l,c
  2697   001888  6ADA               	clrf	fsr2h,c
  2698   00188A  0E03               	movlw	3
  2699   00188C  26D9               	addwf	fsr2l,f,c
  2700   00188E  50DF               	movf	indf2,w,c
  2701   001890  6E12               	movwf	setMotorPWM@negDuty^0,c
  2702                           
  2703                           ;dc_motor.c: 72:     }
  2704   001892  EF6C  F00C         	goto	l1486
  2705   001896                     l1482:
  2706                           
  2707                           ;dc_motor.c: 74:         posDuty=0;
  2708   001896  0E00               	movlw	0
  2709   001898  6E11               	movwf	setMotorPWM@posDuty^0,c
  2710   00189A                     
  2711                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2712   00189A  500E               	movf	setMotorPWM@m^0,w,c
  2713   00189C  6ED9               	movwf	fsr2l,c
  2714   00189E  6ADA               	clrf	fsr2h,c
  2715   0018A0  50DF               	movf	indf2,w,c
  2716   0018A2  6E0F               	movwf	??_setMotorPWM^0,c
  2717   0018A4  500F               	movf	??_setMotorPWM^0,w,c
  2718   0018A6  6E01               	movwf	___wmul@multiplier^0,c
  2719   0018A8  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2720   0018AA  500E               	movf	setMotorPWM@m^0,w,c
  2721   0018AC  6ED9               	movwf	fsr2l,c
  2722   0018AE  6ADA               	clrf	fsr2h,c
  2723   0018B0  0E03               	movlw	3
  2724   0018B2  26D9               	addwf	fsr2l,f,c
  2725   0018B4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2726   0018B8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2727   0018BC  ECA0  F00E         	call	___wmul	;wreg free
  2728   0018C0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2729   0018C4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2730   0018C8  0E00               	movlw	0
  2731   0018CA  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2732   0018CC  0E64               	movlw	100
  2733   0018CE  6E09               	movwf	___lwdiv@divisor^0,c
  2734   0018D0  EC3F  F00E         	call	___lwdiv	;wreg free
  2735   0018D4  5007               	movf	?___lwdiv^0,w,c
  2736   0018D6  6E12               	movwf	setMotorPWM@negDuty^0,c
  2737   0018D8                     l1486:
  2738                           
  2739                           ;dc_motor.c: 78:     if (m->direction) {
  2740   0018D8  500E               	movf	setMotorPWM@m^0,w,c
  2741   0018DA  6ED9               	movwf	fsr2l,c
  2742   0018DC  6ADA               	clrf	fsr2h,c
  2743   0018DE  0E01               	movlw	1
  2744   0018E0  26D9               	addwf	fsr2l,f,c
  2745   0018E2  50DF               	movf	indf2,w,c
  2746   0018E4  B4D8               	btfsc	status,2,c
  2747   0018E6  EF77  F00C         	goto	u521
  2748   0018EA  EF79  F00C         	goto	u520
  2749   0018EE                     u521:
  2750   0018EE  EF99  F00C         	goto	l1490
  2751   0018F2                     u520:
  2752   0018F2                     
  2753                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  2754   0018F2  500E               	movf	setMotorPWM@m^0,w,c
  2755   0018F4  6ED9               	movwf	fsr2l,c
  2756   0018F6  6ADA               	clrf	fsr2h,c
  2757   0018F8  0E05               	movlw	5
  2758   0018FA  26D9               	addwf	fsr2l,f,c
  2759   0018FC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2760   001900  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2761   001904  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2762   001908  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2763   00190C  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2764                           
  2765                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  2766   001910  500E               	movf	setMotorPWM@m^0,w,c
  2767   001912  6ED9               	movwf	fsr2l,c
  2768   001914  6ADA               	clrf	fsr2h,c
  2769   001916  0E07               	movlw	7
  2770   001918  26D9               	addwf	fsr2l,f,c
  2771   00191A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2772   00191E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2773   001922  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2774   001926  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2775   00192A  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2776                           
  2777                           ;dc_motor.c: 81:     } else {
  2778   00192E  EFB7  F00C         	goto	l115
  2779   001932                     l1490:
  2780                           
  2781                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  2782   001932  500E               	movf	setMotorPWM@m^0,w,c
  2783   001934  6ED9               	movwf	fsr2l,c
  2784   001936  6ADA               	clrf	fsr2h,c
  2785   001938  0E05               	movlw	5
  2786   00193A  26D9               	addwf	fsr2l,f,c
  2787   00193C  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2788   001940  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2789   001944  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2790   001948  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2791   00194C  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2792                           
  2793                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  2794   001950  500E               	movf	setMotorPWM@m^0,w,c
  2795   001952  6ED9               	movwf	fsr2l,c
  2796   001954  6ADA               	clrf	fsr2h,c
  2797   001956  0E07               	movlw	7
  2798   001958  26D9               	addwf	fsr2l,f,c
  2799   00195A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2800   00195E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2801   001962  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2802   001966  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2803   00196A  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2804   00196E                     l115:
  2805   00196E  0012               	return		;funcret
  2806   001970                     __end_of_setMotorPWM:
  2807                           	callstack 0
  2808                           
  2809 ;; *************** function ___wmul *****************
  2810 ;; Defined at:
  2811 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  multiplier      2    0[COMRAM] unsigned int 
  2814 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  product         2    4[COMRAM] unsigned int 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2    0[COMRAM] unsigned int 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0, prodl, prodh
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2826 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2827 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2829 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2830 ;;Total ram usage:        6 bytes
  2831 ;; Hardware stack levels used: 1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_setMotorPWM
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text9
  2840   001D40                     __ptext9:
  2841                           	callstack 0
  2842   001D40                     ___wmul:
  2843                           	callstack 27
  2844   001D40  5001               	movf	___wmul@multiplier^0,w,c
  2845   001D42  0203               	mulwf	___wmul@multiplicand^0,c
  2846   001D44  CFF3 F005          	movff	prodl,___wmul@product
  2847   001D48  CFF4 F006          	movff	prodh,___wmul@product+1
  2848   001D4C  5001               	movf	___wmul@multiplier^0,w,c
  2849   001D4E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2850   001D50  50F3               	movf	243,w,c
  2851   001D52  2606               	addwf	(___wmul@product+1)^0,f,c
  2852   001D54  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2853   001D56  0203               	mulwf	___wmul@multiplicand^0,c
  2854   001D58  50F3               	movf	243,w,c
  2855   001D5A  2606               	addwf	(___wmul@product+1)^0,f,c
  2856   001D5C  C005  F001         	movff	___wmul@product,?___wmul
  2857   001D60  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2858   001D64  0012               	return		;funcret
  2859   001D66                     __end_of___wmul:
  2860                           	callstack 0
  2861                           
  2862 ;; *************** function ___lwdiv *****************
  2863 ;; Defined at:
  2864 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  dividend        2    6[COMRAM] unsigned int 
  2867 ;;  divisor         2    8[COMRAM] unsigned int 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  quotient        2   10[COMRAM] unsigned int 
  2870 ;;  counter         1   12[COMRAM] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  2    6[COMRAM] unsigned int 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2880 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2881 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2883 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2884 ;;Total ram usage:        7 bytes
  2885 ;; Hardware stack levels used: 1
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_setMotorPWM
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text10
  2894   001C7E                     __ptext10:
  2895                           	callstack 0
  2896   001C7E                     ___lwdiv:
  2897                           	callstack 27
  2898   001C7E  0E00               	movlw	0
  2899   001C80  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2900   001C82  0E00               	movlw	0
  2901   001C84  6E0B               	movwf	___lwdiv@quotient^0,c
  2902   001C86  5009               	movf	___lwdiv@divisor^0,w,c
  2903   001C88  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2904   001C8A  B4D8               	btfsc	status,2,c
  2905   001C8C  EF4A  F00E         	goto	u481
  2906   001C90  EF4C  F00E         	goto	u480
  2907   001C94                     u481:
  2908   001C94  EF74  F00E         	goto	l746
  2909   001C98                     u480:
  2910   001C98  0E01               	movlw	1
  2911   001C9A  6E0D               	movwf	___lwdiv@counter^0,c
  2912   001C9C  EF54  F00E         	goto	l1462
  2913   001CA0                     l1460:
  2914   001CA0  90D8               	bcf	status,0,c
  2915   001CA2  3609               	rlcf	___lwdiv@divisor^0,f,c
  2916   001CA4  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2917   001CA6  2A0D               	incf	___lwdiv@counter^0,f,c
  2918   001CA8                     l1462:
  2919   001CA8  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2920   001CAA  EF59  F00E         	goto	u491
  2921   001CAE  EF5B  F00E         	goto	u490
  2922   001CB2                     u491:
  2923   001CB2  EF50  F00E         	goto	l1460
  2924   001CB6                     u490:
  2925   001CB6                     l1464:
  2926   001CB6  90D8               	bcf	status,0,c
  2927   001CB8  360B               	rlcf	___lwdiv@quotient^0,f,c
  2928   001CBA  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2929   001CBC  5009               	movf	___lwdiv@divisor^0,w,c
  2930   001CBE  5C07               	subwf	___lwdiv@dividend^0,w,c
  2931   001CC0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2932   001CC2  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2933   001CC4  A0D8               	btfss	status,0,c
  2934   001CC6  EF67  F00E         	goto	u501
  2935   001CCA  EF69  F00E         	goto	u500
  2936   001CCE                     u501:
  2937   001CCE  EF6E  F00E         	goto	l1472
  2938   001CD2                     u500:
  2939   001CD2  5009               	movf	___lwdiv@divisor^0,w,c
  2940   001CD4  5E07               	subwf	___lwdiv@dividend^0,f,c
  2941   001CD6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2942   001CD8  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2943   001CDA  800B               	bsf	___lwdiv@quotient^0,0,c
  2944   001CDC                     l1472:
  2945   001CDC  90D8               	bcf	status,0,c
  2946   001CDE  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2947   001CE0  3209               	rrcf	___lwdiv@divisor^0,f,c
  2948   001CE2  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2949   001CE4  EF5B  F00E         	goto	l1464
  2950   001CE8                     l746:
  2951   001CE8  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2952   001CEC  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2953   001CF0  0012               	return		;funcret
  2954   001CF2                     __end_of___lwdiv:
  2955                           	callstack 0
  2956                           
  2957 ;; *************** function _batteryLevel *****************
  2958 ;; Defined at:
  2959 ;;		line 6 in file "battery.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  batteryQuart    1    9[COMRAM] unsigned char 
  2964 ;;  batteryVolta    1    8[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2978 ;;Total ram usage:        2 bytes
  2979 ;; Hardware stack levels used: 1
  2980 ;; Hardware stack levels required when called: 1
  2981 ;; This function calls:
  2982 ;;		_ADC_getval
  2983 ;;		_ADC_init
  2984 ;;		___awdiv
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text11
  2991   001CF2                     __ptext11:
  2992                           	callstack 0
  2993   001CF2                     _batteryLevel:
  2994                           	callstack 29
  2995   001CF2                     
  2996                           ;battery.c: 7:     ADC_init();
  2997   001CF2  ECB3  F00E         	call	_ADC_init	;wreg free
  2998                           
  2999                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  3000   001CF6  ECC0  F00E         	call	_ADC_getval	;wreg free
  3001   001CFA  6E09               	movwf	batteryLevel@batteryVoltage^0,c
  3002   001CFC                     
  3003                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  3004   001CFC  C009  F001         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  3005   001D00  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3006   001D02  0E00               	movlw	0
  3007   001D04  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3008   001D06  0E18               	movlw	24
  3009   001D08  6E03               	movwf	___awdiv@divisor^0,c
  3010   001D0A  EC95  F00D         	call	___awdiv	;wreg free
  3011   001D0E  5001               	movf	?___awdiv^0,w,c
  3012   001D10  6E0A               	movwf	batteryLevel@batteryQuarter^0,c
  3013   001D12                     
  3014                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  3015   001D12  A20A               	btfss	batteryLevel@batteryQuarter^0,1,c
  3016   001D14  EF8E  F00E         	goto	u761
  3017   001D18  EF90  F00E         	goto	u760
  3018   001D1C                     u761:
  3019   001D1C  EF93  F00E         	goto	l227
  3020   001D20                     u760:
  3021   001D20  8E7C               	bsf	124,7,c	;volatile
  3022   001D22  EF94  F00E         	goto	l228
  3023   001D26                     l227:
  3024   001D26  9E7C               	bcf	124,7,c	;volatile
  3025   001D28                     l228:
  3026                           
  3027                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  3028   001D28  A00A               	btfss	batteryLevel@batteryQuarter^0,0,c
  3029   001D2A  EF99  F00E         	goto	u771
  3030   001D2E  EF9B  F00E         	goto	u770
  3031   001D32                     u771:
  3032   001D32  EF9E  F00E         	goto	l229
  3033   001D36                     u770:
  3034   001D36  8680               	bsf	128,3,c	;volatile
  3035   001D38  EF9F  F00E         	goto	l231
  3036   001D3C                     l229:
  3037   001D3C  9680               	bcf	128,3,c	;volatile
  3038   001D3E                     l231:
  3039   001D3E  0012               	return		;funcret
  3040   001D40                     __end_of_batteryLevel:
  3041                           	callstack 0
  3042                           
  3043 ;; *************** function ___awdiv *****************
  3044 ;; Defined at:
  3045 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  dividend        2    0[COMRAM] int 
  3048 ;;  divisor         2    2[COMRAM] int 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  quotient        2    6[COMRAM] int 
  3051 ;;  sign            1    5[COMRAM] unsigned char 
  3052 ;;  counter         1    4[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  2    0[COMRAM] int 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;Total ram usage:        8 bytes
  3067 ;; Hardware stack levels used: 1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_batteryLevel
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text12
  3076   001B2A                     __ptext12:
  3077                           	callstack 0
  3078   001B2A                     ___awdiv:
  3079                           	callstack 29
  3080   001B2A  0E00               	movlw	0
  3081   001B2C  6E06               	movwf	___awdiv@sign^0,c
  3082   001B2E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3083   001B30  EF9E  F00D         	goto	u700
  3084   001B34  EF9C  F00D         	goto	u701
  3085   001B38                     u701:
  3086   001B38  EFA4  F00D         	goto	l1660
  3087   001B3C                     u700:
  3088   001B3C  6C03               	negf	___awdiv@divisor^0,c
  3089   001B3E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3090   001B40  B0D8               	btfsc	status,0,c
  3091   001B42  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3092   001B44  0E01               	movlw	1
  3093   001B46  6E06               	movwf	___awdiv@sign^0,c
  3094   001B48                     l1660:
  3095   001B48  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3096   001B4A  EFAB  F00D         	goto	u710
  3097   001B4E  EFA9  F00D         	goto	u711
  3098   001B52                     u711:
  3099   001B52  EFB1  F00D         	goto	l1666
  3100   001B56                     u710:
  3101   001B56  6C01               	negf	___awdiv@dividend^0,c
  3102   001B58  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3103   001B5A  B0D8               	btfsc	status,0,c
  3104   001B5C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3105   001B5E  0E01               	movlw	1
  3106   001B60  1A06               	xorwf	___awdiv@sign^0,f,c
  3107   001B62                     l1666:
  3108   001B62  0E00               	movlw	0
  3109   001B64  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3110   001B66  0E00               	movlw	0
  3111   001B68  6E07               	movwf	___awdiv@quotient^0,c
  3112   001B6A  5003               	movf	___awdiv@divisor^0,w,c
  3113   001B6C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3114   001B6E  B4D8               	btfsc	status,2,c
  3115   001B70  EFBC  F00D         	goto	u721
  3116   001B74  EFBE  F00D         	goto	u720
  3117   001B78                     u721:
  3118   001B78  EFE6  F00D         	goto	l1688
  3119   001B7C                     u720:
  3120   001B7C  0E01               	movlw	1
  3121   001B7E  6E05               	movwf	___awdiv@counter^0,c
  3122   001B80  EFC6  F00D         	goto	l1674
  3123   001B84                     l1672:
  3124   001B84  90D8               	bcf	status,0,c
  3125   001B86  3603               	rlcf	___awdiv@divisor^0,f,c
  3126   001B88  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3127   001B8A  2A05               	incf	___awdiv@counter^0,f,c
  3128   001B8C                     l1674:
  3129   001B8C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3130   001B8E  EFCB  F00D         	goto	u731
  3131   001B92  EFCD  F00D         	goto	u730
  3132   001B96                     u731:
  3133   001B96  EFC2  F00D         	goto	l1672
  3134   001B9A                     u730:
  3135   001B9A                     l1676:
  3136   001B9A  90D8               	bcf	status,0,c
  3137   001B9C  3607               	rlcf	___awdiv@quotient^0,f,c
  3138   001B9E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3139   001BA0  5003               	movf	___awdiv@divisor^0,w,c
  3140   001BA2  5C01               	subwf	___awdiv@dividend^0,w,c
  3141   001BA4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3142   001BA6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3143   001BA8  A0D8               	btfss	status,0,c
  3144   001BAA  EFD9  F00D         	goto	u741
  3145   001BAE  EFDB  F00D         	goto	u740
  3146   001BB2                     u741:
  3147   001BB2  EFE0  F00D         	goto	l1684
  3148   001BB6                     u740:
  3149   001BB6  5003               	movf	___awdiv@divisor^0,w,c
  3150   001BB8  5E01               	subwf	___awdiv@dividend^0,f,c
  3151   001BBA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3152   001BBC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3153   001BBE  8007               	bsf	___awdiv@quotient^0,0,c
  3154   001BC0                     l1684:
  3155   001BC0  90D8               	bcf	status,0,c
  3156   001BC2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3157   001BC4  3203               	rrcf	___awdiv@divisor^0,f,c
  3158   001BC6  2E05               	decfsz	___awdiv@counter^0,f,c
  3159   001BC8  EFCD  F00D         	goto	l1676
  3160   001BCC                     l1688:
  3161   001BCC  5006               	movf	___awdiv@sign^0,w,c
  3162   001BCE  B4D8               	btfsc	status,2,c
  3163   001BD0  EFEC  F00D         	goto	u751
  3164   001BD4  EFEE  F00D         	goto	u750
  3165   001BD8                     u751:
  3166   001BD8  EFF2  F00D         	goto	l1692
  3167   001BDC                     u750:
  3168   001BDC  6C07               	negf	___awdiv@quotient^0,c
  3169   001BDE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3170   001BE0  B0D8               	btfsc	status,0,c
  3171   001BE2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3172   001BE4                     l1692:
  3173   001BE4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3174   001BE8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3175   001BEC  0012               	return		;funcret
  3176   001BEE                     __end_of___awdiv:
  3177                           	callstack 0
  3178                           
  3179 ;; *************** function _ADC_init *****************
  3180 ;; Defined at:
  3181 ;;		line 9 in file "ADC.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used: 1
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_batteryLevel
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text13
  3209   001D66                     __ptext13:
  3210                           	callstack 0
  3211   001D66                     _ADC_init:
  3212                           	callstack 29
  3213   001D66                     
  3214                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  3215   001D66  8C86               	bsf	134,6,c	;volatile
  3216                           
  3217                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  3218   001D68  010E               	movlb	14	; () banked
  3219   001D6A  8DB4               	bsf	180,6,b	;volatile
  3220                           
  3221                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  3222   001D6C  010F               	movlb	15	; () banked
  3223   001D6E  9958               	bcf	88,4,b	;volatile
  3224   001D70                     
  3225                           ; BSR set to: 15
  3226                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  3227   001D70  0EFC               	movlw	-4
  3228   001D72  1758               	andwf	88,f,b	;volatile
  3229                           
  3230                           ;ADC.c: 17:     ADPCH=0b101110;
  3231   001D74  0E2E               	movlw	46
  3232   001D76  6F5F               	movwf	95,b	;volatile
  3233   001D78                     
  3234                           ; BSR set to: 15
  3235                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  3236   001D78  9460               	bcf	96,2,c	;volatile
  3237   001D7A                     
  3238                           ; BSR set to: 15
  3239                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  3240   001D7A  8860               	bsf	96,4,c	;volatile
  3241   001D7C                     
  3242                           ; BSR set to: 15
  3243                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  3244   001D7C  8E60               	bsf	96,7,c	;volatile
  3245   001D7E                     
  3246                           ; BSR set to: 15
  3247   001D7E  0012               	return		;funcret
  3248   001D80                     __end_of_ADC_init:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function _ADC_getval *****************
  3252 ;; Defined at:
  3253 ;;		line 23 in file "ADC.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  tmpval          1    0[COMRAM] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      unsigned char 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;Total ram usage:        1 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_batteryLevel
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text14
  3281   001D80                     __ptext14:
  3282                           	callstack 0
  3283   001D80                     _ADC_getval:
  3284                           	callstack 29
  3285   001D80                     
  3286                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  3287   001D80  8060               	bsf	96,0,c	;volatile
  3288   001D82                     l249:
  3289   001D82  B060               	btfsc	96,0,c	;volatile
  3290   001D84  EFC6  F00E         	goto	u231
  3291   001D88  EFC8  F00E         	goto	u230
  3292   001D8C                     u231:
  3293   001D8C  EFC1  F00E         	goto	l249
  3294   001D90                     u230:
  3295   001D90                     
  3296                           ;ADC.c: 31:     tmpval = ADRESH;
  3297   001D90  CF64 F001          	movff	3940,ADC_getval@tmpval	;volatile
  3298   001D94                     
  3299                           ;ADC.c: 35:     return tmpval;
  3300   001D94  5001               	movf	ADC_getval@tmpval^0,w,c
  3301   001D96  0012               	return		;funcret
  3302   001D98                     __end_of_ADC_getval:
  3303                           	callstack 0
  3304                           
  3305                           	psect	smallconst
  3306   000E00                     __psmallconst:
  3307                           	callstack 0
  3308   000E00  00                 	db	0
  3309   000E01  00                 	db	0	; dummy byte at the end
  3310   000000                     
  3311                           	psect	rparam
  3312   000000                     
  3313                           	psect	config
  3314                           
  3315                           ;Config register CONFIG1L @ 0x300000
  3316                           ;	External Oscillator mode Selection bits
  3317                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3318                           ;	Power-up default value for COSC bits
  3319                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3320   300000                     	org	3145728
  3321   300000  AA                 	db	170
  3322                           
  3323                           ;Config register CONFIG1H @ 0x300001
  3324                           ;	unspecified, using default values
  3325                           ;	Clock Out Enable bit
  3326                           ;	CLKOUTEN = 0x1, unprogrammed default
  3327                           ;	Clock Switch Enable bit
  3328                           ;	CSWEN = 0x1, unprogrammed default
  3329                           ;	Fail-Safe Clock Monitor Enable bit
  3330                           ;	FCMEN = 0x1, unprogrammed default
  3331   300001                     	org	3145729
  3332   300001  FF                 	db	255
  3333                           
  3334                           ;Config register CONFIG3L @ 0x300004
  3335                           ;	WDT Period Select bits
  3336                           ;	WDTCPS = 0x1F, unprogrammed default
  3337                           ;	WDT operating mode
  3338                           ;	WDTE = OFF, WDT Disabled
  3339   300004                     	org	3145732
  3340   300004  9F                 	db	159
  3341                           
  3342                           ;Config register CONFIG3H @ 0x300005
  3343                           ;	unspecified, using default values
  3344                           ;	WDT Window Select bits
  3345                           ;	WDTCWS = 0x7, unprogrammed default
  3346                           ;	WDT input clock selector
  3347                           ;	WDTCCS = 0x7, unprogrammed default
  3348   300005                     	org	3145733
  3349   300005  FF                 	db	255
  3350                           tosu	equ	0xFFF
  3351                           tosh	equ	0xFFE
  3352                           tosl	equ	0xFFD
  3353                           stkptr	equ	0xFFC
  3354                           pclatu	equ	0xFFB
  3355                           pclath	equ	0xFFA
  3356                           pcl	equ	0xFF9
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           indf0	equ	0xFEF
  3364                           postinc0	equ	0xFEE
  3365                           postdec0	equ	0xFED
  3366                           preinc0	equ	0xFEC
  3367                           plusw0	equ	0xFEB
  3368                           fsr0h	equ	0xFEA
  3369                           fsr0l	equ	0xFE9
  3370                           wreg	equ	0xFE8
  3371                           indf1	equ	0xFE7
  3372                           postinc1	equ	0xFE6
  3373                           postdec1	equ	0xFE5
  3374                           preinc1	equ	0xFE4
  3375                           plusw1	equ	0xFE3
  3376                           fsr1h	equ	0xFE2
  3377                           fsr1l	equ	0xFE1
  3378                           bsr	equ	0xFE0
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           preinc2	equ	0xFDC
  3383                           plusw2	equ	0xFDB
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     64      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(COMRAM[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), main@motorR(COMRAM[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   46315
                                             41 COMRAM    23    23      0
                       _batteryLevel
                        _calibration
                    _initDCmotorsPWM
                               _move
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   27884
                                             30 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    4725
                                             18 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   17031
                                             30 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     535
                                              8 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _initDCmotorsPWM
   _move
     _fullSpeedAhead
       _setMotorPWM
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
     _turnRight

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     40      40       1       67.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhhhh     17      0       0      36        0.0%
BITBIGSFRllhhhh      5      0       0      37        0.0%
BITBIGSFRllhhlh      2      0       0      38        0.0%
BITBIGSFRllhhll      1      0       0      39        0.0%
BITBIGSFRllhlhh     16      0       0      40        0.0%
BITBIGSFRllhlhh      3      0       0      41        0.0%
BITBIGSFRllhlhl      6      0       0      42        0.0%
BITBIGSFRllhll      31      0       0      43        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRllllh      6C      0       0      45        0.0%
BITBIGSFRlllllh     2B      0       0      46        0.0%
BITBIGSFRlllllh     11      0       0      47        0.0%
BITBIGSFRlllllh      1      0       0      48        0.0%
BITBIGSFRllllll      A      0       0      49        0.0%
BITBIGSFRllllll     7A      0       0      50        0.0%
ABS                  0      0       0      51        0.0%
BIGRAM             DE9      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 04 21:58:30 2024

                             l40 1A50                               l41 1A50                               l37 19E6  
                             l39 19F4                     ___awdiv@sign 0006              ___wmul@multiplicand 0003  
               main@turnDuration 002C                              l201 133E                              l210 17B4  
                            l115 196E                              l131 117A                              l108 1C7C  
                            l213 17F2                              l205 176C                              l133 117A  
                            l150 15E4                              l214 17FA                              l231 1D3E  
                            l152 1608                              l216 181A                              l209 1788  
                            l146 1578                              l251 1D90                              l227 1D26  
                            l155 167C                              l163 13C2                              l252 1D96  
                            l228 1D28                              l172 14C6                              l180 1ADC  
                            l229 1D3C                              l246 1D7E                              l158 16AA  
                            l255 1D64                              l175 14F4                              l167 142E  
                            l184 1B28                              l249 1D82                              l169 1452  
                            l193 1268                              l195 128C                              l189 11FC  
                            l198 1300                              l486 1BEC                              l753 1CF0  
                            l746 1CE8                              u230 1D90                              u231 1D8C  
                            u500 1CD2                              u501 1CCE                              u510 1836  
                            u511 1832                              u520 18F2                              u600 159C  
                            u521 18EE                              u601 1598                              u610 15C4  
                            u530 13E6                              u611 15C0                              u531 13E2  
                            u700 1B3C                              u620 1608                              u540 140E  
                            u701 1B38                              u621 1604                              u541 140A  
                            u710 1B56                              u630 161C                              u550 1452  
                            u711 1B52                              u631 1618                              u551 144E  
                            u720 1B7C                              u480 1C98                              u640 16A0  
                            u560 1466                              u800 1796                              u721 1B78  
                            u481 1C94                              u641 169C                              u561 1462  
                            u801 1792                              u730 1B9A                              u490 1CB6  
                            u570 14EA                              u810 17AC                              u650 1220  
                            u731 1B96                              u491 1CB2                              u571 14E6  
                            u811 17A8                              u651 121C                              u740 1BB6  
                            u820 17C2                              u580 1B00                              u660 1248  
                            u900 115E                              u741 1BB2                              u821 17BE  
                            u581 1AFC                              u661 1244                              u901 115A  
                            u750 1BDC                              u830 17EC                              u590 1B28  
                            u670 128C                              u910 19F4                              u751 1BD8  
                            u831 17E8                              u591 1B24                              u671 1288  
                            u911 19F0                              u760 1D20                              u680 12A0  
                            u840 0E12                              u761 1D1C                              u681 129C  
                            u841 0E0E                              u770 1D36                              u690 1324  
                            u850 0E9C                              u771 1D32                              u691 1320  
                            u851 0E98                              u780 177A                              u860 0F12  
                            u781 1776                              u861 0F0E                              u790 1788  
                            u870 0FE8                              u791 1784                              u871 0FE4  
                            u880 10A2                              u881 109E                              u890 1130  
                            u891 112C                              u947 1A02                              u957 0E34  
                            u967 0E64                              u977 0EBE                              u987 0EEE  
                            u997 0F34                              wreg 0FE8                             l1140 1D7C  
                           l1132 1D66                             l1142 1D80                             l1134 1D70  
                           l1144 1D94                             l1136 1D78                             l1138 1D7A  
                           l1500 139A                             l1502 13A2                             l1510 13EA  
                           l1600 16A0                             l1512 140E                             l1504 13AE  
                           l1450 1D5C                             l1530 14B2                             l1522 146A  
                           l1514 141A                             l1506 13BE                             l1610 11CC  
                           l1460 1CA0                             l1532 14C2                             l1524 1496  
                           l1516 142A                             l1508 13E6                             l1700 1C24  
                           l1540 1A74                             l1620 1220                             l1612 11D4  
                           l1604 117C                             l1470 1CDA                             l1462 1CA8  
                           l1454 1C7E                             l1534 14EA                             l1526 149E  
                           l1518 1458                             l1710 1C62                             l1702 1C28  
                           l1550 1AC8                             l1542 1A80                             l1630 1292  
                           l1614 11DC                             l1622 1224                             l1606 1194  
                           l1720 1CF2                             l1472 1CDC                             l1464 1CB6  
                           l1456 1C86                             l1448 1D40                             l1480 1884  
                           l1560 1510                             l1528 14A6                             l1712 1C64  
                           l1704 1C4C                             l1552 1AD8                             l1544 1AAC  
                           l1640 12E0                             l1624 1248                             l1616 11E8  
                           l1608 11A0                             l1800 0F72                             l1722 1CFC  
                           l1474 1CE2                             l1466 1CBC                             l1458 1C98  
                           l1490 1932                             l1482 1896                             l1570 1564  
                           l1562 151C                             l1730 16AC                             l1714 1C6E  
                           l1706 1C56                             l1554 1B00                             l1546 1AB4  
                           l1538 1A58                             l1642 12EC                             l1650 132E  
                           l1634 12A4                             l1626 1254                             l1618 11F8  
                           l1810 0FE8                             l1802 0F8A                             l1660 1B48  
                           l1652 1B2A                             l1724 1D12                             l1468 1CD2  
                           l1484 189A                             l1476 181C                             l1580 15D0  
                           l1572 1574                             l1564 1548                             l1492 1340  
                           l1740 177A                             l1732 16CA                             l1716 1C70  
                           l1708 1C58                             l1548 1ABC                             l1556 1B04  
                           l1644 12FC                             l1636 12D0                             l1628 1264  
                           l1812 1000                             l1820 1090                             l1804 0FBA  
                           l1900 19D0                             l1670 1B7C                             l1662 1B56  
                           l1654 1B2E                             l1726 1D20                             l1486 18D8  
                           l1478 1836                             l1590 164C                             l1582 15E0  
                           l1574 159C                             l1566 1550                             l1558 14F6  
                           l1494 135A                             l1750 17C4                             l1742 1796  
                           l1734 16E2                             l1718 1C7A                             l1646 1324  
                           l1638 12D8                             l1822 10A2                             l1814 1018  
                           l1910 19D8                             l1902 19D0                             l1680 1BB6  
                           l1672 1B84                             l1664 1B5E                             l1656 1B3C  
                           l1728 1D36                             l1488 18F2                             l1592 1654  
                           l1584 160E                             l1568 1558                             l1576 15A0  
                           l1496 1366                             l1752 17C6                             l1744 17AC  
                           l1736 1718                             l1824 10BA                             l1832 111E  
                           l1816 1048                             l1808 0FD6                             l1920 19F8  
                           l1912 19DA                             l1904 19D2                             l1690 1BDC  
                           l1682 1BBE                             l1674 1B8C                             l1666 1B62  
                           l1658 1B44                             l1594 165C                             l1578 15C4  
                           l1498 1392                             l1770 1816                             l1754 17DE  
                           l1746 17AE                             l1738 1736                             l1834 1130  
                           l1826 10D2                             l1818 1060                             l1922 1A10  
                           l1914 19DE                             l1906 19D4                             l1692 1BE4  
                           l1684 1BC0                             l1676 1B9A                             l1668 1B6A  
                           l1596 1668                             l1588 1620                             l1756 17EC  
                           l1748 17C2                             l1844 114C                             l1828 1102  
                           l1780 0E72                             l1772 0E02                             l1924 1A28  
                           l1916 19E0                             l1908 19D6                             l1860 1970  
                           l1686 1BC6                             l1678 1BA0                             l1598 1678  
                           l1846 115E                             l1774 0E12                             l1782 0E8A  
                           l1926 1A28                             l1918 19E2                             l1870 1990  
                           l1862 197C                             l1688 1BCC                             l1768 17FE  
                           l1696 1BEE                             l1784 0E9C                             l1792 0F00  
                           l1776 0E2A                             l1880 19AC                             l1872 1998  
                           l1864 1980                             l1698 1BFE                             l1794 0F12  
                           l1786 0EB4                             l1778 0E42                             l1890 19CC  
                           l1882 19B0                             l1874 19A0                             l1866 1984  
                           l1858 1970                             l1796 0F2A                             l1788 0ECC  
                           l1892 19CC                             l1884 19B8                             l1876 19A4  
                           l1868 1988                             l1798 0F42                             l1894 19CC  
                           l1886 19C0                             l1878 19A8                             l1896 19CC  
                           l1888 19C8                             l1898 19CC                             u1007 0F64  
                           u1017 0F94                             u1107 12F2                             u1027 0FC4  
                           u1117 1ACE                             u1037 100A                             u1207 156A  
                           u1127 16D4                             u1047 103A                             u1217 15D6  
                           u1137 170A                             u1057 106A                             u1227 166E  
                           u1147 1740                             u1067 10C4                             u1157 17D0  
                           u1077 10F4                             u1167 1808                             u1087 11EE  
                           u1177 13B4                             u1097 125A                             u1187 1420  
                           u1197 14B8                             _T2PR 0FBC                             _main 1970  
                           _move 0E02                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             prodh 0FF4                             prodl 0FF3  
                           start 0000                 __end_of_ADC_init 1D80                     ___param_bank 0000  
           __end_of_batteryLevel 1D40                            ?_main 0001                            _ADPCH 0F5F  
                __end_of___awdiv 1BEE                            ?_move 001F                  ___awdiv@divisor 0003  
                __end_of___lwdiv 1CF2                  ___awdiv@counter 0005                            status 0FD8  
                __initialization 1D98                     __end_of_main 1A58                     __end_of_move 117C  
            move@reverseDuration 0023                           ??_main 002A                           ??_move 0028  
                  __activetblptr 0000                    calibration@mL 001F                    calibration@mR 0020  
                   ?_setMotorPWM 000E                           _ADRESH 0F64                           _CCPR1H 0FAA  
                         _CCPR2H 0FA6                           _CCPR3H 0F25                           _CCPR4H 0F21  
               ___awdiv@dividend 0001                           _RE2PPS 0E74                           _RC7PPS 0E69  
                         _RE4PPS 0E76                           _RG6PPS 0E88                     ??_ADC_getval 0001  
            calibration@turnRamp 0023          calibration@turnDuration 0022                     _CCPTMRS0bits 0FAD  
                         ___wmul 1D40                        ??___awdiv 0005                        ??___lwdiv 000B  
               ___awdiv@quotient 0007                           isa$std 0001                           move@mL 001F  
                         move@mR 0020                     __mediumconst 0000                        ?_ADC_init 0001  
              ??_initDCmotorsPWM 0003               __end_of_ADC_getval 1D98                 __end_of_turnLeft 16AC  
                     __accesstop 0060          __end_of__initialization 1D98                  fullSpeedAhead@i 001A  
                  ___rparam_used 0001                   __pcstackCOMRAM 0001                 _reverseOneSquare 117C  
                     ??_ADC_init 0001                     _batteryLevel 1CF2                     _T2CLKCONbits 0FBF  
                        ?___wmul 0001       fullSpeedAhead@straightRamp 0016            turnRight@turnDuration 0016  
                      _ADREFbits 0F58                          __Hparam 0000                          __Lparam 0000  
           calibration@turnSpeed 0021                          ___awdiv 1B2A                    ??_calibration 0024  
                        ___lwdiv 1C7E                     __psmallconst 0E00                          __pcinit 1D98  
                        __ramtop 0E00                        ?_turnLeft 0013                          __ptext0 1970  
                        __ptext1 0E02                          __ptext2 117C                          __ptext3 1A58  
                        __ptext4 1BEE                          __ptext5 16AC                          __ptext6 1340  
                        __ptext7 14F6                          __ptext8 181C                          __ptext9 1D40  
                      _T2CONbits 0FBD                        _T2HLTbits 0FBE             end_of_initialization 1D98  
               ADC_getval@tmpval 0001                reverseOneSquare@i 001B       batteryLevel@batteryQuarter 000A  
                        postdec2 0FDD                          postinc2 0FDE       batteryLevel@batteryVoltage 0009  
                _initDCmotorsPWM 1BEE                       ??_turnLeft 0018                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0012                    move@turnSpeed 0025                __end_of_turnRight 14F6  
            __end_of_calibration 181C               setMotorPWM@posDuty 0011                        _TRISCbits 0F83  
                      _TRISDbits 0F84                        _TRISEbits 0F85                        _TRISFbits 0F86  
                      _TRISGbits 0F87                        _TRISHbits 0F88                 fullSpeedAhead@mL 0013  
               fullSpeedAhead@mR 0014         __end_of_reverseOneSquare 1340                      _CCP1CONbits 0FAB  
                    _CCP2CONbits 0FA7                      _CCP3CONbits 0F26                      _CCP4CONbits 0F22  
                     main@motorL 002D                       main@motorR 0037                   _fullSpeedAhead 1A58  
           turnLeft@turnDuration 0016                   __end_of___wmul 1D66              start_initialization 1D98  
        __end_of_initDCmotorsPWM 1C7E           __end_of_fullSpeedAhead 1B2A               turnRight@cur_power 001D  
                       ??___wmul 0005                      _calibration 16AC     reverseOneSquare@straightRamp 0017  
              turnLeft@cur_power 001D                 ___lwdiv@dividend 0007                  ?_fullSpeedAhead 0013  
             turnRight@turnSpeed 0015                         ?___awdiv 0001                         ?___lwdiv 0007  
                    __smallconst 0E00                turnLeft@turnSpeed 0015                         _ADC_init 1D66  
                  ??_setMotorPWM 000F                 ___lwdiv@quotient 000B         initDCmotorsPWM@PWMperiod 0001  
              move@straightSpeed 0022                   ___wmul@product 0005                         _LATCbits 0F7B  
                       _LATDbits 0F7C                         _LATEbits 0F7D                         _LATGbits 0F7F  
                       _LATHbits 0F80                      turnRight@mL 0013                      turnRight@mR 0014  
               ?_initDCmotorsPWM 0001      fullSpeedAhead@straightSpeed 0015                     move@turnRamp 0027  
                     _ADCON0bits 0F60                ___wmul@multiplier 0001                     setMotorPWM@m 000E  
                      _turnRight 1340                ?_reverseOneSquare 0013              __end_of_setMotorPWM 1970  
reverseOneSquare@reverseDuration 0016               ??_reverseOneSquare 0018                         __Hrparam 0000  
                     _ADC_getval 1D80                         __Lrparam 0000                       _ANSELFbits 0EB4  
  reverseOneSquare@straightSpeed 0015                  ___lwdiv@divisor 0009                  ___lwdiv@counter 000D  
              turnRight@turnRamp 0017                       ?_turnRight 0013                         __ptext10 1C7E  
                       __ptext11 1CF2                         __ptext12 1B2A                         __ptext13 1D66  
                       __ptext14 1D80                        move@color 0021                    ?_batteryLevel 0001  
               turnLeft@turnRamp 0017                       turnLeft@mL 0013                       turnLeft@mR 0014  
               move@straightRamp 0024                       turnRight@i 001B                         isa$xinst 0000  
                   ?_calibration 001F                         _turnLeft 14F6          fullSpeedAhead@cur_power 001C  
      reverseOneSquare@cur_power 001D               reverseOneSquare@mL 0013               reverseOneSquare@mR 0014  
               move@turnDuration 0026                   ??_batteryLevel 0009                      _setMotorPWM 181C  
               ??_fullSpeedAhead 0017                        turnLeft@i 001B                      ?_ADC_getval 0001  
                    ??_turnRight 0018  
