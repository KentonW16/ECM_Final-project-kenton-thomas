

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 09 12:29:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    62   000000                     
    63                           ; Generated 21/07/2023 GMT
    64                           ; 
    65                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F67K40 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97   000000                     
    98                           	psect	idataCOMRAM
    99   002682                     __pidataCOMRAM:
   100                           	callstack 0
   101                           
   102                           ;initializer for _ambient
   103   002682  01F4               	dw	500
   104   000000                     _TRISCbits	set	3971
   105   000000                     _RC4STAbits	set	3815
   106   000000                     _SP4BRGH	set	3814
   107   000000                     _SP4BRGL	set	3813
   108   000000                     _TX4STAbits	set	3816
   109   000000                     _BAUD4CONbits	set	3817
   110   000000                     _TX4REG	set	3812
   111   000000                     _TRISBbits	set	3970
   112   000000                     _TRISAbits	set	3969
   113   000000                     _TRISEbits	set	3973
   114   000000                     _TRISGbits	set	3975
   115   000000                     _LATFbits	set	3966
   116   000000                     _TRISFbits	set	3974
   117   000000                     _TRISHbits	set	3976
   118   000000                     _TRISDbits	set	3972
   119   000000                     _LATEbits	set	3965
   120   000000                     _LATGbits	set	3967
   121   000000                     _LATHbits	set	3968
   122   000000                     _SSP2CON2bits	set	3802
   123   000000                     _RX4PPS	set	3605
   124   000000                     _SSP2CLKPPS	set	3612
   125   000000                     _SSP2DATPPS	set	3613
   126   000000                     _PIE0bits	set	3625
   127   000000                     _CCPR4H	set	3873
   128   000000                     _CCPR3H	set	3877
   129   000000                     _CCPR2H	set	4006
   130   000000                     _CCPR1H	set	4010
   131   000000                     _CCP1CONbits	set	4011
   132   000000                     _CCPTMRS0bits	set	4013
   133   000000                     _T2PR	set	4028
   134   000000                     _T2CONbits	set	4029
   135   000000                     _INTCONbits	set	4082
   136   000000                     _CCP2CONbits	set	4007
   137   000000                     _CCP3CONbits	set	3878
   138   000000                     _ADREFbits	set	3928
   139   000000                     _LATAbits	set	3961
   140   000000                     _LATDbits	set	3964
   141   000000                     _PORTFbits	set	3982
   142   000000                     _CCP4CONbits	set	3874
   143   000000                     _PIE4bits	set	3629
   144   000000                     _RD5PPS	set	3695
   145   000000                     _ANSELDbits	set	3751
   146   000000                     _SSP2ADD	set	3798
   147   000000                     _SSP2CON1bits	set	3801
   148   000000                     _LATCbits	set	3963
   149   000000                     _RC4REG	set	3811
   150   000000                     _SSP2CON2	set	3802
   151   000000                     _SSP2STAT	set	3800
   152   000000                     _ANSELFbits	set	3764
   153   000000                     _SSP2BUF	set	3797
   154   000000                     _IPR0bits	set	3615
   155   000000                     _RE2PPS	set	3700
   156   000000                     _ANSELBbits	set	3738
   157   000000                     _RD6PPS	set	3696
   158   000000                     _PIR0bits	set	3635
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161   000000                     _RC7PPS	set	3689
   162   000000                     _ADPCH	set	3935
   163   000000                     _ADRESH	set	3940
   164   000000                     _ADCON0bits	set	3936
   165   000000                     _RE4PPS	set	3702
   166   000000                     _RG6PPS	set	3720
   167   000000                     _T2CLKCONbits	set	4031
   168   000000                     _T2HLTbits	set	4030
   169                           
   170                           ; #config settings
   171                           
   172                           	psect	cinit
   173   002376                     __pcinit:
   174                           	callstack 0
   175   002376                     start_initialization:
   176                           	callstack 0
   177   002376                     __initialization:
   178                           	callstack 0
   179                           
   180                           ; Initialize objects allocated to COMRAM (2 bytes)
   181                           ; load TBLPTR registers with __pidataCOMRAM
   182   002376  0E82               	movlw	low __pidataCOMRAM
   183   002378  6EF6               	movwf	tblptrl,c
   184   00237A  0E26               	movlw	high __pidataCOMRAM
   185   00237C  6EF7               	movwf	tblptrh,c
   186   00237E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   187   002380  6EF8               	movwf	tblptru,c
   188   002382  0009               	tblrd		*+	;fetch initializer
   189   002384  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   190   002388  0009               	tblrd		*+	;fetch initializer
   191   00238A  CFF5 F050          	movff	tablat,__pdataCOMRAM+1
   192                           
   193                           ; Clear objects allocated to BANK1 (40 bytes)
   194   00238E  EE01  F000         	lfsr	0,__pbssBANK1
   195   002392  0E28               	movlw	40
   196   002394                     clear_0:
   197   002394  6AEE               	clrf	postinc0,c
   198   002396  06E8               	decf	wreg,f,c
   199   002398  E1FD               	bnz	clear_0
   200                           
   201                           ; Clear objects allocated to BANK0 (61 bytes)
   202   00239A  EE00  F0B3         	lfsr	0,__pbssBANK0
   203   00239E  0E3D               	movlw	61
   204   0023A0                     clear_1:
   205   0023A0  6AEE               	clrf	postinc0,c
   206   0023A2  06E8               	decf	wreg,f,c
   207   0023A4  E1FD               	bnz	clear_1
   208                           
   209                           ; Clear objects allocated to COMRAM (24 bytes)
   210   0023A6  EE00  F037         	lfsr	0,__pbssCOMRAM
   211   0023AA  0E18               	movlw	24
   212   0023AC                     clear_2:
   213   0023AC  6AEE               	clrf	postinc0,c
   214   0023AE  06E8               	decf	wreg,f,c
   215   0023B0  E1FD               	bnz	clear_2
   216   0023B2                     end_of_initialization:
   217                           	callstack 0
   218   0023B2                     __end_of__initialization:
   219                           	callstack 0
   220   0023B2  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   221   0023B4  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   222   0023B6  0100               	movlb	0
   223   0023B8  EF8B  F00A         	goto	_main	;jump to C main() function
   224                           
   225                           	psect	bssCOMRAM
   226   000037                     __pbssCOMRAM:
   227                           	callstack 0
   228   000037                     _EUSART4RXbuf:
   229                           	callstack 0
   230   000037                     	ds	20
   231   00004B                     _TxBufReadCnt:
   232                           	callstack 0
   233   00004B                     	ds	1
   234   00004C                     _TxBufWriteCnt:
   235                           	callstack 0
   236   00004C                     	ds	1
   237   00004D                     _RxBufReadCnt:
   238                           	callstack 0
   239   00004D                     	ds	1
   240   00004E                     _RxBufWriteCnt:
   241                           	callstack 0
   242   00004E                     	ds	1
   243                           
   244                           	psect	dataCOMRAM
   245   00004F                     __pdataCOMRAM:
   246                           	callstack 0
   247   00004F                     _ambient:
   248                           	callstack 0
   249   00004F                     	ds	2
   250                           
   251                           	psect	bssBANK0
   252   0000B3                     __pbssBANK0:
   253                           	callstack 0
   254   0000B3                     _EUSART4TXbuf:
   255                           	callstack 0
   256   0000B3                     	ds	60
   257   0000EF                     _wall:
   258                           	callstack 0
   259   0000EF                     	ds	1
   260                           
   261                           	psect	bssBANK1
   262   000100                     __pbssBANK1:
   263                           	callstack 0
   264   000100                     	ds	40
   265                           
   266                           	psect	cstackBANK0
   267   000060                     __pcstackBANK0:
   268                           	callstack 0
   269   000060                     main@buf:
   270                           	callstack 0
   271                           
   272                           ; 40 bytes @ 0x0
   273   000060                     	ds	40
   274   000088                     main@color:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0x28
   278   000088                     	ds	1
   279   000089                     main@reverseDuration:
   280                           	callstack 0
   281                           
   282                           ; 1 bytes @ 0x29
   283   000089                     	ds	1
   284   00008A                     main@turnSpeed:
   285                           	callstack 0
   286                           
   287                           ; 1 bytes @ 0x2A
   288   00008A                     	ds	1
   289   00008B                     main@turnDuration:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x2B
   293   00008B                     	ds	1
   294   00008C                     main@turnRamp:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0x2C
   298   00008C                     	ds	1
   299   00008D                     main@straightSpeed:
   300                           	callstack 0
   301                           
   302                           ; 1 bytes @ 0x2D
   303   00008D                     	ds	1
   304   00008E                     main@straightRamp:
   305                           	callstack 0
   306                           
   307                           ; 1 bytes @ 0x2E
   308   00008E                     	ds	1
   309   00008F                     main@RGBC_n:
   310                           	callstack 0
   311                           
   312                           ; 8 bytes @ 0x2F
   313   00008F                     	ds	8
   314   000097                     main@RGBC:
   315                           	callstack 0
   316                           
   317                           ; 8 bytes @ 0x37
   318   000097                     	ds	8
   319   00009F                     main@motorR:
   320                           	callstack 0
   321                           
   322                           ; 10 bytes @ 0x3F
   323   00009F                     	ds	10
   324   0000A9                     main@motorL:
   325                           	callstack 0
   326                           
   327                           ; 10 bytes @ 0x49
   328   0000A9                     	ds	10
   329                           
   330                           	psect	cstackCOMRAM
   331   000001                     __pcstackCOMRAM:
   332                           	callstack 0
   333   000001                     ??_getCharFromTxBuf:
   334   000001                     ??i2_I2C_2_Master_Idle:
   335   000001                     putCharToRxBuf@byte:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x0
   339   000001                     	ds	1
   340   000002                     i2I2C_2_Master_Write@data_byte:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x1
   344   000002                     	ds	1
   345   000003                     i2color_writetoaddr@value:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x2
   349   000003                     	ds	1
   350   000004                     i2color_writetoaddr@address:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x3
   354   000004                     	ds	1
   355   000005                     ??i2_color_clear_init_interrupts:
   356                           
   357                           ; 1 bytes @ 0x4
   358   000005                     	ds	1
   359   000006                     i2color_clear_init_interrupts@high_threshold:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x5
   363   000006                     	ds	2
   364   000008                     i2color_clear_init_interrupts@low_threshold:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368   000008                     	ds	2
   369   00000A                     ??_HighISR:
   370                           
   371                           ; 1 bytes @ 0x9
   372   00000A                     	ds	2
   373   00000C                     ??_I2C_2_Master_Idle:
   374   00000C                     ?___wmul:
   375                           	callstack 0
   376   00000C                     ?___awdiv:
   377                           	callstack 0
   378   00000C                     ?___lmul:
   379                           	callstack 0
   380   00000C                     white_Light@state:
   381                           	callstack 0
   382   00000C                     ADC_getval@tmpval:
   383                           	callstack 0
   384   00000C                     initDCmotorsPWM@PWMperiod:
   385                           	callstack 0
   386   00000C                     ___wmul@multiplier:
   387                           	callstack 0
   388   00000C                     ___awdiv@dividend:
   389                           	callstack 0
   390   00000C                     ___lmul@multiplier:
   391                           	callstack 0
   392   00000C                     color_detect@RGBC_n:
   393                           	callstack 0
   394                           
   395                           ; 8 bytes @ 0xB
   396   00000C                     	ds	1
   397   00000D                     ??_I2C_2_Master_Read:
   398   00000D                     I2C_2_Master_Write@data_byte:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0xC
   402   00000D                     	ds	1
   403   00000E                     color_writetoaddr@value:
   404                           	callstack 0
   405   00000E                     I2C_2_Master_Read@ack:
   406                           	callstack 0
   407   00000E                     ___wmul@multiplicand:
   408                           	callstack 0
   409   00000E                     ___awdiv@divisor:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0xD
   413   00000E                     	ds	1
   414   00000F                     color_writetoaddr@address:
   415                           	callstack 0
   416   00000F                     I2C_2_Master_Read@tmp:
   417                           	callstack 0
   418                           
   419                           ; 1 bytes @ 0xE
   420   00000F                     	ds	1
   421   000010                     ??_color_clear_init_interrupts:
   422   000010                     color_read@RGBC:
   423                           	callstack 0
   424   000010                     ___awdiv@counter:
   425                           	callstack 0
   426   000010                     ___wmul@product:
   427                           	callstack 0
   428   000010                     ___lmul@multiplicand:
   429                           	callstack 0
   430                           
   431                           ; 4 bytes @ 0xF
   432   000010                     	ds	1
   433   000011                     ??_color_read:
   434   000011                     ___awdiv@sign:
   435                           	callstack 0
   436   000011                     color_clear_init_interrupts@high_threshold:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x10
   440   000011                     	ds	1
   441   000012                     ?___lwdiv:
   442                           	callstack 0
   443   000012                     ___awdiv@quotient:
   444                           	callstack 0
   445   000012                     ___lwdiv@dividend:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x11
   449   000012                     	ds	1
   450   000013                     color_clear_init_interrupts@low_threshold:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x12
   454   000013                     	ds	1
   455   000014                     color_detect@color:
   456                           	callstack 0
   457   000014                     batteryLevel@batteryVoltage:
   458                           	callstack 0
   459   000014                     ___lwdiv@divisor:
   460                           	callstack 0
   461   000014                     ___lmul@product:
   462                           	callstack 0
   463                           
   464                           ; 4 bytes @ 0x13
   465   000014                     	ds	1
   466   000015                     ??_color_click_init:
   467   000015                     batteryLevel@batteryQuarter:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0x14
   471   000015                     	ds	1
   472   000016                     ___lwdiv@quotient:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x15
   476   000016                     	ds	2
   477   000018                     ?___aldiv:
   478                           	callstack 0
   479   000018                     ___lwdiv@counter:
   480                           	callstack 0
   481   000018                     ___aldiv@dividend:
   482                           	callstack 0
   483                           
   484                           ; 4 bytes @ 0x17
   485   000018                     	ds	1
   486   000019                     setMotorPWM@m:
   487                           	callstack 0
   488                           
   489                           ; 1 bytes @ 0x18
   490   000019                     	ds	1
   491   00001A                     ??_setMotorPWM:
   492                           
   493                           ; 1 bytes @ 0x19
   494   00001A                     	ds	2
   495   00001C                     setMotorPWM@posDuty:
   496                           	callstack 0
   497   00001C                     ___aldiv@divisor:
   498                           	callstack 0
   499                           
   500                           ; 4 bytes @ 0x1B
   501   00001C                     	ds	1
   502   00001D                     setMotorPWM@negDuty:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0x1C
   506   00001D                     	ds	1
   507   00001E                     stop@mL:
   508                           	callstack 0
   509   00001E                     turnLeft@mL:
   510                           	callstack 0
   511   00001E                     turnRight@mL:
   512                           	callstack 0
   513   00001E                     fullSpeedAhead@mL:
   514                           	callstack 0
   515   00001E                     reverseOneSquare@mL:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x1D
   519   00001E                     	ds	1
   520   00001F                     stop@mR:
   521                           	callstack 0
   522   00001F                     turnLeft@mR:
   523                           	callstack 0
   524   00001F                     turnRight@mR:
   525                           	callstack 0
   526   00001F                     fullSpeedAhead@mR:
   527                           	callstack 0
   528   00001F                     reverseOneSquare@mR:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x1E
   532   00001F                     	ds	1
   533   000020                     stop@straightRamp:
   534                           	callstack 0
   535   000020                     turnLeft@turnSpeed:
   536                           	callstack 0
   537   000020                     turnRight@turnSpeed:
   538                           	callstack 0
   539   000020                     fullSpeedAhead@straightSpeed:
   540                           	callstack 0
   541   000020                     reverseOneSquare@straightSpeed:
   542                           	callstack 0
   543   000020                     ___aldiv@counter:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x1F
   547   000020                     	ds	1
   548   000021                     ??_stop:
   549   000021                     turnLeft@turnDuration:
   550                           	callstack 0
   551   000021                     turnRight@turnDuration:
   552                           	callstack 0
   553   000021                     fullSpeedAhead@straightRamp:
   554                           	callstack 0
   555   000021                     reverseOneSquare@reverseDuration:
   556                           	callstack 0
   557   000021                     ___aldiv@sign:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x20
   561   000021                     	ds	1
   562   000022                     ??_fullSpeedAhead:
   563   000022                     turnLeft@turnRamp:
   564                           	callstack 0
   565   000022                     turnRight@turnRamp:
   566                           	callstack 0
   567   000022                     reverseOneSquare@straightRamp:
   568                           	callstack 0
   569   000022                     ___aldiv@quotient:
   570                           	callstack 0
   571                           
   572                           ; 4 bytes @ 0x21
   573   000022                     	ds	1
   574   000023                     ??_turnRight:
   575   000023                     ??_turnLeft:
   576   000023                     ??_reverseOneSquare:
   577                           
   578                           ; 1 bytes @ 0x22
   579   000023                     	ds	1
   580   000024                     stop@i:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x23
   584   000024                     	ds	1
   585   000025                     fullSpeedAhead@i:
   586                           	callstack 0
   587                           
   588                           ; 2 bytes @ 0x24
   589   000025                     	ds	1
   590   000026                     stop@cur_power:
   591                           	callstack 0
   592   000026                     turnLeft@i:
   593                           	callstack 0
   594   000026                     turnRight@i:
   595                           	callstack 0
   596   000026                     reverseOneSquare@i:
   597                           	callstack 0
   598   000026                     color_normalise@RGBC:
   599                           	callstack 0
   600                           
   601                           ; 8 bytes @ 0x25
   602   000026                     	ds	1
   603   000027                     fullSpeedAhead@cur_power:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x26
   607   000027                     	ds	1
   608   000028                     turnLeft@cur_power:
   609                           	callstack 0
   610   000028                     turnRight@cur_power:
   611                           	callstack 0
   612   000028                     reverseOneSquare@cur_power:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x27
   616   000028                     	ds	2
   617   00002A                     move@mL:
   618                           	callstack 0
   619                           
   620                           ; 1 bytes @ 0x29
   621   00002A                     	ds	1
   622   00002B                     move@mR:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x2A
   626   00002B                     	ds	1
   627   00002C                     move@color:
   628                           	callstack 0
   629                           
   630                           ; 1 bytes @ 0x2B
   631   00002C                     	ds	1
   632   00002D                     move@straightSpeed:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0x2C
   636   00002D                     	ds	1
   637   00002E                     color_normalise@RGBC_n:
   638                           	callstack 0
   639   00002E                     move@reverseDuration:
   640                           	callstack 0
   641                           
   642                           ; 1 bytes @ 0x2D
   643   00002E                     	ds	1
   644   00002F                     ??_color_normalise:
   645   00002F                     move@straightRamp:
   646                           	callstack 0
   647                           
   648                           ; 1 bytes @ 0x2E
   649   00002F                     	ds	1
   650   000030                     move@turnSpeed:
   651                           	callstack 0
   652                           
   653                           ; 1 bytes @ 0x2F
   654   000030                     	ds	1
   655   000031                     move@turnDuration:
   656                           	callstack 0
   657                           
   658                           ; 1 bytes @ 0x30
   659   000031                     	ds	1
   660   000032                     move@turnRamp:
   661                           	callstack 0
   662                           
   663                           ; 1 bytes @ 0x31
   664   000032                     	ds	1
   665   000033                     ??_move:
   666                           
   667                           ; 1 bytes @ 0x32
   668   000033                     	ds	2
   669   000035                     ??_main:
   670                           
   671                           ; 1 bytes @ 0x34
   672   000035                     	ds	2
   673                           
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 26 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  buf            40    0[BANK0 ] unsigned char [40]
   684 ;;  motorL         10   73[BANK0 ] struct DC_motor
   685 ;;  motorR         10   63[BANK0 ] struct DC_motor
   686 ;;  RGBC            8   55[BANK0 ] struct RGBC_val
   687 ;;  RGBC_n          8   47[BANK0 ] struct RGBC_val
   688 ;;  PWMcycle        2    0        unsigned int 
   689 ;;  straightRamp    1   46[BANK0 ] unsigned char 
   690 ;;  straightSpee    1   45[BANK0 ] unsigned char 
   691 ;;  turnRamp        1   44[BANK0 ] unsigned char 
   692 ;;  turnDuration    1   43[BANK0 ] unsigned char 
   693 ;;  turnSpeed       1   42[BANK0 ] unsigned char 
   694 ;;  reverseDurat    1   41[BANK0 ] unsigned char 
   695 ;;  color           1   40[BANK0 ] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   706 ;;      Locals:         0      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   708 ;;      Totals:         2      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   709 ;;Total ram usage:       85 bytes
   710 ;; Hardware stack levels required when called: 10
   711 ;; This function calls:
   712 ;;		_Buggy_init
   713 ;;		_Interrupts_init
   714 ;;		_batteryLevel
   715 ;;		_color_click_init
   716 ;;		_color_detect
   717 ;;		_color_normalise
   718 ;;		_color_read
   719 ;;		_fullSpeedAhead
   720 ;;		_initDCmotorsPWM
   721 ;;		_initUSART4
   722 ;;		_move
   723 ;;		_stop
   724 ;;		_white_Light
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text0
   731   001516                     __ptext0:
   732                           	callstack 0
   733   001516                     _main:
   734                           	callstack 21
   735   001516                     
   736                           ;main.c: 28:     char buf[40] = {0};
   737   001516  EE20  F060         	lfsr	2,main@buf
   738   00151A  0E27               	movlw	39
   739   00151C                     u1451:
   740   00151C  6ADE               	clrf	postinc2,c
   741   00151E  06E8               	decf	wreg,f,c
   742   001520  E2FD               	bc	u1451
   743   001522                     
   744                           ;main.c: 30:     unsigned char color;;main.c: 33:     struct RGBC_val RGBC, RGBC_n;;main
      +                          .c: 34:     struct DC_motor motorL, motorR;;main.c: 37:     Buggy_init();
   745   001522  EC1B  F012         	call	_Buggy_init	;wreg free
   746   001526                     
   747                           ;main.c: 38:     color_click_init();
   748   001526  ECFF  F011         	call	_color_click_init	;wreg free
   749   00152A                     
   750                           ;main.c: 39:     Interrupts_init();
   751   00152A  EC12  F013         	call	_Interrupts_init	;wreg free
   752   00152E                     
   753                           ;main.c: 40:     initUSART4();
   754   00152E  ECDE  F012         	call	_initUSART4	;wreg free
   755   001532                     
   756                           ;main.c: 41:     initDCmotorsPWM(PWMcycle);
   757   001532  0E00               	movlw	0
   758   001534  6E0D               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   759   001536  0EC7               	movlw	199
   760   001538  6E0C               	movwf	initDCmotorsPWM@PWMperiod^0,c
   761   00153A  EC34  F010         	call	_initDCmotorsPWM	;wreg free
   762   00153E                     
   763                           ;main.c: 43:     motorL.power=0;
   764   00153E  0E00               	movlw	0
   765   001540  0100               	movlb	0	; () banked
   766   001542  6FA9               	movwf	main@motorL& (0+255),b
   767   001544                     
   768                           ; BSR set to: 0
   769                           ;main.c: 44:     motorL.direction=1;
   770   001544  0E01               	movlw	1
   771   001546  6FAA               	movwf	(main@motorL+1)& (0+255),b
   772   001548                     
   773                           ; BSR set to: 0
   774                           ;main.c: 45:     motorL.brakemode=1;
   775   001548  0E01               	movlw	1
   776   00154A  6FAB               	movwf	(main@motorL+2)& (0+255),b
   777   00154C                     
   778                           ; BSR set to: 0
   779                           ;main.c: 46:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   780   00154C  0EAA               	movlw	170
   781   00154E  6FAE               	movwf	(main@motorL+5)& (0+255),b
   782   001550  0E0F               	movlw	15
   783   001552  6FAF               	movwf	(main@motorL+6)& (0+255),b
   784   001554                     
   785                           ; BSR set to: 0
   786                           ;main.c: 47:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   787   001554  0EA6               	movlw	166
   788   001556  6FB0               	movwf	(main@motorL+7)& (0+255),b
   789   001558  0E0F               	movlw	15
   790   00155A  6FB1               	movwf	(main@motorL+8)& (0+255),b
   791   00155C                     
   792                           ; BSR set to: 0
   793                           ;main.c: 48:     motorL.PWMperiod=PWMcycle;
   794   00155C  0E00               	movlw	0
   795   00155E  6FAD               	movwf	(main@motorL+4)& (0+255),b
   796   001560  0EC7               	movlw	199
   797   001562  6FAC               	movwf	(main@motorL+3)& (0+255),b
   798   001564                     
   799                           ; BSR set to: 0
   800                           ;main.c: 49:     motorL.compensation=3;
   801   001564  0E03               	movlw	3
   802   001566  6FB2               	movwf	(main@motorL+9)& (0+255),b
   803   001568                     
   804                           ; BSR set to: 0
   805                           ;main.c: 51:     motorR.power=0;
   806   001568  0E00               	movlw	0
   807   00156A  6F9F               	movwf	main@motorR& (0+255),b
   808   00156C                     
   809                           ; BSR set to: 0
   810                           ;main.c: 52:     motorR.direction=1;
   811   00156C  0E01               	movlw	1
   812   00156E  6FA0               	movwf	(main@motorR+1)& (0+255),b
   813   001570                     
   814                           ; BSR set to: 0
   815                           ;main.c: 53:     motorR.brakemode=1;
   816   001570  0E01               	movlw	1
   817   001572  6FA1               	movwf	(main@motorR+2)& (0+255),b
   818   001574                     
   819                           ; BSR set to: 0
   820                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   821   001574  0E25               	movlw	37
   822   001576  6FA4               	movwf	(main@motorR+5)& (0+255),b
   823   001578  0E0F               	movlw	15
   824   00157A  6FA5               	movwf	(main@motorR+6)& (0+255),b
   825   00157C                     
   826                           ; BSR set to: 0
   827                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   828   00157C  0E21               	movlw	33
   829   00157E  6FA6               	movwf	(main@motorR+7)& (0+255),b
   830   001580  0E0F               	movlw	15
   831   001582  6FA7               	movwf	(main@motorR+8)& (0+255),b
   832   001584                     
   833                           ; BSR set to: 0
   834                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
   835   001584  0E00               	movlw	0
   836   001586  6FA3               	movwf	(main@motorR+4)& (0+255),b
   837   001588  0EC7               	movlw	199
   838   00158A  6FA2               	movwf	(main@motorR+3)& (0+255),b
   839   00158C                     
   840                           ; BSR set to: 0
   841                           ;main.c: 57:     motorR.compensation=0;
   842   00158C  0E00               	movlw	0
   843   00158E  6FA8               	movwf	(main@motorR+9)& (0+255),b
   844   001590                     
   845                           ; BSR set to: 0
   846                           ;main.c: 60:     char straightSpeed=25;
   847   001590  0E19               	movlw	25
   848   001592  6F8D               	movwf	main@straightSpeed& (0+255),b
   849   001594                     
   850                           ; BSR set to: 0
   851                           ;main.c: 61:     unsigned char straightRamp=2;
   852   001594  0E02               	movlw	2
   853   001596  6F8E               	movwf	main@straightRamp& (0+255),b
   854   001598                     
   855                           ; BSR set to: 0
   856                           ;main.c: 63:     unsigned char reverseDuration=10;
   857   001598  0E0A               	movlw	10
   858   00159A  6F89               	movwf	main@reverseDuration& (0+255),b
   859   00159C                     
   860                           ; BSR set to: 0
   861                           ;main.c: 65:     char turnSpeed=21;
   862   00159C  0E15               	movlw	21
   863   00159E  6F8A               	movwf	main@turnSpeed& (0+255),b
   864   0015A0                     
   865                           ; BSR set to: 0
   866                           ;main.c: 66:     unsigned char turnDuration=10;
   867   0015A0  0E0A               	movlw	10
   868   0015A2  6F8B               	movwf	main@turnDuration& (0+255),b
   869   0015A4                     
   870                           ; BSR set to: 0
   871                           ;main.c: 67:     unsigned char turnRamp=4;
   872   0015A4  0E04               	movlw	4
   873   0015A6  6F8C               	movwf	main@turnRamp& (0+255),b
   874   0015A8                     
   875                           ; BSR set to: 0
   876                           ;main.c: 70:     batteryLevel();
   877   0015A8  EC94  F011         	call	_batteryLevel	;wreg free
   878   0015AC                     l67:
   879   0015AC  B48E               	btfsc	142,2,c	;volatile
   880   0015AE  EFDB  F00A         	goto	u1461
   881   0015B2  EFDD  F00A         	goto	u1460
   882   0015B6                     u1461:
   883   0015B6  EFD6  F00A         	goto	l67
   884   0015BA                     u1460:
   885   0015BA                     
   886                           ;main.c: 74:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   887   0015BA  9680               	bcf	128,3,c	;volatile
   888   0015BC  9E7C               	bcf	124,7,c	;volatile
   889                           
   890                           ;main.c: 97:     LATHbits.LATH1=LATDbits.LATD3=1;
   891   0015BE  867C               	bsf	124,3,c	;volatile
   892   0015C0  8280               	bsf	128,1,c	;volatile
   893   0015C2                     
   894                           ;main.c: 98:     _delay((unsigned long)((500)*(64000000/4000.0)));
   895   0015C2  0E29               	movlw	41
   896   0015C4  6E36               	movwf	(??_main+1)^0,c
   897   0015C6  0E96               	movlw	150
   898   0015C8  6E35               	movwf	??_main^0,c
   899   0015CA  0E7F               	movlw	127
   900   0015CC                     u1627:
   901   0015CC  2EE8               	decfsz	wreg,f,c
   902   0015CE  D7FE               	bra	u1627
   903   0015D0  2E35               	decfsz	??_main^0,f,c
   904   0015D2  D7FC               	bra	u1627
   905   0015D4  2E36               	decfsz	(??_main+1)^0,f,c
   906   0015D6  D7FA               	bra	u1627
   907   0015D8  0000               	nop	
   908   0015DA                     
   909                           ;main.c: 104:     white_Light(1);
   910   0015DA  0E01               	movlw	1
   911   0015DC  ECAC  F012         	call	_white_Light
   912   0015E0                     
   913                           ;main.c: 105:     _delay((unsigned long)((200)*(64000000/4000.0)));
   914   0015E0  0E11               	movlw	17
   915   0015E2  6E36               	movwf	(??_main+1)^0,c
   916   0015E4  0E3C               	movlw	60
   917   0015E6  6E35               	movwf	??_main^0,c
   918   0015E8  0ECB               	movlw	203
   919   0015EA                     u1637:
   920   0015EA  2EE8               	decfsz	wreg,f,c
   921   0015EC  D7FE               	bra	u1637
   922   0015EE  2E35               	decfsz	??_main^0,f,c
   923   0015F0  D7FC               	bra	u1637
   924   0015F2  2E36               	decfsz	(??_main+1)^0,f,c
   925   0015F4  D7FA               	bra	u1637
   926   0015F6  0000               	nop	
   927   0015F8                     
   928                           ;main.c: 108:     color_read(&RGBC);
   929   0015F8  0E97               	movlw	low main@RGBC
   930   0015FA  6E10               	movwf	color_read@RGBC^0,c
   931   0015FC  ECBE  F008         	call	_color_read	;wreg free
   932   001600                     
   933                           ;main.c: 109:     ambient=RGBC.C;
   934   001600  C09D  F04F         	movff	main@RGBC+6,_ambient
   935   001604  C09E  F050         	movff	main@RGBC+7,_ambient+1
   936   001608                     
   937                           ;main.c: 110:     _delay((unsigned long)((500)*(64000000/4000.0)));
   938   001608  0E29               	movlw	41
   939   00160A  6E36               	movwf	(??_main+1)^0,c
   940   00160C  0E96               	movlw	150
   941   00160E  6E35               	movwf	??_main^0,c
   942   001610  0E7F               	movlw	127
   943   001612                     u1647:
   944   001612  2EE8               	decfsz	wreg,f,c
   945   001614  D7FE               	bra	u1647
   946   001616  2E35               	decfsz	??_main^0,f,c
   947   001618  D7FC               	bra	u1647
   948   00161A  2E36               	decfsz	(??_main+1)^0,f,c
   949   00161C  D7FA               	bra	u1647
   950   00161E  0000               	nop	
   951   001620                     
   952                           ;main.c: 112:     wall=0;
   953   001620  0E00               	movlw	0
   954   001622  0100               	movlb	0	; () banked
   955   001624  6FEF               	movwf	_wall& (0+255),b
   956   001626                     
   957                           ; BSR set to: 0
   958                           ;main.c: 113:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
   959   001626  0EA9               	movlw	low main@motorL
   960   001628  6E1E               	movwf	fullSpeedAhead@mL^0,c
   961   00162A  0E9F               	movlw	low main@motorR
   962   00162C  6E1F               	movwf	fullSpeedAhead@mR^0,c
   963   00162E  0E19               	movlw	25
   964   001630  6E20               	movwf	fullSpeedAhead@straightSpeed^0,c
   965   001632  0E02               	movlw	2
   966   001634  6E21               	movwf	fullSpeedAhead@straightRamp^0,c
   967   001636  EC69  F00F         	call	_fullSpeedAhead	;wreg free
   968   00163A                     l2789:
   969                           
   970                           ;main.c: 116:         if (wall == 1) {
   971   00163A  0100               	movlb	0	; () banked
   972   00163C  05EF               	decf	_wall& (0+255),w,b
   973   00163E  A4D8               	btfss	status,2,c
   974   001640  EF24  F00B         	goto	u1471
   975   001644  EF26  F00B         	goto	u1470
   976   001648                     u1471:
   977   001648  EF1D  F00B         	goto	l2789
   978   00164C                     u1470:
   979   00164C                     
   980                           ; BSR set to: 0
   981                           ;main.c: 117:             PIE0bits.INT0IE=0;
   982   00164C  010E               	movlb	14	; () banked
   983   00164E  9129               	bcf	41,0,b	;volatile
   984   001650                     
   985                           ; BSR set to: 14
   986                           ;main.c: 120:             stop(&motorL, &motorR, straightRamp);
   987   001650  0EA9               	movlw	low main@motorL
   988   001652  6E1E               	movwf	stop@mL^0,c
   989   001654  0E9F               	movlw	low main@motorR
   990   001656  6E1F               	movwf	stop@mR^0,c
   991   001658  C08E  F020         	movff	main@straightRamp,stop@straightRamp
   992   00165C  ECF2  F00E         	call	_stop	;wreg free
   993   001660                     
   994                           ;main.c: 121:             color_read(&RGBC);
   995   001660  0E97               	movlw	low main@RGBC
   996   001662  6E10               	movwf	color_read@RGBC^0,c
   997   001664  ECBE  F008         	call	_color_read	;wreg free
   998   001668                     
   999                           ;main.c: 122:             color_normalise(RGBC, &RGBC_n);
  1000   001668  EE20  F097         	lfsr	2,main@RGBC
  1001   00166C  EE00  F026         	lfsr	0,color_normalise@RGBC
  1002   001670  0E07               	movlw	7
  1003   001672                     u1481:
  1004   001672  CFDB FFEB          	movff	plusw2,plusw0
  1005   001676  06E8               	decf	wreg,f,c
  1006   001678  E2FC               	bc	u1481
  1007   00167A  0E8F               	movlw	low main@RGBC_n
  1008   00167C  6E2E               	movwf	color_normalise@RGBC_n^0,c
  1009   00167E  ECCB  F00D         	call	_color_normalise	;wreg free
  1010   001682                     
  1011                           ;main.c: 123:             color = color_detect(RGBC_n);
  1012   001682  EE20  F08F         	lfsr	2,main@RGBC_n
  1013   001686  EE00  F00C         	lfsr	0,color_detect@RGBC_n
  1014   00168A  0E07               	movlw	7
  1015   00168C                     u1491:
  1016   00168C  CFDB FFEB          	movff	plusw2,plusw0
  1017   001690  06E8               	decf	wreg,f,c
  1018   001692  E2FC               	bc	u1491
  1019   001694  EC65  F011         	call	_color_detect	;wreg free
  1020   001698  0100               	movlb	0	; () banked
  1021   00169A  6F88               	movwf	main@color& (0+255),b
  1022   00169C                     
  1023                           ; BSR set to: 0
  1024                           ;main.c: 126:             move(&motorL, &motorR, color, straightSpeed, reverseDuration, 
      +                          straightRamp, turnSpeed, turnDuration, turnRamp);
  1025   00169C  0EA9               	movlw	low main@motorL
  1026   00169E  6E2A               	movwf	move@mL^0,c
  1027   0016A0  0E9F               	movlw	low main@motorR
  1028   0016A2  6E2B               	movwf	move@mR^0,c
  1029   0016A4  C088  F02C         	movff	main@color,move@color
  1030   0016A8  C08D  F02D         	movff	main@straightSpeed,move@straightSpeed
  1031   0016AC  C089  F02E         	movff	main@reverseDuration,move@reverseDuration
  1032   0016B0  C08E  F02F         	movff	main@straightRamp,move@straightRamp
  1033   0016B4  C08A  F030         	movff	main@turnSpeed,move@turnSpeed
  1034   0016B8  C08B  F031         	movff	main@turnDuration,move@turnDuration
  1035   0016BC  C08C  F032         	movff	main@turnRamp,move@turnRamp
  1036   0016C0  EC01  F007         	call	_move	;wreg free
  1037   0016C4                     
  1038                           ;main.c: 127:             wall = 0;
  1039   0016C4  0E00               	movlw	0
  1040   0016C6  0100               	movlb	0	; () banked
  1041   0016C8  6FEF               	movwf	_wall& (0+255),b
  1042   0016CA                     
  1043                           ; BSR set to: 0
  1044                           ;main.c: 128:             PIE0bits.INT0IE=1;
  1045   0016CA  010E               	movlb	14	; () banked
  1046   0016CC  8129               	bsf	41,0,b	;volatile
  1047   0016CE  EF1D  F00B         	goto	l2789
  1048   0016D2  EF40  F000         	goto	start
  1049   0016D6                     __end_of_main:
  1050                           	callstack 0
  1051                           
  1052 ;; *************** function _white_Light *****************
  1053 ;; Defined at:
  1054 ;;		line 57 in file "color.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  state           1    wreg     unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  state           1   11[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1072 ;;Total ram usage:        1 bytes
  1073 ;; Hardware stack levels used: 1
  1074 ;; Hardware stack levels required when called: 5
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text1
  1083   002558                     __ptext1:
  1084                           	callstack 0
  1085   002558                     _white_Light:
  1086                           	callstack 25
  1087                           
  1088                           ; BSR set to: 14
  1089                           ;incstack = 0
  1090                           ;white_Light@state stored from wreg
  1091   002558  6E0C               	movwf	white_Light@state^0,c
  1092   00255A                     
  1093                           ;color.c: 57: void white_Light(char state);color.c: 58: {;color.c: 59:     if (state){
  1094   00255A  500C               	movf	white_Light@state^0,w,c
  1095   00255C  B4D8               	btfsc	status,2,c
  1096   00255E  EFB3  F012         	goto	u1271
  1097   002562  EFB5  F012         	goto	u1270
  1098   002566                     u1271:
  1099   002566  EFBA  F012         	goto	l112
  1100   00256A                     u1270:
  1101   00256A                     
  1102                           ;color.c: 60:         LATGbits.LATG0 = 1;
  1103   00256A  807F               	bsf	127,0,c	;volatile
  1104                           
  1105                           ;color.c: 61:         LATEbits.LATE7 = 1;
  1106   00256C  8E7D               	bsf	125,7,c	;volatile
  1107                           
  1108                           ;color.c: 62:         LATAbits.LATA3 = 1;
  1109   00256E  8679               	bsf	121,3,c	;volatile
  1110                           
  1111                           ;color.c: 63:     }
  1112   002570  EFBD  F012         	goto	l114
  1113   002574                     l112:
  1114                           
  1115                           ;color.c: 65:         LATGbits.LATG0 = 0;
  1116   002574  907F               	bcf	127,0,c	;volatile
  1117                           
  1118                           ;color.c: 66:         LATEbits.LATE7 = 0;
  1119   002576  9E7D               	bcf	125,7,c	;volatile
  1120                           
  1121                           ;color.c: 67:         LATAbits.LATA3 = 0;
  1122   002578  9679               	bcf	121,3,c	;volatile
  1123   00257A                     l114:
  1124   00257A  0012               	return		;funcret
  1125   00257C                     __end_of_white_Light:
  1126                           	callstack 0
  1127                           
  1128 ;; *************** function _stop *****************
  1129 ;; Defined at:
  1130 ;;		line 162 in file "dc_motor.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  mL              1   29[COMRAM] PTR struct DC_motor
  1133 ;;		 -> main@motorL(10), 
  1134 ;;  mR              1   30[COMRAM] PTR struct DC_motor
  1135 ;;		 -> main@motorR(10), 
  1136 ;;  straightRamp    1   31[COMRAM] unsigned char 
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;  cur_power       2   37[COMRAM] int 
  1139 ;;  i               2   35[COMRAM] int 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1149 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1150 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1151 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1152 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1153 ;;Total ram usage:       10 bytes
  1154 ;; Hardware stack levels used: 1
  1155 ;; Hardware stack levels required when called: 7
  1156 ;; This function calls:
  1157 ;;		_setMotorPWM
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text2
  1164   001DE4                     __ptext2:
  1165                           	callstack 0
  1166   001DE4                     _stop:
  1167                           	callstack 23
  1168   001DE4                     
  1169                           ;dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 163: {;dc_motor.c: 164:     mL->direction = 1;
  1170   001DE4  501E               	movf	stop@mL^0,w,c
  1171   001DE6  6ED9               	movwf	fsr2l,c
  1172   001DE8  6ADA               	clrf	fsr2h,c
  1173   001DEA  0E01               	movlw	1
  1174   001DEC  26D9               	addwf	fsr2l,f,c
  1175   001DEE  0E01               	movlw	1
  1176   001DF0  6EDF               	movwf	indf2,c
  1177                           
  1178                           ;dc_motor.c: 165:     mR->direction = 1;
  1179   001DF2  501F               	movf	stop@mR^0,w,c
  1180   001DF4  6ED9               	movwf	fsr2l,c
  1181   001DF6  6ADA               	clrf	fsr2h,c
  1182   001DF8  0E01               	movlw	1
  1183   001DFA  26D9               	addwf	fsr2l,f,c
  1184   001DFC  0E01               	movlw	1
  1185   001DFE  6EDF               	movwf	indf2,c
  1186                           
  1187                           ;dc_motor.c: 166:     int i;;dc_motor.c: 167:     int cur_power;;dc_motor.c: 168:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  1188   001E00  501E               	movf	stop@mL^0,w,c
  1189   001E02  6ED9               	movwf	fsr2l,c
  1190   001E04  6ADA               	clrf	fsr2h,c
  1191   001E06  50DF               	movf	indf2,w,c
  1192   001E08  6E21               	movwf	??_stop^0,c
  1193   001E0A  501E               	movf	stop@mL^0,w,c
  1194   001E0C  6ED9               	movwf	fsr2l,c
  1195   001E0E  6ADA               	clrf	fsr2h,c
  1196   001E10  0E09               	movlw	9
  1197   001E12  26D9               	addwf	fsr2l,f,c
  1198   001E14  50DF               	movf	indf2,w,c
  1199   001E16  6E22               	movwf	(??_stop+1)^0,c
  1200   001E18  5022               	movf	(??_stop+1)^0,w,c
  1201   001E1A  5C21               	subwf	??_stop^0,w,c
  1202   001E1C  6E26               	movwf	stop@cur_power^0,c
  1203   001E1E  6A27               	clrf	(stop@cur_power+1)^0,c
  1204   001E20  A0D8               	btfss	status,0,c
  1205   001E22  0627               	decf	(stop@cur_power+1)^0,f,c
  1206   001E24                     l2539:
  1207   001E24  BE27               	btfsc	(stop@cur_power+1)^0,7,c
  1208   001E26  EF19  F00F         	goto	u1280
  1209   001E2A  EF17  F00F         	goto	u1281
  1210   001E2E                     u1281:
  1211   001E2E  EF1B  F00F         	goto	l2543
  1212   001E32                     u1280:
  1213   001E32  EF60  F00F         	goto	l2559
  1214   001E36                     l2543:
  1215                           
  1216                           ;dc_motor.c: 169:         mL->power = cur_power+mL->compensation;
  1217   001E36  501E               	movf	stop@mL^0,w,c
  1218   001E38  6ED9               	movwf	fsr2l,c
  1219   001E3A  6ADA               	clrf	fsr2h,c
  1220   001E3C  501E               	movf	stop@mL^0,w,c
  1221   001E3E  6EE1               	movwf	fsr1l,c
  1222   001E40  6AE2               	clrf	fsr1h,c
  1223   001E42  0E09               	movlw	9
  1224   001E44  26E1               	addwf	fsr1l,f,c
  1225   001E46  50E7               	movf	indf1,w,c
  1226   001E48  2426               	addwf	stop@cur_power^0,w,c
  1227   001E4A  6EDF               	movwf	indf2,c
  1228                           
  1229                           ;dc_motor.c: 170:         mR->power = cur_power+mR->compensation;
  1230   001E4C  501F               	movf	stop@mR^0,w,c
  1231   001E4E  6ED9               	movwf	fsr2l,c
  1232   001E50  6ADA               	clrf	fsr2h,c
  1233   001E52  501F               	movf	stop@mR^0,w,c
  1234   001E54  6EE1               	movwf	fsr1l,c
  1235   001E56  6AE2               	clrf	fsr1h,c
  1236   001E58  0E09               	movlw	9
  1237   001E5A  26E1               	addwf	fsr1l,f,c
  1238   001E5C  50E7               	movf	indf1,w,c
  1239   001E5E  2426               	addwf	stop@cur_power^0,w,c
  1240   001E60  6EDF               	movwf	indf2,c
  1241   001E62                     
  1242                           ;dc_motor.c: 171:         setMotorPWM(mL);
  1243   001E62  C01E  F019         	movff	stop@mL,setMotorPWM@m
  1244   001E66  EC21  F00D         	call	_setMotorPWM	;wreg free
  1245   001E6A                     
  1246                           ;dc_motor.c: 172:         setMotorPWM(mR);
  1247   001E6A  C01F  F019         	movff	stop@mR,setMotorPWM@m
  1248   001E6E  EC21  F00D         	call	_setMotorPWM	;wreg free
  1249   001E72                     
  1250                           ;dc_motor.c: 173:         for (i=0;i<straightRamp;i++) {
  1251   001E72  0E00               	movlw	0
  1252   001E74  6E25               	movwf	(stop@i+1)^0,c
  1253   001E76  0E00               	movlw	0
  1254   001E78  6E24               	movwf	stop@i^0,c
  1255   001E7A  EF49  F00F         	goto	l455
  1256   001E7E                     l2551:
  1257                           
  1258                           ;dc_motor.c: 174:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1259   001E7E  0E68               	movlw	104
  1260   001E80  6E21               	movwf	??_stop^0,c
  1261   001E82  0EE4               	movlw	228
  1262   001E84                     u1657:
  1263   001E84  2EE8               	decfsz	wreg,f,c
  1264   001E86  D7FE               	bra	u1657
  1265   001E88  2E21               	decfsz	??_stop^0,f,c
  1266   001E8A  D7FC               	bra	u1657
  1267   001E8C  D000               	nop2	
  1268   001E8E                     
  1269                           ;dc_motor.c: 175:         }
  1270   001E8E  4A24               	infsnz	stop@i^0,f,c
  1271   001E90  2A25               	incf	(stop@i+1)^0,f,c
  1272   001E92                     l455:
  1273   001E92  5020               	movf	stop@straightRamp^0,w,c
  1274   001E94  6E21               	movwf	??_stop^0,c
  1275   001E96  6A22               	clrf	(??_stop+1)^0,c
  1276   001E98  5021               	movf	??_stop^0,w,c
  1277   001E9A  5C24               	subwf	stop@i^0,w,c
  1278   001E9C  5025               	movf	(stop@i+1)^0,w,c
  1279   001E9E  0A80               	xorlw	128
  1280   001EA0  6E23               	movwf	(??_stop+2)^0,c
  1281   001EA2  5022               	movf	(??_stop+1)^0,w,c
  1282   001EA4  0A80               	xorlw	128
  1283   001EA6  5823               	subwfb	(??_stop+2)^0,w,c
  1284   001EA8  A0D8               	btfss	status,0,c
  1285   001EAA  EF59  F00F         	goto	u1291
  1286   001EAE  EF5B  F00F         	goto	u1290
  1287   001EB2                     u1291:
  1288   001EB2  EF3F  F00F         	goto	l2551
  1289   001EB6                     u1290:
  1290   001EB6                     
  1291                           ;dc_motor.c: 176:     }
  1292   001EB6  0626               	decf	stop@cur_power^0,f,c
  1293   001EB8  A0D8               	btfss	status,0,c
  1294   001EBA  0627               	decf	(stop@cur_power+1)^0,f,c
  1295   001EBC  EF12  F00F         	goto	l2539
  1296   001EC0                     l2559:
  1297                           
  1298                           ;dc_motor.c: 177:     mL->power = 0;
  1299   001EC0  501E               	movf	stop@mL^0,w,c
  1300   001EC2  6ED9               	movwf	fsr2l,c
  1301   001EC4  6ADA               	clrf	fsr2h,c
  1302   001EC6  6ADF               	clrf	indf2,c
  1303                           
  1304                           ;dc_motor.c: 178:     mR->power = 0;
  1305   001EC8  501F               	movf	stop@mR^0,w,c
  1306   001ECA  6ED9               	movwf	fsr2l,c
  1307   001ECC  6ADA               	clrf	fsr2h,c
  1308   001ECE  6ADF               	clrf	indf2,c
  1309   001ED0  0012               	return		;funcret
  1310   001ED2                     __end_of_stop:
  1311                           	callstack 0
  1312                           
  1313 ;; *************** function _move *****************
  1314 ;; Defined at:
  1315 ;;		line 87 in file "dc_motor.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  mL              1   41[COMRAM] PTR struct DC_motor
  1318 ;;		 -> main@motorL(10), 
  1319 ;;  mR              1   42[COMRAM] PTR struct DC_motor
  1320 ;;		 -> main@motorR(10), 
  1321 ;;  color           1   43[COMRAM] unsigned char 
  1322 ;;  straightSpee    1   44[COMRAM] unsigned char 
  1323 ;;  reverseDurat    1   45[COMRAM] unsigned char 
  1324 ;;  straightRamp    1   46[COMRAM] unsigned char 
  1325 ;;  turnSpeed       1   47[COMRAM] unsigned char 
  1326 ;;  turnDuration    1   48[COMRAM] unsigned char 
  1327 ;;  turnRamp        1   49[COMRAM] unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1339 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1342 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;Total ram usage:       11 bytes
  1344 ;; Hardware stack levels used: 1
  1345 ;; Hardware stack levels required when called: 8
  1346 ;; This function calls:
  1347 ;;		_fullSpeedAhead
  1348 ;;		_reverseOneSquare
  1349 ;;		_turnLeft
  1350 ;;		_turnRight
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text3
  1357   000E02                     __ptext3:
  1358                           	callstack 0
  1359   000E02                     _move:
  1360                           	callstack 22
  1361   000E02                     
  1362                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  1363   000E02  042C               	decf	move@color^0,w,c
  1364   000E04  A4D8               	btfss	status,2,c
  1365   000E06  EF07  F007         	goto	u1331
  1366   000E0A  EF09  F007         	goto	u1330
  1367   000E0E                     u1331:
  1368   000E0E  EF45  F007         	goto	l2595
  1369   000E12                     u1330:
  1370   000E12                     
  1371                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1372   000E12  C02A  F01E         	movff	move@mL,turnRight@mL
  1373   000E16  C02B  F01F         	movff	move@mR,turnRight@mR
  1374   000E1A  C030  F020         	movff	move@turnSpeed,turnRight@turnSpeed
  1375   000E1E  C031  F021         	movff	move@turnDuration,turnRight@turnDuration
  1376   000E22  C032  F022         	movff	move@turnRamp,turnRight@turnRamp
  1377   000E26  EC6B  F00B         	call	_turnRight	;wreg free
  1378   000E2A                     
  1379                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1380   000E2A  0E05               	movlw	5
  1381   000E2C  6E34               	movwf	(??_move+1)^0,c
  1382   000E2E  0E0F               	movlw	15
  1383   000E30  6E33               	movwf	??_move^0,c
  1384   000E32  0EF1               	movlw	241
  1385   000E34                     u1667:
  1386   000E34  2EE8               	decfsz	wreg,f,c
  1387   000E36  D7FE               	bra	u1667
  1388   000E38  2E33               	decfsz	??_move^0,f,c
  1389   000E3A  D7FC               	bra	u1667
  1390   000E3C  2E34               	decfsz	(??_move+1)^0,f,c
  1391   000E3E  D7FA               	bra	u1667
  1392   000E40  0000               	nop	
  1393   000E42                     
  1394                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1395   000E42  C02A  F01E         	movff	move@mL,turnRight@mL
  1396   000E46  C02B  F01F         	movff	move@mR,turnRight@mR
  1397   000E4A  C030  F020         	movff	move@turnSpeed,turnRight@turnSpeed
  1398   000E4E  C031  F021         	movff	move@turnDuration,turnRight@turnDuration
  1399   000E52  C032  F022         	movff	move@turnRamp,turnRight@turnRamp
  1400   000E56  EC6B  F00B         	call	_turnRight	;wreg free
  1401                           
  1402                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1403   000E5A  0E05               	movlw	5
  1404   000E5C  6E34               	movwf	(??_move+1)^0,c
  1405   000E5E  0E0F               	movlw	15
  1406   000E60  6E33               	movwf	??_move^0,c
  1407   000E62  0EF1               	movlw	241
  1408   000E64                     u1677:
  1409   000E64  2EE8               	decfsz	wreg,f,c
  1410   000E66  D7FE               	bra	u1677
  1411   000E68  2E33               	decfsz	??_move^0,f,c
  1412   000E6A  D7FC               	bra	u1677
  1413   000E6C  2E34               	decfsz	(??_move+1)^0,f,c
  1414   000E6E  D7FA               	bra	u1677
  1415   000E70  0000               	nop	
  1416   000E72                     l2593:
  1417                           
  1418                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1419   000E72  C02A  F01E         	movff	move@mL,fullSpeedAhead@mL
  1420   000E76  C02B  F01F         	movff	move@mR,fullSpeedAhead@mR
  1421   000E7A  C02D  F020         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1422   000E7E  C02F  F021         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1423   000E82  EC69  F00F         	call	_fullSpeedAhead	;wreg free
  1424                           
  1425                           ;dc_motor.c: 95:     }
  1426   000E86  EFBD  F008         	goto	l450
  1427   000E8A                     l2595:
  1428   000E8A  0E02               	movlw	2
  1429   000E8C  182C               	xorwf	move@color^0,w,c
  1430   000E8E  A4D8               	btfss	status,2,c
  1431   000E90  EF4C  F007         	goto	u1341
  1432   000E94  EF4E  F007         	goto	u1340
  1433   000E98                     u1341:
  1434   000E98  EF80  F007         	goto	l2605
  1435   000E9C                     u1340:
  1436   000E9C                     
  1437                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1438   000E9C  C02A  F01E         	movff	move@mL,turnLeft@mL
  1439   000EA0  C02B  F01F         	movff	move@mR,turnLeft@mR
  1440   000EA4  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1441   000EA8  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1442   000EAC  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1443   000EB0  EC46  F00C         	call	_turnLeft	;wreg free
  1444   000EB4                     
  1445                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1446   000EB4  0E05               	movlw	5
  1447   000EB6  6E34               	movwf	(??_move+1)^0,c
  1448   000EB8  0E0F               	movlw	15
  1449   000EBA  6E33               	movwf	??_move^0,c
  1450   000EBC  0EF1               	movlw	241
  1451   000EBE                     u1687:
  1452   000EBE  2EE8               	decfsz	wreg,f,c
  1453   000EC0  D7FE               	bra	u1687
  1454   000EC2  2E33               	decfsz	??_move^0,f,c
  1455   000EC4  D7FC               	bra	u1687
  1456   000EC6  2E34               	decfsz	(??_move+1)^0,f,c
  1457   000EC8  D7FA               	bra	u1687
  1458   000ECA  0000               	nop	
  1459   000ECC                     
  1460                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1461   000ECC  C02A  F01E         	movff	move@mL,turnLeft@mL
  1462   000ED0  C02B  F01F         	movff	move@mR,turnLeft@mR
  1463   000ED4  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1464   000ED8  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1465   000EDC  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1466   000EE0  EC46  F00C         	call	_turnLeft	;wreg free
  1467                           
  1468                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1469   000EE4  0E05               	movlw	5
  1470   000EE6  6E34               	movwf	(??_move+1)^0,c
  1471   000EE8  0E0F               	movlw	15
  1472   000EEA  6E33               	movwf	??_move^0,c
  1473   000EEC  0EF1               	movlw	241
  1474   000EEE                     u1697:
  1475   000EEE  2EE8               	decfsz	wreg,f,c
  1476   000EF0  D7FE               	bra	u1697
  1477   000EF2  2E33               	decfsz	??_move^0,f,c
  1478   000EF4  D7FC               	bra	u1697
  1479   000EF6  2E34               	decfsz	(??_move+1)^0,f,c
  1480   000EF8  D7FA               	bra	u1697
  1481   000EFA  0000               	nop	
  1482   000EFC  EF39  F007         	goto	l2593
  1483   000F00                     l2605:
  1484   000F00  0E03               	movlw	3
  1485   000F02  182C               	xorwf	move@color^0,w,c
  1486   000F04  A4D8               	btfss	status,2,c
  1487   000F06  EF87  F007         	goto	u1351
  1488   000F0A  EF89  F007         	goto	u1350
  1489   000F0E                     u1351:
  1490   000F0E  EFEB  F007         	goto	l2621
  1491   000F12                     u1350:
  1492   000F12                     
  1493                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1494   000F12  C02A  F01E         	movff	move@mL,turnLeft@mL
  1495   000F16  C02B  F01F         	movff	move@mR,turnLeft@mR
  1496   000F1A  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1497   000F1E  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1498   000F22  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1499   000F26  EC46  F00C         	call	_turnLeft	;wreg free
  1500   000F2A                     
  1501                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1502   000F2A  0E05               	movlw	5
  1503   000F2C  6E34               	movwf	(??_move+1)^0,c
  1504   000F2E  0E0F               	movlw	15
  1505   000F30  6E33               	movwf	??_move^0,c
  1506   000F32  0EF1               	movlw	241
  1507   000F34                     u1707:
  1508   000F34  2EE8               	decfsz	wreg,f,c
  1509   000F36  D7FE               	bra	u1707
  1510   000F38  2E33               	decfsz	??_move^0,f,c
  1511   000F3A  D7FC               	bra	u1707
  1512   000F3C  2E34               	decfsz	(??_move+1)^0,f,c
  1513   000F3E  D7FA               	bra	u1707
  1514   000F40  0000               	nop	
  1515   000F42                     
  1516                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1517   000F42  C02A  F01E         	movff	move@mL,turnLeft@mL
  1518   000F46  C02B  F01F         	movff	move@mR,turnLeft@mR
  1519   000F4A  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1520   000F4E  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1521   000F52  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1522   000F56  EC46  F00C         	call	_turnLeft	;wreg free
  1523                           
  1524                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1525   000F5A  0E05               	movlw	5
  1526   000F5C  6E34               	movwf	(??_move+1)^0,c
  1527   000F5E  0E0F               	movlw	15
  1528   000F60  6E33               	movwf	??_move^0,c
  1529   000F62  0EF1               	movlw	241
  1530   000F64                     u1717:
  1531   000F64  2EE8               	decfsz	wreg,f,c
  1532   000F66  D7FE               	bra	u1717
  1533   000F68  2E33               	decfsz	??_move^0,f,c
  1534   000F6A  D7FC               	bra	u1717
  1535   000F6C  2E34               	decfsz	(??_move+1)^0,f,c
  1536   000F6E  D7FA               	bra	u1717
  1537   000F70  0000               	nop	
  1538   000F72                     
  1539                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1540   000F72  C02A  F01E         	movff	move@mL,turnLeft@mL
  1541   000F76  C02B  F01F         	movff	move@mR,turnLeft@mR
  1542   000F7A  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1543   000F7E  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1544   000F82  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1545   000F86  EC46  F00C         	call	_turnLeft	;wreg free
  1546   000F8A                     
  1547                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1548   000F8A  0E05               	movlw	5
  1549   000F8C  6E34               	movwf	(??_move+1)^0,c
  1550   000F8E  0E0F               	movlw	15
  1551   000F90  6E33               	movwf	??_move^0,c
  1552   000F92  0EF1               	movlw	241
  1553   000F94                     u1727:
  1554   000F94  2EE8               	decfsz	wreg,f,c
  1555   000F96  D7FE               	bra	u1727
  1556   000F98  2E33               	decfsz	??_move^0,f,c
  1557   000F9A  D7FC               	bra	u1727
  1558   000F9C  2E34               	decfsz	(??_move+1)^0,f,c
  1559   000F9E  D7FA               	bra	u1727
  1560   000FA0  0000               	nop	
  1561                           
  1562                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1563   000FA2  C02A  F01E         	movff	move@mL,turnLeft@mL
  1564   000FA6  C02B  F01F         	movff	move@mR,turnLeft@mR
  1565   000FAA  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1566   000FAE  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1567   000FB2  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1568   000FB6  EC46  F00C         	call	_turnLeft	;wreg free
  1569   000FBA                     
  1570                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1571   000FBA  0E05               	movlw	5
  1572   000FBC  6E34               	movwf	(??_move+1)^0,c
  1573   000FBE  0E0F               	movlw	15
  1574   000FC0  6E33               	movwf	??_move^0,c
  1575   000FC2  0EF1               	movlw	241
  1576   000FC4                     u1737:
  1577   000FC4  2EE8               	decfsz	wreg,f,c
  1578   000FC6  D7FE               	bra	u1737
  1579   000FC8  2E33               	decfsz	??_move^0,f,c
  1580   000FCA  D7FC               	bra	u1737
  1581   000FCC  2E34               	decfsz	(??_move+1)^0,f,c
  1582   000FCE  D7FA               	bra	u1737
  1583   000FD0  0000               	nop	
  1584   000FD2  EF39  F007         	goto	l2593
  1585   000FD6                     l2621:
  1586   000FD6  0E04               	movlw	4
  1587   000FD8  182C               	xorwf	move@color^0,w,c
  1588   000FDA  A4D8               	btfss	status,2,c
  1589   000FDC  EFF2  F007         	goto	u1361
  1590   000FE0  EFF4  F007         	goto	u1360
  1591   000FE4                     u1361:
  1592   000FE4  EF48  F008         	goto	l2633
  1593   000FE8                     u1360:
  1594   000FE8                     
  1595                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1596   000FE8  C02A  F01E         	movff	move@mL,reverseOneSquare@mL
  1597   000FEC  C02B  F01F         	movff	move@mR,reverseOneSquare@mR
  1598   000FF0  C02D  F020         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1599   000FF4  C02E  F021         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1600   000FF8  C02F  F022         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1601   000FFC  ECA9  F009         	call	_reverseOneSquare	;wreg free
  1602   001000                     l2625:
  1603                           
  1604                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1605   001000  0E05               	movlw	5
  1606   001002  6E34               	movwf	(??_move+1)^0,c
  1607   001004  0E0F               	movlw	15
  1608   001006  6E33               	movwf	??_move^0,c
  1609   001008  0EF1               	movlw	241
  1610   00100A                     u1747:
  1611   00100A  2EE8               	decfsz	wreg,f,c
  1612   00100C  D7FE               	bra	u1747
  1613   00100E  2E33               	decfsz	??_move^0,f,c
  1614   001010  D7FC               	bra	u1747
  1615   001012  2E34               	decfsz	(??_move+1)^0,f,c
  1616   001014  D7FA               	bra	u1747
  1617   001016  0000               	nop	
  1618   001018                     
  1619                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1620   001018  C02A  F01E         	movff	move@mL,turnRight@mL
  1621   00101C  C02B  F01F         	movff	move@mR,turnRight@mR
  1622   001020  C030  F020         	movff	move@turnSpeed,turnRight@turnSpeed
  1623   001024  C031  F021         	movff	move@turnDuration,turnRight@turnDuration
  1624   001028  C032  F022         	movff	move@turnRamp,turnRight@turnRamp
  1625   00102C  EC6B  F00B         	call	_turnRight	;wreg free
  1626                           
  1627                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1628   001030  0E05               	movlw	5
  1629   001032  6E34               	movwf	(??_move+1)^0,c
  1630   001034  0E0F               	movlw	15
  1631   001036  6E33               	movwf	??_move^0,c
  1632   001038  0EF1               	movlw	241
  1633   00103A                     u1757:
  1634   00103A  2EE8               	decfsz	wreg,f,c
  1635   00103C  D7FE               	bra	u1757
  1636   00103E  2E33               	decfsz	??_move^0,f,c
  1637   001040  D7FC               	bra	u1757
  1638   001042  2E34               	decfsz	(??_move+1)^0,f,c
  1639   001044  D7FA               	bra	u1757
  1640   001046  0000               	nop	
  1641   001048                     
  1642                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1643   001048  C02A  F01E         	movff	move@mL,turnRight@mL
  1644   00104C  C02B  F01F         	movff	move@mR,turnRight@mR
  1645   001050  C030  F020         	movff	move@turnSpeed,turnRight@turnSpeed
  1646   001054  C031  F021         	movff	move@turnDuration,turnRight@turnDuration
  1647   001058  C032  F022         	movff	move@turnRamp,turnRight@turnRamp
  1648   00105C  EC6B  F00B         	call	_turnRight	;wreg free
  1649   001060                     l2631:
  1650                           
  1651                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1652   001060  0E05               	movlw	5
  1653   001062  6E34               	movwf	(??_move+1)^0,c
  1654   001064  0E0F               	movlw	15
  1655   001066  6E33               	movwf	??_move^0,c
  1656   001068  0EF1               	movlw	241
  1657   00106A                     u1767:
  1658   00106A  2EE8               	decfsz	wreg,f,c
  1659   00106C  D7FE               	bra	u1767
  1660   00106E  2E33               	decfsz	??_move^0,f,c
  1661   001070  D7FC               	bra	u1767
  1662   001072  2E34               	decfsz	(??_move+1)^0,f,c
  1663   001074  D7FA               	bra	u1767
  1664   001076  0000               	nop	
  1665                           
  1666                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1667   001078  C02A  F01E         	movff	move@mL,fullSpeedAhead@mL
  1668   00107C  C02B  F01F         	movff	move@mR,fullSpeedAhead@mR
  1669   001080  C02D  F020         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1670   001084  C02F  F021         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1671   001088  EC69  F00F         	call	_fullSpeedAhead	;wreg free
  1672                           
  1673                           ;dc_motor.c: 125:     }
  1674   00108C  EFBD  F008         	goto	l450
  1675   001090                     l2633:
  1676   001090  0E05               	movlw	5
  1677   001092  182C               	xorwf	move@color^0,w,c
  1678   001094  A4D8               	btfss	status,2,c
  1679   001096  EF4F  F008         	goto	u1371
  1680   00109A  EF51  F008         	goto	u1370
  1681   00109E                     u1371:
  1682   00109E  EF8F  F008         	goto	l2645
  1683   0010A2                     u1370:
  1684   0010A2                     
  1685                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1686   0010A2  C02A  F01E         	movff	move@mL,reverseOneSquare@mL
  1687   0010A6  C02B  F01F         	movff	move@mR,reverseOneSquare@mR
  1688   0010AA  C02D  F020         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1689   0010AE  C02E  F021         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1690   0010B2  C02F  F022         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1691   0010B6  ECA9  F009         	call	_reverseOneSquare	;wreg free
  1692   0010BA                     l2637:
  1693                           
  1694                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1695   0010BA  0E05               	movlw	5
  1696   0010BC  6E34               	movwf	(??_move+1)^0,c
  1697   0010BE  0E0F               	movlw	15
  1698   0010C0  6E33               	movwf	??_move^0,c
  1699   0010C2  0EF1               	movlw	241
  1700   0010C4                     u1777:
  1701   0010C4  2EE8               	decfsz	wreg,f,c
  1702   0010C6  D7FE               	bra	u1777
  1703   0010C8  2E33               	decfsz	??_move^0,f,c
  1704   0010CA  D7FC               	bra	u1777
  1705   0010CC  2E34               	decfsz	(??_move+1)^0,f,c
  1706   0010CE  D7FA               	bra	u1777
  1707   0010D0  0000               	nop	
  1708   0010D2                     
  1709                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1710   0010D2  C02A  F01E         	movff	move@mL,turnLeft@mL
  1711   0010D6  C02B  F01F         	movff	move@mR,turnLeft@mR
  1712   0010DA  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1713   0010DE  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1714   0010E2  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1715   0010E6  EC46  F00C         	call	_turnLeft	;wreg free
  1716                           
  1717                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1718   0010EA  0E05               	movlw	5
  1719   0010EC  6E34               	movwf	(??_move+1)^0,c
  1720   0010EE  0E0F               	movlw	15
  1721   0010F0  6E33               	movwf	??_move^0,c
  1722   0010F2  0EF1               	movlw	241
  1723   0010F4                     u1787:
  1724   0010F4  2EE8               	decfsz	wreg,f,c
  1725   0010F6  D7FE               	bra	u1787
  1726   0010F8  2E33               	decfsz	??_move^0,f,c
  1727   0010FA  D7FC               	bra	u1787
  1728   0010FC  2E34               	decfsz	(??_move+1)^0,f,c
  1729   0010FE  D7FA               	bra	u1787
  1730   001100  0000               	nop	
  1731   001102                     
  1732                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1733   001102  C02A  F01E         	movff	move@mL,turnLeft@mL
  1734   001106  C02B  F01F         	movff	move@mR,turnLeft@mR
  1735   00110A  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1736   00110E  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1737   001112  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1738   001116  EC46  F00C         	call	_turnLeft	;wreg free
  1739   00111A  EF30  F008         	goto	l2631
  1740   00111E                     l2645:
  1741   00111E  0E06               	movlw	6
  1742   001120  182C               	xorwf	move@color^0,w,c
  1743   001122  A4D8               	btfss	status,2,c
  1744   001124  EF96  F008         	goto	u1381
  1745   001128  EF98  F008         	goto	u1380
  1746   00112C                     u1381:
  1747   00112C  EFA6  F008         	goto	l2657
  1748   001130                     u1380:
  1749   001130                     
  1750                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1751   001130  C02A  F01E         	movff	move@mL,turnRight@mL
  1752   001134  C02B  F01F         	movff	move@mR,turnRight@mR
  1753   001138  C030  F020         	movff	move@turnSpeed,turnRight@turnSpeed
  1754   00113C  C031  F021         	movff	move@turnDuration,turnRight@turnDuration
  1755   001140  C032  F022         	movff	move@turnRamp,turnRight@turnRamp
  1756   001144  EC6B  F00B         	call	_turnRight	;wreg free
  1757   001148  EF00  F008         	goto	l2625
  1758   00114C                     l2657:
  1759   00114C  0E07               	movlw	7
  1760   00114E  182C               	xorwf	move@color^0,w,c
  1761   001150  A4D8               	btfss	status,2,c
  1762   001152  EFAD  F008         	goto	u1391
  1763   001156  EFAF  F008         	goto	u1390
  1764   00115A                     u1391:
  1765   00115A  EFBD  F008         	goto	l448
  1766   00115E                     u1390:
  1767   00115E                     
  1768                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1769   00115E  C02A  F01E         	movff	move@mL,turnLeft@mL
  1770   001162  C02B  F01F         	movff	move@mR,turnLeft@mR
  1771   001166  C030  F020         	movff	move@turnSpeed,turnLeft@turnSpeed
  1772   00116A  C031  F021         	movff	move@turnDuration,turnLeft@turnDuration
  1773   00116E  C032  F022         	movff	move@turnRamp,turnLeft@turnRamp
  1774   001172  EC46  F00C         	call	_turnLeft	;wreg free
  1775   001176  EF5D  F008         	goto	l2637
  1776   00117A                     l448:
  1777   00117A                     l450:
  1778   00117A  0012               	return		;funcret
  1779   00117C                     __end_of_move:
  1780                           	callstack 0
  1781                           
  1782 ;; *************** function _turnRight *****************
  1783 ;; Defined at:
  1784 ;;		line 214 in file "dc_motor.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  mL              1   29[COMRAM] PTR struct DC_motor
  1787 ;;		 -> main@motorL(10), 
  1788 ;;  mR              1   30[COMRAM] PTR struct DC_motor
  1789 ;;		 -> main@motorR(10), 
  1790 ;;  turnSpeed       1   31[COMRAM] unsigned char 
  1791 ;;  turnDuration    1   32[COMRAM] unsigned char 
  1792 ;;  turnRamp        1   33[COMRAM] unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  cur_power       2   39[COMRAM] int 
  1795 ;;  i               2   37[COMRAM] int 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1805 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1806 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;Total ram usage:       12 bytes
  1810 ;; Hardware stack levels used: 1
  1811 ;; Hardware stack levels required when called: 7
  1812 ;; This function calls:
  1813 ;;		_setMotorPWM
  1814 ;; This function is called by:
  1815 ;;		_move
  1816 ;;		_calibration
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text4
  1821   0016D6                     __ptext4:
  1822                           	callstack 0
  1823   0016D6                     _turnRight:
  1824                           	callstack 22
  1825   0016D6                     
  1826                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  1827   0016D6  501E               	movf	turnRight@mL^0,w,c
  1828   0016D8  6ED9               	movwf	fsr2l,c
  1829   0016DA  6ADA               	clrf	fsr2h,c
  1830   0016DC  0E01               	movlw	1
  1831   0016DE  26D9               	addwf	fsr2l,f,c
  1832   0016E0  0E01               	movlw	1
  1833   0016E2  6EDF               	movwf	indf2,c
  1834                           
  1835                           ;dc_motor.c: 217:     mR->direction = 0;
  1836   0016E4  501F               	movf	turnRight@mR^0,w,c
  1837   0016E6  6ED9               	movwf	fsr2l,c
  1838   0016E8  6ADA               	clrf	fsr2h,c
  1839   0016EA  0E01               	movlw	1
  1840   0016EC  26D9               	addwf	fsr2l,f,c
  1841   0016EE  6ADF               	clrf	indf2,c
  1842   0016F0                     
  1843                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1844   0016F0  0E00               	movlw	0
  1845   0016F2  6E29               	movwf	(turnRight@cur_power+1)^0,c
  1846   0016F4  0E01               	movlw	1
  1847   0016F6  6E28               	movwf	turnRight@cur_power^0,c
  1848   0016F8  EFC0  F00B         	goto	l2231
  1849   0016FC                     l2217:
  1850                           
  1851                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  1852   0016FC  501E               	movf	turnRight@mL^0,w,c
  1853   0016FE  6ED9               	movwf	fsr2l,c
  1854   001700  6ADA               	clrf	fsr2h,c
  1855   001702  501E               	movf	turnRight@mL^0,w,c
  1856   001704  6EE1               	movwf	fsr1l,c
  1857   001706  6AE2               	clrf	fsr1h,c
  1858   001708  0E09               	movlw	9
  1859   00170A  26E1               	addwf	fsr1l,f,c
  1860   00170C  50E7               	movf	indf1,w,c
  1861   00170E  2428               	addwf	turnRight@cur_power^0,w,c
  1862   001710  6EDF               	movwf	indf2,c
  1863                           
  1864                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  1865   001712  501F               	movf	turnRight@mR^0,w,c
  1866   001714  6ED9               	movwf	fsr2l,c
  1867   001716  6ADA               	clrf	fsr2h,c
  1868   001718  501F               	movf	turnRight@mR^0,w,c
  1869   00171A  6EE1               	movwf	fsr1l,c
  1870   00171C  6AE2               	clrf	fsr1h,c
  1871   00171E  0E09               	movlw	9
  1872   001720  26E1               	addwf	fsr1l,f,c
  1873   001722  50E7               	movf	indf1,w,c
  1874   001724  2428               	addwf	turnRight@cur_power^0,w,c
  1875   001726  6EDF               	movwf	indf2,c
  1876   001728                     
  1877                           ;dc_motor.c: 223:         setMotorPWM(mL);
  1878   001728  C01E  F019         	movff	turnRight@mL,setMotorPWM@m
  1879   00172C  EC21  F00D         	call	_setMotorPWM	;wreg free
  1880   001730                     
  1881                           ;dc_motor.c: 224:         setMotorPWM(mR);
  1882   001730  C01F  F019         	movff	turnRight@mR,setMotorPWM@m
  1883   001734  EC21  F00D         	call	_setMotorPWM	;wreg free
  1884   001738                     
  1885                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  1886   001738  0E00               	movlw	0
  1887   00173A  6E27               	movwf	(turnRight@i+1)^0,c
  1888   00173C  0E00               	movlw	0
  1889   00173E  6E26               	movwf	turnRight@i^0,c
  1890   001740  EFAC  F00B         	goto	l480
  1891   001744                     l2225:
  1892                           
  1893                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1894   001744  0E68               	movlw	104
  1895   001746  6E23               	movwf	??_turnRight^0,c
  1896   001748  0EE4               	movlw	228
  1897   00174A                     u1797:
  1898   00174A  2EE8               	decfsz	wreg,f,c
  1899   00174C  D7FE               	bra	u1797
  1900   00174E  2E23               	decfsz	??_turnRight^0,f,c
  1901   001750  D7FC               	bra	u1797
  1902   001752  D000               	nop2	
  1903   001754                     
  1904                           ;dc_motor.c: 227:         }
  1905   001754  4A26               	infsnz	turnRight@i^0,f,c
  1906   001756  2A27               	incf	(turnRight@i+1)^0,f,c
  1907   001758                     l480:
  1908   001758  5022               	movf	turnRight@turnRamp^0,w,c
  1909   00175A  6E23               	movwf	??_turnRight^0,c
  1910   00175C  6A24               	clrf	(??_turnRight+1)^0,c
  1911   00175E  5023               	movf	??_turnRight^0,w,c
  1912   001760  5C26               	subwf	turnRight@i^0,w,c
  1913   001762  5027               	movf	(turnRight@i+1)^0,w,c
  1914   001764  0A80               	xorlw	128
  1915   001766  6E25               	movwf	(??_turnRight+2)^0,c
  1916   001768  5024               	movf	(??_turnRight+1)^0,w,c
  1917   00176A  0A80               	xorlw	128
  1918   00176C  5825               	subwfb	(??_turnRight+2)^0,w,c
  1919   00176E  A0D8               	btfss	status,0,c
  1920   001770  EFBC  F00B         	goto	u961
  1921   001774  EFBE  F00B         	goto	u960
  1922   001778                     u961:
  1923   001778  EFA2  F00B         	goto	l2225
  1924   00177C                     u960:
  1925   00177C                     
  1926                           ;dc_motor.c: 228:     }
  1927   00177C  4A28               	infsnz	turnRight@cur_power^0,f,c
  1928   00177E  2A29               	incf	(turnRight@cur_power+1)^0,f,c
  1929   001780                     l2231:
  1930   001780  5020               	movf	turnRight@turnSpeed^0,w,c
  1931   001782  6E23               	movwf	??_turnRight^0,c
  1932   001784  6A24               	clrf	(??_turnRight+1)^0,c
  1933   001786  5028               	movf	turnRight@cur_power^0,w,c
  1934   001788  5C23               	subwf	??_turnRight^0,w,c
  1935   00178A  5024               	movf	(??_turnRight+1)^0,w,c
  1936   00178C  0A80               	xorlw	128
  1937   00178E  6E25               	movwf	(??_turnRight+2)^0,c
  1938   001790  5029               	movf	(turnRight@cur_power+1)^0,w,c
  1939   001792  0A80               	xorlw	128
  1940   001794  5825               	subwfb	(??_turnRight+2)^0,w,c
  1941   001796  B0D8               	btfsc	status,0,c
  1942   001798  EFD0  F00B         	goto	u971
  1943   00179C  EFD2  F00B         	goto	u970
  1944   0017A0                     u971:
  1945   0017A0  EF7E  F00B         	goto	l2217
  1946   0017A4                     u970:
  1947   0017A4                     
  1948                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  1949   0017A4  0E00               	movlw	0
  1950   0017A6  6E27               	movwf	(turnRight@i+1)^0,c
  1951   0017A8  0E00               	movlw	0
  1952   0017AA  6E26               	movwf	turnRight@i^0,c
  1953   0017AC  EFE2  F00B         	goto	l484
  1954   0017B0                     l2235:
  1955                           
  1956                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1957   0017B0  0E68               	movlw	104
  1958   0017B2  6E23               	movwf	??_turnRight^0,c
  1959   0017B4  0EE4               	movlw	228
  1960   0017B6                     u1807:
  1961   0017B6  2EE8               	decfsz	wreg,f,c
  1962   0017B8  D7FE               	bra	u1807
  1963   0017BA  2E23               	decfsz	??_turnRight^0,f,c
  1964   0017BC  D7FC               	bra	u1807
  1965   0017BE  D000               	nop2	
  1966   0017C0                     
  1967                           ;dc_motor.c: 232:         }
  1968   0017C0  4A26               	infsnz	turnRight@i^0,f,c
  1969   0017C2  2A27               	incf	(turnRight@i+1)^0,f,c
  1970   0017C4                     l484:
  1971   0017C4  5021               	movf	turnRight@turnDuration^0,w,c
  1972   0017C6  6E23               	movwf	??_turnRight^0,c
  1973   0017C8  6A24               	clrf	(??_turnRight+1)^0,c
  1974   0017CA  5023               	movf	??_turnRight^0,w,c
  1975   0017CC  5C26               	subwf	turnRight@i^0,w,c
  1976   0017CE  5027               	movf	(turnRight@i+1)^0,w,c
  1977   0017D0  0A80               	xorlw	128
  1978   0017D2  6E25               	movwf	(??_turnRight+2)^0,c
  1979   0017D4  5024               	movf	(??_turnRight+1)^0,w,c
  1980   0017D6  0A80               	xorlw	128
  1981   0017D8  5825               	subwfb	(??_turnRight+2)^0,w,c
  1982   0017DA  A0D8               	btfss	status,0,c
  1983   0017DC  EFF2  F00B         	goto	u981
  1984   0017E0  EFF4  F00B         	goto	u980
  1985   0017E4                     u981:
  1986   0017E4  EFD8  F00B         	goto	l2235
  1987   0017E8                     u980:
  1988   0017E8                     
  1989                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  1990   0017E8  C020  F028         	movff	turnRight@turnSpeed,turnRight@cur_power
  1991   0017EC  6A29               	clrf	(turnRight@cur_power+1)^0,c
  1992   0017EE                     l2239:
  1993   0017EE  BE29               	btfsc	(turnRight@cur_power+1)^0,7,c
  1994   0017F0  EFFE  F00B         	goto	u990
  1995   0017F4  EFFC  F00B         	goto	u991
  1996   0017F8                     u991:
  1997   0017F8  EF00  F00C         	goto	l2243
  1998   0017FC                     u990:
  1999   0017FC  EF45  F00C         	goto	l492
  2000   001800                     l2243:
  2001                           
  2002                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  2003   001800  501E               	movf	turnRight@mL^0,w,c
  2004   001802  6ED9               	movwf	fsr2l,c
  2005   001804  6ADA               	clrf	fsr2h,c
  2006   001806  501E               	movf	turnRight@mL^0,w,c
  2007   001808  6EE1               	movwf	fsr1l,c
  2008   00180A  6AE2               	clrf	fsr1h,c
  2009   00180C  0E09               	movlw	9
  2010   00180E  26E1               	addwf	fsr1l,f,c
  2011   001810  50E7               	movf	indf1,w,c
  2012   001812  2428               	addwf	turnRight@cur_power^0,w,c
  2013   001814  6EDF               	movwf	indf2,c
  2014                           
  2015                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  2016   001816  501F               	movf	turnRight@mR^0,w,c
  2017   001818  6ED9               	movwf	fsr2l,c
  2018   00181A  6ADA               	clrf	fsr2h,c
  2019   00181C  501F               	movf	turnRight@mR^0,w,c
  2020   00181E  6EE1               	movwf	fsr1l,c
  2021   001820  6AE2               	clrf	fsr1h,c
  2022   001822  0E09               	movlw	9
  2023   001824  26E1               	addwf	fsr1l,f,c
  2024   001826  50E7               	movf	indf1,w,c
  2025   001828  2428               	addwf	turnRight@cur_power^0,w,c
  2026   00182A  6EDF               	movwf	indf2,c
  2027   00182C                     
  2028                           ;dc_motor.c: 237:         setMotorPWM(mL);
  2029   00182C  C01E  F019         	movff	turnRight@mL,setMotorPWM@m
  2030   001830  EC21  F00D         	call	_setMotorPWM	;wreg free
  2031   001834                     
  2032                           ;dc_motor.c: 238:         setMotorPWM(mR);
  2033   001834  C01F  F019         	movff	turnRight@mR,setMotorPWM@m
  2034   001838  EC21  F00D         	call	_setMotorPWM	;wreg free
  2035   00183C                     
  2036                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  2037   00183C  0E00               	movlw	0
  2038   00183E  6E27               	movwf	(turnRight@i+1)^0,c
  2039   001840  0E00               	movlw	0
  2040   001842  6E26               	movwf	turnRight@i^0,c
  2041   001844  EF2E  F00C         	goto	l489
  2042   001848                     l2251:
  2043                           
  2044                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2045   001848  0E68               	movlw	104
  2046   00184A  6E23               	movwf	??_turnRight^0,c
  2047   00184C  0EE4               	movlw	228
  2048   00184E                     u1817:
  2049   00184E  2EE8               	decfsz	wreg,f,c
  2050   001850  D7FE               	bra	u1817
  2051   001852  2E23               	decfsz	??_turnRight^0,f,c
  2052   001854  D7FC               	bra	u1817
  2053   001856  D000               	nop2	
  2054   001858                     
  2055                           ;dc_motor.c: 241:         }
  2056   001858  4A26               	infsnz	turnRight@i^0,f,c
  2057   00185A  2A27               	incf	(turnRight@i+1)^0,f,c
  2058   00185C                     l489:
  2059   00185C  5022               	movf	turnRight@turnRamp^0,w,c
  2060   00185E  6E23               	movwf	??_turnRight^0,c
  2061   001860  6A24               	clrf	(??_turnRight+1)^0,c
  2062   001862  5023               	movf	??_turnRight^0,w,c
  2063   001864  5C26               	subwf	turnRight@i^0,w,c
  2064   001866  5027               	movf	(turnRight@i+1)^0,w,c
  2065   001868  0A80               	xorlw	128
  2066   00186A  6E25               	movwf	(??_turnRight+2)^0,c
  2067   00186C  5024               	movf	(??_turnRight+1)^0,w,c
  2068   00186E  0A80               	xorlw	128
  2069   001870  5825               	subwfb	(??_turnRight+2)^0,w,c
  2070   001872  A0D8               	btfss	status,0,c
  2071   001874  EF3E  F00C         	goto	u1001
  2072   001878  EF40  F00C         	goto	u1000
  2073   00187C                     u1001:
  2074   00187C  EF24  F00C         	goto	l2251
  2075   001880                     u1000:
  2076   001880                     
  2077                           ;dc_motor.c: 242:     }
  2078   001880  0628               	decf	turnRight@cur_power^0,f,c
  2079   001882  A0D8               	btfss	status,0,c
  2080   001884  0629               	decf	(turnRight@cur_power+1)^0,f,c
  2081   001886  EFF7  F00B         	goto	l2239
  2082   00188A                     l492:
  2083   00188A  0012               	return		;funcret
  2084   00188C                     __end_of_turnRight:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _turnLeft *****************
  2088 ;; Defined at:
  2089 ;;		line 182 in file "dc_motor.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  mL              1   29[COMRAM] PTR struct DC_motor
  2092 ;;		 -> main@motorL(10), 
  2093 ;;  mR              1   30[COMRAM] PTR struct DC_motor
  2094 ;;		 -> main@motorR(10), 
  2095 ;;  turnSpeed       1   31[COMRAM] unsigned char 
  2096 ;;  turnDuration    1   32[COMRAM] unsigned char 
  2097 ;;  turnRamp        1   33[COMRAM] unsigned char 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;  cur_power       2   39[COMRAM] int 
  2100 ;;  i               2   37[COMRAM] int 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2110 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2113 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2114 ;;Total ram usage:       12 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; Hardware stack levels required when called: 7
  2117 ;; This function calls:
  2118 ;;		_setMotorPWM
  2119 ;; This function is called by:
  2120 ;;		_move
  2121 ;;		_calibration
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text5
  2126   00188C                     __ptext5:
  2127                           	callstack 0
  2128   00188C                     _turnLeft:
  2129                           	callstack 22
  2130   00188C                     
  2131                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  2132   00188C  501E               	movf	turnLeft@mL^0,w,c
  2133   00188E  6ED9               	movwf	fsr2l,c
  2134   001890  6ADA               	clrf	fsr2h,c
  2135   001892  0E01               	movlw	1
  2136   001894  26D9               	addwf	fsr2l,f,c
  2137   001896  6ADF               	clrf	indf2,c
  2138                           
  2139                           ;dc_motor.c: 185:     mR->direction = 1;
  2140   001898  501F               	movf	turnLeft@mR^0,w,c
  2141   00189A  6ED9               	movwf	fsr2l,c
  2142   00189C  6ADA               	clrf	fsr2h,c
  2143   00189E  0E01               	movlw	1
  2144   0018A0  26D9               	addwf	fsr2l,f,c
  2145   0018A2  0E01               	movlw	1
  2146   0018A4  6EDF               	movwf	indf2,c
  2147   0018A6                     
  2148                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2149   0018A6  0E00               	movlw	0
  2150   0018A8  6E29               	movwf	(turnLeft@cur_power+1)^0,c
  2151   0018AA  0E01               	movlw	1
  2152   0018AC  6E28               	movwf	turnLeft@cur_power^0,c
  2153   0018AE  EF9B  F00C         	goto	l2277
  2154   0018B2                     l2263:
  2155                           
  2156                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  2157   0018B2  501E               	movf	turnLeft@mL^0,w,c
  2158   0018B4  6ED9               	movwf	fsr2l,c
  2159   0018B6  6ADA               	clrf	fsr2h,c
  2160   0018B8  501E               	movf	turnLeft@mL^0,w,c
  2161   0018BA  6EE1               	movwf	fsr1l,c
  2162   0018BC  6AE2               	clrf	fsr1h,c
  2163   0018BE  0E09               	movlw	9
  2164   0018C0  26E1               	addwf	fsr1l,f,c
  2165   0018C2  50E7               	movf	indf1,w,c
  2166   0018C4  2428               	addwf	turnLeft@cur_power^0,w,c
  2167   0018C6  6EDF               	movwf	indf2,c
  2168                           
  2169                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  2170   0018C8  501F               	movf	turnLeft@mR^0,w,c
  2171   0018CA  6ED9               	movwf	fsr2l,c
  2172   0018CC  6ADA               	clrf	fsr2h,c
  2173   0018CE  501F               	movf	turnLeft@mR^0,w,c
  2174   0018D0  6EE1               	movwf	fsr1l,c
  2175   0018D2  6AE2               	clrf	fsr1h,c
  2176   0018D4  0E09               	movlw	9
  2177   0018D6  26E1               	addwf	fsr1l,f,c
  2178   0018D8  50E7               	movf	indf1,w,c
  2179   0018DA  2428               	addwf	turnLeft@cur_power^0,w,c
  2180   0018DC  6EDF               	movwf	indf2,c
  2181   0018DE                     
  2182                           ;dc_motor.c: 191:         setMotorPWM(mL);
  2183   0018DE  C01E  F019         	movff	turnLeft@mL,setMotorPWM@m
  2184   0018E2  EC21  F00D         	call	_setMotorPWM	;wreg free
  2185   0018E6                     
  2186                           ;dc_motor.c: 192:         setMotorPWM(mR);
  2187   0018E6  C01F  F019         	movff	turnLeft@mR,setMotorPWM@m
  2188   0018EA  EC21  F00D         	call	_setMotorPWM	;wreg free
  2189   0018EE                     
  2190                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  2191   0018EE  0E00               	movlw	0
  2192   0018F0  6E27               	movwf	(turnLeft@i+1)^0,c
  2193   0018F2  0E00               	movlw	0
  2194   0018F4  6E26               	movwf	turnLeft@i^0,c
  2195   0018F6  EF87  F00C         	goto	l463
  2196   0018FA                     l2271:
  2197                           
  2198                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2199   0018FA  0E68               	movlw	104
  2200   0018FC  6E23               	movwf	??_turnLeft^0,c
  2201   0018FE  0EE4               	movlw	228
  2202   001900                     u1827:
  2203   001900  2EE8               	decfsz	wreg,f,c
  2204   001902  D7FE               	bra	u1827
  2205   001904  2E23               	decfsz	??_turnLeft^0,f,c
  2206   001906  D7FC               	bra	u1827
  2207   001908  D000               	nop2	
  2208   00190A                     
  2209                           ;dc_motor.c: 195:         }
  2210   00190A  4A26               	infsnz	turnLeft@i^0,f,c
  2211   00190C  2A27               	incf	(turnLeft@i+1)^0,f,c
  2212   00190E                     l463:
  2213   00190E  5022               	movf	turnLeft@turnRamp^0,w,c
  2214   001910  6E23               	movwf	??_turnLeft^0,c
  2215   001912  6A24               	clrf	(??_turnLeft+1)^0,c
  2216   001914  5023               	movf	??_turnLeft^0,w,c
  2217   001916  5C26               	subwf	turnLeft@i^0,w,c
  2218   001918  5027               	movf	(turnLeft@i+1)^0,w,c
  2219   00191A  0A80               	xorlw	128
  2220   00191C  6E25               	movwf	(??_turnLeft+2)^0,c
  2221   00191E  5024               	movf	(??_turnLeft+1)^0,w,c
  2222   001920  0A80               	xorlw	128
  2223   001922  5825               	subwfb	(??_turnLeft+2)^0,w,c
  2224   001924  A0D8               	btfss	status,0,c
  2225   001926  EF97  F00C         	goto	u1011
  2226   00192A  EF99  F00C         	goto	u1010
  2227   00192E                     u1011:
  2228   00192E  EF7D  F00C         	goto	l2271
  2229   001932                     u1010:
  2230   001932                     
  2231                           ;dc_motor.c: 196:     }
  2232   001932  4A28               	infsnz	turnLeft@cur_power^0,f,c
  2233   001934  2A29               	incf	(turnLeft@cur_power+1)^0,f,c
  2234   001936                     l2277:
  2235   001936  5020               	movf	turnLeft@turnSpeed^0,w,c
  2236   001938  6E23               	movwf	??_turnLeft^0,c
  2237   00193A  6A24               	clrf	(??_turnLeft+1)^0,c
  2238   00193C  5028               	movf	turnLeft@cur_power^0,w,c
  2239   00193E  5C23               	subwf	??_turnLeft^0,w,c
  2240   001940  5024               	movf	(??_turnLeft+1)^0,w,c
  2241   001942  0A80               	xorlw	128
  2242   001944  6E25               	movwf	(??_turnLeft+2)^0,c
  2243   001946  5029               	movf	(turnLeft@cur_power+1)^0,w,c
  2244   001948  0A80               	xorlw	128
  2245   00194A  5825               	subwfb	(??_turnLeft+2)^0,w,c
  2246   00194C  B0D8               	btfsc	status,0,c
  2247   00194E  EFAB  F00C         	goto	u1021
  2248   001952  EFAD  F00C         	goto	u1020
  2249   001956                     u1021:
  2250   001956  EF59  F00C         	goto	l2263
  2251   00195A                     u1020:
  2252   00195A                     
  2253                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  2254   00195A  0E00               	movlw	0
  2255   00195C  6E27               	movwf	(turnLeft@i+1)^0,c
  2256   00195E  0E00               	movlw	0
  2257   001960  6E26               	movwf	turnLeft@i^0,c
  2258   001962  EFBD  F00C         	goto	l467
  2259   001966                     l2281:
  2260                           
  2261                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2262   001966  0E68               	movlw	104
  2263   001968  6E23               	movwf	??_turnLeft^0,c
  2264   00196A  0EE4               	movlw	228
  2265   00196C                     u1837:
  2266   00196C  2EE8               	decfsz	wreg,f,c
  2267   00196E  D7FE               	bra	u1837
  2268   001970  2E23               	decfsz	??_turnLeft^0,f,c
  2269   001972  D7FC               	bra	u1837
  2270   001974  D000               	nop2	
  2271   001976                     
  2272                           ;dc_motor.c: 200:         }
  2273   001976  4A26               	infsnz	turnLeft@i^0,f,c
  2274   001978  2A27               	incf	(turnLeft@i+1)^0,f,c
  2275   00197A                     l467:
  2276   00197A  5021               	movf	turnLeft@turnDuration^0,w,c
  2277   00197C  6E23               	movwf	??_turnLeft^0,c
  2278   00197E  6A24               	clrf	(??_turnLeft+1)^0,c
  2279   001980  5023               	movf	??_turnLeft^0,w,c
  2280   001982  5C26               	subwf	turnLeft@i^0,w,c
  2281   001984  5027               	movf	(turnLeft@i+1)^0,w,c
  2282   001986  0A80               	xorlw	128
  2283   001988  6E25               	movwf	(??_turnLeft+2)^0,c
  2284   00198A  5024               	movf	(??_turnLeft+1)^0,w,c
  2285   00198C  0A80               	xorlw	128
  2286   00198E  5825               	subwfb	(??_turnLeft+2)^0,w,c
  2287   001990  A0D8               	btfss	status,0,c
  2288   001992  EFCD  F00C         	goto	u1031
  2289   001996  EFCF  F00C         	goto	u1030
  2290   00199A                     u1031:
  2291   00199A  EFB3  F00C         	goto	l2281
  2292   00199E                     u1030:
  2293   00199E                     
  2294                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2295   00199E  C020  F028         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  2296   0019A2  6A29               	clrf	(turnLeft@cur_power+1)^0,c
  2297   0019A4                     l2285:
  2298   0019A4  BE29               	btfsc	(turnLeft@cur_power+1)^0,7,c
  2299   0019A6  EFD9  F00C         	goto	u1040
  2300   0019AA  EFD7  F00C         	goto	u1041
  2301   0019AE                     u1041:
  2302   0019AE  EFDB  F00C         	goto	l2289
  2303   0019B2                     u1040:
  2304   0019B2  EF20  F00D         	goto	l475
  2305   0019B6                     l2289:
  2306                           
  2307                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  2308   0019B6  501E               	movf	turnLeft@mL^0,w,c
  2309   0019B8  6ED9               	movwf	fsr2l,c
  2310   0019BA  6ADA               	clrf	fsr2h,c
  2311   0019BC  501E               	movf	turnLeft@mL^0,w,c
  2312   0019BE  6EE1               	movwf	fsr1l,c
  2313   0019C0  6AE2               	clrf	fsr1h,c
  2314   0019C2  0E09               	movlw	9
  2315   0019C4  26E1               	addwf	fsr1l,f,c
  2316   0019C6  50E7               	movf	indf1,w,c
  2317   0019C8  2428               	addwf	turnLeft@cur_power^0,w,c
  2318   0019CA  6EDF               	movwf	indf2,c
  2319                           
  2320                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  2321   0019CC  501F               	movf	turnLeft@mR^0,w,c
  2322   0019CE  6ED9               	movwf	fsr2l,c
  2323   0019D0  6ADA               	clrf	fsr2h,c
  2324   0019D2  501F               	movf	turnLeft@mR^0,w,c
  2325   0019D4  6EE1               	movwf	fsr1l,c
  2326   0019D6  6AE2               	clrf	fsr1h,c
  2327   0019D8  0E09               	movlw	9
  2328   0019DA  26E1               	addwf	fsr1l,f,c
  2329   0019DC  50E7               	movf	indf1,w,c
  2330   0019DE  2428               	addwf	turnLeft@cur_power^0,w,c
  2331   0019E0  6EDF               	movwf	indf2,c
  2332   0019E2                     
  2333                           ;dc_motor.c: 205:         setMotorPWM(mL);
  2334   0019E2  C01E  F019         	movff	turnLeft@mL,setMotorPWM@m
  2335   0019E6  EC21  F00D         	call	_setMotorPWM	;wreg free
  2336   0019EA                     
  2337                           ;dc_motor.c: 206:         setMotorPWM(mR);
  2338   0019EA  C01F  F019         	movff	turnLeft@mR,setMotorPWM@m
  2339   0019EE  EC21  F00D         	call	_setMotorPWM	;wreg free
  2340   0019F2                     
  2341                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  2342   0019F2  0E00               	movlw	0
  2343   0019F4  6E27               	movwf	(turnLeft@i+1)^0,c
  2344   0019F6  0E00               	movlw	0
  2345   0019F8  6E26               	movwf	turnLeft@i^0,c
  2346   0019FA  EF09  F00D         	goto	l472
  2347   0019FE                     l2297:
  2348                           
  2349                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2350   0019FE  0E68               	movlw	104
  2351   001A00  6E23               	movwf	??_turnLeft^0,c
  2352   001A02  0EE4               	movlw	228
  2353   001A04                     u1847:
  2354   001A04  2EE8               	decfsz	wreg,f,c
  2355   001A06  D7FE               	bra	u1847
  2356   001A08  2E23               	decfsz	??_turnLeft^0,f,c
  2357   001A0A  D7FC               	bra	u1847
  2358   001A0C  D000               	nop2	
  2359   001A0E                     
  2360                           ;dc_motor.c: 209:         }
  2361   001A0E  4A26               	infsnz	turnLeft@i^0,f,c
  2362   001A10  2A27               	incf	(turnLeft@i+1)^0,f,c
  2363   001A12                     l472:
  2364   001A12  5022               	movf	turnLeft@turnRamp^0,w,c
  2365   001A14  6E23               	movwf	??_turnLeft^0,c
  2366   001A16  6A24               	clrf	(??_turnLeft+1)^0,c
  2367   001A18  5023               	movf	??_turnLeft^0,w,c
  2368   001A1A  5C26               	subwf	turnLeft@i^0,w,c
  2369   001A1C  5027               	movf	(turnLeft@i+1)^0,w,c
  2370   001A1E  0A80               	xorlw	128
  2371   001A20  6E25               	movwf	(??_turnLeft+2)^0,c
  2372   001A22  5024               	movf	(??_turnLeft+1)^0,w,c
  2373   001A24  0A80               	xorlw	128
  2374   001A26  5825               	subwfb	(??_turnLeft+2)^0,w,c
  2375   001A28  A0D8               	btfss	status,0,c
  2376   001A2A  EF19  F00D         	goto	u1051
  2377   001A2E  EF1B  F00D         	goto	u1050
  2378   001A32                     u1051:
  2379   001A32  EFFF  F00C         	goto	l2297
  2380   001A36                     u1050:
  2381   001A36                     
  2382                           ;dc_motor.c: 210:     }
  2383   001A36  0628               	decf	turnLeft@cur_power^0,f,c
  2384   001A38  A0D8               	btfss	status,0,c
  2385   001A3A  0629               	decf	(turnLeft@cur_power+1)^0,f,c
  2386   001A3C  EFD2  F00C         	goto	l2285
  2387   001A40                     l475:
  2388   001A40  0012               	return		;funcret
  2389   001A42                     __end_of_turnLeft:
  2390                           	callstack 0
  2391                           
  2392 ;; *************** function _reverseOneSquare *****************
  2393 ;; Defined at:
  2394 ;;		line 263 in file "dc_motor.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  mL              1   29[COMRAM] PTR struct DC_motor
  2397 ;;		 -> main@motorL(10), 
  2398 ;;  mR              1   30[COMRAM] PTR struct DC_motor
  2399 ;;		 -> main@motorR(10), 
  2400 ;;  straightSpee    1   31[COMRAM] unsigned char 
  2401 ;;  reverseDurat    1   32[COMRAM] unsigned char 
  2402 ;;  straightRamp    1   33[COMRAM] unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  cur_power       2   39[COMRAM] int 
  2405 ;;  i               2   37[COMRAM] int 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2415 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2419 ;;Total ram usage:       12 bytes
  2420 ;; Hardware stack levels used: 1
  2421 ;; Hardware stack levels required when called: 7
  2422 ;; This function calls:
  2423 ;;		_setMotorPWM
  2424 ;; This function is called by:
  2425 ;;		_move
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text6
  2430   001352                     __ptext6:
  2431                           	callstack 0
  2432   001352                     _reverseOneSquare:
  2433                           	callstack 22
  2434   001352                     
  2435                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  2436   001352  501E               	movf	reverseOneSquare@mL^0,w,c
  2437   001354  6ED9               	movwf	fsr2l,c
  2438   001356  6ADA               	clrf	fsr2h,c
  2439   001358  0E01               	movlw	1
  2440   00135A  26D9               	addwf	fsr2l,f,c
  2441   00135C  6ADF               	clrf	indf2,c
  2442                           
  2443                           ;dc_motor.c: 266:     mR->direction = 0;
  2444   00135E  501F               	movf	reverseOneSquare@mR^0,w,c
  2445   001360  6ED9               	movwf	fsr2l,c
  2446   001362  6ADA               	clrf	fsr2h,c
  2447   001364  0E01               	movlw	1
  2448   001366  26D9               	addwf	fsr2l,f,c
  2449   001368  6ADF               	clrf	indf2,c
  2450   00136A                     
  2451                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2452   00136A  0E00               	movlw	0
  2453   00136C  6E29               	movwf	(reverseOneSquare@cur_power+1)^0,c
  2454   00136E  0E01               	movlw	1
  2455   001370  6E28               	movwf	reverseOneSquare@cur_power^0,c
  2456   001372  EFFD  F009         	goto	l2323
  2457   001376                     l2309:
  2458                           
  2459                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  2460   001376  501E               	movf	reverseOneSquare@mL^0,w,c
  2461   001378  6ED9               	movwf	fsr2l,c
  2462   00137A  6ADA               	clrf	fsr2h,c
  2463   00137C  501E               	movf	reverseOneSquare@mL^0,w,c
  2464   00137E  6EE1               	movwf	fsr1l,c
  2465   001380  6AE2               	clrf	fsr1h,c
  2466   001382  0E09               	movlw	9
  2467   001384  26E1               	addwf	fsr1l,f,c
  2468   001386  50E7               	movf	indf1,w,c
  2469   001388  2428               	addwf	reverseOneSquare@cur_power^0,w,c
  2470   00138A  6EDF               	movwf	indf2,c
  2471                           
  2472                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  2473   00138C  501F               	movf	reverseOneSquare@mR^0,w,c
  2474   00138E  6ED9               	movwf	fsr2l,c
  2475   001390  6ADA               	clrf	fsr2h,c
  2476   001392  501F               	movf	reverseOneSquare@mR^0,w,c
  2477   001394  6EE1               	movwf	fsr1l,c
  2478   001396  6AE2               	clrf	fsr1h,c
  2479   001398  0E09               	movlw	9
  2480   00139A  26E1               	addwf	fsr1l,f,c
  2481   00139C  50E7               	movf	indf1,w,c
  2482   00139E  2428               	addwf	reverseOneSquare@cur_power^0,w,c
  2483   0013A0  6EDF               	movwf	indf2,c
  2484   0013A2                     
  2485                           ;dc_motor.c: 272:         setMotorPWM(mL);
  2486   0013A2  C01E  F019         	movff	reverseOneSquare@mL,setMotorPWM@m
  2487   0013A6  EC21  F00D         	call	_setMotorPWM	;wreg free
  2488   0013AA                     
  2489                           ;dc_motor.c: 273:         setMotorPWM(mR);
  2490   0013AA  C01F  F019         	movff	reverseOneSquare@mR,setMotorPWM@m
  2491   0013AE  EC21  F00D         	call	_setMotorPWM	;wreg free
  2492   0013B2                     
  2493                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  2494   0013B2  0E00               	movlw	0
  2495   0013B4  6E27               	movwf	(reverseOneSquare@i+1)^0,c
  2496   0013B6  0E00               	movlw	0
  2497   0013B8  6E26               	movwf	reverseOneSquare@i^0,c
  2498   0013BA  EFE9  F009         	goto	l506
  2499   0013BE                     l2317:
  2500                           
  2501                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2502   0013BE  0E68               	movlw	104
  2503   0013C0  6E23               	movwf	??_reverseOneSquare^0,c
  2504   0013C2  0EE4               	movlw	228
  2505   0013C4                     u1857:
  2506   0013C4  2EE8               	decfsz	wreg,f,c
  2507   0013C6  D7FE               	bra	u1857
  2508   0013C8  2E23               	decfsz	??_reverseOneSquare^0,f,c
  2509   0013CA  D7FC               	bra	u1857
  2510   0013CC  D000               	nop2	
  2511   0013CE                     
  2512                           ;dc_motor.c: 276:         }
  2513   0013CE  4A26               	infsnz	reverseOneSquare@i^0,f,c
  2514   0013D0  2A27               	incf	(reverseOneSquare@i+1)^0,f,c
  2515   0013D2                     l506:
  2516   0013D2  5022               	movf	reverseOneSquare@straightRamp^0,w,c
  2517   0013D4  6E23               	movwf	??_reverseOneSquare^0,c
  2518   0013D6  6A24               	clrf	(??_reverseOneSquare+1)^0,c
  2519   0013D8  5023               	movf	??_reverseOneSquare^0,w,c
  2520   0013DA  5C26               	subwf	reverseOneSquare@i^0,w,c
  2521   0013DC  5027               	movf	(reverseOneSquare@i+1)^0,w,c
  2522   0013DE  0A80               	xorlw	128
  2523   0013E0  6E25               	movwf	(??_reverseOneSquare+2)^0,c
  2524   0013E2  5024               	movf	(??_reverseOneSquare+1)^0,w,c
  2525   0013E4  0A80               	xorlw	128
  2526   0013E6  5825               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2527   0013E8  A0D8               	btfss	status,0,c
  2528   0013EA  EFF9  F009         	goto	u1061
  2529   0013EE  EFFB  F009         	goto	u1060
  2530   0013F2                     u1061:
  2531   0013F2  EFDF  F009         	goto	l2317
  2532   0013F6                     u1060:
  2533   0013F6                     
  2534                           ;dc_motor.c: 277:     }
  2535   0013F6  4A28               	infsnz	reverseOneSquare@cur_power^0,f,c
  2536   0013F8  2A29               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  2537   0013FA                     l2323:
  2538   0013FA  5020               	movf	reverseOneSquare@straightSpeed^0,w,c
  2539   0013FC  6E23               	movwf	??_reverseOneSquare^0,c
  2540   0013FE  6A24               	clrf	(??_reverseOneSquare+1)^0,c
  2541   001400  5028               	movf	reverseOneSquare@cur_power^0,w,c
  2542   001402  5C23               	subwf	??_reverseOneSquare^0,w,c
  2543   001404  5024               	movf	(??_reverseOneSquare+1)^0,w,c
  2544   001406  0A80               	xorlw	128
  2545   001408  6E25               	movwf	(??_reverseOneSquare+2)^0,c
  2546   00140A  5029               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  2547   00140C  0A80               	xorlw	128
  2548   00140E  5825               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2549   001410  B0D8               	btfsc	status,0,c
  2550   001412  EF0D  F00A         	goto	u1071
  2551   001416  EF0F  F00A         	goto	u1070
  2552   00141A                     u1071:
  2553   00141A  EFBB  F009         	goto	l2309
  2554   00141E                     u1070:
  2555   00141E                     
  2556                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  2557   00141E  0E00               	movlw	0
  2558   001420  6E27               	movwf	(reverseOneSquare@i+1)^0,c
  2559   001422  0E00               	movlw	0
  2560   001424  6E26               	movwf	reverseOneSquare@i^0,c
  2561   001426  EF1F  F00A         	goto	l510
  2562   00142A                     l2327:
  2563                           
  2564                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2565   00142A  0E68               	movlw	104
  2566   00142C  6E23               	movwf	??_reverseOneSquare^0,c
  2567   00142E  0EE4               	movlw	228
  2568   001430                     u1867:
  2569   001430  2EE8               	decfsz	wreg,f,c
  2570   001432  D7FE               	bra	u1867
  2571   001434  2E23               	decfsz	??_reverseOneSquare^0,f,c
  2572   001436  D7FC               	bra	u1867
  2573   001438  D000               	nop2	
  2574   00143A                     
  2575                           ;dc_motor.c: 281:         }
  2576   00143A  4A26               	infsnz	reverseOneSquare@i^0,f,c
  2577   00143C  2A27               	incf	(reverseOneSquare@i+1)^0,f,c
  2578   00143E                     l510:
  2579   00143E  5021               	movf	reverseOneSquare@reverseDuration^0,w,c
  2580   001440  6E23               	movwf	??_reverseOneSquare^0,c
  2581   001442  6A24               	clrf	(??_reverseOneSquare+1)^0,c
  2582   001444  5023               	movf	??_reverseOneSquare^0,w,c
  2583   001446  5C26               	subwf	reverseOneSquare@i^0,w,c
  2584   001448  5027               	movf	(reverseOneSquare@i+1)^0,w,c
  2585   00144A  0A80               	xorlw	128
  2586   00144C  6E25               	movwf	(??_reverseOneSquare+2)^0,c
  2587   00144E  5024               	movf	(??_reverseOneSquare+1)^0,w,c
  2588   001450  0A80               	xorlw	128
  2589   001452  5825               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2590   001454  A0D8               	btfss	status,0,c
  2591   001456  EF2F  F00A         	goto	u1081
  2592   00145A  EF31  F00A         	goto	u1080
  2593   00145E                     u1081:
  2594   00145E  EF15  F00A         	goto	l2327
  2595   001462                     u1080:
  2596   001462                     
  2597                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2598   001462  C020  F028         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  2599   001466  6A29               	clrf	(reverseOneSquare@cur_power+1)^0,c
  2600   001468                     l2331:
  2601   001468  BE29               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  2602   00146A  EF3B  F00A         	goto	u1090
  2603   00146E  EF39  F00A         	goto	u1091
  2604   001472                     u1091:
  2605   001472  EF3D  F00A         	goto	l2335
  2606   001476                     u1090:
  2607   001476  EF82  F00A         	goto	l2351
  2608   00147A                     l2335:
  2609                           
  2610                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  2611   00147A  501E               	movf	reverseOneSquare@mL^0,w,c
  2612   00147C  6ED9               	movwf	fsr2l,c
  2613   00147E  6ADA               	clrf	fsr2h,c
  2614   001480  501E               	movf	reverseOneSquare@mL^0,w,c
  2615   001482  6EE1               	movwf	fsr1l,c
  2616   001484  6AE2               	clrf	fsr1h,c
  2617   001486  0E09               	movlw	9
  2618   001488  26E1               	addwf	fsr1l,f,c
  2619   00148A  50E7               	movf	indf1,w,c
  2620   00148C  2428               	addwf	reverseOneSquare@cur_power^0,w,c
  2621   00148E  6EDF               	movwf	indf2,c
  2622                           
  2623                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  2624   001490  501F               	movf	reverseOneSquare@mR^0,w,c
  2625   001492  6ED9               	movwf	fsr2l,c
  2626   001494  6ADA               	clrf	fsr2h,c
  2627   001496  501F               	movf	reverseOneSquare@mR^0,w,c
  2628   001498  6EE1               	movwf	fsr1l,c
  2629   00149A  6AE2               	clrf	fsr1h,c
  2630   00149C  0E09               	movlw	9
  2631   00149E  26E1               	addwf	fsr1l,f,c
  2632   0014A0  50E7               	movf	indf1,w,c
  2633   0014A2  2428               	addwf	reverseOneSquare@cur_power^0,w,c
  2634   0014A4  6EDF               	movwf	indf2,c
  2635   0014A6                     
  2636                           ;dc_motor.c: 286:         setMotorPWM(mL);
  2637   0014A6  C01E  F019         	movff	reverseOneSquare@mL,setMotorPWM@m
  2638   0014AA  EC21  F00D         	call	_setMotorPWM	;wreg free
  2639   0014AE                     
  2640                           ;dc_motor.c: 287:         setMotorPWM(mR);
  2641   0014AE  C01F  F019         	movff	reverseOneSquare@mR,setMotorPWM@m
  2642   0014B2  EC21  F00D         	call	_setMotorPWM	;wreg free
  2643   0014B6                     
  2644                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  2645   0014B6  0E00               	movlw	0
  2646   0014B8  6E27               	movwf	(reverseOneSquare@i+1)^0,c
  2647   0014BA  0E00               	movlw	0
  2648   0014BC  6E26               	movwf	reverseOneSquare@i^0,c
  2649   0014BE  EF6B  F00A         	goto	l515
  2650   0014C2                     l2343:
  2651                           
  2652                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2653   0014C2  0E68               	movlw	104
  2654   0014C4  6E23               	movwf	??_reverseOneSquare^0,c
  2655   0014C6  0EE4               	movlw	228
  2656   0014C8                     u1877:
  2657   0014C8  2EE8               	decfsz	wreg,f,c
  2658   0014CA  D7FE               	bra	u1877
  2659   0014CC  2E23               	decfsz	??_reverseOneSquare^0,f,c
  2660   0014CE  D7FC               	bra	u1877
  2661   0014D0  D000               	nop2	
  2662   0014D2                     
  2663                           ;dc_motor.c: 290:         }
  2664   0014D2  4A26               	infsnz	reverseOneSquare@i^0,f,c
  2665   0014D4  2A27               	incf	(reverseOneSquare@i+1)^0,f,c
  2666   0014D6                     l515:
  2667   0014D6  5022               	movf	reverseOneSquare@straightRamp^0,w,c
  2668   0014D8  6E23               	movwf	??_reverseOneSquare^0,c
  2669   0014DA  6A24               	clrf	(??_reverseOneSquare+1)^0,c
  2670   0014DC  5023               	movf	??_reverseOneSquare^0,w,c
  2671   0014DE  5C26               	subwf	reverseOneSquare@i^0,w,c
  2672   0014E0  5027               	movf	(reverseOneSquare@i+1)^0,w,c
  2673   0014E2  0A80               	xorlw	128
  2674   0014E4  6E25               	movwf	(??_reverseOneSquare+2)^0,c
  2675   0014E6  5024               	movf	(??_reverseOneSquare+1)^0,w,c
  2676   0014E8  0A80               	xorlw	128
  2677   0014EA  5825               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2678   0014EC  A0D8               	btfss	status,0,c
  2679   0014EE  EF7B  F00A         	goto	u1101
  2680   0014F2  EF7D  F00A         	goto	u1100
  2681   0014F6                     u1101:
  2682   0014F6  EF61  F00A         	goto	l2343
  2683   0014FA                     u1100:
  2684   0014FA                     
  2685                           ;dc_motor.c: 291:     }
  2686   0014FA  0628               	decf	reverseOneSquare@cur_power^0,f,c
  2687   0014FC  A0D8               	btfss	status,0,c
  2688   0014FE  0629               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  2689   001500  EF34  F00A         	goto	l2331
  2690   001504                     l2351:
  2691                           
  2692                           ;dc_motor.c: 292:     mL->power = 0;
  2693   001504  501E               	movf	reverseOneSquare@mL^0,w,c
  2694   001506  6ED9               	movwf	fsr2l,c
  2695   001508  6ADA               	clrf	fsr2h,c
  2696   00150A  6ADF               	clrf	indf2,c
  2697                           
  2698                           ;dc_motor.c: 293:     mR->power = 0;
  2699   00150C  501F               	movf	reverseOneSquare@mR^0,w,c
  2700   00150E  6ED9               	movwf	fsr2l,c
  2701   001510  6ADA               	clrf	fsr2h,c
  2702   001512  6ADF               	clrf	indf2,c
  2703   001514  0012               	return		;funcret
  2704   001516                     __end_of_reverseOneSquare:
  2705                           	callstack 0
  2706                           
  2707 ;; *************** function _fullSpeedAhead *****************
  2708 ;; Defined at:
  2709 ;;		line 246 in file "dc_motor.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  mL              1   29[COMRAM] PTR struct DC_motor
  2712 ;;		 -> main@motorL(10), 
  2713 ;;  mR              1   30[COMRAM] PTR struct DC_motor
  2714 ;;		 -> main@motorR(10), 
  2715 ;;  straightSpee    1   31[COMRAM] unsigned char 
  2716 ;;  straightRamp    1   32[COMRAM] unsigned char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  cur_power       2   38[COMRAM] int 
  2719 ;;  i               2   36[COMRAM] int 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2730 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2731 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2733 ;;Total ram usage:       11 bytes
  2734 ;; Hardware stack levels used: 1
  2735 ;; Hardware stack levels required when called: 7
  2736 ;; This function calls:
  2737 ;;		_setMotorPWM
  2738 ;; This function is called by:
  2739 ;;		_main
  2740 ;;		_move
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text7
  2745   001ED2                     __ptext7:
  2746                           	callstack 0
  2747   001ED2                     _fullSpeedAhead:
  2748                           	callstack 22
  2749   001ED2                     
  2750                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  2751   001ED2  501E               	movf	fullSpeedAhead@mL^0,w,c
  2752   001ED4  6ED9               	movwf	fsr2l,c
  2753   001ED6  6ADA               	clrf	fsr2h,c
  2754   001ED8  0E01               	movlw	1
  2755   001EDA  26D9               	addwf	fsr2l,f,c
  2756   001EDC  0E01               	movlw	1
  2757   001EDE  6EDF               	movwf	indf2,c
  2758                           
  2759                           ;dc_motor.c: 249:     mR->direction = 1;
  2760   001EE0  501F               	movf	fullSpeedAhead@mR^0,w,c
  2761   001EE2  6ED9               	movwf	fsr2l,c
  2762   001EE4  6ADA               	clrf	fsr2h,c
  2763   001EE6  0E01               	movlw	1
  2764   001EE8  26D9               	addwf	fsr2l,f,c
  2765   001EEA  0E01               	movlw	1
  2766   001EEC  6EDF               	movwf	indf2,c
  2767   001EEE                     
  2768                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2769   001EEE  0E00               	movlw	0
  2770   001EF0  6E28               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  2771   001EF2  0E01               	movlw	1
  2772   001EF4  6E27               	movwf	fullSpeedAhead@cur_power^0,c
  2773   001EF6  EFBF  F00F         	goto	l2147
  2774   001EFA                     l2133:
  2775                           
  2776                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  2777   001EFA  501E               	movf	fullSpeedAhead@mL^0,w,c
  2778   001EFC  6ED9               	movwf	fsr2l,c
  2779   001EFE  6ADA               	clrf	fsr2h,c
  2780   001F00  501E               	movf	fullSpeedAhead@mL^0,w,c
  2781   001F02  6EE1               	movwf	fsr1l,c
  2782   001F04  6AE2               	clrf	fsr1h,c
  2783   001F06  0E09               	movlw	9
  2784   001F08  26E1               	addwf	fsr1l,f,c
  2785   001F0A  50E7               	movf	indf1,w,c
  2786   001F0C  2427               	addwf	fullSpeedAhead@cur_power^0,w,c
  2787   001F0E  6EDF               	movwf	indf2,c
  2788                           
  2789                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  2790   001F10  501F               	movf	fullSpeedAhead@mR^0,w,c
  2791   001F12  6ED9               	movwf	fsr2l,c
  2792   001F14  6ADA               	clrf	fsr2h,c
  2793   001F16  501F               	movf	fullSpeedAhead@mR^0,w,c
  2794   001F18  6EE1               	movwf	fsr1l,c
  2795   001F1A  6AE2               	clrf	fsr1h,c
  2796   001F1C  0E09               	movlw	9
  2797   001F1E  26E1               	addwf	fsr1l,f,c
  2798   001F20  50E7               	movf	indf1,w,c
  2799   001F22  2427               	addwf	fullSpeedAhead@cur_power^0,w,c
  2800   001F24  6EDF               	movwf	indf2,c
  2801   001F26                     
  2802                           ;dc_motor.c: 255:         setMotorPWM(mL);
  2803   001F26  C01E  F019         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2804   001F2A  EC21  F00D         	call	_setMotorPWM	;wreg free
  2805   001F2E                     
  2806                           ;dc_motor.c: 256:         setMotorPWM(mR);
  2807   001F2E  C01F  F019         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2808   001F32  EC21  F00D         	call	_setMotorPWM	;wreg free
  2809   001F36                     
  2810                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  2811   001F36  0E00               	movlw	0
  2812   001F38  6E26               	movwf	(fullSpeedAhead@i+1)^0,c
  2813   001F3A  0E00               	movlw	0
  2814   001F3C  6E25               	movwf	fullSpeedAhead@i^0,c
  2815   001F3E  EFAB  F00F         	goto	l497
  2816   001F42                     l2141:
  2817                           
  2818                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2819   001F42  0E68               	movlw	104
  2820   001F44  6E22               	movwf	??_fullSpeedAhead^0,c
  2821   001F46  0EE4               	movlw	228
  2822   001F48                     u1887:
  2823   001F48  2EE8               	decfsz	wreg,f,c
  2824   001F4A  D7FE               	bra	u1887
  2825   001F4C  2E22               	decfsz	??_fullSpeedAhead^0,f,c
  2826   001F4E  D7FC               	bra	u1887
  2827   001F50  D000               	nop2	
  2828   001F52                     
  2829                           ;dc_motor.c: 259:         }
  2830   001F52  4A25               	infsnz	fullSpeedAhead@i^0,f,c
  2831   001F54  2A26               	incf	(fullSpeedAhead@i+1)^0,f,c
  2832   001F56                     l497:
  2833   001F56  5021               	movf	fullSpeedAhead@straightRamp^0,w,c
  2834   001F58  6E22               	movwf	??_fullSpeedAhead^0,c
  2835   001F5A  6A23               	clrf	(??_fullSpeedAhead+1)^0,c
  2836   001F5C  5022               	movf	??_fullSpeedAhead^0,w,c
  2837   001F5E  5C25               	subwf	fullSpeedAhead@i^0,w,c
  2838   001F60  5026               	movf	(fullSpeedAhead@i+1)^0,w,c
  2839   001F62  0A80               	xorlw	128
  2840   001F64  6E24               	movwf	(??_fullSpeedAhead+2)^0,c
  2841   001F66  5023               	movf	(??_fullSpeedAhead+1)^0,w,c
  2842   001F68  0A80               	xorlw	128
  2843   001F6A  5824               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2844   001F6C  A0D8               	btfss	status,0,c
  2845   001F6E  EFBB  F00F         	goto	u911
  2846   001F72  EFBD  F00F         	goto	u910
  2847   001F76                     u911:
  2848   001F76  EFA1  F00F         	goto	l2141
  2849   001F7A                     u910:
  2850   001F7A                     
  2851                           ;dc_motor.c: 260:     }
  2852   001F7A  4A27               	infsnz	fullSpeedAhead@cur_power^0,f,c
  2853   001F7C  2A28               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  2854   001F7E                     l2147:
  2855   001F7E  5020               	movf	fullSpeedAhead@straightSpeed^0,w,c
  2856   001F80  6E22               	movwf	??_fullSpeedAhead^0,c
  2857   001F82  6A23               	clrf	(??_fullSpeedAhead+1)^0,c
  2858   001F84  5027               	movf	fullSpeedAhead@cur_power^0,w,c
  2859   001F86  5C22               	subwf	??_fullSpeedAhead^0,w,c
  2860   001F88  5023               	movf	(??_fullSpeedAhead+1)^0,w,c
  2861   001F8A  0A80               	xorlw	128
  2862   001F8C  6E24               	movwf	(??_fullSpeedAhead+2)^0,c
  2863   001F8E  5028               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  2864   001F90  0A80               	xorlw	128
  2865   001F92  5824               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2866   001F94  B0D8               	btfsc	status,0,c
  2867   001F96  EFCF  F00F         	goto	u921
  2868   001F9A  EFD1  F00F         	goto	u920
  2869   001F9E                     u921:
  2870   001F9E  EF7D  F00F         	goto	l2133
  2871   001FA2                     u920:
  2872   001FA2  0012               	return		;funcret
  2873   001FA4                     __end_of_fullSpeedAhead:
  2874                           	callstack 0
  2875                           
  2876 ;; *************** function _setMotorPWM *****************
  2877 ;; Defined at:
  2878 ;;		line 65 in file "dc_motor.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  m               1   24[COMRAM] PTR struct DC_motor
  2881 ;;		 -> main@motorR(10), main@motorL(10), 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  negDuty         1   28[COMRAM] unsigned char 
  2884 ;;  posDuty         1   27[COMRAM] unsigned char 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2894 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2897 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2898 ;;Total ram usage:        5 bytes
  2899 ;; Hardware stack levels used: 1
  2900 ;; Hardware stack levels required when called: 6
  2901 ;; This function calls:
  2902 ;;		___lwdiv
  2903 ;;		___wmul
  2904 ;; This function is called by:
  2905 ;;		_stop
  2906 ;;		_turnLeft
  2907 ;;		_turnRight
  2908 ;;		_fullSpeedAhead
  2909 ;;		_reverseOneSquare
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text8
  2914   001A42                     __ptext8:
  2915                           	callstack 0
  2916   001A42                     _setMotorPWM:
  2917                           	callstack 23
  2918   001A42                     
  2919                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2920   001A42  5019               	movf	setMotorPWM@m^0,w,c
  2921   001A44  6ED9               	movwf	fsr2l,c
  2922   001A46  6ADA               	clrf	fsr2h,c
  2923   001A48  0E02               	movlw	2
  2924   001A4A  26D9               	addwf	fsr2l,f,c
  2925   001A4C  50DF               	movf	indf2,w,c
  2926   001A4E  B4D8               	btfsc	status,2,c
  2927   001A50  EF2C  F00D         	goto	u891
  2928   001A54  EF2E  F00D         	goto	u890
  2929   001A58                     u891:
  2930   001A58  EF5E  F00D         	goto	l2107
  2931   001A5C                     u890:
  2932   001A5C                     
  2933                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2934   001A5C  5019               	movf	setMotorPWM@m^0,w,c
  2935   001A5E  6ED9               	movwf	fsr2l,c
  2936   001A60  6ADA               	clrf	fsr2h,c
  2937   001A62  50DF               	movf	indf2,w,c
  2938   001A64  6E1A               	movwf	??_setMotorPWM^0,c
  2939   001A66  501A               	movf	??_setMotorPWM^0,w,c
  2940   001A68  6E0C               	movwf	___wmul@multiplier^0,c
  2941   001A6A  6A0D               	clrf	(___wmul@multiplier+1)^0,c
  2942   001A6C  5019               	movf	setMotorPWM@m^0,w,c
  2943   001A6E  6ED9               	movwf	fsr2l,c
  2944   001A70  6ADA               	clrf	fsr2h,c
  2945   001A72  0E03               	movlw	3
  2946   001A74  26D9               	addwf	fsr2l,f,c
  2947   001A76  CFDE F00E          	movff	postinc2,___wmul@multiplicand
  2948   001A7A  CFDD F00F          	movff	postdec2,___wmul@multiplicand+1
  2949   001A7E  EC73  F012         	call	___wmul	;wreg free
  2950   001A82  C00C  F012         	movff	?___wmul,___lwdiv@dividend
  2951   001A86  C00D  F013         	movff	?___wmul+1,___lwdiv@dividend+1
  2952   001A8A  0E00               	movlw	0
  2953   001A8C  6E15               	movwf	(___lwdiv@divisor+1)^0,c
  2954   001A8E  0E64               	movlw	100
  2955   001A90  6E14               	movwf	___lwdiv@divisor^0,c
  2956   001A92  ECF6  F010         	call	___lwdiv	;wreg free
  2957   001A96  5019               	movf	setMotorPWM@m^0,w,c
  2958   001A98  6ED9               	movwf	fsr2l,c
  2959   001A9A  6ADA               	clrf	fsr2h,c
  2960   001A9C  0E03               	movlw	3
  2961   001A9E  26D9               	addwf	fsr2l,f,c
  2962   001AA0  50DF               	movf	indf2,w,c
  2963   001AA2  6E1B               	movwf	(??_setMotorPWM+1)^0,c
  2964   001AA4  5012               	movf	?___lwdiv^0,w,c
  2965   001AA6  5C1B               	subwf	(??_setMotorPWM+1)^0,w,c
  2966   001AA8  6E1C               	movwf	setMotorPWM@posDuty^0,c
  2967   001AAA                     
  2968                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2969   001AAA  5019               	movf	setMotorPWM@m^0,w,c
  2970   001AAC  6ED9               	movwf	fsr2l,c
  2971   001AAE  6ADA               	clrf	fsr2h,c
  2972   001AB0  0E03               	movlw	3
  2973   001AB2  26D9               	addwf	fsr2l,f,c
  2974   001AB4  50DF               	movf	indf2,w,c
  2975   001AB6  6E1D               	movwf	setMotorPWM@negDuty^0,c
  2976                           
  2977                           ;dc_motor.c: 72:     }
  2978   001AB8  EF7F  F00D         	goto	l2111
  2979   001ABC                     l2107:
  2980                           
  2981                           ;dc_motor.c: 74:         posDuty=0;
  2982   001ABC  0E00               	movlw	0
  2983   001ABE  6E1C               	movwf	setMotorPWM@posDuty^0,c
  2984   001AC0                     
  2985                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2986   001AC0  5019               	movf	setMotorPWM@m^0,w,c
  2987   001AC2  6ED9               	movwf	fsr2l,c
  2988   001AC4  6ADA               	clrf	fsr2h,c
  2989   001AC6  50DF               	movf	indf2,w,c
  2990   001AC8  6E1A               	movwf	??_setMotorPWM^0,c
  2991   001ACA  501A               	movf	??_setMotorPWM^0,w,c
  2992   001ACC  6E0C               	movwf	___wmul@multiplier^0,c
  2993   001ACE  6A0D               	clrf	(___wmul@multiplier+1)^0,c
  2994   001AD0  5019               	movf	setMotorPWM@m^0,w,c
  2995   001AD2  6ED9               	movwf	fsr2l,c
  2996   001AD4  6ADA               	clrf	fsr2h,c
  2997   001AD6  0E03               	movlw	3
  2998   001AD8  26D9               	addwf	fsr2l,f,c
  2999   001ADA  CFDE F00E          	movff	postinc2,___wmul@multiplicand
  3000   001ADE  CFDD F00F          	movff	postdec2,___wmul@multiplicand+1
  3001   001AE2  EC73  F012         	call	___wmul	;wreg free
  3002   001AE6  C00C  F012         	movff	?___wmul,___lwdiv@dividend
  3003   001AEA  C00D  F013         	movff	?___wmul+1,___lwdiv@dividend+1
  3004   001AEE  0E00               	movlw	0
  3005   001AF0  6E15               	movwf	(___lwdiv@divisor+1)^0,c
  3006   001AF2  0E64               	movlw	100
  3007   001AF4  6E14               	movwf	___lwdiv@divisor^0,c
  3008   001AF6  ECF6  F010         	call	___lwdiv	;wreg free
  3009   001AFA  5012               	movf	?___lwdiv^0,w,c
  3010   001AFC  6E1D               	movwf	setMotorPWM@negDuty^0,c
  3011   001AFE                     l2111:
  3012                           
  3013                           ;dc_motor.c: 78:     if (m->direction) {
  3014   001AFE  5019               	movf	setMotorPWM@m^0,w,c
  3015   001B00  6ED9               	movwf	fsr2l,c
  3016   001B02  6ADA               	clrf	fsr2h,c
  3017   001B04  0E01               	movlw	1
  3018   001B06  26D9               	addwf	fsr2l,f,c
  3019   001B08  50DF               	movf	indf2,w,c
  3020   001B0A  B4D8               	btfsc	status,2,c
  3021   001B0C  EF8A  F00D         	goto	u901
  3022   001B10  EF8C  F00D         	goto	u900
  3023   001B14                     u901:
  3024   001B14  EFAC  F00D         	goto	l2115
  3025   001B18                     u900:
  3026   001B18                     
  3027                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  3028   001B18  5019               	movf	setMotorPWM@m^0,w,c
  3029   001B1A  6ED9               	movwf	fsr2l,c
  3030   001B1C  6ADA               	clrf	fsr2h,c
  3031   001B1E  0E05               	movlw	5
  3032   001B20  26D9               	addwf	fsr2l,f,c
  3033   001B22  CFDE F01A          	movff	postinc2,??_setMotorPWM
  3034   001B26  CFDD F01B          	movff	postdec2,??_setMotorPWM+1
  3035   001B2A  C01A  FFD9         	movff	??_setMotorPWM,fsr2l
  3036   001B2E  C01B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3037   001B32  C01C  FFDF         	movff	setMotorPWM@posDuty,indf2
  3038                           
  3039                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  3040   001B36  5019               	movf	setMotorPWM@m^0,w,c
  3041   001B38  6ED9               	movwf	fsr2l,c
  3042   001B3A  6ADA               	clrf	fsr2h,c
  3043   001B3C  0E07               	movlw	7
  3044   001B3E  26D9               	addwf	fsr2l,f,c
  3045   001B40  CFDE F01A          	movff	postinc2,??_setMotorPWM
  3046   001B44  CFDD F01B          	movff	postdec2,??_setMotorPWM+1
  3047   001B48  C01A  FFD9         	movff	??_setMotorPWM,fsr2l
  3048   001B4C  C01B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3049   001B50  C01D  FFDF         	movff	setMotorPWM@negDuty,indf2
  3050                           
  3051                           ;dc_motor.c: 81:     } else {
  3052   001B54  EFCA  F00D         	goto	l432
  3053   001B58                     l2115:
  3054                           
  3055                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  3056   001B58  5019               	movf	setMotorPWM@m^0,w,c
  3057   001B5A  6ED9               	movwf	fsr2l,c
  3058   001B5C  6ADA               	clrf	fsr2h,c
  3059   001B5E  0E05               	movlw	5
  3060   001B60  26D9               	addwf	fsr2l,f,c
  3061   001B62  CFDE F01A          	movff	postinc2,??_setMotorPWM
  3062   001B66  CFDD F01B          	movff	postdec2,??_setMotorPWM+1
  3063   001B6A  C01A  FFD9         	movff	??_setMotorPWM,fsr2l
  3064   001B6E  C01B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3065   001B72  C01D  FFDF         	movff	setMotorPWM@negDuty,indf2
  3066                           
  3067                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  3068   001B76  5019               	movf	setMotorPWM@m^0,w,c
  3069   001B78  6ED9               	movwf	fsr2l,c
  3070   001B7A  6ADA               	clrf	fsr2h,c
  3071   001B7C  0E07               	movlw	7
  3072   001B7E  26D9               	addwf	fsr2l,f,c
  3073   001B80  CFDE F01A          	movff	postinc2,??_setMotorPWM
  3074   001B84  CFDD F01B          	movff	postdec2,??_setMotorPWM+1
  3075   001B88  C01A  FFD9         	movff	??_setMotorPWM,fsr2l
  3076   001B8C  C01B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3077   001B90  C01C  FFDF         	movff	setMotorPWM@posDuty,indf2
  3078   001B94                     l432:
  3079   001B94  0012               	return		;funcret
  3080   001B96                     __end_of_setMotorPWM:
  3081                           	callstack 0
  3082                           
  3083 ;; *************** function ___wmul *****************
  3084 ;; Defined at:
  3085 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  multiplier      2   11[COMRAM] unsigned int 
  3088 ;;  multiplicand    2   13[COMRAM] unsigned int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  product         2   15[COMRAM] unsigned int 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  2   11[COMRAM] unsigned int 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, prodl, prodh
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3104 ;;Total ram usage:        6 bytes
  3105 ;; Hardware stack levels used: 1
  3106 ;; Hardware stack levels required when called: 5
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_setMotorPWM
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text9
  3115   0024E6                     __ptext9:
  3116                           	callstack 0
  3117   0024E6                     ___wmul:
  3118                           	callstack 23
  3119   0024E6  500C               	movf	___wmul@multiplier^0,w,c
  3120   0024E8  020E               	mulwf	___wmul@multiplicand^0,c
  3121   0024EA  CFF3 F010          	movff	prodl,___wmul@product
  3122   0024EE  CFF4 F011          	movff	prodh,___wmul@product+1
  3123   0024F2  500C               	movf	___wmul@multiplier^0,w,c
  3124   0024F4  020F               	mulwf	(___wmul@multiplicand+1)^0,c
  3125   0024F6  50F3               	movf	243,w,c
  3126   0024F8  2611               	addwf	(___wmul@product+1)^0,f,c
  3127   0024FA  500D               	movf	(___wmul@multiplier+1)^0,w,c
  3128   0024FC  020E               	mulwf	___wmul@multiplicand^0,c
  3129   0024FE  50F3               	movf	243,w,c
  3130   002500  2611               	addwf	(___wmul@product+1)^0,f,c
  3131   002502  C010  F00C         	movff	___wmul@product,?___wmul
  3132   002506  C011  F00D         	movff	___wmul@product+1,?___wmul+1
  3133   00250A  0012               	return		;funcret
  3134   00250C                     __end_of___wmul:
  3135                           	callstack 0
  3136                           
  3137 ;; *************** function ___lwdiv *****************
  3138 ;; Defined at:
  3139 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  dividend        2   17[COMRAM] unsigned int 
  3142 ;;  divisor         2   19[COMRAM] unsigned int 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  quotient        2   21[COMRAM] unsigned int 
  3145 ;;  counter         1   23[COMRAM] unsigned char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  2   17[COMRAM] unsigned int 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3156 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3158 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3159 ;;Total ram usage:        7 bytes
  3160 ;; Hardware stack levels used: 1
  3161 ;; Hardware stack levels required when called: 5
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_setMotorPWM
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text10
  3170   0021EC                     __ptext10:
  3171                           	callstack 0
  3172   0021EC                     ___lwdiv:
  3173                           	callstack 23
  3174   0021EC  0E00               	movlw	0
  3175   0021EE  6E17               	movwf	(___lwdiv@quotient+1)^0,c
  3176   0021F0  0E00               	movlw	0
  3177   0021F2  6E16               	movwf	___lwdiv@quotient^0,c
  3178   0021F4  5014               	movf	___lwdiv@divisor^0,w,c
  3179   0021F6  1015               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3180   0021F8  B4D8               	btfsc	status,2,c
  3181   0021FA  EF01  F011         	goto	u841
  3182   0021FE  EF03  F011         	goto	u840
  3183   002202                     u841:
  3184   002202  EF2B  F011         	goto	l1027
  3185   002206                     u840:
  3186   002206  0E01               	movlw	1
  3187   002208  6E18               	movwf	___lwdiv@counter^0,c
  3188   00220A  EF0B  F011         	goto	l2081
  3189   00220E                     l2079:
  3190   00220E  90D8               	bcf	status,0,c
  3191   002210  3614               	rlcf	___lwdiv@divisor^0,f,c
  3192   002212  3615               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3193   002214  2A18               	incf	___lwdiv@counter^0,f,c
  3194   002216                     l2081:
  3195   002216  AE15               	btfss	(___lwdiv@divisor+1)^0,7,c
  3196   002218  EF10  F011         	goto	u851
  3197   00221C  EF12  F011         	goto	u850
  3198   002220                     u851:
  3199   002220  EF07  F011         	goto	l2079
  3200   002224                     u850:
  3201   002224                     l2083:
  3202   002224  90D8               	bcf	status,0,c
  3203   002226  3616               	rlcf	___lwdiv@quotient^0,f,c
  3204   002228  3617               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3205   00222A  5014               	movf	___lwdiv@divisor^0,w,c
  3206   00222C  5C12               	subwf	___lwdiv@dividend^0,w,c
  3207   00222E  5015               	movf	(___lwdiv@divisor+1)^0,w,c
  3208   002230  5813               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3209   002232  A0D8               	btfss	status,0,c
  3210   002234  EF1E  F011         	goto	u861
  3211   002238  EF20  F011         	goto	u860
  3212   00223C                     u861:
  3213   00223C  EF25  F011         	goto	l2091
  3214   002240                     u860:
  3215   002240  5014               	movf	___lwdiv@divisor^0,w,c
  3216   002242  5E12               	subwf	___lwdiv@dividend^0,f,c
  3217   002244  5015               	movf	(___lwdiv@divisor+1)^0,w,c
  3218   002246  5A13               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3219   002248  8016               	bsf	___lwdiv@quotient^0,0,c
  3220   00224A                     l2091:
  3221   00224A  90D8               	bcf	status,0,c
  3222   00224C  3215               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3223   00224E  3214               	rrcf	___lwdiv@divisor^0,f,c
  3224   002250  2E18               	decfsz	___lwdiv@counter^0,f,c
  3225   002252  EF12  F011         	goto	l2083
  3226   002256                     l1027:
  3227   002256  C016  F012         	movff	___lwdiv@quotient,?___lwdiv
  3228   00225A  C017  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3229   00225E  0012               	return		;funcret
  3230   002260                     __end_of___lwdiv:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _initUSART4 *****************
  3234 ;; Defined at:
  3235 ;;		line 4 in file "serial.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 5
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_main
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text11
  3264   0025BC                     __ptext11:
  3265                           	callstack 0
  3266   0025BC                     _initUSART4:
  3267                           	callstack 25
  3268   0025BC                     
  3269                           ;serial.c: 7:     RC0PPS = 0x12;
  3270   0025BC  0E12               	movlw	18
  3271   0025BE  010E               	movlb	14	; () banked
  3272   0025C0  6F62               	movwf	98,b	;volatile
  3273                           
  3274                           ;serial.c: 8:     RX4PPS = 0x11;
  3275   0025C2  0E11               	movlw	17
  3276   0025C4  6F15               	movwf	21,b	;volatile
  3277   0025C6                     
  3278                           ; BSR set to: 14
  3279                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  3280   0025C6  97E9               	bcf	233,3,b	;volatile
  3281   0025C8                     
  3282                           ; BSR set to: 14
  3283                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  3284   0025C8  95E8               	bcf	232,2,b	;volatile
  3285                           
  3286                           ;serial.c: 13:     SP4BRGL = 51;
  3287   0025CA  0E33               	movlw	51
  3288   0025CC  6FE5               	movwf	229,b	;volatile
  3289                           
  3290                           ;serial.c: 14:     SP4BRGH = 0;
  3291   0025CE  0E00               	movlw	0
  3292   0025D0  6FE6               	movwf	230,b	;volatile
  3293   0025D2                     
  3294                           ; BSR set to: 14
  3295                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  3296   0025D2  89E7               	bsf	231,4,b	;volatile
  3297   0025D4                     
  3298                           ; BSR set to: 14
  3299                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  3300   0025D4  8BE8               	bsf	232,5,b	;volatile
  3301   0025D6                     
  3302                           ; BSR set to: 14
  3303                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  3304   0025D6  8FE7               	bsf	231,7,b	;volatile
  3305   0025D8                     
  3306                           ; BSR set to: 14
  3307   0025D8  0012               	return		;funcret
  3308   0025DA                     __end_of_initUSART4:
  3309                           	callstack 0
  3310                           
  3311 ;; *************** function _initDCmotorsPWM *****************
  3312 ;; Defined at:
  3313 ;;		line 5 in file "dc_motor.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  PWMperiod       2   11[COMRAM] unsigned int 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;Total ram usage:        2 bytes
  3332 ;; Hardware stack levels used: 1
  3333 ;; Hardware stack levels required when called: 5
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_main
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text12
  3342   002068                     __ptext12:
  3343                           	callstack 0
  3344   002068                     _initDCmotorsPWM:
  3345                           	callstack 25
  3346   002068                     
  3347                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  3348   002068  947D               	bcf	125,2,c	;volatile
  3349                           
  3350                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  3351   00206A  9485               	bcf	133,2,c	;volatile
  3352                           
  3353                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  3354   00206C  987D               	bcf	125,4,c	;volatile
  3355                           
  3356                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  3357   00206E  9885               	bcf	133,4,c	;volatile
  3358                           
  3359                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  3360   002070  9E7B               	bcf	123,7,c	;volatile
  3361                           
  3362                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  3363   002072  9E83               	bcf	131,7,c	;volatile
  3364                           
  3365                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  3366   002074  9C7F               	bcf	127,6,c	;volatile
  3367                           
  3368                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  3369   002076  9C87               	bcf	135,6,c	;volatile
  3370   002078                     
  3371                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3372   002078  0E05               	movlw	5
  3373   00207A  010E               	movlb	14	; () banked
  3374   00207C  6F74               	movwf	116,b	;volatile
  3375                           
  3376                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3377   00207E  0E06               	movlw	6
  3378   002080  6F76               	movwf	118,b	;volatile
  3379                           
  3380                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3381   002082  0E07               	movlw	7
  3382   002084  6F69               	movwf	105,b	;volatile
  3383                           
  3384                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3385   002086  0E08               	movlw	8
  3386   002088  6F88               	movwf	136,b	;volatile
  3387                           
  3388                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  3389   00208A  50BD               	movf	189,w,c	;volatile
  3390   00208C  0B8F               	andlw	-113
  3391   00208E  0930               	iorlw	48
  3392   002090  6EBD               	movwf	189,c	;volatile
  3393                           
  3394                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3395   002092  0EE0               	movlw	-32
  3396   002094  16BE               	andwf	190,f,c	;volatile
  3397                           
  3398                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3399   002096  50BF               	movf	191,w,c	;volatile
  3400   002098  0BF0               	andlw	-16
  3401   00209A  0901               	iorlw	1
  3402   00209C  6EBF               	movwf	191,c	;volatile
  3403   00209E                     
  3404                           ; BSR set to: 14
  3405                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3406   00209E  C00C  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3407   0020A2                     
  3408                           ; BSR set to: 14
  3409                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3410   0020A2  8EBD               	bsf	189,7,c	;volatile
  3411                           
  3412                           ;dc_motor.c: 35:     CCPR1H=0;
  3413   0020A4  0E00               	movlw	0
  3414   0020A6  6EAA               	movwf	170,c	;volatile
  3415                           
  3416                           ;dc_motor.c: 36:     CCPR2H=0;
  3417   0020A8  0E00               	movlw	0
  3418   0020AA  6EA6               	movwf	166,c	;volatile
  3419                           
  3420                           ;dc_motor.c: 37:     CCPR3H=0;
  3421   0020AC  0E00               	movlw	0
  3422   0020AE  010F               	movlb	15	; () banked
  3423   0020B0  6F25               	movwf	37,b	;volatile
  3424                           
  3425                           ;dc_motor.c: 38:     CCPR4H=0;
  3426   0020B2  0E00               	movlw	0
  3427   0020B4  6F21               	movwf	33,b	;volatile
  3428                           
  3429                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3430   0020B6  0EFC               	movlw	-4
  3431   0020B8  16AD               	andwf	173,f,c	;volatile
  3432                           
  3433                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3434   0020BA  0EF3               	movlw	-13
  3435   0020BC  16AD               	andwf	173,f,c	;volatile
  3436                           
  3437                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3438   0020BE  0ECF               	movlw	-49
  3439   0020C0  16AD               	andwf	173,f,c	;volatile
  3440                           
  3441                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3442   0020C2  0E3F               	movlw	-193
  3443   0020C4  16AD               	andwf	173,f,c	;volatile
  3444   0020C6                     
  3445                           ; BSR set to: 15
  3446                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3447   0020C6  88AB               	bsf	171,4,c	;volatile
  3448                           
  3449                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3450   0020C8  50AB               	movf	171,w,c	;volatile
  3451   0020CA  0BF0               	andlw	-16
  3452   0020CC  090C               	iorlw	12
  3453   0020CE  6EAB               	movwf	171,c	;volatile
  3454   0020D0                     
  3455                           ; BSR set to: 15
  3456                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3457   0020D0  8EAB               	bsf	171,7,c	;volatile
  3458   0020D2                     
  3459                           ; BSR set to: 15
  3460                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3461   0020D2  88A7               	bsf	167,4,c	;volatile
  3462                           
  3463                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3464   0020D4  50A7               	movf	167,w,c	;volatile
  3465   0020D6  0BF0               	andlw	-16
  3466   0020D8  090C               	iorlw	12
  3467   0020DA  6EA7               	movwf	167,c	;volatile
  3468   0020DC                     
  3469                           ; BSR set to: 15
  3470                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3471   0020DC  8EA7               	bsf	167,7,c	;volatile
  3472   0020DE                     
  3473                           ; BSR set to: 15
  3474                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3475   0020DE  8926               	bsf	38,4,b	;volatile
  3476                           
  3477                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3478   0020E0  5126               	movf	38,w,b	;volatile
  3479   0020E2  0BF0               	andlw	-16
  3480   0020E4  090C               	iorlw	12
  3481   0020E6  6F26               	movwf	38,b	;volatile
  3482   0020E8                     
  3483                           ; BSR set to: 15
  3484                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3485   0020E8  8F26               	bsf	38,7,b	;volatile
  3486   0020EA                     
  3487                           ; BSR set to: 15
  3488                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3489   0020EA  8922               	bsf	34,4,b	;volatile
  3490                           
  3491                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3492   0020EC  5122               	movf	34,w,b	;volatile
  3493   0020EE  0BF0               	andlw	-16
  3494   0020F0  090C               	iorlw	12
  3495   0020F2  6F22               	movwf	34,b	;volatile
  3496   0020F4                     
  3497                           ; BSR set to: 15
  3498                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3499   0020F4  8F22               	bsf	34,7,b	;volatile
  3500   0020F6                     
  3501                           ; BSR set to: 15
  3502   0020F6  0012               	return		;funcret
  3503   0020F8                     __end_of_initDCmotorsPWM:
  3504                           	callstack 0
  3505                           
  3506 ;; *************** function _color_read *****************
  3507 ;; Defined at:
  3508 ;;		line 72 in file "color.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  RGBC            1   15[COMRAM] PTR struct RGBC_val
  3511 ;;		 -> main@RGBC(8), 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3523 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3525 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3526 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3527 ;;Total ram usage:        8 bytes
  3528 ;; Hardware stack levels used: 1
  3529 ;; Hardware stack levels required when called: 7
  3530 ;; This function calls:
  3531 ;;		_I2C_2_Master_Read
  3532 ;;		_I2C_2_Master_RepStart
  3533 ;;		_I2C_2_Master_Start
  3534 ;;		_I2C_2_Master_Stop
  3535 ;;		_I2C_2_Master_Write
  3536 ;; This function is called by:
  3537 ;;		_main
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text13
  3542   00117C                     __ptext13:
  3543                           	callstack 0
  3544   00117C                     _color_read:
  3545                           	callstack 23
  3546   00117C                     
  3547                           ;color.c: 72: void color_read(RGBC_val *RGBC);color.c: 73: {;color.c: 74:  I2C_2_Master_
      +                          Start();
  3548   00117C  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  3549                           
  3550                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  3551   001180  0E52               	movlw	82
  3552   001182  EC1C  F013         	call	_I2C_2_Master_Write
  3553                           
  3554                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x16);
  3555   001186  0EB6               	movlw	182
  3556   001188  EC1C  F013         	call	_I2C_2_Master_Write
  3557                           
  3558                           ;color.c: 77:  I2C_2_Master_RepStart();
  3559   00118C  EC28  F013         	call	_I2C_2_Master_RepStart	;wreg free
  3560                           
  3561                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  3562   001190  0E53               	movlw	83
  3563   001192  EC1C  F013         	call	_I2C_2_Master_Write
  3564   001196                     
  3565                           ;color.c: 79:  RGBC->R=I2C_2_Master_Read(1);
  3566   001196  0E01               	movlw	1
  3567   001198  ECDE  F011         	call	_I2C_2_Master_Read
  3568   00119C  6E11               	movwf	??_color_read^0,c
  3569   00119E  6A12               	clrf	(??_color_read+1)^0,c
  3570   0011A0  5010               	movf	color_read@RGBC^0,w,c
  3571   0011A2  6ED9               	movwf	fsr2l,c
  3572   0011A4  6ADA               	clrf	fsr2h,c
  3573   0011A6  C011  FFDE         	movff	??_color_read,postinc2
  3574   0011AA  C012  FFDD         	movff	??_color_read+1,postdec2
  3575   0011AE                     
  3576                           ;color.c: 80:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  3577   0011AE  5010               	movf	color_read@RGBC^0,w,c
  3578   0011B0  6ED9               	movwf	fsr2l,c
  3579   0011B2  6ADA               	clrf	fsr2h,c
  3580   0011B4  CFDE F011          	movff	postinc2,??_color_read
  3581   0011B8  CFDD F012          	movff	postdec2,??_color_read+1
  3582   0011BC  0E00               	movlw	0
  3583   0011BE  ECDE  F011         	call	_I2C_2_Master_Read
  3584   0011C2  6E13               	movwf	(??_color_read+2)^0,c
  3585   0011C4  5013               	movf	(??_color_read+2)^0,w,c
  3586   0011C6  6E15               	movwf	(??_color_read+4)^0,c
  3587   0011C8  6A14               	clrf	(??_color_read+3)^0,c
  3588   0011CA  5011               	movf	??_color_read^0,w,c
  3589   0011CC  1014               	iorwf	(??_color_read+3)^0,w,c
  3590   0011CE  6E16               	movwf	(??_color_read+5)^0,c
  3591   0011D0  5012               	movf	(??_color_read+1)^0,w,c
  3592   0011D2  1015               	iorwf	(??_color_read+4)^0,w,c
  3593   0011D4  6E17               	movwf	(??_color_read+6)^0,c
  3594   0011D6  5010               	movf	color_read@RGBC^0,w,c
  3595   0011D8  6ED9               	movwf	fsr2l,c
  3596   0011DA  6ADA               	clrf	fsr2h,c
  3597   0011DC  C016  FFDE         	movff	??_color_read+5,postinc2
  3598   0011E0  C017  FFDD         	movff	??_color_read+6,postdec2
  3599                           
  3600                           ;color.c: 81:  I2C_2_Master_Stop();
  3601   0011E4  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  3602                           
  3603                           ;color.c: 83:     I2C_2_Master_Start();
  3604   0011E8  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  3605                           
  3606                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x00);
  3607   0011EC  0E52               	movlw	82
  3608   0011EE  EC1C  F013         	call	_I2C_2_Master_Write
  3609                           
  3610                           ;color.c: 85:  I2C_2_Master_Write(0xA0 | 0x18);
  3611   0011F2  0EB8               	movlw	184
  3612   0011F4  EC1C  F013         	call	_I2C_2_Master_Write
  3613                           
  3614                           ;color.c: 86:  I2C_2_Master_RepStart();
  3615   0011F8  EC28  F013         	call	_I2C_2_Master_RepStart	;wreg free
  3616                           
  3617                           ;color.c: 87:  I2C_2_Master_Write(0x52 | 0x01);
  3618   0011FC  0E53               	movlw	83
  3619   0011FE  EC1C  F013         	call	_I2C_2_Master_Write
  3620   001202                     
  3621                           ;color.c: 88:  RGBC->G=I2C_2_Master_Read(1);
  3622   001202  0E01               	movlw	1
  3623   001204  ECDE  F011         	call	_I2C_2_Master_Read
  3624   001208  6E11               	movwf	??_color_read^0,c
  3625   00120A  6A12               	clrf	(??_color_read+1)^0,c
  3626   00120C  5010               	movf	color_read@RGBC^0,w,c
  3627   00120E  6ED9               	movwf	fsr2l,c
  3628   001210  6ADA               	clrf	fsr2h,c
  3629   001212  0E02               	movlw	2
  3630   001214  26D9               	addwf	fsr2l,f,c
  3631   001216  C011  FFDE         	movff	??_color_read,postinc2
  3632   00121A  C012  FFDD         	movff	??_color_read+1,postdec2
  3633   00121E                     
  3634                           ;color.c: 89:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  3635   00121E  5010               	movf	color_read@RGBC^0,w,c
  3636   001220  6ED9               	movwf	fsr2l,c
  3637   001222  6ADA               	clrf	fsr2h,c
  3638   001224  0E02               	movlw	2
  3639   001226  26D9               	addwf	fsr2l,f,c
  3640   001228  CFDE F011          	movff	postinc2,??_color_read
  3641   00122C  CFDD F012          	movff	postdec2,??_color_read+1
  3642   001230  0E00               	movlw	0
  3643   001232  ECDE  F011         	call	_I2C_2_Master_Read
  3644   001236  6E13               	movwf	(??_color_read+2)^0,c
  3645   001238  5013               	movf	(??_color_read+2)^0,w,c
  3646   00123A  6E15               	movwf	(??_color_read+4)^0,c
  3647   00123C  6A14               	clrf	(??_color_read+3)^0,c
  3648   00123E  5011               	movf	??_color_read^0,w,c
  3649   001240  1014               	iorwf	(??_color_read+3)^0,w,c
  3650   001242  6E16               	movwf	(??_color_read+5)^0,c
  3651   001244  5012               	movf	(??_color_read+1)^0,w,c
  3652   001246  1015               	iorwf	(??_color_read+4)^0,w,c
  3653   001248  6E17               	movwf	(??_color_read+6)^0,c
  3654   00124A  5010               	movf	color_read@RGBC^0,w,c
  3655   00124C  6ED9               	movwf	fsr2l,c
  3656   00124E  6ADA               	clrf	fsr2h,c
  3657   001250  0E02               	movlw	2
  3658   001252  26D9               	addwf	fsr2l,f,c
  3659   001254  C016  FFDE         	movff	??_color_read+5,postinc2
  3660   001258  C017  FFDD         	movff	??_color_read+6,postdec2
  3661                           
  3662                           ;color.c: 90:  I2C_2_Master_Stop();
  3663   00125C  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  3664                           
  3665                           ;color.c: 92:     I2C_2_Master_Start();
  3666   001260  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  3667                           
  3668                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  3669   001264  0E52               	movlw	82
  3670   001266  EC1C  F013         	call	_I2C_2_Master_Write
  3671                           
  3672                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  3673   00126A  0EBA               	movlw	186
  3674   00126C  EC1C  F013         	call	_I2C_2_Master_Write
  3675                           
  3676                           ;color.c: 95:  I2C_2_Master_RepStart();
  3677   001270  EC28  F013         	call	_I2C_2_Master_RepStart	;wreg free
  3678                           
  3679                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  3680   001274  0E53               	movlw	83
  3681   001276  EC1C  F013         	call	_I2C_2_Master_Write
  3682   00127A                     
  3683                           ;color.c: 97:  RGBC->B=I2C_2_Master_Read(1);
  3684   00127A  0E01               	movlw	1
  3685   00127C  ECDE  F011         	call	_I2C_2_Master_Read
  3686   001280  6E11               	movwf	??_color_read^0,c
  3687   001282  6A12               	clrf	(??_color_read+1)^0,c
  3688   001284  5010               	movf	color_read@RGBC^0,w,c
  3689   001286  6ED9               	movwf	fsr2l,c
  3690   001288  6ADA               	clrf	fsr2h,c
  3691   00128A  0E04               	movlw	4
  3692   00128C  26D9               	addwf	fsr2l,f,c
  3693   00128E  C011  FFDE         	movff	??_color_read,postinc2
  3694   001292  C012  FFDD         	movff	??_color_read+1,postdec2
  3695   001296                     
  3696                           ;color.c: 98:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  3697   001296  5010               	movf	color_read@RGBC^0,w,c
  3698   001298  6ED9               	movwf	fsr2l,c
  3699   00129A  6ADA               	clrf	fsr2h,c
  3700   00129C  0E04               	movlw	4
  3701   00129E  26D9               	addwf	fsr2l,f,c
  3702   0012A0  CFDE F011          	movff	postinc2,??_color_read
  3703   0012A4  CFDD F012          	movff	postdec2,??_color_read+1
  3704   0012A8  0E00               	movlw	0
  3705   0012AA  ECDE  F011         	call	_I2C_2_Master_Read
  3706   0012AE  6E13               	movwf	(??_color_read+2)^0,c
  3707   0012B0  5013               	movf	(??_color_read+2)^0,w,c
  3708   0012B2  6E15               	movwf	(??_color_read+4)^0,c
  3709   0012B4  6A14               	clrf	(??_color_read+3)^0,c
  3710   0012B6  5011               	movf	??_color_read^0,w,c
  3711   0012B8  1014               	iorwf	(??_color_read+3)^0,w,c
  3712   0012BA  6E16               	movwf	(??_color_read+5)^0,c
  3713   0012BC  5012               	movf	(??_color_read+1)^0,w,c
  3714   0012BE  1015               	iorwf	(??_color_read+4)^0,w,c
  3715   0012C0  6E17               	movwf	(??_color_read+6)^0,c
  3716   0012C2  5010               	movf	color_read@RGBC^0,w,c
  3717   0012C4  6ED9               	movwf	fsr2l,c
  3718   0012C6  6ADA               	clrf	fsr2h,c
  3719   0012C8  0E04               	movlw	4
  3720   0012CA  26D9               	addwf	fsr2l,f,c
  3721   0012CC  C016  FFDE         	movff	??_color_read+5,postinc2
  3722   0012D0  C017  FFDD         	movff	??_color_read+6,postdec2
  3723                           
  3724                           ;color.c: 99:  I2C_2_Master_Stop();
  3725   0012D4  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  3726                           
  3727                           ;color.c: 101:     I2C_2_Master_Start();
  3728   0012D8  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  3729                           
  3730                           ;color.c: 102:  I2C_2_Master_Write(0x52 | 0x00);
  3731   0012DC  0E52               	movlw	82
  3732   0012DE  EC1C  F013         	call	_I2C_2_Master_Write
  3733                           
  3734                           ;color.c: 103:  I2C_2_Master_Write(0xA0 | 0x14);
  3735   0012E2  0EB4               	movlw	180
  3736   0012E4  EC1C  F013         	call	_I2C_2_Master_Write
  3737                           
  3738                           ;color.c: 104:  I2C_2_Master_RepStart();
  3739   0012E8  EC28  F013         	call	_I2C_2_Master_RepStart	;wreg free
  3740                           
  3741                           ;color.c: 105:  I2C_2_Master_Write(0x52 | 0x01);
  3742   0012EC  0E53               	movlw	83
  3743   0012EE  EC1C  F013         	call	_I2C_2_Master_Write
  3744   0012F2                     
  3745                           ;color.c: 106:  RGBC->C=I2C_2_Master_Read(1);
  3746   0012F2  0E01               	movlw	1
  3747   0012F4  ECDE  F011         	call	_I2C_2_Master_Read
  3748   0012F8  6E11               	movwf	??_color_read^0,c
  3749   0012FA  6A12               	clrf	(??_color_read+1)^0,c
  3750   0012FC  5010               	movf	color_read@RGBC^0,w,c
  3751   0012FE  6ED9               	movwf	fsr2l,c
  3752   001300  6ADA               	clrf	fsr2h,c
  3753   001302  0E06               	movlw	6
  3754   001304  26D9               	addwf	fsr2l,f,c
  3755   001306  C011  FFDE         	movff	??_color_read,postinc2
  3756   00130A  C012  FFDD         	movff	??_color_read+1,postdec2
  3757   00130E                     
  3758                           ;color.c: 107:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  3759   00130E  5010               	movf	color_read@RGBC^0,w,c
  3760   001310  6ED9               	movwf	fsr2l,c
  3761   001312  6ADA               	clrf	fsr2h,c
  3762   001314  0E06               	movlw	6
  3763   001316  26D9               	addwf	fsr2l,f,c
  3764   001318  CFDE F011          	movff	postinc2,??_color_read
  3765   00131C  CFDD F012          	movff	postdec2,??_color_read+1
  3766   001320  0E00               	movlw	0
  3767   001322  ECDE  F011         	call	_I2C_2_Master_Read
  3768   001326  6E13               	movwf	(??_color_read+2)^0,c
  3769   001328  5013               	movf	(??_color_read+2)^0,w,c
  3770   00132A  6E15               	movwf	(??_color_read+4)^0,c
  3771   00132C  6A14               	clrf	(??_color_read+3)^0,c
  3772   00132E  5011               	movf	??_color_read^0,w,c
  3773   001330  1014               	iorwf	(??_color_read+3)^0,w,c
  3774   001332  6E16               	movwf	(??_color_read+5)^0,c
  3775   001334  5012               	movf	(??_color_read+1)^0,w,c
  3776   001336  1015               	iorwf	(??_color_read+4)^0,w,c
  3777   001338  6E17               	movwf	(??_color_read+6)^0,c
  3778   00133A  5010               	movf	color_read@RGBC^0,w,c
  3779   00133C  6ED9               	movwf	fsr2l,c
  3780   00133E  6ADA               	clrf	fsr2h,c
  3781   001340  0E06               	movlw	6
  3782   001342  26D9               	addwf	fsr2l,f,c
  3783   001344  C016  FFDE         	movff	??_color_read+5,postinc2
  3784   001348  C017  FFDD         	movff	??_color_read+6,postdec2
  3785                           
  3786                           ;color.c: 108:  I2C_2_Master_Stop();
  3787   00134C  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  3788   001350  0012               	return		;funcret
  3789   001352                     __end_of_color_read:
  3790                           	callstack 0
  3791                           
  3792 ;; *************** function _I2C_2_Master_RepStart *****************
  3793 ;; Defined at:
  3794 ;;		line 33 in file "i2c.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used: 1
  3814 ;; Hardware stack levels required when called: 6
  3815 ;; This function calls:
  3816 ;;		_I2C_2_Master_Idle
  3817 ;; This function is called by:
  3818 ;;		_color_read
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text14
  3823   002650                     __ptext14:
  3824                           	callstack 0
  3825   002650                     _I2C_2_Master_RepStart:
  3826                           	callstack 23
  3827   002650                     
  3828                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3829   002650  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  3830   002654                     
  3831                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3832   002654  010E               	movlb	14	; () banked
  3833   002656  83DA               	bsf	218,1,b	;volatile
  3834   002658                     
  3835                           ; BSR set to: 14
  3836   002658  0012               	return		;funcret
  3837   00265A                     __end_of_I2C_2_Master_RepStart:
  3838                           	callstack 0
  3839                           
  3840 ;; *************** function _I2C_2_Master_Read *****************
  3841 ;; Defined at:
  3842 ;;		line 51 in file "i2c.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  ack             1    wreg     unsigned char 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  ack             1   13[COMRAM] unsigned char 
  3847 ;;  tmp             1   14[COMRAM] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      unsigned char 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3860 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3861 ;;Total ram usage:        3 bytes
  3862 ;; Hardware stack levels used: 1
  3863 ;; Hardware stack levels required when called: 6
  3864 ;; This function calls:
  3865 ;;		_I2C_2_Master_Idle
  3866 ;; This function is called by:
  3867 ;;		_color_read
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text15
  3872   0023BC                     __ptext15:
  3873                           	callstack 0
  3874   0023BC                     _I2C_2_Master_Read:
  3875                           	callstack 23
  3876                           
  3877                           ; BSR set to: 14
  3878                           ;incstack = 0
  3879                           ;I2C_2_Master_Read@ack stored from wreg
  3880   0023BC  6E0E               	movwf	I2C_2_Master_Read@ack^0,c
  3881   0023BE                     
  3882                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3883   0023BE  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  3884   0023C2                     
  3885                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3886   0023C2  010E               	movlb	14	; () banked
  3887   0023C4  87DA               	bsf	218,3,b	;volatile
  3888                           
  3889                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3890   0023C6  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  3891   0023CA                     
  3892                           ;i2c.c: 57:   tmp = SSP2BUF;
  3893   0023CA  CED5 F00F          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3894                           
  3895                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3896   0023CE  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  3897   0023D2                     
  3898                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3899   0023D2  500E               	movf	I2C_2_Master_Read@ack^0,w,c
  3900   0023D4  B4D8               	btfsc	status,2,c
  3901   0023D6  EFEF  F011         	goto	u931
  3902   0023DA  EFF3  F011         	goto	u930
  3903   0023DE                     u931:
  3904   0023DE  6A0D               	clrf	??_I2C_2_Master_Read^0,c
  3905   0023E0  2A0D               	incf	??_I2C_2_Master_Read^0,f,c
  3906   0023E2  EFF4  F011         	goto	u948
  3907   0023E6                     u930:
  3908   0023E6  6A0D               	clrf	??_I2C_2_Master_Read^0,c
  3909   0023E8                     u948:
  3910   0023E8  3A0D               	swapf	??_I2C_2_Master_Read^0,f,c
  3911   0023EA  460D               	rlncf	??_I2C_2_Master_Read^0,f,c
  3912   0023EC  010E               	movlb	14	; () banked
  3913   0023EE  51DA               	movf	218,w,b	;volatile
  3914   0023F0  180D               	xorwf	??_I2C_2_Master_Read^0,w,c
  3915   0023F2  0BDF               	andlw	-33
  3916   0023F4  180D               	xorwf	??_I2C_2_Master_Read^0,w,c
  3917   0023F6  6FDA               	movwf	218,b	;volatile
  3918   0023F8                     
  3919                           ; BSR set to: 14
  3920                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3921   0023F8  89DA               	bsf	218,4,b	;volatile
  3922   0023FA                     
  3923                           ; BSR set to: 14
  3924                           ;i2c.c: 61:   return tmp;
  3925   0023FA  500F               	movf	I2C_2_Master_Read@tmp^0,w,c
  3926   0023FC                     
  3927                           ; BSR set to: 14
  3928   0023FC  0012               	return		;funcret
  3929   0023FE                     __end_of_I2C_2_Master_Read:
  3930                           	callstack 0
  3931                           
  3932 ;; *************** function _color_normalise *****************
  3933 ;; Defined at:
  3934 ;;		line 112 in file "color.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  RGBC            8   37[COMRAM] struct RGBC_val
  3937 ;;  RGBC_n          1   45[COMRAM] PTR struct RGBC_val
  3938 ;;		 -> main@RGBC_n(8), 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3950 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3953 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3954 ;;Total ram usage:       11 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 6
  3957 ;; This function calls:
  3958 ;;		___aldiv
  3959 ;;		___lmul
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text16
  3966   001B96                     __ptext16:
  3967                           	callstack 0
  3968   001B96                     _color_normalise:
  3969                           	callstack 24
  3970   001B96                     
  3971                           ;color.c: 130:     RGBC_n->C = RGBC.C;
  3972   001B96  502E               	movf	color_normalise@RGBC_n^0,w,c
  3973   001B98  6ED9               	movwf	fsr2l,c
  3974   001B9A  6ADA               	clrf	fsr2h,c
  3975   001B9C  0E06               	movlw	6
  3976   001B9E  26D9               	addwf	fsr2l,f,c
  3977   001BA0  C02C  FFDE         	movff	color_normalise@RGBC+6,postinc2
  3978   001BA4  C02D  FFDD         	movff	color_normalise@RGBC+7,postdec2
  3979   001BA8                     
  3980                           ;color.c: 131:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  3981   001BA8  C026  F00C         	movff	color_normalise@RGBC,___lmul@multiplier
  3982   001BAC  C027  F00D         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  3983   001BB0  6A0E               	clrf	(___lmul@multiplier+2)^0,c
  3984   001BB2  6A0F               	clrf	(___lmul@multiplier+3)^0,c
  3985   001BB4  0EE8               	movlw	232
  3986   001BB6  6E10               	movwf	___lmul@multiplicand^0,c
  3987   001BB8  0E03               	movlw	3
  3988   001BBA  6E11               	movwf	(___lmul@multiplicand+1)^0,c
  3989   001BBC  0E00               	movlw	0
  3990   001BBE  6E12               	movwf	(___lmul@multiplicand+2)^0,c
  3991   001BC0  0E00               	movlw	0
  3992   001BC2  6E13               	movwf	(___lmul@multiplicand+3)^0,c
  3993   001BC4  EC30  F011         	call	___lmul	;wreg free
  3994   001BC8  C00C  F018         	movff	?___lmul,___aldiv@dividend
  3995   001BCC  C00D  F019         	movff	?___lmul+1,___aldiv@dividend+1
  3996   001BD0  C00E  F01A         	movff	?___lmul+2,___aldiv@dividend+2
  3997   001BD4  C00F  F01B         	movff	?___lmul+3,___aldiv@dividend+3
  3998   001BD8  502A               	movf	(color_normalise@RGBC+4)^0,w,c
  3999   001BDA  2428               	addwf	(color_normalise@RGBC+2)^0,w,c
  4000   001BDC  6E2F               	movwf	??_color_normalise^0,c
  4001   001BDE  502B               	movf	(color_normalise@RGBC+5)^0,w,c
  4002   001BE0  2029               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4003   001BE2  6E30               	movwf	(??_color_normalise+1)^0,c
  4004   001BE4  5026               	movf	color_normalise@RGBC^0,w,c
  4005   001BE6  262F               	addwf	??_color_normalise^0,f,c
  4006   001BE8  5027               	movf	(color_normalise@RGBC+1)^0,w,c
  4007   001BEA  2230               	addwfc	(??_color_normalise+1)^0,f,c
  4008   001BEC  C02F  F01C         	movff	??_color_normalise,___aldiv@divisor
  4009   001BF0  C030  F01D         	movff	??_color_normalise+1,___aldiv@divisor+1
  4010   001BF4  6A1E               	clrf	(___aldiv@divisor+2)^0,c
  4011   001BF6  6A1F               	clrf	(___aldiv@divisor+3)^0,c
  4012   001BF8  EC6C  F00E         	call	___aldiv	;wreg free
  4013   001BFC  502E               	movf	color_normalise@RGBC_n^0,w,c
  4014   001BFE  6ED9               	movwf	fsr2l,c
  4015   001C00  6ADA               	clrf	fsr2h,c
  4016   001C02  C018  FFDE         	movff	?___aldiv,postinc2
  4017   001C06  C019  FFDD         	movff	?___aldiv+1,postdec2
  4018   001C0A                     
  4019                           ;color.c: 132:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  4020   001C0A  C028  F00C         	movff	color_normalise@RGBC+2,___lmul@multiplier
  4021   001C0E  C029  F00D         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  4022   001C12  6A0E               	clrf	(___lmul@multiplier+2)^0,c
  4023   001C14  6A0F               	clrf	(___lmul@multiplier+3)^0,c
  4024   001C16  0EE8               	movlw	232
  4025   001C18  6E10               	movwf	___lmul@multiplicand^0,c
  4026   001C1A  0E03               	movlw	3
  4027   001C1C  6E11               	movwf	(___lmul@multiplicand+1)^0,c
  4028   001C1E  0E00               	movlw	0
  4029   001C20  6E12               	movwf	(___lmul@multiplicand+2)^0,c
  4030   001C22  0E00               	movlw	0
  4031   001C24  6E13               	movwf	(___lmul@multiplicand+3)^0,c
  4032   001C26  EC30  F011         	call	___lmul	;wreg free
  4033   001C2A  C00C  F018         	movff	?___lmul,___aldiv@dividend
  4034   001C2E  C00D  F019         	movff	?___lmul+1,___aldiv@dividend+1
  4035   001C32  C00E  F01A         	movff	?___lmul+2,___aldiv@dividend+2
  4036   001C36  C00F  F01B         	movff	?___lmul+3,___aldiv@dividend+3
  4037   001C3A  502A               	movf	(color_normalise@RGBC+4)^0,w,c
  4038   001C3C  2428               	addwf	(color_normalise@RGBC+2)^0,w,c
  4039   001C3E  6E2F               	movwf	??_color_normalise^0,c
  4040   001C40  502B               	movf	(color_normalise@RGBC+5)^0,w,c
  4041   001C42  2029               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4042   001C44  6E30               	movwf	(??_color_normalise+1)^0,c
  4043   001C46  5026               	movf	color_normalise@RGBC^0,w,c
  4044   001C48  262F               	addwf	??_color_normalise^0,f,c
  4045   001C4A  5027               	movf	(color_normalise@RGBC+1)^0,w,c
  4046   001C4C  2230               	addwfc	(??_color_normalise+1)^0,f,c
  4047   001C4E  C02F  F01C         	movff	??_color_normalise,___aldiv@divisor
  4048   001C52  C030  F01D         	movff	??_color_normalise+1,___aldiv@divisor+1
  4049   001C56  6A1E               	clrf	(___aldiv@divisor+2)^0,c
  4050   001C58  6A1F               	clrf	(___aldiv@divisor+3)^0,c
  4051   001C5A  EC6C  F00E         	call	___aldiv	;wreg free
  4052   001C5E  502E               	movf	color_normalise@RGBC_n^0,w,c
  4053   001C60  6ED9               	movwf	fsr2l,c
  4054   001C62  6ADA               	clrf	fsr2h,c
  4055   001C64  0E02               	movlw	2
  4056   001C66  26D9               	addwf	fsr2l,f,c
  4057   001C68  C018  FFDE         	movff	?___aldiv,postinc2
  4058   001C6C  C019  FFDD         	movff	?___aldiv+1,postdec2
  4059   001C70                     
  4060                           ;color.c: 133:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  4061   001C70  C02A  F00C         	movff	color_normalise@RGBC+4,___lmul@multiplier
  4062   001C74  C02B  F00D         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  4063   001C78  6A0E               	clrf	(___lmul@multiplier+2)^0,c
  4064   001C7A  6A0F               	clrf	(___lmul@multiplier+3)^0,c
  4065   001C7C  0EE8               	movlw	232
  4066   001C7E  6E10               	movwf	___lmul@multiplicand^0,c
  4067   001C80  0E03               	movlw	3
  4068   001C82  6E11               	movwf	(___lmul@multiplicand+1)^0,c
  4069   001C84  0E00               	movlw	0
  4070   001C86  6E12               	movwf	(___lmul@multiplicand+2)^0,c
  4071   001C88  0E00               	movlw	0
  4072   001C8A  6E13               	movwf	(___lmul@multiplicand+3)^0,c
  4073   001C8C  EC30  F011         	call	___lmul	;wreg free
  4074   001C90  C00C  F018         	movff	?___lmul,___aldiv@dividend
  4075   001C94  C00D  F019         	movff	?___lmul+1,___aldiv@dividend+1
  4076   001C98  C00E  F01A         	movff	?___lmul+2,___aldiv@dividend+2
  4077   001C9C  C00F  F01B         	movff	?___lmul+3,___aldiv@dividend+3
  4078   001CA0  502A               	movf	(color_normalise@RGBC+4)^0,w,c
  4079   001CA2  2428               	addwf	(color_normalise@RGBC+2)^0,w,c
  4080   001CA4  6E2F               	movwf	??_color_normalise^0,c
  4081   001CA6  502B               	movf	(color_normalise@RGBC+5)^0,w,c
  4082   001CA8  2029               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4083   001CAA  6E30               	movwf	(??_color_normalise+1)^0,c
  4084   001CAC  5026               	movf	color_normalise@RGBC^0,w,c
  4085   001CAE  262F               	addwf	??_color_normalise^0,f,c
  4086   001CB0  5027               	movf	(color_normalise@RGBC+1)^0,w,c
  4087   001CB2  2230               	addwfc	(??_color_normalise+1)^0,f,c
  4088   001CB4  C02F  F01C         	movff	??_color_normalise,___aldiv@divisor
  4089   001CB8  C030  F01D         	movff	??_color_normalise+1,___aldiv@divisor+1
  4090   001CBC  6A1E               	clrf	(___aldiv@divisor+2)^0,c
  4091   001CBE  6A1F               	clrf	(___aldiv@divisor+3)^0,c
  4092   001CC0  EC6C  F00E         	call	___aldiv	;wreg free
  4093   001CC4  502E               	movf	color_normalise@RGBC_n^0,w,c
  4094   001CC6  6ED9               	movwf	fsr2l,c
  4095   001CC8  6ADA               	clrf	fsr2h,c
  4096   001CCA  0E04               	movlw	4
  4097   001CCC  26D9               	addwf	fsr2l,f,c
  4098   001CCE  C018  FFDE         	movff	?___aldiv,postinc2
  4099   001CD2  C019  FFDD         	movff	?___aldiv+1,postdec2
  4100   001CD6  0012               	return		;funcret
  4101   001CD8                     __end_of_color_normalise:
  4102                           	callstack 0
  4103                           
  4104 ;; *************** function ___lmul *****************
  4105 ;; Defined at:
  4106 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  multiplier      4   11[COMRAM] unsigned long 
  4109 ;;  multiplicand    4   15[COMRAM] unsigned long 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  product         4   19[COMRAM] unsigned long 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  4   11[COMRAM] unsigned long 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4121 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4124 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4125 ;;Total ram usage:       12 bytes
  4126 ;; Hardware stack levels used: 1
  4127 ;; Hardware stack levels required when called: 5
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_color_normalise
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text17
  4136   002260                     __ptext17:
  4137                           	callstack 0
  4138   002260                     ___lmul:
  4139                           	callstack 24
  4140   002260  0E00               	movlw	0
  4141   002262  6E14               	movwf	___lmul@product^0,c
  4142   002264  0E00               	movlw	0
  4143   002266  6E15               	movwf	(___lmul@product+1)^0,c
  4144   002268  0E00               	movlw	0
  4145   00226A  6E16               	movwf	(___lmul@product+2)^0,c
  4146   00226C  0E00               	movlw	0
  4147   00226E  6E17               	movwf	(___lmul@product+3)^0,c
  4148   002270                     l2355:
  4149   002270  A00C               	btfss	___lmul@multiplier^0,0,c
  4150   002272  EF3D  F011         	goto	u1111
  4151   002276  EF3F  F011         	goto	u1110
  4152   00227A                     u1111:
  4153   00227A  EF47  F011         	goto	l2359
  4154   00227E                     u1110:
  4155   00227E  5010               	movf	___lmul@multiplicand^0,w,c
  4156   002280  2614               	addwf	___lmul@product^0,f,c
  4157   002282  5011               	movf	(___lmul@multiplicand+1)^0,w,c
  4158   002284  2215               	addwfc	(___lmul@product+1)^0,f,c
  4159   002286  5012               	movf	(___lmul@multiplicand+2)^0,w,c
  4160   002288  2216               	addwfc	(___lmul@product+2)^0,f,c
  4161   00228A  5013               	movf	(___lmul@multiplicand+3)^0,w,c
  4162   00228C  2217               	addwfc	(___lmul@product+3)^0,f,c
  4163   00228E                     l2359:
  4164   00228E  90D8               	bcf	status,0,c
  4165   002290  3610               	rlcf	___lmul@multiplicand^0,f,c
  4166   002292  3611               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4167   002294  3612               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4168   002296  3613               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4169   002298  90D8               	bcf	status,0,c
  4170   00229A  320F               	rrcf	(___lmul@multiplier+3)^0,f,c
  4171   00229C  320E               	rrcf	(___lmul@multiplier+2)^0,f,c
  4172   00229E  320D               	rrcf	(___lmul@multiplier+1)^0,f,c
  4173   0022A0  320C               	rrcf	___lmul@multiplier^0,f,c
  4174   0022A2  500C               	movf	___lmul@multiplier^0,w,c
  4175   0022A4  100D               	iorwf	(___lmul@multiplier+1)^0,w,c
  4176   0022A6  100E               	iorwf	(___lmul@multiplier+2)^0,w,c
  4177   0022A8  100F               	iorwf	(___lmul@multiplier+3)^0,w,c
  4178   0022AA  A4D8               	btfss	status,2,c
  4179   0022AC  EF5A  F011         	goto	u1121
  4180   0022B0  EF5C  F011         	goto	u1120
  4181   0022B4                     u1121:
  4182   0022B4  EF38  F011         	goto	l2355
  4183   0022B8                     u1120:
  4184   0022B8  C014  F00C         	movff	___lmul@product,?___lmul
  4185   0022BC  C015  F00D         	movff	___lmul@product+1,?___lmul+1
  4186   0022C0  C016  F00E         	movff	___lmul@product+2,?___lmul+2
  4187   0022C4  C017  F00F         	movff	___lmul@product+3,?___lmul+3
  4188   0022C8  0012               	return		;funcret
  4189   0022CA                     __end_of___lmul:
  4190                           	callstack 0
  4191                           
  4192 ;; *************** function ___aldiv *****************
  4193 ;; Defined at:
  4194 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  dividend        4   23[COMRAM] long 
  4197 ;;  divisor         4   27[COMRAM] long 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  quotient        4   33[COMRAM] long 
  4200 ;;  sign            1   32[COMRAM] unsigned char 
  4201 ;;  counter         1   31[COMRAM] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  4   23[COMRAM] long 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4211 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4212 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4214 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4215 ;;Total ram usage:       14 bytes
  4216 ;; Hardware stack levels used: 1
  4217 ;; Hardware stack levels required when called: 5
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_color_normalise
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text18
  4226   001CD8                     __ptext18:
  4227                           	callstack 0
  4228   001CD8                     ___aldiv:
  4229                           	callstack 24
  4230   001CD8  0E00               	movlw	0
  4231   001CDA  6E21               	movwf	___aldiv@sign^0,c
  4232   001CDC  BE1F               	btfsc	(___aldiv@divisor+3)^0,7,c
  4233   001CDE  EF75  F00E         	goto	u1130
  4234   001CE2  EF73  F00E         	goto	u1131
  4235   001CE6                     u1131:
  4236   001CE6  EF7F  F00E         	goto	l2371
  4237   001CEA                     u1130:
  4238   001CEA  1E1F               	comf	(___aldiv@divisor+3)^0,f,c
  4239   001CEC  1E1E               	comf	(___aldiv@divisor+2)^0,f,c
  4240   001CEE  1E1D               	comf	(___aldiv@divisor+1)^0,f,c
  4241   001CF0  6C1C               	negf	___aldiv@divisor^0,c
  4242   001CF2  0E00               	movlw	0
  4243   001CF4  221D               	addwfc	(___aldiv@divisor+1)^0,f,c
  4244   001CF6  221E               	addwfc	(___aldiv@divisor+2)^0,f,c
  4245   001CF8  221F               	addwfc	(___aldiv@divisor+3)^0,f,c
  4246   001CFA  0E01               	movlw	1
  4247   001CFC  6E21               	movwf	___aldiv@sign^0,c
  4248   001CFE                     l2371:
  4249   001CFE  BE1B               	btfsc	(___aldiv@dividend+3)^0,7,c
  4250   001D00  EF86  F00E         	goto	u1140
  4251   001D04  EF84  F00E         	goto	u1141
  4252   001D08                     u1141:
  4253   001D08  EF90  F00E         	goto	l2377
  4254   001D0C                     u1140:
  4255   001D0C  1E1B               	comf	(___aldiv@dividend+3)^0,f,c
  4256   001D0E  1E1A               	comf	(___aldiv@dividend+2)^0,f,c
  4257   001D10  1E19               	comf	(___aldiv@dividend+1)^0,f,c
  4258   001D12  6C18               	negf	___aldiv@dividend^0,c
  4259   001D14  0E00               	movlw	0
  4260   001D16  2219               	addwfc	(___aldiv@dividend+1)^0,f,c
  4261   001D18  221A               	addwfc	(___aldiv@dividend+2)^0,f,c
  4262   001D1A  221B               	addwfc	(___aldiv@dividend+3)^0,f,c
  4263   001D1C  0E01               	movlw	1
  4264   001D1E  1A21               	xorwf	___aldiv@sign^0,f,c
  4265   001D20                     l2377:
  4266   001D20  0E00               	movlw	0
  4267   001D22  6E22               	movwf	___aldiv@quotient^0,c
  4268   001D24  0E00               	movlw	0
  4269   001D26  6E23               	movwf	(___aldiv@quotient+1)^0,c
  4270   001D28  0E00               	movlw	0
  4271   001D2A  6E24               	movwf	(___aldiv@quotient+2)^0,c
  4272   001D2C  0E00               	movlw	0
  4273   001D2E  6E25               	movwf	(___aldiv@quotient+3)^0,c
  4274   001D30  501C               	movf	___aldiv@divisor^0,w,c
  4275   001D32  101D               	iorwf	(___aldiv@divisor+1)^0,w,c
  4276   001D34  101E               	iorwf	(___aldiv@divisor+2)^0,w,c
  4277   001D36  101F               	iorwf	(___aldiv@divisor+3)^0,w,c
  4278   001D38  B4D8               	btfsc	status,2,c
  4279   001D3A  EFA1  F00E         	goto	u1151
  4280   001D3E  EFA3  F00E         	goto	u1150
  4281   001D42                     u1151:
  4282   001D42  EFD9  F00E         	goto	l2399
  4283   001D46                     u1150:
  4284   001D46  0E01               	movlw	1
  4285   001D48  6E20               	movwf	___aldiv@counter^0,c
  4286   001D4A  EFAD  F00E         	goto	l2385
  4287   001D4E                     l2383:
  4288   001D4E  90D8               	bcf	status,0,c
  4289   001D50  361C               	rlcf	___aldiv@divisor^0,f,c
  4290   001D52  361D               	rlcf	(___aldiv@divisor+1)^0,f,c
  4291   001D54  361E               	rlcf	(___aldiv@divisor+2)^0,f,c
  4292   001D56  361F               	rlcf	(___aldiv@divisor+3)^0,f,c
  4293   001D58  2A20               	incf	___aldiv@counter^0,f,c
  4294   001D5A                     l2385:
  4295   001D5A  AE1F               	btfss	(___aldiv@divisor+3)^0,7,c
  4296   001D5C  EFB2  F00E         	goto	u1161
  4297   001D60  EFB4  F00E         	goto	u1160
  4298   001D64                     u1161:
  4299   001D64  EFA7  F00E         	goto	l2383
  4300   001D68                     u1160:
  4301   001D68                     l2387:
  4302   001D68  90D8               	bcf	status,0,c
  4303   001D6A  3622               	rlcf	___aldiv@quotient^0,f,c
  4304   001D6C  3623               	rlcf	(___aldiv@quotient+1)^0,f,c
  4305   001D6E  3624               	rlcf	(___aldiv@quotient+2)^0,f,c
  4306   001D70  3625               	rlcf	(___aldiv@quotient+3)^0,f,c
  4307   001D72  501C               	movf	___aldiv@divisor^0,w,c
  4308   001D74  5C18               	subwf	___aldiv@dividend^0,w,c
  4309   001D76  501D               	movf	(___aldiv@divisor+1)^0,w,c
  4310   001D78  5819               	subwfb	(___aldiv@dividend+1)^0,w,c
  4311   001D7A  501E               	movf	(___aldiv@divisor+2)^0,w,c
  4312   001D7C  581A               	subwfb	(___aldiv@dividend+2)^0,w,c
  4313   001D7E  501F               	movf	(___aldiv@divisor+3)^0,w,c
  4314   001D80  581B               	subwfb	(___aldiv@dividend+3)^0,w,c
  4315   001D82  A0D8               	btfss	status,0,c
  4316   001D84  EFC6  F00E         	goto	u1171
  4317   001D88  EFC8  F00E         	goto	u1170
  4318   001D8C                     u1171:
  4319   001D8C  EFD1  F00E         	goto	l2395
  4320   001D90                     u1170:
  4321   001D90  501C               	movf	___aldiv@divisor^0,w,c
  4322   001D92  5E18               	subwf	___aldiv@dividend^0,f,c
  4323   001D94  501D               	movf	(___aldiv@divisor+1)^0,w,c
  4324   001D96  5A19               	subwfb	(___aldiv@dividend+1)^0,f,c
  4325   001D98  501E               	movf	(___aldiv@divisor+2)^0,w,c
  4326   001D9A  5A1A               	subwfb	(___aldiv@dividend+2)^0,f,c
  4327   001D9C  501F               	movf	(___aldiv@divisor+3)^0,w,c
  4328   001D9E  5A1B               	subwfb	(___aldiv@dividend+3)^0,f,c
  4329   001DA0  8022               	bsf	___aldiv@quotient^0,0,c
  4330   001DA2                     l2395:
  4331   001DA2  90D8               	bcf	status,0,c
  4332   001DA4  321F               	rrcf	(___aldiv@divisor+3)^0,f,c
  4333   001DA6  321E               	rrcf	(___aldiv@divisor+2)^0,f,c
  4334   001DA8  321D               	rrcf	(___aldiv@divisor+1)^0,f,c
  4335   001DAA  321C               	rrcf	___aldiv@divisor^0,f,c
  4336   001DAC  2E20               	decfsz	___aldiv@counter^0,f,c
  4337   001DAE  EFB4  F00E         	goto	l2387
  4338   001DB2                     l2399:
  4339   001DB2  5021               	movf	___aldiv@sign^0,w,c
  4340   001DB4  B4D8               	btfsc	status,2,c
  4341   001DB6  EFDF  F00E         	goto	u1181
  4342   001DBA  EFE1  F00E         	goto	u1180
  4343   001DBE                     u1181:
  4344   001DBE  EFE9  F00E         	goto	l2403
  4345   001DC2                     u1180:
  4346   001DC2  1E25               	comf	(___aldiv@quotient+3)^0,f,c
  4347   001DC4  1E24               	comf	(___aldiv@quotient+2)^0,f,c
  4348   001DC6  1E23               	comf	(___aldiv@quotient+1)^0,f,c
  4349   001DC8  6C22               	negf	___aldiv@quotient^0,c
  4350   001DCA  0E00               	movlw	0
  4351   001DCC  2223               	addwfc	(___aldiv@quotient+1)^0,f,c
  4352   001DCE  2224               	addwfc	(___aldiv@quotient+2)^0,f,c
  4353   001DD0  2225               	addwfc	(___aldiv@quotient+3)^0,f,c
  4354   001DD2                     l2403:
  4355   001DD2  C022  F018         	movff	___aldiv@quotient,?___aldiv
  4356   001DD6  C023  F019         	movff	___aldiv@quotient+1,?___aldiv+1
  4357   001DDA  C024  F01A         	movff	___aldiv@quotient+2,?___aldiv+2
  4358   001DDE  C025  F01B         	movff	___aldiv@quotient+3,?___aldiv+3
  4359   001DE2  0012               	return		;funcret
  4360   001DE4                     __end_of___aldiv:
  4361                           	callstack 0
  4362                           
  4363 ;; *************** function _color_detect *****************
  4364 ;; Defined at:
  4365 ;;		line 136 in file "color.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  RGBC_n          8   11[COMRAM] struct RGBC_val
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  color           1   19[COMRAM] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  1    wreg      unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4379 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;Total ram usage:        9 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; Hardware stack levels required when called: 5
  4386 ;; This function calls:
  4387 ;;		Nothing
  4388 ;; This function is called by:
  4389 ;;		_main
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text19
  4394   0022CA                     __ptext19:
  4395                           	callstack 0
  4396   0022CA                     _color_detect:
  4397                           	callstack 25
  4398   0022CA                     
  4399                           ;color.c: 136: unsigned char color_detect(RGBC_val RGBC_n);color.c: 137: {;color.c: 138:
      +                               unsigned char color=0;
  4400   0022CA  0E00               	movlw	0
  4401   0022CC  6E14               	movwf	color_detect@color^0,c
  4402   0022CE                     
  4403                           ;color.c: 139:     if (RGBC_n.R > 560) {
  4404   0022CE  0E31               	movlw	49
  4405   0022D0  5C0C               	subwf	color_detect@RGBC_n^0,w,c
  4406   0022D2  0E02               	movlw	2
  4407   0022D4  580D               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  4408   0022D6  A0D8               	btfss	status,0,c
  4409   0022D8  EF70  F011         	goto	u1301
  4410   0022DC  EF72  F011         	goto	u1300
  4411   0022E0                     u1301:
  4412   0022E0  EF76  F011         	goto	l2575
  4413   0022E4                     u1300:
  4414   0022E4                     
  4415                           ;color.c: 140:         color = 1;
  4416   0022E4  0E01               	movlw	1
  4417   0022E6  6E14               	movwf	color_detect@color^0,c
  4418                           
  4419                           ;color.c: 141:     }
  4420   0022E8  EF92  F011         	goto	l124
  4421   0022EC                     l2575:
  4422   0022EC  0E23               	movlw	35
  4423   0022EE  5C0E               	subwf	(color_detect@RGBC_n+2)^0,w,c
  4424   0022F0  0E01               	movlw	1
  4425   0022F2  580F               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  4426   0022F4  A0D8               	btfss	status,0,c
  4427   0022F6  EF7F  F011         	goto	u1311
  4428   0022FA  EF81  F011         	goto	u1310
  4429   0022FE                     u1311:
  4430   0022FE  EF85  F011         	goto	l2579
  4431   002302                     u1310:
  4432   002302                     
  4433                           ;color.c: 143:         color = 2;
  4434   002302  0E02               	movlw	2
  4435   002304  6E14               	movwf	color_detect@color^0,c
  4436                           
  4437                           ;color.c: 144:     }
  4438   002306  EF92  F011         	goto	l124
  4439   00230A                     l2579:
  4440   00230A  5011               	movf	(color_detect@RGBC_n+5)^0,w,c
  4441   00230C  E109               	bnz	u1320
  4442   00230E  0EE7               	movlw	231
  4443   002310  5C10               	subwf	(color_detect@RGBC_n+4)^0,w,c
  4444   002312  A0D8               	btfss	status,0,c
  4445   002314  EF8E  F011         	goto	u1321
  4446   002318  EF90  F011         	goto	u1320
  4447   00231C                     u1321:
  4448   00231C  EF92  F011         	goto	l124
  4449   002320                     u1320:
  4450   002320                     
  4451                           ;color.c: 146:         color = 3;
  4452   002320  0E03               	movlw	3
  4453   002322  6E14               	movwf	color_detect@color^0,c
  4454   002324                     l124:
  4455                           
  4456                           ;color.c: 166:     return color;
  4457   002324  5014               	movf	color_detect@color^0,w,c
  4458   002326  0012               	return		;funcret
  4459   002328                     __end_of_color_detect:
  4460                           	callstack 0
  4461                           
  4462 ;; *************** function _color_click_init *****************
  4463 ;; Defined at:
  4464 ;;		line 5 in file "color.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4482 ;;Total ram usage:        1 bytes
  4483 ;; Hardware stack levels used: 1
  4484 ;; Hardware stack levels required when called: 9
  4485 ;; This function calls:
  4486 ;;		_I2C_2_Master_Init
  4487 ;;		_color_clear_init_interrupts
  4488 ;;		_color_writetoaddr
  4489 ;; This function is called by:
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text20
  4495   0023FE                     __ptext20:
  4496                           	callstack 0
  4497   0023FE                     _color_click_init:
  4498                           	callstack 21
  4499   0023FE                     
  4500                           ;color.c: 8:     I2C_2_Master_Init();
  4501   0023FE  EC36  F012         	call	_I2C_2_Master_Init	;wreg free
  4502   002402                     
  4503                           ;color.c: 11:  color_writetoaddr(0x00, 0x01);
  4504   002402  0E01               	movlw	1
  4505   002404  6E0E               	movwf	color_writetoaddr@value^0,c
  4506   002406  0E00               	movlw	0
  4507   002408  ECBE  F012         	call	_color_writetoaddr
  4508   00240C                     
  4509                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4510   00240C  0E3F               	movlw	63
  4511   00240E  6E15               	movwf	??_color_click_init^0,c
  4512   002410  0E55               	movlw	85
  4513   002412                     u1897:
  4514   002412  2EE8               	decfsz	wreg,f,c
  4515   002414  D7FE               	bra	u1897
  4516   002416  2E15               	decfsz	??_color_click_init^0,f,c
  4517   002418  D7FC               	bra	u1897
  4518   00241A  0000               	nop	
  4519   00241C                     
  4520                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  4521   00241C  0E03               	movlw	3
  4522   00241E  6E0E               	movwf	color_writetoaddr@value^0,c
  4523   002420  0E00               	movlw	0
  4524   002422  ECBE  F012         	call	_color_writetoaddr
  4525   002426                     
  4526                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  4527   002426  0ED5               	movlw	213
  4528   002428  6E0E               	movwf	color_writetoaddr@value^0,c
  4529   00242A  0E01               	movlw	1
  4530   00242C  ECBE  F012         	call	_color_writetoaddr
  4531   002430                     
  4532                           ;color.c: 21:     color_clear_init_interrupts();
  4533   002430  EC7C  F010         	call	_color_clear_init_interrupts	;wreg free
  4534   002434  0012               	return		;funcret
  4535   002436                     __end_of_color_click_init:
  4536                           	callstack 0
  4537                           
  4538 ;; *************** function _color_clear_init_interrupts *****************
  4539 ;; Defined at:
  4540 ;;		line 25 in file "color.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  low_threshol    2   18[COMRAM] unsigned int 
  4545 ;;  high_thresho    2   16[COMRAM] unsigned int 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4558 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4559 ;;Total ram usage:        5 bytes
  4560 ;; Hardware stack levels used: 1
  4561 ;; Hardware stack levels required when called: 8
  4562 ;; This function calls:
  4563 ;;		_I2C_2_Master_Start
  4564 ;;		_I2C_2_Master_Stop
  4565 ;;		_I2C_2_Master_Write
  4566 ;;		_color_writetoaddr
  4567 ;; This function is called by:
  4568 ;;		_color_click_init
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text21
  4573   0020F8                     __ptext21:
  4574                           	callstack 0
  4575   0020F8                     _color_clear_init_interrupts:
  4576                           	callstack 21
  4577   0020F8                     
  4578                           ;color.c: 27:     I2C_2_Master_Start();
  4579   0020F8  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  4580                           
  4581                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  4582   0020FC  0E52               	movlw	82
  4583   0020FE  EC1C  F013         	call	_I2C_2_Master_Write
  4584                           
  4585                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  4586   002102  0EE6               	movlw	230
  4587   002104  EC1C  F013         	call	_I2C_2_Master_Write
  4588                           
  4589                           ;color.c: 30:     I2C_2_Master_Stop();
  4590   002108  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  4591   00210C                     
  4592                           ;color.c: 33:     unsigned int high_threshold = ambient + 100;
  4593   00210C  0E64               	movlw	100
  4594   00210E  244F               	addwf	_ambient^0,w,c
  4595   002110  6E11               	movwf	color_clear_init_interrupts@high_threshold^0,c
  4596   002112  0E00               	movlw	0
  4597   002114  2050               	addwfc	(_ambient+1)^0,w,c
  4598   002116  6E12               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  4599   002118                     
  4600                           ;color.c: 34:     unsigned int low_threshold = ambient - 100;
  4601   002118  0E9C               	movlw	156
  4602   00211A  244F               	addwf	_ambient^0,w,c
  4603   00211C  6E13               	movwf	color_clear_init_interrupts@low_threshold^0,c
  4604   00211E  0EFF               	movlw	255
  4605   002120  2050               	addwfc	(_ambient+1)^0,w,c
  4606   002122  6E14               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  4607                           
  4608                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  4609   002124  0E13               	movlw	19
  4610   002126  6E0E               	movwf	color_writetoaddr@value^0,c
  4611   002128  0E00               	movlw	0
  4612   00212A  ECBE  F012         	call	_color_writetoaddr
  4613   00212E                     
  4614                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4615   00212E  0E3F               	movlw	63
  4616   002130  6E10               	movwf	??_color_clear_init_interrupts^0,c
  4617   002132  0E55               	movlw	85
  4618   002134                     u1907:
  4619   002134  2EE8               	decfsz	wreg,f,c
  4620   002136  D7FE               	bra	u1907
  4621   002138  2E10               	decfsz	??_color_clear_init_interrupts^0,f,c
  4622   00213A  D7FC               	bra	u1907
  4623   00213C  0000               	nop	
  4624   00213E                     
  4625                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  4626   00213E  5012               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  4627   002140  6E0E               	movwf	color_writetoaddr@value^0,c
  4628   002142  0E07               	movlw	7
  4629   002144  ECBE  F012         	call	_color_writetoaddr
  4630   002148                     
  4631                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  4632   002148  C011  F00E         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  4633   00214C  0E06               	movlw	6
  4634   00214E  ECBE  F012         	call	_color_writetoaddr
  4635   002152                     
  4636                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  4637   002152  5014               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  4638   002154  6E0E               	movwf	color_writetoaddr@value^0,c
  4639   002156  0E05               	movlw	5
  4640   002158  ECBE  F012         	call	_color_writetoaddr
  4641   00215C                     
  4642                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  4643   00215C  C013  F00E         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  4644   002160  0E04               	movlw	4
  4645   002162  ECBE  F012         	call	_color_writetoaddr
  4646   002166                     
  4647                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  4648   002166  0E04               	movlw	4
  4649   002168  6E0E               	movwf	color_writetoaddr@value^0,c
  4650   00216A  0E0C               	movlw	12
  4651   00216C  ECBE  F012         	call	_color_writetoaddr
  4652   002170  0012               	return		;funcret
  4653   002172                     __end_of_color_clear_init_interrupts:
  4654                           	callstack 0
  4655                           
  4656 ;; *************** function _color_writetoaddr *****************
  4657 ;; Defined at:
  4658 ;;		line 48 in file "color.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  address         1    wreg     unsigned char 
  4661 ;;  value           1   13[COMRAM] unsigned char 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  address         1   14[COMRAM] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4673 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;Total ram usage:        2 bytes
  4678 ;; Hardware stack levels used: 1
  4679 ;; Hardware stack levels required when called: 7
  4680 ;; This function calls:
  4681 ;;		_I2C_2_Master_Start
  4682 ;;		_I2C_2_Master_Stop
  4683 ;;		_I2C_2_Master_Write
  4684 ;; This function is called by:
  4685 ;;		_color_click_init
  4686 ;;		_color_clear_init_interrupts
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text22
  4691   00257C                     __ptext22:
  4692                           	callstack 0
  4693   00257C                     _color_writetoaddr:
  4694                           	callstack 22
  4695                           
  4696                           ;incstack = 0
  4697                           ;color_writetoaddr@address stored from wreg
  4698   00257C  6E0F               	movwf	color_writetoaddr@address^0,c
  4699   00257E                     
  4700                           ;color.c: 49:     I2C_2_Master_Start();
  4701   00257E  EC32  F013         	call	_I2C_2_Master_Start	;wreg free
  4702                           
  4703                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  4704   002582  0E52               	movlw	82
  4705   002584  EC1C  F013         	call	_I2C_2_Master_Write
  4706                           
  4707                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  4708   002588  500F               	movf	color_writetoaddr@address^0,w,c
  4709   00258A  0980               	iorlw	128
  4710   00258C  EC1C  F013         	call	_I2C_2_Master_Write
  4711                           
  4712                           ;color.c: 52:     I2C_2_Master_Write(value);
  4713   002590  500E               	movf	color_writetoaddr@value^0,w,c
  4714   002592  EC1C  F013         	call	_I2C_2_Master_Write
  4715                           
  4716                           ;color.c: 53:     I2C_2_Master_Stop();
  4717   002596  EC2D  F013         	call	_I2C_2_Master_Stop	;wreg free
  4718   00259A  0012               	return		;funcret
  4719   00259C                     __end_of_color_writetoaddr:
  4720                           	callstack 0
  4721                           
  4722 ;; *************** function _I2C_2_Master_Write *****************
  4723 ;; Defined at:
  4724 ;;		line 45 in file "i2c.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  data_byte       1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  data_byte       1   12[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4742 ;;Total ram usage:        1 bytes
  4743 ;; Hardware stack levels used: 1
  4744 ;; Hardware stack levels required when called: 6
  4745 ;; This function calls:
  4746 ;;		_I2C_2_Master_Idle
  4747 ;; This function is called by:
  4748 ;;		_color_clear_init_interrupts
  4749 ;;		_color_writetoaddr
  4750 ;;		_color_read
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text23
  4755   002638                     __ptext23:
  4756                           	callstack 0
  4757   002638                     _I2C_2_Master_Write:
  4758                           	callstack 23
  4759                           
  4760                           ;incstack = 0
  4761                           ;I2C_2_Master_Write@data_byte stored from wreg
  4762   002638  6E0D               	movwf	I2C_2_Master_Write@data_byte^0,c
  4763   00263A                     
  4764                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4765   00263A  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  4766   00263E                     
  4767                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4768   00263E  C00D  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4769   002642  0012               	return		;funcret
  4770   002644                     __end_of_I2C_2_Master_Write:
  4771                           	callstack 0
  4772                           
  4773 ;; *************** function _I2C_2_Master_Stop *****************
  4774 ;; Defined at:
  4775 ;;		line 39 in file "i2c.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used: 1
  4795 ;; Hardware stack levels required when called: 6
  4796 ;; This function calls:
  4797 ;;		_I2C_2_Master_Idle
  4798 ;; This function is called by:
  4799 ;;		_color_clear_init_interrupts
  4800 ;;		_color_writetoaddr
  4801 ;;		_color_read
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text24
  4806   00265A                     __ptext24:
  4807                           	callstack 0
  4808   00265A                     _I2C_2_Master_Stop:
  4809                           	callstack 23
  4810   00265A                     
  4811                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4812   00265A  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  4813   00265E                     
  4814                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4815   00265E  010E               	movlb	14	; () banked
  4816   002660  85DA               	bsf	218,2,b	;volatile
  4817   002662                     
  4818                           ; BSR set to: 14
  4819   002662  0012               	return		;funcret
  4820   002664                     __end_of_I2C_2_Master_Stop:
  4821                           	callstack 0
  4822                           
  4823 ;; *************** function _I2C_2_Master_Start *****************
  4824 ;; Defined at:
  4825 ;;		line 27 in file "i2c.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4843 ;;Total ram usage:        0 bytes
  4844 ;; Hardware stack levels used: 1
  4845 ;; Hardware stack levels required when called: 6
  4846 ;; This function calls:
  4847 ;;		_I2C_2_Master_Idle
  4848 ;; This function is called by:
  4849 ;;		_color_clear_init_interrupts
  4850 ;;		_color_writetoaddr
  4851 ;;		_color_read
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text25
  4856   002664                     __ptext25:
  4857                           	callstack 0
  4858   002664                     _I2C_2_Master_Start:
  4859                           	callstack 23
  4860   002664                     
  4861                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4862   002664  EC4B  F012         	call	_I2C_2_Master_Idle	;wreg free
  4863   002668                     
  4864                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4865   002668  010E               	movlb	14	; () banked
  4866   00266A  81DA               	bsf	218,0,b	;volatile
  4867   00266C                     
  4868                           ; BSR set to: 14
  4869   00266C  0012               	return		;funcret
  4870   00266E                     __end_of_I2C_2_Master_Start:
  4871                           	callstack 0
  4872                           
  4873 ;; *************** function _I2C_2_Master_Idle *****************
  4874 ;; Defined at:
  4875 ;;		line 22 in file "i2c.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      void 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4893 ;;Total ram usage:        1 bytes
  4894 ;; Hardware stack levels used: 1
  4895 ;; Hardware stack levels required when called: 5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_I2C_2_Master_Start
  4900 ;;		_I2C_2_Master_RepStart
  4901 ;;		_I2C_2_Master_Stop
  4902 ;;		_I2C_2_Master_Write
  4903 ;;		_I2C_2_Master_Read
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text26
  4908   002496                     __ptext26:
  4909                           	callstack 0
  4910   002496                     _I2C_2_Master_Idle:
  4911                           	callstack 23
  4912   002496                     l158:
  4913   002496  010E               	movlb	14	; () banked
  4914   002498  B5D8               	btfsc	216,2,b	;volatile
  4915   00249A  EF51  F012         	goto	u821
  4916   00249E  EF53  F012         	goto	u820
  4917   0024A2                     u821:
  4918   0024A2  EF4B  F012         	goto	l158
  4919   0024A6                     u820:
  4920   0024A6                     
  4921                           ; BSR set to: 14
  4922   0024A6  CEDA F00C          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4923   0024AA  0E1F               	movlw	31
  4924   0024AC  160C               	andwf	??_I2C_2_Master_Idle^0,f,c
  4925   0024AE  A4D8               	btfss	status,2,c
  4926   0024B0  EF5C  F012         	goto	u831
  4927   0024B4  EF5E  F012         	goto	u830
  4928   0024B8                     u831:
  4929   0024B8  EF4B  F012         	goto	l158
  4930   0024BC                     u830:
  4931   0024BC                     
  4932                           ; BSR set to: 14
  4933   0024BC  0012               	return		;funcret
  4934   0024BE                     __end_of_I2C_2_Master_Idle:
  4935                           	callstack 0
  4936                           
  4937 ;; *************** function _I2C_2_Master_Init *****************
  4938 ;; Defined at:
  4939 ;;		line 4 in file "i2c.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used: 1
  4959 ;; Hardware stack levels required when called: 5
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_color_click_init
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text27
  4968   00246C                     __ptext27:
  4969                           	callstack 0
  4970   00246C                     _I2C_2_Master_Init:
  4971                           	callstack 24
  4972   00246C                     
  4973                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4974   00246C  010E               	movlb	14	; () banked
  4975   00246E  51D9               	movf	217,w,b	;volatile
  4976   002470  0BF0               	andlw	-16
  4977   002472  0908               	iorlw	8
  4978   002474  6FD9               	movwf	217,b	;volatile
  4979   002476                     
  4980                           ; BSR set to: 14
  4981                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4982   002476  8BD9               	bsf	217,5,b	;volatile
  4983                           
  4984                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4985   002478  0E9F               	movlw	159
  4986   00247A  6FD6               	movwf	214,b	;volatile
  4987   00247C                     
  4988                           ; BSR set to: 14
  4989                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4990   00247C  8A84               	bsf	132,5,c	;volatile
  4991   00247E                     
  4992                           ; BSR set to: 14
  4993                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4994   00247E  8C84               	bsf	132,6,c	;volatile
  4995   002480                     
  4996                           ; BSR set to: 14
  4997                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4998   002480  9BA7               	bcf	167,5,b	;volatile
  4999   002482                     
  5000                           ; BSR set to: 14
  5001                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5002   002482  9DA7               	bcf	167,6,b	;volatile
  5003                           
  5004                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5005   002484  0E1D               	movlw	29
  5006   002486  6F1D               	movwf	29,b	;volatile
  5007                           
  5008                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5009   002488  0E1E               	movlw	30
  5010   00248A  6F1C               	movwf	28,b	;volatile
  5011                           
  5012                           ;i2c.c: 18:   RD5PPS=0x1C;
  5013   00248C  0E1C               	movlw	28
  5014   00248E  6F6F               	movwf	111,b	;volatile
  5015                           
  5016                           ;i2c.c: 19:   RD6PPS=0x1B;
  5017   002490  0E1B               	movlw	27
  5018   002492  6F70               	movwf	112,b	;volatile
  5019   002494                     
  5020                           ; BSR set to: 14
  5021   002494  0012               	return		;funcret
  5022   002496                     __end_of_I2C_2_Master_Init:
  5023                           	callstack 0
  5024                           
  5025 ;; *************** function _batteryLevel *****************
  5026 ;; Defined at:
  5027 ;;		line 6 in file "battery.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  batteryQuart    1   20[COMRAM] unsigned char 
  5032 ;;  batteryVolta    1   19[COMRAM] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used: 1
  5048 ;; Hardware stack levels required when called: 6
  5049 ;; This function calls:
  5050 ;;		_ADC_getval
  5051 ;;		_ADC_init
  5052 ;;		___awdiv
  5053 ;; This function is called by:
  5054 ;;		_main
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text28
  5059   002328                     __ptext28:
  5060                           	callstack 0
  5061   002328                     _batteryLevel:
  5062                           	callstack 24
  5063   002328                     
  5064                           ;battery.c: 7:     ADC_init();
  5065   002328  ECED  F012         	call	_ADC_init	;wreg free
  5066                           
  5067                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  5068   00232C  ECFA  F012         	call	_ADC_getval	;wreg free
  5069   002330  6E14               	movwf	batteryLevel@batteryVoltage^0,c
  5070   002332                     
  5071                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  5072   002332  C014  F00C         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  5073   002336  6A0D               	clrf	(___awdiv@dividend+1)^0,c
  5074   002338  0E00               	movlw	0
  5075   00233A  6E0F               	movwf	(___awdiv@divisor+1)^0,c
  5076   00233C  0E18               	movlw	24
  5077   00233E  6E0E               	movwf	___awdiv@divisor^0,c
  5078   002340  ECD2  F00F         	call	___awdiv	;wreg free
  5079   002344  500C               	movf	?___awdiv^0,w,c
  5080   002346  6E15               	movwf	batteryLevel@batteryQuarter^0,c
  5081   002348                     
  5082                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  5083   002348  A215               	btfss	batteryLevel@batteryQuarter^0,1,c
  5084   00234A  EFA9  F011         	goto	u1251
  5085   00234E  EFAB  F011         	goto	u1250
  5086   002352                     u1251:
  5087   002352  EFAE  F011         	goto	l356
  5088   002356                     u1250:
  5089   002356  8E7C               	bsf	124,7,c	;volatile
  5090   002358  EFAF  F011         	goto	l357
  5091   00235C                     l356:
  5092   00235C  9E7C               	bcf	124,7,c	;volatile
  5093   00235E                     l357:
  5094                           
  5095                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  5096   00235E  A015               	btfss	batteryLevel@batteryQuarter^0,0,c
  5097   002360  EFB4  F011         	goto	u1261
  5098   002364  EFB6  F011         	goto	u1260
  5099   002368                     u1261:
  5100   002368  EFB9  F011         	goto	l358
  5101   00236C                     u1260:
  5102   00236C  8680               	bsf	128,3,c	;volatile
  5103   00236E  EFBA  F011         	goto	l360
  5104   002372                     l358:
  5105   002372  9680               	bcf	128,3,c	;volatile
  5106   002374                     l360:
  5107   002374  0012               	return		;funcret
  5108   002376                     __end_of_batteryLevel:
  5109                           	callstack 0
  5110                           
  5111 ;; *************** function ___awdiv *****************
  5112 ;; Defined at:
  5113 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  dividend        2   11[COMRAM] int 
  5116 ;;  divisor         2   13[COMRAM] int 
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  quotient        2   17[COMRAM] int 
  5119 ;;  sign            1   16[COMRAM] unsigned char 
  5120 ;;  counter         1   15[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  2   11[COMRAM] int 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5134 ;;Total ram usage:        8 bytes
  5135 ;; Hardware stack levels used: 1
  5136 ;; Hardware stack levels required when called: 5
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_batteryLevel
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text29
  5145   001FA4                     __ptext29:
  5146                           	callstack 0
  5147   001FA4                     ___awdiv:
  5148                           	callstack 24
  5149   001FA4  0E00               	movlw	0
  5150   001FA6  6E11               	movwf	___awdiv@sign^0,c
  5151   001FA8  BE0F               	btfsc	(___awdiv@divisor+1)^0,7,c
  5152   001FAA  EFDB  F00F         	goto	u1190
  5153   001FAE  EFD9  F00F         	goto	u1191
  5154   001FB2                     u1191:
  5155   001FB2  EFE1  F00F         	goto	l2415
  5156   001FB6                     u1190:
  5157   001FB6  6C0E               	negf	___awdiv@divisor^0,c
  5158   001FB8  1E0F               	comf	(___awdiv@divisor+1)^0,f,c
  5159   001FBA  B0D8               	btfsc	status,0,c
  5160   001FBC  2A0F               	incf	(___awdiv@divisor+1)^0,f,c
  5161   001FBE  0E01               	movlw	1
  5162   001FC0  6E11               	movwf	___awdiv@sign^0,c
  5163   001FC2                     l2415:
  5164   001FC2  BE0D               	btfsc	(___awdiv@dividend+1)^0,7,c
  5165   001FC4  EFE8  F00F         	goto	u1200
  5166   001FC8  EFE6  F00F         	goto	u1201
  5167   001FCC                     u1201:
  5168   001FCC  EFEE  F00F         	goto	l2421
  5169   001FD0                     u1200:
  5170   001FD0  6C0C               	negf	___awdiv@dividend^0,c
  5171   001FD2  1E0D               	comf	(___awdiv@dividend+1)^0,f,c
  5172   001FD4  B0D8               	btfsc	status,0,c
  5173   001FD6  2A0D               	incf	(___awdiv@dividend+1)^0,f,c
  5174   001FD8  0E01               	movlw	1
  5175   001FDA  1A11               	xorwf	___awdiv@sign^0,f,c
  5176   001FDC                     l2421:
  5177   001FDC  0E00               	movlw	0
  5178   001FDE  6E13               	movwf	(___awdiv@quotient+1)^0,c
  5179   001FE0  0E00               	movlw	0
  5180   001FE2  6E12               	movwf	___awdiv@quotient^0,c
  5181   001FE4  500E               	movf	___awdiv@divisor^0,w,c
  5182   001FE6  100F               	iorwf	(___awdiv@divisor+1)^0,w,c
  5183   001FE8  B4D8               	btfsc	status,2,c
  5184   001FEA  EFF9  F00F         	goto	u1211
  5185   001FEE  EFFB  F00F         	goto	u1210
  5186   001FF2                     u1211:
  5187   001FF2  EF23  F010         	goto	l2443
  5188   001FF6                     u1210:
  5189   001FF6  0E01               	movlw	1
  5190   001FF8  6E10               	movwf	___awdiv@counter^0,c
  5191   001FFA  EF03  F010         	goto	l2429
  5192   001FFE                     l2427:
  5193   001FFE  90D8               	bcf	status,0,c
  5194   002000  360E               	rlcf	___awdiv@divisor^0,f,c
  5195   002002  360F               	rlcf	(___awdiv@divisor+1)^0,f,c
  5196   002004  2A10               	incf	___awdiv@counter^0,f,c
  5197   002006                     l2429:
  5198   002006  AE0F               	btfss	(___awdiv@divisor+1)^0,7,c
  5199   002008  EF08  F010         	goto	u1221
  5200   00200C  EF0A  F010         	goto	u1220
  5201   002010                     u1221:
  5202   002010  EFFF  F00F         	goto	l2427
  5203   002014                     u1220:
  5204   002014                     l2431:
  5205   002014  90D8               	bcf	status,0,c
  5206   002016  3612               	rlcf	___awdiv@quotient^0,f,c
  5207   002018  3613               	rlcf	(___awdiv@quotient+1)^0,f,c
  5208   00201A  500E               	movf	___awdiv@divisor^0,w,c
  5209   00201C  5C0C               	subwf	___awdiv@dividend^0,w,c
  5210   00201E  500F               	movf	(___awdiv@divisor+1)^0,w,c
  5211   002020  580D               	subwfb	(___awdiv@dividend+1)^0,w,c
  5212   002022  A0D8               	btfss	status,0,c
  5213   002024  EF16  F010         	goto	u1231
  5214   002028  EF18  F010         	goto	u1230
  5215   00202C                     u1231:
  5216   00202C  EF1D  F010         	goto	l2439
  5217   002030                     u1230:
  5218   002030  500E               	movf	___awdiv@divisor^0,w,c
  5219   002032  5E0C               	subwf	___awdiv@dividend^0,f,c
  5220   002034  500F               	movf	(___awdiv@divisor+1)^0,w,c
  5221   002036  5A0D               	subwfb	(___awdiv@dividend+1)^0,f,c
  5222   002038  8012               	bsf	___awdiv@quotient^0,0,c
  5223   00203A                     l2439:
  5224   00203A  90D8               	bcf	status,0,c
  5225   00203C  320F               	rrcf	(___awdiv@divisor+1)^0,f,c
  5226   00203E  320E               	rrcf	___awdiv@divisor^0,f,c
  5227   002040  2E10               	decfsz	___awdiv@counter^0,f,c
  5228   002042  EF0A  F010         	goto	l2431
  5229   002046                     l2443:
  5230   002046  5011               	movf	___awdiv@sign^0,w,c
  5231   002048  B4D8               	btfsc	status,2,c
  5232   00204A  EF29  F010         	goto	u1241
  5233   00204E  EF2B  F010         	goto	u1240
  5234   002052                     u1241:
  5235   002052  EF2F  F010         	goto	l2447
  5236   002056                     u1240:
  5237   002056  6C12               	negf	___awdiv@quotient^0,c
  5238   002058  1E13               	comf	(___awdiv@quotient+1)^0,f,c
  5239   00205A  B0D8               	btfsc	status,0,c
  5240   00205C  2A13               	incf	(___awdiv@quotient+1)^0,f,c
  5241   00205E                     l2447:
  5242   00205E  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5243   002062  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5244   002066  0012               	return		;funcret
  5245   002068                     __end_of___awdiv:
  5246                           	callstack 0
  5247                           
  5248 ;; *************** function _ADC_init *****************
  5249 ;; Defined at:
  5250 ;;		line 9 in file "ADC.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used: 1
  5270 ;; Hardware stack levels required when called: 5
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_batteryLevel
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text30
  5279   0025DA                     __ptext30:
  5280                           	callstack 0
  5281   0025DA                     _ADC_init:
  5282                           	callstack 24
  5283   0025DA                     
  5284                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  5285   0025DA  8C86               	bsf	134,6,c	;volatile
  5286                           
  5287                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  5288   0025DC  010E               	movlb	14	; () banked
  5289   0025DE  8DB4               	bsf	180,6,b	;volatile
  5290                           
  5291                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  5292   0025E0  010F               	movlb	15	; () banked
  5293   0025E2  9958               	bcf	88,4,b	;volatile
  5294   0025E4                     
  5295                           ; BSR set to: 15
  5296                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  5297   0025E4  0EFC               	movlw	-4
  5298   0025E6  1758               	andwf	88,f,b	;volatile
  5299                           
  5300                           ;ADC.c: 17:     ADPCH=0b101110;
  5301   0025E8  0E2E               	movlw	46
  5302   0025EA  6F5F               	movwf	95,b	;volatile
  5303   0025EC                     
  5304                           ; BSR set to: 15
  5305                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  5306   0025EC  9460               	bcf	96,2,c	;volatile
  5307   0025EE                     
  5308                           ; BSR set to: 15
  5309                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  5310   0025EE  8860               	bsf	96,4,c	;volatile
  5311   0025F0                     
  5312                           ; BSR set to: 15
  5313                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  5314   0025F0  8E60               	bsf	96,7,c	;volatile
  5315   0025F2                     
  5316                           ; BSR set to: 15
  5317   0025F2  0012               	return		;funcret
  5318   0025F4                     __end_of_ADC_init:
  5319                           	callstack 0
  5320                           
  5321 ;; *************** function _ADC_getval *****************
  5322 ;; Defined at:
  5323 ;;		line 23 in file "ADC.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  tmpval          1   11[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      unsigned char 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;Total ram usage:        1 bytes
  5342 ;; Hardware stack levels used: 1
  5343 ;; Hardware stack levels required when called: 5
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_batteryLevel
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text31
  5352   0025F4                     __ptext31:
  5353                           	callstack 0
  5354   0025F4                     _ADC_getval:
  5355                           	callstack 24
  5356   0025F4                     
  5357                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  5358   0025F4  8060               	bsf	96,0,c	;volatile
  5359   0025F6                     l342:
  5360   0025F6  B060               	btfsc	96,0,c	;volatile
  5361   0025F8  EF00  F013         	goto	u951
  5362   0025FC  EF02  F013         	goto	u950
  5363   002600                     u951:
  5364   002600  EFFB  F012         	goto	l342
  5365   002604                     u950:
  5366   002604                     
  5367                           ;ADC.c: 31:     tmpval = ADRESH;
  5368   002604  CF64 F00C          	movff	3940,ADC_getval@tmpval	;volatile
  5369   002608                     
  5370                           ;ADC.c: 35:     return tmpval;
  5371   002608  500C               	movf	ADC_getval@tmpval^0,w,c
  5372   00260A  0012               	return		;funcret
  5373   00260C                     __end_of_ADC_getval:
  5374                           	callstack 0
  5375                           
  5376 ;; *************** function _Interrupts_init *****************
  5377 ;; Defined at:
  5378 ;;		line 11 in file "interrupts.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		None
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used: 1
  5398 ;; Hardware stack levels required when called: 5
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text32
  5407   002624                     __ptext32:
  5408                           	callstack 0
  5409   002624                     _Interrupts_init:
  5410                           	callstack 25
  5411   002624                     
  5412                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
  5413   002624  8082               	bsf	130,0,c	;volatile
  5414                           
  5415                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
  5416   002626  010E               	movlb	14	; () banked
  5417   002628  919A               	bcf	154,0,b	;volatile
  5418                           
  5419                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
  5420   00262A  8129               	bsf	41,0,b	;volatile
  5421                           
  5422                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
  5423   00262C  811F               	bsf	31,0,b	;volatile
  5424                           
  5425                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
  5426   00262E  90F2               	bcf	242,0,c	;volatile
  5427                           
  5428                           ;interrupts.c: 22:     PIE4bits.RC4IE=1;
  5429   002630  872D               	bsf	45,3,b	;volatile
  5430                           
  5431                           ;interrupts.c: 23:     INTCONbits.PEIE=1;
  5432   002632  8CF2               	bsf	242,6,c	;volatile
  5433                           
  5434                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  5435   002634  8EF2               	bsf	242,7,c	;volatile
  5436   002636                     
  5437                           ; BSR set to: 14
  5438   002636  0012               	return		;funcret
  5439   002638                     __end_of_Interrupts_init:
  5440                           	callstack 0
  5441                           
  5442 ;; *************** function _Buggy_init *****************
  5443 ;; Defined at:
  5444 ;;		line 7 in file "buggysetup.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		None
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used: 1
  5464 ;; Hardware stack levels required when called: 5
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_main
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text33
  5473   002436                     __ptext33:
  5474                           	callstack 0
  5475   002436                     _Buggy_init:
  5476                           	callstack 25
  5477   002436                     
  5478                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  5479   002436  9E7C               	bcf	124,7,c	;volatile
  5480                           
  5481                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  5482   002438  9E84               	bcf	132,7,c	;volatile
  5483                           
  5484                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  5485   00243A  9680               	bcf	128,3,c	;volatile
  5486                           
  5487                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  5488   00243C  9688               	bcf	136,3,c	;volatile
  5489                           
  5490                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  5491   00243E  8486               	bsf	134,2,c	;volatile
  5492                           
  5493                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  5494   002440  010E               	movlb	14	; () banked
  5495   002442  95B4               	bcf	180,2,b	;volatile
  5496                           
  5497                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  5498   002444  8686               	bsf	134,3,c	;volatile
  5499                           
  5500                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  5501   002446  97B4               	bcf	180,3,b	;volatile
  5502                           
  5503                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  5504   002448  9280               	bcf	128,1,c	;volatile
  5505                           
  5506                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  5507   00244A  9288               	bcf	136,1,c	;volatile
  5508                           
  5509                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  5510   00244C  987C               	bcf	124,4,c	;volatile
  5511                           
  5512                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  5513   00244E  9884               	bcf	132,4,c	;volatile
  5514                           
  5515                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  5516   002450  967C               	bcf	124,3,c	;volatile
  5517                           
  5518                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  5519   002452  9684               	bcf	132,3,c	;volatile
  5520                           
  5521                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  5522   002454  97A7               	bcf	167,3,b	;volatile
  5523                           
  5524                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  5525   002456  9080               	bcf	128,0,c	;volatile
  5526                           
  5527                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  5528   002458  9088               	bcf	136,0,c	;volatile
  5529                           
  5530                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  5531   00245A  907E               	bcf	126,0,c	;volatile
  5532                           
  5533                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  5534   00245C  9086               	bcf	134,0,c	;volatile
  5535                           
  5536                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  5537   00245E  907F               	bcf	127,0,c	;volatile
  5538                           
  5539                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  5540   002460  9087               	bcf	135,0,c	;volatile
  5541                           
  5542                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  5543   002462  9E7D               	bcf	125,7,c	;volatile
  5544                           
  5545                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  5546   002464  9E85               	bcf	133,7,c	;volatile
  5547                           
  5548                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  5549   002466  9679               	bcf	121,3,c	;volatile
  5550                           
  5551                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  5552   002468  9681               	bcf	129,3,c	;volatile
  5553   00246A                     
  5554                           ; BSR set to: 14
  5555   00246A  0012               	return		;funcret
  5556   00246C                     __end_of_Buggy_init:
  5557                           	callstack 0
  5558                           
  5559 ;; *************** function _HighISR *****************
  5560 ;; Defined at:
  5561 ;;		line 32 in file "interrupts.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5579 ;;Total ram usage:        2 bytes
  5580 ;; Hardware stack levels used: 1
  5581 ;; Hardware stack levels required when called: 4
  5582 ;; This function calls:
  5583 ;;		_getCharFromTxBuf
  5584 ;;		_isDataInTxBuf
  5585 ;;		_putCharToRxBuf
  5586 ;;		i2_color_clear_init_interrupts
  5587 ;; This function is called by:
  5588 ;;		Interrupt level 2
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	intcode
  5593   000008                     __pintcode:
  5594                           	callstack 0
  5595   000008                     _HighISR:
  5596                           	callstack 21
  5597                           
  5598                           ; BSR set to: 14
  5599                           ;incstack = 0
  5600   000008  8251               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5601   00000A  CFD9 F00A          	movff	fsr2l,??_HighISR
  5602   00000E  CFDA F00B          	movff	fsr2h,??_HighISR+1
  5603   000012                     
  5604                           ;interrupts.c: 36:     if(PIR0bits.INT0IF){
  5605   000012  010E               	movlb	14	; () banked
  5606   000014  A133               	btfss	51,0,b	;volatile
  5607   000016  EF0F  F000         	goto	i2u150_41
  5608   00001A  EF11  F000         	goto	i2u150_40
  5609   00001E                     i2u150_41:
  5610   00001E  EF18  F000         	goto	i2l2815
  5611   000022                     i2u150_40:
  5612   000022                     
  5613                           ; BSR set to: 14
  5614                           ;interrupts.c: 38:     wall = 1;
  5615   000022  0E01               	movlw	1
  5616   000024  0100               	movlb	0	; () banked
  5617   000026  6FEF               	movwf	_wall& (0+255),b
  5618   000028                     
  5619                           ; BSR set to: 0
  5620                           ;interrupts.c: 39:     color_clear_init_interrupts();
  5621   000028  ECB9  F010         	call	i2_color_clear_init_interrupts	;wreg free
  5622   00002C                     
  5623                           ;interrupts.c: 40:     PIR0bits.INT0IF = 0;
  5624   00002C  010E               	movlb	14	; () banked
  5625   00002E  9133               	bcf	51,0,b	;volatile
  5626   000030                     i2l2815:
  5627                           
  5628                           ; BSR set to: 14
  5629                           ;interrupts.c: 48:     if(PIR4bits.RC4IF){
  5630   000030  A737               	btfss	55,3,b	;volatile
  5631   000032  EF1D  F000         	goto	i2u151_41
  5632   000036  EF1F  F000         	goto	i2u151_40
  5633   00003A                     i2u151_41:
  5634   00003A  EF22  F000         	goto	i2l2819
  5635   00003E                     i2u151_40:
  5636   00003E                     
  5637                           ; BSR set to: 14
  5638                           ;interrupts.c: 50:     putCharToRxBuf(RC4REG);
  5639   00003E  51E3               	movf	227,w,b	;volatile
  5640   000040  EC86  F012         	call	_putCharToRxBuf
  5641   000044                     i2l2819:
  5642                           
  5643                           ;interrupts.c: 54:     if(PIR4bits.TX4IF){
  5644   000044  010E               	movlb	14	; () banked
  5645   000046  A537               	btfss	55,2,b	;volatile
  5646   000048  EF28  F000         	goto	i2u152_41
  5647   00004C  EF2A  F000         	goto	i2u152_40
  5648   000050                     i2u152_41:
  5649   000050  EF3A  F000         	goto	i2l261
  5650   000054                     i2u152_40:
  5651   000054                     
  5652                           ; BSR set to: 14
  5653                           ;interrupts.c: 56:     TX4REG = getCharFromTxBuf();
  5654   000054  EC99  F012         	call	_getCharFromTxBuf	;wreg free
  5655   000058  010E               	movlb	14	; () banked
  5656   00005A  6FE4               	movwf	228,b	;volatile
  5657   00005C                     
  5658                           ; BSR set to: 14
  5659                           ;interrupts.c: 57:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  5660   00005C  EC06  F013         	call	_isDataInTxBuf	;wreg free
  5661   000060  0900               	iorlw	0
  5662   000062  A4D8               	btfss	status,2,c
  5663   000064  EF36  F000         	goto	i2u153_41
  5664   000068  EF38  F000         	goto	i2u153_40
  5665   00006C                     i2u153_41:
  5666   00006C  EF3A  F000         	goto	i2l261
  5667   000070                     i2u153_40:
  5668   000070  010E               	movlb	14	; () banked
  5669   000072  952D               	bcf	45,2,b	;volatile
  5670   000074                     i2l261:
  5671   000074  C00B  FFDA         	movff	??_HighISR+1,fsr2h
  5672   000078  C00A  FFD9         	movff	??_HighISR,fsr2l
  5673   00007C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5674   00007E  0011               	retfie		f
  5675   000080                     __end_of_HighISR:
  5676                           	callstack 0
  5677                           
  5678 ;; *************** function i2_color_clear_init_interrupts *****************
  5679 ;; Defined at:
  5680 ;;		line 25 in file "color.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  low_threshol    2    7[COMRAM] unsigned int 
  5685 ;;  high_thresho    2    5[COMRAM] unsigned int 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5698 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5699 ;;Total ram usage:        5 bytes
  5700 ;; Hardware stack levels used: 1
  5701 ;; Hardware stack levels required when called: 3
  5702 ;; This function calls:
  5703 ;;		i2_I2C_2_Master_Start
  5704 ;;		i2_I2C_2_Master_Stop
  5705 ;;		i2_I2C_2_Master_Write
  5706 ;;		i2_color_writetoaddr
  5707 ;; This function is called by:
  5708 ;;		_HighISR
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text35
  5713   002172                     __ptext35:
  5714                           	callstack 0
  5715   002172                     i2_color_clear_init_interrupts:
  5716                           	callstack 21
  5717   002172                     
  5718                           ;color.c: 27:     I2C_2_Master_Start();
  5719   002172  EC3C  F013         	call	i2_I2C_2_Master_Start	;wreg free
  5720                           
  5721                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  5722   002176  0E52               	movlw	82
  5723   002178  EC22  F013         	call	i2_I2C_2_Master_Write
  5724                           
  5725                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  5726   00217C  0EE6               	movlw	230
  5727   00217E  EC22  F013         	call	i2_I2C_2_Master_Write
  5728                           
  5729                           ;color.c: 30:     I2C_2_Master_Stop();
  5730   002182  EC37  F013         	call	i2_I2C_2_Master_Stop	;wreg free
  5731   002186                     
  5732                           ;color.c: 33:     unsigned int high_threshold = ambient + 100;
  5733   002186  0E64               	movlw	100
  5734   002188  244F               	addwf	_ambient^0,w,c
  5735   00218A  6E06               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
  5736   00218C  0E00               	movlw	0
  5737   00218E  2050               	addwfc	(_ambient+1)^0,w,c
  5738   002190  6E07               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
  5739   002192                     
  5740                           ;color.c: 34:     unsigned int low_threshold = ambient - 100;
  5741   002192  0E9C               	movlw	156
  5742   002194  244F               	addwf	_ambient^0,w,c
  5743   002196  6E08               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
  5744   002198  0EFF               	movlw	255
  5745   00219A  2050               	addwfc	(_ambient+1)^0,w,c
  5746   00219C  6E09               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
  5747                           
  5748                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  5749   00219E  0E13               	movlw	19
  5750   0021A0  6E03               	movwf	i2color_writetoaddr@value^0,c
  5751   0021A2  0E00               	movlw	0
  5752   0021A4  ECCE  F012         	call	i2_color_writetoaddr
  5753   0021A8                     
  5754                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5755   0021A8  0E3F               	movlw	63
  5756   0021AA  6E05               	movwf	??i2_color_clear_init_interrupts^0,c
  5757   0021AC  0E55               	movlw	85
  5758   0021AE                     i2u191_47:
  5759   0021AE  2EE8               	decfsz	wreg,f,c
  5760   0021B0  D7FE               	bra	i2u191_47
  5761   0021B2  2E05               	decfsz	??i2_color_clear_init_interrupts^0,f,c
  5762   0021B4  D7FC               	bra	i2u191_47
  5763   0021B6  0000               	nop	
  5764   0021B8                     
  5765                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  5766   0021B8  5007               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
  5767   0021BA  6E03               	movwf	i2color_writetoaddr@value^0,c
  5768   0021BC  0E07               	movlw	7
  5769   0021BE  ECCE  F012         	call	i2_color_writetoaddr
  5770   0021C2                     
  5771                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  5772   0021C2  C006  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
  5773   0021C6  0E06               	movlw	6
  5774   0021C8  ECCE  F012         	call	i2_color_writetoaddr
  5775   0021CC                     
  5776                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  5777   0021CC  5009               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
  5778   0021CE  6E03               	movwf	i2color_writetoaddr@value^0,c
  5779   0021D0  0E05               	movlw	5
  5780   0021D2  ECCE  F012         	call	i2_color_writetoaddr
  5781   0021D6                     
  5782                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  5783   0021D6  C008  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
  5784   0021DA  0E04               	movlw	4
  5785   0021DC  ECCE  F012         	call	i2_color_writetoaddr
  5786   0021E0                     
  5787                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  5788   0021E0  0E04               	movlw	4
  5789   0021E2  6E03               	movwf	i2color_writetoaddr@value^0,c
  5790   0021E4  0E0C               	movlw	12
  5791   0021E6  ECCE  F012         	call	i2_color_writetoaddr
  5792   0021EA  0012               	return		;funcret
  5793   0021EC                     __end_ofi2_color_clear_init_interrupts:
  5794                           	callstack 0
  5795                           
  5796 ;; *************** function i2_color_writetoaddr *****************
  5797 ;; Defined at:
  5798 ;;		line 48 in file "color.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;  address         1    wreg     unsigned char 
  5801 ;;  value           1    2[COMRAM] unsigned char 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;  address         1    3[COMRAM] unsigned char 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5813 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5817 ;;Total ram usage:        2 bytes
  5818 ;; Hardware stack levels used: 1
  5819 ;; Hardware stack levels required when called: 2
  5820 ;; This function calls:
  5821 ;;		i2_I2C_2_Master_Start
  5822 ;;		i2_I2C_2_Master_Stop
  5823 ;;		i2_I2C_2_Master_Write
  5824 ;; This function is called by:
  5825 ;;		i2_color_clear_init_interrupts
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text36
  5830   00259C                     __ptext36:
  5831                           	callstack 0
  5832   00259C                     i2_color_writetoaddr:
  5833                           	callstack 21
  5834                           
  5835                           ;incstack = 0
  5836                           ;i2color_writetoaddr@address stored from wreg
  5837   00259C  6E04               	movwf	i2color_writetoaddr@address^0,c
  5838   00259E                     
  5839                           ;color.c: 49:     I2C_2_Master_Start();
  5840   00259E  EC3C  F013         	call	i2_I2C_2_Master_Start	;wreg free
  5841                           
  5842                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  5843   0025A2  0E52               	movlw	82
  5844   0025A4  EC22  F013         	call	i2_I2C_2_Master_Write
  5845                           
  5846                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  5847   0025A8  5004               	movf	i2color_writetoaddr@address^0,w,c
  5848   0025AA  0980               	iorlw	128
  5849   0025AC  EC22  F013         	call	i2_I2C_2_Master_Write
  5850                           
  5851                           ;color.c: 52:     I2C_2_Master_Write(value);
  5852   0025B0  5003               	movf	i2color_writetoaddr@value^0,w,c
  5853   0025B2  EC22  F013         	call	i2_I2C_2_Master_Write
  5854                           
  5855                           ;color.c: 53:     I2C_2_Master_Stop();
  5856   0025B6  EC37  F013         	call	i2_I2C_2_Master_Stop	;wreg free
  5857   0025BA  0012               	return		;funcret
  5858   0025BC                     __end_ofi2_color_writetoaddr:
  5859                           	callstack 0
  5860                           
  5861 ;; *************** function i2_I2C_2_Master_Write *****************
  5862 ;; Defined at:
  5863 ;;		line 45 in file "i2c.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  data_byte       1    wreg     unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  data_byte       1    1[COMRAM] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  1    wreg      void 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5881 ;;Total ram usage:        1 bytes
  5882 ;; Hardware stack levels used: 1
  5883 ;; Hardware stack levels required when called: 1
  5884 ;; This function calls:
  5885 ;;		i2_I2C_2_Master_Idle
  5886 ;; This function is called by:
  5887 ;;		i2_color_clear_init_interrupts
  5888 ;;		i2_color_writetoaddr
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text37
  5893   002644                     __ptext37:
  5894                           	callstack 0
  5895   002644                     i2_I2C_2_Master_Write:
  5896                           	callstack 21
  5897                           
  5898                           ;incstack = 0
  5899                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  5900   002644  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  5901   002646                     
  5902                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5903   002646  EC5F  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5904   00264A                     
  5905                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5906   00264A  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  5907   00264E  0012               	return		;funcret
  5908   002650                     __end_ofi2_I2C_2_Master_Write:
  5909                           	callstack 0
  5910                           
  5911 ;; *************** function i2_I2C_2_Master_Stop *****************
  5912 ;; Defined at:
  5913 ;;		line 39 in file "i2c.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;		None
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      void 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2, status,0, cstack
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;Total ram usage:        0 bytes
  5932 ;; Hardware stack levels used: 1
  5933 ;; Hardware stack levels required when called: 1
  5934 ;; This function calls:
  5935 ;;		i2_I2C_2_Master_Idle
  5936 ;; This function is called by:
  5937 ;;		i2_color_clear_init_interrupts
  5938 ;;		i2_color_writetoaddr
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text38
  5943   00266E                     __ptext38:
  5944                           	callstack 0
  5945   00266E                     i2_I2C_2_Master_Stop:
  5946                           	callstack 21
  5947   00266E                     
  5948                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5949   00266E  EC5F  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5950   002672                     
  5951                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5952   002672  010E               	movlb	14	; () banked
  5953   002674  85DA               	bsf	218,2,b	;volatile
  5954   002676                     
  5955                           ; BSR set to: 14
  5956   002676  0012               	return		;funcret
  5957   002678                     __end_ofi2_I2C_2_Master_Stop:
  5958                           	callstack 0
  5959                           
  5960 ;; *************** function i2_I2C_2_Master_Start *****************
  5961 ;; Defined at:
  5962 ;;		line 27 in file "i2c.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;		None
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;		None
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;Total ram usage:        0 bytes
  5981 ;; Hardware stack levels used: 1
  5982 ;; Hardware stack levels required when called: 1
  5983 ;; This function calls:
  5984 ;;		i2_I2C_2_Master_Idle
  5985 ;; This function is called by:
  5986 ;;		i2_color_clear_init_interrupts
  5987 ;;		i2_color_writetoaddr
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text39
  5992   002678                     __ptext39:
  5993                           	callstack 0
  5994   002678                     i2_I2C_2_Master_Start:
  5995                           	callstack 21
  5996   002678                     
  5997                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5998   002678  EC5F  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5999   00267C                     
  6000                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6001   00267C  010E               	movlb	14	; () banked
  6002   00267E  81DA               	bsf	218,0,b	;volatile
  6003   002680                     
  6004                           ; BSR set to: 14
  6005   002680  0012               	return		;funcret
  6006   002682                     __end_ofi2_I2C_2_Master_Start:
  6007                           	callstack 0
  6008                           
  6009 ;; *************** function i2_I2C_2_Master_Idle *****************
  6010 ;; Defined at:
  6011 ;;		line 22 in file "i2c.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;Total ram usage:        1 bytes
  6030 ;; Hardware stack levels used: 1
  6031 ;; This function calls:
  6032 ;;		Nothing
  6033 ;; This function is called by:
  6034 ;;		i2_I2C_2_Master_Start
  6035 ;;		i2_I2C_2_Master_Stop
  6036 ;;		i2_I2C_2_Master_Write
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text40
  6041   0024BE                     __ptext40:
  6042                           	callstack 0
  6043   0024BE                     i2_I2C_2_Master_Idle:
  6044                           	callstack 21
  6045   0024BE                     i2l158:
  6046   0024BE  010E               	movlb	14	; () banked
  6047   0024C0  B5D8               	btfsc	216,2,b	;volatile
  6048   0024C2  EF65  F012         	goto	i2u87_41
  6049   0024C6  EF67  F012         	goto	i2u87_40
  6050   0024CA                     i2u87_41:
  6051   0024CA  EF5F  F012         	goto	i2l158
  6052   0024CE                     i2u87_40:
  6053   0024CE                     
  6054                           ; BSR set to: 14
  6055   0024CE  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  6056   0024D2  0E1F               	movlw	31
  6057   0024D4  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  6058   0024D6  A4D8               	btfss	status,2,c
  6059   0024D8  EF70  F012         	goto	i2u88_41
  6060   0024DC  EF72  F012         	goto	i2u88_40
  6061   0024E0                     i2u88_41:
  6062   0024E0  EF5F  F012         	goto	i2l158
  6063   0024E4                     i2u88_40:
  6064   0024E4                     
  6065                           ; BSR set to: 14
  6066   0024E4  0012               	return		;funcret
  6067   0024E6                     __end_ofi2_I2C_2_Master_Idle:
  6068                           	callstack 0
  6069                           
  6070 ;; *************** function _putCharToRxBuf *****************
  6071 ;; Defined at:
  6072 ;;		line 33 in file "serial.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  byte            1    wreg     unsigned char 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  byte            1    0[COMRAM] unsigned char 
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  1    wreg      void 
  6079 ;; Registers used:
  6080 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6090 ;;Total ram usage:        1 bytes
  6091 ;; Hardware stack levels used: 1
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_HighISR
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text41
  6100   00250C                     __ptext41:
  6101                           	callstack 0
  6102   00250C                     _putCharToRxBuf:
  6103                           	callstack 24
  6104                           
  6105                           ; BSR set to: 14
  6106                           ;incstack = 0
  6107                           ;putCharToRxBuf@byte stored from wreg
  6108   00250C  6E01               	movwf	putCharToRxBuf@byte^0,c
  6109   00250E                     
  6110                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  6111   00250E  0E13               	movlw	19
  6112   002510  644E               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  6113   002512  EF8D  F012         	goto	i2u140_41
  6114   002516  EF8F  F012         	goto	i2u140_40
  6115   00251A                     i2u140_41:
  6116   00251A  EF91  F012         	goto	i2l2675
  6117   00251E                     i2u140_40:
  6118   00251E  0E00               	movlw	0
  6119   002520  6E4E               	movwf	_RxBufWriteCnt^0,c	;volatile
  6120   002522                     i2l2675:
  6121                           
  6122                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  6123   002522  504E               	movf	_RxBufWriteCnt^0,w,c
  6124   002524  0F37               	addlw	low _EUSART4RXbuf
  6125   002526  6ED9               	movwf	fsr2l,c
  6126   002528  6ADA               	clrf	fsr2h,c
  6127   00252A  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  6128   00252E  2A4E               	incf	_RxBufWriteCnt^0,f,c	;volatile
  6129   002530  0012               	return		;funcret
  6130   002532                     __end_of_putCharToRxBuf:
  6131                           	callstack 0
  6132                           
  6133 ;; *************** function _isDataInTxBuf *****************
  6134 ;; Defined at:
  6135 ;;		line 61 in file "serial.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      unsigned char 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6153 ;;Total ram usage:        0 bytes
  6154 ;; Hardware stack levels used: 1
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_HighISR
  6159 ;;		_sendTxBuf
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text42
  6164   00260C                     __ptext42:
  6165                           	callstack 0
  6166   00260C                     _isDataInTxBuf:
  6167                           	callstack 24
  6168   00260C                     
  6169                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  6170   00260C  504B               	movf	_TxBufReadCnt^0,w,c	;volatile
  6171   00260E  184C               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6172   002610  A4D8               	btfss	status,2,c
  6173   002612  EF0D  F013         	goto	i2u142_41
  6174   002616  EF10  F013         	goto	i2u142_40
  6175   00261A                     i2u142_41:
  6176   00261A  0E01               	movlw	1
  6177   00261C  EF11  F013         	goto	i2u143_40
  6178   002620                     i2u142_40:
  6179   002620  0E00               	movlw	0
  6180   002622                     i2u143_40:
  6181   002622  0012               	return		;funcret
  6182   002624                     __end_of_isDataInTxBuf:
  6183                           	callstack 0
  6184                           
  6185 ;; *************** function _getCharFromTxBuf *****************
  6186 ;; Defined at:
  6187 ;;		line 47 in file "serial.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      unsigned char 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6205 ;;Total ram usage:        1 bytes
  6206 ;; Hardware stack levels used: 1
  6207 ;; This function calls:
  6208 ;;		Nothing
  6209 ;; This function is called by:
  6210 ;;		_HighISR
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text43
  6215   002532                     __ptext43:
  6216                           	callstack 0
  6217   002532                     _getCharFromTxBuf:
  6218                           	callstack 24
  6219   002532                     
  6220                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  6221   002532  0E3B               	movlw	59
  6222   002534  644B               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  6223   002536  EF9F  F012         	goto	i2u141_41
  6224   00253A  EFA1  F012         	goto	i2u141_40
  6225   00253E                     i2u141_41:
  6226   00253E  EFA3  F012         	goto	i2l2683
  6227   002542                     i2u141_40:
  6228   002542  0E00               	movlw	0
  6229   002544  6E4B               	movwf	_TxBufReadCnt^0,c	;volatile
  6230   002546                     i2l2683:
  6231                           
  6232                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  6233   002546  2A4B               	incf	_TxBufReadCnt^0,f,c	;volatile
  6234   002548  044B               	decf	_TxBufReadCnt^0,w,c	;volatile
  6235   00254A  6E01               	movwf	??_getCharFromTxBuf^0,c
  6236   00254C  5001               	movf	??_getCharFromTxBuf^0,w,c
  6237   00254E  0FB3               	addlw	low _EUSART4TXbuf
  6238   002550  6ED9               	movwf	fsr2l,c
  6239   002552  6ADA               	clrf	fsr2h,c
  6240   002554  50DF               	movf	indf2,w,c
  6241   002556  0012               	return		;funcret
  6242   002558                     __end_of_getCharFromTxBuf:
  6243                           	callstack 0
  6244                           
  6245                           	psect	smallconst
  6246   000E00                     __psmallconst:
  6247                           	callstack 0
  6248   000E00  00                 	db	0
  6249   000E01  00                 	db	0	; dummy byte at the end
  6250   000000                     
  6251                           	psect	rparam
  6252   000000                     
  6253                           	psect	temp
  6254   000051                     btemp:
  6255                           	callstack 0
  6256   000051                     	ds	1
  6257   000000                     int$flags	set	btemp
  6258   000000                     wtemp8	set	btemp+1
  6259   000000                     ttemp5	set	btemp+1
  6260   000000                     ttemp6	set	btemp+4
  6261   000000                     ttemp7	set	btemp+8
  6262                           
  6263                           	psect	config
  6264                           
  6265                           ;Config register CONFIG1L @ 0x300000
  6266                           ;	External Oscillator mode Selection bits
  6267                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6268                           ;	Power-up default value for COSC bits
  6269                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6270   300000                     	org	3145728
  6271   300000  AA                 	db	170
  6272                           
  6273                           ;Config register CONFIG1H @ 0x300001
  6274                           ;	unspecified, using default values
  6275                           ;	Clock Out Enable bit
  6276                           ;	CLKOUTEN = 0x1, unprogrammed default
  6277                           ;	Clock Switch Enable bit
  6278                           ;	CSWEN = 0x1, unprogrammed default
  6279                           ;	Fail-Safe Clock Monitor Enable bit
  6280                           ;	FCMEN = 0x1, unprogrammed default
  6281   300001                     	org	3145729
  6282   300001  FF                 	db	255
  6283                           
  6284                           ;Config register CONFIG3L @ 0x300004
  6285                           ;	WDT Period Select bits
  6286                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6287                           ;	WDT operating mode
  6288                           ;	WDTE = OFF, WDT Disabled
  6289   300004                     	org	3145732
  6290   300004  9F                 	db	159
  6291                           
  6292                           ;Config register CONFIG3H @ 0x300005
  6293                           ;	unspecified, using default values
  6294                           ;	WDT Window Select bits
  6295                           ;	WDTCWS = 0x7, unprogrammed default
  6296                           ;	WDT input clock selector
  6297                           ;	WDTCCS = 0x7, unprogrammed default
  6298   300005                     	org	3145733
  6299   300005  FF                 	db	255
  6300                           tosu	equ	0xFFF
  6301                           tosh	equ	0xFFE
  6302                           tosl	equ	0xFFD
  6303                           stkptr	equ	0xFFC
  6304                           pclatu	equ	0xFFB
  6305                           pclath	equ	0xFFA
  6306                           pcl	equ	0xFF9
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           indf0	equ	0xFEF
  6314                           postinc0	equ	0xFEE
  6315                           postdec0	equ	0xFED
  6316                           preinc0	equ	0xFEC
  6317                           plusw0	equ	0xFEB
  6318                           fsr0h	equ	0xFEA
  6319                           fsr0l	equ	0xFE9
  6320                           wreg	equ	0xFE8
  6321                           indf1	equ	0xFE7
  6322                           postinc1	equ	0xFE6
  6323                           postdec1	equ	0xFE5
  6324                           preinc1	equ	0xFE4
  6325                           plusw1	equ	0xFE3
  6326                           fsr1h	equ	0xFE2
  6327                           fsr1l	equ	0xFE1
  6328                           bsr	equ	0xFE0
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           preinc2	equ	0xFDC
  6333                           plusw2	equ	0xFDB
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      80
    BANK0           160     83     144
    BANK1           256      0      40
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _stop->_setMotorPWM
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _batteryLevel->___awdiv

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                87    87      0   42003
                                             52 COMRAM     2     2      0
                                              0 BANK0     83    83      0
                         _Buggy_init
                    _Interrupts_init
                       _batteryLevel
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             29 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   28188
                                             41 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             29 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             29 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             29 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    5029
                                             29 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             24 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             17 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     483
                                             15 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             12 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    1965
                                             37 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                             11 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             23 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     170
                                             11 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    1612
                                             20 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0     862
                                             15 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             13 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             12 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             19 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             11 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0     356
                                              9 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        5     5      0     334
                                              4 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _color_writetoaddr
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _stop
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      28       7       15.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      50       1       85.1%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllhl     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllhl     11      0       0      51        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRllllhl      C      0       0      49        0.0%
BITBIGSFRlllllh      9      0       0      61        0.0%
BITBIGSFRllllhh      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllhl      6      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRllllhl      3      0       0      54        0.0%
BITBIGSFRllllhl      3      0       0      60        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllhl      1      0       0      53        0.0%
BITBIGSFRlllllh      1      0       0      62        0.0%
BITBIGSFRllllhl      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     108      65        0.0%
DATA                 0      0     108       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 09 12:29:30 2024

                                _white_Light 2558                                           l67 15AC  
                                         l69 15BA                                 ___awdiv@sign 0011  
                        ___wmul@multiplicand 000E                             main@turnDuration 008B  
                          ??_Interrupts_init 000C                                          l103 2434  
                                        l120 1CD6                                          l112 2574  
                                        l106 2170                                          l114 257A  
                                        l124 2324                                          l109 259A  
                                        l117 1350                                          l207 246A  
                                        l128 2326                                          l161 24BC  
                                        l170 2662                                          l155 2494  
                                        l252 2636                                          l164 266C  
                                        l173 2642                                          l501 1FA2  
                                        l342 25F6                                          l158 2496  
                                        l510 143E                                          l167 2658  
                                        l344 2604                                          l360 2374  
                                        l176 23FC                                          l432 1B94  
                                        l512 1462                                          l345 260A  
                                        l425 20F6                                          l506 13D2  
                                        l450 117A                                          l339 25F2  
                                        l515 14D6                                          l356 235C  
                                        l292 25D8                                          l357 235E  
                                        l358 2372                                          l518 1514  
                                        l615 1DE2                                          l463 190E  
                                        l455 1E92                                          l536 250A  
                                        l472 1A12                                          l480 1758  
                                        l448 117A                                          l458 1ED0  
                                        l547 22B8                                          l475 1A40  
                                        l467 197A                                          l548 22C8  
                                        l492 188A                                          l484 17C4  
                                        l469 199E                                          l486 17E8  
                                        l497 1F56                                          l489 185C  
                                        l767 2066                                          u820 24A6  
                                        u900 1B18                                          u821 24A2  
                                        u901 1B14                                          u830 24BC  
                                        u910 1F7A                                          u831 24B8  
                                        u911 1F76                                          u840 2206  
                                        u920 1FA2                                          u841 2202  
                                        u921 1F9E                                          u930 23E6  
                                        u850 2224                                          u931 23DE  
                                        u851 2220                                          u860 2240  
                                        u861 223C                                          u950 2604  
                                        u951 2600                                          u960 177C  
                                        u961 1778                                          u890 1A5C  
                                        u970 17A4                                          u891 1A58  
                                        u971 17A0                                          u948 23E8  
                                        u980 17E8                                          u981 17E4  
                                        u990 17FC                                          u991 17F8  
                              ?_color_detect 000C                          i2_color_writetoaddr 259C  
                                        wreg 0FE8    color_clear_init_interrupts@high_threshold 0011  
i2color_clear_init_interrupts@high_threshold 0006                              _color_normalise 1B96  
                                       l1034 225E                                         l1027 2256  
                                       l2101 1A42                                         l2111 1AFE  
                                       l2103 1A5C                                         l2201 25EC  
                                       l2113 1B18                                         l2105 1AAA  
                                       l2203 25EE                                         l2051 2496  
                                       l2115 1B58                                         l2107 1ABC  
                                       l2131 1EEE                                         l2205 25F0  
                                       l2053 24A6                                         l2061 263E  
                                       l2109 1AC0                                         l2141 1F42  
                                       l2133 1EFA                                         l2301 1A36  
                                       l2221 1730                                         l2213 16D6  
                                       l2207 25F4                                         l2151 2476  
                                       l2055 2664                                         l2063 265A  
                                       l2143 1F52                                         l2135 1F26  
                                       l2311 13A2                                         l2223 1738  
                                       l2231 1780                                         l2215 16F0  
                                       l2209 2608                                         l2153 247C  
                                       l2057 2668                                         l2065 265E  
                                       l2161 20F8                                         l2401 1DC2  
                                       l2081 2216                                         l2073 21EC  
                                       l2145 1F7A                                         l2137 1F2E  
                                       l2129 1ED2                                         l2321 13F6  
                                       l2313 13AA                                         l2305 1352  
                                       l2233 17A4                                         l2225 1744  
                                       l2217 16FC                                         l2411 1FB6  
                                       l2155 247E                                         l2059 263A  
                                       l2171 2148                                         l2163 210C  
                                       l2403 1DD2                                         l2091 224A  
                                       l2083 2224                                         l2075 21F4  
                                       l2067 24E6                                         l2139 1F36  
                                       l2147 1F7E                                         l2331 1468  
                                       l2315 13B2                                         l2323 13FA  
                                       l2307 136A                                         l2251 1848  
                                       l2243 1800                                         l2235 17B0  
                                       l2227 1754                                         l2219 1728  
                                       l2421 1FDC                                         l2413 1FBE  
                                       l2157 2480                                         l2149 246C  
                                       l2173 2152                                         l2165 2118  
                                       l2181 2654                                         l2501 20EA  
                                       l2093 2250                                         l2085 222A  
                                       l2077 2206                                         l2069 2502  
                                       l2341 14B6                                         l2325 141E  
                                       l2317 13BE                                         l2309 1376  
                                       l2261 18A6                                         l2253 1858  
                                       l2245 182C                                         l2237 17C0  
                                       l2229 177C                                         l2431 2014  
                                       l2423 1FE4                                         l2415 1FC2  
                                       l2407 1FA4                                         l2511 2356  
                                       l2159 2482                                         l2175 215C  
                                       l2167 212E                                         l2191 23F8  
                                       l2183 23BE                                         l2503 20F4  
                                       l2087 2240                                         l2079 220E  
                                       l2343 14C2                                         l2351 1504  
                                       l2335 147A                                         l2327 142A  
                                       l2319 13CE                                         l2271 18FA  
                                       l2263 18B2                                         l2255 1880  
                                       l2247 1834                                         l2239 17EE  
                                       l2441 2040                                         l2433 201A  
                                       l2425 1FF6                                         l2417 1FD0  
                                       l2409 1FA8                                         l2513 236C  
                                       l2505 2328                                         l2177 2166  
                                       l2169 213E                                         l2361 2298  
                                       l2353 2260                                         l2193 23FA  
                                       l2185 23C2                                         l2521 1196  
                                       l2089 2248                                         l2345 14D2  
                                       l2337 14A6                                         l2329 143A  
                                       l2281 1966                                         l2273 190A  
                                       l2265 18DE                                         l2249 183C  
                                       l2601 0ECC                                         l2435 2030  
                                       l2427 1FFE                                         l2443 2046  
                                       l2419 1FD8                                         l2507 2332  
                                       l2099 257E                                         l2371 1CFE  
                                       l2363 1CD8                                         l2355 2270  
                                       l2187 23CA                                         l2179 2650  
                                       l2531 1296                                         l2523 11AE  
                                       l2347 14FA                                         l2339 14AE  
                                       l2291 19E2                                         l2283 1976  
                                       l2275 1932                                         l2267 18E6  
                                       l2259 188C                                         l2611 0F42  
                                       l2515 255A                                         l2453 2436  
                                       l2197 25DA                                         l2445 2056  
                                       l2437 2038                                         l2429 2006  
                                       l2509 2348                                         l2461 241C  
                                       l2381 1D46                                         l2373 1D0C  
                                       l2365 1CDC                                         l2357 227E  
                                       l2189 23D2                                         l2533 12F2  
                                       l2525 1202                                         l2293 19EA  
                                       l2285 19A4                                         l2269 18EE  
                                       l2277 1936                                         l2613 0F72  
                                       l2621 0FD6                                         l2605 0F00  
                                       l2517 256A                                         l2199 25E4  
                                       l2447 205E                                         l2439 203A  
                                       l2463 2426                                         l2455 23FE  
                                       l2391 1D90                                         l2383 1D4E  
                                       l2375 1D1C                                         l2367 1CEA  
                                       l2359 228E                                         l2535 130E  
                                       l2527 121E                                         l2519 117C  
                                       l2471 25C6                                         l2295 19F2  
                                       l2279 195A                                         l2631 1060  
                                       l2623 0FE8                                         l2615 0F8A  
                                       l2607 0F12                                         l2551 1E7E  
                                       l2543 1E36                                         l2465 2430  
                                       l2457 2402                                         l2393 1DA0  
                                       l2385 1D5A                                         l2377 1D20  
                                       l2369 1CFA                                         l2561 1B96  
                                       l2529 127A                                         l2481 2068  
                                       l2473 25C8                                         l2297 19FE  
                                       l2289 19B6                                         l2641 1102  
                                       l2625 1000                                         l2633 1090  
                                       l2617 0FBA                                         l2609 0F2A  
                                       l2553 1E8E                                         l2545 1E62  
                                       l2537 1DE4                                         l2801 169C  
                                       l2721 1522                                         l2467 2624  
                                       l2459 240C                                         l2571 22CE  
                                       l2395 1DA2                                         l2387 1D68  
                                       l2379 1D30                                         l2563 1BA8  
                                       l2491 20D0                                         l2483 2078  
                                       l2475 25D2                                         l2299 1A0E  
                                       l2635 10A2                                         l2627 1018  
                                       l2555 1EB6                                         l2547 1E6A  
                                       l2539 1E24                                         l2803 16C4  
                                       l2731 153E                                         l2723 1526  
                                       l2581 2320                                         l2573 22E4  
                                       l2397 1DAC                                         l2389 1D72  
                                       l2565 1C0A                                         l2493 20D2  
                                       l2485 209E                                         l2477 25D4  
                                       l2469 25BC                                         l2637 10BA  
                                       l2645 111E                                         l2629 1048  
                                       l2549 1E72                                         l2805 16CA  
                                       l2741 155C                                         l2733 1544  
                                       l2725 152A                                         l2717 1516  
                                       l2575 22EC                                         l2399 1DB2  
                                       l2567 1C70                                         l2495 20DC  
                                       l2487 20A2                                         l2479 25D6  
                                       l2647 1130                                         l2639 10D2  
                                       l2591 0E42                                         l2559 1EC0  
                                       l2751 1574                                         l2743 1564  
                                       l2735 1548                                         l2727 152E  
                                       l2719 1522                                         l2577 2302  
                                       l2569 22CA                                         l2497 20DE  
                                       l2489 20C6                                         l2657 114C  
                                       l2593 0E72                                         l2585 0E02  
                                       l2761 1594                                         l2753 157C  
                                       l2745 1568                                         l2737 154C  
                                       l2729 1532                                         l2579 230A  
                                       l2499 20E8                                         l2659 115E  
                                       l2587 0E12                                         l2595 0E8A  
                                       l2771 15A8                                         l2763 1598  
                                       l2755 1584                                         l2747 156C  
                                       l2739 1554                                         l2597 0E9C  
                                       l2589 0E2A                                         l2781 1600  
                                       l2773 15C2                                         l2765 159C  
                                       l2757 158C                                         l2749 1570  
                                       l2599 0EB4                                         l2791 164C  
                                       l2783 1608                                         l2775 15DA  
                                       l2767 15A0                                         l2759 1590  
                                       l2793 1650                                         l2785 1620  
                                       l2777 15E0                                         l2769 15A4  
                                       l2795 1660                                         l2787 1626  
                                       l2779 15F8                                         l2797 1668  
                                       l2789 163A                                         l2799 1682  
                                       u1000 1880                                         u1001 187C  
                                       u1010 1932                                         u1011 192E  
                                       u1100 14FA                                         u1020 195A  
                                       u1101 14F6                                         u1021 1956  
                                       u1110 227E                                         u1030 199E  
                                       u1111 227A                                         u1031 199A  
                                       u1200 1FD0                                         u1120 22B8  
                                       u1040 19B2                                         u1201 1FCC  
                                       u1121 22B4                                         u1041 19AE  
                                       u1210 1FF6                                         u1130 1CEA  
                                       u1050 1A36                                         u1211 1FF2  
                                       u1131 1CE6                                         u1051 1A32  
                                       u1220 2014                                         u1300 22E4  
                                       u1140 1D0C                                         u1060 13F6  
                                       u1221 2010                                         u1301 22E0  
                                       u1141 1D08                                         u1061 13F2  
                                       u1230 2030                                         u1310 2302  
                                       u1150 1D46                                         u1070 141E  
                                       u1231 202C                                         u1311 22FE  
                                       u1151 1D42                                         u1071 141A  
                                       u1240 2056                                         u1320 2320  
                                       u1160 1D68                                         u1080 1462  
                                       u1241 2052                                         u1321 231C  
                                       u1161 1D64                                         u1081 145E  
                                       u1250 2356                                         u1170 1D90  
                                       u1090 1476                                         u1330 0E12  
                                       u1251 2352                                         u1171 1D8C  
                                       u1091 1472                                         u1331 0E0E  
                                       u1260 236C                                         u1180 1DC2  
                                       u1340 0E9C                                         u1261 2368  
                                       u1181 1DBE                                         u1341 0E98  
                                       u1190 1FB6                                         u1350 0F12  
                                       u1270 256A                                         u1191 1FB2  
                                       u1351 0F0E                                         u1271 2566  
                                       u1360 0FE8                                         u1280 1E32  
                               _BAUD4CONbits 0EE9                                         u1361 0FE4  
                                       u1281 1E2E                                         u1370 10A2  
                                       u1290 1EB6                                         u1371 109E  
                                       u1291 1EB2                                         u1451 151C  
                                       u1380 1130                                         u1460 15BA  
                                       u1381 112C                                         u1461 15B6  
                                       u1390 115E                                         u1470 164C  
                                       u1391 115A                                         u1471 1648  
                                       u1481 1672                                         _T2PR 0FBC  
                                       u1707 0F34                                         u1491 168C  
                                       u1627 15CC                                         u1717 0F64  
                                       u1637 15EA                                         u1807 17B6  
                                       u1727 0F94                                         u1647 1612  
                                       u1817 184E                                         u1737 0FC4  
                                       u1657 1E84                                         u1907 2134  
                                       u1827 1900                                         u1747 100A  
                                       u1667 0E34                                         u1837 196C  
                                       u1757 103A                                         u1677 0E64  
                                       u1847 1A04                                         u1767 106A  
                                       u1687 0EBE                                         u1857 13C4  
                                       u1777 10C4                                         u1697 0EEE  
                                       u1867 1430                                         u1787 10F4  
                                       u1877 14C8                                         u1797 174A  
                                       u1887 1F48                                         u1897 2412  
                                       _main 1516                                         _move 0E02  
                                       _wall 00EF                                         fsr1h 0FE2  
                                       fsr2h 0FDA                                         indf1 0FE7  
                                       indf2 0FDF                                         fsr1l 0FE1  
                                       fsr2l 0FD9                                         btemp 0051  
                                       _stop 1DE4                                         prodh 0FF4  
                                       prodl 0FF3                                         start 0080  
                        main@reverseDuration 0089                             __end_of_ADC_init 25F4  
                       ?i2_color_writetoaddr 0003                              __end_of_HighISR 0080  
                               ___param_bank 0000                         __end_of_batteryLevel 2376  
                            __end_of___aldiv 1DE4                                        ?_main 0001  
                                      _ADPCH 0F5F                              __end_of___awdiv 2068  
                                      ?_move 002A                                        ?_stop 001E  
                            ___awdiv@divisor 000E                              __end_of___lwdiv 2260  
                                      i2l106 21EA                                        i2l300 2530  
                                      i2l109 25BA                                        i2l161 24E4  
                                      i2l314 2622                                        i2l170 2676  
                                      i2l307 2556                                        i2l164 2680  
                                      i2l173 264E                                        i2l261 0074  
                                      i2l158 24BE                              ___awdiv@counter 0010  
                             ??_color_detect 0014                          ___lmul@multiplicand 0010  
                 __end_of_I2C_2_Master_Start 266E                   __end_of_I2C_2_Master_Write 2644  
                                 _Buggy_init 2436                                        tablat 0FF5  
                                      plusw0 0FEB                                        plusw2 0FDB  
                                      ttemp5 0052                                        ttemp6 0055  
                                      ttemp7 0059                                        stop@i 0024  
                                      status 0FD8                                        wtemp8 0052  
                          color_detect@color 0014                        ??i2_color_writetoaddr 0004  
                               main@turnRamp 008C                        _I2C_2_Master_RepStart 2650  
                         putCharToRxBuf@byte 0001                              __initialization 2376  
                               __end_of_main 16D6                                 __end_of_move 117C  
                               __end_of_stop 1ED2                          move@reverseDuration 002E  
                                     ??_main 0035                                       ??_move 0033  
                                     ??_stop 0021                                __activetblptr 0000  
                    __end_of_color_normalise 1CD8                                 ?_setMotorPWM 0019  
                                     _ADRESH 0F64                                       _CCPR1H 0FAA  
                                     _CCPR2H 0FA6                                       _CCPR3H 0F25  
                                     _CCPR4H 0F21                             ___awdiv@dividend 000C  
                                     _RC0PPS 0E62                                       _RC4REG 0EE3  
                                     _RE2PPS 0E74                                       _RC7PPS 0E69  
                                     _RD5PPS 0E6F                                       _RE4PPS 0E76  
                                     _RD6PPS 0E70                                       i2l2121 266E  
                                     i2l2123 2672                                       i2l2117 2678  
                                     i2l2125 2646                                       i2l2119 267C  
                                     i2l2127 264A                                       i2l2095 24BE  
                                     i2l2097 24CE                                       i2l2451 259E  
                                     i2l2701 2186                                       i2l2711 21CC  
                                     i2l2703 2192                                       i2l2713 21D6  
                                     i2l2705 21A8                                       i2l2715 21E0  
                                     i2l2707 21B8                                       i2l2811 0028  
                                     i2l2709 21C2                                       i2l2821 0054  
                                     i2l2813 002C                                       i2l2671 250E  
                                     i2l2823 005C                                       i2l2815 0030  
                                     i2l2807 0012                                       i2l2681 2542  
                                     i2l2673 251E                                       i2l2825 0070  
                                     i2l2817 003E                                       i2l2809 0022  
                                     i2l2683 2546                                       i2l2675 2522  
                                     i2l2819 0044                                       i2l2677 252E  
                                     i2l2679 2532                                       i2l2687 260C  
                                     i2l2699 2172                                       _RG6PPS 0E88  
                                  ??_HighISR 000A                     __end_of_color_click_init 2436  
                                     _RX4PPS 0E15                                       _TX4REG 0EE4  
                               ??_ADC_getval 000C                                 _CCPTMRS0bits 0FAD  
                           _getCharFromTxBuf 2532                                       ___lmul 2260  
                                  ??___aldiv 0020                                       ___wmul 24E6  
                                  ??___awdiv 0010                                    ??___lwdiv 0016  
                         color_detect@RGBC_n 000C                                       clear_0 2394  
                                     clear_1 23A0                                       clear_2 23AC  
                           ___awdiv@quotient 0012                                       isa$std 0001  
                               __pdataCOMRAM 004F                                       move@mL 002A  
                                     move@mR 002B                                 __mediumconst 0000  
                                     tblptrh 0FF7                                       tblptrl 0FF6  
                                     tblptru 0FF8                                    ?_ADC_init 0001  
                                     stop@mL 001E                                       stop@mR 001F  
                                ?_Buggy_init 0001                            ??_initDCmotorsPWM 000E  
                         __end_of_ADC_getval 260C                   i2color_writetoaddr@address 0004  
                           __end_of_turnLeft 1A42                        __end_of_isDataInTxBuf 2624  
                                 __accesstop 0060                      __end_of__initialization 23B2  
                            fullSpeedAhead@i 0025                                main@turnSpeed 008A  
                     ?_I2C_2_Master_RepStart 0001                                ___rparam_used 0001  
                       __end_of_color_detect 2328                              _Interrupts_init 2624  
                             __pcstackCOMRAM 0001                                 ?_white_Light 0001  
               ?_color_clear_init_interrupts 0001                             _reverseOneSquare 1352  
                           ?_color_normalise 0026                                   ??_ADC_init 000C  
                               _batteryLevel 2328                                   __pbssBANK0 00B3  
                                 __pbssBANK1 0100                            _color_writetoaddr 257C  
                               _T2CLKCONbits 0FBF                           ?_color_writetoaddr 000E  
                                    ?___lmul 000C                                      ?___wmul 000C  
                             ___lmul@product 0014                ??_color_clear_init_interrupts 0010  
                        ??_color_writetoaddr 000F                                      _SP4BRGH 0EE6  
                                    _SP4BRGL 0EE5                   fullSpeedAhead@straightRamp 0021  
                      turnRight@turnDuration 0021                                      i2u87_40 24CE  
                                    i2u87_41 24CA                                      i2u88_40 24E4  
                                    i2u88_41 24E0                                      _SSP2ADD 0ED6  
                                    _SSP2BUF 0ED5                                   _color_read 117C  
                    __end_of_Interrupts_init 2638                       color_writetoaddr@value 000E  
                                    _HighISR 0008                    __end_of_color_writetoaddr 259C  
                                  _ADREFbits 0F58                           _I2C_2_Master_Start 2664  
                                 _initUSART4 25BC                          i2_I2C_2_Master_Idle 24BE  
                         _I2C_2_Master_Write 2638                                      __Hparam 0000  
                        i2_I2C_2_Master_Stop 266E                                      __Lparam 0000  
                                    ___aldiv 1CD8                                      ___awdiv 1FA4  
                        ?_I2C_2_Master_Start 0001                                      ___lwdiv 21EC  
                        ?_I2C_2_Master_Write 0001                                 __psmallconst 0E00  
                                    _ambient 004F                                      __pcinit 2376  
                                    __ramtop 0E00                                    ?_turnLeft 001E  
                                    __ptext0 1516                                      __ptext1 2558  
                                    __ptext2 1DE4                                      __ptext3 0E02  
                                    __ptext4 16D6                                      __ptext5 188C  
                                    __ptext6 1352                                      __ptext7 1ED2  
                                    __ptext8 1A42                                      __ptext9 24E6  
                       ?i2_I2C_2_Master_Idle 0001                                    _T2CONbits 0FBD  
                       ?i2_I2C_2_Master_Stop 0001                             ___aldiv@dividend 0018  
                                  _T2HLTbits 0FBE                                _RxBufWriteCnt 004E  
                   __end_of_getCharFromTxBuf 2558                                      main@buf 0060  
                       ??_I2C_2_Master_Start 000D                         ??_I2C_2_Master_Write 000D  
                      color_normalise@RGBC_n 002E                         end_of_initialization 23B2  
            ??i2_color_clear_init_interrupts 0005                  __end_ofi2_color_writetoaddr 25BC  
                           ADC_getval@tmpval 000C                            reverseOneSquare@i 0026  
                          ?_color_click_init 0001                           ??_color_click_init 0015  
                           ___aldiv@quotient 0022                   batteryLevel@batteryQuarter 0015  
                                    postdec2 0FDD                                      postinc0 0FEE  
                                    postinc2 0FDE                   batteryLevel@batteryVoltage 0014  
                                 main@F14574 0100                              _initDCmotorsPWM 2068  
                                 ??_turnLeft 0023                                    _PORTFbits 0F8E  
                         setMotorPWM@negDuty 001D                        ??i2_I2C_2_Master_Idle 0001  
                              move@turnSpeed 0030                            __end_of_turnRight 188C  
                      ??i2_I2C_2_Master_Stop 0002                                   main@RGBC_n 008F  
                               _color_detect 22CA                                    _TRISAbits 0F81  
                         setMotorPWM@posDuty 001C                                    _TRISBbits 0F82  
                                  _TRISCbits 0F83                                    _TRISDbits 0F84  
                                  _TRISEbits 0F85                                    _TRISFbits 0F86  
                                  _TRISGbits 0F87                                    _TRISHbits 0F88  
                           white_Light@state 000C                                 ??_Buggy_init 000C  
                           fullSpeedAhead@mL 001E                             fullSpeedAhead@mR 001F  
                                ?_color_read 0010                     color_writetoaddr@address 000F  
                    ??_I2C_2_Master_RepStart 000D                     __end_of_reverseOneSquare 1516  
                           ?_Interrupts_init 0001                                stop@cur_power 0026  
                                _CCP1CONbits 0FAB                                 _EUSART4RXbuf 0037  
                               _EUSART4TXbuf 00B3                                  _CCP2CONbits 0FA7  
                                _CCP3CONbits 0F26                                  ?_initUSART4 0001  
                                _CCP4CONbits 0F22                                   main@motorL 00A9  
                                 main@motorR 009F                               color_read@RGBC 0010  
                             _fullSpeedAhead 1ED2                               __end_of___lmul 22CA  
                       turnLeft@turnDuration 0021                               __end_of___wmul 250C  
                         __end_of_Buggy_init 246C                                __pidataCOMRAM 2682  
                        start_initialization 2376                                _TxBufWriteCnt 004C  
      __end_ofi2_color_clear_init_interrupts 21EC                i2_color_clear_init_interrupts 2172  
                    __end_of_initDCmotorsPWM 20F8                       __end_of_fullSpeedAhead 1FA4  
                         turnRight@cur_power 0028                                     ??___lmul 0014  
                                   ??___wmul 0010                               _putCharToRxBuf 250C  
                        color_normalise@RGBC 0026                i2I2C_2_Master_Write@data_byte 0002  
               reverseOneSquare@straightRamp 0022                 __end_ofi2_I2C_2_Master_Start 2682  
               __end_ofi2_I2C_2_Master_Write 2650                            turnLeft@cur_power 0028  
                                __pbssCOMRAM 0037                                __pcstackBANK0 0060  
                                   ?_HighISR 0001                             stop@straightRamp 0020  
                           ___lwdiv@dividend 0012                       __end_of_putCharToRxBuf 2532  
                            ?_fullSpeedAhead 001E                                    __pintcode 0008  
                                   ?___aldiv 0018                           turnRight@turnSpeed 0020  
                                   ?___awdiv 000C                                     ?___lwdiv 0012  
                       I2C_2_Master_Read@ack 000E                         I2C_2_Master_Read@tmp 000F  
                                __smallconst 0E00                            _I2C_2_Master_Idle 2496  
                          _I2C_2_Master_Init 246C                            _I2C_2_Master_Read 23BC  
                          turnLeft@turnSpeed 0020                            _I2C_2_Master_Stop 265A  
                               _RxBufReadCnt 004D                                     _ADC_init 25DA  
                         ?_I2C_2_Master_Idle 0001                           ?_I2C_2_Master_Init 0001  
                         ?_I2C_2_Master_Read 0001                                ??_setMotorPWM 001A  
                         ?_I2C_2_Master_Stop 0001                             ___lwdiv@quotient 0016  
                   initDCmotorsPWM@PWMperiod 000C                            ?_getCharFromTxBuf 0001  
                         ??_getCharFromTxBuf 0001                            move@straightSpeed 002D  
                            ___aldiv@divisor 001C                          ??_I2C_2_Master_Idle 000C  
                            ___aldiv@counter 0020                          ??_I2C_2_Master_Init 000C  
                        ??_I2C_2_Master_Read 000D                               ___wmul@product 0010  
                                   _LATAbits 0F79                          ??_I2C_2_Master_Stop 000D  
                                   _LATCbits 0F7B                                _isDataInTxBuf 260C  
                                   _LATDbits 0F7C                                     _LATEbits 0F7D  
                                   _LATFbits 0F7E                                     _LATGbits 0F7F  
                                   _LATHbits 0F80                                     _IPR0bits 0E1F  
                                   _PIE0bits 0E29                                     _PIE4bits 0E2D  
                                   i2u140_40 251E                                     i2u140_41 251A  
                                   i2u141_40 2542                                     i2u141_41 253E  
                                   i2u142_40 2620                                     i2u150_40 0022  
                                   i2u142_41 261A                                     i2u150_41 001E  
                                turnRight@mL 001E                                     i2u143_40 2622  
                                   i2u151_40 003E                                     i2u151_41 003A  
                                turnRight@mR 001F                                     i2u152_40 0054  
                                   i2u152_41 0050                                     i2u153_40 0070  
                                   i2u153_41 006C                                     _PIR0bits 0E33  
                                   i2u191_47 21AE                                     _PIR4bits 0E37  
                            ?_putCharToRxBuf 0001                             ?_initDCmotorsPWM 000C  
                fullSpeedAhead@straightSpeed 0020          __end_of_color_clear_init_interrupts 2172  
             ?i2_color_clear_init_interrupts 0001                  _color_clear_init_interrupts 20F8  
                                   _SSP2CON2 0EDA                                     _SSP2STAT 0ED8  
                               move@turnRamp 0032                                   _ADCON0bits 0F60  
                  __end_of_I2C_2_Master_Idle 24BE                    __end_of_I2C_2_Master_Init 2496  
                  __end_of_I2C_2_Master_Read 23FE                            ___wmul@multiplier 000C  
                  __end_of_I2C_2_Master_Stop 2664     color_clear_init_interrupts@low_threshold 0013  
 i2color_clear_init_interrupts@low_threshold 0008                                 setMotorPWM@m 0019  
                I2C_2_Master_Write@data_byte 000D                                    main@color 0088  
                               _TxBufReadCnt 004B                     i2color_writetoaddr@value 0003  
                                  _turnRight 16D6                                 ??_color_read 0011  
                          ___lmul@multiplier 000C                               ?_isDataInTxBuf 0001  
              __end_of_I2C_2_Master_RepStart 265A                            ?_reverseOneSquare 001E  
                        __end_of_setMotorPWM 1B96                                 ??_initUSART4 000C  
                       i2_I2C_2_Master_Start 2678              reverseOneSquare@reverseDuration 0021  
                       i2_I2C_2_Master_Write 2644                           ??_reverseOneSquare 0023  
                                   __Hrparam 0000                            ??_color_normalise 002F  
                                 _ADC_getval 25F4                                     __Lrparam 0000  
                              ??_white_Light 000C                  __end_ofi2_I2C_2_Master_Idle 24E6  
                __end_ofi2_I2C_2_Master_Stop 2678                           __end_of_color_read 1352  
                                 _ANSELBbits 0E9A                                   _ANSELDbits 0EA7  
                                 _ANSELFbits 0EB4                reverseOneSquare@straightSpeed 0020  
                            ___lwdiv@divisor 0014                           __end_of_initUSART4 25DA  
                            ___lwdiv@counter 0018                            turnRight@turnRamp 0022  
                                 ?_turnRight 001E                                     __ptext10 21EC  
                                   __ptext11 25BC                                     __ptext20 23FE  
                                   __ptext12 2068                                     __ptext21 20F8  
                                   __ptext13 117C                                     __ptext30 25DA  
                                   __ptext22 257C                                     __ptext14 2650  
                                   __ptext31 25F4                                     __ptext23 2638  
                                   __ptext15 23BC                                     __ptext40 24BE  
                                   __ptext32 2624                                     __ptext24 265A  
                                   __ptext16 1B96                                     __ptext41 250C  
                                   __ptext33 2436                                     __ptext25 2664  
                                   __ptext17 2260                                     __ptext42 260C  
                                   __ptext26 2496                                     __ptext18 1CD8  
                                   __ptext43 2532                                     __ptext35 2172  
                                   __ptext27 246C                                     __ptext19 22CA  
                                   __ptext36 259C                                     __ptext28 2328  
                                   __ptext37 2644                                     __ptext29 1FA4  
                                   __ptext38 266E                                     __ptext39 2678  
                                  move@color 002C                                ?_batteryLevel 0001  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                           turnLeft@turnRamp 0022                                   turnLeft@mL 001E  
                                 turnLeft@mR 001F                        ?i2_I2C_2_Master_Start 0001  
                           move@straightRamp 002F                        ?i2_I2C_2_Master_Write 0001  
                                 turnRight@i 0026                                     isa$xinst 0000  
                                 _RC4STAbits 0EE7                                     main@RGBC 0097  
                                   int$flags 0051                                     _turnLeft 188C  
                    fullSpeedAhead@cur_power 0027                          __end_of_white_Light 257C  
                                 _INTCONbits 0FF2                    reverseOneSquare@cur_power 0028  
                         reverseOneSquare@mL 001E                           reverseOneSquare@mR 001F  
                           move@turnDuration 0031                               ??_batteryLevel 0014  
                                _setMotorPWM 1A42                              ??_isDataInTxBuf 0001  
                                   intlevel2 0000                             ??_fullSpeedAhead 0022  
                                  turnLeft@i 0026                                  ?_ADC_getval 0001  
                          main@straightSpeed 008D                             _color_click_init 23FE  
                                 _SSP2DATPPS 0E1D                                   _SSP2CLKPPS 0E1C  
                               ___aldiv@sign 0021                                  ??_turnRight 0023  
                           main@straightRamp 008E                                   _TX4STAbits 0EE8  
                     ??i2_I2C_2_Master_Start 0002                       ??i2_I2C_2_Master_Write 0002  
                           ??_putCharToRxBuf 0001  
