

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 09 11:26:13 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    56   000000                     
    57                           ; Generated 21/07/2023 GMT
    58                           ; 
    59                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution. Publication is not required when
    73                           ;        this file is used in an embedded application.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F67K40 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91   000000                     _TRISCbits	set	3971
    92   000000                     _RC4STAbits	set	3815
    93   000000                     _SP4BRGH	set	3814
    94   000000                     _SP4BRGL	set	3813
    95   000000                     _TX4STAbits	set	3816
    96   000000                     _BAUD4CONbits	set	3817
    97   000000                     _TX4REG	set	3812
    98   000000                     _TRISBbits	set	3970
    99   000000                     _TRISAbits	set	3969
   100   000000                     _TRISEbits	set	3973
   101   000000                     _TRISGbits	set	3975
   102   000000                     _LATFbits	set	3966
   103   000000                     _TRISFbits	set	3974
   104   000000                     _TRISHbits	set	3976
   105   000000                     _TRISDbits	set	3972
   106   000000                     _LATEbits	set	3965
   107   000000                     _LATGbits	set	3967
   108   000000                     _LATHbits	set	3968
   109   000000                     _SSP2CON2bits	set	3802
   110   000000                     _RX4PPS	set	3605
   111   000000                     _SSP2CLKPPS	set	3612
   112   000000                     _SSP2DATPPS	set	3613
   113   000000                     _PIE0bits	set	3625
   114   000000                     _CCPR4H	set	3873
   115   000000                     _CCPR3H	set	3877
   116   000000                     _CCPR2H	set	4006
   117   000000                     _CCPR1H	set	4010
   118   000000                     _CCP1CONbits	set	4011
   119   000000                     _CCPTMRS0bits	set	4013
   120   000000                     _T2PR	set	4028
   121   000000                     _T2CONbits	set	4029
   122   000000                     _INTCONbits	set	4082
   123   000000                     _CCP2CONbits	set	4007
   124   000000                     _CCP3CONbits	set	3878
   125   000000                     _ADREFbits	set	3928
   126   000000                     _LATAbits	set	3961
   127   000000                     _LATDbits	set	3964
   128   000000                     _PORTFbits	set	3982
   129   000000                     _CCP4CONbits	set	3874
   130   000000                     _PIE4bits	set	3629
   131   000000                     _RD5PPS	set	3695
   132   000000                     _ANSELDbits	set	3751
   133   000000                     _SSP2ADD	set	3798
   134   000000                     _SSP2CON1bits	set	3801
   135   000000                     _LATCbits	set	3963
   136   000000                     _RC4REG	set	3811
   137   000000                     _SSP2CON2	set	3802
   138   000000                     _SSP2STAT	set	3800
   139   000000                     _ANSELFbits	set	3764
   140   000000                     _SSP2BUF	set	3797
   141   000000                     _IPR0bits	set	3615
   142   000000                     _RE2PPS	set	3700
   143   000000                     _ANSELBbits	set	3738
   144   000000                     _RD6PPS	set	3696
   145   000000                     _PIR0bits	set	3635
   146   000000                     _PIR4bits	set	3639
   147   000000                     _RC0PPS	set	3682
   148   000000                     _RC7PPS	set	3689
   149   000000                     _ADPCH	set	3935
   150   000000                     _ADRESH	set	3940
   151   000000                     _ADCON0bits	set	3936
   152   000000                     _RE4PPS	set	3702
   153   000000                     _RG6PPS	set	3720
   154   000000                     _T2CLKCONbits	set	4031
   155   000000                     _T2HLTbits	set	4030
   156                           
   157                           ; #config settings
   158                           
   159                           	psect	cinit
   160   00225C                     __pcinit:
   161                           	callstack 0
   162   00225C                     start_initialization:
   163                           	callstack 0
   164   00225C                     __initialization:
   165                           	callstack 0
   166                           
   167                           ; Clear objects allocated to BANK1 (40 bytes)
   168   00225C  EE01  F000         	lfsr	0,__pbssBANK1
   169   002260  0E28               	movlw	40
   170   002262                     clear_0:
   171   002262  6AEE               	clrf	postinc0,c
   172   002264  06E8               	decf	wreg,f,c
   173   002266  E1FD               	bnz	clear_0
   174                           
   175                           ; Clear objects allocated to BANK0 (60 bytes)
   176   002268  EE00  F0A7         	lfsr	0,__pbssBANK0
   177   00226C  0E3C               	movlw	60
   178   00226E                     clear_1:
   179   00226E  6AEE               	clrf	postinc0,c
   180   002270  06E8               	decf	wreg,f,c
   181   002272  E1FD               	bnz	clear_1
   182                           
   183                           ; Clear objects allocated to COMRAM (24 bytes)
   184   002274  EE00  F038         	lfsr	0,__pbssCOMRAM
   185   002278  0E18               	movlw	24
   186   00227A                     clear_2:
   187   00227A  6AEE               	clrf	postinc0,c
   188   00227C  06E8               	decf	wreg,f,c
   189   00227E  E1FD               	bnz	clear_2
   190   002280                     end_of_initialization:
   191                           	callstack 0
   192   002280                     __end_of__initialization:
   193                           	callstack 0
   194   002280  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   195   002282  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   196   002284  0100               	movlb	0
   197   002286  EF89  F00E         	goto	_main	;jump to C main() function
   198                           
   199                           	psect	bssCOMRAM
   200   000038                     __pbssCOMRAM:
   201                           	callstack 0
   202   000038                     _EUSART4RXbuf:
   203                           	callstack 0
   204   000038                     	ds	20
   205   00004C                     _TxBufReadCnt:
   206                           	callstack 0
   207   00004C                     	ds	1
   208   00004D                     _TxBufWriteCnt:
   209                           	callstack 0
   210   00004D                     	ds	1
   211   00004E                     _RxBufReadCnt:
   212                           	callstack 0
   213   00004E                     	ds	1
   214   00004F                     _RxBufWriteCnt:
   215                           	callstack 0
   216   00004F                     	ds	1
   217                           
   218                           	psect	bssBANK0
   219   0000A7                     __pbssBANK0:
   220                           	callstack 0
   221   0000A7                     _EUSART4TXbuf:
   222                           	callstack 0
   223   0000A7                     	ds	60
   224                           
   225                           	psect	bssBANK1
   226   000100                     __pbssBANK1:
   227                           	callstack 0
   228   000100                     	ds	40
   229                           
   230                           	psect	cstackBANK0
   231   000060                     __pcstackBANK0:
   232                           	callstack 0
   233   000060                     ??_main:
   234   000060                     main@RGBC_n:
   235                           	callstack 0
   236                           
   237                           ; 8 bytes @ 0x0
   238   000060                     	ds	2
   239   000062                     main@buf:
   240                           	callstack 0
   241                           
   242                           ; 40 bytes @ 0x2
   243   000062                     	ds	40
   244   00008A                     main@wall:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x2A
   248   00008A                     	ds	1
   249   00008B                     main@RGBC:
   250                           	callstack 0
   251                           
   252                           ; 8 bytes @ 0x2B
   253   00008B                     	ds	8
   254   000093                     main@motorR:
   255                           	callstack 0
   256                           
   257                           ; 10 bytes @ 0x33
   258   000093                     	ds	10
   259   00009D                     main@motorL:
   260                           	callstack 0
   261                           
   262                           ; 10 bytes @ 0x3D
   263   00009D                     	ds	10
   264                           
   265                           	psect	cstackCOMRAM
   266   000001                     __pcstackCOMRAM:
   267                           	callstack 0
   268   000001                     ??_getCharFromTxBuf:
   269   000001                     ??i2_I2C_2_Master_Idle:
   270   000001                     putCharToRxBuf@byte:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x0
   274   000001                     	ds	1
   275   000002                     i2I2C_2_Master_Write@data_byte:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x1
   279   000002                     	ds	1
   280   000003                     i2color_writetoaddr@value:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x2
   284   000003                     	ds	1
   285   000004                     i2color_writetoaddr@address:
   286                           	callstack 0
   287                           
   288                           ; 1 bytes @ 0x3
   289   000004                     	ds	1
   290   000005                     ??i2_color_clear_init_interrupts:
   291                           
   292                           ; 1 bytes @ 0x4
   293   000005                     	ds	2
   294   000007                     i2color_clear_init_interrupts@high_threshold:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x6
   298   000007                     	ds	2
   299   000009                     i2color_clear_init_interrupts@low_threshold:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x8
   303   000009                     	ds	2
   304   00000B                     ??_HighISR:
   305                           
   306                           ; 1 bytes @ 0xA
   307   00000B                     	ds	4
   308   00000F                     ??_I2C_2_Master_Idle:
   309   00000F                     ?___wmul:
   310                           	callstack 0
   311   00000F                     ?___lmul:
   312                           	callstack 0
   313   00000F                     white_Light@state:
   314                           	callstack 0
   315   00000F                     initDCmotorsPWM@PWMperiod:
   316                           	callstack 0
   317   00000F                     ___wmul@multiplier:
   318                           	callstack 0
   319   00000F                     ___lmul@multiplier:
   320                           	callstack 0
   321   00000F                     color_detect@RGBC_n:
   322                           	callstack 0
   323                           
   324                           ; 8 bytes @ 0xE
   325   00000F                     	ds	1
   326   000010                     ??_I2C_2_Master_Read:
   327   000010                     I2C_2_Master_Write@data_byte:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0xF
   331   000010                     	ds	1
   332   000011                     color_writetoaddr@value:
   333                           	callstack 0
   334   000011                     I2C_2_Master_Read@ack:
   335                           	callstack 0
   336   000011                     ___wmul@multiplicand:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x10
   340   000011                     	ds	1
   341   000012                     color_writetoaddr@address:
   342                           	callstack 0
   343   000012                     I2C_2_Master_Read@tmp:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x11
   347   000012                     	ds	1
   348   000013                     ??_color_clear_init_interrupts:
   349   000013                     color_read@RGBC:
   350                           	callstack 0
   351   000013                     ___wmul@product:
   352                           	callstack 0
   353   000013                     ___lmul@multiplicand:
   354                           	callstack 0
   355                           
   356                           ; 4 bytes @ 0x12
   357   000013                     	ds	1
   358   000014                     ??_color_read:
   359                           
   360                           ; 1 bytes @ 0x13
   361   000014                     	ds	1
   362   000015                     ?___lwdiv:
   363                           	callstack 0
   364   000015                     color_clear_init_interrupts@high_threshold:
   365                           	callstack 0
   366   000015                     ___lwdiv@dividend:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x14
   370   000015                     	ds	2
   371   000017                     color_detect@color:
   372                           	callstack 0
   373   000017                     color_clear_init_interrupts@low_threshold:
   374                           	callstack 0
   375   000017                     ___lwdiv@divisor:
   376                           	callstack 0
   377   000017                     ___lmul@product:
   378                           	callstack 0
   379                           
   380                           ; 4 bytes @ 0x16
   381   000017                     	ds	2
   382   000019                     ??_color_click_init:
   383   000019                     ___lwdiv@quotient:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x18
   387   000019                     	ds	2
   388   00001B                     ?___aldiv:
   389                           	callstack 0
   390   00001B                     ___lwdiv@counter:
   391                           	callstack 0
   392   00001B                     ___aldiv@dividend:
   393                           	callstack 0
   394                           
   395                           ; 4 bytes @ 0x1A
   396   00001B                     	ds	1
   397   00001C                     setMotorPWM@m:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x1B
   401   00001C                     	ds	1
   402   00001D                     ??_setMotorPWM:
   403                           
   404                           ; 1 bytes @ 0x1C
   405   00001D                     	ds	2
   406   00001F                     setMotorPWM@posDuty:
   407                           	callstack 0
   408   00001F                     ___aldiv@divisor:
   409                           	callstack 0
   410                           
   411                           ; 4 bytes @ 0x1E
   412   00001F                     	ds	1
   413   000020                     setMotorPWM@negDuty:
   414                           	callstack 0
   415                           
   416                           ; 1 bytes @ 0x1F
   417   000020                     	ds	1
   418   000021                     stop@mL:
   419                           	callstack 0
   420   000021                     turnLeft@mL:
   421                           	callstack 0
   422   000021                     turnRight@mL:
   423                           	callstack 0
   424   000021                     fullSpeedAhead@mL:
   425                           	callstack 0
   426   000021                     reverseOneSquare@mL:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0x20
   430   000021                     	ds	1
   431   000022                     stop@mR:
   432                           	callstack 0
   433   000022                     turnLeft@mR:
   434                           	callstack 0
   435   000022                     turnRight@mR:
   436                           	callstack 0
   437   000022                     fullSpeedAhead@mR:
   438                           	callstack 0
   439   000022                     reverseOneSquare@mR:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x21
   443   000022                     	ds	1
   444   000023                     stop@straightRamp:
   445                           	callstack 0
   446   000023                     turnLeft@turnSpeed:
   447                           	callstack 0
   448   000023                     turnRight@turnSpeed:
   449                           	callstack 0
   450   000023                     fullSpeedAhead@straightSpeed:
   451                           	callstack 0
   452   000023                     reverseOneSquare@straightSpeed:
   453                           	callstack 0
   454   000023                     ___aldiv@counter:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x22
   458   000023                     	ds	1
   459   000024                     ??_stop:
   460   000024                     turnLeft@turnDuration:
   461                           	callstack 0
   462   000024                     turnRight@turnDuration:
   463                           	callstack 0
   464   000024                     fullSpeedAhead@straightRamp:
   465                           	callstack 0
   466   000024                     reverseOneSquare@reverseDuration:
   467                           	callstack 0
   468   000024                     ___aldiv@sign:
   469                           	callstack 0
   470                           
   471                           ; 1 bytes @ 0x23
   472   000024                     	ds	1
   473   000025                     ??_fullSpeedAhead:
   474   000025                     turnLeft@turnRamp:
   475                           	callstack 0
   476   000025                     turnRight@turnRamp:
   477                           	callstack 0
   478   000025                     reverseOneSquare@straightRamp:
   479                           	callstack 0
   480   000025                     ___aldiv@quotient:
   481                           	callstack 0
   482                           
   483                           ; 4 bytes @ 0x24
   484   000025                     	ds	1
   485   000026                     ??_turnRight:
   486   000026                     ??_turnLeft:
   487   000026                     ??_reverseOneSquare:
   488                           
   489                           ; 1 bytes @ 0x25
   490   000026                     	ds	1
   491   000027                     stop@i:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x26
   495   000027                     	ds	1
   496   000028                     fullSpeedAhead@i:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x27
   500   000028                     	ds	1
   501   000029                     stop@cur_power:
   502                           	callstack 0
   503   000029                     turnLeft@i:
   504                           	callstack 0
   505   000029                     turnRight@i:
   506                           	callstack 0
   507   000029                     reverseOneSquare@i:
   508                           	callstack 0
   509   000029                     color_normalise@RGBC:
   510                           	callstack 0
   511                           
   512                           ; 8 bytes @ 0x28
   513   000029                     	ds	1
   514   00002A                     fullSpeedAhead@cur_power:
   515                           	callstack 0
   516                           
   517                           ; 2 bytes @ 0x29
   518   00002A                     	ds	1
   519   00002B                     turnLeft@cur_power:
   520                           	callstack 0
   521   00002B                     turnRight@cur_power:
   522                           	callstack 0
   523   00002B                     reverseOneSquare@cur_power:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x2A
   527   00002B                     	ds	2
   528   00002D                     move@mL:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532   00002D                     	ds	1
   533   00002E                     move@mR:
   534                           	callstack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537   00002E                     	ds	1
   538   00002F                     move@color:
   539                           	callstack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542   00002F                     	ds	1
   543   000030                     move@straightSpeed:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547   000030                     	ds	1
   548   000031                     color_normalise@RGBC_n:
   549                           	callstack 0
   550   000031                     move@reverseDuration:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0x30
   554   000031                     	ds	1
   555   000032                     ??_color_normalise:
   556   000032                     move@straightRamp:
   557                           	callstack 0
   558                           
   559                           ; 1 bytes @ 0x31
   560   000032                     	ds	1
   561   000033                     move@turnSpeed:
   562                           	callstack 0
   563                           
   564                           ; 1 bytes @ 0x32
   565   000033                     	ds	1
   566   000034                     move@turnDuration:
   567                           	callstack 0
   568                           
   569                           ; 1 bytes @ 0x33
   570   000034                     	ds	1
   571   000035                     move@turnRamp:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x34
   575   000035                     	ds	1
   576   000036                     ??_move:
   577                           
   578                           ; 1 bytes @ 0x35
   579   000036                     	ds	2
   580                           
   581 ;;
   582 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   583 ;;
   584 ;; *************** function _main *****************
   585 ;; Defined at:
   586 ;;		line 23 in file "main.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;  buf            40    2[BANK0 ] unsigned char [40]
   591 ;;  motorL         10   61[BANK0 ] struct DC_motor
   592 ;;  motorR         10   51[BANK0 ] struct DC_motor
   593 ;;  RGBC            8   43[BANK0 ] struct RGBC_val
   594 ;;  RGBC_n          8    0[BANK0 ] struct RGBC_val
   595 ;;  PWMcycle        2    0        unsigned int 
   596 ;;  ambient         2    0        unsigned int 
   597 ;;  straightRamp    1    0        unsigned char 
   598 ;;  straightSpee    1    0        unsigned char 
   599 ;;  wall            1   42[BANK0 ] unsigned char 
   600 ;;  turnRamp        1    0        unsigned char 
   601 ;;  turnDuration    1    0        unsigned char 
   602 ;;  turnSpeed       1    0        unsigned char 
   603 ;;  reverseDurat    1    0        unsigned char 
   604 ;;  color           1    0        unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   615 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;      Totals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   618 ;;Total ram usage:       71 bytes
   619 ;; Hardware stack levels required when called: 10
   620 ;; This function calls:
   621 ;;		_Buggy_init
   622 ;;		_Interrupts_init
   623 ;;		_color_click_init
   624 ;;		_color_detect
   625 ;;		_color_normalise
   626 ;;		_color_read
   627 ;;		_fullSpeedAhead
   628 ;;		_initDCmotorsPWM
   629 ;;		_initUSART4
   630 ;;		_move
   631 ;;		_stop
   632 ;;		_white_Light
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text0
   639   001D12                     __ptext0:
   640                           	callstack 0
   641   001D12                     _main:
   642                           	callstack 21
   643   001D12                     
   644                           ;main.c: 25:     char wall = 0;
   645   001D12  0E00               	movlw	0
   646   001D14  0100               	movlb	0	; () banked
   647   001D16  6F8A               	movwf	main@wall& (0+255),b
   648   001D18                     
   649                           ; BSR set to: 0
   650                           ;main.c: 26:     char buf[40] = {0};
   651   001D18  EE20  F062         	lfsr	2,main@buf
   652   001D1C  0E27               	movlw	39
   653   001D1E                     u1411:
   654   001D1E  6ADE               	clrf	postinc2,c
   655   001D20  06E8               	decf	wreg,f,c
   656   001D22  E2FD               	bc	u1411
   657   001D24                     
   658                           ; BSR set to: 0
   659                           ;main.c: 28:     unsigned char color;;main.c: 30:     struct RGBC_val RGBC, RGBC_n;;main
      +                          .c: 31:     struct DC_motor motorL, motorR;;main.c: 33:     Buggy_init();
   660   001D24  EC13  F011         	call	_Buggy_init	;wreg free
   661                           
   662                           ;main.c: 34:     color_click_init();
   663   001D28  ECF7  F010         	call	_color_click_init	;wreg free
   664   001D2C                     
   665                           ;main.c: 35:     Interrupts_init();
   666   001D2C  EC08  F012         	call	_Interrupts_init	;wreg free
   667   001D30                     
   668                           ;main.c: 36:     initUSART4();
   669   001D30  ECED  F011         	call	_initUSART4	;wreg free
   670   001D34                     
   671                           ;main.c: 37:     initDCmotorsPWM(PWMcycle);
   672   001D34  0E00               	movlw	0
   673   001D36  6E10               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   674   001D38  0EC7               	movlw	199
   675   001D3A  6E0F               	movwf	initDCmotorsPWM@PWMperiod^0,c
   676   001D3C  ECF0  F00F         	call	_initDCmotorsPWM	;wreg free
   677   001D40                     
   678                           ;main.c: 39:     motorL.power=0;
   679   001D40  0E00               	movlw	0
   680   001D42  0100               	movlb	0	; () banked
   681   001D44  6F9D               	movwf	main@motorL& (0+255),b
   682   001D46                     
   683                           ; BSR set to: 0
   684                           ;main.c: 40:     motorL.direction=1;
   685   001D46  0E01               	movlw	1
   686   001D48  6F9E               	movwf	(main@motorL+1)& (0+255),b
   687   001D4A                     
   688                           ; BSR set to: 0
   689                           ;main.c: 41:     motorL.brakemode=1;
   690   001D4A  0E01               	movlw	1
   691   001D4C  6F9F               	movwf	(main@motorL+2)& (0+255),b
   692   001D4E                     
   693                           ; BSR set to: 0
   694                           ;main.c: 42:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   695   001D4E  0EAA               	movlw	170
   696   001D50  6FA2               	movwf	(main@motorL+5)& (0+255),b
   697   001D52  0E0F               	movlw	15
   698   001D54  6FA3               	movwf	(main@motorL+6)& (0+255),b
   699   001D56                     
   700                           ; BSR set to: 0
   701                           ;main.c: 43:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   702   001D56  0EA6               	movlw	166
   703   001D58  6FA4               	movwf	(main@motorL+7)& (0+255),b
   704   001D5A  0E0F               	movlw	15
   705   001D5C  6FA5               	movwf	(main@motorL+8)& (0+255),b
   706   001D5E                     
   707                           ; BSR set to: 0
   708                           ;main.c: 44:     motorL.PWMperiod=PWMcycle;
   709   001D5E  0E00               	movlw	0
   710   001D60  6FA1               	movwf	(main@motorL+4)& (0+255),b
   711   001D62  0EC7               	movlw	199
   712   001D64  6FA0               	movwf	(main@motorL+3)& (0+255),b
   713   001D66                     
   714                           ; BSR set to: 0
   715                           ;main.c: 45:     motorL.compensation=3;
   716   001D66  0E03               	movlw	3
   717   001D68  6FA6               	movwf	(main@motorL+9)& (0+255),b
   718   001D6A                     
   719                           ; BSR set to: 0
   720                           ;main.c: 47:     motorR.power=0;
   721   001D6A  0E00               	movlw	0
   722   001D6C  6F93               	movwf	main@motorR& (0+255),b
   723   001D6E                     
   724                           ; BSR set to: 0
   725                           ;main.c: 48:     motorR.direction=1;
   726   001D6E  0E01               	movlw	1
   727   001D70  6F94               	movwf	(main@motorR+1)& (0+255),b
   728   001D72                     
   729                           ; BSR set to: 0
   730                           ;main.c: 49:     motorR.brakemode=1;
   731   001D72  0E01               	movlw	1
   732   001D74  6F95               	movwf	(main@motorR+2)& (0+255),b
   733   001D76                     
   734                           ; BSR set to: 0
   735                           ;main.c: 50:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   736   001D76  0E25               	movlw	37
   737   001D78  6F98               	movwf	(main@motorR+5)& (0+255),b
   738   001D7A  0E0F               	movlw	15
   739   001D7C  6F99               	movwf	(main@motorR+6)& (0+255),b
   740   001D7E                     
   741                           ; BSR set to: 0
   742                           ;main.c: 51:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   743   001D7E  0E21               	movlw	33
   744   001D80  6F9A               	movwf	(main@motorR+7)& (0+255),b
   745   001D82  0E0F               	movlw	15
   746   001D84  6F9B               	movwf	(main@motorR+8)& (0+255),b
   747   001D86                     
   748                           ; BSR set to: 0
   749                           ;main.c: 52:     motorR.PWMperiod=PWMcycle;
   750   001D86  0E00               	movlw	0
   751   001D88  6F97               	movwf	(main@motorR+4)& (0+255),b
   752   001D8A  0EC7               	movlw	199
   753   001D8C  6F96               	movwf	(main@motorR+3)& (0+255),b
   754   001D8E                     
   755                           ; BSR set to: 0
   756                           ;main.c: 53:     motorR.compensation=0;
   757   001D8E  0E00               	movlw	0
   758   001D90  6F9C               	movwf	(main@motorR+9)& (0+255),b
   759   001D92                     l61:
   760   001D92  B48E               	btfsc	142,2,c	;volatile
   761   001D94  EFCE  F00E         	goto	u1421
   762   001D98  EFD0  F00E         	goto	u1420
   763   001D9C                     u1421:
   764   001D9C  EFC9  F00E         	goto	l61
   765   001DA0                     u1420:
   766   001DA0                     
   767                           ;main.c: 70:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   768   001DA0  9680               	bcf	128,3,c	;volatile
   769   001DA2  9E7C               	bcf	124,7,c	;volatile
   770                           
   771                           ;main.c: 93:     LATHbits.LATH1=LATDbits.LATD3=1;
   772   001DA4  867C               	bsf	124,3,c	;volatile
   773   001DA6  8280               	bsf	128,1,c	;volatile
   774   001DA8                     
   775                           ;main.c: 94:     _delay((unsigned long)((500)*(64000000/4000.0)));
   776   001DA8  0E29               	movlw	41
   777   001DAA  0100               	movlb	0	; () banked
   778   001DAC  6F61               	movwf	(??_main+1)& (0+255),b
   779   001DAE  0E96               	movlw	150
   780   001DB0  6F60               	movwf	??_main& (0+255),b
   781   001DB2  0E7F               	movlw	127
   782   001DB4                     u1437:
   783   001DB4  2EE8               	decfsz	wreg,f,c
   784   001DB6  D7FE               	bra	u1437
   785   001DB8  2F60               	decfsz	??_main& (0+255),f,b
   786   001DBA  D7FC               	bra	u1437
   787   001DBC  2F61               	decfsz	(??_main+1)& (0+255),f,b
   788   001DBE  D7FA               	bra	u1437
   789   001DC0                     
   790                           ;main.c: 99:     white_Light(1);
   791   001DC0  0E01               	movlw	1
   792   001DC2  ECBB  F011         	call	_white_Light
   793   001DC6                     
   794                           ;main.c: 103:     color_read(&RGBC);
   795   001DC6  0E8B               	movlw	low main@RGBC
   796   001DC8  6E13               	movwf	color_read@RGBC^0,c
   797   001DCA  ECBE  F008         	call	_color_read	;wreg free
   798   001DCE                     
   799                           ;main.c: 107:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
   800   001DCE  0E9D               	movlw	low main@motorL
   801   001DD0  6E21               	movwf	fullSpeedAhead@mL^0,c
   802   001DD2  0E93               	movlw	low main@motorR
   803   001DD4  6E22               	movwf	fullSpeedAhead@mR^0,c
   804   001DD6  0E19               	movlw	25
   805   001DD8  6E23               	movwf	fullSpeedAhead@straightSpeed^0,c
   806   001DDA  0E02               	movlw	2
   807   001DDC  6E24               	movwf	fullSpeedAhead@straightRamp^0,c
   808   001DDE  ECF5  F00E         	call	_fullSpeedAhead	;wreg free
   809   001DE2                     l2815:
   810   001DE2  EFF1  F00E         	goto	l2815
   811   001DE6  EF5B  F000         	goto	start
   812   001DEA                     __end_of_main:
   813                           	callstack 0
   814                           
   815 ;; *************** function _white_Light *****************
   816 ;; Defined at:
   817 ;;		line 57 in file "color.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;  state           1    wreg     unsigned char 
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  state           1   14[COMRAM] unsigned char 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, status,2
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   835 ;;Total ram usage:        1 bytes
   836 ;; Hardware stack levels used: 1
   837 ;; Hardware stack levels required when called: 5
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text1
   846   002376                     __ptext1:
   847                           	callstack 0
   848   002376                     _white_Light:
   849                           	callstack 25
   850                           
   851                           ;incstack = 0
   852                           ;white_Light@state stored from wreg
   853   002376  6E0F               	movwf	white_Light@state^0,c
   854   002378                     
   855                           ;color.c: 57: void white_Light(char state);color.c: 58: {;color.c: 59:     if (state){
   856   002378  500F               	movf	white_Light@state^0,w,c
   857   00237A  B4D8               	btfsc	status,2,c
   858   00237C  EFC2  F011         	goto	u1111
   859   002380  EFC4  F011         	goto	u1110
   860   002384                     u1111:
   861   002384  EFC9  F011         	goto	l106
   862   002388                     u1110:
   863   002388                     
   864                           ;color.c: 60:         LATGbits.LATG0 = 1;
   865   002388  807F               	bsf	127,0,c	;volatile
   866                           
   867                           ;color.c: 61:         LATEbits.LATE7 = 1;
   868   00238A  8E7D               	bsf	125,7,c	;volatile
   869                           
   870                           ;color.c: 62:         LATAbits.LATA3 = 1;
   871   00238C  8679               	bsf	121,3,c	;volatile
   872                           
   873                           ;color.c: 63:     }
   874   00238E  EFCC  F011         	goto	l108
   875   002392                     l106:
   876                           
   877                           ;color.c: 65:         LATGbits.LATG0 = 0;
   878   002392  907F               	bcf	127,0,c	;volatile
   879                           
   880                           ;color.c: 66:         LATEbits.LATE7 = 0;
   881   002394  9E7D               	bcf	125,7,c	;volatile
   882                           
   883                           ;color.c: 67:         LATAbits.LATA3 = 0;
   884   002396  9679               	bcf	121,3,c	;volatile
   885   002398                     l108:
   886   002398  0012               	return		;funcret
   887   00239A                     __end_of_white_Light:
   888                           	callstack 0
   889                           
   890 ;; *************** function _stop *****************
   891 ;; Defined at:
   892 ;;		line 162 in file "dc_motor.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  mL              1   32[COMRAM] PTR struct DC_motor
   895 ;;		 -> main@motorL(10), 
   896 ;;  mR              1   33[COMRAM] PTR struct DC_motor
   897 ;;		 -> main@motorR(10), 
   898 ;;  straightRamp    1   34[COMRAM] unsigned char 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  cur_power       2   40[COMRAM] int 
   901 ;;  i               2   38[COMRAM] int 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   911 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   912 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   913 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;Total ram usage:       10 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; Hardware stack levels required when called: 7
   918 ;; This function calls:
   919 ;;		_setMotorPWM
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text2
   926   001C24                     __ptext2:
   927                           	callstack 0
   928   001C24                     _stop:
   929                           	callstack 23
   930   001C24                     
   931                           ;dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 163: {;dc_motor.c: 164:     mL->direction = 1;
   932   001C24  5021               	movf	stop@mL^0,w,c
   933   001C26  6ED9               	movwf	fsr2l,c
   934   001C28  6ADA               	clrf	fsr2h,c
   935   001C2A  0E01               	movlw	1
   936   001C2C  26D9               	addwf	fsr2l,f,c
   937   001C2E  0E01               	movlw	1
   938   001C30  6EDF               	movwf	indf2,c
   939                           
   940                           ;dc_motor.c: 165:     mR->direction = 1;
   941   001C32  5022               	movf	stop@mR^0,w,c
   942   001C34  6ED9               	movwf	fsr2l,c
   943   001C36  6ADA               	clrf	fsr2h,c
   944   001C38  0E01               	movlw	1
   945   001C3A  26D9               	addwf	fsr2l,f,c
   946   001C3C  0E01               	movlw	1
   947   001C3E  6EDF               	movwf	indf2,c
   948                           
   949                           ;dc_motor.c: 166:     int i;;dc_motor.c: 167:     int cur_power;;dc_motor.c: 168:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
   950   001C40  5021               	movf	stop@mL^0,w,c
   951   001C42  6ED9               	movwf	fsr2l,c
   952   001C44  6ADA               	clrf	fsr2h,c
   953   001C46  50DF               	movf	indf2,w,c
   954   001C48  6E24               	movwf	??_stop^0,c
   955   001C4A  5021               	movf	stop@mL^0,w,c
   956   001C4C  6ED9               	movwf	fsr2l,c
   957   001C4E  6ADA               	clrf	fsr2h,c
   958   001C50  0E09               	movlw	9
   959   001C52  26D9               	addwf	fsr2l,f,c
   960   001C54  50DF               	movf	indf2,w,c
   961   001C56  6E25               	movwf	(??_stop+1)^0,c
   962   001C58  5025               	movf	(??_stop+1)^0,w,c
   963   001C5A  5C24               	subwf	??_stop^0,w,c
   964   001C5C  6E29               	movwf	stop@cur_power^0,c
   965   001C5E  6A2A               	clrf	(stop@cur_power+1)^0,c
   966   001C60  A0D8               	btfss	status,0,c
   967   001C62  062A               	decf	(stop@cur_power+1)^0,f,c
   968   001C64                     l2423:
   969   001C64  BE2A               	btfsc	(stop@cur_power+1)^0,7,c
   970   001C66  EF39  F00E         	goto	u1120
   971   001C6A  EF37  F00E         	goto	u1121
   972   001C6E                     u1121:
   973   001C6E  EF3B  F00E         	goto	l2427
   974   001C72                     u1120:
   975   001C72  EF80  F00E         	goto	l2443
   976   001C76                     l2427:
   977                           
   978                           ;dc_motor.c: 169:         mL->power = cur_power+mL->compensation;
   979   001C76  5021               	movf	stop@mL^0,w,c
   980   001C78  6ED9               	movwf	fsr2l,c
   981   001C7A  6ADA               	clrf	fsr2h,c
   982   001C7C  5021               	movf	stop@mL^0,w,c
   983   001C7E  6EE1               	movwf	fsr1l,c
   984   001C80  6AE2               	clrf	fsr1h,c
   985   001C82  0E09               	movlw	9
   986   001C84  26E1               	addwf	fsr1l,f,c
   987   001C86  50E7               	movf	indf1,w,c
   988   001C88  2429               	addwf	stop@cur_power^0,w,c
   989   001C8A  6EDF               	movwf	indf2,c
   990                           
   991                           ;dc_motor.c: 170:         mR->power = cur_power+mR->compensation;
   992   001C8C  5022               	movf	stop@mR^0,w,c
   993   001C8E  6ED9               	movwf	fsr2l,c
   994   001C90  6ADA               	clrf	fsr2h,c
   995   001C92  5022               	movf	stop@mR^0,w,c
   996   001C94  6EE1               	movwf	fsr1l,c
   997   001C96  6AE2               	clrf	fsr1h,c
   998   001C98  0E09               	movlw	9
   999   001C9A  26E1               	addwf	fsr1l,f,c
  1000   001C9C  50E7               	movf	indf1,w,c
  1001   001C9E  2429               	addwf	stop@cur_power^0,w,c
  1002   001CA0  6EDF               	movwf	indf2,c
  1003   001CA2                     
  1004                           ;dc_motor.c: 171:         setMotorPWM(mL);
  1005   001CA2  C021  F01C         	movff	stop@mL,setMotorPWM@m
  1006   001CA6  EC41  F00C         	call	_setMotorPWM	;wreg free
  1007   001CAA                     
  1008                           ;dc_motor.c: 172:         setMotorPWM(mR);
  1009   001CAA  C022  F01C         	movff	stop@mR,setMotorPWM@m
  1010   001CAE  EC41  F00C         	call	_setMotorPWM	;wreg free
  1011   001CB2                     
  1012                           ;dc_motor.c: 173:         for (i=0;i<straightRamp;i++) {
  1013   001CB2  0E00               	movlw	0
  1014   001CB4  6E28               	movwf	(stop@i+1)^0,c
  1015   001CB6  0E00               	movlw	0
  1016   001CB8  6E27               	movwf	stop@i^0,c
  1017   001CBA  EF69  F00E         	goto	l453
  1018   001CBE                     l2435:
  1019                           
  1020                           ;dc_motor.c: 174:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1021   001CBE  0E68               	movlw	104
  1022   001CC0  6E24               	movwf	??_stop^0,c
  1023   001CC2  0EE4               	movlw	228
  1024   001CC4                     u1447:
  1025   001CC4  2EE8               	decfsz	wreg,f,c
  1026   001CC6  D7FE               	bra	u1447
  1027   001CC8  2E24               	decfsz	??_stop^0,f,c
  1028   001CCA  D7FC               	bra	u1447
  1029   001CCC  D000               	nop2	
  1030   001CCE                     
  1031                           ;dc_motor.c: 175:         }
  1032   001CCE  4A27               	infsnz	stop@i^0,f,c
  1033   001CD0  2A28               	incf	(stop@i+1)^0,f,c
  1034   001CD2                     l453:
  1035   001CD2  5023               	movf	stop@straightRamp^0,w,c
  1036   001CD4  6E24               	movwf	??_stop^0,c
  1037   001CD6  6A25               	clrf	(??_stop+1)^0,c
  1038   001CD8  5024               	movf	??_stop^0,w,c
  1039   001CDA  5C27               	subwf	stop@i^0,w,c
  1040   001CDC  5028               	movf	(stop@i+1)^0,w,c
  1041   001CDE  0A80               	xorlw	128
  1042   001CE0  6E26               	movwf	(??_stop+2)^0,c
  1043   001CE2  5025               	movf	(??_stop+1)^0,w,c
  1044   001CE4  0A80               	xorlw	128
  1045   001CE6  5826               	subwfb	(??_stop+2)^0,w,c
  1046   001CE8  A0D8               	btfss	status,0,c
  1047   001CEA  EF79  F00E         	goto	u1131
  1048   001CEE  EF7B  F00E         	goto	u1130
  1049   001CF2                     u1131:
  1050   001CF2  EF5F  F00E         	goto	l2435
  1051   001CF6                     u1130:
  1052   001CF6                     
  1053                           ;dc_motor.c: 176:     }
  1054   001CF6  0629               	decf	stop@cur_power^0,f,c
  1055   001CF8  A0D8               	btfss	status,0,c
  1056   001CFA  062A               	decf	(stop@cur_power+1)^0,f,c
  1057   001CFC  EF32  F00E         	goto	l2423
  1058   001D00                     l2443:
  1059                           
  1060                           ;dc_motor.c: 177:     mL->power = 0;
  1061   001D00  5021               	movf	stop@mL^0,w,c
  1062   001D02  6ED9               	movwf	fsr2l,c
  1063   001D04  6ADA               	clrf	fsr2h,c
  1064   001D06  6ADF               	clrf	indf2,c
  1065                           
  1066                           ;dc_motor.c: 178:     mR->power = 0;
  1067   001D08  5022               	movf	stop@mR^0,w,c
  1068   001D0A  6ED9               	movwf	fsr2l,c
  1069   001D0C  6ADA               	clrf	fsr2h,c
  1070   001D0E  6ADF               	clrf	indf2,c
  1071   001D10  0012               	return		;funcret
  1072   001D12                     __end_of_stop:
  1073                           	callstack 0
  1074                           
  1075 ;; *************** function _move *****************
  1076 ;; Defined at:
  1077 ;;		line 87 in file "dc_motor.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  mL              1   44[COMRAM] PTR struct DC_motor
  1080 ;;		 -> main@motorL(10), 
  1081 ;;  mR              1   45[COMRAM] PTR struct DC_motor
  1082 ;;		 -> main@motorR(10), 
  1083 ;;  color           1   46[COMRAM] unsigned char 
  1084 ;;  straightSpee    1   47[COMRAM] unsigned char 
  1085 ;;  reverseDurat    1   48[COMRAM] unsigned char 
  1086 ;;  straightRamp    1   49[COMRAM] unsigned char 
  1087 ;;  turnSpeed       1   50[COMRAM] unsigned char 
  1088 ;;  turnDuration    1   51[COMRAM] unsigned char 
  1089 ;;  turnRamp        1   52[COMRAM] unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1101 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1104 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1105 ;;Total ram usage:       11 bytes
  1106 ;; Hardware stack levels used: 1
  1107 ;; Hardware stack levels required when called: 8
  1108 ;; This function calls:
  1109 ;;		_fullSpeedAhead
  1110 ;;		_reverseOneSquare
  1111 ;;		_turnLeft
  1112 ;;		_turnRight
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text3
  1119   000E02                     __ptext3:
  1120                           	callstack 0
  1121   000E02                     _move:
  1122                           	callstack 22
  1123   000E02                     
  1124                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  1125   000E02  042F               	decf	move@color^0,w,c
  1126   000E04  A4D8               	btfss	status,2,c
  1127   000E06  EF07  F007         	goto	u1171
  1128   000E0A  EF09  F007         	goto	u1170
  1129   000E0E                     u1171:
  1130   000E0E  EF45  F007         	goto	l2479
  1131   000E12                     u1170:
  1132   000E12                     
  1133                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1134   000E12  C02D  F021         	movff	move@mL,turnRight@mL
  1135   000E16  C02E  F022         	movff	move@mR,turnRight@mR
  1136   000E1A  C033  F023         	movff	move@turnSpeed,turnRight@turnSpeed
  1137   000E1E  C034  F024         	movff	move@turnDuration,turnRight@turnDuration
  1138   000E22  C035  F025         	movff	move@turnRamp,turnRight@turnRamp
  1139   000E26  EC8B  F00A         	call	_turnRight	;wreg free
  1140   000E2A                     
  1141                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1142   000E2A  0E05               	movlw	5
  1143   000E2C  6E37               	movwf	(??_move+1)^0,c
  1144   000E2E  0E0F               	movlw	15
  1145   000E30  6E36               	movwf	??_move^0,c
  1146   000E32  0EF1               	movlw	241
  1147   000E34                     u1457:
  1148   000E34  2EE8               	decfsz	wreg,f,c
  1149   000E36  D7FE               	bra	u1457
  1150   000E38  2E36               	decfsz	??_move^0,f,c
  1151   000E3A  D7FC               	bra	u1457
  1152   000E3C  2E37               	decfsz	(??_move+1)^0,f,c
  1153   000E3E  D7FA               	bra	u1457
  1154   000E40  0000               	nop	
  1155   000E42                     
  1156                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1157   000E42  C02D  F021         	movff	move@mL,turnRight@mL
  1158   000E46  C02E  F022         	movff	move@mR,turnRight@mR
  1159   000E4A  C033  F023         	movff	move@turnSpeed,turnRight@turnSpeed
  1160   000E4E  C034  F024         	movff	move@turnDuration,turnRight@turnDuration
  1161   000E52  C035  F025         	movff	move@turnRamp,turnRight@turnRamp
  1162   000E56  EC8B  F00A         	call	_turnRight	;wreg free
  1163                           
  1164                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1165   000E5A  0E05               	movlw	5
  1166   000E5C  6E37               	movwf	(??_move+1)^0,c
  1167   000E5E  0E0F               	movlw	15
  1168   000E60  6E36               	movwf	??_move^0,c
  1169   000E62  0EF1               	movlw	241
  1170   000E64                     u1467:
  1171   000E64  2EE8               	decfsz	wreg,f,c
  1172   000E66  D7FE               	bra	u1467
  1173   000E68  2E36               	decfsz	??_move^0,f,c
  1174   000E6A  D7FC               	bra	u1467
  1175   000E6C  2E37               	decfsz	(??_move+1)^0,f,c
  1176   000E6E  D7FA               	bra	u1467
  1177   000E70  0000               	nop	
  1178   000E72                     l2477:
  1179                           
  1180                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1181   000E72  C02D  F021         	movff	move@mL,fullSpeedAhead@mL
  1182   000E76  C02E  F022         	movff	move@mR,fullSpeedAhead@mR
  1183   000E7A  C030  F023         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1184   000E7E  C032  F024         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1185   000E82  ECF5  F00E         	call	_fullSpeedAhead	;wreg free
  1186                           
  1187                           ;dc_motor.c: 95:     }
  1188   000E86  EFBD  F008         	goto	l448
  1189   000E8A                     l2479:
  1190   000E8A  0E02               	movlw	2
  1191   000E8C  182F               	xorwf	move@color^0,w,c
  1192   000E8E  A4D8               	btfss	status,2,c
  1193   000E90  EF4C  F007         	goto	u1181
  1194   000E94  EF4E  F007         	goto	u1180
  1195   000E98                     u1181:
  1196   000E98  EF80  F007         	goto	l2489
  1197   000E9C                     u1180:
  1198   000E9C                     
  1199                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1200   000E9C  C02D  F021         	movff	move@mL,turnLeft@mL
  1201   000EA0  C02E  F022         	movff	move@mR,turnLeft@mR
  1202   000EA4  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1203   000EA8  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1204   000EAC  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1205   000EB0  EC66  F00B         	call	_turnLeft	;wreg free
  1206   000EB4                     
  1207                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1208   000EB4  0E05               	movlw	5
  1209   000EB6  6E37               	movwf	(??_move+1)^0,c
  1210   000EB8  0E0F               	movlw	15
  1211   000EBA  6E36               	movwf	??_move^0,c
  1212   000EBC  0EF1               	movlw	241
  1213   000EBE                     u1477:
  1214   000EBE  2EE8               	decfsz	wreg,f,c
  1215   000EC0  D7FE               	bra	u1477
  1216   000EC2  2E36               	decfsz	??_move^0,f,c
  1217   000EC4  D7FC               	bra	u1477
  1218   000EC6  2E37               	decfsz	(??_move+1)^0,f,c
  1219   000EC8  D7FA               	bra	u1477
  1220   000ECA  0000               	nop	
  1221   000ECC                     
  1222                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1223   000ECC  C02D  F021         	movff	move@mL,turnLeft@mL
  1224   000ED0  C02E  F022         	movff	move@mR,turnLeft@mR
  1225   000ED4  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1226   000ED8  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1227   000EDC  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1228   000EE0  EC66  F00B         	call	_turnLeft	;wreg free
  1229                           
  1230                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1231   000EE4  0E05               	movlw	5
  1232   000EE6  6E37               	movwf	(??_move+1)^0,c
  1233   000EE8  0E0F               	movlw	15
  1234   000EEA  6E36               	movwf	??_move^0,c
  1235   000EEC  0EF1               	movlw	241
  1236   000EEE                     u1487:
  1237   000EEE  2EE8               	decfsz	wreg,f,c
  1238   000EF0  D7FE               	bra	u1487
  1239   000EF2  2E36               	decfsz	??_move^0,f,c
  1240   000EF4  D7FC               	bra	u1487
  1241   000EF6  2E37               	decfsz	(??_move+1)^0,f,c
  1242   000EF8  D7FA               	bra	u1487
  1243   000EFA  0000               	nop	
  1244   000EFC  EF39  F007         	goto	l2477
  1245   000F00                     l2489:
  1246   000F00  0E03               	movlw	3
  1247   000F02  182F               	xorwf	move@color^0,w,c
  1248   000F04  A4D8               	btfss	status,2,c
  1249   000F06  EF87  F007         	goto	u1191
  1250   000F0A  EF89  F007         	goto	u1190
  1251   000F0E                     u1191:
  1252   000F0E  EFEB  F007         	goto	l2505
  1253   000F12                     u1190:
  1254   000F12                     
  1255                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1256   000F12  C02D  F021         	movff	move@mL,turnLeft@mL
  1257   000F16  C02E  F022         	movff	move@mR,turnLeft@mR
  1258   000F1A  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1259   000F1E  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1260   000F22  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1261   000F26  EC66  F00B         	call	_turnLeft	;wreg free
  1262   000F2A                     
  1263                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1264   000F2A  0E05               	movlw	5
  1265   000F2C  6E37               	movwf	(??_move+1)^0,c
  1266   000F2E  0E0F               	movlw	15
  1267   000F30  6E36               	movwf	??_move^0,c
  1268   000F32  0EF1               	movlw	241
  1269   000F34                     u1497:
  1270   000F34  2EE8               	decfsz	wreg,f,c
  1271   000F36  D7FE               	bra	u1497
  1272   000F38  2E36               	decfsz	??_move^0,f,c
  1273   000F3A  D7FC               	bra	u1497
  1274   000F3C  2E37               	decfsz	(??_move+1)^0,f,c
  1275   000F3E  D7FA               	bra	u1497
  1276   000F40  0000               	nop	
  1277   000F42                     
  1278                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1279   000F42  C02D  F021         	movff	move@mL,turnLeft@mL
  1280   000F46  C02E  F022         	movff	move@mR,turnLeft@mR
  1281   000F4A  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1282   000F4E  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1283   000F52  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1284   000F56  EC66  F00B         	call	_turnLeft	;wreg free
  1285                           
  1286                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1287   000F5A  0E05               	movlw	5
  1288   000F5C  6E37               	movwf	(??_move+1)^0,c
  1289   000F5E  0E0F               	movlw	15
  1290   000F60  6E36               	movwf	??_move^0,c
  1291   000F62  0EF1               	movlw	241
  1292   000F64                     u1507:
  1293   000F64  2EE8               	decfsz	wreg,f,c
  1294   000F66  D7FE               	bra	u1507
  1295   000F68  2E36               	decfsz	??_move^0,f,c
  1296   000F6A  D7FC               	bra	u1507
  1297   000F6C  2E37               	decfsz	(??_move+1)^0,f,c
  1298   000F6E  D7FA               	bra	u1507
  1299   000F70  0000               	nop	
  1300   000F72                     
  1301                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1302   000F72  C02D  F021         	movff	move@mL,turnLeft@mL
  1303   000F76  C02E  F022         	movff	move@mR,turnLeft@mR
  1304   000F7A  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1305   000F7E  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1306   000F82  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1307   000F86  EC66  F00B         	call	_turnLeft	;wreg free
  1308   000F8A                     
  1309                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1310   000F8A  0E05               	movlw	5
  1311   000F8C  6E37               	movwf	(??_move+1)^0,c
  1312   000F8E  0E0F               	movlw	15
  1313   000F90  6E36               	movwf	??_move^0,c
  1314   000F92  0EF1               	movlw	241
  1315   000F94                     u1517:
  1316   000F94  2EE8               	decfsz	wreg,f,c
  1317   000F96  D7FE               	bra	u1517
  1318   000F98  2E36               	decfsz	??_move^0,f,c
  1319   000F9A  D7FC               	bra	u1517
  1320   000F9C  2E37               	decfsz	(??_move+1)^0,f,c
  1321   000F9E  D7FA               	bra	u1517
  1322   000FA0  0000               	nop	
  1323                           
  1324                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1325   000FA2  C02D  F021         	movff	move@mL,turnLeft@mL
  1326   000FA6  C02E  F022         	movff	move@mR,turnLeft@mR
  1327   000FAA  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1328   000FAE  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1329   000FB2  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1330   000FB6  EC66  F00B         	call	_turnLeft	;wreg free
  1331   000FBA                     
  1332                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1333   000FBA  0E05               	movlw	5
  1334   000FBC  6E37               	movwf	(??_move+1)^0,c
  1335   000FBE  0E0F               	movlw	15
  1336   000FC0  6E36               	movwf	??_move^0,c
  1337   000FC2  0EF1               	movlw	241
  1338   000FC4                     u1527:
  1339   000FC4  2EE8               	decfsz	wreg,f,c
  1340   000FC6  D7FE               	bra	u1527
  1341   000FC8  2E36               	decfsz	??_move^0,f,c
  1342   000FCA  D7FC               	bra	u1527
  1343   000FCC  2E37               	decfsz	(??_move+1)^0,f,c
  1344   000FCE  D7FA               	bra	u1527
  1345   000FD0  0000               	nop	
  1346   000FD2  EF39  F007         	goto	l2477
  1347   000FD6                     l2505:
  1348   000FD6  0E04               	movlw	4
  1349   000FD8  182F               	xorwf	move@color^0,w,c
  1350   000FDA  A4D8               	btfss	status,2,c
  1351   000FDC  EFF2  F007         	goto	u1201
  1352   000FE0  EFF4  F007         	goto	u1200
  1353   000FE4                     u1201:
  1354   000FE4  EF48  F008         	goto	l2517
  1355   000FE8                     u1200:
  1356   000FE8                     
  1357                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1358   000FE8  C02D  F021         	movff	move@mL,reverseOneSquare@mL
  1359   000FEC  C02E  F022         	movff	move@mR,reverseOneSquare@mR
  1360   000FF0  C030  F023         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1361   000FF4  C031  F024         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1362   000FF8  C032  F025         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1363   000FFC  ECA9  F009         	call	_reverseOneSquare	;wreg free
  1364   001000                     l2509:
  1365                           
  1366                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1367   001000  0E05               	movlw	5
  1368   001002  6E37               	movwf	(??_move+1)^0,c
  1369   001004  0E0F               	movlw	15
  1370   001006  6E36               	movwf	??_move^0,c
  1371   001008  0EF1               	movlw	241
  1372   00100A                     u1537:
  1373   00100A  2EE8               	decfsz	wreg,f,c
  1374   00100C  D7FE               	bra	u1537
  1375   00100E  2E36               	decfsz	??_move^0,f,c
  1376   001010  D7FC               	bra	u1537
  1377   001012  2E37               	decfsz	(??_move+1)^0,f,c
  1378   001014  D7FA               	bra	u1537
  1379   001016  0000               	nop	
  1380   001018                     
  1381                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1382   001018  C02D  F021         	movff	move@mL,turnRight@mL
  1383   00101C  C02E  F022         	movff	move@mR,turnRight@mR
  1384   001020  C033  F023         	movff	move@turnSpeed,turnRight@turnSpeed
  1385   001024  C034  F024         	movff	move@turnDuration,turnRight@turnDuration
  1386   001028  C035  F025         	movff	move@turnRamp,turnRight@turnRamp
  1387   00102C  EC8B  F00A         	call	_turnRight	;wreg free
  1388                           
  1389                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1390   001030  0E05               	movlw	5
  1391   001032  6E37               	movwf	(??_move+1)^0,c
  1392   001034  0E0F               	movlw	15
  1393   001036  6E36               	movwf	??_move^0,c
  1394   001038  0EF1               	movlw	241
  1395   00103A                     u1547:
  1396   00103A  2EE8               	decfsz	wreg,f,c
  1397   00103C  D7FE               	bra	u1547
  1398   00103E  2E36               	decfsz	??_move^0,f,c
  1399   001040  D7FC               	bra	u1547
  1400   001042  2E37               	decfsz	(??_move+1)^0,f,c
  1401   001044  D7FA               	bra	u1547
  1402   001046  0000               	nop	
  1403   001048                     
  1404                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1405   001048  C02D  F021         	movff	move@mL,turnRight@mL
  1406   00104C  C02E  F022         	movff	move@mR,turnRight@mR
  1407   001050  C033  F023         	movff	move@turnSpeed,turnRight@turnSpeed
  1408   001054  C034  F024         	movff	move@turnDuration,turnRight@turnDuration
  1409   001058  C035  F025         	movff	move@turnRamp,turnRight@turnRamp
  1410   00105C  EC8B  F00A         	call	_turnRight	;wreg free
  1411   001060                     l2515:
  1412                           
  1413                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1414   001060  0E05               	movlw	5
  1415   001062  6E37               	movwf	(??_move+1)^0,c
  1416   001064  0E0F               	movlw	15
  1417   001066  6E36               	movwf	??_move^0,c
  1418   001068  0EF1               	movlw	241
  1419   00106A                     u1557:
  1420   00106A  2EE8               	decfsz	wreg,f,c
  1421   00106C  D7FE               	bra	u1557
  1422   00106E  2E36               	decfsz	??_move^0,f,c
  1423   001070  D7FC               	bra	u1557
  1424   001072  2E37               	decfsz	(??_move+1)^0,f,c
  1425   001074  D7FA               	bra	u1557
  1426   001076  0000               	nop	
  1427                           
  1428                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1429   001078  C02D  F021         	movff	move@mL,fullSpeedAhead@mL
  1430   00107C  C02E  F022         	movff	move@mR,fullSpeedAhead@mR
  1431   001080  C030  F023         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1432   001084  C032  F024         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1433   001088  ECF5  F00E         	call	_fullSpeedAhead	;wreg free
  1434                           
  1435                           ;dc_motor.c: 125:     }
  1436   00108C  EFBD  F008         	goto	l448
  1437   001090                     l2517:
  1438   001090  0E05               	movlw	5
  1439   001092  182F               	xorwf	move@color^0,w,c
  1440   001094  A4D8               	btfss	status,2,c
  1441   001096  EF4F  F008         	goto	u1211
  1442   00109A  EF51  F008         	goto	u1210
  1443   00109E                     u1211:
  1444   00109E  EF8F  F008         	goto	l2529
  1445   0010A2                     u1210:
  1446   0010A2                     
  1447                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1448   0010A2  C02D  F021         	movff	move@mL,reverseOneSquare@mL
  1449   0010A6  C02E  F022         	movff	move@mR,reverseOneSquare@mR
  1450   0010AA  C030  F023         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1451   0010AE  C031  F024         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1452   0010B2  C032  F025         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1453   0010B6  ECA9  F009         	call	_reverseOneSquare	;wreg free
  1454   0010BA                     l2521:
  1455                           
  1456                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1457   0010BA  0E05               	movlw	5
  1458   0010BC  6E37               	movwf	(??_move+1)^0,c
  1459   0010BE  0E0F               	movlw	15
  1460   0010C0  6E36               	movwf	??_move^0,c
  1461   0010C2  0EF1               	movlw	241
  1462   0010C4                     u1567:
  1463   0010C4  2EE8               	decfsz	wreg,f,c
  1464   0010C6  D7FE               	bra	u1567
  1465   0010C8  2E36               	decfsz	??_move^0,f,c
  1466   0010CA  D7FC               	bra	u1567
  1467   0010CC  2E37               	decfsz	(??_move+1)^0,f,c
  1468   0010CE  D7FA               	bra	u1567
  1469   0010D0  0000               	nop	
  1470   0010D2                     
  1471                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1472   0010D2  C02D  F021         	movff	move@mL,turnLeft@mL
  1473   0010D6  C02E  F022         	movff	move@mR,turnLeft@mR
  1474   0010DA  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1475   0010DE  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1476   0010E2  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1477   0010E6  EC66  F00B         	call	_turnLeft	;wreg free
  1478                           
  1479                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1480   0010EA  0E05               	movlw	5
  1481   0010EC  6E37               	movwf	(??_move+1)^0,c
  1482   0010EE  0E0F               	movlw	15
  1483   0010F0  6E36               	movwf	??_move^0,c
  1484   0010F2  0EF1               	movlw	241
  1485   0010F4                     u1577:
  1486   0010F4  2EE8               	decfsz	wreg,f,c
  1487   0010F6  D7FE               	bra	u1577
  1488   0010F8  2E36               	decfsz	??_move^0,f,c
  1489   0010FA  D7FC               	bra	u1577
  1490   0010FC  2E37               	decfsz	(??_move+1)^0,f,c
  1491   0010FE  D7FA               	bra	u1577
  1492   001100  0000               	nop	
  1493   001102                     
  1494                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1495   001102  C02D  F021         	movff	move@mL,turnLeft@mL
  1496   001106  C02E  F022         	movff	move@mR,turnLeft@mR
  1497   00110A  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1498   00110E  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1499   001112  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1500   001116  EC66  F00B         	call	_turnLeft	;wreg free
  1501   00111A  EF30  F008         	goto	l2515
  1502   00111E                     l2529:
  1503   00111E  0E06               	movlw	6
  1504   001120  182F               	xorwf	move@color^0,w,c
  1505   001122  A4D8               	btfss	status,2,c
  1506   001124  EF96  F008         	goto	u1221
  1507   001128  EF98  F008         	goto	u1220
  1508   00112C                     u1221:
  1509   00112C  EFA6  F008         	goto	l2541
  1510   001130                     u1220:
  1511   001130                     
  1512                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1513   001130  C02D  F021         	movff	move@mL,turnRight@mL
  1514   001134  C02E  F022         	movff	move@mR,turnRight@mR
  1515   001138  C033  F023         	movff	move@turnSpeed,turnRight@turnSpeed
  1516   00113C  C034  F024         	movff	move@turnDuration,turnRight@turnDuration
  1517   001140  C035  F025         	movff	move@turnRamp,turnRight@turnRamp
  1518   001144  EC8B  F00A         	call	_turnRight	;wreg free
  1519   001148  EF00  F008         	goto	l2509
  1520   00114C                     l2541:
  1521   00114C  0E07               	movlw	7
  1522   00114E  182F               	xorwf	move@color^0,w,c
  1523   001150  A4D8               	btfss	status,2,c
  1524   001152  EFAD  F008         	goto	u1231
  1525   001156  EFAF  F008         	goto	u1230
  1526   00115A                     u1231:
  1527   00115A  EFBD  F008         	goto	l446
  1528   00115E                     u1230:
  1529   00115E                     
  1530                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1531   00115E  C02D  F021         	movff	move@mL,turnLeft@mL
  1532   001162  C02E  F022         	movff	move@mR,turnLeft@mR
  1533   001166  C033  F023         	movff	move@turnSpeed,turnLeft@turnSpeed
  1534   00116A  C034  F024         	movff	move@turnDuration,turnLeft@turnDuration
  1535   00116E  C035  F025         	movff	move@turnRamp,turnLeft@turnRamp
  1536   001172  EC66  F00B         	call	_turnLeft	;wreg free
  1537   001176  EF5D  F008         	goto	l2521
  1538   00117A                     l446:
  1539   00117A                     l448:
  1540   00117A  0012               	return		;funcret
  1541   00117C                     __end_of_move:
  1542                           	callstack 0
  1543                           
  1544 ;; *************** function _turnRight *****************
  1545 ;; Defined at:
  1546 ;;		line 214 in file "dc_motor.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1549 ;;		 -> main@motorL(10), 
  1550 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1551 ;;		 -> main@motorR(10), 
  1552 ;;  turnSpeed       1   34[COMRAM] unsigned char 
  1553 ;;  turnDuration    1   35[COMRAM] unsigned char 
  1554 ;;  turnRamp        1   36[COMRAM] unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  cur_power       2   42[COMRAM] int 
  1557 ;;  i               2   40[COMRAM] int 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1567 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1568 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;Total ram usage:       12 bytes
  1572 ;; Hardware stack levels used: 1
  1573 ;; Hardware stack levels required when called: 7
  1574 ;; This function calls:
  1575 ;;		_setMotorPWM
  1576 ;; This function is called by:
  1577 ;;		_move
  1578 ;;		_calibration
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text4
  1583   001516                     __ptext4:
  1584                           	callstack 0
  1585   001516                     _turnRight:
  1586                           	callstack 22
  1587   001516                     
  1588                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  1589   001516  5021               	movf	turnRight@mL^0,w,c
  1590   001518  6ED9               	movwf	fsr2l,c
  1591   00151A  6ADA               	clrf	fsr2h,c
  1592   00151C  0E01               	movlw	1
  1593   00151E  26D9               	addwf	fsr2l,f,c
  1594   001520  0E01               	movlw	1
  1595   001522  6EDF               	movwf	indf2,c
  1596                           
  1597                           ;dc_motor.c: 217:     mR->direction = 0;
  1598   001524  5022               	movf	turnRight@mR^0,w,c
  1599   001526  6ED9               	movwf	fsr2l,c
  1600   001528  6ADA               	clrf	fsr2h,c
  1601   00152A  0E01               	movlw	1
  1602   00152C  26D9               	addwf	fsr2l,f,c
  1603   00152E  6ADF               	clrf	indf2,c
  1604   001530                     
  1605                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1606   001530  0E00               	movlw	0
  1607   001532  6E2C               	movwf	(turnRight@cur_power+1)^0,c
  1608   001534  0E01               	movlw	1
  1609   001536  6E2B               	movwf	turnRight@cur_power^0,c
  1610   001538  EFE0  F00A         	goto	l2169
  1611   00153C                     l2155:
  1612                           
  1613                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  1614   00153C  5021               	movf	turnRight@mL^0,w,c
  1615   00153E  6ED9               	movwf	fsr2l,c
  1616   001540  6ADA               	clrf	fsr2h,c
  1617   001542  5021               	movf	turnRight@mL^0,w,c
  1618   001544  6EE1               	movwf	fsr1l,c
  1619   001546  6AE2               	clrf	fsr1h,c
  1620   001548  0E09               	movlw	9
  1621   00154A  26E1               	addwf	fsr1l,f,c
  1622   00154C  50E7               	movf	indf1,w,c
  1623   00154E  242B               	addwf	turnRight@cur_power^0,w,c
  1624   001550  6EDF               	movwf	indf2,c
  1625                           
  1626                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  1627   001552  5022               	movf	turnRight@mR^0,w,c
  1628   001554  6ED9               	movwf	fsr2l,c
  1629   001556  6ADA               	clrf	fsr2h,c
  1630   001558  5022               	movf	turnRight@mR^0,w,c
  1631   00155A  6EE1               	movwf	fsr1l,c
  1632   00155C  6AE2               	clrf	fsr1h,c
  1633   00155E  0E09               	movlw	9
  1634   001560  26E1               	addwf	fsr1l,f,c
  1635   001562  50E7               	movf	indf1,w,c
  1636   001564  242B               	addwf	turnRight@cur_power^0,w,c
  1637   001566  6EDF               	movwf	indf2,c
  1638   001568                     
  1639                           ;dc_motor.c: 223:         setMotorPWM(mL);
  1640   001568  C021  F01C         	movff	turnRight@mL,setMotorPWM@m
  1641   00156C  EC41  F00C         	call	_setMotorPWM	;wreg free
  1642   001570                     
  1643                           ;dc_motor.c: 224:         setMotorPWM(mR);
  1644   001570  C022  F01C         	movff	turnRight@mR,setMotorPWM@m
  1645   001574  EC41  F00C         	call	_setMotorPWM	;wreg free
  1646   001578                     
  1647                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  1648   001578  0E00               	movlw	0
  1649   00157A  6E2A               	movwf	(turnRight@i+1)^0,c
  1650   00157C  0E00               	movlw	0
  1651   00157E  6E29               	movwf	turnRight@i^0,c
  1652   001580  EFCC  F00A         	goto	l478
  1653   001584                     l2163:
  1654                           
  1655                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1656   001584  0E68               	movlw	104
  1657   001586  6E26               	movwf	??_turnRight^0,c
  1658   001588  0EE4               	movlw	228
  1659   00158A                     u1587:
  1660   00158A  2EE8               	decfsz	wreg,f,c
  1661   00158C  D7FE               	bra	u1587
  1662   00158E  2E26               	decfsz	??_turnRight^0,f,c
  1663   001590  D7FC               	bra	u1587
  1664   001592  D000               	nop2	
  1665   001594                     
  1666                           ;dc_motor.c: 227:         }
  1667   001594  4A29               	infsnz	turnRight@i^0,f,c
  1668   001596  2A2A               	incf	(turnRight@i+1)^0,f,c
  1669   001598                     l478:
  1670   001598  5025               	movf	turnRight@turnRamp^0,w,c
  1671   00159A  6E26               	movwf	??_turnRight^0,c
  1672   00159C  6A27               	clrf	(??_turnRight+1)^0,c
  1673   00159E  5026               	movf	??_turnRight^0,w,c
  1674   0015A0  5C29               	subwf	turnRight@i^0,w,c
  1675   0015A2  502A               	movf	(turnRight@i+1)^0,w,c
  1676   0015A4  0A80               	xorlw	128
  1677   0015A6  6E28               	movwf	(??_turnRight+2)^0,c
  1678   0015A8  5027               	movf	(??_turnRight+1)^0,w,c
  1679   0015AA  0A80               	xorlw	128
  1680   0015AC  5828               	subwfb	(??_turnRight+2)^0,w,c
  1681   0015AE  A0D8               	btfss	status,0,c
  1682   0015B0  EFDC  F00A         	goto	u881
  1683   0015B4  EFDE  F00A         	goto	u880
  1684   0015B8                     u881:
  1685   0015B8  EFC2  F00A         	goto	l2163
  1686   0015BC                     u880:
  1687   0015BC                     
  1688                           ;dc_motor.c: 228:     }
  1689   0015BC  4A2B               	infsnz	turnRight@cur_power^0,f,c
  1690   0015BE  2A2C               	incf	(turnRight@cur_power+1)^0,f,c
  1691   0015C0                     l2169:
  1692   0015C0  5023               	movf	turnRight@turnSpeed^0,w,c
  1693   0015C2  6E26               	movwf	??_turnRight^0,c
  1694   0015C4  6A27               	clrf	(??_turnRight+1)^0,c
  1695   0015C6  502B               	movf	turnRight@cur_power^0,w,c
  1696   0015C8  5C26               	subwf	??_turnRight^0,w,c
  1697   0015CA  5027               	movf	(??_turnRight+1)^0,w,c
  1698   0015CC  0A80               	xorlw	128
  1699   0015CE  6E28               	movwf	(??_turnRight+2)^0,c
  1700   0015D0  502C               	movf	(turnRight@cur_power+1)^0,w,c
  1701   0015D2  0A80               	xorlw	128
  1702   0015D4  5828               	subwfb	(??_turnRight+2)^0,w,c
  1703   0015D6  B0D8               	btfsc	status,0,c
  1704   0015D8  EFF0  F00A         	goto	u891
  1705   0015DC  EFF2  F00A         	goto	u890
  1706   0015E0                     u891:
  1707   0015E0  EF9E  F00A         	goto	l2155
  1708   0015E4                     u890:
  1709   0015E4                     
  1710                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  1711   0015E4  0E00               	movlw	0
  1712   0015E6  6E2A               	movwf	(turnRight@i+1)^0,c
  1713   0015E8  0E00               	movlw	0
  1714   0015EA  6E29               	movwf	turnRight@i^0,c
  1715   0015EC  EF02  F00B         	goto	l482
  1716   0015F0                     l2173:
  1717                           
  1718                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1719   0015F0  0E68               	movlw	104
  1720   0015F2  6E26               	movwf	??_turnRight^0,c
  1721   0015F4  0EE4               	movlw	228
  1722   0015F6                     u1597:
  1723   0015F6  2EE8               	decfsz	wreg,f,c
  1724   0015F8  D7FE               	bra	u1597
  1725   0015FA  2E26               	decfsz	??_turnRight^0,f,c
  1726   0015FC  D7FC               	bra	u1597
  1727   0015FE  D000               	nop2	
  1728   001600                     
  1729                           ;dc_motor.c: 232:         }
  1730   001600  4A29               	infsnz	turnRight@i^0,f,c
  1731   001602  2A2A               	incf	(turnRight@i+1)^0,f,c
  1732   001604                     l482:
  1733   001604  5024               	movf	turnRight@turnDuration^0,w,c
  1734   001606  6E26               	movwf	??_turnRight^0,c
  1735   001608  6A27               	clrf	(??_turnRight+1)^0,c
  1736   00160A  5026               	movf	??_turnRight^0,w,c
  1737   00160C  5C29               	subwf	turnRight@i^0,w,c
  1738   00160E  502A               	movf	(turnRight@i+1)^0,w,c
  1739   001610  0A80               	xorlw	128
  1740   001612  6E28               	movwf	(??_turnRight+2)^0,c
  1741   001614  5027               	movf	(??_turnRight+1)^0,w,c
  1742   001616  0A80               	xorlw	128
  1743   001618  5828               	subwfb	(??_turnRight+2)^0,w,c
  1744   00161A  A0D8               	btfss	status,0,c
  1745   00161C  EF12  F00B         	goto	u901
  1746   001620  EF14  F00B         	goto	u900
  1747   001624                     u901:
  1748   001624  EFF8  F00A         	goto	l2173
  1749   001628                     u900:
  1750   001628                     
  1751                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  1752   001628  C023  F02B         	movff	turnRight@turnSpeed,turnRight@cur_power
  1753   00162C  6A2C               	clrf	(turnRight@cur_power+1)^0,c
  1754   00162E                     l2177:
  1755   00162E  BE2C               	btfsc	(turnRight@cur_power+1)^0,7,c
  1756   001630  EF1E  F00B         	goto	u910
  1757   001634  EF1C  F00B         	goto	u911
  1758   001638                     u911:
  1759   001638  EF20  F00B         	goto	l2181
  1760   00163C                     u910:
  1761   00163C  EF65  F00B         	goto	l490
  1762   001640                     l2181:
  1763                           
  1764                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  1765   001640  5021               	movf	turnRight@mL^0,w,c
  1766   001642  6ED9               	movwf	fsr2l,c
  1767   001644  6ADA               	clrf	fsr2h,c
  1768   001646  5021               	movf	turnRight@mL^0,w,c
  1769   001648  6EE1               	movwf	fsr1l,c
  1770   00164A  6AE2               	clrf	fsr1h,c
  1771   00164C  0E09               	movlw	9
  1772   00164E  26E1               	addwf	fsr1l,f,c
  1773   001650  50E7               	movf	indf1,w,c
  1774   001652  242B               	addwf	turnRight@cur_power^0,w,c
  1775   001654  6EDF               	movwf	indf2,c
  1776                           
  1777                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  1778   001656  5022               	movf	turnRight@mR^0,w,c
  1779   001658  6ED9               	movwf	fsr2l,c
  1780   00165A  6ADA               	clrf	fsr2h,c
  1781   00165C  5022               	movf	turnRight@mR^0,w,c
  1782   00165E  6EE1               	movwf	fsr1l,c
  1783   001660  6AE2               	clrf	fsr1h,c
  1784   001662  0E09               	movlw	9
  1785   001664  26E1               	addwf	fsr1l,f,c
  1786   001666  50E7               	movf	indf1,w,c
  1787   001668  242B               	addwf	turnRight@cur_power^0,w,c
  1788   00166A  6EDF               	movwf	indf2,c
  1789   00166C                     
  1790                           ;dc_motor.c: 237:         setMotorPWM(mL);
  1791   00166C  C021  F01C         	movff	turnRight@mL,setMotorPWM@m
  1792   001670  EC41  F00C         	call	_setMotorPWM	;wreg free
  1793   001674                     
  1794                           ;dc_motor.c: 238:         setMotorPWM(mR);
  1795   001674  C022  F01C         	movff	turnRight@mR,setMotorPWM@m
  1796   001678  EC41  F00C         	call	_setMotorPWM	;wreg free
  1797   00167C                     
  1798                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  1799   00167C  0E00               	movlw	0
  1800   00167E  6E2A               	movwf	(turnRight@i+1)^0,c
  1801   001680  0E00               	movlw	0
  1802   001682  6E29               	movwf	turnRight@i^0,c
  1803   001684  EF4E  F00B         	goto	l487
  1804   001688                     l2189:
  1805                           
  1806                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1807   001688  0E68               	movlw	104
  1808   00168A  6E26               	movwf	??_turnRight^0,c
  1809   00168C  0EE4               	movlw	228
  1810   00168E                     u1607:
  1811   00168E  2EE8               	decfsz	wreg,f,c
  1812   001690  D7FE               	bra	u1607
  1813   001692  2E26               	decfsz	??_turnRight^0,f,c
  1814   001694  D7FC               	bra	u1607
  1815   001696  D000               	nop2	
  1816   001698                     
  1817                           ;dc_motor.c: 241:         }
  1818   001698  4A29               	infsnz	turnRight@i^0,f,c
  1819   00169A  2A2A               	incf	(turnRight@i+1)^0,f,c
  1820   00169C                     l487:
  1821   00169C  5025               	movf	turnRight@turnRamp^0,w,c
  1822   00169E  6E26               	movwf	??_turnRight^0,c
  1823   0016A0  6A27               	clrf	(??_turnRight+1)^0,c
  1824   0016A2  5026               	movf	??_turnRight^0,w,c
  1825   0016A4  5C29               	subwf	turnRight@i^0,w,c
  1826   0016A6  502A               	movf	(turnRight@i+1)^0,w,c
  1827   0016A8  0A80               	xorlw	128
  1828   0016AA  6E28               	movwf	(??_turnRight+2)^0,c
  1829   0016AC  5027               	movf	(??_turnRight+1)^0,w,c
  1830   0016AE  0A80               	xorlw	128
  1831   0016B0  5828               	subwfb	(??_turnRight+2)^0,w,c
  1832   0016B2  A0D8               	btfss	status,0,c
  1833   0016B4  EF5E  F00B         	goto	u921
  1834   0016B8  EF60  F00B         	goto	u920
  1835   0016BC                     u921:
  1836   0016BC  EF44  F00B         	goto	l2189
  1837   0016C0                     u920:
  1838   0016C0                     
  1839                           ;dc_motor.c: 242:     }
  1840   0016C0  062B               	decf	turnRight@cur_power^0,f,c
  1841   0016C2  A0D8               	btfss	status,0,c
  1842   0016C4  062C               	decf	(turnRight@cur_power+1)^0,f,c
  1843   0016C6  EF17  F00B         	goto	l2177
  1844   0016CA                     l490:
  1845   0016CA  0012               	return		;funcret
  1846   0016CC                     __end_of_turnRight:
  1847                           	callstack 0
  1848                           
  1849 ;; *************** function _turnLeft *****************
  1850 ;; Defined at:
  1851 ;;		line 182 in file "dc_motor.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  1854 ;;		 -> main@motorL(10), 
  1855 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  1856 ;;		 -> main@motorR(10), 
  1857 ;;  turnSpeed       1   34[COMRAM] unsigned char 
  1858 ;;  turnDuration    1   35[COMRAM] unsigned char 
  1859 ;;  turnRamp        1   36[COMRAM] unsigned char 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  cur_power       2   42[COMRAM] int 
  1862 ;;  i               2   40[COMRAM] int 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1872 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1875 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;Total ram usage:       12 bytes
  1877 ;; Hardware stack levels used: 1
  1878 ;; Hardware stack levels required when called: 7
  1879 ;; This function calls:
  1880 ;;		_setMotorPWM
  1881 ;; This function is called by:
  1882 ;;		_move
  1883 ;;		_calibration
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text5
  1888   0016CC                     __ptext5:
  1889                           	callstack 0
  1890   0016CC                     _turnLeft:
  1891                           	callstack 22
  1892   0016CC                     
  1893                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  1894   0016CC  5021               	movf	turnLeft@mL^0,w,c
  1895   0016CE  6ED9               	movwf	fsr2l,c
  1896   0016D0  6ADA               	clrf	fsr2h,c
  1897   0016D2  0E01               	movlw	1
  1898   0016D4  26D9               	addwf	fsr2l,f,c
  1899   0016D6  6ADF               	clrf	indf2,c
  1900                           
  1901                           ;dc_motor.c: 185:     mR->direction = 1;
  1902   0016D8  5022               	movf	turnLeft@mR^0,w,c
  1903   0016DA  6ED9               	movwf	fsr2l,c
  1904   0016DC  6ADA               	clrf	fsr2h,c
  1905   0016DE  0E01               	movlw	1
  1906   0016E0  26D9               	addwf	fsr2l,f,c
  1907   0016E2  0E01               	movlw	1
  1908   0016E4  6EDF               	movwf	indf2,c
  1909   0016E6                     
  1910                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1911   0016E6  0E00               	movlw	0
  1912   0016E8  6E2C               	movwf	(turnLeft@cur_power+1)^0,c
  1913   0016EA  0E01               	movlw	1
  1914   0016EC  6E2B               	movwf	turnLeft@cur_power^0,c
  1915   0016EE  EFBB  F00B         	goto	l2215
  1916   0016F2                     l2201:
  1917                           
  1918                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  1919   0016F2  5021               	movf	turnLeft@mL^0,w,c
  1920   0016F4  6ED9               	movwf	fsr2l,c
  1921   0016F6  6ADA               	clrf	fsr2h,c
  1922   0016F8  5021               	movf	turnLeft@mL^0,w,c
  1923   0016FA  6EE1               	movwf	fsr1l,c
  1924   0016FC  6AE2               	clrf	fsr1h,c
  1925   0016FE  0E09               	movlw	9
  1926   001700  26E1               	addwf	fsr1l,f,c
  1927   001702  50E7               	movf	indf1,w,c
  1928   001704  242B               	addwf	turnLeft@cur_power^0,w,c
  1929   001706  6EDF               	movwf	indf2,c
  1930                           
  1931                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  1932   001708  5022               	movf	turnLeft@mR^0,w,c
  1933   00170A  6ED9               	movwf	fsr2l,c
  1934   00170C  6ADA               	clrf	fsr2h,c
  1935   00170E  5022               	movf	turnLeft@mR^0,w,c
  1936   001710  6EE1               	movwf	fsr1l,c
  1937   001712  6AE2               	clrf	fsr1h,c
  1938   001714  0E09               	movlw	9
  1939   001716  26E1               	addwf	fsr1l,f,c
  1940   001718  50E7               	movf	indf1,w,c
  1941   00171A  242B               	addwf	turnLeft@cur_power^0,w,c
  1942   00171C  6EDF               	movwf	indf2,c
  1943   00171E                     
  1944                           ;dc_motor.c: 191:         setMotorPWM(mL);
  1945   00171E  C021  F01C         	movff	turnLeft@mL,setMotorPWM@m
  1946   001722  EC41  F00C         	call	_setMotorPWM	;wreg free
  1947   001726                     
  1948                           ;dc_motor.c: 192:         setMotorPWM(mR);
  1949   001726  C022  F01C         	movff	turnLeft@mR,setMotorPWM@m
  1950   00172A  EC41  F00C         	call	_setMotorPWM	;wreg free
  1951   00172E                     
  1952                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  1953   00172E  0E00               	movlw	0
  1954   001730  6E2A               	movwf	(turnLeft@i+1)^0,c
  1955   001732  0E00               	movlw	0
  1956   001734  6E29               	movwf	turnLeft@i^0,c
  1957   001736  EFA7  F00B         	goto	l461
  1958   00173A                     l2209:
  1959                           
  1960                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1961   00173A  0E68               	movlw	104
  1962   00173C  6E26               	movwf	??_turnLeft^0,c
  1963   00173E  0EE4               	movlw	228
  1964   001740                     u1617:
  1965   001740  2EE8               	decfsz	wreg,f,c
  1966   001742  D7FE               	bra	u1617
  1967   001744  2E26               	decfsz	??_turnLeft^0,f,c
  1968   001746  D7FC               	bra	u1617
  1969   001748  D000               	nop2	
  1970   00174A                     
  1971                           ;dc_motor.c: 195:         }
  1972   00174A  4A29               	infsnz	turnLeft@i^0,f,c
  1973   00174C  2A2A               	incf	(turnLeft@i+1)^0,f,c
  1974   00174E                     l461:
  1975   00174E  5025               	movf	turnLeft@turnRamp^0,w,c
  1976   001750  6E26               	movwf	??_turnLeft^0,c
  1977   001752  6A27               	clrf	(??_turnLeft+1)^0,c
  1978   001754  5026               	movf	??_turnLeft^0,w,c
  1979   001756  5C29               	subwf	turnLeft@i^0,w,c
  1980   001758  502A               	movf	(turnLeft@i+1)^0,w,c
  1981   00175A  0A80               	xorlw	128
  1982   00175C  6E28               	movwf	(??_turnLeft+2)^0,c
  1983   00175E  5027               	movf	(??_turnLeft+1)^0,w,c
  1984   001760  0A80               	xorlw	128
  1985   001762  5828               	subwfb	(??_turnLeft+2)^0,w,c
  1986   001764  A0D8               	btfss	status,0,c
  1987   001766  EFB7  F00B         	goto	u931
  1988   00176A  EFB9  F00B         	goto	u930
  1989   00176E                     u931:
  1990   00176E  EF9D  F00B         	goto	l2209
  1991   001772                     u930:
  1992   001772                     
  1993                           ;dc_motor.c: 196:     }
  1994   001772  4A2B               	infsnz	turnLeft@cur_power^0,f,c
  1995   001774  2A2C               	incf	(turnLeft@cur_power+1)^0,f,c
  1996   001776                     l2215:
  1997   001776  5023               	movf	turnLeft@turnSpeed^0,w,c
  1998   001778  6E26               	movwf	??_turnLeft^0,c
  1999   00177A  6A27               	clrf	(??_turnLeft+1)^0,c
  2000   00177C  502B               	movf	turnLeft@cur_power^0,w,c
  2001   00177E  5C26               	subwf	??_turnLeft^0,w,c
  2002   001780  5027               	movf	(??_turnLeft+1)^0,w,c
  2003   001782  0A80               	xorlw	128
  2004   001784  6E28               	movwf	(??_turnLeft+2)^0,c
  2005   001786  502C               	movf	(turnLeft@cur_power+1)^0,w,c
  2006   001788  0A80               	xorlw	128
  2007   00178A  5828               	subwfb	(??_turnLeft+2)^0,w,c
  2008   00178C  B0D8               	btfsc	status,0,c
  2009   00178E  EFCB  F00B         	goto	u941
  2010   001792  EFCD  F00B         	goto	u940
  2011   001796                     u941:
  2012   001796  EF79  F00B         	goto	l2201
  2013   00179A                     u940:
  2014   00179A                     
  2015                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  2016   00179A  0E00               	movlw	0
  2017   00179C  6E2A               	movwf	(turnLeft@i+1)^0,c
  2018   00179E  0E00               	movlw	0
  2019   0017A0  6E29               	movwf	turnLeft@i^0,c
  2020   0017A2  EFDD  F00B         	goto	l465
  2021   0017A6                     l2219:
  2022                           
  2023                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2024   0017A6  0E68               	movlw	104
  2025   0017A8  6E26               	movwf	??_turnLeft^0,c
  2026   0017AA  0EE4               	movlw	228
  2027   0017AC                     u1627:
  2028   0017AC  2EE8               	decfsz	wreg,f,c
  2029   0017AE  D7FE               	bra	u1627
  2030   0017B0  2E26               	decfsz	??_turnLeft^0,f,c
  2031   0017B2  D7FC               	bra	u1627
  2032   0017B4  D000               	nop2	
  2033   0017B6                     
  2034                           ;dc_motor.c: 200:         }
  2035   0017B6  4A29               	infsnz	turnLeft@i^0,f,c
  2036   0017B8  2A2A               	incf	(turnLeft@i+1)^0,f,c
  2037   0017BA                     l465:
  2038   0017BA  5024               	movf	turnLeft@turnDuration^0,w,c
  2039   0017BC  6E26               	movwf	??_turnLeft^0,c
  2040   0017BE  6A27               	clrf	(??_turnLeft+1)^0,c
  2041   0017C0  5026               	movf	??_turnLeft^0,w,c
  2042   0017C2  5C29               	subwf	turnLeft@i^0,w,c
  2043   0017C4  502A               	movf	(turnLeft@i+1)^0,w,c
  2044   0017C6  0A80               	xorlw	128
  2045   0017C8  6E28               	movwf	(??_turnLeft+2)^0,c
  2046   0017CA  5027               	movf	(??_turnLeft+1)^0,w,c
  2047   0017CC  0A80               	xorlw	128
  2048   0017CE  5828               	subwfb	(??_turnLeft+2)^0,w,c
  2049   0017D0  A0D8               	btfss	status,0,c
  2050   0017D2  EFED  F00B         	goto	u951
  2051   0017D6  EFEF  F00B         	goto	u950
  2052   0017DA                     u951:
  2053   0017DA  EFD3  F00B         	goto	l2219
  2054   0017DE                     u950:
  2055   0017DE                     
  2056                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2057   0017DE  C023  F02B         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  2058   0017E2  6A2C               	clrf	(turnLeft@cur_power+1)^0,c
  2059   0017E4                     l2223:
  2060   0017E4  BE2C               	btfsc	(turnLeft@cur_power+1)^0,7,c
  2061   0017E6  EFF9  F00B         	goto	u960
  2062   0017EA  EFF7  F00B         	goto	u961
  2063   0017EE                     u961:
  2064   0017EE  EFFB  F00B         	goto	l2227
  2065   0017F2                     u960:
  2066   0017F2  EF40  F00C         	goto	l473
  2067   0017F6                     l2227:
  2068                           
  2069                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  2070   0017F6  5021               	movf	turnLeft@mL^0,w,c
  2071   0017F8  6ED9               	movwf	fsr2l,c
  2072   0017FA  6ADA               	clrf	fsr2h,c
  2073   0017FC  5021               	movf	turnLeft@mL^0,w,c
  2074   0017FE  6EE1               	movwf	fsr1l,c
  2075   001800  6AE2               	clrf	fsr1h,c
  2076   001802  0E09               	movlw	9
  2077   001804  26E1               	addwf	fsr1l,f,c
  2078   001806  50E7               	movf	indf1,w,c
  2079   001808  242B               	addwf	turnLeft@cur_power^0,w,c
  2080   00180A  6EDF               	movwf	indf2,c
  2081                           
  2082                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  2083   00180C  5022               	movf	turnLeft@mR^0,w,c
  2084   00180E  6ED9               	movwf	fsr2l,c
  2085   001810  6ADA               	clrf	fsr2h,c
  2086   001812  5022               	movf	turnLeft@mR^0,w,c
  2087   001814  6EE1               	movwf	fsr1l,c
  2088   001816  6AE2               	clrf	fsr1h,c
  2089   001818  0E09               	movlw	9
  2090   00181A  26E1               	addwf	fsr1l,f,c
  2091   00181C  50E7               	movf	indf1,w,c
  2092   00181E  242B               	addwf	turnLeft@cur_power^0,w,c
  2093   001820  6EDF               	movwf	indf2,c
  2094   001822                     
  2095                           ;dc_motor.c: 205:         setMotorPWM(mL);
  2096   001822  C021  F01C         	movff	turnLeft@mL,setMotorPWM@m
  2097   001826  EC41  F00C         	call	_setMotorPWM	;wreg free
  2098   00182A                     
  2099                           ;dc_motor.c: 206:         setMotorPWM(mR);
  2100   00182A  C022  F01C         	movff	turnLeft@mR,setMotorPWM@m
  2101   00182E  EC41  F00C         	call	_setMotorPWM	;wreg free
  2102   001832                     
  2103                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  2104   001832  0E00               	movlw	0
  2105   001834  6E2A               	movwf	(turnLeft@i+1)^0,c
  2106   001836  0E00               	movlw	0
  2107   001838  6E29               	movwf	turnLeft@i^0,c
  2108   00183A  EF29  F00C         	goto	l470
  2109   00183E                     l2235:
  2110                           
  2111                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2112   00183E  0E68               	movlw	104
  2113   001840  6E26               	movwf	??_turnLeft^0,c
  2114   001842  0EE4               	movlw	228
  2115   001844                     u1637:
  2116   001844  2EE8               	decfsz	wreg,f,c
  2117   001846  D7FE               	bra	u1637
  2118   001848  2E26               	decfsz	??_turnLeft^0,f,c
  2119   00184A  D7FC               	bra	u1637
  2120   00184C  D000               	nop2	
  2121   00184E                     
  2122                           ;dc_motor.c: 209:         }
  2123   00184E  4A29               	infsnz	turnLeft@i^0,f,c
  2124   001850  2A2A               	incf	(turnLeft@i+1)^0,f,c
  2125   001852                     l470:
  2126   001852  5025               	movf	turnLeft@turnRamp^0,w,c
  2127   001854  6E26               	movwf	??_turnLeft^0,c
  2128   001856  6A27               	clrf	(??_turnLeft+1)^0,c
  2129   001858  5026               	movf	??_turnLeft^0,w,c
  2130   00185A  5C29               	subwf	turnLeft@i^0,w,c
  2131   00185C  502A               	movf	(turnLeft@i+1)^0,w,c
  2132   00185E  0A80               	xorlw	128
  2133   001860  6E28               	movwf	(??_turnLeft+2)^0,c
  2134   001862  5027               	movf	(??_turnLeft+1)^0,w,c
  2135   001864  0A80               	xorlw	128
  2136   001866  5828               	subwfb	(??_turnLeft+2)^0,w,c
  2137   001868  A0D8               	btfss	status,0,c
  2138   00186A  EF39  F00C         	goto	u971
  2139   00186E  EF3B  F00C         	goto	u970
  2140   001872                     u971:
  2141   001872  EF1F  F00C         	goto	l2235
  2142   001876                     u970:
  2143   001876                     
  2144                           ;dc_motor.c: 210:     }
  2145   001876  062B               	decf	turnLeft@cur_power^0,f,c
  2146   001878  A0D8               	btfss	status,0,c
  2147   00187A  062C               	decf	(turnLeft@cur_power+1)^0,f,c
  2148   00187C  EFF2  F00B         	goto	l2223
  2149   001880                     l473:
  2150   001880  0012               	return		;funcret
  2151   001882                     __end_of_turnLeft:
  2152                           	callstack 0
  2153                           
  2154 ;; *************** function _reverseOneSquare *****************
  2155 ;; Defined at:
  2156 ;;		line 263 in file "dc_motor.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  2159 ;;		 -> main@motorL(10), 
  2160 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  2161 ;;		 -> main@motorR(10), 
  2162 ;;  straightSpee    1   34[COMRAM] unsigned char 
  2163 ;;  reverseDurat    1   35[COMRAM] unsigned char 
  2164 ;;  straightRamp    1   36[COMRAM] unsigned char 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  cur_power       2   42[COMRAM] int 
  2167 ;;  i               2   40[COMRAM] int 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2177 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2178 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2179 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2180 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;Total ram usage:       12 bytes
  2182 ;; Hardware stack levels used: 1
  2183 ;; Hardware stack levels required when called: 7
  2184 ;; This function calls:
  2185 ;;		_setMotorPWM
  2186 ;; This function is called by:
  2187 ;;		_move
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text6
  2192   001352                     __ptext6:
  2193                           	callstack 0
  2194   001352                     _reverseOneSquare:
  2195                           	callstack 22
  2196   001352                     
  2197                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  2198   001352  5021               	movf	reverseOneSquare@mL^0,w,c
  2199   001354  6ED9               	movwf	fsr2l,c
  2200   001356  6ADA               	clrf	fsr2h,c
  2201   001358  0E01               	movlw	1
  2202   00135A  26D9               	addwf	fsr2l,f,c
  2203   00135C  6ADF               	clrf	indf2,c
  2204                           
  2205                           ;dc_motor.c: 266:     mR->direction = 0;
  2206   00135E  5022               	movf	reverseOneSquare@mR^0,w,c
  2207   001360  6ED9               	movwf	fsr2l,c
  2208   001362  6ADA               	clrf	fsr2h,c
  2209   001364  0E01               	movlw	1
  2210   001366  26D9               	addwf	fsr2l,f,c
  2211   001368  6ADF               	clrf	indf2,c
  2212   00136A                     
  2213                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2214   00136A  0E00               	movlw	0
  2215   00136C  6E2C               	movwf	(reverseOneSquare@cur_power+1)^0,c
  2216   00136E  0E01               	movlw	1
  2217   001370  6E2B               	movwf	reverseOneSquare@cur_power^0,c
  2218   001372  EFFD  F009         	goto	l2261
  2219   001376                     l2247:
  2220                           
  2221                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  2222   001376  5021               	movf	reverseOneSquare@mL^0,w,c
  2223   001378  6ED9               	movwf	fsr2l,c
  2224   00137A  6ADA               	clrf	fsr2h,c
  2225   00137C  5021               	movf	reverseOneSquare@mL^0,w,c
  2226   00137E  6EE1               	movwf	fsr1l,c
  2227   001380  6AE2               	clrf	fsr1h,c
  2228   001382  0E09               	movlw	9
  2229   001384  26E1               	addwf	fsr1l,f,c
  2230   001386  50E7               	movf	indf1,w,c
  2231   001388  242B               	addwf	reverseOneSquare@cur_power^0,w,c
  2232   00138A  6EDF               	movwf	indf2,c
  2233                           
  2234                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  2235   00138C  5022               	movf	reverseOneSquare@mR^0,w,c
  2236   00138E  6ED9               	movwf	fsr2l,c
  2237   001390  6ADA               	clrf	fsr2h,c
  2238   001392  5022               	movf	reverseOneSquare@mR^0,w,c
  2239   001394  6EE1               	movwf	fsr1l,c
  2240   001396  6AE2               	clrf	fsr1h,c
  2241   001398  0E09               	movlw	9
  2242   00139A  26E1               	addwf	fsr1l,f,c
  2243   00139C  50E7               	movf	indf1,w,c
  2244   00139E  242B               	addwf	reverseOneSquare@cur_power^0,w,c
  2245   0013A0  6EDF               	movwf	indf2,c
  2246   0013A2                     
  2247                           ;dc_motor.c: 272:         setMotorPWM(mL);
  2248   0013A2  C021  F01C         	movff	reverseOneSquare@mL,setMotorPWM@m
  2249   0013A6  EC41  F00C         	call	_setMotorPWM	;wreg free
  2250   0013AA                     
  2251                           ;dc_motor.c: 273:         setMotorPWM(mR);
  2252   0013AA  C022  F01C         	movff	reverseOneSquare@mR,setMotorPWM@m
  2253   0013AE  EC41  F00C         	call	_setMotorPWM	;wreg free
  2254   0013B2                     
  2255                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  2256   0013B2  0E00               	movlw	0
  2257   0013B4  6E2A               	movwf	(reverseOneSquare@i+1)^0,c
  2258   0013B6  0E00               	movlw	0
  2259   0013B8  6E29               	movwf	reverseOneSquare@i^0,c
  2260   0013BA  EFE9  F009         	goto	l504
  2261   0013BE                     l2255:
  2262                           
  2263                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2264   0013BE  0E68               	movlw	104
  2265   0013C0  6E26               	movwf	??_reverseOneSquare^0,c
  2266   0013C2  0EE4               	movlw	228
  2267   0013C4                     u1647:
  2268   0013C4  2EE8               	decfsz	wreg,f,c
  2269   0013C6  D7FE               	bra	u1647
  2270   0013C8  2E26               	decfsz	??_reverseOneSquare^0,f,c
  2271   0013CA  D7FC               	bra	u1647
  2272   0013CC  D000               	nop2	
  2273   0013CE                     
  2274                           ;dc_motor.c: 276:         }
  2275   0013CE  4A29               	infsnz	reverseOneSquare@i^0,f,c
  2276   0013D0  2A2A               	incf	(reverseOneSquare@i+1)^0,f,c
  2277   0013D2                     l504:
  2278   0013D2  5025               	movf	reverseOneSquare@straightRamp^0,w,c
  2279   0013D4  6E26               	movwf	??_reverseOneSquare^0,c
  2280   0013D6  6A27               	clrf	(??_reverseOneSquare+1)^0,c
  2281   0013D8  5026               	movf	??_reverseOneSquare^0,w,c
  2282   0013DA  5C29               	subwf	reverseOneSquare@i^0,w,c
  2283   0013DC  502A               	movf	(reverseOneSquare@i+1)^0,w,c
  2284   0013DE  0A80               	xorlw	128
  2285   0013E0  6E28               	movwf	(??_reverseOneSquare+2)^0,c
  2286   0013E2  5027               	movf	(??_reverseOneSquare+1)^0,w,c
  2287   0013E4  0A80               	xorlw	128
  2288   0013E6  5828               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2289   0013E8  A0D8               	btfss	status,0,c
  2290   0013EA  EFF9  F009         	goto	u981
  2291   0013EE  EFFB  F009         	goto	u980
  2292   0013F2                     u981:
  2293   0013F2  EFDF  F009         	goto	l2255
  2294   0013F6                     u980:
  2295   0013F6                     
  2296                           ;dc_motor.c: 277:     }
  2297   0013F6  4A2B               	infsnz	reverseOneSquare@cur_power^0,f,c
  2298   0013F8  2A2C               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  2299   0013FA                     l2261:
  2300   0013FA  5023               	movf	reverseOneSquare@straightSpeed^0,w,c
  2301   0013FC  6E26               	movwf	??_reverseOneSquare^0,c
  2302   0013FE  6A27               	clrf	(??_reverseOneSquare+1)^0,c
  2303   001400  502B               	movf	reverseOneSquare@cur_power^0,w,c
  2304   001402  5C26               	subwf	??_reverseOneSquare^0,w,c
  2305   001404  5027               	movf	(??_reverseOneSquare+1)^0,w,c
  2306   001406  0A80               	xorlw	128
  2307   001408  6E28               	movwf	(??_reverseOneSquare+2)^0,c
  2308   00140A  502C               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  2309   00140C  0A80               	xorlw	128
  2310   00140E  5828               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2311   001410  B0D8               	btfsc	status,0,c
  2312   001412  EF0D  F00A         	goto	u991
  2313   001416  EF0F  F00A         	goto	u990
  2314   00141A                     u991:
  2315   00141A  EFBB  F009         	goto	l2247
  2316   00141E                     u990:
  2317   00141E                     
  2318                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  2319   00141E  0E00               	movlw	0
  2320   001420  6E2A               	movwf	(reverseOneSquare@i+1)^0,c
  2321   001422  0E00               	movlw	0
  2322   001424  6E29               	movwf	reverseOneSquare@i^0,c
  2323   001426  EF1F  F00A         	goto	l508
  2324   00142A                     l2265:
  2325                           
  2326                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2327   00142A  0E68               	movlw	104
  2328   00142C  6E26               	movwf	??_reverseOneSquare^0,c
  2329   00142E  0EE4               	movlw	228
  2330   001430                     u1657:
  2331   001430  2EE8               	decfsz	wreg,f,c
  2332   001432  D7FE               	bra	u1657
  2333   001434  2E26               	decfsz	??_reverseOneSquare^0,f,c
  2334   001436  D7FC               	bra	u1657
  2335   001438  D000               	nop2	
  2336   00143A                     
  2337                           ;dc_motor.c: 281:         }
  2338   00143A  4A29               	infsnz	reverseOneSquare@i^0,f,c
  2339   00143C  2A2A               	incf	(reverseOneSquare@i+1)^0,f,c
  2340   00143E                     l508:
  2341   00143E  5024               	movf	reverseOneSquare@reverseDuration^0,w,c
  2342   001440  6E26               	movwf	??_reverseOneSquare^0,c
  2343   001442  6A27               	clrf	(??_reverseOneSquare+1)^0,c
  2344   001444  5026               	movf	??_reverseOneSquare^0,w,c
  2345   001446  5C29               	subwf	reverseOneSquare@i^0,w,c
  2346   001448  502A               	movf	(reverseOneSquare@i+1)^0,w,c
  2347   00144A  0A80               	xorlw	128
  2348   00144C  6E28               	movwf	(??_reverseOneSquare+2)^0,c
  2349   00144E  5027               	movf	(??_reverseOneSquare+1)^0,w,c
  2350   001450  0A80               	xorlw	128
  2351   001452  5828               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2352   001454  A0D8               	btfss	status,0,c
  2353   001456  EF2F  F00A         	goto	u1001
  2354   00145A  EF31  F00A         	goto	u1000
  2355   00145E                     u1001:
  2356   00145E  EF15  F00A         	goto	l2265
  2357   001462                     u1000:
  2358   001462                     
  2359                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2360   001462  C023  F02B         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  2361   001466  6A2C               	clrf	(reverseOneSquare@cur_power+1)^0,c
  2362   001468                     l2269:
  2363   001468  BE2C               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  2364   00146A  EF3B  F00A         	goto	u1010
  2365   00146E  EF39  F00A         	goto	u1011
  2366   001472                     u1011:
  2367   001472  EF3D  F00A         	goto	l2273
  2368   001476                     u1010:
  2369   001476  EF82  F00A         	goto	l2289
  2370   00147A                     l2273:
  2371                           
  2372                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  2373   00147A  5021               	movf	reverseOneSquare@mL^0,w,c
  2374   00147C  6ED9               	movwf	fsr2l,c
  2375   00147E  6ADA               	clrf	fsr2h,c
  2376   001480  5021               	movf	reverseOneSquare@mL^0,w,c
  2377   001482  6EE1               	movwf	fsr1l,c
  2378   001484  6AE2               	clrf	fsr1h,c
  2379   001486  0E09               	movlw	9
  2380   001488  26E1               	addwf	fsr1l,f,c
  2381   00148A  50E7               	movf	indf1,w,c
  2382   00148C  242B               	addwf	reverseOneSquare@cur_power^0,w,c
  2383   00148E  6EDF               	movwf	indf2,c
  2384                           
  2385                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  2386   001490  5022               	movf	reverseOneSquare@mR^0,w,c
  2387   001492  6ED9               	movwf	fsr2l,c
  2388   001494  6ADA               	clrf	fsr2h,c
  2389   001496  5022               	movf	reverseOneSquare@mR^0,w,c
  2390   001498  6EE1               	movwf	fsr1l,c
  2391   00149A  6AE2               	clrf	fsr1h,c
  2392   00149C  0E09               	movlw	9
  2393   00149E  26E1               	addwf	fsr1l,f,c
  2394   0014A0  50E7               	movf	indf1,w,c
  2395   0014A2  242B               	addwf	reverseOneSquare@cur_power^0,w,c
  2396   0014A4  6EDF               	movwf	indf2,c
  2397   0014A6                     
  2398                           ;dc_motor.c: 286:         setMotorPWM(mL);
  2399   0014A6  C021  F01C         	movff	reverseOneSquare@mL,setMotorPWM@m
  2400   0014AA  EC41  F00C         	call	_setMotorPWM	;wreg free
  2401   0014AE                     
  2402                           ;dc_motor.c: 287:         setMotorPWM(mR);
  2403   0014AE  C022  F01C         	movff	reverseOneSquare@mR,setMotorPWM@m
  2404   0014B2  EC41  F00C         	call	_setMotorPWM	;wreg free
  2405   0014B6                     
  2406                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  2407   0014B6  0E00               	movlw	0
  2408   0014B8  6E2A               	movwf	(reverseOneSquare@i+1)^0,c
  2409   0014BA  0E00               	movlw	0
  2410   0014BC  6E29               	movwf	reverseOneSquare@i^0,c
  2411   0014BE  EF6B  F00A         	goto	l513
  2412   0014C2                     l2281:
  2413                           
  2414                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2415   0014C2  0E68               	movlw	104
  2416   0014C4  6E26               	movwf	??_reverseOneSquare^0,c
  2417   0014C6  0EE4               	movlw	228
  2418   0014C8                     u1667:
  2419   0014C8  2EE8               	decfsz	wreg,f,c
  2420   0014CA  D7FE               	bra	u1667
  2421   0014CC  2E26               	decfsz	??_reverseOneSquare^0,f,c
  2422   0014CE  D7FC               	bra	u1667
  2423   0014D0  D000               	nop2	
  2424   0014D2                     
  2425                           ;dc_motor.c: 290:         }
  2426   0014D2  4A29               	infsnz	reverseOneSquare@i^0,f,c
  2427   0014D4  2A2A               	incf	(reverseOneSquare@i+1)^0,f,c
  2428   0014D6                     l513:
  2429   0014D6  5025               	movf	reverseOneSquare@straightRamp^0,w,c
  2430   0014D8  6E26               	movwf	??_reverseOneSquare^0,c
  2431   0014DA  6A27               	clrf	(??_reverseOneSquare+1)^0,c
  2432   0014DC  5026               	movf	??_reverseOneSquare^0,w,c
  2433   0014DE  5C29               	subwf	reverseOneSquare@i^0,w,c
  2434   0014E0  502A               	movf	(reverseOneSquare@i+1)^0,w,c
  2435   0014E2  0A80               	xorlw	128
  2436   0014E4  6E28               	movwf	(??_reverseOneSquare+2)^0,c
  2437   0014E6  5027               	movf	(??_reverseOneSquare+1)^0,w,c
  2438   0014E8  0A80               	xorlw	128
  2439   0014EA  5828               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2440   0014EC  A0D8               	btfss	status,0,c
  2441   0014EE  EF7B  F00A         	goto	u1021
  2442   0014F2  EF7D  F00A         	goto	u1020
  2443   0014F6                     u1021:
  2444   0014F6  EF61  F00A         	goto	l2281
  2445   0014FA                     u1020:
  2446   0014FA                     
  2447                           ;dc_motor.c: 291:     }
  2448   0014FA  062B               	decf	reverseOneSquare@cur_power^0,f,c
  2449   0014FC  A0D8               	btfss	status,0,c
  2450   0014FE  062C               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  2451   001500  EF34  F00A         	goto	l2269
  2452   001504                     l2289:
  2453                           
  2454                           ;dc_motor.c: 292:     mL->power = 0;
  2455   001504  5021               	movf	reverseOneSquare@mL^0,w,c
  2456   001506  6ED9               	movwf	fsr2l,c
  2457   001508  6ADA               	clrf	fsr2h,c
  2458   00150A  6ADF               	clrf	indf2,c
  2459                           
  2460                           ;dc_motor.c: 293:     mR->power = 0;
  2461   00150C  5022               	movf	reverseOneSquare@mR^0,w,c
  2462   00150E  6ED9               	movwf	fsr2l,c
  2463   001510  6ADA               	clrf	fsr2h,c
  2464   001512  6ADF               	clrf	indf2,c
  2465   001514  0012               	return		;funcret
  2466   001516                     __end_of_reverseOneSquare:
  2467                           	callstack 0
  2468                           
  2469 ;; *************** function _fullSpeedAhead *****************
  2470 ;; Defined at:
  2471 ;;		line 246 in file "dc_motor.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  2474 ;;		 -> main@motorL(10), 
  2475 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  2476 ;;		 -> main@motorR(10), 
  2477 ;;  straightSpee    1   34[COMRAM] unsigned char 
  2478 ;;  straightRamp    1   35[COMRAM] unsigned char 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  cur_power       2   41[COMRAM] int 
  2481 ;;  i               2   39[COMRAM] int 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2492 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2493 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2494 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2495 ;;Total ram usage:       11 bytes
  2496 ;; Hardware stack levels used: 1
  2497 ;; Hardware stack levels required when called: 7
  2498 ;; This function calls:
  2499 ;;		_setMotorPWM
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;;		_move
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text7
  2507   001DEA                     __ptext7:
  2508                           	callstack 0
  2509   001DEA                     _fullSpeedAhead:
  2510                           	callstack 22
  2511   001DEA                     
  2512                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  2513   001DEA  5021               	movf	fullSpeedAhead@mL^0,w,c
  2514   001DEC  6ED9               	movwf	fsr2l,c
  2515   001DEE  6ADA               	clrf	fsr2h,c
  2516   001DF0  0E01               	movlw	1
  2517   001DF2  26D9               	addwf	fsr2l,f,c
  2518   001DF4  0E01               	movlw	1
  2519   001DF6  6EDF               	movwf	indf2,c
  2520                           
  2521                           ;dc_motor.c: 249:     mR->direction = 1;
  2522   001DF8  5022               	movf	fullSpeedAhead@mR^0,w,c
  2523   001DFA  6ED9               	movwf	fsr2l,c
  2524   001DFC  6ADA               	clrf	fsr2h,c
  2525   001DFE  0E01               	movlw	1
  2526   001E00  26D9               	addwf	fsr2l,f,c
  2527   001E02  0E01               	movlw	1
  2528   001E04  6EDF               	movwf	indf2,c
  2529   001E06                     
  2530                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2531   001E06  0E00               	movlw	0
  2532   001E08  6E2B               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  2533   001E0A  0E01               	movlw	1
  2534   001E0C  6E2A               	movwf	fullSpeedAhead@cur_power^0,c
  2535   001E0E  EF4B  F00F         	goto	l2101
  2536   001E12                     l2087:
  2537                           
  2538                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  2539   001E12  5021               	movf	fullSpeedAhead@mL^0,w,c
  2540   001E14  6ED9               	movwf	fsr2l,c
  2541   001E16  6ADA               	clrf	fsr2h,c
  2542   001E18  5021               	movf	fullSpeedAhead@mL^0,w,c
  2543   001E1A  6EE1               	movwf	fsr1l,c
  2544   001E1C  6AE2               	clrf	fsr1h,c
  2545   001E1E  0E09               	movlw	9
  2546   001E20  26E1               	addwf	fsr1l,f,c
  2547   001E22  50E7               	movf	indf1,w,c
  2548   001E24  242A               	addwf	fullSpeedAhead@cur_power^0,w,c
  2549   001E26  6EDF               	movwf	indf2,c
  2550                           
  2551                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  2552   001E28  5022               	movf	fullSpeedAhead@mR^0,w,c
  2553   001E2A  6ED9               	movwf	fsr2l,c
  2554   001E2C  6ADA               	clrf	fsr2h,c
  2555   001E2E  5022               	movf	fullSpeedAhead@mR^0,w,c
  2556   001E30  6EE1               	movwf	fsr1l,c
  2557   001E32  6AE2               	clrf	fsr1h,c
  2558   001E34  0E09               	movlw	9
  2559   001E36  26E1               	addwf	fsr1l,f,c
  2560   001E38  50E7               	movf	indf1,w,c
  2561   001E3A  242A               	addwf	fullSpeedAhead@cur_power^0,w,c
  2562   001E3C  6EDF               	movwf	indf2,c
  2563   001E3E                     
  2564                           ;dc_motor.c: 255:         setMotorPWM(mL);
  2565   001E3E  C021  F01C         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2566   001E42  EC41  F00C         	call	_setMotorPWM	;wreg free
  2567   001E46                     
  2568                           ;dc_motor.c: 256:         setMotorPWM(mR);
  2569   001E46  C022  F01C         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2570   001E4A  EC41  F00C         	call	_setMotorPWM	;wreg free
  2571   001E4E                     
  2572                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  2573   001E4E  0E00               	movlw	0
  2574   001E50  6E29               	movwf	(fullSpeedAhead@i+1)^0,c
  2575   001E52  0E00               	movlw	0
  2576   001E54  6E28               	movwf	fullSpeedAhead@i^0,c
  2577   001E56  EF37  F00F         	goto	l495
  2578   001E5A                     l2095:
  2579                           
  2580                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2581   001E5A  0E68               	movlw	104
  2582   001E5C  6E25               	movwf	??_fullSpeedAhead^0,c
  2583   001E5E  0EE4               	movlw	228
  2584   001E60                     u1677:
  2585   001E60  2EE8               	decfsz	wreg,f,c
  2586   001E62  D7FE               	bra	u1677
  2587   001E64  2E25               	decfsz	??_fullSpeedAhead^0,f,c
  2588   001E66  D7FC               	bra	u1677
  2589   001E68  D000               	nop2	
  2590   001E6A                     
  2591                           ;dc_motor.c: 259:         }
  2592   001E6A  4A28               	infsnz	fullSpeedAhead@i^0,f,c
  2593   001E6C  2A29               	incf	(fullSpeedAhead@i+1)^0,f,c
  2594   001E6E                     l495:
  2595   001E6E  5024               	movf	fullSpeedAhead@straightRamp^0,w,c
  2596   001E70  6E25               	movwf	??_fullSpeedAhead^0,c
  2597   001E72  6A26               	clrf	(??_fullSpeedAhead+1)^0,c
  2598   001E74  5025               	movf	??_fullSpeedAhead^0,w,c
  2599   001E76  5C28               	subwf	fullSpeedAhead@i^0,w,c
  2600   001E78  5029               	movf	(fullSpeedAhead@i+1)^0,w,c
  2601   001E7A  0A80               	xorlw	128
  2602   001E7C  6E27               	movwf	(??_fullSpeedAhead+2)^0,c
  2603   001E7E  5026               	movf	(??_fullSpeedAhead+1)^0,w,c
  2604   001E80  0A80               	xorlw	128
  2605   001E82  5827               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2606   001E84  A0D8               	btfss	status,0,c
  2607   001E86  EF47  F00F         	goto	u841
  2608   001E8A  EF49  F00F         	goto	u840
  2609   001E8E                     u841:
  2610   001E8E  EF2D  F00F         	goto	l2095
  2611   001E92                     u840:
  2612   001E92                     
  2613                           ;dc_motor.c: 260:     }
  2614   001E92  4A2A               	infsnz	fullSpeedAhead@cur_power^0,f,c
  2615   001E94  2A2B               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  2616   001E96                     l2101:
  2617   001E96  5023               	movf	fullSpeedAhead@straightSpeed^0,w,c
  2618   001E98  6E25               	movwf	??_fullSpeedAhead^0,c
  2619   001E9A  6A26               	clrf	(??_fullSpeedAhead+1)^0,c
  2620   001E9C  502A               	movf	fullSpeedAhead@cur_power^0,w,c
  2621   001E9E  5C25               	subwf	??_fullSpeedAhead^0,w,c
  2622   001EA0  5026               	movf	(??_fullSpeedAhead+1)^0,w,c
  2623   001EA2  0A80               	xorlw	128
  2624   001EA4  6E27               	movwf	(??_fullSpeedAhead+2)^0,c
  2625   001EA6  502B               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  2626   001EA8  0A80               	xorlw	128
  2627   001EAA  5827               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2628   001EAC  B0D8               	btfsc	status,0,c
  2629   001EAE  EF5B  F00F         	goto	u851
  2630   001EB2  EF5D  F00F         	goto	u850
  2631   001EB6                     u851:
  2632   001EB6  EF09  F00F         	goto	l2087
  2633   001EBA                     u850:
  2634   001EBA  0012               	return		;funcret
  2635   001EBC                     __end_of_fullSpeedAhead:
  2636                           	callstack 0
  2637                           
  2638 ;; *************** function _setMotorPWM *****************
  2639 ;; Defined at:
  2640 ;;		line 65 in file "dc_motor.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  m               1   27[COMRAM] PTR struct DC_motor
  2643 ;;		 -> main@motorR(10), main@motorL(10), 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;  negDuty         1   31[COMRAM] unsigned char 
  2646 ;;  posDuty         1   30[COMRAM] unsigned char 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2656 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2660 ;;Total ram usage:        5 bytes
  2661 ;; Hardware stack levels used: 1
  2662 ;; Hardware stack levels required when called: 6
  2663 ;; This function calls:
  2664 ;;		___lwdiv
  2665 ;;		___wmul
  2666 ;; This function is called by:
  2667 ;;		_stop
  2668 ;;		_turnLeft
  2669 ;;		_turnRight
  2670 ;;		_fullSpeedAhead
  2671 ;;		_reverseOneSquare
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text8
  2676   001882                     __ptext8:
  2677                           	callstack 0
  2678   001882                     _setMotorPWM:
  2679                           	callstack 23
  2680   001882                     
  2681                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2682   001882  501C               	movf	setMotorPWM@m^0,w,c
  2683   001884  6ED9               	movwf	fsr2l,c
  2684   001886  6ADA               	clrf	fsr2h,c
  2685   001888  0E02               	movlw	2
  2686   00188A  26D9               	addwf	fsr2l,f,c
  2687   00188C  50DF               	movf	indf2,w,c
  2688   00188E  B4D8               	btfsc	status,2,c
  2689   001890  EF4C  F00C         	goto	u821
  2690   001894  EF4E  F00C         	goto	u820
  2691   001898                     u821:
  2692   001898  EF7E  F00C         	goto	l2061
  2693   00189C                     u820:
  2694   00189C                     
  2695                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2696   00189C  501C               	movf	setMotorPWM@m^0,w,c
  2697   00189E  6ED9               	movwf	fsr2l,c
  2698   0018A0  6ADA               	clrf	fsr2h,c
  2699   0018A2  50DF               	movf	indf2,w,c
  2700   0018A4  6E1D               	movwf	??_setMotorPWM^0,c
  2701   0018A6  501D               	movf	??_setMotorPWM^0,w,c
  2702   0018A8  6E0F               	movwf	___wmul@multiplier^0,c
  2703   0018AA  6A10               	clrf	(___wmul@multiplier+1)^0,c
  2704   0018AC  501C               	movf	setMotorPWM@m^0,w,c
  2705   0018AE  6ED9               	movwf	fsr2l,c
  2706   0018B0  6ADA               	clrf	fsr2h,c
  2707   0018B2  0E03               	movlw	3
  2708   0018B4  26D9               	addwf	fsr2l,f,c
  2709   0018B6  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2710   0018BA  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2711   0018BE  EC82  F011         	call	___wmul	;wreg free
  2712   0018C2  C00F  F015         	movff	?___wmul,___lwdiv@dividend
  2713   0018C6  C010  F016         	movff	?___wmul+1,___lwdiv@dividend+1
  2714   0018CA  0E00               	movlw	0
  2715   0018CC  6E18               	movwf	(___lwdiv@divisor+1)^0,c
  2716   0018CE  0E64               	movlw	100
  2717   0018D0  6E17               	movwf	___lwdiv@divisor^0,c
  2718   0018D2  EC38  F010         	call	___lwdiv	;wreg free
  2719   0018D6  501C               	movf	setMotorPWM@m^0,w,c
  2720   0018D8  6ED9               	movwf	fsr2l,c
  2721   0018DA  6ADA               	clrf	fsr2h,c
  2722   0018DC  0E03               	movlw	3
  2723   0018DE  26D9               	addwf	fsr2l,f,c
  2724   0018E0  50DF               	movf	indf2,w,c
  2725   0018E2  6E1E               	movwf	(??_setMotorPWM+1)^0,c
  2726   0018E4  5015               	movf	?___lwdiv^0,w,c
  2727   0018E6  5C1E               	subwf	(??_setMotorPWM+1)^0,w,c
  2728   0018E8  6E1F               	movwf	setMotorPWM@posDuty^0,c
  2729   0018EA                     
  2730                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2731   0018EA  501C               	movf	setMotorPWM@m^0,w,c
  2732   0018EC  6ED9               	movwf	fsr2l,c
  2733   0018EE  6ADA               	clrf	fsr2h,c
  2734   0018F0  0E03               	movlw	3
  2735   0018F2  26D9               	addwf	fsr2l,f,c
  2736   0018F4  50DF               	movf	indf2,w,c
  2737   0018F6  6E20               	movwf	setMotorPWM@negDuty^0,c
  2738                           
  2739                           ;dc_motor.c: 72:     }
  2740   0018F8  EF9F  F00C         	goto	l2065
  2741   0018FC                     l2061:
  2742                           
  2743                           ;dc_motor.c: 74:         posDuty=0;
  2744   0018FC  0E00               	movlw	0
  2745   0018FE  6E1F               	movwf	setMotorPWM@posDuty^0,c
  2746   001900                     
  2747                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2748   001900  501C               	movf	setMotorPWM@m^0,w,c
  2749   001902  6ED9               	movwf	fsr2l,c
  2750   001904  6ADA               	clrf	fsr2h,c
  2751   001906  50DF               	movf	indf2,w,c
  2752   001908  6E1D               	movwf	??_setMotorPWM^0,c
  2753   00190A  501D               	movf	??_setMotorPWM^0,w,c
  2754   00190C  6E0F               	movwf	___wmul@multiplier^0,c
  2755   00190E  6A10               	clrf	(___wmul@multiplier+1)^0,c
  2756   001910  501C               	movf	setMotorPWM@m^0,w,c
  2757   001912  6ED9               	movwf	fsr2l,c
  2758   001914  6ADA               	clrf	fsr2h,c
  2759   001916  0E03               	movlw	3
  2760   001918  26D9               	addwf	fsr2l,f,c
  2761   00191A  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2762   00191E  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2763   001922  EC82  F011         	call	___wmul	;wreg free
  2764   001926  C00F  F015         	movff	?___wmul,___lwdiv@dividend
  2765   00192A  C010  F016         	movff	?___wmul+1,___lwdiv@dividend+1
  2766   00192E  0E00               	movlw	0
  2767   001930  6E18               	movwf	(___lwdiv@divisor+1)^0,c
  2768   001932  0E64               	movlw	100
  2769   001934  6E17               	movwf	___lwdiv@divisor^0,c
  2770   001936  EC38  F010         	call	___lwdiv	;wreg free
  2771   00193A  5015               	movf	?___lwdiv^0,w,c
  2772   00193C  6E20               	movwf	setMotorPWM@negDuty^0,c
  2773   00193E                     l2065:
  2774                           
  2775                           ;dc_motor.c: 78:     if (m->direction) {
  2776   00193E  501C               	movf	setMotorPWM@m^0,w,c
  2777   001940  6ED9               	movwf	fsr2l,c
  2778   001942  6ADA               	clrf	fsr2h,c
  2779   001944  0E01               	movlw	1
  2780   001946  26D9               	addwf	fsr2l,f,c
  2781   001948  50DF               	movf	indf2,w,c
  2782   00194A  B4D8               	btfsc	status,2,c
  2783   00194C  EFAA  F00C         	goto	u831
  2784   001950  EFAC  F00C         	goto	u830
  2785   001954                     u831:
  2786   001954  EFCC  F00C         	goto	l2069
  2787   001958                     u830:
  2788   001958                     
  2789                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  2790   001958  501C               	movf	setMotorPWM@m^0,w,c
  2791   00195A  6ED9               	movwf	fsr2l,c
  2792   00195C  6ADA               	clrf	fsr2h,c
  2793   00195E  0E05               	movlw	5
  2794   001960  26D9               	addwf	fsr2l,f,c
  2795   001962  CFDE F01D          	movff	postinc2,??_setMotorPWM
  2796   001966  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  2797   00196A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  2798   00196E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2799   001972  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  2800                           
  2801                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  2802   001976  501C               	movf	setMotorPWM@m^0,w,c
  2803   001978  6ED9               	movwf	fsr2l,c
  2804   00197A  6ADA               	clrf	fsr2h,c
  2805   00197C  0E07               	movlw	7
  2806   00197E  26D9               	addwf	fsr2l,f,c
  2807   001980  CFDE F01D          	movff	postinc2,??_setMotorPWM
  2808   001984  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  2809   001988  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  2810   00198C  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2811   001990  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  2812                           
  2813                           ;dc_motor.c: 81:     } else {
  2814   001994  EFEA  F00C         	goto	l430
  2815   001998                     l2069:
  2816                           
  2817                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  2818   001998  501C               	movf	setMotorPWM@m^0,w,c
  2819   00199A  6ED9               	movwf	fsr2l,c
  2820   00199C  6ADA               	clrf	fsr2h,c
  2821   00199E  0E05               	movlw	5
  2822   0019A0  26D9               	addwf	fsr2l,f,c
  2823   0019A2  CFDE F01D          	movff	postinc2,??_setMotorPWM
  2824   0019A6  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  2825   0019AA  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  2826   0019AE  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2827   0019B2  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  2828                           
  2829                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  2830   0019B6  501C               	movf	setMotorPWM@m^0,w,c
  2831   0019B8  6ED9               	movwf	fsr2l,c
  2832   0019BA  6ADA               	clrf	fsr2h,c
  2833   0019BC  0E07               	movlw	7
  2834   0019BE  26D9               	addwf	fsr2l,f,c
  2835   0019C0  CFDE F01D          	movff	postinc2,??_setMotorPWM
  2836   0019C4  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  2837   0019C8  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  2838   0019CC  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2839   0019D0  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  2840   0019D4                     l430:
  2841   0019D4  0012               	return		;funcret
  2842   0019D6                     __end_of_setMotorPWM:
  2843                           	callstack 0
  2844                           
  2845 ;; *************** function ___wmul *****************
  2846 ;; Defined at:
  2847 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  multiplier      2   14[COMRAM] unsigned int 
  2850 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  product         2   18[COMRAM] unsigned int 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  2   14[COMRAM] unsigned int 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, prodl, prodh
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;Total ram usage:        6 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 5
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_setMotorPWM
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text9
  2877   002304                     __ptext9:
  2878                           	callstack 0
  2879   002304                     ___wmul:
  2880                           	callstack 23
  2881   002304  500F               	movf	___wmul@multiplier^0,w,c
  2882   002306  0211               	mulwf	___wmul@multiplicand^0,c
  2883   002308  CFF3 F013          	movff	prodl,___wmul@product
  2884   00230C  CFF4 F014          	movff	prodh,___wmul@product+1
  2885   002310  500F               	movf	___wmul@multiplier^0,w,c
  2886   002312  0212               	mulwf	(___wmul@multiplicand+1)^0,c
  2887   002314  50F3               	movf	243,w,c
  2888   002316  2614               	addwf	(___wmul@product+1)^0,f,c
  2889   002318  5010               	movf	(___wmul@multiplier+1)^0,w,c
  2890   00231A  0211               	mulwf	___wmul@multiplicand^0,c
  2891   00231C  50F3               	movf	243,w,c
  2892   00231E  2614               	addwf	(___wmul@product+1)^0,f,c
  2893   002320  C013  F00F         	movff	___wmul@product,?___wmul
  2894   002324  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2895   002328  0012               	return		;funcret
  2896   00232A                     __end_of___wmul:
  2897                           	callstack 0
  2898                           
  2899 ;; *************** function ___lwdiv *****************
  2900 ;; Defined at:
  2901 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  dividend        2   20[COMRAM] unsigned int 
  2904 ;;  divisor         2   22[COMRAM] unsigned int 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  quotient        2   24[COMRAM] unsigned int 
  2907 ;;  counter         1   26[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  2   20[COMRAM] unsigned int 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2918 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2921 ;;Total ram usage:        7 bytes
  2922 ;; Hardware stack levels used: 1
  2923 ;; Hardware stack levels required when called: 5
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_setMotorPWM
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text10
  2932   002070                     __ptext10:
  2933                           	callstack 0
  2934   002070                     ___lwdiv:
  2935                           	callstack 23
  2936   002070  0E00               	movlw	0
  2937   002072  6E1A               	movwf	(___lwdiv@quotient+1)^0,c
  2938   002074  0E00               	movlw	0
  2939   002076  6E19               	movwf	___lwdiv@quotient^0,c
  2940   002078  5017               	movf	___lwdiv@divisor^0,w,c
  2941   00207A  1018               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2942   00207C  B4D8               	btfsc	status,2,c
  2943   00207E  EF43  F010         	goto	u771
  2944   002082  EF45  F010         	goto	u770
  2945   002086                     u771:
  2946   002086  EF6D  F010         	goto	l1025
  2947   00208A                     u770:
  2948   00208A  0E01               	movlw	1
  2949   00208C  6E1B               	movwf	___lwdiv@counter^0,c
  2950   00208E  EF4D  F010         	goto	l2035
  2951   002092                     l2033:
  2952   002092  90D8               	bcf	status,0,c
  2953   002094  3617               	rlcf	___lwdiv@divisor^0,f,c
  2954   002096  3618               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2955   002098  2A1B               	incf	___lwdiv@counter^0,f,c
  2956   00209A                     l2035:
  2957   00209A  AE18               	btfss	(___lwdiv@divisor+1)^0,7,c
  2958   00209C  EF52  F010         	goto	u781
  2959   0020A0  EF54  F010         	goto	u780
  2960   0020A4                     u781:
  2961   0020A4  EF49  F010         	goto	l2033
  2962   0020A8                     u780:
  2963   0020A8                     l2037:
  2964   0020A8  90D8               	bcf	status,0,c
  2965   0020AA  3619               	rlcf	___lwdiv@quotient^0,f,c
  2966   0020AC  361A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2967   0020AE  5017               	movf	___lwdiv@divisor^0,w,c
  2968   0020B0  5C15               	subwf	___lwdiv@dividend^0,w,c
  2969   0020B2  5018               	movf	(___lwdiv@divisor+1)^0,w,c
  2970   0020B4  5816               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2971   0020B6  A0D8               	btfss	status,0,c
  2972   0020B8  EF60  F010         	goto	u791
  2973   0020BC  EF62  F010         	goto	u790
  2974   0020C0                     u791:
  2975   0020C0  EF67  F010         	goto	l2045
  2976   0020C4                     u790:
  2977   0020C4  5017               	movf	___lwdiv@divisor^0,w,c
  2978   0020C6  5E15               	subwf	___lwdiv@dividend^0,f,c
  2979   0020C8  5018               	movf	(___lwdiv@divisor+1)^0,w,c
  2980   0020CA  5A16               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2981   0020CC  8019               	bsf	___lwdiv@quotient^0,0,c
  2982   0020CE                     l2045:
  2983   0020CE  90D8               	bcf	status,0,c
  2984   0020D0  3218               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2985   0020D2  3217               	rrcf	___lwdiv@divisor^0,f,c
  2986   0020D4  2E1B               	decfsz	___lwdiv@counter^0,f,c
  2987   0020D6  EF54  F010         	goto	l2037
  2988   0020DA                     l1025:
  2989   0020DA  C019  F015         	movff	___lwdiv@quotient,?___lwdiv
  2990   0020DE  C01A  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2991   0020E2  0012               	return		;funcret
  2992   0020E4                     __end_of___lwdiv:
  2993                           	callstack 0
  2994                           
  2995 ;; *************** function _initUSART4 *****************
  2996 ;; Defined at:
  2997 ;;		line 4 in file "serial.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3015 ;;Total ram usage:        0 bytes
  3016 ;; Hardware stack levels used: 1
  3017 ;; Hardware stack levels required when called: 5
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_main
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text11
  3026   0023DA                     __ptext11:
  3027                           	callstack 0
  3028   0023DA                     _initUSART4:
  3029                           	callstack 25
  3030   0023DA                     
  3031                           ;serial.c: 7:     RC0PPS = 0x12;
  3032   0023DA  0E12               	movlw	18
  3033   0023DC  010E               	movlb	14	; () banked
  3034   0023DE  6F62               	movwf	98,b	;volatile
  3035                           
  3036                           ;serial.c: 8:     RX4PPS = 0x11;
  3037   0023E0  0E11               	movlw	17
  3038   0023E2  6F15               	movwf	21,b	;volatile
  3039   0023E4                     
  3040                           ; BSR set to: 14
  3041                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  3042   0023E4  97E9               	bcf	233,3,b	;volatile
  3043   0023E6                     
  3044                           ; BSR set to: 14
  3045                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  3046   0023E6  95E8               	bcf	232,2,b	;volatile
  3047                           
  3048                           ;serial.c: 13:     SP4BRGL = 51;
  3049   0023E8  0E33               	movlw	51
  3050   0023EA  6FE5               	movwf	229,b	;volatile
  3051                           
  3052                           ;serial.c: 14:     SP4BRGH = 0;
  3053   0023EC  0E00               	movlw	0
  3054   0023EE  6FE6               	movwf	230,b	;volatile
  3055   0023F0                     
  3056                           ; BSR set to: 14
  3057                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  3058   0023F0  89E7               	bsf	231,4,b	;volatile
  3059   0023F2                     
  3060                           ; BSR set to: 14
  3061                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  3062   0023F2  8BE8               	bsf	232,5,b	;volatile
  3063   0023F4                     
  3064                           ; BSR set to: 14
  3065                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  3066   0023F4  8FE7               	bsf	231,7,b	;volatile
  3067   0023F6                     
  3068                           ; BSR set to: 14
  3069   0023F6  0012               	return		;funcret
  3070   0023F8                     __end_of_initUSART4:
  3071                           	callstack 0
  3072                           
  3073 ;; *************** function _initDCmotorsPWM *****************
  3074 ;; Defined at:
  3075 ;;		line 5 in file "dc_motor.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  PWMperiod       2   14[COMRAM] unsigned int 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;Total ram usage:        2 bytes
  3094 ;; Hardware stack levels used: 1
  3095 ;; Hardware stack levels required when called: 5
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_main
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text12
  3104   001FE0                     __ptext12:
  3105                           	callstack 0
  3106   001FE0                     _initDCmotorsPWM:
  3107                           	callstack 25
  3108   001FE0                     
  3109                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  3110   001FE0  947D               	bcf	125,2,c	;volatile
  3111                           
  3112                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  3113   001FE2  9485               	bcf	133,2,c	;volatile
  3114                           
  3115                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  3116   001FE4  987D               	bcf	125,4,c	;volatile
  3117                           
  3118                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  3119   001FE6  9885               	bcf	133,4,c	;volatile
  3120                           
  3121                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  3122   001FE8  9E7B               	bcf	123,7,c	;volatile
  3123                           
  3124                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  3125   001FEA  9E83               	bcf	131,7,c	;volatile
  3126                           
  3127                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  3128   001FEC  9C7F               	bcf	127,6,c	;volatile
  3129                           
  3130                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  3131   001FEE  9C87               	bcf	135,6,c	;volatile
  3132   001FF0                     
  3133                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3134   001FF0  0E05               	movlw	5
  3135   001FF2  010E               	movlb	14	; () banked
  3136   001FF4  6F74               	movwf	116,b	;volatile
  3137                           
  3138                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3139   001FF6  0E06               	movlw	6
  3140   001FF8  6F76               	movwf	118,b	;volatile
  3141                           
  3142                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3143   001FFA  0E07               	movlw	7
  3144   001FFC  6F69               	movwf	105,b	;volatile
  3145                           
  3146                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3147   001FFE  0E08               	movlw	8
  3148   002000  6F88               	movwf	136,b	;volatile
  3149                           
  3150                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  3151   002002  50BD               	movf	189,w,c	;volatile
  3152   002004  0B8F               	andlw	-113
  3153   002006  0930               	iorlw	48
  3154   002008  6EBD               	movwf	189,c	;volatile
  3155                           
  3156                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3157   00200A  0EE0               	movlw	-32
  3158   00200C  16BE               	andwf	190,f,c	;volatile
  3159                           
  3160                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3161   00200E  50BF               	movf	191,w,c	;volatile
  3162   002010  0BF0               	andlw	-16
  3163   002012  0901               	iorlw	1
  3164   002014  6EBF               	movwf	191,c	;volatile
  3165   002016                     
  3166                           ; BSR set to: 14
  3167                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3168   002016  C00F  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3169   00201A                     
  3170                           ; BSR set to: 14
  3171                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3172   00201A  8EBD               	bsf	189,7,c	;volatile
  3173                           
  3174                           ;dc_motor.c: 35:     CCPR1H=0;
  3175   00201C  0E00               	movlw	0
  3176   00201E  6EAA               	movwf	170,c	;volatile
  3177                           
  3178                           ;dc_motor.c: 36:     CCPR2H=0;
  3179   002020  0E00               	movlw	0
  3180   002022  6EA6               	movwf	166,c	;volatile
  3181                           
  3182                           ;dc_motor.c: 37:     CCPR3H=0;
  3183   002024  0E00               	movlw	0
  3184   002026  010F               	movlb	15	; () banked
  3185   002028  6F25               	movwf	37,b	;volatile
  3186                           
  3187                           ;dc_motor.c: 38:     CCPR4H=0;
  3188   00202A  0E00               	movlw	0
  3189   00202C  6F21               	movwf	33,b	;volatile
  3190                           
  3191                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3192   00202E  0EFC               	movlw	-4
  3193   002030  16AD               	andwf	173,f,c	;volatile
  3194                           
  3195                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3196   002032  0EF3               	movlw	-13
  3197   002034  16AD               	andwf	173,f,c	;volatile
  3198                           
  3199                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3200   002036  0ECF               	movlw	-49
  3201   002038  16AD               	andwf	173,f,c	;volatile
  3202                           
  3203                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3204   00203A  0E3F               	movlw	-193
  3205   00203C  16AD               	andwf	173,f,c	;volatile
  3206   00203E                     
  3207                           ; BSR set to: 15
  3208                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3209   00203E  88AB               	bsf	171,4,c	;volatile
  3210                           
  3211                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3212   002040  50AB               	movf	171,w,c	;volatile
  3213   002042  0BF0               	andlw	-16
  3214   002044  090C               	iorlw	12
  3215   002046  6EAB               	movwf	171,c	;volatile
  3216   002048                     
  3217                           ; BSR set to: 15
  3218                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3219   002048  8EAB               	bsf	171,7,c	;volatile
  3220   00204A                     
  3221                           ; BSR set to: 15
  3222                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3223   00204A  88A7               	bsf	167,4,c	;volatile
  3224                           
  3225                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3226   00204C  50A7               	movf	167,w,c	;volatile
  3227   00204E  0BF0               	andlw	-16
  3228   002050  090C               	iorlw	12
  3229   002052  6EA7               	movwf	167,c	;volatile
  3230   002054                     
  3231                           ; BSR set to: 15
  3232                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3233   002054  8EA7               	bsf	167,7,c	;volatile
  3234   002056                     
  3235                           ; BSR set to: 15
  3236                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3237   002056  8926               	bsf	38,4,b	;volatile
  3238                           
  3239                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3240   002058  5126               	movf	38,w,b	;volatile
  3241   00205A  0BF0               	andlw	-16
  3242   00205C  090C               	iorlw	12
  3243   00205E  6F26               	movwf	38,b	;volatile
  3244   002060                     
  3245                           ; BSR set to: 15
  3246                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3247   002060  8F26               	bsf	38,7,b	;volatile
  3248   002062                     
  3249                           ; BSR set to: 15
  3250                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3251   002062  8922               	bsf	34,4,b	;volatile
  3252                           
  3253                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3254   002064  5122               	movf	34,w,b	;volatile
  3255   002066  0BF0               	andlw	-16
  3256   002068  090C               	iorlw	12
  3257   00206A  6F22               	movwf	34,b	;volatile
  3258   00206C                     
  3259                           ; BSR set to: 15
  3260                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3261   00206C  8F22               	bsf	34,7,b	;volatile
  3262   00206E                     
  3263                           ; BSR set to: 15
  3264   00206E  0012               	return		;funcret
  3265   002070                     __end_of_initDCmotorsPWM:
  3266                           	callstack 0
  3267                           
  3268 ;; *************** function _color_read *****************
  3269 ;; Defined at:
  3270 ;;		line 72 in file "color.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  RGBC            1   18[COMRAM] PTR struct RGBC_val
  3273 ;;		 -> main@RGBC(8), 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3285 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3287 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3288 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3289 ;;Total ram usage:        8 bytes
  3290 ;; Hardware stack levels used: 1
  3291 ;; Hardware stack levels required when called: 7
  3292 ;; This function calls:
  3293 ;;		_I2C_2_Master_Read
  3294 ;;		_I2C_2_Master_RepStart
  3295 ;;		_I2C_2_Master_Start
  3296 ;;		_I2C_2_Master_Stop
  3297 ;;		_I2C_2_Master_Write
  3298 ;; This function is called by:
  3299 ;;		_main
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text13
  3304   00117C                     __ptext13:
  3305                           	callstack 0
  3306   00117C                     _color_read:
  3307                           	callstack 23
  3308   00117C                     
  3309                           ;color.c: 72: void color_read(RGBC_val *RGBC);color.c: 73: {;color.c: 74:  I2C_2_Master_
      +                          Start();
  3310   00117C  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  3311                           
  3312                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  3313   001180  0E52               	movlw	82
  3314   001182  EC12  F012         	call	_I2C_2_Master_Write
  3315                           
  3316                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x16);
  3317   001186  0EB6               	movlw	182
  3318   001188  EC12  F012         	call	_I2C_2_Master_Write
  3319                           
  3320                           ;color.c: 77:  I2C_2_Master_RepStart();
  3321   00118C  EC1E  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3322                           
  3323                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  3324   001190  0E53               	movlw	83
  3325   001192  EC12  F012         	call	_I2C_2_Master_Write
  3326   001196                     
  3327                           ;color.c: 79:  RGBC->R=I2C_2_Master_Read(1);
  3328   001196  0E01               	movlw	1
  3329   001198  ECD6  F010         	call	_I2C_2_Master_Read
  3330   00119C  6E14               	movwf	??_color_read^0,c
  3331   00119E  6A15               	clrf	(??_color_read+1)^0,c
  3332   0011A0  5013               	movf	color_read@RGBC^0,w,c
  3333   0011A2  6ED9               	movwf	fsr2l,c
  3334   0011A4  6ADA               	clrf	fsr2h,c
  3335   0011A6  C014  FFDE         	movff	??_color_read,postinc2
  3336   0011AA  C015  FFDD         	movff	??_color_read+1,postdec2
  3337   0011AE                     
  3338                           ;color.c: 80:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  3339   0011AE  5013               	movf	color_read@RGBC^0,w,c
  3340   0011B0  6ED9               	movwf	fsr2l,c
  3341   0011B2  6ADA               	clrf	fsr2h,c
  3342   0011B4  CFDE F014          	movff	postinc2,??_color_read
  3343   0011B8  CFDD F015          	movff	postdec2,??_color_read+1
  3344   0011BC  0E00               	movlw	0
  3345   0011BE  ECD6  F010         	call	_I2C_2_Master_Read
  3346   0011C2  6E16               	movwf	(??_color_read+2)^0,c
  3347   0011C4  5016               	movf	(??_color_read+2)^0,w,c
  3348   0011C6  6E18               	movwf	(??_color_read+4)^0,c
  3349   0011C8  6A17               	clrf	(??_color_read+3)^0,c
  3350   0011CA  5014               	movf	??_color_read^0,w,c
  3351   0011CC  1017               	iorwf	(??_color_read+3)^0,w,c
  3352   0011CE  6E19               	movwf	(??_color_read+5)^0,c
  3353   0011D0  5015               	movf	(??_color_read+1)^0,w,c
  3354   0011D2  1018               	iorwf	(??_color_read+4)^0,w,c
  3355   0011D4  6E1A               	movwf	(??_color_read+6)^0,c
  3356   0011D6  5013               	movf	color_read@RGBC^0,w,c
  3357   0011D8  6ED9               	movwf	fsr2l,c
  3358   0011DA  6ADA               	clrf	fsr2h,c
  3359   0011DC  C019  FFDE         	movff	??_color_read+5,postinc2
  3360   0011E0  C01A  FFDD         	movff	??_color_read+6,postdec2
  3361                           
  3362                           ;color.c: 81:  I2C_2_Master_Stop();
  3363   0011E4  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  3364                           
  3365                           ;color.c: 83:     I2C_2_Master_Start();
  3366   0011E8  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  3367                           
  3368                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x00);
  3369   0011EC  0E52               	movlw	82
  3370   0011EE  EC12  F012         	call	_I2C_2_Master_Write
  3371                           
  3372                           ;color.c: 85:  I2C_2_Master_Write(0xA0 | 0x18);
  3373   0011F2  0EB8               	movlw	184
  3374   0011F4  EC12  F012         	call	_I2C_2_Master_Write
  3375                           
  3376                           ;color.c: 86:  I2C_2_Master_RepStart();
  3377   0011F8  EC1E  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3378                           
  3379                           ;color.c: 87:  I2C_2_Master_Write(0x52 | 0x01);
  3380   0011FC  0E53               	movlw	83
  3381   0011FE  EC12  F012         	call	_I2C_2_Master_Write
  3382   001202                     
  3383                           ;color.c: 88:  RGBC->G=I2C_2_Master_Read(1);
  3384   001202  0E01               	movlw	1
  3385   001204  ECD6  F010         	call	_I2C_2_Master_Read
  3386   001208  6E14               	movwf	??_color_read^0,c
  3387   00120A  6A15               	clrf	(??_color_read+1)^0,c
  3388   00120C  5013               	movf	color_read@RGBC^0,w,c
  3389   00120E  6ED9               	movwf	fsr2l,c
  3390   001210  6ADA               	clrf	fsr2h,c
  3391   001212  0E02               	movlw	2
  3392   001214  26D9               	addwf	fsr2l,f,c
  3393   001216  C014  FFDE         	movff	??_color_read,postinc2
  3394   00121A  C015  FFDD         	movff	??_color_read+1,postdec2
  3395   00121E                     
  3396                           ;color.c: 89:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  3397   00121E  5013               	movf	color_read@RGBC^0,w,c
  3398   001220  6ED9               	movwf	fsr2l,c
  3399   001222  6ADA               	clrf	fsr2h,c
  3400   001224  0E02               	movlw	2
  3401   001226  26D9               	addwf	fsr2l,f,c
  3402   001228  CFDE F014          	movff	postinc2,??_color_read
  3403   00122C  CFDD F015          	movff	postdec2,??_color_read+1
  3404   001230  0E00               	movlw	0
  3405   001232  ECD6  F010         	call	_I2C_2_Master_Read
  3406   001236  6E16               	movwf	(??_color_read+2)^0,c
  3407   001238  5016               	movf	(??_color_read+2)^0,w,c
  3408   00123A  6E18               	movwf	(??_color_read+4)^0,c
  3409   00123C  6A17               	clrf	(??_color_read+3)^0,c
  3410   00123E  5014               	movf	??_color_read^0,w,c
  3411   001240  1017               	iorwf	(??_color_read+3)^0,w,c
  3412   001242  6E19               	movwf	(??_color_read+5)^0,c
  3413   001244  5015               	movf	(??_color_read+1)^0,w,c
  3414   001246  1018               	iorwf	(??_color_read+4)^0,w,c
  3415   001248  6E1A               	movwf	(??_color_read+6)^0,c
  3416   00124A  5013               	movf	color_read@RGBC^0,w,c
  3417   00124C  6ED9               	movwf	fsr2l,c
  3418   00124E  6ADA               	clrf	fsr2h,c
  3419   001250  0E02               	movlw	2
  3420   001252  26D9               	addwf	fsr2l,f,c
  3421   001254  C019  FFDE         	movff	??_color_read+5,postinc2
  3422   001258  C01A  FFDD         	movff	??_color_read+6,postdec2
  3423                           
  3424                           ;color.c: 90:  I2C_2_Master_Stop();
  3425   00125C  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  3426                           
  3427                           ;color.c: 92:     I2C_2_Master_Start();
  3428   001260  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  3429                           
  3430                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  3431   001264  0E52               	movlw	82
  3432   001266  EC12  F012         	call	_I2C_2_Master_Write
  3433                           
  3434                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  3435   00126A  0EBA               	movlw	186
  3436   00126C  EC12  F012         	call	_I2C_2_Master_Write
  3437                           
  3438                           ;color.c: 95:  I2C_2_Master_RepStart();
  3439   001270  EC1E  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3440                           
  3441                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  3442   001274  0E53               	movlw	83
  3443   001276  EC12  F012         	call	_I2C_2_Master_Write
  3444   00127A                     
  3445                           ;color.c: 97:  RGBC->B=I2C_2_Master_Read(1);
  3446   00127A  0E01               	movlw	1
  3447   00127C  ECD6  F010         	call	_I2C_2_Master_Read
  3448   001280  6E14               	movwf	??_color_read^0,c
  3449   001282  6A15               	clrf	(??_color_read+1)^0,c
  3450   001284  5013               	movf	color_read@RGBC^0,w,c
  3451   001286  6ED9               	movwf	fsr2l,c
  3452   001288  6ADA               	clrf	fsr2h,c
  3453   00128A  0E04               	movlw	4
  3454   00128C  26D9               	addwf	fsr2l,f,c
  3455   00128E  C014  FFDE         	movff	??_color_read,postinc2
  3456   001292  C015  FFDD         	movff	??_color_read+1,postdec2
  3457   001296                     
  3458                           ;color.c: 98:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  3459   001296  5013               	movf	color_read@RGBC^0,w,c
  3460   001298  6ED9               	movwf	fsr2l,c
  3461   00129A  6ADA               	clrf	fsr2h,c
  3462   00129C  0E04               	movlw	4
  3463   00129E  26D9               	addwf	fsr2l,f,c
  3464   0012A0  CFDE F014          	movff	postinc2,??_color_read
  3465   0012A4  CFDD F015          	movff	postdec2,??_color_read+1
  3466   0012A8  0E00               	movlw	0
  3467   0012AA  ECD6  F010         	call	_I2C_2_Master_Read
  3468   0012AE  6E16               	movwf	(??_color_read+2)^0,c
  3469   0012B0  5016               	movf	(??_color_read+2)^0,w,c
  3470   0012B2  6E18               	movwf	(??_color_read+4)^0,c
  3471   0012B4  6A17               	clrf	(??_color_read+3)^0,c
  3472   0012B6  5014               	movf	??_color_read^0,w,c
  3473   0012B8  1017               	iorwf	(??_color_read+3)^0,w,c
  3474   0012BA  6E19               	movwf	(??_color_read+5)^0,c
  3475   0012BC  5015               	movf	(??_color_read+1)^0,w,c
  3476   0012BE  1018               	iorwf	(??_color_read+4)^0,w,c
  3477   0012C0  6E1A               	movwf	(??_color_read+6)^0,c
  3478   0012C2  5013               	movf	color_read@RGBC^0,w,c
  3479   0012C4  6ED9               	movwf	fsr2l,c
  3480   0012C6  6ADA               	clrf	fsr2h,c
  3481   0012C8  0E04               	movlw	4
  3482   0012CA  26D9               	addwf	fsr2l,f,c
  3483   0012CC  C019  FFDE         	movff	??_color_read+5,postinc2
  3484   0012D0  C01A  FFDD         	movff	??_color_read+6,postdec2
  3485                           
  3486                           ;color.c: 99:  I2C_2_Master_Stop();
  3487   0012D4  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  3488                           
  3489                           ;color.c: 101:     I2C_2_Master_Start();
  3490   0012D8  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  3491                           
  3492                           ;color.c: 102:  I2C_2_Master_Write(0x52 | 0x00);
  3493   0012DC  0E52               	movlw	82
  3494   0012DE  EC12  F012         	call	_I2C_2_Master_Write
  3495                           
  3496                           ;color.c: 103:  I2C_2_Master_Write(0xA0 | 0x14);
  3497   0012E2  0EB4               	movlw	180
  3498   0012E4  EC12  F012         	call	_I2C_2_Master_Write
  3499                           
  3500                           ;color.c: 104:  I2C_2_Master_RepStart();
  3501   0012E8  EC1E  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3502                           
  3503                           ;color.c: 105:  I2C_2_Master_Write(0x52 | 0x01);
  3504   0012EC  0E53               	movlw	83
  3505   0012EE  EC12  F012         	call	_I2C_2_Master_Write
  3506   0012F2                     
  3507                           ;color.c: 106:  RGBC->C=I2C_2_Master_Read(1);
  3508   0012F2  0E01               	movlw	1
  3509   0012F4  ECD6  F010         	call	_I2C_2_Master_Read
  3510   0012F8  6E14               	movwf	??_color_read^0,c
  3511   0012FA  6A15               	clrf	(??_color_read+1)^0,c
  3512   0012FC  5013               	movf	color_read@RGBC^0,w,c
  3513   0012FE  6ED9               	movwf	fsr2l,c
  3514   001300  6ADA               	clrf	fsr2h,c
  3515   001302  0E06               	movlw	6
  3516   001304  26D9               	addwf	fsr2l,f,c
  3517   001306  C014  FFDE         	movff	??_color_read,postinc2
  3518   00130A  C015  FFDD         	movff	??_color_read+1,postdec2
  3519   00130E                     
  3520                           ;color.c: 107:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  3521   00130E  5013               	movf	color_read@RGBC^0,w,c
  3522   001310  6ED9               	movwf	fsr2l,c
  3523   001312  6ADA               	clrf	fsr2h,c
  3524   001314  0E06               	movlw	6
  3525   001316  26D9               	addwf	fsr2l,f,c
  3526   001318  CFDE F014          	movff	postinc2,??_color_read
  3527   00131C  CFDD F015          	movff	postdec2,??_color_read+1
  3528   001320  0E00               	movlw	0
  3529   001322  ECD6  F010         	call	_I2C_2_Master_Read
  3530   001326  6E16               	movwf	(??_color_read+2)^0,c
  3531   001328  5016               	movf	(??_color_read+2)^0,w,c
  3532   00132A  6E18               	movwf	(??_color_read+4)^0,c
  3533   00132C  6A17               	clrf	(??_color_read+3)^0,c
  3534   00132E  5014               	movf	??_color_read^0,w,c
  3535   001330  1017               	iorwf	(??_color_read+3)^0,w,c
  3536   001332  6E19               	movwf	(??_color_read+5)^0,c
  3537   001334  5015               	movf	(??_color_read+1)^0,w,c
  3538   001336  1018               	iorwf	(??_color_read+4)^0,w,c
  3539   001338  6E1A               	movwf	(??_color_read+6)^0,c
  3540   00133A  5013               	movf	color_read@RGBC^0,w,c
  3541   00133C  6ED9               	movwf	fsr2l,c
  3542   00133E  6ADA               	clrf	fsr2h,c
  3543   001340  0E06               	movlw	6
  3544   001342  26D9               	addwf	fsr2l,f,c
  3545   001344  C019  FFDE         	movff	??_color_read+5,postinc2
  3546   001348  C01A  FFDD         	movff	??_color_read+6,postdec2
  3547                           
  3548                           ;color.c: 108:  I2C_2_Master_Stop();
  3549   00134C  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  3550   001350  0012               	return		;funcret
  3551   001352                     __end_of_color_read:
  3552                           	callstack 0
  3553                           
  3554 ;; *************** function _I2C_2_Master_RepStart *****************
  3555 ;; Defined at:
  3556 ;;		line 33 in file "i2c.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3574 ;;Total ram usage:        0 bytes
  3575 ;; Hardware stack levels used: 1
  3576 ;; Hardware stack levels required when called: 6
  3577 ;; This function calls:
  3578 ;;		_I2C_2_Master_Idle
  3579 ;; This function is called by:
  3580 ;;		_color_read
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text14
  3585   00243C                     __ptext14:
  3586                           	callstack 0
  3587   00243C                     _I2C_2_Master_RepStart:
  3588                           	callstack 23
  3589   00243C                     
  3590                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3591   00243C  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  3592   002440                     
  3593                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3594   002440  010E               	movlb	14	; () banked
  3595   002442  83DA               	bsf	218,1,b	;volatile
  3596   002444                     
  3597                           ; BSR set to: 14
  3598   002444  0012               	return		;funcret
  3599   002446                     __end_of_I2C_2_Master_RepStart:
  3600                           	callstack 0
  3601                           
  3602 ;; *************** function _I2C_2_Master_Read *****************
  3603 ;; Defined at:
  3604 ;;		line 51 in file "i2c.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  ack             1    wreg     unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  ack             1   16[COMRAM] unsigned char 
  3609 ;;  tmp             1   17[COMRAM] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      unsigned char 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3622 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;Total ram usage:        3 bytes
  3624 ;; Hardware stack levels used: 1
  3625 ;; Hardware stack levels required when called: 6
  3626 ;; This function calls:
  3627 ;;		_I2C_2_Master_Idle
  3628 ;; This function is called by:
  3629 ;;		_color_read
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text15
  3634   0021AC                     __ptext15:
  3635                           	callstack 0
  3636   0021AC                     _I2C_2_Master_Read:
  3637                           	callstack 23
  3638                           
  3639                           ; BSR set to: 14
  3640                           ;incstack = 0
  3641                           ;I2C_2_Master_Read@ack stored from wreg
  3642   0021AC  6E11               	movwf	I2C_2_Master_Read@ack^0,c
  3643   0021AE                     
  3644                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3645   0021AE  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  3646   0021B2                     
  3647                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3648   0021B2  010E               	movlb	14	; () banked
  3649   0021B4  87DA               	bsf	218,3,b	;volatile
  3650                           
  3651                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3652   0021B6  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  3653   0021BA                     
  3654                           ;i2c.c: 57:   tmp = SSP2BUF;
  3655   0021BA  CED5 F012          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3656                           
  3657                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3658   0021BE  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  3659   0021C2                     
  3660                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3661   0021C2  5011               	movf	I2C_2_Master_Read@ack^0,w,c
  3662   0021C4  B4D8               	btfsc	status,2,c
  3663   0021C6  EFE7  F010         	goto	u861
  3664   0021CA  EFEB  F010         	goto	u860
  3665   0021CE                     u861:
  3666   0021CE  6A10               	clrf	??_I2C_2_Master_Read^0,c
  3667   0021D0  2A10               	incf	??_I2C_2_Master_Read^0,f,c
  3668   0021D2  EFEC  F010         	goto	u878
  3669   0021D6                     u860:
  3670   0021D6  6A10               	clrf	??_I2C_2_Master_Read^0,c
  3671   0021D8                     u878:
  3672   0021D8  3A10               	swapf	??_I2C_2_Master_Read^0,f,c
  3673   0021DA  4610               	rlncf	??_I2C_2_Master_Read^0,f,c
  3674   0021DC  010E               	movlb	14	; () banked
  3675   0021DE  51DA               	movf	218,w,b	;volatile
  3676   0021E0  1810               	xorwf	??_I2C_2_Master_Read^0,w,c
  3677   0021E2  0BDF               	andlw	-33
  3678   0021E4  1810               	xorwf	??_I2C_2_Master_Read^0,w,c
  3679   0021E6  6FDA               	movwf	218,b	;volatile
  3680   0021E8                     
  3681                           ; BSR set to: 14
  3682                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3683   0021E8  89DA               	bsf	218,4,b	;volatile
  3684   0021EA                     
  3685                           ; BSR set to: 14
  3686                           ;i2c.c: 61:   return tmp;
  3687   0021EA  5012               	movf	I2C_2_Master_Read@tmp^0,w,c
  3688   0021EC                     
  3689                           ; BSR set to: 14
  3690   0021EC  0012               	return		;funcret
  3691   0021EE                     __end_of_I2C_2_Master_Read:
  3692                           	callstack 0
  3693                           
  3694 ;; *************** function _color_normalise *****************
  3695 ;; Defined at:
  3696 ;;		line 112 in file "color.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  RGBC            8   40[COMRAM] struct RGBC_val
  3699 ;;  RGBC_n          1   48[COMRAM] PTR struct RGBC_val
  3700 ;;		 -> main@RGBC_n(8), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3712 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;Total ram usage:       11 bytes
  3717 ;; Hardware stack levels used: 1
  3718 ;; Hardware stack levels required when called: 6
  3719 ;; This function calls:
  3720 ;;		___aldiv
  3721 ;;		___lmul
  3722 ;; This function is called by:
  3723 ;;		_main
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text16
  3728   0019D6                     __ptext16:
  3729                           	callstack 0
  3730   0019D6                     _color_normalise:
  3731                           	callstack 24
  3732   0019D6                     
  3733                           ;color.c: 130:     RGBC_n->C = RGBC.C;
  3734   0019D6  5031               	movf	color_normalise@RGBC_n^0,w,c
  3735   0019D8  6ED9               	movwf	fsr2l,c
  3736   0019DA  6ADA               	clrf	fsr2h,c
  3737   0019DC  0E06               	movlw	6
  3738   0019DE  26D9               	addwf	fsr2l,f,c
  3739   0019E0  C02F  FFDE         	movff	color_normalise@RGBC+6,postinc2
  3740   0019E4  C030  FFDD         	movff	color_normalise@RGBC+7,postdec2
  3741   0019E8                     
  3742                           ;color.c: 131:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  3743   0019E8  C029  F00F         	movff	color_normalise@RGBC,___lmul@multiplier
  3744   0019EC  C02A  F010         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  3745   0019F0  6A11               	clrf	(___lmul@multiplier+2)^0,c
  3746   0019F2  6A12               	clrf	(___lmul@multiplier+3)^0,c
  3747   0019F4  0EE8               	movlw	232
  3748   0019F6  6E13               	movwf	___lmul@multiplicand^0,c
  3749   0019F8  0E03               	movlw	3
  3750   0019FA  6E14               	movwf	(___lmul@multiplicand+1)^0,c
  3751   0019FC  0E00               	movlw	0
  3752   0019FE  6E15               	movwf	(___lmul@multiplicand+2)^0,c
  3753   001A00  0E00               	movlw	0
  3754   001A02  6E16               	movwf	(___lmul@multiplicand+3)^0,c
  3755   001A04  EC72  F010         	call	___lmul	;wreg free
  3756   001A08  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  3757   001A0C  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  3758   001A10  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  3759   001A14  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  3760   001A18  502D               	movf	(color_normalise@RGBC+4)^0,w,c
  3761   001A1A  242B               	addwf	(color_normalise@RGBC+2)^0,w,c
  3762   001A1C  6E32               	movwf	??_color_normalise^0,c
  3763   001A1E  502E               	movf	(color_normalise@RGBC+5)^0,w,c
  3764   001A20  202C               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3765   001A22  6E33               	movwf	(??_color_normalise+1)^0,c
  3766   001A24  5029               	movf	color_normalise@RGBC^0,w,c
  3767   001A26  2632               	addwf	??_color_normalise^0,f,c
  3768   001A28  502A               	movf	(color_normalise@RGBC+1)^0,w,c
  3769   001A2A  2233               	addwfc	(??_color_normalise+1)^0,f,c
  3770   001A2C  C032  F01F         	movff	??_color_normalise,___aldiv@divisor
  3771   001A30  C033  F020         	movff	??_color_normalise+1,___aldiv@divisor+1
  3772   001A34  6A21               	clrf	(___aldiv@divisor+2)^0,c
  3773   001A36  6A22               	clrf	(___aldiv@divisor+3)^0,c
  3774   001A38  EC8C  F00D         	call	___aldiv	;wreg free
  3775   001A3C  5031               	movf	color_normalise@RGBC_n^0,w,c
  3776   001A3E  6ED9               	movwf	fsr2l,c
  3777   001A40  6ADA               	clrf	fsr2h,c
  3778   001A42  C01B  FFDE         	movff	?___aldiv,postinc2
  3779   001A46  C01C  FFDD         	movff	?___aldiv+1,postdec2
  3780   001A4A                     
  3781                           ;color.c: 132:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  3782   001A4A  C02B  F00F         	movff	color_normalise@RGBC+2,___lmul@multiplier
  3783   001A4E  C02C  F010         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  3784   001A52  6A11               	clrf	(___lmul@multiplier+2)^0,c
  3785   001A54  6A12               	clrf	(___lmul@multiplier+3)^0,c
  3786   001A56  0EE8               	movlw	232
  3787   001A58  6E13               	movwf	___lmul@multiplicand^0,c
  3788   001A5A  0E03               	movlw	3
  3789   001A5C  6E14               	movwf	(___lmul@multiplicand+1)^0,c
  3790   001A5E  0E00               	movlw	0
  3791   001A60  6E15               	movwf	(___lmul@multiplicand+2)^0,c
  3792   001A62  0E00               	movlw	0
  3793   001A64  6E16               	movwf	(___lmul@multiplicand+3)^0,c
  3794   001A66  EC72  F010         	call	___lmul	;wreg free
  3795   001A6A  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  3796   001A6E  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  3797   001A72  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  3798   001A76  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  3799   001A7A  502D               	movf	(color_normalise@RGBC+4)^0,w,c
  3800   001A7C  242B               	addwf	(color_normalise@RGBC+2)^0,w,c
  3801   001A7E  6E32               	movwf	??_color_normalise^0,c
  3802   001A80  502E               	movf	(color_normalise@RGBC+5)^0,w,c
  3803   001A82  202C               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3804   001A84  6E33               	movwf	(??_color_normalise+1)^0,c
  3805   001A86  5029               	movf	color_normalise@RGBC^0,w,c
  3806   001A88  2632               	addwf	??_color_normalise^0,f,c
  3807   001A8A  502A               	movf	(color_normalise@RGBC+1)^0,w,c
  3808   001A8C  2233               	addwfc	(??_color_normalise+1)^0,f,c
  3809   001A8E  C032  F01F         	movff	??_color_normalise,___aldiv@divisor
  3810   001A92  C033  F020         	movff	??_color_normalise+1,___aldiv@divisor+1
  3811   001A96  6A21               	clrf	(___aldiv@divisor+2)^0,c
  3812   001A98  6A22               	clrf	(___aldiv@divisor+3)^0,c
  3813   001A9A  EC8C  F00D         	call	___aldiv	;wreg free
  3814   001A9E  5031               	movf	color_normalise@RGBC_n^0,w,c
  3815   001AA0  6ED9               	movwf	fsr2l,c
  3816   001AA2  6ADA               	clrf	fsr2h,c
  3817   001AA4  0E02               	movlw	2
  3818   001AA6  26D9               	addwf	fsr2l,f,c
  3819   001AA8  C01B  FFDE         	movff	?___aldiv,postinc2
  3820   001AAC  C01C  FFDD         	movff	?___aldiv+1,postdec2
  3821   001AB0                     
  3822                           ;color.c: 133:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  3823   001AB0  C02D  F00F         	movff	color_normalise@RGBC+4,___lmul@multiplier
  3824   001AB4  C02E  F010         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  3825   001AB8  6A11               	clrf	(___lmul@multiplier+2)^0,c
  3826   001ABA  6A12               	clrf	(___lmul@multiplier+3)^0,c
  3827   001ABC  0EE8               	movlw	232
  3828   001ABE  6E13               	movwf	___lmul@multiplicand^0,c
  3829   001AC0  0E03               	movlw	3
  3830   001AC2  6E14               	movwf	(___lmul@multiplicand+1)^0,c
  3831   001AC4  0E00               	movlw	0
  3832   001AC6  6E15               	movwf	(___lmul@multiplicand+2)^0,c
  3833   001AC8  0E00               	movlw	0
  3834   001ACA  6E16               	movwf	(___lmul@multiplicand+3)^0,c
  3835   001ACC  EC72  F010         	call	___lmul	;wreg free
  3836   001AD0  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  3837   001AD4  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  3838   001AD8  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  3839   001ADC  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  3840   001AE0  502D               	movf	(color_normalise@RGBC+4)^0,w,c
  3841   001AE2  242B               	addwf	(color_normalise@RGBC+2)^0,w,c
  3842   001AE4  6E32               	movwf	??_color_normalise^0,c
  3843   001AE6  502E               	movf	(color_normalise@RGBC+5)^0,w,c
  3844   001AE8  202C               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3845   001AEA  6E33               	movwf	(??_color_normalise+1)^0,c
  3846   001AEC  5029               	movf	color_normalise@RGBC^0,w,c
  3847   001AEE  2632               	addwf	??_color_normalise^0,f,c
  3848   001AF0  502A               	movf	(color_normalise@RGBC+1)^0,w,c
  3849   001AF2  2233               	addwfc	(??_color_normalise+1)^0,f,c
  3850   001AF4  C032  F01F         	movff	??_color_normalise,___aldiv@divisor
  3851   001AF8  C033  F020         	movff	??_color_normalise+1,___aldiv@divisor+1
  3852   001AFC  6A21               	clrf	(___aldiv@divisor+2)^0,c
  3853   001AFE  6A22               	clrf	(___aldiv@divisor+3)^0,c
  3854   001B00  EC8C  F00D         	call	___aldiv	;wreg free
  3855   001B04  5031               	movf	color_normalise@RGBC_n^0,w,c
  3856   001B06  6ED9               	movwf	fsr2l,c
  3857   001B08  6ADA               	clrf	fsr2h,c
  3858   001B0A  0E04               	movlw	4
  3859   001B0C  26D9               	addwf	fsr2l,f,c
  3860   001B0E  C01B  FFDE         	movff	?___aldiv,postinc2
  3861   001B12  C01C  FFDD         	movff	?___aldiv+1,postdec2
  3862   001B16  0012               	return		;funcret
  3863   001B18                     __end_of_color_normalise:
  3864                           	callstack 0
  3865                           
  3866 ;; *************** function ___lmul *****************
  3867 ;; Defined at:
  3868 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  multiplier      4   14[COMRAM] unsigned long 
  3871 ;;  multiplicand    4   18[COMRAM] unsigned long 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  product         4   22[COMRAM] unsigned long 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  4   14[COMRAM] unsigned long 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3883 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;Total ram usage:       12 bytes
  3888 ;; Hardware stack levels used: 1
  3889 ;; Hardware stack levels required when called: 5
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_color_normalise
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text17
  3898   0020E4                     __ptext17:
  3899                           	callstack 0
  3900   0020E4                     ___lmul:
  3901                           	callstack 24
  3902   0020E4  0E00               	movlw	0
  3903   0020E6  6E17               	movwf	___lmul@product^0,c
  3904   0020E8  0E00               	movlw	0
  3905   0020EA  6E18               	movwf	(___lmul@product+1)^0,c
  3906   0020EC  0E00               	movlw	0
  3907   0020EE  6E19               	movwf	(___lmul@product+2)^0,c
  3908   0020F0  0E00               	movlw	0
  3909   0020F2  6E1A               	movwf	(___lmul@product+3)^0,c
  3910   0020F4                     l2293:
  3911   0020F4  A00F               	btfss	___lmul@multiplier^0,0,c
  3912   0020F6  EF7F  F010         	goto	u1031
  3913   0020FA  EF81  F010         	goto	u1030
  3914   0020FE                     u1031:
  3915   0020FE  EF89  F010         	goto	l2297
  3916   002102                     u1030:
  3917   002102  5013               	movf	___lmul@multiplicand^0,w,c
  3918   002104  2617               	addwf	___lmul@product^0,f,c
  3919   002106  5014               	movf	(___lmul@multiplicand+1)^0,w,c
  3920   002108  2218               	addwfc	(___lmul@product+1)^0,f,c
  3921   00210A  5015               	movf	(___lmul@multiplicand+2)^0,w,c
  3922   00210C  2219               	addwfc	(___lmul@product+2)^0,f,c
  3923   00210E  5016               	movf	(___lmul@multiplicand+3)^0,w,c
  3924   002110  221A               	addwfc	(___lmul@product+3)^0,f,c
  3925   002112                     l2297:
  3926   002112  90D8               	bcf	status,0,c
  3927   002114  3613               	rlcf	___lmul@multiplicand^0,f,c
  3928   002116  3614               	rlcf	(___lmul@multiplicand+1)^0,f,c
  3929   002118  3615               	rlcf	(___lmul@multiplicand+2)^0,f,c
  3930   00211A  3616               	rlcf	(___lmul@multiplicand+3)^0,f,c
  3931   00211C  90D8               	bcf	status,0,c
  3932   00211E  3212               	rrcf	(___lmul@multiplier+3)^0,f,c
  3933   002120  3211               	rrcf	(___lmul@multiplier+2)^0,f,c
  3934   002122  3210               	rrcf	(___lmul@multiplier+1)^0,f,c
  3935   002124  320F               	rrcf	___lmul@multiplier^0,f,c
  3936   002126  500F               	movf	___lmul@multiplier^0,w,c
  3937   002128  1010               	iorwf	(___lmul@multiplier+1)^0,w,c
  3938   00212A  1011               	iorwf	(___lmul@multiplier+2)^0,w,c
  3939   00212C  1012               	iorwf	(___lmul@multiplier+3)^0,w,c
  3940   00212E  A4D8               	btfss	status,2,c
  3941   002130  EF9C  F010         	goto	u1041
  3942   002134  EF9E  F010         	goto	u1040
  3943   002138                     u1041:
  3944   002138  EF7A  F010         	goto	l2293
  3945   00213C                     u1040:
  3946   00213C  C017  F00F         	movff	___lmul@product,?___lmul
  3947   002140  C018  F010         	movff	___lmul@product+1,?___lmul+1
  3948   002144  C019  F011         	movff	___lmul@product+2,?___lmul+2
  3949   002148  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  3950   00214C  0012               	return		;funcret
  3951   00214E                     __end_of___lmul:
  3952                           	callstack 0
  3953                           
  3954 ;; *************** function ___aldiv *****************
  3955 ;; Defined at:
  3956 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  dividend        4   26[COMRAM] long 
  3959 ;;  divisor         4   30[COMRAM] long 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  quotient        4   36[COMRAM] long 
  3962 ;;  sign            1   35[COMRAM] unsigned char 
  3963 ;;  counter         1   34[COMRAM] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  4   26[COMRAM] long 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3973 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3974 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3976 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3977 ;;Total ram usage:       14 bytes
  3978 ;; Hardware stack levels used: 1
  3979 ;; Hardware stack levels required when called: 5
  3980 ;; This function calls:
  3981 ;;		Nothing
  3982 ;; This function is called by:
  3983 ;;		_color_normalise
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text18
  3988   001B18                     __ptext18:
  3989                           	callstack 0
  3990   001B18                     ___aldiv:
  3991                           	callstack 24
  3992   001B18  0E00               	movlw	0
  3993   001B1A  6E24               	movwf	___aldiv@sign^0,c
  3994   001B1C  BE22               	btfsc	(___aldiv@divisor+3)^0,7,c
  3995   001B1E  EF95  F00D         	goto	u1050
  3996   001B22  EF93  F00D         	goto	u1051
  3997   001B26                     u1051:
  3998   001B26  EF9F  F00D         	goto	l2309
  3999   001B2A                     u1050:
  4000   001B2A  1E22               	comf	(___aldiv@divisor+3)^0,f,c
  4001   001B2C  1E21               	comf	(___aldiv@divisor+2)^0,f,c
  4002   001B2E  1E20               	comf	(___aldiv@divisor+1)^0,f,c
  4003   001B30  6C1F               	negf	___aldiv@divisor^0,c
  4004   001B32  0E00               	movlw	0
  4005   001B34  2220               	addwfc	(___aldiv@divisor+1)^0,f,c
  4006   001B36  2221               	addwfc	(___aldiv@divisor+2)^0,f,c
  4007   001B38  2222               	addwfc	(___aldiv@divisor+3)^0,f,c
  4008   001B3A  0E01               	movlw	1
  4009   001B3C  6E24               	movwf	___aldiv@sign^0,c
  4010   001B3E                     l2309:
  4011   001B3E  BE1E               	btfsc	(___aldiv@dividend+3)^0,7,c
  4012   001B40  EFA6  F00D         	goto	u1060
  4013   001B44  EFA4  F00D         	goto	u1061
  4014   001B48                     u1061:
  4015   001B48  EFB0  F00D         	goto	l2315
  4016   001B4C                     u1060:
  4017   001B4C  1E1E               	comf	(___aldiv@dividend+3)^0,f,c
  4018   001B4E  1E1D               	comf	(___aldiv@dividend+2)^0,f,c
  4019   001B50  1E1C               	comf	(___aldiv@dividend+1)^0,f,c
  4020   001B52  6C1B               	negf	___aldiv@dividend^0,c
  4021   001B54  0E00               	movlw	0
  4022   001B56  221C               	addwfc	(___aldiv@dividend+1)^0,f,c
  4023   001B58  221D               	addwfc	(___aldiv@dividend+2)^0,f,c
  4024   001B5A  221E               	addwfc	(___aldiv@dividend+3)^0,f,c
  4025   001B5C  0E01               	movlw	1
  4026   001B5E  1A24               	xorwf	___aldiv@sign^0,f,c
  4027   001B60                     l2315:
  4028   001B60  0E00               	movlw	0
  4029   001B62  6E25               	movwf	___aldiv@quotient^0,c
  4030   001B64  0E00               	movlw	0
  4031   001B66  6E26               	movwf	(___aldiv@quotient+1)^0,c
  4032   001B68  0E00               	movlw	0
  4033   001B6A  6E27               	movwf	(___aldiv@quotient+2)^0,c
  4034   001B6C  0E00               	movlw	0
  4035   001B6E  6E28               	movwf	(___aldiv@quotient+3)^0,c
  4036   001B70  501F               	movf	___aldiv@divisor^0,w,c
  4037   001B72  1020               	iorwf	(___aldiv@divisor+1)^0,w,c
  4038   001B74  1021               	iorwf	(___aldiv@divisor+2)^0,w,c
  4039   001B76  1022               	iorwf	(___aldiv@divisor+3)^0,w,c
  4040   001B78  B4D8               	btfsc	status,2,c
  4041   001B7A  EFC1  F00D         	goto	u1071
  4042   001B7E  EFC3  F00D         	goto	u1070
  4043   001B82                     u1071:
  4044   001B82  EFF9  F00D         	goto	l2337
  4045   001B86                     u1070:
  4046   001B86  0E01               	movlw	1
  4047   001B88  6E23               	movwf	___aldiv@counter^0,c
  4048   001B8A  EFCD  F00D         	goto	l2323
  4049   001B8E                     l2321:
  4050   001B8E  90D8               	bcf	status,0,c
  4051   001B90  361F               	rlcf	___aldiv@divisor^0,f,c
  4052   001B92  3620               	rlcf	(___aldiv@divisor+1)^0,f,c
  4053   001B94  3621               	rlcf	(___aldiv@divisor+2)^0,f,c
  4054   001B96  3622               	rlcf	(___aldiv@divisor+3)^0,f,c
  4055   001B98  2A23               	incf	___aldiv@counter^0,f,c
  4056   001B9A                     l2323:
  4057   001B9A  AE22               	btfss	(___aldiv@divisor+3)^0,7,c
  4058   001B9C  EFD2  F00D         	goto	u1081
  4059   001BA0  EFD4  F00D         	goto	u1080
  4060   001BA4                     u1081:
  4061   001BA4  EFC7  F00D         	goto	l2321
  4062   001BA8                     u1080:
  4063   001BA8                     l2325:
  4064   001BA8  90D8               	bcf	status,0,c
  4065   001BAA  3625               	rlcf	___aldiv@quotient^0,f,c
  4066   001BAC  3626               	rlcf	(___aldiv@quotient+1)^0,f,c
  4067   001BAE  3627               	rlcf	(___aldiv@quotient+2)^0,f,c
  4068   001BB0  3628               	rlcf	(___aldiv@quotient+3)^0,f,c
  4069   001BB2  501F               	movf	___aldiv@divisor^0,w,c
  4070   001BB4  5C1B               	subwf	___aldiv@dividend^0,w,c
  4071   001BB6  5020               	movf	(___aldiv@divisor+1)^0,w,c
  4072   001BB8  581C               	subwfb	(___aldiv@dividend+1)^0,w,c
  4073   001BBA  5021               	movf	(___aldiv@divisor+2)^0,w,c
  4074   001BBC  581D               	subwfb	(___aldiv@dividend+2)^0,w,c
  4075   001BBE  5022               	movf	(___aldiv@divisor+3)^0,w,c
  4076   001BC0  581E               	subwfb	(___aldiv@dividend+3)^0,w,c
  4077   001BC2  A0D8               	btfss	status,0,c
  4078   001BC4  EFE6  F00D         	goto	u1091
  4079   001BC8  EFE8  F00D         	goto	u1090
  4080   001BCC                     u1091:
  4081   001BCC  EFF1  F00D         	goto	l2333
  4082   001BD0                     u1090:
  4083   001BD0  501F               	movf	___aldiv@divisor^0,w,c
  4084   001BD2  5E1B               	subwf	___aldiv@dividend^0,f,c
  4085   001BD4  5020               	movf	(___aldiv@divisor+1)^0,w,c
  4086   001BD6  5A1C               	subwfb	(___aldiv@dividend+1)^0,f,c
  4087   001BD8  5021               	movf	(___aldiv@divisor+2)^0,w,c
  4088   001BDA  5A1D               	subwfb	(___aldiv@dividend+2)^0,f,c
  4089   001BDC  5022               	movf	(___aldiv@divisor+3)^0,w,c
  4090   001BDE  5A1E               	subwfb	(___aldiv@dividend+3)^0,f,c
  4091   001BE0  8025               	bsf	___aldiv@quotient^0,0,c
  4092   001BE2                     l2333:
  4093   001BE2  90D8               	bcf	status,0,c
  4094   001BE4  3222               	rrcf	(___aldiv@divisor+3)^0,f,c
  4095   001BE6  3221               	rrcf	(___aldiv@divisor+2)^0,f,c
  4096   001BE8  3220               	rrcf	(___aldiv@divisor+1)^0,f,c
  4097   001BEA  321F               	rrcf	___aldiv@divisor^0,f,c
  4098   001BEC  2E23               	decfsz	___aldiv@counter^0,f,c
  4099   001BEE  EFD4  F00D         	goto	l2325
  4100   001BF2                     l2337:
  4101   001BF2  5024               	movf	___aldiv@sign^0,w,c
  4102   001BF4  B4D8               	btfsc	status,2,c
  4103   001BF6  EFFF  F00D         	goto	u1101
  4104   001BFA  EF01  F00E         	goto	u1100
  4105   001BFE                     u1101:
  4106   001BFE  EF09  F00E         	goto	l2341
  4107   001C02                     u1100:
  4108   001C02  1E28               	comf	(___aldiv@quotient+3)^0,f,c
  4109   001C04  1E27               	comf	(___aldiv@quotient+2)^0,f,c
  4110   001C06  1E26               	comf	(___aldiv@quotient+1)^0,f,c
  4111   001C08  6C25               	negf	___aldiv@quotient^0,c
  4112   001C0A  0E00               	movlw	0
  4113   001C0C  2226               	addwfc	(___aldiv@quotient+1)^0,f,c
  4114   001C0E  2227               	addwfc	(___aldiv@quotient+2)^0,f,c
  4115   001C10  2228               	addwfc	(___aldiv@quotient+3)^0,f,c
  4116   001C12                     l2341:
  4117   001C12  C025  F01B         	movff	___aldiv@quotient,?___aldiv
  4118   001C16  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
  4119   001C1A  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
  4120   001C1E  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
  4121   001C22  0012               	return		;funcret
  4122   001C24                     __end_of___aldiv:
  4123                           	callstack 0
  4124                           
  4125 ;; *************** function _color_detect *****************
  4126 ;; Defined at:
  4127 ;;		line 136 in file "color.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  RGBC_n          8   14[COMRAM] struct RGBC_val
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  color           1   22[COMRAM] unsigned char 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      unsigned char 
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4141 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4144 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;Total ram usage:        9 bytes
  4146 ;; Hardware stack levels used: 1
  4147 ;; Hardware stack levels required when called: 5
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text19
  4156   00214E                     __ptext19:
  4157                           	callstack 0
  4158   00214E                     _color_detect:
  4159                           	callstack 25
  4160   00214E                     
  4161                           ;color.c: 136: unsigned char color_detect(RGBC_val RGBC_n);color.c: 137: {;color.c: 138:
      +                               unsigned char color=0;
  4162   00214E  0E00               	movlw	0
  4163   002150  6E17               	movwf	color_detect@color^0,c
  4164   002152                     
  4165                           ;color.c: 139:     if (RGBC_n.R > 560) {
  4166   002152  0E31               	movlw	49
  4167   002154  5C0F               	subwf	color_detect@RGBC_n^0,w,c
  4168   002156  0E02               	movlw	2
  4169   002158  5810               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  4170   00215A  A0D8               	btfss	status,0,c
  4171   00215C  EFB2  F010         	goto	u1141
  4172   002160  EFB4  F010         	goto	u1140
  4173   002164                     u1141:
  4174   002164  EFB8  F010         	goto	l2459
  4175   002168                     u1140:
  4176   002168                     
  4177                           ;color.c: 140:         color = 1;
  4178   002168  0E01               	movlw	1
  4179   00216A  6E17               	movwf	color_detect@color^0,c
  4180                           
  4181                           ;color.c: 141:     }
  4182   00216C  EFD4  F010         	goto	l118
  4183   002170                     l2459:
  4184   002170  0E23               	movlw	35
  4185   002172  5C11               	subwf	(color_detect@RGBC_n+2)^0,w,c
  4186   002174  0E01               	movlw	1
  4187   002176  5812               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  4188   002178  A0D8               	btfss	status,0,c
  4189   00217A  EFC1  F010         	goto	u1151
  4190   00217E  EFC3  F010         	goto	u1150
  4191   002182                     u1151:
  4192   002182  EFC7  F010         	goto	l2463
  4193   002186                     u1150:
  4194   002186                     
  4195                           ;color.c: 143:         color = 2;
  4196   002186  0E02               	movlw	2
  4197   002188  6E17               	movwf	color_detect@color^0,c
  4198                           
  4199                           ;color.c: 144:     }
  4200   00218A  EFD4  F010         	goto	l118
  4201   00218E                     l2463:
  4202   00218E  5014               	movf	(color_detect@RGBC_n+5)^0,w,c
  4203   002190  E109               	bnz	u1160
  4204   002192  0EE7               	movlw	231
  4205   002194  5C13               	subwf	(color_detect@RGBC_n+4)^0,w,c
  4206   002196  A0D8               	btfss	status,0,c
  4207   002198  EFD0  F010         	goto	u1161
  4208   00219C  EFD2  F010         	goto	u1160
  4209   0021A0                     u1161:
  4210   0021A0  EFD4  F010         	goto	l118
  4211   0021A4                     u1160:
  4212   0021A4                     
  4213                           ;color.c: 146:         color = 3;
  4214   0021A4  0E03               	movlw	3
  4215   0021A6  6E17               	movwf	color_detect@color^0,c
  4216   0021A8                     l118:
  4217                           
  4218                           ;color.c: 166:     return color;
  4219   0021A8  5017               	movf	color_detect@color^0,w,c
  4220   0021AA  0012               	return		;funcret
  4221   0021AC                     __end_of_color_detect:
  4222                           	callstack 0
  4223                           
  4224 ;; *************** function _color_click_init *****************
  4225 ;; Defined at:
  4226 ;;		line 5 in file "color.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;Total ram usage:        1 bytes
  4245 ;; Hardware stack levels used: 1
  4246 ;; Hardware stack levels required when called: 9
  4247 ;; This function calls:
  4248 ;;		_I2C_2_Master_Init
  4249 ;;		_color_clear_init_interrupts
  4250 ;;		_color_writetoaddr
  4251 ;; This function is called by:
  4252 ;;		_main
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text20
  4257   0021EE                     __ptext20:
  4258                           	callstack 0
  4259   0021EE                     _color_click_init:
  4260                           	callstack 21
  4261   0021EE                     
  4262                           ;color.c: 8:     I2C_2_Master_Init();
  4263   0021EE  EC45  F011         	call	_I2C_2_Master_Init	;wreg free
  4264   0021F2                     
  4265                           ;color.c: 11:  color_writetoaddr(0x00, 0x01);
  4266   0021F2  0E01               	movlw	1
  4267   0021F4  6E11               	movwf	color_writetoaddr@value^0,c
  4268   0021F6  0E00               	movlw	0
  4269   0021F8  ECCD  F011         	call	_color_writetoaddr
  4270   0021FC                     
  4271                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4272   0021FC  0E3F               	movlw	63
  4273   0021FE  6E19               	movwf	??_color_click_init^0,c
  4274   002200  0E55               	movlw	85
  4275   002202                     u1687:
  4276   002202  2EE8               	decfsz	wreg,f,c
  4277   002204  D7FE               	bra	u1687
  4278   002206  2E19               	decfsz	??_color_click_init^0,f,c
  4279   002208  D7FC               	bra	u1687
  4280   00220A  0000               	nop	
  4281   00220C                     
  4282                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  4283   00220C  0E03               	movlw	3
  4284   00220E  6E11               	movwf	color_writetoaddr@value^0,c
  4285   002210  0E00               	movlw	0
  4286   002212  ECCD  F011         	call	_color_writetoaddr
  4287   002216                     
  4288                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  4289   002216  0ED5               	movlw	213
  4290   002218  6E11               	movwf	color_writetoaddr@value^0,c
  4291   00221A  0E01               	movlw	1
  4292   00221C  ECCD  F011         	call	_color_writetoaddr
  4293   002220                     
  4294                           ;color.c: 21:     color_clear_init_interrupts();
  4295   002220  EC5E  F00F         	call	_color_clear_init_interrupts	;wreg free
  4296   002224  0012               	return		;funcret
  4297   002226                     __end_of_color_click_init:
  4298                           	callstack 0
  4299                           
  4300 ;; *************** function _color_clear_init_interrupts *****************
  4301 ;; Defined at:
  4302 ;;		line 25 in file "color.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;		None
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  low_threshol    2   22[COMRAM] unsigned int 
  4307 ;;  high_thresho    2   20[COMRAM] unsigned int 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4318 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4320 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4321 ;;Total ram usage:        6 bytes
  4322 ;; Hardware stack levels used: 1
  4323 ;; Hardware stack levels required when called: 8
  4324 ;; This function calls:
  4325 ;;		_I2C_2_Master_Start
  4326 ;;		_I2C_2_Master_Stop
  4327 ;;		_I2C_2_Master_Write
  4328 ;;		_color_writetoaddr
  4329 ;; This function is called by:
  4330 ;;		_color_click_init
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text21
  4335   001EBC                     __ptext21:
  4336                           	callstack 0
  4337   001EBC                     _color_clear_init_interrupts:
  4338                           	callstack 21
  4339   001EBC                     
  4340                           ;color.c: 27:     I2C_2_Master_Start();
  4341   001EBC  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  4342                           
  4343                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  4344   001EC0  0E52               	movlw	82
  4345   001EC2  EC12  F012         	call	_I2C_2_Master_Write
  4346                           
  4347                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  4348   001EC6  0EE6               	movlw	230
  4349   001EC8  EC12  F012         	call	_I2C_2_Master_Write
  4350                           
  4351                           ;color.c: 30:     I2C_2_Master_Stop();
  4352   001ECC  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  4353   001ED0                     
  4354                           ;color.c: 33:     unsigned int high_threshold = ambient + 100;
  4355   001ED0  EE20  F000         	lfsr	2,_ambient
  4356   001ED4  CFDE F013          	movff	postinc2,??_color_clear_init_interrupts
  4357   001ED8  CFDD F014          	movff	postdec2,??_color_clear_init_interrupts+1
  4358   001EDC  0E64               	movlw	100
  4359   001EDE  2413               	addwf	??_color_clear_init_interrupts^0,w,c
  4360   001EE0  6E15               	movwf	color_clear_init_interrupts@high_threshold^0,c
  4361   001EE2  0E00               	movlw	0
  4362   001EE4  2014               	addwfc	(??_color_clear_init_interrupts+1)^0,w,c
  4363   001EE6  6E16               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  4364   001EE8                     
  4365                           ;color.c: 34:     unsigned int low_threshold = ambient - 100;
  4366   001EE8  EE20  F000         	lfsr	2,_ambient
  4367   001EEC  CFDE F013          	movff	postinc2,??_color_clear_init_interrupts
  4368   001EF0  CFDD F014          	movff	postdec2,??_color_clear_init_interrupts+1
  4369   001EF4  0E9C               	movlw	156
  4370   001EF6  2413               	addwf	??_color_clear_init_interrupts^0,w,c
  4371   001EF8  6E17               	movwf	color_clear_init_interrupts@low_threshold^0,c
  4372   001EFA  0EFF               	movlw	255
  4373   001EFC  2014               	addwfc	(??_color_clear_init_interrupts+1)^0,w,c
  4374   001EFE  6E18               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  4375                           
  4376                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  4377   001F00  0E13               	movlw	19
  4378   001F02  6E11               	movwf	color_writetoaddr@value^0,c
  4379   001F04  0E00               	movlw	0
  4380   001F06  ECCD  F011         	call	_color_writetoaddr
  4381   001F0A                     
  4382                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4383   001F0A  0E3F               	movlw	63
  4384   001F0C  6E13               	movwf	??_color_clear_init_interrupts^0,c
  4385   001F0E  0E55               	movlw	85
  4386   001F10                     u1697:
  4387   001F10  2EE8               	decfsz	wreg,f,c
  4388   001F12  D7FE               	bra	u1697
  4389   001F14  2E13               	decfsz	??_color_clear_init_interrupts^0,f,c
  4390   001F16  D7FC               	bra	u1697
  4391   001F18  0000               	nop	
  4392   001F1A                     
  4393                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  4394   001F1A  5016               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  4395   001F1C  6E11               	movwf	color_writetoaddr@value^0,c
  4396   001F1E  0E07               	movlw	7
  4397   001F20  ECCD  F011         	call	_color_writetoaddr
  4398   001F24                     
  4399                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  4400   001F24  C015  F011         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  4401   001F28  0E06               	movlw	6
  4402   001F2A  ECCD  F011         	call	_color_writetoaddr
  4403   001F2E                     
  4404                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  4405   001F2E  5018               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  4406   001F30  6E11               	movwf	color_writetoaddr@value^0,c
  4407   001F32  0E05               	movlw	5
  4408   001F34  ECCD  F011         	call	_color_writetoaddr
  4409   001F38                     
  4410                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  4411   001F38  C017  F011         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  4412   001F3C  0E04               	movlw	4
  4413   001F3E  ECCD  F011         	call	_color_writetoaddr
  4414   001F42                     
  4415                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  4416   001F42  0E04               	movlw	4
  4417   001F44  6E11               	movwf	color_writetoaddr@value^0,c
  4418   001F46  0E0C               	movlw	12
  4419   001F48  ECCD  F011         	call	_color_writetoaddr
  4420   001F4C  0012               	return		;funcret
  4421   001F4E                     __end_of_color_clear_init_interrupts:
  4422                           	callstack 0
  4423                           
  4424 ;; *************** function _color_writetoaddr *****************
  4425 ;; Defined at:
  4426 ;;		line 48 in file "color.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  address         1    wreg     unsigned char 
  4429 ;;  value           1   16[COMRAM] unsigned char 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  address         1   17[COMRAM] unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4441 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4445 ;;Total ram usage:        2 bytes
  4446 ;; Hardware stack levels used: 1
  4447 ;; Hardware stack levels required when called: 7
  4448 ;; This function calls:
  4449 ;;		_I2C_2_Master_Start
  4450 ;;		_I2C_2_Master_Stop
  4451 ;;		_I2C_2_Master_Write
  4452 ;; This function is called by:
  4453 ;;		_color_click_init
  4454 ;;		_color_clear_init_interrupts
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text22
  4459   00239A                     __ptext22:
  4460                           	callstack 0
  4461   00239A                     _color_writetoaddr:
  4462                           	callstack 22
  4463                           
  4464                           ;incstack = 0
  4465                           ;color_writetoaddr@address stored from wreg
  4466   00239A  6E12               	movwf	color_writetoaddr@address^0,c
  4467   00239C                     
  4468                           ;color.c: 49:     I2C_2_Master_Start();
  4469   00239C  EC28  F012         	call	_I2C_2_Master_Start	;wreg free
  4470                           
  4471                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  4472   0023A0  0E52               	movlw	82
  4473   0023A2  EC12  F012         	call	_I2C_2_Master_Write
  4474                           
  4475                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  4476   0023A6  5012               	movf	color_writetoaddr@address^0,w,c
  4477   0023A8  0980               	iorlw	128
  4478   0023AA  EC12  F012         	call	_I2C_2_Master_Write
  4479                           
  4480                           ;color.c: 52:     I2C_2_Master_Write(value);
  4481   0023AE  5011               	movf	color_writetoaddr@value^0,w,c
  4482   0023B0  EC12  F012         	call	_I2C_2_Master_Write
  4483                           
  4484                           ;color.c: 53:     I2C_2_Master_Stop();
  4485   0023B4  EC23  F012         	call	_I2C_2_Master_Stop	;wreg free
  4486   0023B8  0012               	return		;funcret
  4487   0023BA                     __end_of_color_writetoaddr:
  4488                           	callstack 0
  4489                           
  4490 ;; *************** function _I2C_2_Master_Write *****************
  4491 ;; Defined at:
  4492 ;;		line 45 in file "i2c.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  data_byte       1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  data_byte       1   15[COMRAM] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4509 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4510 ;;Total ram usage:        1 bytes
  4511 ;; Hardware stack levels used: 1
  4512 ;; Hardware stack levels required when called: 6
  4513 ;; This function calls:
  4514 ;;		_I2C_2_Master_Idle
  4515 ;; This function is called by:
  4516 ;;		_color_clear_init_interrupts
  4517 ;;		_color_writetoaddr
  4518 ;;		_color_read
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text23
  4523   002424                     __ptext23:
  4524                           	callstack 0
  4525   002424                     _I2C_2_Master_Write:
  4526                           	callstack 23
  4527                           
  4528                           ;incstack = 0
  4529                           ;I2C_2_Master_Write@data_byte stored from wreg
  4530   002424  6E10               	movwf	I2C_2_Master_Write@data_byte^0,c
  4531   002426                     
  4532                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4533   002426  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  4534   00242A                     
  4535                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4536   00242A  C010  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4537   00242E  0012               	return		;funcret
  4538   002430                     __end_of_I2C_2_Master_Write:
  4539                           	callstack 0
  4540                           
  4541 ;; *************** function _I2C_2_Master_Stop *****************
  4542 ;; Defined at:
  4543 ;;		line 39 in file "i2c.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  1    wreg      void 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used: 1
  4563 ;; Hardware stack levels required when called: 6
  4564 ;; This function calls:
  4565 ;;		_I2C_2_Master_Idle
  4566 ;; This function is called by:
  4567 ;;		_color_clear_init_interrupts
  4568 ;;		_color_writetoaddr
  4569 ;;		_color_read
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text24
  4574   002446                     __ptext24:
  4575                           	callstack 0
  4576   002446                     _I2C_2_Master_Stop:
  4577                           	callstack 23
  4578   002446                     
  4579                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4580   002446  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  4581   00244A                     
  4582                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4583   00244A  010E               	movlb	14	; () banked
  4584   00244C  85DA               	bsf	218,2,b	;volatile
  4585   00244E                     
  4586                           ; BSR set to: 14
  4587   00244E  0012               	return		;funcret
  4588   002450                     __end_of_I2C_2_Master_Stop:
  4589                           	callstack 0
  4590                           
  4591 ;; *************** function _I2C_2_Master_Start *****************
  4592 ;; Defined at:
  4593 ;;		line 27 in file "i2c.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used: 1
  4613 ;; Hardware stack levels required when called: 6
  4614 ;; This function calls:
  4615 ;;		_I2C_2_Master_Idle
  4616 ;; This function is called by:
  4617 ;;		_color_clear_init_interrupts
  4618 ;;		_color_writetoaddr
  4619 ;;		_color_read
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text25
  4624   002450                     __ptext25:
  4625                           	callstack 0
  4626   002450                     _I2C_2_Master_Start:
  4627                           	callstack 23
  4628   002450                     
  4629                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4630   002450  EC5A  F011         	call	_I2C_2_Master_Idle	;wreg free
  4631   002454                     
  4632                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4633   002454  010E               	movlb	14	; () banked
  4634   002456  81DA               	bsf	218,0,b	;volatile
  4635   002458                     
  4636                           ; BSR set to: 14
  4637   002458  0012               	return		;funcret
  4638   00245A                     __end_of_I2C_2_Master_Start:
  4639                           	callstack 0
  4640                           
  4641 ;; *************** function _I2C_2_Master_Idle *****************
  4642 ;; Defined at:
  4643 ;;		line 22 in file "i2c.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4661 ;;Total ram usage:        1 bytes
  4662 ;; Hardware stack levels used: 1
  4663 ;; Hardware stack levels required when called: 5
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_I2C_2_Master_Start
  4668 ;;		_I2C_2_Master_RepStart
  4669 ;;		_I2C_2_Master_Stop
  4670 ;;		_I2C_2_Master_Write
  4671 ;;		_I2C_2_Master_Read
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text26
  4676   0022B4                     __ptext26:
  4677                           	callstack 0
  4678   0022B4                     _I2C_2_Master_Idle:
  4679                           	callstack 23
  4680   0022B4                     l152:
  4681   0022B4  010E               	movlb	14	; () banked
  4682   0022B6  B5D8               	btfsc	216,2,b	;volatile
  4683   0022B8  EF60  F011         	goto	u751
  4684   0022BC  EF62  F011         	goto	u750
  4685   0022C0                     u751:
  4686   0022C0  EF5A  F011         	goto	l152
  4687   0022C4                     u750:
  4688   0022C4                     
  4689                           ; BSR set to: 14
  4690   0022C4  CEDA F00F          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4691   0022C8  0E1F               	movlw	31
  4692   0022CA  160F               	andwf	??_I2C_2_Master_Idle^0,f,c
  4693   0022CC  A4D8               	btfss	status,2,c
  4694   0022CE  EF6B  F011         	goto	u761
  4695   0022D2  EF6D  F011         	goto	u760
  4696   0022D6                     u761:
  4697   0022D6  EF5A  F011         	goto	l152
  4698   0022DA                     u760:
  4699   0022DA                     
  4700                           ; BSR set to: 14
  4701   0022DA  0012               	return		;funcret
  4702   0022DC                     __end_of_I2C_2_Master_Idle:
  4703                           	callstack 0
  4704                           
  4705 ;; *************** function _I2C_2_Master_Init *****************
  4706 ;; Defined at:
  4707 ;;		line 4 in file "i2c.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4725 ;;Total ram usage:        0 bytes
  4726 ;; Hardware stack levels used: 1
  4727 ;; Hardware stack levels required when called: 5
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_color_click_init
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text27
  4736   00228A                     __ptext27:
  4737                           	callstack 0
  4738   00228A                     _I2C_2_Master_Init:
  4739                           	callstack 24
  4740   00228A                     
  4741                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4742   00228A  010E               	movlb	14	; () banked
  4743   00228C  51D9               	movf	217,w,b	;volatile
  4744   00228E  0BF0               	andlw	-16
  4745   002290  0908               	iorlw	8
  4746   002292  6FD9               	movwf	217,b	;volatile
  4747   002294                     
  4748                           ; BSR set to: 14
  4749                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4750   002294  8BD9               	bsf	217,5,b	;volatile
  4751                           
  4752                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4753   002296  0E9F               	movlw	159
  4754   002298  6FD6               	movwf	214,b	;volatile
  4755   00229A                     
  4756                           ; BSR set to: 14
  4757                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4758   00229A  8A84               	bsf	132,5,c	;volatile
  4759   00229C                     
  4760                           ; BSR set to: 14
  4761                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4762   00229C  8C84               	bsf	132,6,c	;volatile
  4763   00229E                     
  4764                           ; BSR set to: 14
  4765                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4766   00229E  9BA7               	bcf	167,5,b	;volatile
  4767   0022A0                     
  4768                           ; BSR set to: 14
  4769                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4770   0022A0  9DA7               	bcf	167,6,b	;volatile
  4771                           
  4772                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4773   0022A2  0E1D               	movlw	29
  4774   0022A4  6F1D               	movwf	29,b	;volatile
  4775                           
  4776                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4777   0022A6  0E1E               	movlw	30
  4778   0022A8  6F1C               	movwf	28,b	;volatile
  4779                           
  4780                           ;i2c.c: 18:   RD5PPS=0x1C;
  4781   0022AA  0E1C               	movlw	28
  4782   0022AC  6F6F               	movwf	111,b	;volatile
  4783                           
  4784                           ;i2c.c: 19:   RD6PPS=0x1B;
  4785   0022AE  0E1B               	movlw	27
  4786   0022B0  6F70               	movwf	112,b	;volatile
  4787   0022B2                     
  4788                           ; BSR set to: 14
  4789   0022B2  0012               	return		;funcret
  4790   0022B4                     __end_of_I2C_2_Master_Init:
  4791                           	callstack 0
  4792                           
  4793 ;; *************** function _Interrupts_init *****************
  4794 ;; Defined at:
  4795 ;;		line 11 in file "interrupts.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		None
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used: 1
  4815 ;; Hardware stack levels required when called: 5
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_main
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text28
  4824   002410                     __ptext28:
  4825                           	callstack 0
  4826   002410                     _Interrupts_init:
  4827                           	callstack 25
  4828   002410                     
  4829                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
  4830   002410  8082               	bsf	130,0,c	;volatile
  4831                           
  4832                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
  4833   002412  010E               	movlb	14	; () banked
  4834   002414  919A               	bcf	154,0,b	;volatile
  4835                           
  4836                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
  4837   002416  8129               	bsf	41,0,b	;volatile
  4838                           
  4839                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
  4840   002418  811F               	bsf	31,0,b	;volatile
  4841                           
  4842                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
  4843   00241A  90F2               	bcf	242,0,c	;volatile
  4844                           
  4845                           ;interrupts.c: 22:     PIE4bits.RC4IE=1;
  4846   00241C  872D               	bsf	45,3,b	;volatile
  4847                           
  4848                           ;interrupts.c: 23:     INTCONbits.PEIE=1;
  4849   00241E  8CF2               	bsf	242,6,c	;volatile
  4850                           
  4851                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4852   002420  8EF2               	bsf	242,7,c	;volatile
  4853   002422                     
  4854                           ; BSR set to: 14
  4855   002422  0012               	return		;funcret
  4856   002424                     __end_of_Interrupts_init:
  4857                           	callstack 0
  4858                           
  4859 ;; *************** function _Buggy_init *****************
  4860 ;; Defined at:
  4861 ;;		line 7 in file "buggysetup.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		None
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4879 ;;Total ram usage:        0 bytes
  4880 ;; Hardware stack levels used: 1
  4881 ;; Hardware stack levels required when called: 5
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text29
  4890   002226                     __ptext29:
  4891                           	callstack 0
  4892   002226                     _Buggy_init:
  4893                           	callstack 25
  4894   002226                     
  4895                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  4896   002226  9E7C               	bcf	124,7,c	;volatile
  4897                           
  4898                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  4899   002228  9E84               	bcf	132,7,c	;volatile
  4900                           
  4901                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  4902   00222A  9680               	bcf	128,3,c	;volatile
  4903                           
  4904                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  4905   00222C  9688               	bcf	136,3,c	;volatile
  4906                           
  4907                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  4908   00222E  8486               	bsf	134,2,c	;volatile
  4909                           
  4910                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  4911   002230  010E               	movlb	14	; () banked
  4912   002232  95B4               	bcf	180,2,b	;volatile
  4913                           
  4914                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  4915   002234  8686               	bsf	134,3,c	;volatile
  4916                           
  4917                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  4918   002236  97B4               	bcf	180,3,b	;volatile
  4919                           
  4920                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  4921   002238  9280               	bcf	128,1,c	;volatile
  4922                           
  4923                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  4924   00223A  9288               	bcf	136,1,c	;volatile
  4925                           
  4926                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  4927   00223C  987C               	bcf	124,4,c	;volatile
  4928                           
  4929                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  4930   00223E  9884               	bcf	132,4,c	;volatile
  4931                           
  4932                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  4933   002240  967C               	bcf	124,3,c	;volatile
  4934                           
  4935                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  4936   002242  9684               	bcf	132,3,c	;volatile
  4937                           
  4938                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  4939   002244  97A7               	bcf	167,3,b	;volatile
  4940                           
  4941                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  4942   002246  9080               	bcf	128,0,c	;volatile
  4943                           
  4944                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  4945   002248  9088               	bcf	136,0,c	;volatile
  4946                           
  4947                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  4948   00224A  907E               	bcf	126,0,c	;volatile
  4949                           
  4950                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  4951   00224C  9086               	bcf	134,0,c	;volatile
  4952                           
  4953                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  4954   00224E  907F               	bcf	127,0,c	;volatile
  4955                           
  4956                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  4957   002250  9087               	bcf	135,0,c	;volatile
  4958                           
  4959                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  4960   002252  9E7D               	bcf	125,7,c	;volatile
  4961                           
  4962                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  4963   002254  9E85               	bcf	133,7,c	;volatile
  4964                           
  4965                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  4966   002256  9679               	bcf	121,3,c	;volatile
  4967                           
  4968                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  4969   002258  9681               	bcf	129,3,c	;volatile
  4970   00225A                     
  4971                           ; BSR set to: 14
  4972   00225A  0012               	return		;funcret
  4973   00225C                     __end_of_Buggy_init:
  4974                           	callstack 0
  4975                           
  4976 ;; *************** function _HighISR *****************
  4977 ;; Defined at:
  4978 ;;		line 32 in file "interrupts.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4994 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4995 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4996 ;;Total ram usage:        4 bytes
  4997 ;; Hardware stack levels used: 1
  4998 ;; Hardware stack levels required when called: 4
  4999 ;; This function calls:
  5000 ;;		_getCharFromTxBuf
  5001 ;;		_isDataInTxBuf
  5002 ;;		_putCharToRxBuf
  5003 ;;		i2_color_clear_init_interrupts
  5004 ;; This function is called by:
  5005 ;;		Interrupt level 2
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	intcode
  5010   000000                     __pintcode:
  5011                           	callstack 0
  5012   000000                     _HighISR:
  5013                           	callstack 21
  5014                           
  5015                           ; BSR set to: 14
  5016                           ;incstack = 0
  5017   000000  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5018   000002  CFD9 F00D          	movff	fsr2l,??_HighISR+2
  5019   000006  CFDA F00E          	movff	fsr2h,??_HighISR+3
  5020   00000A                     
  5021                           ;interrupts.c: 36:     if(PIR0bits.INT0IF){
  5022   00000A  010E               	movlb	14	; () banked
  5023   00000C  A133               	btfss	51,0,b	;volatile
  5024   00000E  EF0B  F000         	goto	i2u128_41
  5025   000012  EF0D  F000         	goto	i2u128_40
  5026   000016                     i2u128_41:
  5027   000016  EF32  F000         	goto	i2l2687
  5028   00001A                     i2u128_40:
  5029   00001A                     
  5030                           ; BSR set to: 14
  5031                           ;interrupts.c: 37:  LATHbits.LATH3 = !LATHbits.LATH3;
  5032   00001A  A680               	btfss	128,3,c	;volatile
  5033   00001C  EF12  F000         	goto	i2u129_41
  5034   000020  EF16  F000         	goto	i2u129_40
  5035   000024                     i2u129_41:
  5036   000024  6A0B               	clrf	??_HighISR^0,c
  5037   000026  2A0B               	incf	??_HighISR^0,f,c
  5038   000028  EF17  F000         	goto	i2u130_48
  5039   00002C                     i2u129_40:
  5040   00002C  6A0B               	clrf	??_HighISR^0,c
  5041   00002E                     i2u130_48:
  5042   00002E  460B               	rlncf	??_HighISR^0,f,c
  5043   000030  460B               	rlncf	??_HighISR^0,f,c
  5044   000032  460B               	rlncf	??_HighISR^0,f,c
  5045   000034  5080               	movf	128,w,c	;volatile
  5046   000036  180B               	xorwf	??_HighISR^0,w,c
  5047   000038  0BF7               	andlw	-9
  5048   00003A  180B               	xorwf	??_HighISR^0,w,c
  5049   00003C  6E80               	movwf	128,c	;volatile
  5050   00003E                     
  5051                           ;interrupts.c: 38:     wall = 1;
  5052   00003E  0E01               	movlw	1
  5053   000040  CFE8 F000          	movff	wreg,_wall
  5054   000044                     
  5055                           ;interrupts.c: 41:     color_clear_init_interrupts();
  5056   000044  ECA7  F00F         	call	i2_color_clear_init_interrupts	;wreg free
  5057   000048                     
  5058                           ;interrupts.c: 43:     PIR0bits.INT0IF = 0;
  5059   000048  010E               	movlb	14	; () banked
  5060   00004A  9133               	bcf	51,0,b	;volatile
  5061   00004C                     
  5062                           ; BSR set to: 14
  5063                           ;interrupts.c: 44:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5064   00004C  0E11               	movlw	17
  5065   00004E  6E0C               	movwf	(??_HighISR+1)^0,c
  5066   000050  0E3C               	movlw	60
  5067   000052  6E0B               	movwf	??_HighISR^0,c
  5068   000054  0ECB               	movlw	203
  5069   000056                     i2u170_47:
  5070   000056  2EE8               	decfsz	wreg,f,c
  5071   000058  D7FE               	bra	i2u170_47
  5072   00005A  2E0B               	decfsz	??_HighISR^0,f,c
  5073   00005C  D7FC               	bra	i2u170_47
  5074   00005E  2E0C               	decfsz	(??_HighISR+1)^0,f,c
  5075   000060  D7FA               	bra	i2u170_47
  5076   000062  0000               	nop	
  5077   000064                     i2l2687:
  5078                           
  5079                           ;interrupts.c: 47:     if(PIR4bits.RC4IF){
  5080   000064  010E               	movlb	14	; () banked
  5081   000066  A737               	btfss	55,3,b	;volatile
  5082   000068  EF38  F000         	goto	i2u131_41
  5083   00006C  EF3A  F000         	goto	i2u131_40
  5084   000070                     i2u131_41:
  5085   000070  EF3D  F000         	goto	i2l2691
  5086   000074                     i2u131_40:
  5087   000074                     
  5088                           ; BSR set to: 14
  5089                           ;interrupts.c: 49:     putCharToRxBuf(RC4REG);
  5090   000074  51E3               	movf	227,w,b	;volatile
  5091   000076  EC95  F011         	call	_putCharToRxBuf
  5092   00007A                     i2l2691:
  5093                           
  5094                           ;interrupts.c: 53:     if(PIR4bits.TX4IF){
  5095   00007A  010E               	movlb	14	; () banked
  5096   00007C  A537               	btfss	55,2,b	;volatile
  5097   00007E  EF43  F000         	goto	i2u132_41
  5098   000082  EF45  F000         	goto	i2u132_40
  5099   000086                     i2u132_41:
  5100   000086  EF55  F000         	goto	i2l259
  5101   00008A                     i2u132_40:
  5102   00008A                     
  5103                           ; BSR set to: 14
  5104                           ;interrupts.c: 55:     TX4REG = getCharFromTxBuf();
  5105   00008A  ECA8  F011         	call	_getCharFromTxBuf	;wreg free
  5106   00008E  010E               	movlb	14	; () banked
  5107   000090  6FE4               	movwf	228,b	;volatile
  5108   000092                     
  5109                           ; BSR set to: 14
  5110                           ;interrupts.c: 56:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  5111   000092  ECFC  F011         	call	_isDataInTxBuf	;wreg free
  5112   000096  0900               	iorlw	0
  5113   000098  A4D8               	btfss	status,2,c
  5114   00009A  EF51  F000         	goto	i2u133_41
  5115   00009E  EF53  F000         	goto	i2u133_40
  5116   0000A2                     i2u133_41:
  5117   0000A2  EF55  F000         	goto	i2l259
  5118   0000A6                     i2u133_40:
  5119   0000A6  010E               	movlb	14	; () banked
  5120   0000A8  952D               	bcf	45,2,b	;volatile
  5121   0000AA                     i2l259:
  5122   0000AA  C00E  FFDA         	movff	??_HighISR+3,fsr2h
  5123   0000AE  C00D  FFD9         	movff	??_HighISR+2,fsr2l
  5124   0000B2  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5125   0000B4  0011               	retfie		f
  5126   0000B6                     __end_of_HighISR:
  5127                           	callstack 0
  5128                           
  5129 ;; *************** function i2_color_clear_init_interrupts *****************
  5130 ;; Defined at:
  5131 ;;		line 25 in file "color.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;		None
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  low_threshol    2    8[COMRAM] unsigned int 
  5136 ;;  high_thresho    2    6[COMRAM] unsigned int 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;Total ram usage:        6 bytes
  5151 ;; Hardware stack levels used: 1
  5152 ;; Hardware stack levels required when called: 3
  5153 ;; This function calls:
  5154 ;;		i2_I2C_2_Master_Start
  5155 ;;		i2_I2C_2_Master_Stop
  5156 ;;		i2_I2C_2_Master_Write
  5157 ;;		i2_color_writetoaddr
  5158 ;; This function is called by:
  5159 ;;		_HighISR
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text31
  5164   001F4E                     __ptext31:
  5165                           	callstack 0
  5166   001F4E                     i2_color_clear_init_interrupts:
  5167                           	callstack 21
  5168   001F4E                     
  5169                           ;color.c: 27:     I2C_2_Master_Start();
  5170   001F4E  EC32  F012         	call	i2_I2C_2_Master_Start	;wreg free
  5171                           
  5172                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  5173   001F52  0E52               	movlw	82
  5174   001F54  EC18  F012         	call	i2_I2C_2_Master_Write
  5175                           
  5176                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  5177   001F58  0EE6               	movlw	230
  5178   001F5A  EC18  F012         	call	i2_I2C_2_Master_Write
  5179                           
  5180                           ;color.c: 30:     I2C_2_Master_Stop();
  5181   001F5E  EC2D  F012         	call	i2_I2C_2_Master_Stop	;wreg free
  5182   001F62                     
  5183                           ;color.c: 33:     unsigned int high_threshold = ambient + 100;
  5184   001F62  EE20  F000         	lfsr	2,_ambient
  5185   001F66  CFDE F005          	movff	postinc2,??i2_color_clear_init_interrupts
  5186   001F6A  CFDD F006          	movff	postdec2,??i2_color_clear_init_interrupts+1
  5187   001F6E  0E64               	movlw	100
  5188   001F70  2405               	addwf	??i2_color_clear_init_interrupts^0,w,c
  5189   001F72  6E07               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
  5190   001F74  0E00               	movlw	0
  5191   001F76  2006               	addwfc	(??i2_color_clear_init_interrupts+1)^0,w,c
  5192   001F78  6E08               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
  5193   001F7A                     
  5194                           ;color.c: 34:     unsigned int low_threshold = ambient - 100;
  5195   001F7A  EE20  F000         	lfsr	2,_ambient
  5196   001F7E  CFDE F005          	movff	postinc2,??i2_color_clear_init_interrupts
  5197   001F82  CFDD F006          	movff	postdec2,??i2_color_clear_init_interrupts+1
  5198   001F86  0E9C               	movlw	156
  5199   001F88  2405               	addwf	??i2_color_clear_init_interrupts^0,w,c
  5200   001F8A  6E09               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
  5201   001F8C  0EFF               	movlw	255
  5202   001F8E  2006               	addwfc	(??i2_color_clear_init_interrupts+1)^0,w,c
  5203   001F90  6E0A               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
  5204                           
  5205                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  5206   001F92  0E13               	movlw	19
  5207   001F94  6E03               	movwf	i2color_writetoaddr@value^0,c
  5208   001F96  0E00               	movlw	0
  5209   001F98  ECDD  F011         	call	i2_color_writetoaddr
  5210   001F9C                     
  5211                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5212   001F9C  0E3F               	movlw	63
  5213   001F9E  6E05               	movwf	??i2_color_clear_init_interrupts^0,c
  5214   001FA0  0E55               	movlw	85
  5215   001FA2                     i2u171_47:
  5216   001FA2  2EE8               	decfsz	wreg,f,c
  5217   001FA4  D7FE               	bra	i2u171_47
  5218   001FA6  2E05               	decfsz	??i2_color_clear_init_interrupts^0,f,c
  5219   001FA8  D7FC               	bra	i2u171_47
  5220   001FAA  0000               	nop	
  5221   001FAC                     
  5222                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  5223   001FAC  5008               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
  5224   001FAE  6E03               	movwf	i2color_writetoaddr@value^0,c
  5225   001FB0  0E07               	movlw	7
  5226   001FB2  ECDD  F011         	call	i2_color_writetoaddr
  5227   001FB6                     
  5228                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  5229   001FB6  C007  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
  5230   001FBA  0E06               	movlw	6
  5231   001FBC  ECDD  F011         	call	i2_color_writetoaddr
  5232   001FC0                     
  5233                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  5234   001FC0  500A               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
  5235   001FC2  6E03               	movwf	i2color_writetoaddr@value^0,c
  5236   001FC4  0E05               	movlw	5
  5237   001FC6  ECDD  F011         	call	i2_color_writetoaddr
  5238   001FCA                     
  5239                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  5240   001FCA  C009  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
  5241   001FCE  0E04               	movlw	4
  5242   001FD0  ECDD  F011         	call	i2_color_writetoaddr
  5243   001FD4                     
  5244                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  5245   001FD4  0E04               	movlw	4
  5246   001FD6  6E03               	movwf	i2color_writetoaddr@value^0,c
  5247   001FD8  0E0C               	movlw	12
  5248   001FDA  ECDD  F011         	call	i2_color_writetoaddr
  5249   001FDE  0012               	return		;funcret
  5250   001FE0                     __end_ofi2_color_clear_init_interrupts:
  5251                           	callstack 0
  5252                           
  5253 ;; *************** function i2_color_writetoaddr *****************
  5254 ;; Defined at:
  5255 ;;		line 48 in file "color.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  address         1    wreg     unsigned char 
  5258 ;;  value           1    2[COMRAM] unsigned char 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  address         1    3[COMRAM] unsigned char 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5274 ;;Total ram usage:        2 bytes
  5275 ;; Hardware stack levels used: 1
  5276 ;; Hardware stack levels required when called: 2
  5277 ;; This function calls:
  5278 ;;		i2_I2C_2_Master_Start
  5279 ;;		i2_I2C_2_Master_Stop
  5280 ;;		i2_I2C_2_Master_Write
  5281 ;; This function is called by:
  5282 ;;		i2_color_clear_init_interrupts
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text32
  5287   0023BA                     __ptext32:
  5288                           	callstack 0
  5289   0023BA                     i2_color_writetoaddr:
  5290                           	callstack 21
  5291                           
  5292                           ;incstack = 0
  5293                           ;i2color_writetoaddr@address stored from wreg
  5294   0023BA  6E04               	movwf	i2color_writetoaddr@address^0,c
  5295   0023BC                     
  5296                           ;color.c: 49:     I2C_2_Master_Start();
  5297   0023BC  EC32  F012         	call	i2_I2C_2_Master_Start	;wreg free
  5298                           
  5299                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  5300   0023C0  0E52               	movlw	82
  5301   0023C2  EC18  F012         	call	i2_I2C_2_Master_Write
  5302                           
  5303                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  5304   0023C6  5004               	movf	i2color_writetoaddr@address^0,w,c
  5305   0023C8  0980               	iorlw	128
  5306   0023CA  EC18  F012         	call	i2_I2C_2_Master_Write
  5307                           
  5308                           ;color.c: 52:     I2C_2_Master_Write(value);
  5309   0023CE  5003               	movf	i2color_writetoaddr@value^0,w,c
  5310   0023D0  EC18  F012         	call	i2_I2C_2_Master_Write
  5311                           
  5312                           ;color.c: 53:     I2C_2_Master_Stop();
  5313   0023D4  EC2D  F012         	call	i2_I2C_2_Master_Stop	;wreg free
  5314   0023D8  0012               	return		;funcret
  5315   0023DA                     __end_ofi2_color_writetoaddr:
  5316                           	callstack 0
  5317                           
  5318 ;; *************** function i2_I2C_2_Master_Write *****************
  5319 ;; Defined at:
  5320 ;;		line 45 in file "i2c.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  data_byte       1    wreg     unsigned char 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  data_byte       1    1[COMRAM] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;Total ram usage:        1 bytes
  5339 ;; Hardware stack levels used: 1
  5340 ;; Hardware stack levels required when called: 1
  5341 ;; This function calls:
  5342 ;;		i2_I2C_2_Master_Idle
  5343 ;; This function is called by:
  5344 ;;		i2_color_clear_init_interrupts
  5345 ;;		i2_color_writetoaddr
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text33
  5350   002430                     __ptext33:
  5351                           	callstack 0
  5352   002430                     i2_I2C_2_Master_Write:
  5353                           	callstack 21
  5354                           
  5355                           ;incstack = 0
  5356                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  5357   002430  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  5358   002432                     
  5359                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5360   002432  EC6E  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  5361   002436                     
  5362                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5363   002436  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  5364   00243A  0012               	return		;funcret
  5365   00243C                     __end_ofi2_I2C_2_Master_Write:
  5366                           	callstack 0
  5367                           
  5368 ;; *************** function i2_I2C_2_Master_Stop *****************
  5369 ;; Defined at:
  5370 ;;		line 39 in file "i2c.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      void 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used: 1
  5390 ;; Hardware stack levels required when called: 1
  5391 ;; This function calls:
  5392 ;;		i2_I2C_2_Master_Idle
  5393 ;; This function is called by:
  5394 ;;		i2_color_clear_init_interrupts
  5395 ;;		i2_color_writetoaddr
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text34
  5400   00245A                     __ptext34:
  5401                           	callstack 0
  5402   00245A                     i2_I2C_2_Master_Stop:
  5403                           	callstack 21
  5404   00245A                     
  5405                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5406   00245A  EC6E  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  5407   00245E                     
  5408                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5409   00245E  010E               	movlb	14	; () banked
  5410   002460  85DA               	bsf	218,2,b	;volatile
  5411   002462                     
  5412                           ; BSR set to: 14
  5413   002462  0012               	return		;funcret
  5414   002464                     __end_ofi2_I2C_2_Master_Stop:
  5415                           	callstack 0
  5416                           
  5417 ;; *************** function i2_I2C_2_Master_Start *****************
  5418 ;; Defined at:
  5419 ;;		line 27 in file "i2c.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used: 1
  5439 ;; Hardware stack levels required when called: 1
  5440 ;; This function calls:
  5441 ;;		i2_I2C_2_Master_Idle
  5442 ;; This function is called by:
  5443 ;;		i2_color_clear_init_interrupts
  5444 ;;		i2_color_writetoaddr
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text35
  5449   002464                     __ptext35:
  5450                           	callstack 0
  5451   002464                     i2_I2C_2_Master_Start:
  5452                           	callstack 21
  5453   002464                     
  5454                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5455   002464  EC6E  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  5456   002468                     
  5457                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5458   002468  010E               	movlb	14	; () banked
  5459   00246A  81DA               	bsf	218,0,b	;volatile
  5460   00246C                     
  5461                           ; BSR set to: 14
  5462   00246C  0012               	return		;funcret
  5463   00246E                     __end_ofi2_I2C_2_Master_Start:
  5464                           	callstack 0
  5465                           
  5466 ;; *************** function i2_I2C_2_Master_Idle *****************
  5467 ;; Defined at:
  5468 ;;		line 22 in file "i2c.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5486 ;;Total ram usage:        1 bytes
  5487 ;; Hardware stack levels used: 1
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		i2_I2C_2_Master_Start
  5492 ;;		i2_I2C_2_Master_Stop
  5493 ;;		i2_I2C_2_Master_Write
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text36
  5498   0022DC                     __ptext36:
  5499                           	callstack 0
  5500   0022DC                     i2_I2C_2_Master_Idle:
  5501                           	callstack 21
  5502   0022DC                     i2l152:
  5503   0022DC  010E               	movlb	14	; () banked
  5504   0022DE  B5D8               	btfsc	216,2,b	;volatile
  5505   0022E0  EF74  F011         	goto	i2u80_41
  5506   0022E4  EF76  F011         	goto	i2u80_40
  5507   0022E8                     i2u80_41:
  5508   0022E8  EF6E  F011         	goto	i2l152
  5509   0022EC                     i2u80_40:
  5510   0022EC                     
  5511                           ; BSR set to: 14
  5512   0022EC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  5513   0022F0  0E1F               	movlw	31
  5514   0022F2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  5515   0022F4  A4D8               	btfss	status,2,c
  5516   0022F6  EF7F  F011         	goto	i2u81_41
  5517   0022FA  EF81  F011         	goto	i2u81_40
  5518   0022FE                     i2u81_41:
  5519   0022FE  EF6E  F011         	goto	i2l152
  5520   002302                     i2u81_40:
  5521   002302                     
  5522                           ; BSR set to: 14
  5523   002302  0012               	return		;funcret
  5524   002304                     __end_ofi2_I2C_2_Master_Idle:
  5525                           	callstack 0
  5526                           
  5527 ;; *************** function _putCharToRxBuf *****************
  5528 ;; Defined at:
  5529 ;;		line 33 in file "serial.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  byte            1    wreg     unsigned char 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  byte            1    0[COMRAM] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;Total ram usage:        1 bytes
  5548 ;; Hardware stack levels used: 1
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_HighISR
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text37
  5557   00232A                     __ptext37:
  5558                           	callstack 0
  5559   00232A                     _putCharToRxBuf:
  5560                           	callstack 24
  5561                           
  5562                           ; BSR set to: 14
  5563                           ;incstack = 0
  5564                           ;putCharToRxBuf@byte stored from wreg
  5565   00232A  6E01               	movwf	putCharToRxBuf@byte^0,c
  5566   00232C                     
  5567                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  5568   00232C  0E13               	movlw	19
  5569   00232E  644F               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  5570   002330  EF9C  F011         	goto	i2u50_41
  5571   002334  EF9E  F011         	goto	i2u50_40
  5572   002338                     i2u50_41:
  5573   002338  EFA0  F011         	goto	i2l1761
  5574   00233C                     i2u50_40:
  5575   00233C  0E00               	movlw	0
  5576   00233E  6E4F               	movwf	_RxBufWriteCnt^0,c	;volatile
  5577   002340                     i2l1761:
  5578                           
  5579                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  5580   002340  504F               	movf	_RxBufWriteCnt^0,w,c
  5581   002342  0F38               	addlw	low _EUSART4RXbuf
  5582   002344  6ED9               	movwf	fsr2l,c
  5583   002346  6ADA               	clrf	fsr2h,c
  5584   002348  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  5585   00234C  2A4F               	incf	_RxBufWriteCnt^0,f,c	;volatile
  5586   00234E  0012               	return		;funcret
  5587   002350                     __end_of_putCharToRxBuf:
  5588                           	callstack 0
  5589                           
  5590 ;; *************** function _isDataInTxBuf *****************
  5591 ;; Defined at:
  5592 ;;		line 61 in file "serial.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      unsigned char 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used: 1
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_HighISR
  5616 ;;		_sendTxBuf
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text38
  5621   0023F8                     __ptext38:
  5622                           	callstack 0
  5623   0023F8                     _isDataInTxBuf:
  5624                           	callstack 24
  5625   0023F8                     
  5626                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  5627   0023F8  504C               	movf	_TxBufReadCnt^0,w,c	;volatile
  5628   0023FA  184D               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  5629   0023FC  A4D8               	btfss	status,2,c
  5630   0023FE  EF03  F012         	goto	i2u52_41
  5631   002402  EF06  F012         	goto	i2u52_40
  5632   002406                     i2u52_41:
  5633   002406  0E01               	movlw	1
  5634   002408  EF07  F012         	goto	i2u53_40
  5635   00240C                     i2u52_40:
  5636   00240C  0E00               	movlw	0
  5637   00240E                     i2u53_40:
  5638   00240E  0012               	return		;funcret
  5639   002410                     __end_of_isDataInTxBuf:
  5640                           	callstack 0
  5641                           
  5642 ;; *************** function _getCharFromTxBuf *****************
  5643 ;; Defined at:
  5644 ;;		line 47 in file "serial.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;		None
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;		None
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      unsigned char 
  5651 ;; Registers used:
  5652 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5662 ;;Total ram usage:        1 bytes
  5663 ;; Hardware stack levels used: 1
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_HighISR
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text39
  5672   002350                     __ptext39:
  5673                           	callstack 0
  5674   002350                     _getCharFromTxBuf:
  5675                           	callstack 24
  5676   002350                     
  5677                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  5678   002350  0E3B               	movlw	59
  5679   002352  644C               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  5680   002354  EFAE  F011         	goto	i2u124_41
  5681   002358  EFB0  F011         	goto	i2u124_40
  5682   00235C                     i2u124_41:
  5683   00235C  EFB2  F011         	goto	i2l2559
  5684   002360                     i2u124_40:
  5685   002360  0E00               	movlw	0
  5686   002362  6E4C               	movwf	_TxBufReadCnt^0,c	;volatile
  5687   002364                     i2l2559:
  5688                           
  5689                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  5690   002364  2A4C               	incf	_TxBufReadCnt^0,f,c	;volatile
  5691   002366  044C               	decf	_TxBufReadCnt^0,w,c	;volatile
  5692   002368  6E01               	movwf	??_getCharFromTxBuf^0,c
  5693   00236A  5001               	movf	??_getCharFromTxBuf^0,w,c
  5694   00236C  0FA7               	addlw	low _EUSART4TXbuf
  5695   00236E  6ED9               	movwf	fsr2l,c
  5696   002370  6ADA               	clrf	fsr2h,c
  5697   002372  50DF               	movf	indf2,w,c
  5698   002374  0012               	return		;funcret
  5699   002376                     __end_of_getCharFromTxBuf:
  5700                           	callstack 0
  5701                           
  5702                           	psect	smallconst
  5703   000E00                     __psmallconst:
  5704                           	callstack 0
  5705   000E00  00                 	db	0
  5706   000E01  00                 	db	0	; dummy byte at the end
  5707   000000                     
  5708                           	psect	rparam
  5709   000000                     
  5710                           	psect	temp
  5711   000050                     btemp:
  5712                           	callstack 0
  5713   000050                     	ds	1
  5714   000000                     int$flags	set	btemp
  5715   000000                     wtemp8	set	btemp+1
  5716   000000                     ttemp5	set	btemp+1
  5717   000000                     ttemp6	set	btemp+4
  5718   000000                     ttemp7	set	btemp+8
  5719                           
  5720                           	psect	config
  5721                           
  5722                           ;Config register CONFIG1L @ 0x300000
  5723                           ;	External Oscillator mode Selection bits
  5724                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5725                           ;	Power-up default value for COSC bits
  5726                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5727   300000                     	org	3145728
  5728   300000  AA                 	db	170
  5729                           
  5730                           ;Config register CONFIG1H @ 0x300001
  5731                           ;	unspecified, using default values
  5732                           ;	Clock Out Enable bit
  5733                           ;	CLKOUTEN = 0x1, unprogrammed default
  5734                           ;	Clock Switch Enable bit
  5735                           ;	CSWEN = 0x1, unprogrammed default
  5736                           ;	Fail-Safe Clock Monitor Enable bit
  5737                           ;	FCMEN = 0x1, unprogrammed default
  5738   300001                     	org	3145729
  5739   300001  FF                 	db	255
  5740                           
  5741                           ;Config register CONFIG3L @ 0x300004
  5742                           ;	WDT Period Select bits
  5743                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5744                           ;	WDT operating mode
  5745                           ;	WDTE = OFF, WDT Disabled
  5746   300004                     	org	3145732
  5747   300004  9F                 	db	159
  5748                           
  5749                           ;Config register CONFIG3H @ 0x300005
  5750                           ;	unspecified, using default values
  5751                           ;	WDT Window Select bits
  5752                           ;	WDTCWS = 0x7, unprogrammed default
  5753                           ;	WDT input clock selector
  5754                           ;	WDTCCS = 0x7, unprogrammed default
  5755   300005                     	org	3145733
  5756   300005  FF                 	db	255
  5757                           tosu	equ	0xFFF
  5758                           tosh	equ	0xFFE
  5759                           tosl	equ	0xFFD
  5760                           stkptr	equ	0xFFC
  5761                           pclatu	equ	0xFFB
  5762                           pclath	equ	0xFFA
  5763                           pcl	equ	0xFF9
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           indf0	equ	0xFEF
  5771                           postinc0	equ	0xFEE
  5772                           postdec0	equ	0xFED
  5773                           preinc0	equ	0xFEC
  5774                           plusw0	equ	0xFEB
  5775                           fsr0h	equ	0xFEA
  5776                           fsr0l	equ	0xFE9
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           postinc1	equ	0xFE6
  5780                           postdec1	equ	0xFE5
  5781                           preinc1	equ	0xFE4
  5782                           plusw1	equ	0xFE3
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           bsr	equ	0xFE0
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           preinc2	equ	0xFDC
  5790                           plusw2	equ	0xFDB
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      79
    BANK0           160     71     131
    BANK1           256      0      40
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _stop->_setMotorPWM
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                90    90      0   42171
                                              0 BANK0     71    71      0
                         _Buggy_init
                    _Interrupts_init
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             32 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   28188
                                             44 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             32 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             32 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             32 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    5029
                                             32 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             27 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             20 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     483
                                             18 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             15 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    1965
                                             40 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     170
                                             14 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    1612
                                             24 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          6     6      0     862
                                             18 COMRAM     6     6      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             16 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             15 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              4     4      0     349
                                             10 COMRAM     4     4      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        6     6      0     334
                                              4 COMRAM     6     6      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _color_writetoaddr
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _stop
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      28       7       15.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     47      83       5       81.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      4F       1       84.0%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllhl     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllhl     11      0       0      51        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRllllhl      C      0       0      49        0.0%
BITBIGSFRlllllh      9      0       0      61        0.0%
BITBIGSFRllllhh      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllhl      6      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRllllhl      3      0       0      54        0.0%
BITBIGSFRllllhl      3      0       0      60        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllhl      1      0       0      53        0.0%
BITBIGSFRlllllh      1      0       0      62        0.0%
BITBIGSFRllllhl      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FA      65        0.0%
DATA                 0      0      FA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 09 11:26:13 2024

                                _white_Light 2376                                           l61 1D92  
                                         l63 1DA0                                           l97 2224  
                        ___wmul@multiplicand 0011                            ??_Interrupts_init 000F  
                                        l100 1F4C                                          l103 23B8  
                                        l111 1350                                          l201 225A  
                                        l122 21AA                                          l114 1B16  
                                        l106 2392                                          l108 2398  
                                        l118 21A8                                          l152 22B4  
                                        l161 2444                                          l250 2422  
                                        l170 21EC                                          l155 22DA  
                                        l164 244E                                          l149 22B2  
                                        l158 2458                                          l430 19D4  
                                        l510 1462                                          l167 242E  
                                        l423 206E                                          l504 13D2  
                                        l513 14D6                                          l290 23F6  
                                        l516 1514                                          l508 143E  
                                        l613 1C22                                          l461 174E  
                                        l453 1CD2                                          l534 2328  
                                        l470 1852                                          l446 117A  
                                        l448 117A                                          l456 1D10  
                                        l545 213C                                          l473 1880  
                                        l465 17BA                                          l546 214C  
                                        l490 16CA                                          l482 1604  
                                        l467 17DE                                          l484 1628  
                                        l478 1598                                          l495 1E6E  
                                        l487 169C                                          l499 1EBA  
                                        u820 189C                                          u900 1628  
                                        u821 1898                                          u901 1624  
                                        u750 22C4                                          u830 1958  
                                        u910 163C                                          u751 22C0  
                                        u831 1954                                          u911 1638  
                                        u760 22DA                                          u840 1E92  
                                        u920 16C0                                          u761 22D6  
                                        u841 1E8E                                          u921 16BC  
                                        u770 208A                                          u850 1EBA  
                                        u930 1772                                          u771 2086  
                                        u851 1EB6                                          u931 176E  
                                        u860 21D6                                          u780 20A8  
                                        u940 179A                                          u861 21CE  
                                        u781 20A4                                          u941 1796  
                                        u790 20C4                                          u950 17DE  
                                        u791 20C0                                          u951 17DA  
                                        u960 17F2                                          u880 15BC  
                                        u961 17EE                                          u881 15B8  
                                        u970 1876                                          u890 15E4  
                                        u971 1872                                          u891 15E0  
                                        u980 13F6                                          u981 13F2  
                                        u878 21D8                                          u990 141E  
                                        u991 141A                                ?_color_detect 000F  
                        i2_color_writetoaddr 23BA                                          wreg 0FE8  
  color_clear_init_interrupts@high_threshold 0015  i2color_clear_init_interrupts@high_threshold 0007  
                            _color_normalise 19D6                                         l1032 20E2  
                                       l1025 20DA                                         l2011 2454  
                                       l2005 22B4                                         l2013 2426  
                                       l2021 2304                                         l2101 1E96  
                                       l2111 229E                                         l2103 228A  
                                       l2007 22C4                                         l2015 242A  
                                       l2031 208A                                         l2023 2320  
                                       l2113 22A0                                         l2105 2294  
                                       l2009 2450                                         l2017 2446  
                                       l2121 1F0A                                         l2041 20C4  
                                       l2033 2092                                         l2201 16F2  
                                       l2107 229A                                         l2019 244A  
                                       l2131 1F42                                         l2123 1F1A  
                                       l2115 1EBC                                         l2043 20CC  
                                       l2035 209A                                         l2027 2070  
                                       l2211 174A                                         l2203 171E  
                                       l2109 229C                                         l2053 239C  
                                       l2125 1F24                                         l2117 1ED0  
                                       l2301 1B18                                         l2141 21BA  
                                       l2133 243C                                         l2045 20CE  
                                       l2037 20A8                                         l2029 2078  
                                       l2061 18FC                                         l2221 17B6  
                                       l2213 1772                                         l2205 1726  
                                       l2127 1F2E                                         l2119 1EE8  
                                       l2311 1B4C                                         l2303 1B1C  
                                       l2143 21C2                                         l2135 2440  
                                       l2047 20D4                                         l2039 20AE  
                                       l2063 1900                                         l2055 1882  
                                       l2231 182A                                         l2223 17E4  
                                       l2207 172E                                         l2215 1776  
                                       l2151 1516                                         l2129 1F38  
                                       l2321 1B8E                                         l2313 1B5C  
                                       l2305 1B2A                                         l2145 21E8  
                                       l2137 21AE                                         l2065 193E  
                                       l2057 189C                                         l2233 1832  
                                       l2217 179A                                         l2209 173A  
                                       l2161 1578                                         l2153 1530  
                                       l2401 2388                                         l2331 1BE0  
                                       l2323 1B9A                                         l2315 1B60  
                                       l2307 1B3A                                         l2147 21EA  
                                       l2139 21B2                                         l2411 121E  
                                       l2403 117C                                         l2067 1958  
                                       l2059 18EA                                         l2091 1E46  
                                       l2083 1DEA                                         l2251 13AA  
                                       l2243 1352                                         l2235 183E  
                                       l2227 17F6                                         l2219 17A6  
                                       l2171 15E4                                         l2163 1584  
                                       l2155 153C                                         l2341 1C12  
                                       l2333 1BE2                                         l2325 1BA8  
                                       l2317 1B70                                         l2309 1B3E  
                                       l2413 127A                                         l2405 1196  
                                       l2069 1998                                         l2093 1E4E  
                                       l2085 1E06                                         l2253 13B2  
                                       l2261 13FA                                         l2245 136A  
                                       l2237 184E                                         l2229 1822  
                                       l2181 1640                                         l2173 15F0  
                                       l2165 1594                                         l2157 1568  
                                       l2501 0FBA                                         l2421 1C24  
                                       l2351 21F2                                         l2335 1BEC  
                                       l2327 1BB2                                         l2319 1B86  
                                       l2415 1296                                         l2407 11AE  
                                       l2095 1E5A                                         l2087 1E12  
                                       l2263 141E                                         l2255 13BE  
                                       l2247 1376                                         l2239 1876  
                                       l2191 1698                                         l2183 166C  
                                       l2175 1600                                         l2167 15BC  
                                       l2159 1570                                         l2511 1018  
                                       l2431 1CAA                                         l2423 1C64  
                                       l2361 2410                                         l2353 21FC  
                                       l2329 1BD0                                         l2337 1BF2  
                                       l2417 12F2                                         l2409 1202  
                                       l2097 1E6A                                         l2089 1E3E  
                                       l2281 14C2                                         l2273 147A  
                                       l2265 142A                                         l2257 13CE  
                                       l2249 13A2                                         l2193 16C0  
                                       l2185 1674                                         l2177 162E  
                                       l2169 15C0                                         l2521 10BA  
                                       l2513 1048                                         l2505 0FD6  
                                       l2433 1CB2                                         l2347 2226  
                                       l2355 220C                                         l2339 1C02  
                                       l2291 20E4                                         l2451 1AB0  
                                       l2419 130E                                         l2371 23F2  
                                       l2363 23DA                                         l2099 1E92  
                                       l2283 14D2                                         l2275 14A6  
                                       l2267 143A                                         l2259 13F6  
                                       l2187 167C                                         l2531 1130  
                                       l2523 10D2                                         l2515 1060  
                                       l2507 0FE8                                         l2435 1CBE  
                                       l2443 1D00                                         l2427 1C76  
                                       l2357 2216                                         l2349 21EE  
                                       l2461 2186                                         l2453 214E  
                                       l2293 20F4                                         l2445 19D6  
                                       l2381 201A                                         l2373 23F4  
                                       l2365 23E4                                         l2285 14FA  
                                       l2277 14AE                                         l2269 1468  
                                       l2197 16CC                                         l2189 1688  
                                       l2541 114C                                         l2525 1102  
                                       l2509 1000                                         l2517 1090  
                                       l2437 1CCE                                         l2429 1CA2  
                                       l2359 2220                                         l2463 218E  
                                       l2455 2152                                         l2295 2102  
                                       l2447 19E8                                         l2391 2056  
                                       l2383 203E                                         l2375 1FE0  
                                       l2367 23E6                                         l2279 14B6  
                                       l2199 16E6                                         l2543 115E  
                                       l2519 10A2                                         l2471 0E12  
                                       l2439 1CF6                                         l2465 21A4  
                                       l2457 2168                                         l2297 2112  
                                       l2449 1A4A                                         l2393 2060  
                                       l2385 2048                                         l2377 1FF0  
                                       l2369 23F0                                         l2289 1504  
                                       l2529 111E                                         l2481 0E9C  
                                       l2473 0E2A                                         l2801 1D92  
                                       l2459 2170                                         l2299 211C  
                                       l2395 2062                                         l2387 204A  
                                       l2379 2016                                         l2491 0F12  
                                       l2483 0EB4                                         l2475 0E42  
                                       l2811 1DCE                                         l2803 1DA8  
                                       l2397 206C                                         l2389 2054  
                                       l2493 0F2A                                         l2485 0ECC  
                                       l2477 0E72                                         l2469 0E02  
                                       l2813 1DCE                                         l2805 1DC0  
                                       l2495 0F42                                         l2479 0E8A  
                                       l2399 2378                                         l2815 1DE2  
                                       l2807 1DC6                                         l2751 1D18  
                                       l2497 0F72                                         l2489 0F00  
                                       l2809 1DCE                                         l2761 1D34  
                                       l2753 1D24                                         l2499 0F8A  
                                       l2771 1D56                                         l2763 1D40  
                                       l2755 1D24                                         l2781 1D72  
                                       l2773 1D5E                                         l2765 1D46  
                                       l2757 1D2C                                         l2749 1D12  
                                       l2791 1D92                                         l2783 1D76  
                                       l2775 1D66                                         l2767 1D4A  
                                       l2759 1D30                                         l2793 1D92  
                                       l2785 1D7E                                         l2777 1D6A  
                                       l2769 1D4E                                         l2795 1D92  
                                       l2787 1D86                                         l2779 1D6E  
                                       l2797 1D92                                         l2789 1D8E  
                                       l2799 1D92                                         u1000 1462  
                                       u1001 145E                                         u1010 1476  
                                       u1011 1472                                         u1100 1C02  
                                       u1020 14FA                                         u1101 1BFE  
                                       u1021 14F6                                         u1030 2102  
                                       u1110 2388                                         u1031 20FE  
                                       u1111 2384                                         u1040 213C  
                                       u1200 0FE8                                         u1120 1C72  
                                       u1041 2138                                         u1201 0FE4  
                                       u1121 1C6E                                         u1050 1B2A  
                                       u1210 10A2                                         u1130 1CF6  
                                       u1051 1B26                                         u1211 109E  
                                       u1131 1CF2                                         u1140 2168  
                                       u1060 1B4C                                         u1220 1130  
                                       u1141 2164                                         u1061 1B48  
                                       u1221 112C                                         u1150 2186  
                                       u1070 1B86                                         u1230 115E  
                                       u1151 2182                                         u1071 1B82  
                                       u1231 115A                                         u1160 21A4  
                                       u1080 1BA8                                         u1161 21A0  
                                       u1081 1BA4                                         u1090 1BD0  
                                       u1170 0E12                                         u1091 1BCC  
                                       u1171 0E0E                                         u1411 1D1E  
                                       u1180 0E9C                                         u1420 1DA0  
                                       u1181 0E98                                         u1421 1D9C  
                                       u1190 0F12                                         u1191 0F0E  
                               _BAUD4CONbits 0EE9                                         u1507 0F64  
                                       u1517 0F94                                         u1437 1DB4  
                                       u1607 168E                                         u1527 0FC4  
                                       u1447 1CC4                                         u1617 1740  
                                       u1537 100A                                         u1457 0E34  
                                       _T2PR 0FBC                                         u1627 17AC  
                                       u1547 103A                                         u1467 0E64  
                                       u1637 1844                                         u1557 106A  
                                       u1477 0EBE                                         u1647 13C4  
                                       u1567 10C4                                         u1487 0EEE  
                                       u1657 1430                                         u1577 10F4  
                                       u1497 0F34                                         u1667 14C8  
                                       u1587 158A                                         u1677 1E60  
                                       u1597 15F6                                         u1687 2202  
                                       u1697 1F10                                         _main 1D12  
                                       _move 0E02                                         _wall 0000  
                                       fsr1h 0FE2                                         fsr2h 0FDA  
                                       indf1 0FE7                                         indf2 0FDF  
                                       fsr1l 0FE1                                         fsr2l 0FD9  
                                       btemp 0050                                         _stop 1C24  
                                       prodh 0FF4                                         prodl 0FF3  
                                       start 00B6                         ?i2_color_writetoaddr 0003  
                            __end_of_HighISR 00B6                                 ___param_bank 0000  
                            __end_of___aldiv 1C24                                        ?_main 0001  
                                      _ADPCH 0F5F                                        ?_move 002D  
                                      ?_stop 0021                              __end_of___lwdiv 20E4  
                                      i2l100 1FDE                                        i2l103 23D8  
                                      i2l312 240E                                        i2l152 22DC  
                                      i2l305 2374                                        i2l155 2302  
                                      i2l164 2462                                        i2l158 246C  
                                      i2l167 243A                                        i2l259 00AA  
                                      i2l298 234E                               ??_color_detect 0017  
                        ___lmul@multiplicand 0013                   __end_of_I2C_2_Master_Start 245A  
                 __end_of_I2C_2_Master_Write 2430                                   _Buggy_init 2226  
                                      ttemp5 0051                                        ttemp6 0054  
                                      ttemp7 0058                                        stop@i 0027  
                                      status 0FD8                                        wtemp8 0051  
                          color_detect@color 0017                        ??i2_color_writetoaddr 0004  
                      _I2C_2_Master_RepStart 243C                           putCharToRxBuf@byte 0001  
                            __initialization 225C                                 __end_of_main 1DEA  
                               __end_of_move 117C                                 __end_of_stop 1D12  
                        move@reverseDuration 0031                                       ??_main 0060  
                                     ??_move 0036                                       ??_stop 0024  
                              __activetblptr 0000                      __end_of_color_normalise 1B18  
                               ?_setMotorPWM 001C                                       _ADRESH 0F64  
                                     _CCPR1H 0FAA                                       _CCPR2H 0FA6  
                                     _CCPR3H 0F25                                       _CCPR4H 0F21  
                                     _RC0PPS 0E62                                       _RC4REG 0EE3  
                                     _RE2PPS 0E74                                       _RC7PPS 0E69  
                                     _RD5PPS 0E6F                                       _RE4PPS 0E76  
                                     _RD6PPS 0E70                                       i2l2051 22EC  
                                     i2l2071 2464                                       i2l2049 22DC  
                                     i2l2073 2468                                       i2l2081 2436  
                                     i2l2075 245A                                       i2l2077 245E  
                                     i2l2079 2432                                       i2l2345 23BC  
                                     i2l1761 2340                                       i2l2555 2350  
                                     i2l1763 234C                                       i2l2571 1F4E  
                                     i2l2557 2360                                       i2l1773 23F8  
                                     i2l1757 232C                                       i2l2581 1FB6  
                                     i2l2573 1F62                                       i2l2559 2364  
                                     i2l1759 233C                                       i2l2583 1FC0  
                                     i2l2575 1F7A                                       i2l2585 1FCA  
                                     i2l2577 1F9C                                       i2l2681 0044  
                                     i2l2587 1FD4                                       i2l2579 1FAC  
                                     i2l2691 007A                                       i2l2683 0048  
                                     i2l2675 000A                                       i2l2693 008A  
                                     i2l2685 004C                                       i2l2677 001A  
                                     i2l2695 0092                                       i2l2679 003E  
                                     i2l2687 0064                                       i2l2697 00A6  
                                     i2l2689 0074                                       _RG6PPS 0E88  
                                  ??_HighISR 000B                     __end_of_color_click_init 2226  
                                     _RX4PPS 0E15                                       _TX4REG 0EE4  
                               _CCPTMRS0bits 0FAD                             _getCharFromTxBuf 2350  
                                     ___lmul 20E4                                    ??___aldiv 0023  
                                     ___wmul 2304                                    ??___lwdiv 0019  
                         color_detect@RGBC_n 000F                                       clear_0 2262  
                                     clear_1 226E                                       clear_2 227A  
                                     isa$std 0001                                       move@mL 002D  
                                     move@mR 002E                                 __mediumconst 0000  
                                     stop@mL 0021                                       stop@mR 0022  
                                ?_Buggy_init 0001                            ??_initDCmotorsPWM 0011  
                 i2color_writetoaddr@address 0004                             __end_of_turnLeft 1882  
                      __end_of_isDataInTxBuf 2410                                   __accesstop 0060  
                    __end_of__initialization 2280                              fullSpeedAhead@i 0028  
                     ?_I2C_2_Master_RepStart 0001                                ___rparam_used 0001  
                       __end_of_color_detect 21AC                              _Interrupts_init 2410  
                             __pcstackCOMRAM 0001                                 ?_white_Light 0001  
               ?_color_clear_init_interrupts 0001                             _reverseOneSquare 1352  
                           ?_color_normalise 0029                                   __pbssBANK0 00A7  
                                 __pbssBANK1 0100                            _color_writetoaddr 239A  
                               _T2CLKCONbits 0FBF                           ?_color_writetoaddr 0011  
                                    ?___lmul 000F                                      ?___wmul 000F  
                             ___lmul@product 0017                ??_color_clear_init_interrupts 0013  
                        ??_color_writetoaddr 0012                                      _SP4BRGH 0EE6  
                                    _SP4BRGL 0EE5                                      i2u50_40 233C  
                                    i2u50_41 2338                   fullSpeedAhead@straightRamp 0024  
                                    i2u52_40 240C                                      i2u52_41 2406  
                                    i2u53_40 240E                                      i2u80_40 22EC  
                                    i2u80_41 22E8                                      i2u81_40 2302  
                                    i2u81_41 22FE                        turnRight@turnDuration 0024  
                                    _SSP2ADD 0ED6                                      _SSP2BUF 0ED5  
                                 _color_read 117C                      __end_of_Interrupts_init 2424  
                     color_writetoaddr@value 0011                                      _HighISR 0000  
                  __end_of_color_writetoaddr 23BA                                    _ADREFbits 0F58  
                         _I2C_2_Master_Start 2450                                   _initUSART4 23DA  
                        i2_I2C_2_Master_Idle 22DC                           _I2C_2_Master_Write 2424  
                                    __Hparam 0000                          i2_I2C_2_Master_Stop 245A  
                                    __Lparam 0000                                      ___aldiv 1B18  
                        ?_I2C_2_Master_Start 0001                                      ___lwdiv 2070  
                        ?_I2C_2_Master_Write 0001                                 __psmallconst 0E00  
                                    _ambient 0000                                      __pcinit 225C  
                                    __ramtop 0E00                                    ?_turnLeft 0021  
                                    __ptext0 1D12                                      __ptext1 2376  
                                    __ptext2 1C24                                      __ptext3 0E02  
                                    __ptext4 1516                                      __ptext5 16CC  
                                    __ptext6 1352                                      __ptext7 1DEA  
                                    __ptext8 1882                                      __ptext9 2304  
                       ?i2_I2C_2_Master_Idle 0001                                    _T2CONbits 0FBD  
                       ?i2_I2C_2_Master_Stop 0001                             ___aldiv@dividend 001B  
                                  _T2HLTbits 0FBE                                _RxBufWriteCnt 004F  
                   __end_of_getCharFromTxBuf 2376                                      main@buf 0062  
                       ??_I2C_2_Master_Start 0010                         ??_I2C_2_Master_Write 0010  
                      color_normalise@RGBC_n 0031                         end_of_initialization 2280  
            ??i2_color_clear_init_interrupts 0005                  __end_ofi2_color_writetoaddr 23DA  
                          reverseOneSquare@i 0029                            ?_color_click_init 0001  
                         ??_color_click_init 0019                             ___aldiv@quotient 0025  
                                    postdec2 0FDD                                      postinc0 0FEE  
                                    postinc2 0FDE                                   main@F14574 0100  
                            _initDCmotorsPWM 1FE0                                   ??_turnLeft 0026  
                                  _PORTFbits 0F8E                           setMotorPWM@negDuty 0020  
                      ??i2_I2C_2_Master_Idle 0001                                move@turnSpeed 0033  
                          __end_of_turnRight 16CC                        ??i2_I2C_2_Master_Stop 0002  
                                 main@RGBC_n 0060                                 _color_detect 214E  
                                  _TRISAbits 0F81                           setMotorPWM@posDuty 001F  
                                  _TRISBbits 0F82                                    _TRISCbits 0F83  
                                  _TRISDbits 0F84                                    _TRISEbits 0F85  
                                  _TRISFbits 0F86                                    _TRISGbits 0F87  
                                  _TRISHbits 0F88                             white_Light@state 000F  
                               ??_Buggy_init 000F                             fullSpeedAhead@mL 0021  
                           fullSpeedAhead@mR 0022                                  ?_color_read 0013  
                   color_writetoaddr@address 0012                      ??_I2C_2_Master_RepStart 0010  
                   __end_of_reverseOneSquare 1516                             ?_Interrupts_init 0001  
                              stop@cur_power 0029                                  _CCP1CONbits 0FAB  
                               _EUSART4RXbuf 0038                                 _EUSART4TXbuf 00A7  
                                _CCP2CONbits 0FA7                                  _CCP3CONbits 0F26  
                                ?_initUSART4 0001                                  _CCP4CONbits 0F22  
                                 main@motorL 009D                                   main@motorR 0093  
                             color_read@RGBC 0013                               _fullSpeedAhead 1DEA  
                             __end_of___lmul 214E                         turnLeft@turnDuration 0024  
                             __end_of___wmul 232A                           __end_of_Buggy_init 225C  
                        start_initialization 225C                                _TxBufWriteCnt 004D  
      __end_ofi2_color_clear_init_interrupts 1FE0                i2_color_clear_init_interrupts 1F4E  
                    __end_of_initDCmotorsPWM 2070                       __end_of_fullSpeedAhead 1EBC  
                         turnRight@cur_power 002B                                     ??___lmul 0017  
                                   ??___wmul 0013                               _putCharToRxBuf 232A  
                        color_normalise@RGBC 0029                i2I2C_2_Master_Write@data_byte 0002  
               reverseOneSquare@straightRamp 0025                 __end_ofi2_I2C_2_Master_Start 246E  
               __end_ofi2_I2C_2_Master_Write 243C                            turnLeft@cur_power 002B  
                                __pbssCOMRAM 0038                                __pcstackBANK0 0060  
                                   ?_HighISR 0001                             stop@straightRamp 0023  
                           ___lwdiv@dividend 0015                       __end_of_putCharToRxBuf 2350  
                            ?_fullSpeedAhead 0021                                    __pintcode 0000  
                                   ?___aldiv 001B                           turnRight@turnSpeed 0023  
                                   ?___lwdiv 0015                         I2C_2_Master_Read@ack 0011  
                       I2C_2_Master_Read@tmp 0012                                  __smallconst 0E00  
                          _I2C_2_Master_Idle 22B4                            _I2C_2_Master_Init 228A  
                          _I2C_2_Master_Read 21AC                            turnLeft@turnSpeed 0023  
                          _I2C_2_Master_Stop 2446                                 _RxBufReadCnt 004E  
                         ?_I2C_2_Master_Idle 0001                           ?_I2C_2_Master_Init 0001  
                         ?_I2C_2_Master_Read 0001                                ??_setMotorPWM 001D  
                         ?_I2C_2_Master_Stop 0001                             ___lwdiv@quotient 0019  
                   initDCmotorsPWM@PWMperiod 000F                            ?_getCharFromTxBuf 0001  
                         ??_getCharFromTxBuf 0001                            move@straightSpeed 0030  
                            ___aldiv@divisor 001F                          ??_I2C_2_Master_Idle 000F  
                            ___aldiv@counter 0023                          ??_I2C_2_Master_Init 000F  
                        ??_I2C_2_Master_Read 0010                               ___wmul@product 0013  
                                   _LATAbits 0F79                          ??_I2C_2_Master_Stop 0010  
                                   _LATCbits 0F7B                                _isDataInTxBuf 23F8  
                                   _LATDbits 0F7C                                     _LATEbits 0F7D  
                                   _LATFbits 0F7E                                     _LATGbits 0F7F  
                                   _LATHbits 0F80                                     _IPR0bits 0E1F  
                                   _PIE0bits 0E29                                     _PIE4bits 0E2D  
                                   i2u131_40 0074                                     i2u130_48 002E  
                                   i2u131_41 0070                                     i2u124_40 2360  
                                   i2u132_40 008A                                     i2u124_41 235C  
                                   i2u132_41 0086                                     i2u133_40 00A6  
                                   i2u133_41 00A2                                  turnRight@mL 0021  
                                turnRight@mR 0022                                     i2u128_40 001A  
                                   i2u128_41 0016                                     i2u129_40 002C  
                                   i2u129_41 0024                                     i2u170_47 0056  
                                   i2u171_47 1FA2                                     _PIR0bits 0E33  
                                   _PIR4bits 0E37                              ?_putCharToRxBuf 0001  
                           ?_initDCmotorsPWM 000F                  fullSpeedAhead@straightSpeed 0023  
        __end_of_color_clear_init_interrupts 1F4E               ?i2_color_clear_init_interrupts 0001  
                _color_clear_init_interrupts 1EBC                                     _SSP2CON2 0EDA  
                                   _SSP2STAT 0ED8                                 move@turnRamp 0035  
                                 _ADCON0bits 0F60                    __end_of_I2C_2_Master_Idle 22DC  
                  __end_of_I2C_2_Master_Init 22B4                    __end_of_I2C_2_Master_Read 21EE  
                          ___wmul@multiplier 000F                    __end_of_I2C_2_Master_Stop 2450  
   color_clear_init_interrupts@low_threshold 0017   i2color_clear_init_interrupts@low_threshold 0009  
                               setMotorPWM@m 001C                  I2C_2_Master_Write@data_byte 0010  
                               _TxBufReadCnt 004C                     i2color_writetoaddr@value 0003  
                                  _turnRight 1516                                 ??_color_read 0014  
                          ___lmul@multiplier 000F                               ?_isDataInTxBuf 0001  
              __end_of_I2C_2_Master_RepStart 2446                            ?_reverseOneSquare 0021  
                        __end_of_setMotorPWM 19D6                                 ??_initUSART4 000F  
                       i2_I2C_2_Master_Start 2464              reverseOneSquare@reverseDuration 0024  
                       i2_I2C_2_Master_Write 2430                           ??_reverseOneSquare 0026  
                                   __Hrparam 0000                            ??_color_normalise 0032  
                                   __Lrparam 0000                                ??_white_Light 000F  
                __end_ofi2_I2C_2_Master_Idle 2304                  __end_ofi2_I2C_2_Master_Stop 2464  
                         __end_of_color_read 1352                                   _ANSELBbits 0E9A  
                                 _ANSELDbits 0EA7                                   _ANSELFbits 0EB4  
              reverseOneSquare@straightSpeed 0023                              ___lwdiv@divisor 0017  
                         __end_of_initUSART4 23F8                              ___lwdiv@counter 001B  
                          turnRight@turnRamp 0025                                   ?_turnRight 0021  
                                   __ptext10 2070                                     __ptext11 23DA  
                                   __ptext20 21EE                                     __ptext12 1FE0  
                                   __ptext21 1EBC                                     __ptext13 117C  
                                   __ptext22 239A                                     __ptext14 243C  
                                   __ptext31 1F4E                                     __ptext23 2424  
                                   __ptext15 21AC                                     __ptext32 23BA  
                                   __ptext24 2446                                     __ptext16 19D6  
                                   __ptext33 2430                                     __ptext25 2450  
                                   __ptext17 20E4                                     __ptext34 245A  
                                   __ptext26 22B4                                     __ptext18 1B18  
                                   __ptext35 2464                                     __ptext27 228A  
                                   __ptext19 214E                                     __ptext36 22DC  
                                   __ptext28 2410                                     __ptext37 232A  
                                   __ptext29 2226                                     __ptext38 23F8  
                                   __ptext39 2350                                    move@color 002F  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                           turnLeft@turnRamp 0025                                   turnLeft@mL 0021  
                                 turnLeft@mR 0022                        ?i2_I2C_2_Master_Start 0001  
                           move@straightRamp 0032                        ?i2_I2C_2_Master_Write 0001  
                                 turnRight@i 0029                                     isa$xinst 0000  
                                 _RC4STAbits 0EE7                                     main@RGBC 008B  
                                   int$flags 0050                                     main@wall 008A  
                                   _turnLeft 16CC                      fullSpeedAhead@cur_power 002A  
                        __end_of_white_Light 239A                                   _INTCONbits 0FF2  
                  reverseOneSquare@cur_power 002B                           reverseOneSquare@mL 0021  
                         reverseOneSquare@mR 0022                             move@turnDuration 0034  
                                _setMotorPWM 1882                              ??_isDataInTxBuf 0001  
                                   intlevel2 0000                             ??_fullSpeedAhead 0025  
                                  turnLeft@i 0029                             _color_click_init 21EE  
                                 _SSP2DATPPS 0E1D                                   _SSP2CLKPPS 0E1C  
                               ___aldiv@sign 0024                                  ??_turnRight 0026  
                                 _TX4STAbits 0EE8                       ??i2_I2C_2_Master_Start 0002  
                     ??i2_I2C_2_Master_Write 0002                             ??_putCharToRxBuf 0001  
