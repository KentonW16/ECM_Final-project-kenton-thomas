

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 09 15:23:39 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 21/07/2023 GMT
    71                           ; 
    72                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F67K40 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     
   105                           	psect	idataCOMRAM
   106   003188                     __pidataCOMRAM:
   107                           	callstack 0
   108                           
   109                           ;initializer for _ambient
   110   003188  01F4               	dw	500
   111                           
   112                           	psect	idataBANK1
   113   003184                     __pidataBANK1:
   114                           	callstack 0
   115                           
   116                           ;initializer for main@F14601
   117   003184  01                 	db	1
   118   003185  03                 	db	3
   119   003186  02                 	db	2
   120   003187  08                 	db	8
   121   000000                     _TRISCbits	set	3971
   122   000000                     _RC4STAbits	set	3815
   123   000000                     _SP4BRGH	set	3814
   124   000000                     _SP4BRGL	set	3813
   125   000000                     _TX4STAbits	set	3816
   126   000000                     _BAUD4CONbits	set	3817
   127   000000                     _TX4REG	set	3812
   128   000000                     _TRISBbits	set	3970
   129   000000                     _TRISAbits	set	3969
   130   000000                     _TRISEbits	set	3973
   131   000000                     _TRISGbits	set	3975
   132   000000                     _LATFbits	set	3966
   133   000000                     _TRISFbits	set	3974
   134   000000                     _TRISHbits	set	3976
   135   000000                     _TRISDbits	set	3972
   136   000000                     _LATEbits	set	3965
   137   000000                     _LATGbits	set	3967
   138   000000                     _LATHbits	set	3968
   139   000000                     _SSP2CON2bits	set	3802
   140   000000                     _TMR0IF	set	29085
   141   000000                     _TMR0IE	set	29005
   142   000000                     _RX4PPS	set	3605
   143   000000                     _SSP2CLKPPS	set	3612
   144   000000                     _SSP2DATPPS	set	3613
   145   000000                     _PIE0bits	set	3625
   146   000000                     _CCPR4H	set	3873
   147   000000                     _CCPR3H	set	3877
   148   000000                     _CCPR2H	set	4006
   149   000000                     _CCPR1H	set	4010
   150   000000                     _CCP1CONbits	set	4011
   151   000000                     _CCPTMRS0bits	set	4013
   152   000000                     _T2PR	set	4028
   153   000000                     _T2CONbits	set	4029
   154   000000                     _INTCONbits	set	4082
   155   000000                     _CCP2CONbits	set	4007
   156   000000                     _CCP3CONbits	set	3878
   157   000000                     _ADREFbits	set	3928
   158   000000                     _LATAbits	set	3961
   159   000000                     _LATDbits	set	3964
   160   000000                     _PORTFbits	set	3982
   161   000000                     _CCP4CONbits	set	3874
   162   000000                     _PIE4bits	set	3629
   163   000000                     _RD5PPS	set	3695
   164   000000                     _ANSELDbits	set	3751
   165   000000                     _SSP2ADD	set	3798
   166   000000                     _SSP2CON1bits	set	3801
   167   000000                     _LATCbits	set	3963
   168   000000                     _RC4REG	set	3811
   169   000000                     _SSP2CON2	set	3802
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _RE2PPS	set	3700
   175   000000                     _ANSELBbits	set	3738
   176   000000                     _RD6PPS	set	3696
   177   000000                     _PIR0bits	set	3635
   178   000000                     _PIR4bits	set	3639
   179   000000                     _RC0PPS	set	3682
   180   000000                     _RC7PPS	set	3689
   181   000000                     _ADPCH	set	3935
   182   000000                     _ADRESH	set	3940
   183   000000                     _ADCON0bits	set	3936
   184   000000                     _RE4PPS	set	3702
   185   000000                     _RG6PPS	set	3720
   186   000000                     _TMR0L	set	4051
   187   000000                     _TMR0H	set	4052
   188   000000                     _T0CON0bits	set	4053
   189   000000                     _T0CON1bits	set	4054
   190   000000                     _T2CLKCONbits	set	4031
   191   000000                     _T2HLTbits	set	4030
   192                           
   193                           ; #config settings
   194                           
   195                           	psect	cinit
   196   002D44                     __pcinit:
   197                           	callstack 0
   198   002D44                     start_initialization:
   199                           	callstack 0
   200   002D44                     __initialization:
   201                           	callstack 0
   202                           
   203                           ; Initialize objects allocated to BANK1 (4 bytes)
   204                           ; load TBLPTR registers with __pidataBANK1
   205   002D44  0E84               	movlw	low __pidataBANK1
   206   002D46  6EF6               	movwf	tblptrl,c
   207   002D48  0E31               	movlw	high __pidataBANK1
   208   002D4A  6EF7               	movwf	tblptrh,c
   209   002D4C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   210   002D4E  6EF8               	movwf	tblptru,c
   211   002D50  EE01  F0FB         	lfsr	0,__pdataBANK1
   212   002D54  EE10 F004          	lfsr	1,4
   213   002D58                     copy_data0:
   214   002D58  0009               	tblrd		*+
   215   002D5A  CFF5 FFEE          	movff	tablat,postinc0
   216   002D5E  50E5               	movf	postdec1,w,c
   217   002D60  50E1               	movf	fsr1l,w,c
   218   002D62  E1FA               	bnz	copy_data0
   219                           
   220                           ; Initialize objects allocated to COMRAM (2 bytes)
   221                           ; load TBLPTR registers with __pidataCOMRAM
   222   002D64  0E88               	movlw	low __pidataCOMRAM
   223   002D66  6EF6               	movwf	tblptrl,c
   224   002D68  0E31               	movlw	high __pidataCOMRAM
   225   002D6A  6EF7               	movwf	tblptrh,c
   226   002D6C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   227   002D6E  6EF8               	movwf	tblptru,c
   228   002D70  0009               	tblrd		*+	;fetch initializer
   229   002D72  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   230   002D76  0009               	tblrd		*+	;fetch initializer
   231   002D78  CFF5 F04B          	movff	tablat,__pdataCOMRAM+1
   232                           
   233                           ; Clear objects allocated to BANK2 (82 bytes)
   234   002D7C  EE02  F000         	lfsr	0,__pbssBANK2
   235   002D80  0E52               	movlw	82
   236   002D82                     clear_0:
   237   002D82  6AEE               	clrf	postinc0,c
   238   002D84  06E8               	decf	wreg,f,c
   239   002D86  E1FD               	bnz	clear_0
   240                           
   241                           ; Clear objects allocated to BANK1 (41 bytes)
   242   002D88  EE01  F0D2         	lfsr	0,__pbssBANK1
   243   002D8C  0E29               	movlw	41
   244   002D8E                     clear_1:
   245   002D8E  6AEE               	clrf	postinc0,c
   246   002D90  06E8               	decf	wreg,f,c
   247   002D92  E1FD               	bnz	clear_1
   248                           
   249                           ; Clear objects allocated to BANK0 (120 bytes)
   250   002D94  EE00  F060         	lfsr	0,__pbssBANK0
   251   002D98  0E78               	movlw	120
   252   002D9A                     clear_2:
   253   002D9A  6AEE               	clrf	postinc0,c
   254   002D9C  06E8               	decf	wreg,f,c
   255   002D9E  E1FD               	bnz	clear_2
   256                           
   257                           ; Clear objects allocated to COMRAM (4 bytes)
   258   002DA0  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   259   002DA2  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   260   002DA4  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   261   002DA6  6A46               	clrf	__pbssCOMRAM& (0+255),c
   262   002DA8                     end_of_initialization:
   263                           	callstack 0
   264   002DA8                     __end_of__initialization:
   265                           	callstack 0
   266   002DA8  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267   002DAA  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268   002DAC  0100               	movlb	0
   269   002DAE  EF64  F00D         	goto	_main	;jump to C main() function
   270                           
   271                           	psect	bssCOMRAM
   272   000046                     __pbssCOMRAM:
   273                           	callstack 0
   274   000046                     _TxBufReadCnt:
   275                           	callstack 0
   276   000046                     	ds	1
   277   000047                     _TxBufWriteCnt:
   278                           	callstack 0
   279   000047                     	ds	1
   280   000048                     _RxBufReadCnt:
   281                           	callstack 0
   282   000048                     	ds	1
   283   000049                     _RxBufWriteCnt:
   284                           	callstack 0
   285   000049                     	ds	1
   286                           
   287                           	psect	dataCOMRAM
   288   00004A                     __pdataCOMRAM:
   289                           	callstack 0
   290   00004A                     _ambient:
   291                           	callstack 0
   292   00004A                     	ds	2
   293                           
   294                           	psect	bssBANK0
   295   000060                     __pbssBANK0:
   296                           	callstack 0
   297   000060                     _EUSART4TXbuf:
   298                           	callstack 0
   299   000060                     	ds	60
   300   00009C                     	ds	40
   301   0000C4                     _EUSART4RXbuf:
   302                           	callstack 0
   303   0000C4                     	ds	20
   304                           
   305                           	psect	bssBANK1
   306   0001D2                     __pbssBANK1:
   307                           	callstack 0
   308   0001D2                     	ds	40
   309   0001FA                     _wall:
   310                           	callstack 0
   311   0001FA                     	ds	1
   312                           
   313                           	psect	dataBANK1
   314   0001FB                     __pdataBANK1:
   315                           	callstack 0
   316   0001FB                     main@F14601:
   317                           	callstack 0
   318   0001FB                     	ds	4
   319                           
   320                           	psect	bssBANK2
   321   000200                     __pbssBANK2:
   322                           	callstack 0
   323   000200                     	ds	82
   324                           
   325                           	psect	cstackBANK1
   326   000100                     __pcstackBANK1:
   327                           	callstack 0
   328   000100                     main@buf:
   329                           	callstack 0
   330                           
   331                           ; 40 bytes @ 0x0
   332   000100                     	ds	40
   333   000128                     main@straightTime:
   334                           	callstack 0
   335                           
   336                           ; 82 bytes @ 0x28
   337   000128                     	ds	82
   338   00017A                     main@moveSequence:
   339                           	callstack 0
   340                           
   341                           ; 40 bytes @ 0x7A
   342   00017A                     	ds	40
   343   0001A2                     main@testSequence:
   344                           	callstack 0
   345                           
   346                           ; 4 bytes @ 0xA2
   347   0001A2                     	ds	4
   348   0001A6                     main@reverseDuration:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0xA6
   352   0001A6                     	ds	1
   353   0001A7                     main@turnSpeed:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0xA7
   357   0001A7                     	ds	1
   358   0001A8                     main@turnDuration:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0xA8
   362   0001A8                     	ds	1
   363   0001A9                     main@turnRamp:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0xA9
   367   0001A9                     	ds	1
   368   0001AA                     main@RGBC_n:
   369                           	callstack 0
   370                           
   371                           ; 8 bytes @ 0xAA
   372   0001AA                     	ds	8
   373   0001B2                     main@straightSpeed:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0xB2
   377   0001B2                     	ds	1
   378   0001B3                     main@color:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0xB3
   382   0001B3                     	ds	1
   383   0001B4                     main@straightRamp:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0xB4
   387   0001B4                     	ds	1
   388   0001B5                     main@curMove:
   389                           	callstack 0
   390                           
   391                           ; 1 bytes @ 0xB5
   392   0001B5                     	ds	1
   393   0001B6                     main@RGBC:
   394                           	callstack 0
   395                           
   396                           ; 8 bytes @ 0xB6
   397   0001B6                     	ds	8
   398   0001BE                     main@motorR:
   399                           	callstack 0
   400                           
   401                           ; 10 bytes @ 0xBE
   402   0001BE                     	ds	10
   403   0001C8                     main@motorL:
   404                           	callstack 0
   405                           
   406                           ; 10 bytes @ 0xC8
   407   0001C8                     	ds	10
   408                           
   409                           	psect	cstackBANK0
   410   0000D8                     __pcstackBANK0:
   411                           	callstack 0
   412   0000D8                     move@mL:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416   0000D8                     	ds	2
   417   0000DA                     move@mR:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421   0000DA                     	ds	2
   422   0000DC                     move@color:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x4
   426   0000DC                     	ds	1
   427   0000DD                     move@moveSequence:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x5
   431   0000DD                     	ds	2
   432   0000DF                     move@straightTime:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x7
   436   0000DF                     	ds	2
   437   0000E1                     move@curMove:
   438                           	callstack 0
   439                           
   440                           ; 1 bytes @ 0x9
   441   0000E1                     	ds	1
   442   0000E2                     move@straightSpeed:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0xA
   446   0000E2                     	ds	1
   447   0000E3                     move@reverseDuration:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0xB
   451   0000E3                     	ds	1
   452   0000E4                     move@straightRamp:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0xC
   456   0000E4                     	ds	1
   457   0000E5                     move@turnSpeed:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0xD
   461   0000E5                     	ds	1
   462   0000E6                     move@turnDuration:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0xE
   466   0000E6                     	ds	1
   467   0000E7                     move@turnRamp:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0xF
   471   0000E7                     	ds	1
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_getCharFromTxBuf:
   477   000001                     ??i2_I2C_2_Master_Idle:
   478   000001                     putCharToRxBuf@byte:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x0
   482   000001                     	ds	1
   483   000002                     i2I2C_2_Master_Write@data_byte:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487   000002                     	ds	1
   488   000003                     i2color_writetoaddr@value:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x2
   492   000003                     	ds	1
   493   000004                     i2color_writetoaddr@address:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0x3
   497   000004                     	ds	1
   498   000005                     ??i2_color_clear_init_interrupts:
   499                           
   500                           ; 1 bytes @ 0x4
   501   000005                     	ds	1
   502   000006                     i2color_clear_init_interrupts@high_threshold:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x5
   506   000006                     	ds	2
   507   000008                     i2color_clear_init_interrupts@low_threshold:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x7
   511   000008                     	ds	2
   512   00000A                     ??_HighISR:
   513                           
   514                           ; 1 bytes @ 0x9
   515   00000A                     	ds	3
   516   00000D                     ??_I2C_2_Master_Idle:
   517   00000D                     ?_get16bitTMR0val:
   518                           	callstack 0
   519   00000D                     ?___wmul:
   520                           	callstack 0
   521   00000D                     ?___awdiv:
   522                           	callstack 0
   523   00000D                     ?___lmul:
   524                           	callstack 0
   525   00000D                     white_Light@state:
   526                           	callstack 0
   527   00000D                     ADC_getval@tmpval:
   528                           	callstack 0
   529   00000D                     initDCmotorsPWM@PWMperiod:
   530                           	callstack 0
   531   00000D                     ___wmul@multiplier:
   532                           	callstack 0
   533   00000D                     ___awdiv@dividend:
   534                           	callstack 0
   535   00000D                     ___lmul@multiplier:
   536                           	callstack 0
   537                           
   538                           ; 4 bytes @ 0xC
   539   00000D                     	ds	1
   540   00000E                     ??_I2C_2_Master_Read:
   541   00000E                     I2C_2_Master_Write@data_byte:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0xD
   545   00000E                     	ds	1
   546   00000F                     ??_get16bitTMR0val:
   547   00000F                     color_writetoaddr@value:
   548                           	callstack 0
   549   00000F                     I2C_2_Master_Read@ack:
   550                           	callstack 0
   551   00000F                     ___wmul@multiplicand:
   552                           	callstack 0
   553   00000F                     ___awdiv@divisor:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0xE
   557   00000F                     	ds	1
   558   000010                     color_writetoaddr@address:
   559                           	callstack 0
   560   000010                     I2C_2_Master_Read@tmp:
   561                           	callstack 0
   562                           
   563                           ; 1 bytes @ 0xF
   564   000010                     	ds	1
   565   000011                     ??_color_clear_init_interrupts:
   566   000011                     ___awdiv@counter:
   567                           	callstack 0
   568   000011                     color_read@RGBC:
   569                           	callstack 0
   570   000011                     get16bitTMR0val@timer_low:
   571                           	callstack 0
   572   000011                     ___wmul@product:
   573                           	callstack 0
   574   000011                     ___lmul@multiplicand:
   575                           	callstack 0
   576                           
   577                           ; 4 bytes @ 0x10
   578   000011                     	ds	1
   579   000012                     ___awdiv@sign:
   580                           	callstack 0
   581   000012                     color_clear_init_interrupts@high_threshold:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0x11
   585   000012                     	ds	1
   586   000013                     ??_color_read:
   587   000013                     ?___lwdiv:
   588                           	callstack 0
   589   000013                     get16bitTMR0val@timer_high:
   590                           	callstack 0
   591   000013                     ___awdiv@quotient:
   592                           	callstack 0
   593   000013                     ___lwdiv@dividend:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x12
   597   000013                     	ds	1
   598   000014                     color_clear_init_interrupts@low_threshold:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x13
   602   000014                     	ds	1
   603   000015                     batteryLevel@batteryVoltage:
   604                           	callstack 0
   605   000015                     get16bitTMR0val@timer_val:
   606                           	callstack 0
   607   000015                     ___lwdiv@divisor:
   608                           	callstack 0
   609   000015                     ___lmul@product:
   610                           	callstack 0
   611                           
   612                           ; 4 bytes @ 0x14
   613   000015                     	ds	1
   614   000016                     ??_color_click_init:
   615   000016                     batteryLevel@batteryQuarter:
   616                           	callstack 0
   617                           
   618                           ; 1 bytes @ 0x15
   619   000016                     	ds	1
   620   000017                     ___lwdiv@quotient:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624   000017                     	ds	2
   625   000019                     ?___aldiv:
   626                           	callstack 0
   627   000019                     ___lwdiv@counter:
   628                           	callstack 0
   629   000019                     ___aldiv@dividend:
   630                           	callstack 0
   631                           
   632                           ; 4 bytes @ 0x18
   633   000019                     	ds	1
   634   00001A                     setMotorPWM@m:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x19
   638   00001A                     	ds	2
   639   00001C                     ??_setMotorPWM:
   640                           
   641                           ; 1 bytes @ 0x1B
   642   00001C                     	ds	1
   643   00001D                     ___aldiv@divisor:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x1C
   647   00001D                     	ds	1
   648   00001E                     setMotorPWM@posDuty:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x1D
   652   00001E                     	ds	1
   653   00001F                     setMotorPWM@negDuty:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x1E
   657   00001F                     	ds	1
   658   000020                     stop@mL:
   659                           	callstack 0
   660   000020                     turnLeft@mL:
   661                           	callstack 0
   662   000020                     turnRight@mL:
   663                           	callstack 0
   664   000020                     fullSpeedAhead@mL:
   665                           	callstack 0
   666   000020                     reverseOneSquare@mL:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x1F
   670   000020                     	ds	1
   671   000021                     ___aldiv@counter:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x20
   675   000021                     	ds	1
   676   000022                     ___aldiv@sign:
   677                           	callstack 0
   678   000022                     stop@mR:
   679                           	callstack 0
   680   000022                     turnLeft@mR:
   681                           	callstack 0
   682   000022                     turnRight@mR:
   683                           	callstack 0
   684   000022                     fullSpeedAhead@mR:
   685                           	callstack 0
   686   000022                     reverseOneSquare@mR:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x21
   690   000022                     	ds	1
   691   000023                     ___aldiv@quotient:
   692                           	callstack 0
   693                           
   694                           ; 4 bytes @ 0x22
   695   000023                     	ds	1
   696   000024                     stop@straightRamp:
   697                           	callstack 0
   698   000024                     turnLeft@turnSpeed:
   699                           	callstack 0
   700   000024                     turnRight@turnSpeed:
   701                           	callstack 0
   702   000024                     fullSpeedAhead@straightSpeed:
   703                           	callstack 0
   704   000024                     reverseOneSquare@straightSpeed:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x23
   708   000024                     	ds	1
   709   000025                     ??_stop:
   710   000025                     turnLeft@turnDuration:
   711                           	callstack 0
   712   000025                     turnRight@turnDuration:
   713                           	callstack 0
   714   000025                     fullSpeedAhead@straightRamp:
   715                           	callstack 0
   716   000025                     reverseOneSquare@reverseDuration:
   717                           	callstack 0
   718                           
   719                           ; 1 bytes @ 0x24
   720   000025                     	ds	1
   721   000026                     ??_fullSpeedAhead:
   722   000026                     turnLeft@turnRamp:
   723                           	callstack 0
   724   000026                     turnRight@turnRamp:
   725                           	callstack 0
   726   000026                     reverseOneSquare@straightRamp:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x25
   730   000026                     	ds	1
   731   000027                     ??_turnRight:
   732   000027                     ??_turnLeft:
   733   000027                     ??_reverseOneSquare:
   734   000027                     color_normalise@RGBC:
   735                           	callstack 0
   736                           
   737                           ; 8 bytes @ 0x26
   738   000027                     	ds	1
   739   000028                     stop@i:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x27
   743   000028                     	ds	1
   744   000029                     fullSpeedAhead@i:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x28
   748   000029                     	ds	1
   749   00002A                     stop@cur_power:
   750                           	callstack 0
   751   00002A                     turnLeft@i:
   752                           	callstack 0
   753   00002A                     turnRight@i:
   754                           	callstack 0
   755   00002A                     reverseOneSquare@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x29
   759   00002A                     	ds	1
   760   00002B                     fullSpeedAhead@cur_power:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x2A
   764   00002B                     	ds	1
   765   00002C                     turnLeft@cur_power:
   766                           	callstack 0
   767   00002C                     turnRight@cur_power:
   768                           	callstack 0
   769   00002C                     reverseOneSquare@cur_power:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x2B
   773   00002C                     	ds	2
   774   00002E                     returnHome@mL:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x2D
   778   00002E                     	ds	1
   779   00002F                     color_normalise@RGBC_n:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x2E
   783   00002F                     	ds	1
   784   000030                     returnHome@mR:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x2F
   788   000030                     	ds	1
   789   000031                     ??_color_normalise:
   790                           
   791                           ; 1 bytes @ 0x30
   792   000031                     	ds	1
   793   000032                     returnHome@moveSequence:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x31
   797   000032                     	ds	2
   798   000034                     returnHome@straightTime:
   799                           	callstack 0
   800                           
   801                           ; 2 bytes @ 0x33
   802   000034                     	ds	2
   803   000036                     returnHome@curMove:
   804                           	callstack 0
   805                           
   806                           ; 1 bytes @ 0x35
   807   000036                     	ds	1
   808   000037                     returnHome@straightSpeed:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0x36
   812   000037                     	ds	1
   813   000038                     returnHome@reverseDuration:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x37
   817   000038                     	ds	1
   818   000039                     returnHome@straightRamp:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x38
   822   000039                     	ds	1
   823   00003A                     returnHome@turnSpeed:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x39
   827   00003A                     	ds	1
   828   00003B                     returnHome@turnDuration:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x3A
   832   00003B                     	ds	1
   833   00003C                     returnHome@turnRamp:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x3B
   837   00003C                     	ds	1
   838   00003D                     ??_returnHome:
   839                           
   840                           ; 1 bytes @ 0x3C
   841   00003D                     	ds	4
   842   000041                     returnHome@i:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x40
   846   000041                     	ds	1
   847   000042                     ??_move:
   848                           
   849                           ; 1 bytes @ 0x41
   850   000042                     	ds	2
   851   000044                     ??_main:
   852                           
   853                           ; 1 bytes @ 0x43
   854   000044                     	ds	2
   855                           
   856 ;;
   857 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   858 ;;
   859 ;; *************** function _main *****************
   860 ;; Defined at:
   861 ;;		line 27 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  straightTime   82   40[BANK1 ] unsigned int [41]
   866 ;;  moveSequence   40  122[BANK1 ] unsigned char [40]
   867 ;;  buf            40    0[BANK1 ] unsigned char [40]
   868 ;;  motorL         10  200[BANK1 ] struct DC_motor
   869 ;;  motorR         10  190[BANK1 ] struct DC_motor
   870 ;;  RGBC            8  182[BANK1 ] struct RGBC_val
   871 ;;  RGBC_n          8  170[BANK1 ] struct RGBC_val
   872 ;;  testSequence    4  162[BANK1 ] unsigned char [4]
   873 ;;  PWMcycle        2    0        unsigned int 
   874 ;;  curMove         1  181[BANK1 ] unsigned char 
   875 ;;  straightRamp    1  180[BANK1 ] unsigned char 
   876 ;;  color           1  179[BANK1 ] unsigned char 
   877 ;;  straightSpee    1  178[BANK1 ] unsigned char 
   878 ;;  turnRamp        1  169[BANK1 ] unsigned char 
   879 ;;  turnDuration    1  168[BANK1 ] unsigned char 
   880 ;;  turnSpeed       1  167[BANK1 ] unsigned char 
   881 ;;  reverseDurat    1  166[BANK1 ] unsigned char 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Locals:         0       0     210       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   894 ;;      Totals:         2       0     210       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;Total ram usage:      212 bytes
   896 ;; Hardware stack levels required when called: 10
   897 ;; This function calls:
   898 ;;		_Buggy_init
   899 ;;		_Interrupts_init
   900 ;;		_Timer0_init
   901 ;;		_batteryLevel
   902 ;;		_color_click_init
   903 ;;		_color_normalise
   904 ;;		_color_read
   905 ;;		_fullSpeedAhead
   906 ;;		_get16bitTMR0val
   907 ;;		_initDCmotorsPWM
   908 ;;		_initUSART4
   909 ;;		_move
   910 ;;		_resetTimer
   911 ;;		_stop
   912 ;;		_white_Light
   913 ;; This function is called by:
   914 ;;		Startup code after reset
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text0
   919   001AC8                     __ptext0:
   920                           	callstack 0
   921   001AC8                     _main:
   922                           	callstack 21
   923   001AC8                     
   924                           ;main.c: 29:     char buf[40] = {0};
   925   001AC8  EE21  F000         	lfsr	2,main@buf
   926   001ACC  0E27               	movlw	39
   927   001ACE                     u2021:
   928   001ACE  6ADE               	clrf	postinc2,c
   929   001AD0  06E8               	decf	wreg,f,c
   930   001AD2  E2FD               	bc	u2021
   931   001AD4                     
   932                           ;main.c: 31:     unsigned char color;;main.c: 32:     unsigned char moveSequence[40] = {
      +                          0};
   933   001AD4  EE21  F07A         	lfsr	2,main@moveSequence
   934   001AD8  0E27               	movlw	39
   935   001ADA                     u2031:
   936   001ADA  6ADE               	clrf	postinc2,c
   937   001ADC  06E8               	decf	wreg,f,c
   938   001ADE  E2FD               	bc	u2031
   939   001AE0                     
   940                           ;main.c: 33:     unsigned int straightTime[41] = {0};
   941   001AE0  EE21  F028         	lfsr	2,main@straightTime
   942   001AE4  0E51               	movlw	81
   943   001AE6                     u2041:
   944   001AE6  6ADE               	clrf	postinc2,c
   945   001AE8  06E8               	decf	wreg,f,c
   946   001AEA  E2FD               	bc	u2041
   947   001AEC                     
   948                           ;main.c: 34:     unsigned char curMove = 0;
   949   001AEC  0E00               	movlw	0
   950   001AEE  0101               	movlb	1	; () banked
   951   001AF0  6FB5               	movwf	main@curMove& (0+255),b
   952   001AF2                     
   953                           ; BSR set to: 1
   954                           ;main.c: 36:     unsigned char testSequence[4] = {1,3,2,8};
   955   001AF2  C1FB  F1A2         	movff	main@F14601,main@testSequence
   956   001AF6  C1FC  F1A3         	movff	main@F14601+1,main@testSequence+1
   957   001AFA  C1FD  F1A4         	movff	main@F14601+2,main@testSequence+2
   958   001AFE  C1FE  F1A5         	movff	main@F14601+3,main@testSequence+3
   959   001B02                     
   960                           ; BSR set to: 1
   961                           ;main.c: 39:     struct RGBC_val RGBC, RGBC_n;;main.c: 40:     struct DC_motor motorL, m
      +                          otorR;;main.c: 43:     Buggy_init();
   962   001B02  EC72  F017         	call	_Buggy_init	;wreg free
   963   001B06                     
   964                           ;main.c: 44:     color_click_init();
   965   001B06  EC56  F017         	call	_color_click_init	;wreg free
   966   001B0A                     
   967                           ;main.c: 45:     Timer0_init();
   968   001B0A  EC39  F018         	call	_Timer0_init	;wreg free
   969   001B0E                     
   970                           ;main.c: 46:     Interrupts_init();
   971   001B0E  EC8D  F018         	call	_Interrupts_init	;wreg free
   972   001B12                     
   973                           ;main.c: 47:     initUSART4();
   974   001B12  EC59  F018         	call	_initUSART4	;wreg free
   975   001B16                     
   976                           ;main.c: 48:     initDCmotorsPWM(PWMcycle);
   977   001B16  0E00               	movlw	0
   978   001B18  6E0E               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   979   001B1A  0EC7               	movlw	199
   980   001B1C  6E0D               	movwf	initDCmotorsPWM@PWMperiod^0,c
   981   001B1E  ECA6  F015         	call	_initDCmotorsPWM	;wreg free
   982   001B22                     
   983                           ;main.c: 50:     motorL.power=0;
   984   001B22  0E00               	movlw	0
   985   001B24  0101               	movlb	1	; () banked
   986   001B26  6FC8               	movwf	main@motorL& (0+255),b
   987   001B28                     
   988                           ; BSR set to: 1
   989                           ;main.c: 51:     motorL.direction=1;
   990   001B28  0E01               	movlw	1
   991   001B2A  6FC9               	movwf	(main@motorL+1)& (0+255),b
   992   001B2C                     
   993                           ; BSR set to: 1
   994                           ;main.c: 52:     motorL.brakemode=1;
   995   001B2C  0E01               	movlw	1
   996   001B2E  6FCA               	movwf	(main@motorL+2)& (0+255),b
   997   001B30                     
   998                           ; BSR set to: 1
   999                           ;main.c: 53:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1000   001B30  0EAA               	movlw	170
  1001   001B32  6FCD               	movwf	(main@motorL+5)& (0+255),b
  1002   001B34  0E0F               	movlw	15
  1003   001B36  6FCE               	movwf	(main@motorL+6)& (0+255),b
  1004   001B38                     
  1005                           ; BSR set to: 1
  1006                           ;main.c: 54:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1007   001B38  0EA6               	movlw	166
  1008   001B3A  6FCF               	movwf	(main@motorL+7)& (0+255),b
  1009   001B3C  0E0F               	movlw	15
  1010   001B3E  6FD0               	movwf	(main@motorL+8)& (0+255),b
  1011   001B40                     
  1012                           ; BSR set to: 1
  1013                           ;main.c: 55:     motorL.PWMperiod=PWMcycle;
  1014   001B40  0E00               	movlw	0
  1015   001B42  6FCC               	movwf	(main@motorL+4)& (0+255),b
  1016   001B44  0EC7               	movlw	199
  1017   001B46  6FCB               	movwf	(main@motorL+3)& (0+255),b
  1018   001B48                     
  1019                           ; BSR set to: 1
  1020                           ;main.c: 56:     motorL.compensation=3;
  1021   001B48  0E03               	movlw	3
  1022   001B4A  6FD1               	movwf	(main@motorL+9)& (0+255),b
  1023   001B4C                     
  1024                           ; BSR set to: 1
  1025                           ;main.c: 58:     motorR.power=0;
  1026   001B4C  0E00               	movlw	0
  1027   001B4E  6FBE               	movwf	main@motorR& (0+255),b
  1028   001B50                     
  1029                           ; BSR set to: 1
  1030                           ;main.c: 59:     motorR.direction=1;
  1031   001B50  0E01               	movlw	1
  1032   001B52  6FBF               	movwf	(main@motorR+1)& (0+255),b
  1033   001B54                     
  1034                           ; BSR set to: 1
  1035                           ;main.c: 60:     motorR.brakemode=1;
  1036   001B54  0E01               	movlw	1
  1037   001B56  6FC0               	movwf	(main@motorR+2)& (0+255),b
  1038   001B58                     
  1039                           ; BSR set to: 1
  1040                           ;main.c: 61:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1041   001B58  0E25               	movlw	37
  1042   001B5A  6FC3               	movwf	(main@motorR+5)& (0+255),b
  1043   001B5C  0E0F               	movlw	15
  1044   001B5E  6FC4               	movwf	(main@motorR+6)& (0+255),b
  1045   001B60                     
  1046                           ; BSR set to: 1
  1047                           ;main.c: 62:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1048   001B60  0E21               	movlw	33
  1049   001B62  6FC5               	movwf	(main@motorR+7)& (0+255),b
  1050   001B64  0E0F               	movlw	15
  1051   001B66  6FC6               	movwf	(main@motorR+8)& (0+255),b
  1052   001B68                     
  1053                           ; BSR set to: 1
  1054                           ;main.c: 63:     motorR.PWMperiod=PWMcycle;
  1055   001B68  0E00               	movlw	0
  1056   001B6A  6FC2               	movwf	(main@motorR+4)& (0+255),b
  1057   001B6C  0EC7               	movlw	199
  1058   001B6E  6FC1               	movwf	(main@motorR+3)& (0+255),b
  1059   001B70                     
  1060                           ; BSR set to: 1
  1061                           ;main.c: 64:     motorR.compensation=0;
  1062   001B70  0E00               	movlw	0
  1063   001B72  6FC7               	movwf	(main@motorR+9)& (0+255),b
  1064   001B74                     
  1065                           ; BSR set to: 1
  1066                           ;main.c: 67:     char straightSpeed=25;
  1067   001B74  0E19               	movlw	25
  1068   001B76  6FB2               	movwf	main@straightSpeed& (0+255),b
  1069   001B78                     
  1070                           ; BSR set to: 1
  1071                           ;main.c: 68:     unsigned char straightRamp=2;
  1072   001B78  0E02               	movlw	2
  1073   001B7A  6FB4               	movwf	main@straightRamp& (0+255),b
  1074   001B7C                     
  1075                           ; BSR set to: 1
  1076                           ;main.c: 70:     unsigned char reverseDuration=10;
  1077   001B7C  0E0A               	movlw	10
  1078   001B7E  6FA6               	movwf	main@reverseDuration& (0+255),b
  1079   001B80                     
  1080                           ; BSR set to: 1
  1081                           ;main.c: 72:     char turnSpeed=21;
  1082   001B80  0E15               	movlw	21
  1083   001B82  6FA7               	movwf	main@turnSpeed& (0+255),b
  1084   001B84                     
  1085                           ; BSR set to: 1
  1086                           ;main.c: 73:     unsigned char turnDuration=10;
  1087   001B84  0E0A               	movlw	10
  1088   001B86  6FA8               	movwf	main@turnDuration& (0+255),b
  1089   001B88                     
  1090                           ; BSR set to: 1
  1091                           ;main.c: 74:     unsigned char turnRamp=4;
  1092   001B88  0E04               	movlw	4
  1093   001B8A  6FA9               	movwf	main@turnRamp& (0+255),b
  1094   001B8C                     
  1095                           ; BSR set to: 1
  1096                           ;main.c: 77:     batteryLevel();
  1097   001B8C  EC0E  F017         	call	_batteryLevel	;wreg free
  1098   001B90                     l79:
  1099   001B90  B48E               	btfsc	142,2,c	;volatile
  1100   001B92  EFCD  F00D         	goto	u2051
  1101   001B96  EFCF  F00D         	goto	u2050
  1102   001B9A                     u2051:
  1103   001B9A  EFC8  F00D         	goto	l79
  1104   001B9E                     u2050:
  1105   001B9E                     
  1106                           ;main.c: 81:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1107   001B9E  9680               	bcf	128,3,c	;volatile
  1108   001BA0  9E7C               	bcf	124,7,c	;volatile
  1109                           
  1110                           ;main.c: 104:     LATHbits.LATH1=LATDbits.LATD3=1;
  1111   001BA2  867C               	bsf	124,3,c	;volatile
  1112   001BA4  8280               	bsf	128,1,c	;volatile
  1113   001BA6                     
  1114                           ;main.c: 105:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1115   001BA6  0E29               	movlw	41
  1116   001BA8  6E45               	movwf	(??_main+1)^0,c
  1117   001BAA  0E96               	movlw	150
  1118   001BAC  6E44               	movwf	??_main^0,c
  1119   001BAE  0E7F               	movlw	127
  1120   001BB0                     u2117:
  1121   001BB0  2EE8               	decfsz	wreg,f,c
  1122   001BB2  D7FE               	bra	u2117
  1123   001BB4  2E44               	decfsz	??_main^0,f,c
  1124   001BB6  D7FC               	bra	u2117
  1125   001BB8  2E45               	decfsz	(??_main+1)^0,f,c
  1126   001BBA  D7FA               	bra	u2117
  1127   001BBC  0000               	nop	
  1128   001BBE                     
  1129                           ;main.c: 111:     white_Light(1);
  1130   001BBE  0E01               	movlw	1
  1131   001BC0  EC17  F018         	call	_white_Light
  1132   001BC4                     
  1133                           ;main.c: 112:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1134   001BC4  0E11               	movlw	17
  1135   001BC6  6E45               	movwf	(??_main+1)^0,c
  1136   001BC8  0E3C               	movlw	60
  1137   001BCA  6E44               	movwf	??_main^0,c
  1138   001BCC  0ECB               	movlw	203
  1139   001BCE                     u2127:
  1140   001BCE  2EE8               	decfsz	wreg,f,c
  1141   001BD0  D7FE               	bra	u2127
  1142   001BD2  2E44               	decfsz	??_main^0,f,c
  1143   001BD4  D7FC               	bra	u2127
  1144   001BD6  2E45               	decfsz	(??_main+1)^0,f,c
  1145   001BD8  D7FA               	bra	u2127
  1146   001BDA  0000               	nop	
  1147   001BDC                     
  1148                           ;main.c: 115:     color_read(&RGBC);
  1149   001BDC  0EB6               	movlw	low main@RGBC
  1150   001BDE  6E11               	movwf	color_read@RGBC^0,c
  1151   001BE0  0E01               	movlw	high main@RGBC
  1152   001BE2  6E12               	movwf	(color_read@RGBC+1)^0,c
  1153   001BE4  ECA4  F00E         	call	_color_read	;wreg free
  1154   001BE8                     
  1155                           ;main.c: 116:     ambient=RGBC.C;
  1156   001BE8  C1BC  F04A         	movff	main@RGBC+6,_ambient
  1157   001BEC  C1BD  F04B         	movff	main@RGBC+7,_ambient+1
  1158   001BF0                     
  1159                           ;main.c: 117:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1160   001BF0  0E29               	movlw	41
  1161   001BF2  6E45               	movwf	(??_main+1)^0,c
  1162   001BF4  0E96               	movlw	150
  1163   001BF6  6E44               	movwf	??_main^0,c
  1164   001BF8  0E7F               	movlw	127
  1165   001BFA                     u2137:
  1166   001BFA  2EE8               	decfsz	wreg,f,c
  1167   001BFC  D7FE               	bra	u2137
  1168   001BFE  2E44               	decfsz	??_main^0,f,c
  1169   001C00  D7FC               	bra	u2137
  1170   001C02  2E45               	decfsz	(??_main+1)^0,f,c
  1171   001C04  D7FA               	bra	u2137
  1172   001C06  0000               	nop	
  1173   001C08                     
  1174                           ;main.c: 119:     wall=0;
  1175   001C08  0E00               	movlw	0
  1176   001C0A  0101               	movlb	1	; () banked
  1177   001C0C  6FFA               	movwf	_wall& (0+255),b
  1178   001C0E                     
  1179                           ; BSR set to: 1
  1180                           ;main.c: 120:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1181   001C0E  0EC8               	movlw	low main@motorL
  1182   001C10  6E20               	movwf	fullSpeedAhead@mL^0,c
  1183   001C12  0E01               	movlw	high main@motorL
  1184   001C14  6E21               	movwf	(fullSpeedAhead@mL+1)^0,c
  1185   001C16  0EBE               	movlw	low main@motorR
  1186   001C18  6E22               	movwf	fullSpeedAhead@mR^0,c
  1187   001C1A  0E01               	movlw	high main@motorR
  1188   001C1C  6E23               	movwf	(fullSpeedAhead@mR+1)^0,c
  1189   001C1E  0E19               	movlw	25
  1190   001C20  6E24               	movwf	fullSpeedAhead@straightSpeed^0,c
  1191   001C22  0E02               	movlw	2
  1192   001C24  6E25               	movwf	fullSpeedAhead@straightRamp^0,c
  1193   001C26  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1194   001C2A                     l3430:
  1195                           
  1196                           ;main.c: 123:         if (wall == 1) {
  1197   001C2A  0101               	movlb	1	; () banked
  1198   001C2C  05FA               	decf	_wall& (0+255),w,b
  1199   001C2E  A4D8               	btfss	status,2,c
  1200   001C30  EF1C  F00E         	goto	u2061
  1201   001C34  EF1E  F00E         	goto	u2060
  1202   001C38                     u2061:
  1203   001C38  EF99  F00E         	goto	l3454
  1204   001C3C                     u2060:
  1205   001C3C                     
  1206                           ; BSR set to: 1
  1207                           ;main.c: 124:             PIE0bits.INT0IE=TMR0IE=0;
  1208   001C3C  010E               	movlb	14	; () banked
  1209   001C3E  9B29               	bcf	41,5,b	;volatile
  1210   001C40  AB29               	btfss	41,5,b	;volatile
  1211   001C42  D002               	bra	u2075
  1212   001C44  8129               	bsf	41,0,b	;volatile
  1213   001C46  D002               	bra	u2077
  1214   001C48                     u2075:
  1215   001C48  010E               	movlb	14	; () banked
  1216   001C4A  9129               	bcf	41,0,b	;volatile
  1217   001C4C                     u2077:
  1218   001C4C                     
  1219                           ; BSR set to: 14
  1220                           ;main.c: 126:             straightTime[curMove] = get16bitTMR0val();
  1221   001C4C  ECA2  F017         	call	_get16bitTMR0val	;wreg free
  1222   001C50  0101               	movlb	1	; () banked
  1223   001C52  51B5               	movf	main@curMove& (0+255),w,b
  1224   001C54  0D02               	mullw	2
  1225   001C56  0E28               	movlw	low main@straightTime
  1226   001C58  24F3               	addwf	243,w,c
  1227   001C5A  6ED9               	movwf	fsr2l,c
  1228   001C5C  0E01               	movlw	high main@straightTime
  1229   001C5E  20F4               	addwfc	prodh,w,c
  1230   001C60  6EDA               	movwf	fsr2h,c
  1231   001C62  C00D  FFDE         	movff	?_get16bitTMR0val,postinc2
  1232   001C66  C00E  FFDD         	movff	?_get16bitTMR0val+1,postdec2
  1233                           
  1234                           ;main.c: 129:             stop(&motorL, &motorR, straightRamp);
  1235   001C6A  0EC8               	movlw	low main@motorL
  1236   001C6C  6E20               	movwf	stop@mL^0,c
  1237   001C6E  0E01               	movlw	high main@motorL
  1238   001C70  6E21               	movwf	(stop@mL+1)^0,c
  1239   001C72  0EBE               	movlw	low main@motorR
  1240   001C74  6E22               	movwf	stop@mR^0,c
  1241   001C76  0E01               	movlw	high main@motorR
  1242   001C78  6E23               	movwf	(stop@mR+1)^0,c
  1243   001C7A  C1B4  F024         	movff	main@straightRamp,stop@straightRamp
  1244   001C7E  EC4C  F014         	call	_stop	;wreg free
  1245   001C82                     
  1246                           ;main.c: 130:             color_read(&RGBC);
  1247   001C82  0EB6               	movlw	low main@RGBC
  1248   001C84  6E11               	movwf	color_read@RGBC^0,c
  1249   001C86  0E01               	movlw	high main@RGBC
  1250   001C88  6E12               	movwf	(color_read@RGBC+1)^0,c
  1251   001C8A  ECA4  F00E         	call	_color_read	;wreg free
  1252   001C8E                     
  1253                           ;main.c: 131:             color_normalise(RGBC, &RGBC_n);
  1254   001C8E  EE21  F0B6         	lfsr	2,main@RGBC
  1255   001C92  EE00  F027         	lfsr	0,color_normalise@RGBC
  1256   001C96  0E07               	movlw	7
  1257   001C98                     u2081:
  1258   001C98  CFDB FFEB          	movff	plusw2,plusw0
  1259   001C9C  06E8               	decf	wreg,f,c
  1260   001C9E  E2FC               	bc	u2081
  1261   001CA0  0EAA               	movlw	low main@RGBC_n
  1262   001CA2  6E2F               	movwf	color_normalise@RGBC_n^0,c
  1263   001CA4  0E01               	movlw	high main@RGBC_n
  1264   001CA6  6E30               	movwf	(color_normalise@RGBC_n+1)^0,c
  1265   001CA8  EC21  F013         	call	_color_normalise	;wreg free
  1266   001CAC                     
  1267                           ;main.c: 133:             color = testSequence[curMove];
  1268   001CAC  0EA2               	movlw	low main@testSequence
  1269   001CAE  0101               	movlb	1	; () banked
  1270   001CB0  25B5               	addwf	main@curMove& (0+255),w,b
  1271   001CB2  6ED9               	movwf	fsr2l,c
  1272   001CB4  6ADA               	clrf	fsr2h,c
  1273   001CB6  0E01               	movlw	high main@testSequence
  1274   001CB8  22DA               	addwfc	fsr2h,f,c
  1275   001CBA  50DF               	movf	indf2,w,c
  1276   001CBC  6FB3               	movwf	main@color& (0+255),b
  1277   001CBE                     
  1278                           ; BSR set to: 1
  1279                           ;main.c: 134:             moveSequence[curMove] = color;
  1280   001CBE  0E7A               	movlw	low main@moveSequence
  1281   001CC0  25B5               	addwf	main@curMove& (0+255),w,b
  1282   001CC2  6ED9               	movwf	fsr2l,c
  1283   001CC4  6ADA               	clrf	fsr2h,c
  1284   001CC6  0E01               	movlw	high main@moveSequence
  1285   001CC8  22DA               	addwfc	fsr2h,f,c
  1286   001CCA  C1B3  FFDF         	movff	main@color,indf2
  1287   001CCE                     
  1288                           ; BSR set to: 1
  1289                           ;main.c: 137:             move(&motorL, &motorR, color, moveSequence, straightTime, curM
      +                          ove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  1290   001CCE  0EC8               	movlw	low main@motorL
  1291   001CD0  0100               	movlb	0	; () banked
  1292   001CD2  6FD8               	movwf	move@mL& (0+255),b
  1293   001CD4  0E01               	movlw	high main@motorL
  1294   001CD6  6FD9               	movwf	(move@mL+1)& (0+255),b
  1295   001CD8  0EBE               	movlw	low main@motorR
  1296   001CDA  6FDA               	movwf	move@mR& (0+255),b
  1297   001CDC  0E01               	movlw	high main@motorR
  1298   001CDE  6FDB               	movwf	(move@mR+1)& (0+255),b
  1299   001CE0  C1B3  F0DC         	movff	main@color,move@color
  1300   001CE4  0E7A               	movlw	low main@moveSequence
  1301   001CE6  6FDD               	movwf	move@moveSequence& (0+255),b
  1302   001CE8  0E01               	movlw	high main@moveSequence
  1303   001CEA  6FDE               	movwf	(move@moveSequence+1)& (0+255),b
  1304   001CEC  0E28               	movlw	low main@straightTime
  1305   001CEE  6FDF               	movwf	move@straightTime& (0+255),b
  1306   001CF0  0E01               	movlw	high main@straightTime
  1307   001CF2  6FE0               	movwf	(move@straightTime+1)& (0+255),b
  1308   001CF4  C1B5  F0E1         	movff	main@curMove,move@curMove
  1309   001CF8  C1B2  F0E2         	movff	main@straightSpeed,move@straightSpeed
  1310   001CFC  C1A6  F0E3         	movff	main@reverseDuration,move@reverseDuration
  1311   001D00  C1B4  F0E4         	movff	main@straightRamp,move@straightRamp
  1312   001D04  C1A7  F0E5         	movff	main@turnSpeed,move@turnSpeed
  1313   001D08  C1A8  F0E6         	movff	main@turnDuration,move@turnDuration
  1314   001D0C  C1A9  F0E7         	movff	main@turnRamp,move@turnRamp
  1315   001D10  EC59  F00A         	call	_move	;wreg free
  1316   001D14                     
  1317                           ;main.c: 139:             curMove++;
  1318   001D14  0101               	movlb	1	; () banked
  1319   001D16  2BB5               	incf	main@curMove& (0+255),f,b
  1320   001D18                     
  1321                           ; BSR set to: 1
  1322                           ;main.c: 140:             resetTimer();
  1323   001D18  ECA4  F018         	call	_resetTimer	;wreg free
  1324   001D1C                     
  1325                           ;main.c: 141:             PIE0bits.INT0IE=TMR0IE=1;
  1326   001D1C  010E               	movlb	14	; () banked
  1327   001D1E  8B29               	bsf	41,5,b	;volatile
  1328   001D20  AB29               	btfss	41,5,b	;volatile
  1329   001D22  D002               	bra	u2095
  1330   001D24  8129               	bsf	41,0,b	;volatile
  1331   001D26  D002               	bra	u2097
  1332   001D28                     u2095:
  1333   001D28  010E               	movlb	14	; () banked
  1334   001D2A  9129               	bcf	41,0,b	;volatile
  1335   001D2C                     u2097:
  1336   001D2C                     
  1337                           ; BSR set to: 14
  1338                           ;main.c: 142:             wall = 0;
  1339   001D2C  0E00               	movlw	0
  1340   001D2E  0101               	movlb	1	; () banked
  1341   001D30  6FFA               	movwf	_wall& (0+255),b
  1342   001D32                     l3454:
  1343                           
  1344                           ; BSR set to: 1
  1345                           ;main.c: 154:         if (color == 8) {break;}
  1346   001D32  0E08               	movlw	8
  1347   001D34  19B3               	xorwf	main@color& (0+255),w,b
  1348   001D36  A4D8               	btfss	status,2,c
  1349   001D38  EFA0  F00E         	goto	u2101
  1350   001D3C  EFA2  F00E         	goto	u2100
  1351   001D40                     u2101:
  1352   001D40  EF15  F00E         	goto	l3430
  1353   001D44                     u2100:
  1354   001D44                     
  1355                           ; BSR set to: 1
  1356   001D44  EF5B  F000         	goto	start
  1357   001D48                     __end_of_main:
  1358                           	callstack 0
  1359                           
  1360 ;; *************** function _white_Light *****************
  1361 ;; Defined at:
  1362 ;;		line 57 in file "color.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  state           1    wreg     unsigned char 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  state           1   12[COMRAM] unsigned char 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;Total ram usage:        1 bytes
  1381 ;; Hardware stack levels used: 1
  1382 ;; Hardware stack levels required when called: 5
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_main
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text1
  1391   00302E                     __ptext1:
  1392                           	callstack 0
  1393   00302E                     _white_Light:
  1394                           	callstack 25
  1395                           
  1396                           ; BSR set to: 1
  1397                           ;incstack = 0
  1398                           ;white_Light@state stored from wreg
  1399   00302E  6E0D               	movwf	white_Light@state^0,c
  1400   003030                     
  1401                           ;color.c: 57: void white_Light(char state);color.c: 58: {;color.c: 59:     if (state){
  1402   003030  500D               	movf	white_Light@state^0,w,c
  1403   003032  B4D8               	btfsc	status,2,c
  1404   003034  EF1E  F018         	goto	u1551
  1405   003038  EF20  F018         	goto	u1550
  1406   00303C                     u1551:
  1407   00303C  EF25  F018         	goto	l125
  1408   003040                     u1550:
  1409   003040                     
  1410                           ;color.c: 60:         LATGbits.LATG0 = 1;
  1411   003040  807F               	bsf	127,0,c	;volatile
  1412                           
  1413                           ;color.c: 61:         LATEbits.LATE7 = 1;
  1414   003042  8E7D               	bsf	125,7,c	;volatile
  1415                           
  1416                           ;color.c: 62:         LATAbits.LATA3 = 1;
  1417   003044  8679               	bsf	121,3,c	;volatile
  1418                           
  1419                           ;color.c: 63:     }
  1420   003046  EF28  F018         	goto	l127
  1421   00304A                     l125:
  1422                           
  1423                           ;color.c: 65:         LATGbits.LATG0 = 0;
  1424   00304A  907F               	bcf	127,0,c	;volatile
  1425                           
  1426                           ;color.c: 66:         LATEbits.LATE7 = 0;
  1427   00304C  9E7D               	bcf	125,7,c	;volatile
  1428                           
  1429                           ;color.c: 67:         LATAbits.LATA3 = 0;
  1430   00304E  9679               	bcf	121,3,c	;volatile
  1431   003050                     l127:
  1432   003050  0012               	return		;funcret
  1433   003052                     __end_of_white_Light:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _move *****************
  1437 ;; Defined at:
  1438 ;;		line 88 in file "dc_motor.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  1441 ;;		 -> main@motorL(10), 
  1442 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  1443 ;;		 -> main@motorR(10), 
  1444 ;;  color           1    4[BANK0 ] unsigned char 
  1445 ;;  moveSequence    2    5[BANK0 ] PTR unsigned char 
  1446 ;;		 -> main@moveSequence(40), 
  1447 ;;  straightTime    2    7[BANK0 ] PTR unsigned int 
  1448 ;;		 -> main@straightTime(82), 
  1449 ;;  curMove         1    9[BANK0 ] unsigned char 
  1450 ;;  straightSpee    1   10[BANK0 ] unsigned char 
  1451 ;;  reverseDurat    1   11[BANK0 ] unsigned char 
  1452 ;;  straightRamp    1   12[BANK0 ] unsigned char 
  1453 ;;  turnSpeed       1   13[BANK0 ] unsigned char 
  1454 ;;  turnDuration    1   14[BANK0 ] unsigned char 
  1455 ;;  turnRamp        1   15[BANK0 ] unsigned char 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1467 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1470 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1471 ;;Total ram usage:       18 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 9
  1474 ;; This function calls:
  1475 ;;		_fullSpeedAhead
  1476 ;;		_returnHome
  1477 ;;		_reverseOneSquare
  1478 ;;		_turnLeft
  1479 ;;		_turnRight
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text2
  1486   0014B2                     __ptext2:
  1487                           	callstack 0
  1488   0014B2                     _move:
  1489                           	callstack 21
  1490   0014B2                     
  1491                           ;dc_motor.c: 88: void move(DC_motor *mL, DC_motor *mR, char color, unsigned char *moveSe
      +                          quence, unsigned int *straightTime, unsigned char curMove, char straightSpeed, unsigned 
      +                          char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDura
      +                          tion, unsigned char turnRamp);dc_motor.c: 89: {;dc_motor.c: 90:     if (color == 1) {
  1492   0014B2  0100               	movlb	0	; () banked
  1493   0014B4  05DC               	decf	move@color& (0+255),w,b
  1494   0014B6  A4D8               	btfss	status,2,c
  1495   0014B8  EF60  F00A         	goto	u1941
  1496   0014BC  EF62  F00A         	goto	u1940
  1497   0014C0                     u1941:
  1498   0014C0  EFAA  F00A         	goto	l3270
  1499   0014C4                     u1940:
  1500   0014C4                     
  1501                           ; BSR set to: 0
  1502                           ;dc_motor.c: 91:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1503   0014C4  C0D8  F020         	movff	move@mL,turnRight@mL
  1504   0014C8  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1505   0014CC  C0DA  F022         	movff	move@mR,turnRight@mR
  1506   0014D0  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1507   0014D4  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1508   0014D8  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1509   0014DC  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1510   0014E0  EC91  F010         	call	_turnRight	;wreg free
  1511   0014E4                     
  1512                           ;dc_motor.c: 92:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1513   0014E4  0E05               	movlw	5
  1514   0014E6  6E43               	movwf	(??_move+1)^0,c
  1515   0014E8  0E0F               	movlw	15
  1516   0014EA  6E42               	movwf	??_move^0,c
  1517   0014EC  0EF1               	movlw	241
  1518   0014EE                     u2147:
  1519   0014EE  2EE8               	decfsz	wreg,f,c
  1520   0014F0  D7FE               	bra	u2147
  1521   0014F2  2E42               	decfsz	??_move^0,f,c
  1522   0014F4  D7FC               	bra	u2147
  1523   0014F6  2E43               	decfsz	(??_move+1)^0,f,c
  1524   0014F8  D7FA               	bra	u2147
  1525   0014FA  0000               	nop	
  1526   0014FC                     
  1527                           ;dc_motor.c: 93:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1528   0014FC  C0D8  F020         	movff	move@mL,turnRight@mL
  1529   001500  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1530   001504  C0DA  F022         	movff	move@mR,turnRight@mR
  1531   001508  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1532   00150C  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1533   001510  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1534   001514  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1535   001518  EC91  F010         	call	_turnRight	;wreg free
  1536                           
  1537                           ;dc_motor.c: 94:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1538   00151C  0E05               	movlw	5
  1539   00151E  6E43               	movwf	(??_move+1)^0,c
  1540   001520  0E0F               	movlw	15
  1541   001522  6E42               	movwf	??_move^0,c
  1542   001524  0EF1               	movlw	241
  1543   001526                     u2157:
  1544   001526  2EE8               	decfsz	wreg,f,c
  1545   001528  D7FE               	bra	u2157
  1546   00152A  2E42               	decfsz	??_move^0,f,c
  1547   00152C  D7FC               	bra	u2157
  1548   00152E  2E43               	decfsz	(??_move+1)^0,f,c
  1549   001530  D7FA               	bra	u2157
  1550   001532  0000               	nop	
  1551   001534                     
  1552                           ;dc_motor.c: 95:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1553   001534  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1554   001538  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1555   00153C  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1556   001540  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1557   001544  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1558   001548  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1559   00154C  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1560                           
  1561                           ;dc_motor.c: 96:     }
  1562   001550  EF63  F00D         	goto	l478
  1563   001554                     l3270:
  1564                           
  1565                           ; BSR set to: 0
  1566   001554  0E02               	movlw	2
  1567   001556  19DC               	xorwf	move@color& (0+255),w,b
  1568   001558  A4D8               	btfss	status,2,c
  1569   00155A  EFB1  F00A         	goto	u1951
  1570   00155E  EFB3  F00A         	goto	u1950
  1571   001562                     u1951:
  1572   001562  EFFB  F00A         	goto	l3280
  1573   001566                     u1950:
  1574   001566                     
  1575                           ; BSR set to: 0
  1576                           ;dc_motor.c: 99:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1577   001566  C0D8  F020         	movff	move@mL,turnLeft@mL
  1578   00156A  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1579   00156E  C0DA  F022         	movff	move@mR,turnLeft@mR
  1580   001572  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1581   001576  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1582   00157A  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1583   00157E  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1584   001582  EC7E  F011         	call	_turnLeft	;wreg free
  1585   001586                     
  1586                           ;dc_motor.c: 100:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1587   001586  0E05               	movlw	5
  1588   001588  6E43               	movwf	(??_move+1)^0,c
  1589   00158A  0E0F               	movlw	15
  1590   00158C  6E42               	movwf	??_move^0,c
  1591   00158E  0EF1               	movlw	241
  1592   001590                     u2167:
  1593   001590  2EE8               	decfsz	wreg,f,c
  1594   001592  D7FE               	bra	u2167
  1595   001594  2E42               	decfsz	??_move^0,f,c
  1596   001596  D7FC               	bra	u2167
  1597   001598  2E43               	decfsz	(??_move+1)^0,f,c
  1598   00159A  D7FA               	bra	u2167
  1599   00159C  0000               	nop	
  1600   00159E                     
  1601                           ;dc_motor.c: 101:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1602   00159E  C0D8  F020         	movff	move@mL,turnLeft@mL
  1603   0015A2  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1604   0015A6  C0DA  F022         	movff	move@mR,turnLeft@mR
  1605   0015AA  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1606   0015AE  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1607   0015B2  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1608   0015B6  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1609   0015BA  EC7E  F011         	call	_turnLeft	;wreg free
  1610                           
  1611                           ;dc_motor.c: 102:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1612   0015BE  0E05               	movlw	5
  1613   0015C0  6E43               	movwf	(??_move+1)^0,c
  1614   0015C2  0E0F               	movlw	15
  1615   0015C4  6E42               	movwf	??_move^0,c
  1616   0015C6  0EF1               	movlw	241
  1617   0015C8                     u2177:
  1618   0015C8  2EE8               	decfsz	wreg,f,c
  1619   0015CA  D7FE               	bra	u2177
  1620   0015CC  2E42               	decfsz	??_move^0,f,c
  1621   0015CE  D7FC               	bra	u2177
  1622   0015D0  2E43               	decfsz	(??_move+1)^0,f,c
  1623   0015D2  D7FA               	bra	u2177
  1624   0015D4  0000               	nop	
  1625   0015D6                     
  1626                           ;dc_motor.c: 103:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1627   0015D6  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1628   0015DA  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1629   0015DE  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1630   0015E2  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1631   0015E6  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1632   0015EA  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1633   0015EE  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1634                           
  1635                           ;dc_motor.c: 104:     }
  1636   0015F2  EF63  F00D         	goto	l478
  1637   0015F6                     l3280:
  1638                           
  1639                           ; BSR set to: 0
  1640   0015F6  0E03               	movlw	3
  1641   0015F8  19DC               	xorwf	move@color& (0+255),w,b
  1642   0015FA  A4D8               	btfss	status,2,c
  1643   0015FC  EF02  F00B         	goto	u1961
  1644   001600  EF04  F00B         	goto	u1960
  1645   001604                     u1961:
  1646   001604  EF84  F00B         	goto	l3296
  1647   001608                     u1960:
  1648   001608                     
  1649                           ; BSR set to: 0
  1650                           ;dc_motor.c: 107:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1651   001608  C0D8  F020         	movff	move@mL,turnLeft@mL
  1652   00160C  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1653   001610  C0DA  F022         	movff	move@mR,turnLeft@mR
  1654   001614  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1655   001618  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1656   00161C  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1657   001620  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1658   001624  EC7E  F011         	call	_turnLeft	;wreg free
  1659   001628                     
  1660                           ;dc_motor.c: 108:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1661   001628  0E05               	movlw	5
  1662   00162A  6E43               	movwf	(??_move+1)^0,c
  1663   00162C  0E0F               	movlw	15
  1664   00162E  6E42               	movwf	??_move^0,c
  1665   001630  0EF1               	movlw	241
  1666   001632                     u2187:
  1667   001632  2EE8               	decfsz	wreg,f,c
  1668   001634  D7FE               	bra	u2187
  1669   001636  2E42               	decfsz	??_move^0,f,c
  1670   001638  D7FC               	bra	u2187
  1671   00163A  2E43               	decfsz	(??_move+1)^0,f,c
  1672   00163C  D7FA               	bra	u2187
  1673   00163E  0000               	nop	
  1674   001640                     
  1675                           ;dc_motor.c: 109:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1676   001640  C0D8  F020         	movff	move@mL,turnLeft@mL
  1677   001644  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1678   001648  C0DA  F022         	movff	move@mR,turnLeft@mR
  1679   00164C  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1680   001650  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1681   001654  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1682   001658  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1683   00165C  EC7E  F011         	call	_turnLeft	;wreg free
  1684                           
  1685                           ;dc_motor.c: 110:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1686   001660  0E05               	movlw	5
  1687   001662  6E43               	movwf	(??_move+1)^0,c
  1688   001664  0E0F               	movlw	15
  1689   001666  6E42               	movwf	??_move^0,c
  1690   001668  0EF1               	movlw	241
  1691   00166A                     u2197:
  1692   00166A  2EE8               	decfsz	wreg,f,c
  1693   00166C  D7FE               	bra	u2197
  1694   00166E  2E42               	decfsz	??_move^0,f,c
  1695   001670  D7FC               	bra	u2197
  1696   001672  2E43               	decfsz	(??_move+1)^0,f,c
  1697   001674  D7FA               	bra	u2197
  1698   001676  0000               	nop	
  1699   001678                     
  1700                           ;dc_motor.c: 111:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1701   001678  C0D8  F020         	movff	move@mL,turnLeft@mL
  1702   00167C  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1703   001680  C0DA  F022         	movff	move@mR,turnLeft@mR
  1704   001684  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1705   001688  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1706   00168C  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1707   001690  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1708   001694  EC7E  F011         	call	_turnLeft	;wreg free
  1709   001698                     
  1710                           ;dc_motor.c: 112:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1711   001698  0E05               	movlw	5
  1712   00169A  6E43               	movwf	(??_move+1)^0,c
  1713   00169C  0E0F               	movlw	15
  1714   00169E  6E42               	movwf	??_move^0,c
  1715   0016A0  0EF1               	movlw	241
  1716   0016A2                     u2207:
  1717   0016A2  2EE8               	decfsz	wreg,f,c
  1718   0016A4  D7FE               	bra	u2207
  1719   0016A6  2E42               	decfsz	??_move^0,f,c
  1720   0016A8  D7FC               	bra	u2207
  1721   0016AA  2E43               	decfsz	(??_move+1)^0,f,c
  1722   0016AC  D7FA               	bra	u2207
  1723   0016AE  0000               	nop	
  1724                           
  1725                           ;dc_motor.c: 113:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1726   0016B0  C0D8  F020         	movff	move@mL,turnLeft@mL
  1727   0016B4  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1728   0016B8  C0DA  F022         	movff	move@mR,turnLeft@mR
  1729   0016BC  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1730   0016C0  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1731   0016C4  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1732   0016C8  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1733   0016CC  EC7E  F011         	call	_turnLeft	;wreg free
  1734   0016D0                     
  1735                           ;dc_motor.c: 114:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1736   0016D0  0E05               	movlw	5
  1737   0016D2  6E43               	movwf	(??_move+1)^0,c
  1738   0016D4  0E0F               	movlw	15
  1739   0016D6  6E42               	movwf	??_move^0,c
  1740   0016D8  0EF1               	movlw	241
  1741   0016DA                     u2217:
  1742   0016DA  2EE8               	decfsz	wreg,f,c
  1743   0016DC  D7FE               	bra	u2217
  1744   0016DE  2E42               	decfsz	??_move^0,f,c
  1745   0016E0  D7FC               	bra	u2217
  1746   0016E2  2E43               	decfsz	(??_move+1)^0,f,c
  1747   0016E4  D7FA               	bra	u2217
  1748   0016E6  0000               	nop	
  1749   0016E8                     
  1750                           ;dc_motor.c: 115:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1751   0016E8  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1752   0016EC  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1753   0016F0  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1754   0016F4  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1755   0016F8  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1756   0016FC  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1757   001700  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1758                           
  1759                           ;dc_motor.c: 116:     }
  1760   001704  EF63  F00D         	goto	l478
  1761   001708                     l3296:
  1762                           
  1763                           ; BSR set to: 0
  1764   001708  0E04               	movlw	4
  1765   00170A  19DC               	xorwf	move@color& (0+255),w,b
  1766   00170C  A4D8               	btfss	status,2,c
  1767   00170E  EF8B  F00B         	goto	u1971
  1768   001712  EF8D  F00B         	goto	u1970
  1769   001716                     u1971:
  1770   001716  EFF1  F00B         	goto	l3308
  1771   00171A                     u1970:
  1772   00171A                     
  1773                           ; BSR set to: 0
  1774                           ;dc_motor.c: 119:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1775   00171A  C0D8  F020         	movff	move@mL,reverseOneSquare@mL
  1776   00171E  C0D9  F021         	movff	move@mL+1,reverseOneSquare@mL+1
  1777   001722  C0DA  F022         	movff	move@mR,reverseOneSquare@mR
  1778   001726  C0DB  F023         	movff	move@mR+1,reverseOneSquare@mR+1
  1779   00172A  C0E2  F024         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1780   00172E  C0E3  F025         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1781   001732  C0E4  F026         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1782   001736  EC9B  F00F         	call	_reverseOneSquare	;wreg free
  1783   00173A                     
  1784                           ;dc_motor.c: 120:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1785   00173A  0E05               	movlw	5
  1786   00173C  6E43               	movwf	(??_move+1)^0,c
  1787   00173E  0E0F               	movlw	15
  1788   001740  6E42               	movwf	??_move^0,c
  1789   001742  0EF1               	movlw	241
  1790   001744                     u2227:
  1791   001744  2EE8               	decfsz	wreg,f,c
  1792   001746  D7FE               	bra	u2227
  1793   001748  2E42               	decfsz	??_move^0,f,c
  1794   00174A  D7FC               	bra	u2227
  1795   00174C  2E43               	decfsz	(??_move+1)^0,f,c
  1796   00174E  D7FA               	bra	u2227
  1797   001750  0000               	nop	
  1798   001752                     
  1799                           ;dc_motor.c: 121:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1800   001752  C0D8  F020         	movff	move@mL,turnRight@mL
  1801   001756  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1802   00175A  C0DA  F022         	movff	move@mR,turnRight@mR
  1803   00175E  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1804   001762  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1805   001766  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1806   00176A  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1807   00176E  EC91  F010         	call	_turnRight	;wreg free
  1808                           
  1809                           ;dc_motor.c: 122:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1810   001772  0E05               	movlw	5
  1811   001774  6E43               	movwf	(??_move+1)^0,c
  1812   001776  0E0F               	movlw	15
  1813   001778  6E42               	movwf	??_move^0,c
  1814   00177A  0EF1               	movlw	241
  1815   00177C                     u2237:
  1816   00177C  2EE8               	decfsz	wreg,f,c
  1817   00177E  D7FE               	bra	u2237
  1818   001780  2E42               	decfsz	??_move^0,f,c
  1819   001782  D7FC               	bra	u2237
  1820   001784  2E43               	decfsz	(??_move+1)^0,f,c
  1821   001786  D7FA               	bra	u2237
  1822   001788  0000               	nop	
  1823   00178A                     
  1824                           ;dc_motor.c: 123:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1825   00178A  C0D8  F020         	movff	move@mL,turnRight@mL
  1826   00178E  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1827   001792  C0DA  F022         	movff	move@mR,turnRight@mR
  1828   001796  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1829   00179A  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1830   00179E  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1831   0017A2  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1832   0017A6  EC91  F010         	call	_turnRight	;wreg free
  1833   0017AA                     
  1834                           ;dc_motor.c: 124:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1835   0017AA  0E05               	movlw	5
  1836   0017AC  6E43               	movwf	(??_move+1)^0,c
  1837   0017AE  0E0F               	movlw	15
  1838   0017B0  6E42               	movwf	??_move^0,c
  1839   0017B2  0EF1               	movlw	241
  1840   0017B4                     u2247:
  1841   0017B4  2EE8               	decfsz	wreg,f,c
  1842   0017B6  D7FE               	bra	u2247
  1843   0017B8  2E42               	decfsz	??_move^0,f,c
  1844   0017BA  D7FC               	bra	u2247
  1845   0017BC  2E43               	decfsz	(??_move+1)^0,f,c
  1846   0017BE  D7FA               	bra	u2247
  1847   0017C0  0000               	nop	
  1848                           
  1849                           ;dc_motor.c: 125:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1850   0017C2  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1851   0017C6  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1852   0017CA  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1853   0017CE  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1854   0017D2  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1855   0017D6  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1856   0017DA  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1857                           
  1858                           ;dc_motor.c: 126:     }
  1859   0017DE  EF63  F00D         	goto	l478
  1860   0017E2                     l3308:
  1861                           
  1862                           ; BSR set to: 0
  1863   0017E2  0E05               	movlw	5
  1864   0017E4  19DC               	xorwf	move@color& (0+255),w,b
  1865   0017E6  A4D8               	btfss	status,2,c
  1866   0017E8  EFF8  F00B         	goto	u1981
  1867   0017EC  EFFA  F00B         	goto	u1980
  1868   0017F0                     u1981:
  1869   0017F0  EF5E  F00C         	goto	l3320
  1870   0017F4                     u1980:
  1871   0017F4                     
  1872                           ; BSR set to: 0
  1873                           ;dc_motor.c: 129:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1874   0017F4  C0D8  F020         	movff	move@mL,reverseOneSquare@mL
  1875   0017F8  C0D9  F021         	movff	move@mL+1,reverseOneSquare@mL+1
  1876   0017FC  C0DA  F022         	movff	move@mR,reverseOneSquare@mR
  1877   001800  C0DB  F023         	movff	move@mR+1,reverseOneSquare@mR+1
  1878   001804  C0E2  F024         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1879   001808  C0E3  F025         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1880   00180C  C0E4  F026         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1881   001810  EC9B  F00F         	call	_reverseOneSquare	;wreg free
  1882   001814                     
  1883                           ;dc_motor.c: 130:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1884   001814  0E05               	movlw	5
  1885   001816  6E43               	movwf	(??_move+1)^0,c
  1886   001818  0E0F               	movlw	15
  1887   00181A  6E42               	movwf	??_move^0,c
  1888   00181C  0EF1               	movlw	241
  1889   00181E                     u2257:
  1890   00181E  2EE8               	decfsz	wreg,f,c
  1891   001820  D7FE               	bra	u2257
  1892   001822  2E42               	decfsz	??_move^0,f,c
  1893   001824  D7FC               	bra	u2257
  1894   001826  2E43               	decfsz	(??_move+1)^0,f,c
  1895   001828  D7FA               	bra	u2257
  1896   00182A  0000               	nop	
  1897   00182C                     
  1898                           ;dc_motor.c: 131:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1899   00182C  C0D8  F020         	movff	move@mL,turnLeft@mL
  1900   001830  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1901   001834  C0DA  F022         	movff	move@mR,turnLeft@mR
  1902   001838  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1903   00183C  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1904   001840  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1905   001844  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1906   001848  EC7E  F011         	call	_turnLeft	;wreg free
  1907                           
  1908                           ;dc_motor.c: 132:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1909   00184C  0E05               	movlw	5
  1910   00184E  6E43               	movwf	(??_move+1)^0,c
  1911   001850  0E0F               	movlw	15
  1912   001852  6E42               	movwf	??_move^0,c
  1913   001854  0EF1               	movlw	241
  1914   001856                     u2267:
  1915   001856  2EE8               	decfsz	wreg,f,c
  1916   001858  D7FE               	bra	u2267
  1917   00185A  2E42               	decfsz	??_move^0,f,c
  1918   00185C  D7FC               	bra	u2267
  1919   00185E  2E43               	decfsz	(??_move+1)^0,f,c
  1920   001860  D7FA               	bra	u2267
  1921   001862  0000               	nop	
  1922   001864                     
  1923                           ;dc_motor.c: 133:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1924   001864  C0D8  F020         	movff	move@mL,turnLeft@mL
  1925   001868  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1926   00186C  C0DA  F022         	movff	move@mR,turnLeft@mR
  1927   001870  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1928   001874  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1929   001878  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1930   00187C  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1931   001880  EC7E  F011         	call	_turnLeft	;wreg free
  1932   001884                     
  1933                           ;dc_motor.c: 134:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1934   001884  0E05               	movlw	5
  1935   001886  6E43               	movwf	(??_move+1)^0,c
  1936   001888  0E0F               	movlw	15
  1937   00188A  6E42               	movwf	??_move^0,c
  1938   00188C  0EF1               	movlw	241
  1939   00188E                     u2277:
  1940   00188E  2EE8               	decfsz	wreg,f,c
  1941   001890  D7FE               	bra	u2277
  1942   001892  2E42               	decfsz	??_move^0,f,c
  1943   001894  D7FC               	bra	u2277
  1944   001896  2E43               	decfsz	(??_move+1)^0,f,c
  1945   001898  D7FA               	bra	u2277
  1946   00189A  0000               	nop	
  1947                           
  1948                           ;dc_motor.c: 135:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1949   00189C  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1950   0018A0  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1951   0018A4  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1952   0018A8  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1953   0018AC  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1954   0018B0  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1955   0018B4  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  1956                           
  1957                           ;dc_motor.c: 136:     }
  1958   0018B8  EF63  F00D         	goto	l478
  1959   0018BC                     l3320:
  1960                           
  1961                           ; BSR set to: 0
  1962   0018BC  0E06               	movlw	6
  1963   0018BE  19DC               	xorwf	move@color& (0+255),w,b
  1964   0018C0  A4D8               	btfss	status,2,c
  1965   0018C2  EF65  F00C         	goto	u1991
  1966   0018C6  EF67  F00C         	goto	u1990
  1967   0018CA                     u1991:
  1968   0018CA  EFCB  F00C         	goto	l3332
  1969   0018CE                     u1990:
  1970   0018CE                     
  1971                           ; BSR set to: 0
  1972                           ;dc_motor.c: 139:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1973   0018CE  C0D8  F020         	movff	move@mL,turnRight@mL
  1974   0018D2  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1975   0018D6  C0DA  F022         	movff	move@mR,turnRight@mR
  1976   0018DA  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1977   0018DE  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1978   0018E2  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1979   0018E6  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1980   0018EA  EC91  F010         	call	_turnRight	;wreg free
  1981   0018EE                     
  1982                           ;dc_motor.c: 140:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1983   0018EE  0E05               	movlw	5
  1984   0018F0  6E43               	movwf	(??_move+1)^0,c
  1985   0018F2  0E0F               	movlw	15
  1986   0018F4  6E42               	movwf	??_move^0,c
  1987   0018F6  0EF1               	movlw	241
  1988   0018F8                     u2287:
  1989   0018F8  2EE8               	decfsz	wreg,f,c
  1990   0018FA  D7FE               	bra	u2287
  1991   0018FC  2E42               	decfsz	??_move^0,f,c
  1992   0018FE  D7FC               	bra	u2287
  1993   001900  2E43               	decfsz	(??_move+1)^0,f,c
  1994   001902  D7FA               	bra	u2287
  1995   001904  0000               	nop	
  1996   001906                     
  1997                           ;dc_motor.c: 141:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1998   001906  C0D8  F020         	movff	move@mL,turnRight@mL
  1999   00190A  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  2000   00190E  C0DA  F022         	movff	move@mR,turnRight@mR
  2001   001912  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  2002   001916  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  2003   00191A  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  2004   00191E  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  2005   001922  EC91  F010         	call	_turnRight	;wreg free
  2006                           
  2007                           ;dc_motor.c: 142:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2008   001926  0E05               	movlw	5
  2009   001928  6E43               	movwf	(??_move+1)^0,c
  2010   00192A  0E0F               	movlw	15
  2011   00192C  6E42               	movwf	??_move^0,c
  2012   00192E  0EF1               	movlw	241
  2013   001930                     u2297:
  2014   001930  2EE8               	decfsz	wreg,f,c
  2015   001932  D7FE               	bra	u2297
  2016   001934  2E42               	decfsz	??_move^0,f,c
  2017   001936  D7FC               	bra	u2297
  2018   001938  2E43               	decfsz	(??_move+1)^0,f,c
  2019   00193A  D7FA               	bra	u2297
  2020   00193C  0000               	nop	
  2021   00193E                     
  2022                           ;dc_motor.c: 143:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2023   00193E  C0D8  F020         	movff	move@mL,turnRight@mL
  2024   001942  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  2025   001946  C0DA  F022         	movff	move@mR,turnRight@mR
  2026   00194A  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  2027   00194E  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  2028   001952  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  2029   001956  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  2030   00195A  EC91  F010         	call	_turnRight	;wreg free
  2031   00195E                     
  2032                           ;dc_motor.c: 144:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2033   00195E  0E05               	movlw	5
  2034   001960  6E43               	movwf	(??_move+1)^0,c
  2035   001962  0E0F               	movlw	15
  2036   001964  6E42               	movwf	??_move^0,c
  2037   001966  0EF1               	movlw	241
  2038   001968                     u2307:
  2039   001968  2EE8               	decfsz	wreg,f,c
  2040   00196A  D7FE               	bra	u2307
  2041   00196C  2E42               	decfsz	??_move^0,f,c
  2042   00196E  D7FC               	bra	u2307
  2043   001970  2E43               	decfsz	(??_move+1)^0,f,c
  2044   001972  D7FA               	bra	u2307
  2045   001974  0000               	nop	
  2046                           
  2047                           ;dc_motor.c: 145:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2048   001976  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  2049   00197A  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  2050   00197E  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  2051   001982  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  2052   001986  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2053   00198A  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2054   00198E  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  2055                           
  2056                           ;dc_motor.c: 146:     }
  2057   001992  EF63  F00D         	goto	l478
  2058   001996                     l3332:
  2059                           
  2060                           ; BSR set to: 0
  2061   001996  0E07               	movlw	7
  2062   001998  19DC               	xorwf	move@color& (0+255),w,b
  2063   00199A  A4D8               	btfss	status,2,c
  2064   00199C  EFD2  F00C         	goto	u2001
  2065   0019A0  EFD4  F00C         	goto	u2000
  2066   0019A4                     u2001:
  2067   0019A4  EF38  F00D         	goto	l3344
  2068   0019A8                     u2000:
  2069   0019A8                     
  2070                           ; BSR set to: 0
  2071                           ;dc_motor.c: 149:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2072   0019A8  C0D8  F020         	movff	move@mL,turnLeft@mL
  2073   0019AC  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2074   0019B0  C0DA  F022         	movff	move@mR,turnLeft@mR
  2075   0019B4  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2076   0019B8  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2077   0019BC  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2078   0019C0  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2079   0019C4  EC7E  F011         	call	_turnLeft	;wreg free
  2080   0019C8                     
  2081                           ;dc_motor.c: 150:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2082   0019C8  0E05               	movlw	5
  2083   0019CA  6E43               	movwf	(??_move+1)^0,c
  2084   0019CC  0E0F               	movlw	15
  2085   0019CE  6E42               	movwf	??_move^0,c
  2086   0019D0  0EF1               	movlw	241
  2087   0019D2                     u2317:
  2088   0019D2  2EE8               	decfsz	wreg,f,c
  2089   0019D4  D7FE               	bra	u2317
  2090   0019D6  2E42               	decfsz	??_move^0,f,c
  2091   0019D8  D7FC               	bra	u2317
  2092   0019DA  2E43               	decfsz	(??_move+1)^0,f,c
  2093   0019DC  D7FA               	bra	u2317
  2094   0019DE  0000               	nop	
  2095   0019E0                     
  2096                           ;dc_motor.c: 151:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2097   0019E0  C0D8  F020         	movff	move@mL,turnLeft@mL
  2098   0019E4  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2099   0019E8  C0DA  F022         	movff	move@mR,turnLeft@mR
  2100   0019EC  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2101   0019F0  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2102   0019F4  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2103   0019F8  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2104   0019FC  EC7E  F011         	call	_turnLeft	;wreg free
  2105                           
  2106                           ;dc_motor.c: 152:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2107   001A00  0E05               	movlw	5
  2108   001A02  6E43               	movwf	(??_move+1)^0,c
  2109   001A04  0E0F               	movlw	15
  2110   001A06  6E42               	movwf	??_move^0,c
  2111   001A08  0EF1               	movlw	241
  2112   001A0A                     u2327:
  2113   001A0A  2EE8               	decfsz	wreg,f,c
  2114   001A0C  D7FE               	bra	u2327
  2115   001A0E  2E42               	decfsz	??_move^0,f,c
  2116   001A10  D7FC               	bra	u2327
  2117   001A12  2E43               	decfsz	(??_move+1)^0,f,c
  2118   001A14  D7FA               	bra	u2327
  2119   001A16  0000               	nop	
  2120   001A18                     
  2121                           ;dc_motor.c: 153:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2122   001A18  C0D8  F020         	movff	move@mL,turnLeft@mL
  2123   001A1C  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2124   001A20  C0DA  F022         	movff	move@mR,turnLeft@mR
  2125   001A24  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2126   001A28  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2127   001A2C  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2128   001A30  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2129   001A34  EC7E  F011         	call	_turnLeft	;wreg free
  2130   001A38                     
  2131                           ;dc_motor.c: 154:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2132   001A38  0E05               	movlw	5
  2133   001A3A  6E43               	movwf	(??_move+1)^0,c
  2134   001A3C  0E0F               	movlw	15
  2135   001A3E  6E42               	movwf	??_move^0,c
  2136   001A40  0EF1               	movlw	241
  2137   001A42                     u2337:
  2138   001A42  2EE8               	decfsz	wreg,f,c
  2139   001A44  D7FE               	bra	u2337
  2140   001A46  2E42               	decfsz	??_move^0,f,c
  2141   001A48  D7FC               	bra	u2337
  2142   001A4A  2E43               	decfsz	(??_move+1)^0,f,c
  2143   001A4C  D7FA               	bra	u2337
  2144   001A4E  0000               	nop	
  2145                           
  2146                           ;dc_motor.c: 155:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2147   001A50  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  2148   001A54  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  2149   001A58  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  2150   001A5C  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  2151   001A60  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2152   001A64  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2153   001A68  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  2154                           
  2155                           ;dc_motor.c: 156:     }
  2156   001A6C  EF63  F00D         	goto	l478
  2157   001A70                     l3344:
  2158                           
  2159                           ; BSR set to: 0
  2160   001A70  0E08               	movlw	8
  2161   001A72  19DC               	xorwf	move@color& (0+255),w,b
  2162   001A74  A4D8               	btfss	status,2,c
  2163   001A76  EF3F  F00D         	goto	u2011
  2164   001A7A  EF41  F00D         	goto	u2010
  2165   001A7E                     u2011:
  2166   001A7E  EF63  F00D         	goto	l472
  2167   001A82                     u2010:
  2168   001A82                     
  2169                           ; BSR set to: 0
  2170                           ;dc_motor.c: 159:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  2171   001A82  C0D8  F02E         	movff	move@mL,returnHome@mL
  2172   001A86  C0D9  F02F         	movff	move@mL+1,returnHome@mL+1
  2173   001A8A  C0DA  F030         	movff	move@mR,returnHome@mR
  2174   001A8E  C0DB  F031         	movff	move@mR+1,returnHome@mR+1
  2175   001A92  C0DD  F032         	movff	move@moveSequence,returnHome@moveSequence
  2176   001A96  C0DE  F033         	movff	move@moveSequence+1,returnHome@moveSequence+1
  2177   001A9A  C0DF  F034         	movff	move@straightTime,returnHome@straightTime
  2178   001A9E  C0E0  F035         	movff	move@straightTime+1,returnHome@straightTime+1
  2179   001AA2  C0E1  F036         	movff	move@curMove,returnHome@curMove
  2180   001AA6  C0E2  F037         	movff	move@straightSpeed,returnHome@straightSpeed
  2181   001AAA  C0E3  F038         	movff	move@reverseDuration,returnHome@reverseDuration
  2182   001AAE  C0E4  F039         	movff	move@straightRamp,returnHome@straightRamp
  2183   001AB2  C0E5  F03A         	movff	move@turnSpeed,returnHome@turnSpeed
  2184   001AB6  C0E6  F03B         	movff	move@turnDuration,returnHome@turnDuration
  2185   001ABA  C0E7  F03C         	movff	move@turnRamp,returnHome@turnRamp
  2186   001ABE  EC01  F007         	call	_returnHome	;wreg free
  2187   001AC2  EF63  F00D         	goto	l478
  2188   001AC6                     l472:
  2189   001AC6                     l478:
  2190   001AC6  0012               	return		;funcret
  2191   001AC8                     __end_of_move:
  2192                           	callstack 0
  2193                           
  2194 ;; *************** function _returnHome *****************
  2195 ;; Defined at:
  2196 ;;		line 163 in file "dc_motor.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2199 ;;		 -> main@motorL(10), 
  2200 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2201 ;;		 -> main@motorR(10), 
  2202 ;;  moveSequence    2   49[COMRAM] PTR unsigned char 
  2203 ;;		 -> main@moveSequence(40), 
  2204 ;;  straightTime    2   51[COMRAM] PTR unsigned int 
  2205 ;;		 -> main@straightTime(82), 
  2206 ;;  curMove         1   53[COMRAM] unsigned char 
  2207 ;;  straightSpee    1   54[COMRAM] unsigned char 
  2208 ;;  reverseDurat    1   55[COMRAM] unsigned char 
  2209 ;;  straightRamp    1   56[COMRAM] unsigned char 
  2210 ;;  turnSpeed       1   57[COMRAM] unsigned char 
  2211 ;;  turnDuration    1   58[COMRAM] unsigned char 
  2212 ;;  turnRamp        1   59[COMRAM] unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  i               1   64[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2224 ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;Total ram usage:       20 bytes
  2229 ;; Hardware stack levels used: 1
  2230 ;; Hardware stack levels required when called: 8
  2231 ;; This function calls:
  2232 ;;		_fullSpeedAhead
  2233 ;;		_get16bitTMR0val
  2234 ;;		_resetTimer
  2235 ;;		_reverseOneSquare
  2236 ;;		_stop
  2237 ;;		_turnLeft
  2238 ;;		_turnRight
  2239 ;; This function is called by:
  2240 ;;		_move
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text3
  2245   000E02                     __ptext3:
  2246                           	callstack 0
  2247   000E02                     _returnHome:
  2248                           	callstack 21
  2249   000E02                     
  2250                           ;dc_motor.c: 163: void returnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSequenc
      +                          e, unsigned int *straightTime, unsigned char curMove, char straightSpeed, unsigned char 
      +                          reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration,
      +                           unsigned char turnRamp);dc_motor.c: 164: {;dc_motor.c: 165:     unsigned char i = curMo
      +                          ve;
  2251   000E02  C036  F041         	movff	returnHome@curMove,returnHome@i
  2252   000E06                     
  2253                           ;dc_motor.c: 167:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2254   000E06  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2255   000E0A  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2256   000E0E  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2257   000E12  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2258   000E16  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2259   000E1A  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2260   000E1E  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2261   000E22  EC7E  F011         	call	_turnLeft	;wreg free
  2262   000E26                     
  2263                           ;dc_motor.c: 168:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2264   000E26  0E05               	movlw	5
  2265   000E28  6E3E               	movwf	(??_returnHome+1)^0,c
  2266   000E2A  0E0F               	movlw	15
  2267   000E2C  6E3D               	movwf	??_returnHome^0,c
  2268   000E2E  0EF1               	movlw	241
  2269   000E30                     u2347:
  2270   000E30  2EE8               	decfsz	wreg,f,c
  2271   000E32  D7FE               	bra	u2347
  2272   000E34  2E3D               	decfsz	??_returnHome^0,f,c
  2273   000E36  D7FC               	bra	u2347
  2274   000E38  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2275   000E3A  D7FA               	bra	u2347
  2276   000E3C  0000               	nop	
  2277   000E3E                     
  2278                           ;dc_motor.c: 169:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2279   000E3E  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2280   000E42  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2281   000E46  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2282   000E4A  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2283   000E4E  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2284   000E52  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2285   000E56  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2286   000E5A  EC7E  F011         	call	_turnLeft	;wreg free
  2287                           
  2288                           ;dc_motor.c: 170:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2289   000E5E  0E05               	movlw	5
  2290   000E60  6E3E               	movwf	(??_returnHome+1)^0,c
  2291   000E62  0E0F               	movlw	15
  2292   000E64  6E3D               	movwf	??_returnHome^0,c
  2293   000E66  0EF1               	movlw	241
  2294   000E68                     u2357:
  2295   000E68  2EE8               	decfsz	wreg,f,c
  2296   000E6A  D7FE               	bra	u2357
  2297   000E6C  2E3D               	decfsz	??_returnHome^0,f,c
  2298   000E6E  D7FC               	bra	u2357
  2299   000E70  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2300   000E72  D7FA               	bra	u2357
  2301   000E74  0000               	nop	
  2302   000E76                     
  2303                           ;dc_motor.c: 171:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2304   000E76  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2305   000E7A  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2306   000E7E  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2307   000E82  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2308   000E86  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2309   000E8A  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2310   000E8E  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2311   000E92  EC7E  F011         	call	_turnLeft	;wreg free
  2312   000E96                     
  2313                           ;dc_motor.c: 172:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2314   000E96  0E05               	movlw	5
  2315   000E98  6E3E               	movwf	(??_returnHome+1)^0,c
  2316   000E9A  0E0F               	movlw	15
  2317   000E9C  6E3D               	movwf	??_returnHome^0,c
  2318   000E9E  0EF1               	movlw	241
  2319   000EA0                     u2367:
  2320   000EA0  2EE8               	decfsz	wreg,f,c
  2321   000EA2  D7FE               	bra	u2367
  2322   000EA4  2E3D               	decfsz	??_returnHome^0,f,c
  2323   000EA6  D7FC               	bra	u2367
  2324   000EA8  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2325   000EAA  D7FA               	bra	u2367
  2326   000EAC  0000               	nop	
  2327                           
  2328                           ;dc_motor.c: 173:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2329   000EAE  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2330   000EB2  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2331   000EB6  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2332   000EBA  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2333   000EBE  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2334   000EC2  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2335   000EC6  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2336   000ECA  EC7E  F011         	call	_turnLeft	;wreg free
  2337   000ECE                     
  2338                           ;dc_motor.c: 174:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2339   000ECE  0E05               	movlw	5
  2340   000ED0  6E3E               	movwf	(??_returnHome+1)^0,c
  2341   000ED2  0E0F               	movlw	15
  2342   000ED4  6E3D               	movwf	??_returnHome^0,c
  2343   000ED6  0EF1               	movlw	241
  2344   000ED8                     u2377:
  2345   000ED8  2EE8               	decfsz	wreg,f,c
  2346   000EDA  D7FE               	bra	u2377
  2347   000EDC  2E3D               	decfsz	??_returnHome^0,f,c
  2348   000EDE  D7FC               	bra	u2377
  2349   000EE0  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2350   000EE2  D7FA               	bra	u2377
  2351   000EE4  0000               	nop	
  2352   000EE6                     
  2353                           ;dc_motor.c: 175:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2354   000EE6  C02E  F020         	movff	returnHome@mL,fullSpeedAhead@mL
  2355   000EEA  C02F  F021         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  2356   000EEE  C030  F022         	movff	returnHome@mR,fullSpeedAhead@mR
  2357   000EF2  C031  F023         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  2358   000EF6  C037  F024         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  2359   000EFA  C039  F025         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  2360   000EFE  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  2361   000F02                     
  2362                           ;dc_motor.c: 176:     resetTimer();
  2363   000F02  ECA4  F018         	call	_resetTimer	;wreg free
  2364   000F06                     l2632:
  2365   000F06  5041               	movf	returnHome@i^0,w,c
  2366   000F08  0D02               	mullw	2
  2367   000F0A  CFF3 F03D          	movff	prodl,??_returnHome
  2368   000F0E  CFF4 F03E          	movff	prodh,??_returnHome+1
  2369   000F12  503D               	movf	??_returnHome^0,w,c
  2370   000F14  2434               	addwf	returnHome@straightTime^0,w,c
  2371   000F16  6ED9               	movwf	fsr2l,c
  2372   000F18  503E               	movf	(??_returnHome+1)^0,w,c
  2373   000F1A  2035               	addwfc	(returnHome@straightTime+1)^0,w,c
  2374   000F1C  6EDA               	movwf	fsr2h,c
  2375   000F1E  ECA2  F017         	call	_get16bitTMR0val	;wreg free
  2376   000F22  50DE               	movf	postinc2,w,c
  2377   000F24  5C0D               	subwf	?_get16bitTMR0val^0,w,c
  2378   000F26  50DE               	movf	postinc2,w,c
  2379   000F28  580E               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  2380   000F2A  A0D8               	btfss	status,0,c
  2381   000F2C  EF9A  F007         	goto	u1301
  2382   000F30  EF9C  F007         	goto	u1300
  2383   000F34                     u1301:
  2384   000F34  EF83  F007         	goto	l2632
  2385   000F38                     u1300:
  2386   000F38                     
  2387                           ;dc_motor.c: 178:     stop(mL, mR, straightRamp);
  2388   000F38  C02E  F020         	movff	returnHome@mL,stop@mL
  2389   000F3C  C02F  F021         	movff	returnHome@mL+1,stop@mL+1
  2390   000F40  C030  F022         	movff	returnHome@mR,stop@mR
  2391   000F44  C031  F023         	movff	returnHome@mR+1,stop@mR+1
  2392   000F48  C039  F024         	movff	returnHome@straightRamp,stop@straightRamp
  2393   000F4C  EC4C  F014         	call	_stop	;wreg free
  2394   000F50                     
  2395                           ;dc_motor.c: 180:     for (i=curMove-1;i>=0;i--) {
  2396   000F50  0436               	decf	returnHome@curMove^0,w,c
  2397   000F52  6E41               	movwf	returnHome@i^0,c
  2398   000F54                     l2640:
  2399                           
  2400                           ;dc_motor.c: 181:         if (moveSequence[i] == 1) {
  2401   000F54  5041               	movf	returnHome@i^0,w,c
  2402   000F56  2432               	addwf	returnHome@moveSequence^0,w,c
  2403   000F58  6ED9               	movwf	fsr2l,c
  2404   000F5A  0E00               	movlw	0
  2405   000F5C  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2406   000F5E  6EDA               	movwf	fsr2h,c
  2407   000F60  04DE               	decf	postinc2,w,c
  2408   000F62  A4D8               	btfss	status,2,c
  2409   000F64  EFB6  F007         	goto	u1311
  2410   000F68  EFB8  F007         	goto	u1310
  2411   000F6C                     u1311:
  2412   000F6C  EFF2  F007         	goto	l2648
  2413   000F70                     u1310:
  2414   000F70                     
  2415                           ;dc_motor.c: 182:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2416   000F70  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2417   000F74  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2418   000F78  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2419   000F7C  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2420   000F80  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2421   000F84  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2422   000F88  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2423   000F8C  EC7E  F011         	call	_turnLeft	;wreg free
  2424   000F90                     
  2425                           ;dc_motor.c: 183:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2426   000F90  0E05               	movlw	5
  2427   000F92  6E3E               	movwf	(??_returnHome+1)^0,c
  2428   000F94  0E0F               	movlw	15
  2429   000F96  6E3D               	movwf	??_returnHome^0,c
  2430   000F98  0EF1               	movlw	241
  2431   000F9A                     u2387:
  2432   000F9A  2EE8               	decfsz	wreg,f,c
  2433   000F9C  D7FE               	bra	u2387
  2434   000F9E  2E3D               	decfsz	??_returnHome^0,f,c
  2435   000FA0  D7FC               	bra	u2387
  2436   000FA2  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2437   000FA4  D7FA               	bra	u2387
  2438   000FA6  0000               	nop	
  2439   000FA8                     
  2440                           ;dc_motor.c: 184:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2441   000FA8  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2442   000FAC  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2443   000FB0  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2444   000FB4  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2445   000FB8  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2446   000FBC  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2447   000FC0  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2448   000FC4  EC7E  F011         	call	_turnLeft	;wreg free
  2449                           
  2450                           ;dc_motor.c: 185:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2451   000FC8  0E05               	movlw	5
  2452   000FCA  6E3E               	movwf	(??_returnHome+1)^0,c
  2453   000FCC  0E0F               	movlw	15
  2454   000FCE  6E3D               	movwf	??_returnHome^0,c
  2455   000FD0  0EF1               	movlw	241
  2456   000FD2                     u2397:
  2457   000FD2  2EE8               	decfsz	wreg,f,c
  2458   000FD4  D7FE               	bra	u2397
  2459   000FD6  2E3D               	decfsz	??_returnHome^0,f,c
  2460   000FD8  D7FC               	bra	u2397
  2461   000FDA  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2462   000FDC  D7FA               	bra	u2397
  2463   000FDE  0000               	nop	
  2464                           
  2465                           ;dc_motor.c: 186:         }
  2466   000FE0  EF20  F00A         	goto	l487
  2467   000FE4                     l2648:
  2468   000FE4  5041               	movf	returnHome@i^0,w,c
  2469   000FE6  2432               	addwf	returnHome@moveSequence^0,w,c
  2470   000FE8  6ED9               	movwf	fsr2l,c
  2471   000FEA  0E00               	movlw	0
  2472   000FEC  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2473   000FEE  6EDA               	movwf	fsr2h,c
  2474   000FF0  0E02               	movlw	2
  2475   000FF2  18DE               	xorwf	postinc2,w,c
  2476   000FF4  A4D8               	btfss	status,2,c
  2477   000FF6  EFFF  F007         	goto	u1321
  2478   000FFA  EF01  F008         	goto	u1320
  2479   000FFE                     u1321:
  2480   000FFE  EF3B  F008         	goto	l2656
  2481   001002                     u1320:
  2482   001002                     
  2483                           ;dc_motor.c: 189:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2484   001002  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2485   001006  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2486   00100A  C030  F022         	movff	returnHome@mR,turnRight@mR
  2487   00100E  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2488   001012  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2489   001016  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2490   00101A  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2491   00101E  EC91  F010         	call	_turnRight	;wreg free
  2492   001022                     
  2493                           ;dc_motor.c: 190:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2494   001022  0E05               	movlw	5
  2495   001024  6E3E               	movwf	(??_returnHome+1)^0,c
  2496   001026  0E0F               	movlw	15
  2497   001028  6E3D               	movwf	??_returnHome^0,c
  2498   00102A  0EF1               	movlw	241
  2499   00102C                     u2407:
  2500   00102C  2EE8               	decfsz	wreg,f,c
  2501   00102E  D7FE               	bra	u2407
  2502   001030  2E3D               	decfsz	??_returnHome^0,f,c
  2503   001032  D7FC               	bra	u2407
  2504   001034  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2505   001036  D7FA               	bra	u2407
  2506   001038  0000               	nop	
  2507   00103A                     
  2508                           ;dc_motor.c: 191:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2509   00103A  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2510   00103E  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2511   001042  C030  F022         	movff	returnHome@mR,turnRight@mR
  2512   001046  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2513   00104A  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2514   00104E  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2515   001052  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2516   001056  EC91  F010         	call	_turnRight	;wreg free
  2517                           
  2518                           ;dc_motor.c: 192:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2519   00105A  0E05               	movlw	5
  2520   00105C  6E3E               	movwf	(??_returnHome+1)^0,c
  2521   00105E  0E0F               	movlw	15
  2522   001060  6E3D               	movwf	??_returnHome^0,c
  2523   001062  0EF1               	movlw	241
  2524   001064                     u2417:
  2525   001064  2EE8               	decfsz	wreg,f,c
  2526   001066  D7FE               	bra	u2417
  2527   001068  2E3D               	decfsz	??_returnHome^0,f,c
  2528   00106A  D7FC               	bra	u2417
  2529   00106C  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2530   00106E  D7FA               	bra	u2417
  2531   001070  0000               	nop	
  2532                           
  2533                           ;dc_motor.c: 193:         }
  2534   001072  EF20  F00A         	goto	l487
  2535   001076                     l2656:
  2536   001076  5041               	movf	returnHome@i^0,w,c
  2537   001078  2432               	addwf	returnHome@moveSequence^0,w,c
  2538   00107A  6ED9               	movwf	fsr2l,c
  2539   00107C  0E00               	movlw	0
  2540   00107E  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2541   001080  6EDA               	movwf	fsr2h,c
  2542   001082  0E03               	movlw	3
  2543   001084  18DE               	xorwf	postinc2,w,c
  2544   001086  A4D8               	btfss	status,2,c
  2545   001088  EF48  F008         	goto	u1331
  2546   00108C  EF4A  F008         	goto	u1330
  2547   001090                     u1331:
  2548   001090  EFBC  F008         	goto	l2670
  2549   001094                     u1330:
  2550   001094                     
  2551                           ;dc_motor.c: 196:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2552   001094  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2553   001098  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2554   00109C  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2555   0010A0  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2556   0010A4  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2557   0010A8  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2558   0010AC  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2559   0010B0  EC7E  F011         	call	_turnLeft	;wreg free
  2560   0010B4                     
  2561                           ;dc_motor.c: 197:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2562   0010B4  0E05               	movlw	5
  2563   0010B6  6E3E               	movwf	(??_returnHome+1)^0,c
  2564   0010B8  0E0F               	movlw	15
  2565   0010BA  6E3D               	movwf	??_returnHome^0,c
  2566   0010BC  0EF1               	movlw	241
  2567   0010BE                     u2427:
  2568   0010BE  2EE8               	decfsz	wreg,f,c
  2569   0010C0  D7FE               	bra	u2427
  2570   0010C2  2E3D               	decfsz	??_returnHome^0,f,c
  2571   0010C4  D7FC               	bra	u2427
  2572   0010C6  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2573   0010C8  D7FA               	bra	u2427
  2574   0010CA  0000               	nop	
  2575   0010CC                     
  2576                           ;dc_motor.c: 198:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2577   0010CC  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2578   0010D0  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2579   0010D4  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2580   0010D8  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2581   0010DC  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2582   0010E0  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2583   0010E4  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2584   0010E8  EC7E  F011         	call	_turnLeft	;wreg free
  2585                           
  2586                           ;dc_motor.c: 199:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2587   0010EC  0E05               	movlw	5
  2588   0010EE  6E3E               	movwf	(??_returnHome+1)^0,c
  2589   0010F0  0E0F               	movlw	15
  2590   0010F2  6E3D               	movwf	??_returnHome^0,c
  2591   0010F4  0EF1               	movlw	241
  2592   0010F6                     u2437:
  2593   0010F6  2EE8               	decfsz	wreg,f,c
  2594   0010F8  D7FE               	bra	u2437
  2595   0010FA  2E3D               	decfsz	??_returnHome^0,f,c
  2596   0010FC  D7FC               	bra	u2437
  2597   0010FE  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2598   001100  D7FA               	bra	u2437
  2599   001102  0000               	nop	
  2600   001104                     
  2601                           ;dc_motor.c: 200:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2602   001104  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2603   001108  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2604   00110C  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2605   001110  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2606   001114  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2607   001118  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2608   00111C  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2609   001120  EC7E  F011         	call	_turnLeft	;wreg free
  2610   001124                     
  2611                           ;dc_motor.c: 201:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2612   001124  0E05               	movlw	5
  2613   001126  6E3E               	movwf	(??_returnHome+1)^0,c
  2614   001128  0E0F               	movlw	15
  2615   00112A  6E3D               	movwf	??_returnHome^0,c
  2616   00112C  0EF1               	movlw	241
  2617   00112E                     u2447:
  2618   00112E  2EE8               	decfsz	wreg,f,c
  2619   001130  D7FE               	bra	u2447
  2620   001132  2E3D               	decfsz	??_returnHome^0,f,c
  2621   001134  D7FC               	bra	u2447
  2622   001136  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2623   001138  D7FA               	bra	u2447
  2624   00113A  0000               	nop	
  2625                           
  2626                           ;dc_motor.c: 202:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2627   00113C  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2628   001140  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2629   001144  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2630   001148  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2631   00114C  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2632   001150  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2633   001154  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2634   001158  EC7E  F011         	call	_turnLeft	;wreg free
  2635   00115C                     l2668:
  2636                           
  2637                           ;dc_motor.c: 203:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2638   00115C  0E05               	movlw	5
  2639   00115E  6E3E               	movwf	(??_returnHome+1)^0,c
  2640   001160  0E0F               	movlw	15
  2641   001162  6E3D               	movwf	??_returnHome^0,c
  2642   001164  0EF1               	movlw	241
  2643   001166                     u2457:
  2644   001166  2EE8               	decfsz	wreg,f,c
  2645   001168  D7FE               	bra	u2457
  2646   00116A  2E3D               	decfsz	??_returnHome^0,f,c
  2647   00116C  D7FC               	bra	u2457
  2648   00116E  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2649   001170  D7FA               	bra	u2457
  2650   001172  0000               	nop	
  2651                           
  2652                           ;dc_motor.c: 204:         }
  2653   001174  EF20  F00A         	goto	l487
  2654   001178                     l2670:
  2655   001178  5041               	movf	returnHome@i^0,w,c
  2656   00117A  2432               	addwf	returnHome@moveSequence^0,w,c
  2657   00117C  6ED9               	movwf	fsr2l,c
  2658   00117E  0E00               	movlw	0
  2659   001180  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2660   001182  6EDA               	movwf	fsr2h,c
  2661   001184  0E04               	movlw	4
  2662   001186  18DE               	xorwf	postinc2,w,c
  2663   001188  A4D8               	btfss	status,2,c
  2664   00118A  EFC9  F008         	goto	u1341
  2665   00118E  EFCB  F008         	goto	u1340
  2666   001192                     u1341:
  2667   001192  EF15  F009         	goto	l2682
  2668   001196                     u1340:
  2669   001196                     
  2670                           ;dc_motor.c: 207:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2671   001196  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2672   00119A  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2673   00119E  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2674   0011A2  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2675   0011A6  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2676   0011AA  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2677   0011AE  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2678   0011B2  EC7E  F011         	call	_turnLeft	;wreg free
  2679   0011B6                     
  2680                           ;dc_motor.c: 208:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2681   0011B6  0E05               	movlw	5
  2682   0011B8  6E3E               	movwf	(??_returnHome+1)^0,c
  2683   0011BA  0E0F               	movlw	15
  2684   0011BC  6E3D               	movwf	??_returnHome^0,c
  2685   0011BE  0EF1               	movlw	241
  2686   0011C0                     u2467:
  2687   0011C0  2EE8               	decfsz	wreg,f,c
  2688   0011C2  D7FE               	bra	u2467
  2689   0011C4  2E3D               	decfsz	??_returnHome^0,f,c
  2690   0011C6  D7FC               	bra	u2467
  2691   0011C8  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2692   0011CA  D7FA               	bra	u2467
  2693   0011CC  0000               	nop	
  2694   0011CE                     
  2695                           ;dc_motor.c: 209:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2696   0011CE  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2697   0011D2  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2698   0011D6  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2699   0011DA  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2700   0011DE  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2701   0011E2  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2702   0011E6  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2703   0011EA  EC7E  F011         	call	_turnLeft	;wreg free
  2704                           
  2705                           ;dc_motor.c: 210:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2706   0011EE  0E05               	movlw	5
  2707   0011F0  6E3E               	movwf	(??_returnHome+1)^0,c
  2708   0011F2  0E0F               	movlw	15
  2709   0011F4  6E3D               	movwf	??_returnHome^0,c
  2710   0011F6  0EF1               	movlw	241
  2711   0011F8                     u2477:
  2712   0011F8  2EE8               	decfsz	wreg,f,c
  2713   0011FA  D7FE               	bra	u2477
  2714   0011FC  2E3D               	decfsz	??_returnHome^0,f,c
  2715   0011FE  D7FC               	bra	u2477
  2716   001200  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2717   001202  D7FA               	bra	u2477
  2718   001204  0000               	nop	
  2719   001206                     
  2720                           ;dc_motor.c: 211:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  2721   001206  C02E  F020         	movff	returnHome@mL,reverseOneSquare@mL
  2722   00120A  C02F  F021         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  2723   00120E  C030  F022         	movff	returnHome@mR,reverseOneSquare@mR
  2724   001212  C031  F023         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  2725   001216  C037  F024         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  2726   00121A  C038  F025         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  2727   00121E  C039  F026         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  2728   001222  EC9B  F00F         	call	_reverseOneSquare	;wreg free
  2729   001226  EFAE  F008         	goto	l2668
  2730   00122A                     l2682:
  2731   00122A  5041               	movf	returnHome@i^0,w,c
  2732   00122C  2432               	addwf	returnHome@moveSequence^0,w,c
  2733   00122E  6ED9               	movwf	fsr2l,c
  2734   001230  0E00               	movlw	0
  2735   001232  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2736   001234  6EDA               	movwf	fsr2h,c
  2737   001236  0E05               	movlw	5
  2738   001238  18DE               	xorwf	postinc2,w,c
  2739   00123A  A4D8               	btfss	status,2,c
  2740   00123C  EF22  F009         	goto	u1351
  2741   001240  EF24  F009         	goto	u1350
  2742   001244                     u1351:
  2743   001244  EF6E  F009         	goto	l2694
  2744   001248                     u1350:
  2745   001248                     
  2746                           ;dc_motor.c: 216:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2747   001248  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2748   00124C  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2749   001250  C030  F022         	movff	returnHome@mR,turnRight@mR
  2750   001254  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2751   001258  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2752   00125C  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2753   001260  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2754   001264  EC91  F010         	call	_turnRight	;wreg free
  2755   001268                     
  2756                           ;dc_motor.c: 217:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2757   001268  0E05               	movlw	5
  2758   00126A  6E3E               	movwf	(??_returnHome+1)^0,c
  2759   00126C  0E0F               	movlw	15
  2760   00126E  6E3D               	movwf	??_returnHome^0,c
  2761   001270  0EF1               	movlw	241
  2762   001272                     u2487:
  2763   001272  2EE8               	decfsz	wreg,f,c
  2764   001274  D7FE               	bra	u2487
  2765   001276  2E3D               	decfsz	??_returnHome^0,f,c
  2766   001278  D7FC               	bra	u2487
  2767   00127A  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2768   00127C  D7FA               	bra	u2487
  2769   00127E  0000               	nop	
  2770   001280                     
  2771                           ;dc_motor.c: 218:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2772   001280  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2773   001284  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2774   001288  C030  F022         	movff	returnHome@mR,turnRight@mR
  2775   00128C  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2776   001290  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2777   001294  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2778   001298  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2779   00129C  EC91  F010         	call	_turnRight	;wreg free
  2780                           
  2781                           ;dc_motor.c: 219:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2782   0012A0  0E05               	movlw	5
  2783   0012A2  6E3E               	movwf	(??_returnHome+1)^0,c
  2784   0012A4  0E0F               	movlw	15
  2785   0012A6  6E3D               	movwf	??_returnHome^0,c
  2786   0012A8  0EF1               	movlw	241
  2787   0012AA                     u2497:
  2788   0012AA  2EE8               	decfsz	wreg,f,c
  2789   0012AC  D7FE               	bra	u2497
  2790   0012AE  2E3D               	decfsz	??_returnHome^0,f,c
  2791   0012B0  D7FC               	bra	u2497
  2792   0012B2  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2793   0012B4  D7FA               	bra	u2497
  2794   0012B6  0000               	nop	
  2795   0012B8                     
  2796                           ;dc_motor.c: 220:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  2797   0012B8  C02E  F020         	movff	returnHome@mL,reverseOneSquare@mL
  2798   0012BC  C02F  F021         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  2799   0012C0  C030  F022         	movff	returnHome@mR,reverseOneSquare@mR
  2800   0012C4  C031  F023         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  2801   0012C8  C037  F024         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  2802   0012CC  C038  F025         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  2803   0012D0  C039  F026         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  2804   0012D4  EC9B  F00F         	call	_reverseOneSquare	;wreg free
  2805   0012D8  EFAE  F008         	goto	l2668
  2806   0012DC                     l2694:
  2807   0012DC  5041               	movf	returnHome@i^0,w,c
  2808   0012DE  2432               	addwf	returnHome@moveSequence^0,w,c
  2809   0012E0  6ED9               	movwf	fsr2l,c
  2810   0012E2  0E00               	movlw	0
  2811   0012E4  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2812   0012E6  6EDA               	movwf	fsr2h,c
  2813   0012E8  0E06               	movlw	6
  2814   0012EA  18DE               	xorwf	postinc2,w,c
  2815   0012EC  A4D8               	btfss	status,2,c
  2816   0012EE  EF7B  F009         	goto	u1361
  2817   0012F2  EF7D  F009         	goto	u1360
  2818   0012F6                     u1361:
  2819   0012F6  EFC7  F009         	goto	l2706
  2820   0012FA                     u1360:
  2821   0012FA                     
  2822                           ;dc_motor.c: 225:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2823   0012FA  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2824   0012FE  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2825   001302  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2826   001306  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2827   00130A  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2828   00130E  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2829   001312  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2830   001316  EC7E  F011         	call	_turnLeft	;wreg free
  2831   00131A                     
  2832                           ;dc_motor.c: 226:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2833   00131A  0E05               	movlw	5
  2834   00131C  6E3E               	movwf	(??_returnHome+1)^0,c
  2835   00131E  0E0F               	movlw	15
  2836   001320  6E3D               	movwf	??_returnHome^0,c
  2837   001322  0EF1               	movlw	241
  2838   001324                     u2507:
  2839   001324  2EE8               	decfsz	wreg,f,c
  2840   001326  D7FE               	bra	u2507
  2841   001328  2E3D               	decfsz	??_returnHome^0,f,c
  2842   00132A  D7FC               	bra	u2507
  2843   00132C  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2844   00132E  D7FA               	bra	u2507
  2845   001330  0000               	nop	
  2846   001332                     
  2847                           ;dc_motor.c: 227:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2848   001332  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2849   001336  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2850   00133A  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2851   00133E  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2852   001342  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2853   001346  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2854   00134A  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2855   00134E  EC7E  F011         	call	_turnLeft	;wreg free
  2856                           
  2857                           ;dc_motor.c: 228:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2858   001352  0E05               	movlw	5
  2859   001354  6E3E               	movwf	(??_returnHome+1)^0,c
  2860   001356  0E0F               	movlw	15
  2861   001358  6E3D               	movwf	??_returnHome^0,c
  2862   00135A  0EF1               	movlw	241
  2863   00135C                     u2517:
  2864   00135C  2EE8               	decfsz	wreg,f,c
  2865   00135E  D7FE               	bra	u2517
  2866   001360  2E3D               	decfsz	??_returnHome^0,f,c
  2867   001362  D7FC               	bra	u2517
  2868   001364  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2869   001366  D7FA               	bra	u2517
  2870   001368  0000               	nop	
  2871   00136A                     
  2872                           ;dc_motor.c: 229:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2873   00136A  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2874   00136E  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2875   001372  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2876   001376  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2877   00137A  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2878   00137E  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2879   001382  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2880   001386  EC7E  F011         	call	_turnLeft	;wreg free
  2881   00138A  EFAE  F008         	goto	l2668
  2882   00138E                     l2706:
  2883   00138E  5041               	movf	returnHome@i^0,w,c
  2884   001390  2432               	addwf	returnHome@moveSequence^0,w,c
  2885   001392  6ED9               	movwf	fsr2l,c
  2886   001394  0E00               	movlw	0
  2887   001396  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2888   001398  6EDA               	movwf	fsr2h,c
  2889   00139A  0E07               	movlw	7
  2890   00139C  18DE               	xorwf	postinc2,w,c
  2891   00139E  A4D8               	btfss	status,2,c
  2892   0013A0  EFD4  F009         	goto	u1371
  2893   0013A4  EFD6  F009         	goto	u1370
  2894   0013A8                     u1371:
  2895   0013A8  EF20  F00A         	goto	l493
  2896   0013AC                     u1370:
  2897   0013AC                     
  2898                           ;dc_motor.c: 234:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2899   0013AC  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2900   0013B0  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2901   0013B4  C030  F022         	movff	returnHome@mR,turnRight@mR
  2902   0013B8  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2903   0013BC  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2904   0013C0  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2905   0013C4  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2906   0013C8  EC91  F010         	call	_turnRight	;wreg free
  2907   0013CC                     
  2908                           ;dc_motor.c: 235:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2909   0013CC  0E05               	movlw	5
  2910   0013CE  6E3E               	movwf	(??_returnHome+1)^0,c
  2911   0013D0  0E0F               	movlw	15
  2912   0013D2  6E3D               	movwf	??_returnHome^0,c
  2913   0013D4  0EF1               	movlw	241
  2914   0013D6                     u2527:
  2915   0013D6  2EE8               	decfsz	wreg,f,c
  2916   0013D8  D7FE               	bra	u2527
  2917   0013DA  2E3D               	decfsz	??_returnHome^0,f,c
  2918   0013DC  D7FC               	bra	u2527
  2919   0013DE  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2920   0013E0  D7FA               	bra	u2527
  2921   0013E2  0000               	nop	
  2922   0013E4                     
  2923                           ;dc_motor.c: 236:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2924   0013E4  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2925   0013E8  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2926   0013EC  C030  F022         	movff	returnHome@mR,turnRight@mR
  2927   0013F0  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2928   0013F4  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2929   0013F8  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2930   0013FC  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2931   001400  EC91  F010         	call	_turnRight	;wreg free
  2932                           
  2933                           ;dc_motor.c: 237:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2934   001404  0E05               	movlw	5
  2935   001406  6E3E               	movwf	(??_returnHome+1)^0,c
  2936   001408  0E0F               	movlw	15
  2937   00140A  6E3D               	movwf	??_returnHome^0,c
  2938   00140C  0EF1               	movlw	241
  2939   00140E                     u2537:
  2940   00140E  2EE8               	decfsz	wreg,f,c
  2941   001410  D7FE               	bra	u2537
  2942   001412  2E3D               	decfsz	??_returnHome^0,f,c
  2943   001414  D7FC               	bra	u2537
  2944   001416  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2945   001418  D7FA               	bra	u2537
  2946   00141A  0000               	nop	
  2947   00141C                     
  2948                           ;dc_motor.c: 238:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2949   00141C  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2950   001420  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2951   001424  C030  F022         	movff	returnHome@mR,turnRight@mR
  2952   001428  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2953   00142C  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2954   001430  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2955   001434  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2956   001438  EC91  F010         	call	_turnRight	;wreg free
  2957   00143C  EFAE  F008         	goto	l2668
  2958   001440                     l493:
  2959   001440                     l487:
  2960                           
  2961                           ;dc_motor.c: 242:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2962   001440  C02E  F020         	movff	returnHome@mL,fullSpeedAhead@mL
  2963   001444  C02F  F021         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  2964   001448  C030  F022         	movff	returnHome@mR,fullSpeedAhead@mR
  2965   00144C  C031  F023         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  2966   001450  C037  F024         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  2967   001454  C039  F025         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  2968   001458  ECD1  F014         	call	_fullSpeedAhead	;wreg free
  2969   00145C                     
  2970                           ;dc_motor.c: 243:         resetTimer();
  2971   00145C  ECA4  F018         	call	_resetTimer	;wreg free
  2972   001460                     l2720:
  2973   001460  5041               	movf	returnHome@i^0,w,c
  2974   001462  0D02               	mullw	2
  2975   001464  CFF3 F03D          	movff	prodl,??_returnHome
  2976   001468  CFF4 F03E          	movff	prodh,??_returnHome+1
  2977   00146C  503D               	movf	??_returnHome^0,w,c
  2978   00146E  2434               	addwf	returnHome@straightTime^0,w,c
  2979   001470  6ED9               	movwf	fsr2l,c
  2980   001472  503E               	movf	(??_returnHome+1)^0,w,c
  2981   001474  2035               	addwfc	(returnHome@straightTime+1)^0,w,c
  2982   001476  6EDA               	movwf	fsr2h,c
  2983   001478  ECA2  F017         	call	_get16bitTMR0val	;wreg free
  2984   00147C  50DE               	movf	postinc2,w,c
  2985   00147E  5C0D               	subwf	?_get16bitTMR0val^0,w,c
  2986   001480  50DE               	movf	postinc2,w,c
  2987   001482  580E               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  2988   001484  A0D8               	btfss	status,0,c
  2989   001486  EF47  F00A         	goto	u1381
  2990   00148A  EF49  F00A         	goto	u1380
  2991   00148E                     u1381:
  2992   00148E  EF30  F00A         	goto	l2720
  2993   001492                     u1380:
  2994   001492                     
  2995                           ;dc_motor.c: 245:         stop(mL, mR, straightRamp);
  2996   001492  C02E  F020         	movff	returnHome@mL,stop@mL
  2997   001496  C02F  F021         	movff	returnHome@mL+1,stop@mL+1
  2998   00149A  C030  F022         	movff	returnHome@mR,stop@mR
  2999   00149E  C031  F023         	movff	returnHome@mR+1,stop@mR+1
  3000   0014A2  C039  F024         	movff	returnHome@straightRamp,stop@straightRamp
  3001   0014A6  EC4C  F014         	call	_stop	;wreg free
  3002   0014AA                     
  3003                           ;dc_motor.c: 246:     }
  3004   0014AA  0641               	decf	returnHome@i^0,f,c
  3005   0014AC  EFAA  F007         	goto	l2640
  3006   0014B0  0012               	return		;funcret
  3007   0014B2                     __end_of_returnHome:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _turnRight *****************
  3011 ;; Defined at:
  3012 ;;		line 302 in file "dc_motor.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3015 ;;		 -> main@motorL(10), 
  3016 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3017 ;;		 -> main@motorR(10), 
  3018 ;;  turnSpeed       1   35[COMRAM] unsigned char 
  3019 ;;  turnDuration    1   36[COMRAM] unsigned char 
  3020 ;;  turnRamp        1   37[COMRAM] unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  cur_power       2   43[COMRAM] int 
  3023 ;;  i               2   41[COMRAM] int 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3033 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;Total ram usage:       14 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 7
  3040 ;; This function calls:
  3041 ;;		_setMotorPWM
  3042 ;; This function is called by:
  3043 ;;		_move
  3044 ;;		_returnHome
  3045 ;;		_calibration
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text4
  3050   002122                     __ptext4:
  3051                           	callstack 0
  3052   002122                     _turnRight:
  3053                           	callstack 22
  3054   002122                     
  3055                           ;dc_motor.c: 302: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 303: {;dc_motor.c: 304:     mL->dir
      +                          ection = 1;
  3056   002122  EE20 F001          	lfsr	2,1
  3057   002126  5020               	movf	turnRight@mL^0,w,c
  3058   002128  26D9               	addwf	fsr2l,f,c
  3059   00212A  5021               	movf	(turnRight@mL+1)^0,w,c
  3060   00212C  22DA               	addwfc	fsr2h,f,c
  3061   00212E  0E01               	movlw	1
  3062   002130  6EDF               	movwf	indf2,c
  3063                           
  3064                           ;dc_motor.c: 305:     mR->direction = 0;
  3065   002132  EE20 F001          	lfsr	2,1
  3066   002136  5022               	movf	turnRight@mR^0,w,c
  3067   002138  26D9               	addwf	fsr2l,f,c
  3068   00213A  5023               	movf	(turnRight@mR+1)^0,w,c
  3069   00213C  22DA               	addwfc	fsr2h,f,c
  3070   00213E  6ADF               	clrf	indf2,c
  3071   002140                     
  3072                           ;dc_motor.c: 306:     int i;;dc_motor.c: 307:     int cur_power;;dc_motor.c: 308:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3073   002140  0E00               	movlw	0
  3074   002142  6E2D               	movwf	(turnRight@cur_power+1)^0,c
  3075   002144  0E01               	movlw	1
  3076   002146  6E2C               	movwf	turnRight@cur_power^0,c
  3077   002148  EFF0  F010         	goto	l2416
  3078   00214C                     l2402:
  3079                           
  3080                           ;dc_motor.c: 309:         mL->power = cur_power+mL->compensation;
  3081   00214C  EE20 F009          	lfsr	2,9
  3082   002150  5020               	movf	turnRight@mL^0,w,c
  3083   002152  26D9               	addwf	fsr2l,f,c
  3084   002154  5021               	movf	(turnRight@mL+1)^0,w,c
  3085   002156  22DA               	addwfc	fsr2h,f,c
  3086   002158  50DF               	movf	indf2,w,c
  3087   00215A  242C               	addwf	turnRight@cur_power^0,w,c
  3088   00215C  C020  FFD9         	movff	turnRight@mL,fsr2l
  3089   002160  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3090   002164  6EDF               	movwf	indf2,c
  3091                           
  3092                           ;dc_motor.c: 310:         mR->power = cur_power+mR->compensation;
  3093   002166  EE20 F009          	lfsr	2,9
  3094   00216A  5022               	movf	turnRight@mR^0,w,c
  3095   00216C  26D9               	addwf	fsr2l,f,c
  3096   00216E  5023               	movf	(turnRight@mR+1)^0,w,c
  3097   002170  22DA               	addwfc	fsr2h,f,c
  3098   002172  50DF               	movf	indf2,w,c
  3099   002174  242C               	addwf	turnRight@cur_power^0,w,c
  3100   002176  C022  FFD9         	movff	turnRight@mR,fsr2l
  3101   00217A  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3102   00217E  6EDF               	movwf	indf2,c
  3103   002180                     
  3104                           ;dc_motor.c: 311:         setMotorPWM(mL);
  3105   002180  C020  F01A         	movff	turnRight@mL,setMotorPWM@m
  3106   002184  C021  F01B         	movff	turnRight@mL+1,setMotorPWM@m+1
  3107   002188  EC6B  F012         	call	_setMotorPWM	;wreg free
  3108   00218C                     
  3109                           ;dc_motor.c: 312:         setMotorPWM(mR);
  3110   00218C  C022  F01A         	movff	turnRight@mR,setMotorPWM@m
  3111   002190  C023  F01B         	movff	turnRight@mR+1,setMotorPWM@m+1
  3112   002194  EC6B  F012         	call	_setMotorPWM	;wreg free
  3113   002198                     
  3114                           ;dc_motor.c: 313:         for (i=0;i<turnRamp;i++) {
  3115   002198  0E00               	movlw	0
  3116   00219A  6E2B               	movwf	(turnRight@i+1)^0,c
  3117   00219C  0E00               	movlw	0
  3118   00219E  6E2A               	movwf	turnRight@i^0,c
  3119   0021A0  EFDC  F010         	goto	l532
  3120   0021A4                     l2410:
  3121                           
  3122                           ;dc_motor.c: 314:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3123   0021A4  0E68               	movlw	104
  3124   0021A6  6E27               	movwf	??_turnRight^0,c
  3125   0021A8  0EE4               	movlw	228
  3126   0021AA                     u2547:
  3127   0021AA  2EE8               	decfsz	wreg,f,c
  3128   0021AC  D7FE               	bra	u2547
  3129   0021AE  2E27               	decfsz	??_turnRight^0,f,c
  3130   0021B0  D7FC               	bra	u2547
  3131   0021B2  D000               	nop2	
  3132   0021B4                     
  3133                           ;dc_motor.c: 315:         }
  3134   0021B4  4A2A               	infsnz	turnRight@i^0,f,c
  3135   0021B6  2A2B               	incf	(turnRight@i+1)^0,f,c
  3136   0021B8                     l532:
  3137   0021B8  5026               	movf	turnRight@turnRamp^0,w,c
  3138   0021BA  6E27               	movwf	??_turnRight^0,c
  3139   0021BC  6A28               	clrf	(??_turnRight+1)^0,c
  3140   0021BE  5027               	movf	??_turnRight^0,w,c
  3141   0021C0  5C2A               	subwf	turnRight@i^0,w,c
  3142   0021C2  502B               	movf	(turnRight@i+1)^0,w,c
  3143   0021C4  0A80               	xorlw	128
  3144   0021C6  6E29               	movwf	(??_turnRight+2)^0,c
  3145   0021C8  5028               	movf	(??_turnRight+1)^0,w,c
  3146   0021CA  0A80               	xorlw	128
  3147   0021CC  5829               	subwfb	(??_turnRight+2)^0,w,c
  3148   0021CE  A0D8               	btfss	status,0,c
  3149   0021D0  EFEC  F010         	goto	u1121
  3150   0021D4  EFEE  F010         	goto	u1120
  3151   0021D8                     u1121:
  3152   0021D8  EFD2  F010         	goto	l2410
  3153   0021DC                     u1120:
  3154   0021DC                     
  3155                           ;dc_motor.c: 316:     }
  3156   0021DC  4A2C               	infsnz	turnRight@cur_power^0,f,c
  3157   0021DE  2A2D               	incf	(turnRight@cur_power+1)^0,f,c
  3158   0021E0                     l2416:
  3159   0021E0  5024               	movf	turnRight@turnSpeed^0,w,c
  3160   0021E2  6E27               	movwf	??_turnRight^0,c
  3161   0021E4  6A28               	clrf	(??_turnRight+1)^0,c
  3162   0021E6  502C               	movf	turnRight@cur_power^0,w,c
  3163   0021E8  5C27               	subwf	??_turnRight^0,w,c
  3164   0021EA  5028               	movf	(??_turnRight+1)^0,w,c
  3165   0021EC  0A80               	xorlw	128
  3166   0021EE  6E29               	movwf	(??_turnRight+2)^0,c
  3167   0021F0  502D               	movf	(turnRight@cur_power+1)^0,w,c
  3168   0021F2  0A80               	xorlw	128
  3169   0021F4  5829               	subwfb	(??_turnRight+2)^0,w,c
  3170   0021F6  B0D8               	btfsc	status,0,c
  3171   0021F8  EF00  F011         	goto	u1131
  3172   0021FC  EF02  F011         	goto	u1130
  3173   002200                     u1131:
  3174   002200  EFA6  F010         	goto	l2402
  3175   002204                     u1130:
  3176   002204                     
  3177                           ;dc_motor.c: 318:     for (i=0;i<turnDuration;i++) {
  3178   002204  0E00               	movlw	0
  3179   002206  6E2B               	movwf	(turnRight@i+1)^0,c
  3180   002208  0E00               	movlw	0
  3181   00220A  6E2A               	movwf	turnRight@i^0,c
  3182   00220C  EF12  F011         	goto	l536
  3183   002210                     l2420:
  3184                           
  3185                           ;dc_motor.c: 319:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3186   002210  0E68               	movlw	104
  3187   002212  6E27               	movwf	??_turnRight^0,c
  3188   002214  0EE4               	movlw	228
  3189   002216                     u2557:
  3190   002216  2EE8               	decfsz	wreg,f,c
  3191   002218  D7FE               	bra	u2557
  3192   00221A  2E27               	decfsz	??_turnRight^0,f,c
  3193   00221C  D7FC               	bra	u2557
  3194   00221E  D000               	nop2	
  3195   002220                     
  3196                           ;dc_motor.c: 320:         }
  3197   002220  4A2A               	infsnz	turnRight@i^0,f,c
  3198   002222  2A2B               	incf	(turnRight@i+1)^0,f,c
  3199   002224                     l536:
  3200   002224  5025               	movf	turnRight@turnDuration^0,w,c
  3201   002226  6E27               	movwf	??_turnRight^0,c
  3202   002228  6A28               	clrf	(??_turnRight+1)^0,c
  3203   00222A  5027               	movf	??_turnRight^0,w,c
  3204   00222C  5C2A               	subwf	turnRight@i^0,w,c
  3205   00222E  502B               	movf	(turnRight@i+1)^0,w,c
  3206   002230  0A80               	xorlw	128
  3207   002232  6E29               	movwf	(??_turnRight+2)^0,c
  3208   002234  5028               	movf	(??_turnRight+1)^0,w,c
  3209   002236  0A80               	xorlw	128
  3210   002238  5829               	subwfb	(??_turnRight+2)^0,w,c
  3211   00223A  A0D8               	btfss	status,0,c
  3212   00223C  EF22  F011         	goto	u1141
  3213   002240  EF24  F011         	goto	u1140
  3214   002244                     u1141:
  3215   002244  EF08  F011         	goto	l2420
  3216   002248                     u1140:
  3217   002248                     
  3218                           ;dc_motor.c: 322:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3219   002248  C024  F02C         	movff	turnRight@turnSpeed,turnRight@cur_power
  3220   00224C  6A2D               	clrf	(turnRight@cur_power+1)^0,c
  3221   00224E                     l2424:
  3222   00224E  BE2D               	btfsc	(turnRight@cur_power+1)^0,7,c
  3223   002250  EF2E  F011         	goto	u1150
  3224   002254  EF2C  F011         	goto	u1151
  3225   002258                     u1151:
  3226   002258  EF30  F011         	goto	l2428
  3227   00225C                     u1150:
  3228   00225C  EF7D  F011         	goto	l544
  3229   002260                     l2428:
  3230                           
  3231                           ;dc_motor.c: 323:         mL->power = cur_power+mL->compensation;
  3232   002260  EE20 F009          	lfsr	2,9
  3233   002264  5020               	movf	turnRight@mL^0,w,c
  3234   002266  26D9               	addwf	fsr2l,f,c
  3235   002268  5021               	movf	(turnRight@mL+1)^0,w,c
  3236   00226A  22DA               	addwfc	fsr2h,f,c
  3237   00226C  50DF               	movf	indf2,w,c
  3238   00226E  242C               	addwf	turnRight@cur_power^0,w,c
  3239   002270  C020  FFD9         	movff	turnRight@mL,fsr2l
  3240   002274  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3241   002278  6EDF               	movwf	indf2,c
  3242                           
  3243                           ;dc_motor.c: 324:         mR->power = cur_power+mR->compensation;
  3244   00227A  EE20 F009          	lfsr	2,9
  3245   00227E  5022               	movf	turnRight@mR^0,w,c
  3246   002280  26D9               	addwf	fsr2l,f,c
  3247   002282  5023               	movf	(turnRight@mR+1)^0,w,c
  3248   002284  22DA               	addwfc	fsr2h,f,c
  3249   002286  50DF               	movf	indf2,w,c
  3250   002288  242C               	addwf	turnRight@cur_power^0,w,c
  3251   00228A  C022  FFD9         	movff	turnRight@mR,fsr2l
  3252   00228E  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3253   002292  6EDF               	movwf	indf2,c
  3254   002294                     
  3255                           ;dc_motor.c: 325:         setMotorPWM(mL);
  3256   002294  C020  F01A         	movff	turnRight@mL,setMotorPWM@m
  3257   002298  C021  F01B         	movff	turnRight@mL+1,setMotorPWM@m+1
  3258   00229C  EC6B  F012         	call	_setMotorPWM	;wreg free
  3259   0022A0                     
  3260                           ;dc_motor.c: 326:         setMotorPWM(mR);
  3261   0022A0  C022  F01A         	movff	turnRight@mR,setMotorPWM@m
  3262   0022A4  C023  F01B         	movff	turnRight@mR+1,setMotorPWM@m+1
  3263   0022A8  EC6B  F012         	call	_setMotorPWM	;wreg free
  3264   0022AC                     
  3265                           ;dc_motor.c: 327:         for (i=0;i<turnRamp;i++) {
  3266   0022AC  0E00               	movlw	0
  3267   0022AE  6E2B               	movwf	(turnRight@i+1)^0,c
  3268   0022B0  0E00               	movlw	0
  3269   0022B2  6E2A               	movwf	turnRight@i^0,c
  3270   0022B4  EF66  F011         	goto	l541
  3271   0022B8                     l2436:
  3272                           
  3273                           ;dc_motor.c: 328:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3274   0022B8  0E68               	movlw	104
  3275   0022BA  6E27               	movwf	??_turnRight^0,c
  3276   0022BC  0EE4               	movlw	228
  3277   0022BE                     u2567:
  3278   0022BE  2EE8               	decfsz	wreg,f,c
  3279   0022C0  D7FE               	bra	u2567
  3280   0022C2  2E27               	decfsz	??_turnRight^0,f,c
  3281   0022C4  D7FC               	bra	u2567
  3282   0022C6  D000               	nop2	
  3283   0022C8                     
  3284                           ;dc_motor.c: 329:         }
  3285   0022C8  4A2A               	infsnz	turnRight@i^0,f,c
  3286   0022CA  2A2B               	incf	(turnRight@i+1)^0,f,c
  3287   0022CC                     l541:
  3288   0022CC  5026               	movf	turnRight@turnRamp^0,w,c
  3289   0022CE  6E27               	movwf	??_turnRight^0,c
  3290   0022D0  6A28               	clrf	(??_turnRight+1)^0,c
  3291   0022D2  5027               	movf	??_turnRight^0,w,c
  3292   0022D4  5C2A               	subwf	turnRight@i^0,w,c
  3293   0022D6  502B               	movf	(turnRight@i+1)^0,w,c
  3294   0022D8  0A80               	xorlw	128
  3295   0022DA  6E29               	movwf	(??_turnRight+2)^0,c
  3296   0022DC  5028               	movf	(??_turnRight+1)^0,w,c
  3297   0022DE  0A80               	xorlw	128
  3298   0022E0  5829               	subwfb	(??_turnRight+2)^0,w,c
  3299   0022E2  A0D8               	btfss	status,0,c
  3300   0022E4  EF76  F011         	goto	u1161
  3301   0022E8  EF78  F011         	goto	u1160
  3302   0022EC                     u1161:
  3303   0022EC  EF5C  F011         	goto	l2436
  3304   0022F0                     u1160:
  3305   0022F0                     
  3306                           ;dc_motor.c: 330:     }
  3307   0022F0  062C               	decf	turnRight@cur_power^0,f,c
  3308   0022F2  A0D8               	btfss	status,0,c
  3309   0022F4  062D               	decf	(turnRight@cur_power+1)^0,f,c
  3310   0022F6  EF27  F011         	goto	l2424
  3311   0022FA                     l544:
  3312   0022FA  0012               	return		;funcret
  3313   0022FC                     __end_of_turnRight:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function _turnLeft *****************
  3317 ;; Defined at:
  3318 ;;		line 270 in file "dc_motor.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3321 ;;		 -> main@motorL(10), 
  3322 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3323 ;;		 -> main@motorR(10), 
  3324 ;;  turnSpeed       1   35[COMRAM] unsigned char 
  3325 ;;  turnDuration    1   36[COMRAM] unsigned char 
  3326 ;;  turnRamp        1   37[COMRAM] unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  cur_power       2   43[COMRAM] int 
  3329 ;;  i               2   41[COMRAM] int 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3339 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3343 ;;Total ram usage:       14 bytes
  3344 ;; Hardware stack levels used: 1
  3345 ;; Hardware stack levels required when called: 7
  3346 ;; This function calls:
  3347 ;;		_setMotorPWM
  3348 ;; This function is called by:
  3349 ;;		_move
  3350 ;;		_returnHome
  3351 ;;		_calibration
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text5
  3356   0022FC                     __ptext5:
  3357                           	callstack 0
  3358   0022FC                     _turnLeft:
  3359                           	callstack 22
  3360   0022FC                     
  3361                           ;dc_motor.c: 270: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 271: {;dc_motor.c: 272:     mL->dire
      +                          ction = 0;
  3362   0022FC  EE20 F001          	lfsr	2,1
  3363   002300  5020               	movf	turnLeft@mL^0,w,c
  3364   002302  26D9               	addwf	fsr2l,f,c
  3365   002304  5021               	movf	(turnLeft@mL+1)^0,w,c
  3366   002306  22DA               	addwfc	fsr2h,f,c
  3367   002308  6ADF               	clrf	indf2,c
  3368                           
  3369                           ;dc_motor.c: 273:     mR->direction = 1;
  3370   00230A  EE20 F001          	lfsr	2,1
  3371   00230E  5022               	movf	turnLeft@mR^0,w,c
  3372   002310  26D9               	addwf	fsr2l,f,c
  3373   002312  5023               	movf	(turnLeft@mR+1)^0,w,c
  3374   002314  22DA               	addwfc	fsr2h,f,c
  3375   002316  0E01               	movlw	1
  3376   002318  6EDF               	movwf	indf2,c
  3377   00231A                     
  3378                           ;dc_motor.c: 274:     int i;;dc_motor.c: 275:     int cur_power;;dc_motor.c: 276:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3379   00231A  0E00               	movlw	0
  3380   00231C  6E2D               	movwf	(turnLeft@cur_power+1)^0,c
  3381   00231E  0E01               	movlw	1
  3382   002320  6E2C               	movwf	turnLeft@cur_power^0,c
  3383   002322  EFDD  F011         	goto	l2462
  3384   002326                     l2448:
  3385                           
  3386                           ;dc_motor.c: 277:         mL->power = cur_power+mL->compensation;
  3387   002326  EE20 F009          	lfsr	2,9
  3388   00232A  5020               	movf	turnLeft@mL^0,w,c
  3389   00232C  26D9               	addwf	fsr2l,f,c
  3390   00232E  5021               	movf	(turnLeft@mL+1)^0,w,c
  3391   002330  22DA               	addwfc	fsr2h,f,c
  3392   002332  50DF               	movf	indf2,w,c
  3393   002334  242C               	addwf	turnLeft@cur_power^0,w,c
  3394   002336  C020  FFD9         	movff	turnLeft@mL,fsr2l
  3395   00233A  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  3396   00233E  6EDF               	movwf	indf2,c
  3397                           
  3398                           ;dc_motor.c: 278:         mR->power = cur_power+mR->compensation;
  3399   002340  EE20 F009          	lfsr	2,9
  3400   002344  5022               	movf	turnLeft@mR^0,w,c
  3401   002346  26D9               	addwf	fsr2l,f,c
  3402   002348  5023               	movf	(turnLeft@mR+1)^0,w,c
  3403   00234A  22DA               	addwfc	fsr2h,f,c
  3404   00234C  50DF               	movf	indf2,w,c
  3405   00234E  242C               	addwf	turnLeft@cur_power^0,w,c
  3406   002350  C022  FFD9         	movff	turnLeft@mR,fsr2l
  3407   002354  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  3408   002358  6EDF               	movwf	indf2,c
  3409   00235A                     
  3410                           ;dc_motor.c: 279:         setMotorPWM(mL);
  3411   00235A  C020  F01A         	movff	turnLeft@mL,setMotorPWM@m
  3412   00235E  C021  F01B         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3413   002362  EC6B  F012         	call	_setMotorPWM	;wreg free
  3414   002366                     
  3415                           ;dc_motor.c: 280:         setMotorPWM(mR);
  3416   002366  C022  F01A         	movff	turnLeft@mR,setMotorPWM@m
  3417   00236A  C023  F01B         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3418   00236E  EC6B  F012         	call	_setMotorPWM	;wreg free
  3419   002372                     
  3420                           ;dc_motor.c: 281:         for (i=0;i<turnRamp;i++) {
  3421   002372  0E00               	movlw	0
  3422   002374  6E2B               	movwf	(turnLeft@i+1)^0,c
  3423   002376  0E00               	movlw	0
  3424   002378  6E2A               	movwf	turnLeft@i^0,c
  3425   00237A  EFC9  F011         	goto	l515
  3426   00237E                     l2456:
  3427                           
  3428                           ;dc_motor.c: 282:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3429   00237E  0E68               	movlw	104
  3430   002380  6E27               	movwf	??_turnLeft^0,c
  3431   002382  0EE4               	movlw	228
  3432   002384                     u2577:
  3433   002384  2EE8               	decfsz	wreg,f,c
  3434   002386  D7FE               	bra	u2577
  3435   002388  2E27               	decfsz	??_turnLeft^0,f,c
  3436   00238A  D7FC               	bra	u2577
  3437   00238C  D000               	nop2	
  3438   00238E                     
  3439                           ;dc_motor.c: 283:         }
  3440   00238E  4A2A               	infsnz	turnLeft@i^0,f,c
  3441   002390  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3442   002392                     l515:
  3443   002392  5026               	movf	turnLeft@turnRamp^0,w,c
  3444   002394  6E27               	movwf	??_turnLeft^0,c
  3445   002396  6A28               	clrf	(??_turnLeft+1)^0,c
  3446   002398  5027               	movf	??_turnLeft^0,w,c
  3447   00239A  5C2A               	subwf	turnLeft@i^0,w,c
  3448   00239C  502B               	movf	(turnLeft@i+1)^0,w,c
  3449   00239E  0A80               	xorlw	128
  3450   0023A0  6E29               	movwf	(??_turnLeft+2)^0,c
  3451   0023A2  5028               	movf	(??_turnLeft+1)^0,w,c
  3452   0023A4  0A80               	xorlw	128
  3453   0023A6  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3454   0023A8  A0D8               	btfss	status,0,c
  3455   0023AA  EFD9  F011         	goto	u1171
  3456   0023AE  EFDB  F011         	goto	u1170
  3457   0023B2                     u1171:
  3458   0023B2  EFBF  F011         	goto	l2456
  3459   0023B6                     u1170:
  3460   0023B6                     
  3461                           ;dc_motor.c: 284:     }
  3462   0023B6  4A2C               	infsnz	turnLeft@cur_power^0,f,c
  3463   0023B8  2A2D               	incf	(turnLeft@cur_power+1)^0,f,c
  3464   0023BA                     l2462:
  3465   0023BA  5024               	movf	turnLeft@turnSpeed^0,w,c
  3466   0023BC  6E27               	movwf	??_turnLeft^0,c
  3467   0023BE  6A28               	clrf	(??_turnLeft+1)^0,c
  3468   0023C0  502C               	movf	turnLeft@cur_power^0,w,c
  3469   0023C2  5C27               	subwf	??_turnLeft^0,w,c
  3470   0023C4  5028               	movf	(??_turnLeft+1)^0,w,c
  3471   0023C6  0A80               	xorlw	128
  3472   0023C8  6E29               	movwf	(??_turnLeft+2)^0,c
  3473   0023CA  502D               	movf	(turnLeft@cur_power+1)^0,w,c
  3474   0023CC  0A80               	xorlw	128
  3475   0023CE  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3476   0023D0  B0D8               	btfsc	status,0,c
  3477   0023D2  EFED  F011         	goto	u1181
  3478   0023D6  EFEF  F011         	goto	u1180
  3479   0023DA                     u1181:
  3480   0023DA  EF93  F011         	goto	l2448
  3481   0023DE                     u1180:
  3482   0023DE                     
  3483                           ;dc_motor.c: 286:     for (i=0;i<turnDuration;i++) {
  3484   0023DE  0E00               	movlw	0
  3485   0023E0  6E2B               	movwf	(turnLeft@i+1)^0,c
  3486   0023E2  0E00               	movlw	0
  3487   0023E4  6E2A               	movwf	turnLeft@i^0,c
  3488   0023E6  EFFF  F011         	goto	l519
  3489   0023EA                     l2466:
  3490                           
  3491                           ;dc_motor.c: 287:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3492   0023EA  0E68               	movlw	104
  3493   0023EC  6E27               	movwf	??_turnLeft^0,c
  3494   0023EE  0EE4               	movlw	228
  3495   0023F0                     u2587:
  3496   0023F0  2EE8               	decfsz	wreg,f,c
  3497   0023F2  D7FE               	bra	u2587
  3498   0023F4  2E27               	decfsz	??_turnLeft^0,f,c
  3499   0023F6  D7FC               	bra	u2587
  3500   0023F8  D000               	nop2	
  3501   0023FA                     
  3502                           ;dc_motor.c: 288:         }
  3503   0023FA  4A2A               	infsnz	turnLeft@i^0,f,c
  3504   0023FC  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3505   0023FE                     l519:
  3506   0023FE  5025               	movf	turnLeft@turnDuration^0,w,c
  3507   002400  6E27               	movwf	??_turnLeft^0,c
  3508   002402  6A28               	clrf	(??_turnLeft+1)^0,c
  3509   002404  5027               	movf	??_turnLeft^0,w,c
  3510   002406  5C2A               	subwf	turnLeft@i^0,w,c
  3511   002408  502B               	movf	(turnLeft@i+1)^0,w,c
  3512   00240A  0A80               	xorlw	128
  3513   00240C  6E29               	movwf	(??_turnLeft+2)^0,c
  3514   00240E  5028               	movf	(??_turnLeft+1)^0,w,c
  3515   002410  0A80               	xorlw	128
  3516   002412  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3517   002414  A0D8               	btfss	status,0,c
  3518   002416  EF0F  F012         	goto	u1191
  3519   00241A  EF11  F012         	goto	u1190
  3520   00241E                     u1191:
  3521   00241E  EFF5  F011         	goto	l2466
  3522   002422                     u1190:
  3523   002422                     
  3524                           ;dc_motor.c: 290:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3525   002422  C024  F02C         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  3526   002426  6A2D               	clrf	(turnLeft@cur_power+1)^0,c
  3527   002428                     l2470:
  3528   002428  BE2D               	btfsc	(turnLeft@cur_power+1)^0,7,c
  3529   00242A  EF1B  F012         	goto	u1200
  3530   00242E  EF19  F012         	goto	u1201
  3531   002432                     u1201:
  3532   002432  EF1D  F012         	goto	l2474
  3533   002436                     u1200:
  3534   002436  EF6A  F012         	goto	l527
  3535   00243A                     l2474:
  3536                           
  3537                           ;dc_motor.c: 291:         mL->power = cur_power+mL->compensation;
  3538   00243A  EE20 F009          	lfsr	2,9
  3539   00243E  5020               	movf	turnLeft@mL^0,w,c
  3540   002440  26D9               	addwf	fsr2l,f,c
  3541   002442  5021               	movf	(turnLeft@mL+1)^0,w,c
  3542   002444  22DA               	addwfc	fsr2h,f,c
  3543   002446  50DF               	movf	indf2,w,c
  3544   002448  242C               	addwf	turnLeft@cur_power^0,w,c
  3545   00244A  C020  FFD9         	movff	turnLeft@mL,fsr2l
  3546   00244E  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  3547   002452  6EDF               	movwf	indf2,c
  3548                           
  3549                           ;dc_motor.c: 292:         mR->power = cur_power+mR->compensation;
  3550   002454  EE20 F009          	lfsr	2,9
  3551   002458  5022               	movf	turnLeft@mR^0,w,c
  3552   00245A  26D9               	addwf	fsr2l,f,c
  3553   00245C  5023               	movf	(turnLeft@mR+1)^0,w,c
  3554   00245E  22DA               	addwfc	fsr2h,f,c
  3555   002460  50DF               	movf	indf2,w,c
  3556   002462  242C               	addwf	turnLeft@cur_power^0,w,c
  3557   002464  C022  FFD9         	movff	turnLeft@mR,fsr2l
  3558   002468  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  3559   00246C  6EDF               	movwf	indf2,c
  3560   00246E                     
  3561                           ;dc_motor.c: 293:         setMotorPWM(mL);
  3562   00246E  C020  F01A         	movff	turnLeft@mL,setMotorPWM@m
  3563   002472  C021  F01B         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3564   002476  EC6B  F012         	call	_setMotorPWM	;wreg free
  3565   00247A                     
  3566                           ;dc_motor.c: 294:         setMotorPWM(mR);
  3567   00247A  C022  F01A         	movff	turnLeft@mR,setMotorPWM@m
  3568   00247E  C023  F01B         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3569   002482  EC6B  F012         	call	_setMotorPWM	;wreg free
  3570   002486                     
  3571                           ;dc_motor.c: 295:         for (i=0;i<turnRamp;i++) {
  3572   002486  0E00               	movlw	0
  3573   002488  6E2B               	movwf	(turnLeft@i+1)^0,c
  3574   00248A  0E00               	movlw	0
  3575   00248C  6E2A               	movwf	turnLeft@i^0,c
  3576   00248E  EF53  F012         	goto	l524
  3577   002492                     l2482:
  3578                           
  3579                           ;dc_motor.c: 296:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3580   002492  0E68               	movlw	104
  3581   002494  6E27               	movwf	??_turnLeft^0,c
  3582   002496  0EE4               	movlw	228
  3583   002498                     u2597:
  3584   002498  2EE8               	decfsz	wreg,f,c
  3585   00249A  D7FE               	bra	u2597
  3586   00249C  2E27               	decfsz	??_turnLeft^0,f,c
  3587   00249E  D7FC               	bra	u2597
  3588   0024A0  D000               	nop2	
  3589   0024A2                     
  3590                           ;dc_motor.c: 297:         }
  3591   0024A2  4A2A               	infsnz	turnLeft@i^0,f,c
  3592   0024A4  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3593   0024A6                     l524:
  3594   0024A6  5026               	movf	turnLeft@turnRamp^0,w,c
  3595   0024A8  6E27               	movwf	??_turnLeft^0,c
  3596   0024AA  6A28               	clrf	(??_turnLeft+1)^0,c
  3597   0024AC  5027               	movf	??_turnLeft^0,w,c
  3598   0024AE  5C2A               	subwf	turnLeft@i^0,w,c
  3599   0024B0  502B               	movf	(turnLeft@i+1)^0,w,c
  3600   0024B2  0A80               	xorlw	128
  3601   0024B4  6E29               	movwf	(??_turnLeft+2)^0,c
  3602   0024B6  5028               	movf	(??_turnLeft+1)^0,w,c
  3603   0024B8  0A80               	xorlw	128
  3604   0024BA  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3605   0024BC  A0D8               	btfss	status,0,c
  3606   0024BE  EF63  F012         	goto	u1211
  3607   0024C2  EF65  F012         	goto	u1210
  3608   0024C6                     u1211:
  3609   0024C6  EF49  F012         	goto	l2482
  3610   0024CA                     u1210:
  3611   0024CA                     
  3612                           ;dc_motor.c: 298:     }
  3613   0024CA  062C               	decf	turnLeft@cur_power^0,f,c
  3614   0024CC  A0D8               	btfss	status,0,c
  3615   0024CE  062D               	decf	(turnLeft@cur_power+1)^0,f,c
  3616   0024D0  EF14  F012         	goto	l2470
  3617   0024D4                     l527:
  3618   0024D4  0012               	return		;funcret
  3619   0024D6                     __end_of_turnLeft:
  3620                           	callstack 0
  3621                           
  3622 ;; *************** function _stop *****************
  3623 ;; Defined at:
  3624 ;;		line 250 in file "dc_motor.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3627 ;;		 -> main@motorL(10), 
  3628 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3629 ;;		 -> main@motorR(10), 
  3630 ;;  straightRamp    1   35[COMRAM] unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  cur_power       2   41[COMRAM] int 
  3633 ;;  i               2   39[COMRAM] int 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3643 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3647 ;;Total ram usage:       12 bytes
  3648 ;; Hardware stack levels used: 1
  3649 ;; Hardware stack levels required when called: 7
  3650 ;; This function calls:
  3651 ;;		_setMotorPWM
  3652 ;; This function is called by:
  3653 ;;		_main
  3654 ;;		_returnHome
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text6
  3659   002898                     __ptext6:
  3660                           	callstack 0
  3661   002898                     _stop:
  3662                           	callstack 23
  3663   002898                     
  3664                           ;dc_motor.c: 250: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 251: {;dc_motor.c: 252:     mL->direction = 1;
  3665   002898  EE20 F001          	lfsr	2,1
  3666   00289C  5020               	movf	stop@mL^0,w,c
  3667   00289E  26D9               	addwf	fsr2l,f,c
  3668   0028A0  5021               	movf	(stop@mL+1)^0,w,c
  3669   0028A2  22DA               	addwfc	fsr2h,f,c
  3670   0028A4  0E01               	movlw	1
  3671   0028A6  6EDF               	movwf	indf2,c
  3672                           
  3673                           ;dc_motor.c: 253:     mR->direction = 1;
  3674   0028A8  EE20 F001          	lfsr	2,1
  3675   0028AC  5022               	movf	stop@mR^0,w,c
  3676   0028AE  26D9               	addwf	fsr2l,f,c
  3677   0028B0  5023               	movf	(stop@mR+1)^0,w,c
  3678   0028B2  22DA               	addwfc	fsr2h,f,c
  3679   0028B4  0E01               	movlw	1
  3680   0028B6  6EDF               	movwf	indf2,c
  3681                           
  3682                           ;dc_motor.c: 254:     int i;;dc_motor.c: 255:     int cur_power;;dc_motor.c: 256:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  3683   0028B8  C020  FFD9         	movff	stop@mL,fsr2l
  3684   0028BC  C021  FFDA         	movff	stop@mL+1,fsr2h
  3685   0028C0  50DF               	movf	indf2,w,c
  3686   0028C2  6E25               	movwf	??_stop^0,c
  3687   0028C4  EE20 F009          	lfsr	2,9
  3688   0028C8  5020               	movf	stop@mL^0,w,c
  3689   0028CA  26D9               	addwf	fsr2l,f,c
  3690   0028CC  5021               	movf	(stop@mL+1)^0,w,c
  3691   0028CE  22DA               	addwfc	fsr2h,f,c
  3692   0028D0  50DF               	movf	indf2,w,c
  3693   0028D2  6E26               	movwf	(??_stop+1)^0,c
  3694   0028D4  5026               	movf	(??_stop+1)^0,w,c
  3695   0028D6  5C25               	subwf	??_stop^0,w,c
  3696   0028D8  6E2A               	movwf	stop@cur_power^0,c
  3697   0028DA  6A2B               	clrf	(stop@cur_power+1)^0,c
  3698   0028DC  A0D8               	btfss	status,0,c
  3699   0028DE  062B               	decf	(stop@cur_power+1)^0,f,c
  3700   0028E0                     l2372:
  3701   0028E0  BE2B               	btfsc	(stop@cur_power+1)^0,7,c
  3702   0028E2  EF77  F014         	goto	u1100
  3703   0028E6  EF75  F014         	goto	u1101
  3704   0028EA                     u1101:
  3705   0028EA  EF79  F014         	goto	l2376
  3706   0028EE                     u1100:
  3707   0028EE  EFC6  F014         	goto	l2392
  3708   0028F2                     l2376:
  3709                           
  3710                           ;dc_motor.c: 257:         mL->power = cur_power+mL->compensation;
  3711   0028F2  EE20 F009          	lfsr	2,9
  3712   0028F6  5020               	movf	stop@mL^0,w,c
  3713   0028F8  26D9               	addwf	fsr2l,f,c
  3714   0028FA  5021               	movf	(stop@mL+1)^0,w,c
  3715   0028FC  22DA               	addwfc	fsr2h,f,c
  3716   0028FE  50DF               	movf	indf2,w,c
  3717   002900  242A               	addwf	stop@cur_power^0,w,c
  3718   002902  C020  FFD9         	movff	stop@mL,fsr2l
  3719   002906  C021  FFDA         	movff	stop@mL+1,fsr2h
  3720   00290A  6EDF               	movwf	indf2,c
  3721                           
  3722                           ;dc_motor.c: 258:         mR->power = cur_power+mR->compensation;
  3723   00290C  EE20 F009          	lfsr	2,9
  3724   002910  5022               	movf	stop@mR^0,w,c
  3725   002912  26D9               	addwf	fsr2l,f,c
  3726   002914  5023               	movf	(stop@mR+1)^0,w,c
  3727   002916  22DA               	addwfc	fsr2h,f,c
  3728   002918  50DF               	movf	indf2,w,c
  3729   00291A  242A               	addwf	stop@cur_power^0,w,c
  3730   00291C  C022  FFD9         	movff	stop@mR,fsr2l
  3731   002920  C023  FFDA         	movff	stop@mR+1,fsr2h
  3732   002924  6EDF               	movwf	indf2,c
  3733   002926                     
  3734                           ;dc_motor.c: 259:         setMotorPWM(mL);
  3735   002926  C020  F01A         	movff	stop@mL,setMotorPWM@m
  3736   00292A  C021  F01B         	movff	stop@mL+1,setMotorPWM@m+1
  3737   00292E  EC6B  F012         	call	_setMotorPWM	;wreg free
  3738   002932                     
  3739                           ;dc_motor.c: 260:         setMotorPWM(mR);
  3740   002932  C022  F01A         	movff	stop@mR,setMotorPWM@m
  3741   002936  C023  F01B         	movff	stop@mR+1,setMotorPWM@m+1
  3742   00293A  EC6B  F012         	call	_setMotorPWM	;wreg free
  3743   00293E                     
  3744                           ;dc_motor.c: 261:         for (i=0;i<straightRamp;i++) {
  3745   00293E  0E00               	movlw	0
  3746   002940  6E29               	movwf	(stop@i+1)^0,c
  3747   002942  0E00               	movlw	0
  3748   002944  6E28               	movwf	stop@i^0,c
  3749   002946  EFAF  F014         	goto	l507
  3750   00294A                     l2384:
  3751                           
  3752                           ;dc_motor.c: 262:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3753   00294A  0E68               	movlw	104
  3754   00294C  6E25               	movwf	??_stop^0,c
  3755   00294E  0EE4               	movlw	228
  3756   002950                     u2607:
  3757   002950  2EE8               	decfsz	wreg,f,c
  3758   002952  D7FE               	bra	u2607
  3759   002954  2E25               	decfsz	??_stop^0,f,c
  3760   002956  D7FC               	bra	u2607
  3761   002958  D000               	nop2	
  3762   00295A                     
  3763                           ;dc_motor.c: 263:         }
  3764   00295A  4A28               	infsnz	stop@i^0,f,c
  3765   00295C  2A29               	incf	(stop@i+1)^0,f,c
  3766   00295E                     l507:
  3767   00295E  5024               	movf	stop@straightRamp^0,w,c
  3768   002960  6E25               	movwf	??_stop^0,c
  3769   002962  6A26               	clrf	(??_stop+1)^0,c
  3770   002964  5025               	movf	??_stop^0,w,c
  3771   002966  5C28               	subwf	stop@i^0,w,c
  3772   002968  5029               	movf	(stop@i+1)^0,w,c
  3773   00296A  0A80               	xorlw	128
  3774   00296C  6E27               	movwf	(??_stop+2)^0,c
  3775   00296E  5026               	movf	(??_stop+1)^0,w,c
  3776   002970  0A80               	xorlw	128
  3777   002972  5827               	subwfb	(??_stop+2)^0,w,c
  3778   002974  A0D8               	btfss	status,0,c
  3779   002976  EFBF  F014         	goto	u1111
  3780   00297A  EFC1  F014         	goto	u1110
  3781   00297E                     u1111:
  3782   00297E  EFA5  F014         	goto	l2384
  3783   002982                     u1110:
  3784   002982                     
  3785                           ;dc_motor.c: 264:     }
  3786   002982  062A               	decf	stop@cur_power^0,f,c
  3787   002984  A0D8               	btfss	status,0,c
  3788   002986  062B               	decf	(stop@cur_power+1)^0,f,c
  3789   002988  EF70  F014         	goto	l2372
  3790   00298C                     l2392:
  3791                           
  3792                           ;dc_motor.c: 265:     mL->power = 0;
  3793   00298C  C020  FFD9         	movff	stop@mL,fsr2l
  3794   002990  C021  FFDA         	movff	stop@mL+1,fsr2h
  3795   002994  6ADF               	clrf	indf2,c
  3796                           
  3797                           ;dc_motor.c: 266:     mR->power = 0;
  3798   002996  C022  FFD9         	movff	stop@mR,fsr2l
  3799   00299A  C023  FFDA         	movff	stop@mR+1,fsr2h
  3800   00299E  6ADF               	clrf	indf2,c
  3801   0029A0  0012               	return		;funcret
  3802   0029A2                     __end_of_stop:
  3803                           	callstack 0
  3804                           
  3805 ;; *************** function _reverseOneSquare *****************
  3806 ;; Defined at:
  3807 ;;		line 351 in file "dc_motor.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3810 ;;		 -> main@motorL(10), 
  3811 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3812 ;;		 -> main@motorR(10), 
  3813 ;;  straightSpee    1   35[COMRAM] unsigned char 
  3814 ;;  reverseDurat    1   36[COMRAM] unsigned char 
  3815 ;;  straightRamp    1   37[COMRAM] unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  cur_power       2   43[COMRAM] int 
  3818 ;;  i               2   41[COMRAM] int 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3828 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3829 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3830 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3831 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3832 ;;Total ram usage:       14 bytes
  3833 ;; Hardware stack levels used: 1
  3834 ;; Hardware stack levels required when called: 7
  3835 ;; This function calls:
  3836 ;;		_setMotorPWM
  3837 ;; This function is called by:
  3838 ;;		_move
  3839 ;;		_returnHome
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text7
  3844   001F36                     __ptext7:
  3845                           	callstack 0
  3846   001F36                     _reverseOneSquare:
  3847                           	callstack 22
  3848   001F36                     
  3849                           ;dc_motor.c: 351: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 352: {;dc_motor.c
      +                          : 353:     mL->direction = 0;
  3850   001F36  EE20 F001          	lfsr	2,1
  3851   001F3A  5020               	movf	reverseOneSquare@mL^0,w,c
  3852   001F3C  26D9               	addwf	fsr2l,f,c
  3853   001F3E  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  3854   001F40  22DA               	addwfc	fsr2h,f,c
  3855   001F42  6ADF               	clrf	indf2,c
  3856                           
  3857                           ;dc_motor.c: 354:     mR->direction = 0;
  3858   001F44  EE20 F001          	lfsr	2,1
  3859   001F48  5022               	movf	reverseOneSquare@mR^0,w,c
  3860   001F4A  26D9               	addwf	fsr2l,f,c
  3861   001F4C  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  3862   001F4E  22DA               	addwfc	fsr2h,f,c
  3863   001F50  6ADF               	clrf	indf2,c
  3864   001F52                     
  3865                           ;dc_motor.c: 355:     int i;;dc_motor.c: 356:     int cur_power;;dc_motor.c: 357:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3866   001F52  0E00               	movlw	0
  3867   001F54  6E2D               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3868   001F56  0E01               	movlw	1
  3869   001F58  6E2C               	movwf	reverseOneSquare@cur_power^0,c
  3870   001F5A  EFF9  F00F         	goto	l2508
  3871   001F5E                     l2494:
  3872                           
  3873                           ;dc_motor.c: 358:         mL->power = cur_power+mL->compensation;
  3874   001F5E  EE20 F009          	lfsr	2,9
  3875   001F62  5020               	movf	reverseOneSquare@mL^0,w,c
  3876   001F64  26D9               	addwf	fsr2l,f,c
  3877   001F66  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  3878   001F68  22DA               	addwfc	fsr2h,f,c
  3879   001F6A  50DF               	movf	indf2,w,c
  3880   001F6C  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  3881   001F6E  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  3882   001F72  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  3883   001F76  6EDF               	movwf	indf2,c
  3884                           
  3885                           ;dc_motor.c: 359:         mR->power = cur_power+mR->compensation;
  3886   001F78  EE20 F009          	lfsr	2,9
  3887   001F7C  5022               	movf	reverseOneSquare@mR^0,w,c
  3888   001F7E  26D9               	addwf	fsr2l,f,c
  3889   001F80  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  3890   001F82  22DA               	addwfc	fsr2h,f,c
  3891   001F84  50DF               	movf	indf2,w,c
  3892   001F86  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  3893   001F88  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  3894   001F8C  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  3895   001F90  6EDF               	movwf	indf2,c
  3896   001F92                     
  3897                           ;dc_motor.c: 360:         setMotorPWM(mL);
  3898   001F92  C020  F01A         	movff	reverseOneSquare@mL,setMotorPWM@m
  3899   001F96  C021  F01B         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  3900   001F9A  EC6B  F012         	call	_setMotorPWM	;wreg free
  3901   001F9E                     
  3902                           ;dc_motor.c: 361:         setMotorPWM(mR);
  3903   001F9E  C022  F01A         	movff	reverseOneSquare@mR,setMotorPWM@m
  3904   001FA2  C023  F01B         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  3905   001FA6  EC6B  F012         	call	_setMotorPWM	;wreg free
  3906   001FAA                     
  3907                           ;dc_motor.c: 362:         for (i=0;i<straightRamp;i++) {
  3908   001FAA  0E00               	movlw	0
  3909   001FAC  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  3910   001FAE  0E00               	movlw	0
  3911   001FB0  6E2A               	movwf	reverseOneSquare@i^0,c
  3912   001FB2  EFE5  F00F         	goto	l558
  3913   001FB6                     l2502:
  3914                           
  3915                           ;dc_motor.c: 363:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3916   001FB6  0E68               	movlw	104
  3917   001FB8  6E27               	movwf	??_reverseOneSquare^0,c
  3918   001FBA  0EE4               	movlw	228
  3919   001FBC                     u2617:
  3920   001FBC  2EE8               	decfsz	wreg,f,c
  3921   001FBE  D7FE               	bra	u2617
  3922   001FC0  2E27               	decfsz	??_reverseOneSquare^0,f,c
  3923   001FC2  D7FC               	bra	u2617
  3924   001FC4  D000               	nop2	
  3925   001FC6                     
  3926                           ;dc_motor.c: 364:         }
  3927   001FC6  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  3928   001FC8  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  3929   001FCA                     l558:
  3930   001FCA  5026               	movf	reverseOneSquare@straightRamp^0,w,c
  3931   001FCC  6E27               	movwf	??_reverseOneSquare^0,c
  3932   001FCE  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  3933   001FD0  5027               	movf	??_reverseOneSquare^0,w,c
  3934   001FD2  5C2A               	subwf	reverseOneSquare@i^0,w,c
  3935   001FD4  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  3936   001FD6  0A80               	xorlw	128
  3937   001FD8  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  3938   001FDA  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  3939   001FDC  0A80               	xorlw	128
  3940   001FDE  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3941   001FE0  A0D8               	btfss	status,0,c
  3942   001FE2  EFF5  F00F         	goto	u1221
  3943   001FE6  EFF7  F00F         	goto	u1220
  3944   001FEA                     u1221:
  3945   001FEA  EFDB  F00F         	goto	l2502
  3946   001FEE                     u1220:
  3947   001FEE                     
  3948                           ;dc_motor.c: 365:     }
  3949   001FEE  4A2C               	infsnz	reverseOneSquare@cur_power^0,f,c
  3950   001FF0  2A2D               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3951   001FF2                     l2508:
  3952   001FF2  5024               	movf	reverseOneSquare@straightSpeed^0,w,c
  3953   001FF4  6E27               	movwf	??_reverseOneSquare^0,c
  3954   001FF6  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  3955   001FF8  502C               	movf	reverseOneSquare@cur_power^0,w,c
  3956   001FFA  5C27               	subwf	??_reverseOneSquare^0,w,c
  3957   001FFC  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  3958   001FFE  0A80               	xorlw	128
  3959   002000  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  3960   002002  502D               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3961   002004  0A80               	xorlw	128
  3962   002006  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3963   002008  B0D8               	btfsc	status,0,c
  3964   00200A  EF09  F010         	goto	u1231
  3965   00200E  EF0B  F010         	goto	u1230
  3966   002012                     u1231:
  3967   002012  EFAF  F00F         	goto	l2494
  3968   002016                     u1230:
  3969   002016                     
  3970                           ;dc_motor.c: 367:     for (i=0;i<reverseDuration;i++) {
  3971   002016  0E00               	movlw	0
  3972   002018  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  3973   00201A  0E00               	movlw	0
  3974   00201C  6E2A               	movwf	reverseOneSquare@i^0,c
  3975   00201E  EF1B  F010         	goto	l562
  3976   002022                     l2512:
  3977                           
  3978                           ;dc_motor.c: 368:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3979   002022  0E68               	movlw	104
  3980   002024  6E27               	movwf	??_reverseOneSquare^0,c
  3981   002026  0EE4               	movlw	228
  3982   002028                     u2627:
  3983   002028  2EE8               	decfsz	wreg,f,c
  3984   00202A  D7FE               	bra	u2627
  3985   00202C  2E27               	decfsz	??_reverseOneSquare^0,f,c
  3986   00202E  D7FC               	bra	u2627
  3987   002030  D000               	nop2	
  3988   002032                     
  3989                           ;dc_motor.c: 369:         }
  3990   002032  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  3991   002034  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  3992   002036                     l562:
  3993   002036  5025               	movf	reverseOneSquare@reverseDuration^0,w,c
  3994   002038  6E27               	movwf	??_reverseOneSquare^0,c
  3995   00203A  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  3996   00203C  5027               	movf	??_reverseOneSquare^0,w,c
  3997   00203E  5C2A               	subwf	reverseOneSquare@i^0,w,c
  3998   002040  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  3999   002042  0A80               	xorlw	128
  4000   002044  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  4001   002046  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  4002   002048  0A80               	xorlw	128
  4003   00204A  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4004   00204C  A0D8               	btfss	status,0,c
  4005   00204E  EF2B  F010         	goto	u1241
  4006   002052  EF2D  F010         	goto	u1240
  4007   002056                     u1241:
  4008   002056  EF11  F010         	goto	l2512
  4009   00205A                     u1240:
  4010   00205A                     
  4011                           ;dc_motor.c: 371:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  4012   00205A  C024  F02C         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  4013   00205E  6A2D               	clrf	(reverseOneSquare@cur_power+1)^0,c
  4014   002060                     l2516:
  4015   002060  BE2D               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  4016   002062  EF37  F010         	goto	u1250
  4017   002066  EF35  F010         	goto	u1251
  4018   00206A                     u1251:
  4019   00206A  EF39  F010         	goto	l2520
  4020   00206E                     u1250:
  4021   00206E  EF86  F010         	goto	l2536
  4022   002072                     l2520:
  4023                           
  4024                           ;dc_motor.c: 372:         mL->power = cur_power+mL->compensation;
  4025   002072  EE20 F009          	lfsr	2,9
  4026   002076  5020               	movf	reverseOneSquare@mL^0,w,c
  4027   002078  26D9               	addwf	fsr2l,f,c
  4028   00207A  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  4029   00207C  22DA               	addwfc	fsr2h,f,c
  4030   00207E  50DF               	movf	indf2,w,c
  4031   002080  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  4032   002082  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4033   002086  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4034   00208A  6EDF               	movwf	indf2,c
  4035                           
  4036                           ;dc_motor.c: 373:         mR->power = cur_power+mR->compensation;
  4037   00208C  EE20 F009          	lfsr	2,9
  4038   002090  5022               	movf	reverseOneSquare@mR^0,w,c
  4039   002092  26D9               	addwf	fsr2l,f,c
  4040   002094  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  4041   002096  22DA               	addwfc	fsr2h,f,c
  4042   002098  50DF               	movf	indf2,w,c
  4043   00209A  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  4044   00209C  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  4045   0020A0  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  4046   0020A4  6EDF               	movwf	indf2,c
  4047   0020A6                     
  4048                           ;dc_motor.c: 374:         setMotorPWM(mL);
  4049   0020A6  C020  F01A         	movff	reverseOneSquare@mL,setMotorPWM@m
  4050   0020AA  C021  F01B         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  4051   0020AE  EC6B  F012         	call	_setMotorPWM	;wreg free
  4052   0020B2                     
  4053                           ;dc_motor.c: 375:         setMotorPWM(mR);
  4054   0020B2  C022  F01A         	movff	reverseOneSquare@mR,setMotorPWM@m
  4055   0020B6  C023  F01B         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  4056   0020BA  EC6B  F012         	call	_setMotorPWM	;wreg free
  4057   0020BE                     
  4058                           ;dc_motor.c: 376:         for (i=0;i<straightRamp;i++) {
  4059   0020BE  0E00               	movlw	0
  4060   0020C0  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  4061   0020C2  0E00               	movlw	0
  4062   0020C4  6E2A               	movwf	reverseOneSquare@i^0,c
  4063   0020C6  EF6F  F010         	goto	l567
  4064   0020CA                     l2528:
  4065                           
  4066                           ;dc_motor.c: 377:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4067   0020CA  0E68               	movlw	104
  4068   0020CC  6E27               	movwf	??_reverseOneSquare^0,c
  4069   0020CE  0EE4               	movlw	228
  4070   0020D0                     u2637:
  4071   0020D0  2EE8               	decfsz	wreg,f,c
  4072   0020D2  D7FE               	bra	u2637
  4073   0020D4  2E27               	decfsz	??_reverseOneSquare^0,f,c
  4074   0020D6  D7FC               	bra	u2637
  4075   0020D8  D000               	nop2	
  4076   0020DA                     
  4077                           ;dc_motor.c: 378:         }
  4078   0020DA  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  4079   0020DC  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  4080   0020DE                     l567:
  4081   0020DE  5026               	movf	reverseOneSquare@straightRamp^0,w,c
  4082   0020E0  6E27               	movwf	??_reverseOneSquare^0,c
  4083   0020E2  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  4084   0020E4  5027               	movf	??_reverseOneSquare^0,w,c
  4085   0020E6  5C2A               	subwf	reverseOneSquare@i^0,w,c
  4086   0020E8  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  4087   0020EA  0A80               	xorlw	128
  4088   0020EC  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  4089   0020EE  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  4090   0020F0  0A80               	xorlw	128
  4091   0020F2  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4092   0020F4  A0D8               	btfss	status,0,c
  4093   0020F6  EF7F  F010         	goto	u1261
  4094   0020FA  EF81  F010         	goto	u1260
  4095   0020FE                     u1261:
  4096   0020FE  EF65  F010         	goto	l2528
  4097   002102                     u1260:
  4098   002102                     
  4099                           ;dc_motor.c: 379:     }
  4100   002102  062C               	decf	reverseOneSquare@cur_power^0,f,c
  4101   002104  A0D8               	btfss	status,0,c
  4102   002106  062D               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  4103   002108  EF30  F010         	goto	l2516
  4104   00210C                     l2536:
  4105                           
  4106                           ;dc_motor.c: 380:     mL->power = 0;
  4107   00210C  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4108   002110  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4109   002114  6ADF               	clrf	indf2,c
  4110                           
  4111                           ;dc_motor.c: 381:     mR->power = 0;
  4112   002116  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  4113   00211A  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  4114   00211E  6ADF               	clrf	indf2,c
  4115   002120  0012               	return		;funcret
  4116   002122                     __end_of_reverseOneSquare:
  4117                           	callstack 0
  4118                           
  4119 ;; *************** function _resetTimer *****************
  4120 ;; Defined at:
  4121 ;;		line 23 in file "timers.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4139 ;;Total ram usage:        0 bytes
  4140 ;; Hardware stack levels used: 1
  4141 ;; Hardware stack levels required when called: 5
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_main
  4146 ;;		_returnHome
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text8
  4151   003148                     __ptext8:
  4152                           	callstack 0
  4153   003148                     _resetTimer:
  4154                           	callstack 25
  4155   003148                     
  4156                           ;timers.c: 25:     TMR0H=0;
  4157   003148  0E00               	movlw	0
  4158   00314A  6ED4               	movwf	212,c	;volatile
  4159                           
  4160                           ;timers.c: 26:     TMR0L=0;
  4161   00314C  0E00               	movlw	0
  4162   00314E  6ED3               	movwf	211,c	;volatile
  4163   003150  0012               	return		;funcret
  4164   003152                     __end_of_resetTimer:
  4165                           	callstack 0
  4166                           
  4167 ;; *************** function _get16bitTMR0val *****************
  4168 ;; Defined at:
  4169 ;;		line 33 in file "timers.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  timer_val       2   20[COMRAM] unsigned int 
  4174 ;;  timer_high      2   18[COMRAM] unsigned int 
  4175 ;;  timer_low       2   16[COMRAM] unsigned int 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  2   12[COMRAM] unsigned int 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4185 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4186 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;Total ram usage:       10 bytes
  4190 ;; Hardware stack levels used: 1
  4191 ;; Hardware stack levels required when called: 5
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_main
  4196 ;;		_returnHome
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text9
  4201   002F44                     __ptext9:
  4202                           	callstack 0
  4203   002F44                     _get16bitTMR0val:
  4204                           	callstack 23
  4205   002F44                     
  4206                           ;timers.c: 36:     unsigned int timer_low = TMR0L;
  4207   002F44  CFD3 F011          	movff	4051,get16bitTMR0val@timer_low	;volatile
  4208   002F48  6A12               	clrf	(get16bitTMR0val@timer_low+1)^0,c
  4209                           
  4210                           ;timers.c: 37:     unsigned int timer_high = TMR0H;
  4211   002F4A  CFD4 F013          	movff	4052,get16bitTMR0val@timer_high	;volatile
  4212   002F4E  6A14               	clrf	(get16bitTMR0val@timer_high+1)^0,c
  4213   002F50                     
  4214                           ;timers.c: 38:     unsigned int timer_val = (timer_high<<8) | timer_low;
  4215   002F50  5013               	movf	get16bitTMR0val@timer_high^0,w,c
  4216   002F52  6E10               	movwf	(??_get16bitTMR0val+1)^0,c
  4217   002F54  6A0F               	clrf	??_get16bitTMR0val^0,c
  4218   002F56  5011               	movf	get16bitTMR0val@timer_low^0,w,c
  4219   002F58  100F               	iorwf	??_get16bitTMR0val^0,w,c
  4220   002F5A  6E15               	movwf	get16bitTMR0val@timer_val^0,c
  4221   002F5C  5012               	movf	(get16bitTMR0val@timer_low+1)^0,w,c
  4222   002F5E  1010               	iorwf	(??_get16bitTMR0val+1)^0,w,c
  4223   002F60  6E16               	movwf	(get16bitTMR0val@timer_val+1)^0,c
  4224   002F62                     
  4225                           ;timers.c: 39:     return timer_val;
  4226   002F62  C015  F00D         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  4227   002F66  C016  F00E         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  4228   002F6A  0012               	return		;funcret
  4229   002F6C                     __end_of_get16bitTMR0val:
  4230                           	callstack 0
  4231                           
  4232 ;; *************** function _fullSpeedAhead *****************
  4233 ;; Defined at:
  4234 ;;		line 334 in file "dc_motor.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4237 ;;		 -> main@motorL(10), 
  4238 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4239 ;;		 -> main@motorR(10), 
  4240 ;;  straightSpee    1   35[COMRAM] unsigned char 
  4241 ;;  straightRamp    1   36[COMRAM] unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  cur_power       2   42[COMRAM] int 
  4244 ;;  i               2   40[COMRAM] int 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4254 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;Total ram usage:       13 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 7
  4261 ;; This function calls:
  4262 ;;		_setMotorPWM
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;;		_move
  4266 ;;		_returnHome
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text10
  4271   0029A2                     __ptext10:
  4272                           	callstack 0
  4273   0029A2                     _fullSpeedAhead:
  4274                           	callstack 21
  4275   0029A2                     
  4276                           ;dc_motor.c: 334: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 335: {;dc_motor.c: 336:     mL->direction = 1;
  4277   0029A2  EE20 F001          	lfsr	2,1
  4278   0029A6  5020               	movf	fullSpeedAhead@mL^0,w,c
  4279   0029A8  26D9               	addwf	fsr2l,f,c
  4280   0029AA  5021               	movf	(fullSpeedAhead@mL+1)^0,w,c
  4281   0029AC  22DA               	addwfc	fsr2h,f,c
  4282   0029AE  0E01               	movlw	1
  4283   0029B0  6EDF               	movwf	indf2,c
  4284                           
  4285                           ;dc_motor.c: 337:     mR->direction = 1;
  4286   0029B2  EE20 F001          	lfsr	2,1
  4287   0029B6  5022               	movf	fullSpeedAhead@mR^0,w,c
  4288   0029B8  26D9               	addwf	fsr2l,f,c
  4289   0029BA  5023               	movf	(fullSpeedAhead@mR+1)^0,w,c
  4290   0029BC  22DA               	addwfc	fsr2h,f,c
  4291   0029BE  0E01               	movlw	1
  4292   0029C0  6EDF               	movwf	indf2,c
  4293   0029C2                     
  4294                           ;dc_motor.c: 338:     int i;;dc_motor.c: 339:     int cur_power;;dc_motor.c: 340:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  4295   0029C2  0E00               	movlw	0
  4296   0029C4  6E2C               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  4297   0029C6  0E01               	movlw	1
  4298   0029C8  6E2B               	movwf	fullSpeedAhead@cur_power^0,c
  4299   0029CA  EF31  F015         	goto	l2360
  4300   0029CE                     l2346:
  4301                           
  4302                           ;dc_motor.c: 341:         mL->power = cur_power+mL->compensation;
  4303   0029CE  EE20 F009          	lfsr	2,9
  4304   0029D2  5020               	movf	fullSpeedAhead@mL^0,w,c
  4305   0029D4  26D9               	addwf	fsr2l,f,c
  4306   0029D6  5021               	movf	(fullSpeedAhead@mL+1)^0,w,c
  4307   0029D8  22DA               	addwfc	fsr2h,f,c
  4308   0029DA  50DF               	movf	indf2,w,c
  4309   0029DC  242B               	addwf	fullSpeedAhead@cur_power^0,w,c
  4310   0029DE  C020  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4311   0029E2  C021  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4312   0029E6  6EDF               	movwf	indf2,c
  4313                           
  4314                           ;dc_motor.c: 342:         mR->power = cur_power+mR->compensation;
  4315   0029E8  EE20 F009          	lfsr	2,9
  4316   0029EC  5022               	movf	fullSpeedAhead@mR^0,w,c
  4317   0029EE  26D9               	addwf	fsr2l,f,c
  4318   0029F0  5023               	movf	(fullSpeedAhead@mR+1)^0,w,c
  4319   0029F2  22DA               	addwfc	fsr2h,f,c
  4320   0029F4  50DF               	movf	indf2,w,c
  4321   0029F6  242B               	addwf	fullSpeedAhead@cur_power^0,w,c
  4322   0029F8  C022  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4323   0029FC  C023  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4324   002A00  6EDF               	movwf	indf2,c
  4325   002A02                     
  4326                           ;dc_motor.c: 343:         setMotorPWM(mL);
  4327   002A02  C020  F01A         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4328   002A06  C021  F01B         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4329   002A0A  EC6B  F012         	call	_setMotorPWM	;wreg free
  4330   002A0E                     
  4331                           ;dc_motor.c: 344:         setMotorPWM(mR);
  4332   002A0E  C022  F01A         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4333   002A12  C023  F01B         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4334   002A16  EC6B  F012         	call	_setMotorPWM	;wreg free
  4335   002A1A                     
  4336                           ;dc_motor.c: 345:         for (i=0;i<straightRamp;i++) {
  4337   002A1A  0E00               	movlw	0
  4338   002A1C  6E2A               	movwf	(fullSpeedAhead@i+1)^0,c
  4339   002A1E  0E00               	movlw	0
  4340   002A20  6E29               	movwf	fullSpeedAhead@i^0,c
  4341   002A22  EF1D  F015         	goto	l549
  4342   002A26                     l2354:
  4343                           
  4344                           ;dc_motor.c: 346:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4345   002A26  0E68               	movlw	104
  4346   002A28  6E26               	movwf	??_fullSpeedAhead^0,c
  4347   002A2A  0EE4               	movlw	228
  4348   002A2C                     u2647:
  4349   002A2C  2EE8               	decfsz	wreg,f,c
  4350   002A2E  D7FE               	bra	u2647
  4351   002A30  2E26               	decfsz	??_fullSpeedAhead^0,f,c
  4352   002A32  D7FC               	bra	u2647
  4353   002A34  D000               	nop2	
  4354   002A36                     
  4355                           ;dc_motor.c: 347:         }
  4356   002A36  4A29               	infsnz	fullSpeedAhead@i^0,f,c
  4357   002A38  2A2A               	incf	(fullSpeedAhead@i+1)^0,f,c
  4358   002A3A                     l549:
  4359   002A3A  5025               	movf	fullSpeedAhead@straightRamp^0,w,c
  4360   002A3C  6E26               	movwf	??_fullSpeedAhead^0,c
  4361   002A3E  6A27               	clrf	(??_fullSpeedAhead+1)^0,c
  4362   002A40  5026               	movf	??_fullSpeedAhead^0,w,c
  4363   002A42  5C29               	subwf	fullSpeedAhead@i^0,w,c
  4364   002A44  502A               	movf	(fullSpeedAhead@i+1)^0,w,c
  4365   002A46  0A80               	xorlw	128
  4366   002A48  6E28               	movwf	(??_fullSpeedAhead+2)^0,c
  4367   002A4A  5027               	movf	(??_fullSpeedAhead+1)^0,w,c
  4368   002A4C  0A80               	xorlw	128
  4369   002A4E  5828               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4370   002A50  A0D8               	btfss	status,0,c
  4371   002A52  EF2D  F015         	goto	u1081
  4372   002A56  EF2F  F015         	goto	u1080
  4373   002A5A                     u1081:
  4374   002A5A  EF13  F015         	goto	l2354
  4375   002A5E                     u1080:
  4376   002A5E                     
  4377                           ;dc_motor.c: 348:     }
  4378   002A5E  4A2B               	infsnz	fullSpeedAhead@cur_power^0,f,c
  4379   002A60  2A2C               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  4380   002A62                     l2360:
  4381   002A62  5024               	movf	fullSpeedAhead@straightSpeed^0,w,c
  4382   002A64  6E26               	movwf	??_fullSpeedAhead^0,c
  4383   002A66  6A27               	clrf	(??_fullSpeedAhead+1)^0,c
  4384   002A68  502B               	movf	fullSpeedAhead@cur_power^0,w,c
  4385   002A6A  5C26               	subwf	??_fullSpeedAhead^0,w,c
  4386   002A6C  5027               	movf	(??_fullSpeedAhead+1)^0,w,c
  4387   002A6E  0A80               	xorlw	128
  4388   002A70  6E28               	movwf	(??_fullSpeedAhead+2)^0,c
  4389   002A72  502C               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  4390   002A74  0A80               	xorlw	128
  4391   002A76  5828               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4392   002A78  B0D8               	btfsc	status,0,c
  4393   002A7A  EF41  F015         	goto	u1091
  4394   002A7E  EF43  F015         	goto	u1090
  4395   002A82                     u1091:
  4396   002A82  EFE7  F014         	goto	l2346
  4397   002A86                     u1090:
  4398   002A86  0012               	return		;funcret
  4399   002A88                     __end_of_fullSpeedAhead:
  4400                           	callstack 0
  4401                           
  4402 ;; *************** function _setMotorPWM *****************
  4403 ;; Defined at:
  4404 ;;		line 66 in file "dc_motor.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  m               2   25[COMRAM] PTR struct DC_motor
  4407 ;;		 -> main@motorR(10), main@motorL(10), 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  negDuty         1   30[COMRAM] unsigned char 
  4410 ;;  posDuty         1   29[COMRAM] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4422 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4423 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4424 ;;Total ram usage:        6 bytes
  4425 ;; Hardware stack levels used: 1
  4426 ;; Hardware stack levels required when called: 6
  4427 ;; This function calls:
  4428 ;;		___lwdiv
  4429 ;;		___wmul
  4430 ;; This function is called by:
  4431 ;;		_stop
  4432 ;;		_turnLeft
  4433 ;;		_turnRight
  4434 ;;		_fullSpeedAhead
  4435 ;;		_reverseOneSquare
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text11
  4440   0024D6                     __ptext11:
  4441                           	callstack 0
  4442   0024D6                     _setMotorPWM:
  4443                           	callstack 23
  4444   0024D6                     
  4445                           ;dc_motor.c: 66: void setMotorPWM(DC_motor *m);dc_motor.c: 67: {;dc_motor.c: 68:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 70:     if(m->brakemode) {
  4446   0024D6  EE20 F002          	lfsr	2,2
  4447   0024DA  501A               	movf	setMotorPWM@m^0,w,c
  4448   0024DC  26D9               	addwf	fsr2l,f,c
  4449   0024DE  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4450   0024E0  22DA               	addwfc	fsr2h,f,c
  4451   0024E2  50DF               	movf	indf2,w,c
  4452   0024E4  B4D8               	btfsc	status,2,c
  4453   0024E6  EF77  F012         	goto	u1041
  4454   0024EA  EF79  F012         	goto	u1040
  4455   0024EE                     u1041:
  4456   0024EE  EFAD  F012         	goto	l2328
  4457   0024F2                     u1040:
  4458   0024F2                     
  4459                           ;dc_motor.c: 71:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  4460   0024F2  C01A  FFD9         	movff	setMotorPWM@m,fsr2l
  4461   0024F6  C01B  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4462   0024FA  50DF               	movf	indf2,w,c
  4463   0024FC  6E1C               	movwf	??_setMotorPWM^0,c
  4464   0024FE  501C               	movf	??_setMotorPWM^0,w,c
  4465   002500  6E0D               	movwf	___wmul@multiplier^0,c
  4466   002502  6A0E               	clrf	(___wmul@multiplier+1)^0,c
  4467   002504  EE20 F003          	lfsr	2,3
  4468   002508  501A               	movf	setMotorPWM@m^0,w,c
  4469   00250A  26D9               	addwf	fsr2l,f,c
  4470   00250C  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4471   00250E  22DA               	addwfc	fsr2h,f,c
  4472   002510  CFDE F00F          	movff	postinc2,___wmul@multiplicand
  4473   002514  CFDD F010          	movff	postdec2,___wmul@multiplicand+1
  4474   002518  ECDE  F017         	call	___wmul	;wreg free
  4475   00251C  C00D  F013         	movff	?___wmul,___lwdiv@dividend
  4476   002520  C00E  F014         	movff	?___wmul+1,___lwdiv@dividend+1
  4477   002524  0E00               	movlw	0
  4478   002526  6E16               	movwf	(___lwdiv@divisor+1)^0,c
  4479   002528  0E64               	movlw	100
  4480   00252A  6E15               	movwf	___lwdiv@divisor^0,c
  4481   00252C  EC68  F016         	call	___lwdiv	;wreg free
  4482   002530  EE20 F003          	lfsr	2,3
  4483   002534  501A               	movf	setMotorPWM@m^0,w,c
  4484   002536  26D9               	addwf	fsr2l,f,c
  4485   002538  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4486   00253A  22DA               	addwfc	fsr2h,f,c
  4487   00253C  50DF               	movf	indf2,w,c
  4488   00253E  6E1D               	movwf	(??_setMotorPWM+1)^0,c
  4489   002540  5013               	movf	?___lwdiv^0,w,c
  4490   002542  5C1D               	subwf	(??_setMotorPWM+1)^0,w,c
  4491   002544  6E1E               	movwf	setMotorPWM@posDuty^0,c
  4492   002546                     
  4493                           ;dc_motor.c: 72:         negDuty=m->PWMperiod;
  4494   002546  EE20 F003          	lfsr	2,3
  4495   00254A  501A               	movf	setMotorPWM@m^0,w,c
  4496   00254C  26D9               	addwf	fsr2l,f,c
  4497   00254E  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4498   002550  22DA               	addwfc	fsr2h,f,c
  4499   002552  50DF               	movf	indf2,w,c
  4500   002554  6E1F               	movwf	setMotorPWM@negDuty^0,c
  4501                           
  4502                           ;dc_motor.c: 73:     }
  4503   002556  EFD0  F012         	goto	l2332
  4504   00255A                     l2328:
  4505                           
  4506                           ;dc_motor.c: 75:         posDuty=0;
  4507   00255A  0E00               	movlw	0
  4508   00255C  6E1E               	movwf	setMotorPWM@posDuty^0,c
  4509   00255E                     
  4510                           ;dc_motor.c: 76:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4511   00255E  C01A  FFD9         	movff	setMotorPWM@m,fsr2l
  4512   002562  C01B  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4513   002566  50DF               	movf	indf2,w,c
  4514   002568  6E1C               	movwf	??_setMotorPWM^0,c
  4515   00256A  501C               	movf	??_setMotorPWM^0,w,c
  4516   00256C  6E0D               	movwf	___wmul@multiplier^0,c
  4517   00256E  6A0E               	clrf	(___wmul@multiplier+1)^0,c
  4518   002570  EE20 F003          	lfsr	2,3
  4519   002574  501A               	movf	setMotorPWM@m^0,w,c
  4520   002576  26D9               	addwf	fsr2l,f,c
  4521   002578  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4522   00257A  22DA               	addwfc	fsr2h,f,c
  4523   00257C  CFDE F00F          	movff	postinc2,___wmul@multiplicand
  4524   002580  CFDD F010          	movff	postdec2,___wmul@multiplicand+1
  4525   002584  ECDE  F017         	call	___wmul	;wreg free
  4526   002588  C00D  F013         	movff	?___wmul,___lwdiv@dividend
  4527   00258C  C00E  F014         	movff	?___wmul+1,___lwdiv@dividend+1
  4528   002590  0E00               	movlw	0
  4529   002592  6E16               	movwf	(___lwdiv@divisor+1)^0,c
  4530   002594  0E64               	movlw	100
  4531   002596  6E15               	movwf	___lwdiv@divisor^0,c
  4532   002598  EC68  F016         	call	___lwdiv	;wreg free
  4533   00259C  5013               	movf	?___lwdiv^0,w,c
  4534   00259E  6E1F               	movwf	setMotorPWM@negDuty^0,c
  4535   0025A0                     l2332:
  4536                           
  4537                           ;dc_motor.c: 79:     if (m->direction) {
  4538   0025A0  EE20 F001          	lfsr	2,1
  4539   0025A4  501A               	movf	setMotorPWM@m^0,w,c
  4540   0025A6  26D9               	addwf	fsr2l,f,c
  4541   0025A8  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4542   0025AA  22DA               	addwfc	fsr2h,f,c
  4543   0025AC  50DF               	movf	indf2,w,c
  4544   0025AE  B4D8               	btfsc	status,2,c
  4545   0025B0  EFDC  F012         	goto	u1051
  4546   0025B4  EFDE  F012         	goto	u1050
  4547   0025B8                     u1051:
  4548   0025B8  EF00  F013         	goto	l2336
  4549   0025BC                     u1050:
  4550   0025BC                     
  4551                           ;dc_motor.c: 80:         *(m->posDutyHighByte)=posDuty;
  4552   0025BC  EE20 F005          	lfsr	2,5
  4553   0025C0  501A               	movf	setMotorPWM@m^0,w,c
  4554   0025C2  26D9               	addwf	fsr2l,f,c
  4555   0025C4  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4556   0025C6  22DA               	addwfc	fsr2h,f,c
  4557   0025C8  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4558   0025CC  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4559   0025D0  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4560   0025D4  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4561   0025D8  C01E  FFDF         	movff	setMotorPWM@posDuty,indf2
  4562                           
  4563                           ;dc_motor.c: 81:         *(m->negDutyHighByte)=negDuty;
  4564   0025DC  EE20 F007          	lfsr	2,7
  4565   0025E0  501A               	movf	setMotorPWM@m^0,w,c
  4566   0025E2  26D9               	addwf	fsr2l,f,c
  4567   0025E4  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4568   0025E6  22DA               	addwfc	fsr2h,f,c
  4569   0025E8  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4570   0025EC  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4571   0025F0  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4572   0025F4  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4573   0025F8  C01F  FFDF         	movff	setMotorPWM@negDuty,indf2
  4574                           
  4575                           ;dc_motor.c: 82:     } else {
  4576   0025FC  EF20  F013         	goto	l460
  4577   002600                     l2336:
  4578                           
  4579                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=negDuty;
  4580   002600  EE20 F005          	lfsr	2,5
  4581   002604  501A               	movf	setMotorPWM@m^0,w,c
  4582   002606  26D9               	addwf	fsr2l,f,c
  4583   002608  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4584   00260A  22DA               	addwfc	fsr2h,f,c
  4585   00260C  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4586   002610  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4587   002614  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4588   002618  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4589   00261C  C01F  FFDF         	movff	setMotorPWM@negDuty,indf2
  4590                           
  4591                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=posDuty;
  4592   002620  EE20 F007          	lfsr	2,7
  4593   002624  501A               	movf	setMotorPWM@m^0,w,c
  4594   002626  26D9               	addwf	fsr2l,f,c
  4595   002628  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4596   00262A  22DA               	addwfc	fsr2h,f,c
  4597   00262C  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4598   002630  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4599   002634  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4600   002638  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4601   00263C  C01E  FFDF         	movff	setMotorPWM@posDuty,indf2
  4602   002640                     l460:
  4603   002640  0012               	return		;funcret
  4604   002642                     __end_of_setMotorPWM:
  4605                           	callstack 0
  4606                           
  4607 ;; *************** function ___wmul *****************
  4608 ;; Defined at:
  4609 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  multiplier      2   12[COMRAM] unsigned int 
  4612 ;;  multiplicand    2   14[COMRAM] unsigned int 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  product         2   16[COMRAM] unsigned int 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  2   12[COMRAM] unsigned int 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, prodl, prodh
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;Total ram usage:        6 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 5
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_setMotorPWM
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text12
  4639   002FBC                     __ptext12:
  4640                           	callstack 0
  4641   002FBC                     ___wmul:
  4642                           	callstack 23
  4643   002FBC  500D               	movf	___wmul@multiplier^0,w,c
  4644   002FBE  020F               	mulwf	___wmul@multiplicand^0,c
  4645   002FC0  CFF3 F011          	movff	prodl,___wmul@product
  4646   002FC4  CFF4 F012          	movff	prodh,___wmul@product+1
  4647   002FC8  500D               	movf	___wmul@multiplier^0,w,c
  4648   002FCA  0210               	mulwf	(___wmul@multiplicand+1)^0,c
  4649   002FCC  50F3               	movf	243,w,c
  4650   002FCE  2612               	addwf	(___wmul@product+1)^0,f,c
  4651   002FD0  500E               	movf	(___wmul@multiplier+1)^0,w,c
  4652   002FD2  020F               	mulwf	___wmul@multiplicand^0,c
  4653   002FD4  50F3               	movf	243,w,c
  4654   002FD6  2612               	addwf	(___wmul@product+1)^0,f,c
  4655   002FD8  C011  F00D         	movff	___wmul@product,?___wmul
  4656   002FDC  C012  F00E         	movff	___wmul@product+1,?___wmul+1
  4657   002FE0  0012               	return		;funcret
  4658   002FE2                     __end_of___wmul:
  4659                           	callstack 0
  4660                           
  4661 ;; *************** function ___lwdiv *****************
  4662 ;; Defined at:
  4663 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  dividend        2   18[COMRAM] unsigned int 
  4666 ;;  divisor         2   20[COMRAM] unsigned int 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  quotient        2   22[COMRAM] unsigned int 
  4669 ;;  counter         1   24[COMRAM] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  2   18[COMRAM] unsigned int 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4680 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4682 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4683 ;;Total ram usage:        7 bytes
  4684 ;; Hardware stack levels used: 1
  4685 ;; Hardware stack levels required when called: 5
  4686 ;; This function calls:
  4687 ;;		Nothing
  4688 ;; This function is called by:
  4689 ;;		_setMotorPWM
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text13
  4694   002CD0                     __ptext13:
  4695                           	callstack 0
  4696   002CD0                     ___lwdiv:
  4697                           	callstack 23
  4698   002CD0  0E00               	movlw	0
  4699   002CD2  6E18               	movwf	(___lwdiv@quotient+1)^0,c
  4700   002CD4  0E00               	movlw	0
  4701   002CD6  6E17               	movwf	___lwdiv@quotient^0,c
  4702   002CD8  5015               	movf	___lwdiv@divisor^0,w,c
  4703   002CDA  1016               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4704   002CDC  B4D8               	btfsc	status,2,c
  4705   002CDE  EF73  F016         	goto	u1011
  4706   002CE2  EF75  F016         	goto	u1010
  4707   002CE6                     u1011:
  4708   002CE6  EF9D  F016         	goto	l1096
  4709   002CEA                     u1010:
  4710   002CEA  0E01               	movlw	1
  4711   002CEC  6E19               	movwf	___lwdiv@counter^0,c
  4712   002CEE  EF7D  F016         	goto	l2296
  4713   002CF2                     l2294:
  4714   002CF2  90D8               	bcf	status,0,c
  4715   002CF4  3615               	rlcf	___lwdiv@divisor^0,f,c
  4716   002CF6  3616               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4717   002CF8  2A19               	incf	___lwdiv@counter^0,f,c
  4718   002CFA                     l2296:
  4719   002CFA  AE16               	btfss	(___lwdiv@divisor+1)^0,7,c
  4720   002CFC  EF82  F016         	goto	u1021
  4721   002D00  EF84  F016         	goto	u1020
  4722   002D04                     u1021:
  4723   002D04  EF79  F016         	goto	l2294
  4724   002D08                     u1020:
  4725   002D08                     l2298:
  4726   002D08  90D8               	bcf	status,0,c
  4727   002D0A  3617               	rlcf	___lwdiv@quotient^0,f,c
  4728   002D0C  3618               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4729   002D0E  5015               	movf	___lwdiv@divisor^0,w,c
  4730   002D10  5C13               	subwf	___lwdiv@dividend^0,w,c
  4731   002D12  5016               	movf	(___lwdiv@divisor+1)^0,w,c
  4732   002D14  5814               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4733   002D16  A0D8               	btfss	status,0,c
  4734   002D18  EF90  F016         	goto	u1031
  4735   002D1C  EF92  F016         	goto	u1030
  4736   002D20                     u1031:
  4737   002D20  EF97  F016         	goto	l2306
  4738   002D24                     u1030:
  4739   002D24  5015               	movf	___lwdiv@divisor^0,w,c
  4740   002D26  5E13               	subwf	___lwdiv@dividend^0,f,c
  4741   002D28  5016               	movf	(___lwdiv@divisor+1)^0,w,c
  4742   002D2A  5A14               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4743   002D2C  8017               	bsf	___lwdiv@quotient^0,0,c
  4744   002D2E                     l2306:
  4745   002D2E  90D8               	bcf	status,0,c
  4746   002D30  3216               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4747   002D32  3215               	rrcf	___lwdiv@divisor^0,f,c
  4748   002D34  2E19               	decfsz	___lwdiv@counter^0,f,c
  4749   002D36  EF84  F016         	goto	l2298
  4750   002D3A                     l1096:
  4751   002D3A  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  4752   002D3E  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4753   002D42  0012               	return		;funcret
  4754   002D44                     __end_of___lwdiv:
  4755                           	callstack 0
  4756                           
  4757 ;; *************** function _initUSART4 *****************
  4758 ;; Defined at:
  4759 ;;		line 4 in file "serial.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;		None
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      void 
  4766 ;; Registers used:
  4767 ;;		wreg, status,2
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4777 ;;Total ram usage:        0 bytes
  4778 ;; Hardware stack levels used: 1
  4779 ;; Hardware stack levels required when called: 5
  4780 ;; This function calls:
  4781 ;;		Nothing
  4782 ;; This function is called by:
  4783 ;;		_main
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text14
  4788   0030B2                     __ptext14:
  4789                           	callstack 0
  4790   0030B2                     _initUSART4:
  4791                           	callstack 25
  4792   0030B2                     
  4793                           ;serial.c: 7:     RC0PPS = 0x12;
  4794   0030B2  0E12               	movlw	18
  4795   0030B4  010E               	movlb	14	; () banked
  4796   0030B6  6F62               	movwf	98,b	;volatile
  4797                           
  4798                           ;serial.c: 8:     RX4PPS = 0x11;
  4799   0030B8  0E11               	movlw	17
  4800   0030BA  6F15               	movwf	21,b	;volatile
  4801   0030BC                     
  4802                           ; BSR set to: 14
  4803                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  4804   0030BC  97E9               	bcf	233,3,b	;volatile
  4805   0030BE                     
  4806                           ; BSR set to: 14
  4807                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  4808   0030BE  95E8               	bcf	232,2,b	;volatile
  4809                           
  4810                           ;serial.c: 13:     SP4BRGL = 51;
  4811   0030C0  0E33               	movlw	51
  4812   0030C2  6FE5               	movwf	229,b	;volatile
  4813                           
  4814                           ;serial.c: 14:     SP4BRGH = 0;
  4815   0030C4  0E00               	movlw	0
  4816   0030C6  6FE6               	movwf	230,b	;volatile
  4817   0030C8                     
  4818                           ; BSR set to: 14
  4819                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  4820   0030C8  89E7               	bsf	231,4,b	;volatile
  4821   0030CA                     
  4822                           ; BSR set to: 14
  4823                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  4824   0030CA  8BE8               	bsf	232,5,b	;volatile
  4825   0030CC                     
  4826                           ; BSR set to: 14
  4827                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  4828   0030CC  8FE7               	bsf	231,7,b	;volatile
  4829   0030CE                     
  4830                           ; BSR set to: 14
  4831   0030CE  0012               	return		;funcret
  4832   0030D0                     __end_of_initUSART4:
  4833                           	callstack 0
  4834                           
  4835 ;; *************** function _initDCmotorsPWM *****************
  4836 ;; Defined at:
  4837 ;;		line 6 in file "dc_motor.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  PWMperiod       2   12[COMRAM] unsigned int 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4854 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4855 ;;Total ram usage:        2 bytes
  4856 ;; Hardware stack levels used: 1
  4857 ;; Hardware stack levels required when called: 5
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text15
  4866   002B4C                     __ptext15:
  4867                           	callstack 0
  4868   002B4C                     _initDCmotorsPWM:
  4869                           	callstack 25
  4870   002B4C                     
  4871                           ;dc_motor.c: 9:     LATEbits.LATE2=0;
  4872   002B4C  947D               	bcf	125,2,c	;volatile
  4873                           
  4874                           ;dc_motor.c: 10:     TRISEbits.TRISE2=0;
  4875   002B4E  9485               	bcf	133,2,c	;volatile
  4876                           
  4877                           ;dc_motor.c: 11:     LATEbits.LATE4=0;
  4878   002B50  987D               	bcf	125,4,c	;volatile
  4879                           
  4880                           ;dc_motor.c: 12:     TRISEbits.TRISE4=0;
  4881   002B52  9885               	bcf	133,4,c	;volatile
  4882                           
  4883                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  4884   002B54  9E7B               	bcf	123,7,c	;volatile
  4885                           
  4886                           ;dc_motor.c: 14:     TRISCbits.TRISC7=0;
  4887   002B56  9E83               	bcf	131,7,c	;volatile
  4888                           
  4889                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  4890   002B58  9C7F               	bcf	127,6,c	;volatile
  4891                           
  4892                           ;dc_motor.c: 16:     TRISGbits.TRISG6=0;
  4893   002B5A  9C87               	bcf	135,6,c	;volatile
  4894   002B5C                     
  4895                           ;dc_motor.c: 19:     RE2PPS=0x05;
  4896   002B5C  0E05               	movlw	5
  4897   002B5E  010E               	movlb	14	; () banked
  4898   002B60  6F74               	movwf	116,b	;volatile
  4899                           
  4900                           ;dc_motor.c: 20:     RE4PPS=0x06;
  4901   002B62  0E06               	movlw	6
  4902   002B64  6F76               	movwf	118,b	;volatile
  4903                           
  4904                           ;dc_motor.c: 21:     RC7PPS=0x07;
  4905   002B66  0E07               	movlw	7
  4906   002B68  6F69               	movwf	105,b	;volatile
  4907                           
  4908                           ;dc_motor.c: 22:     RG6PPS=0x08;
  4909   002B6A  0E08               	movlw	8
  4910   002B6C  6F88               	movwf	136,b	;volatile
  4911                           
  4912                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b011;
  4913   002B6E  50BD               	movf	189,w,c	;volatile
  4914   002B70  0B8F               	andlw	-113
  4915   002B72  0930               	iorlw	48
  4916   002B74  6EBD               	movwf	189,c	;volatile
  4917                           
  4918                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  4919   002B76  0EE0               	movlw	-32
  4920   002B78  16BE               	andwf	190,f,c	;volatile
  4921                           
  4922                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  4923   002B7A  50BF               	movf	191,w,c	;volatile
  4924   002B7C  0BF0               	andlw	-16
  4925   002B7E  0901               	iorlw	1
  4926   002B80  6EBF               	movwf	191,c	;volatile
  4927   002B82                     
  4928                           ; BSR set to: 14
  4929                           ;dc_motor.c: 31:     T2PR=PWMperiod;
  4930   002B82  C00D  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4931   002B86                     
  4932                           ; BSR set to: 14
  4933                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  4934   002B86  8EBD               	bsf	189,7,c	;volatile
  4935                           
  4936                           ;dc_motor.c: 36:     CCPR1H=0;
  4937   002B88  0E00               	movlw	0
  4938   002B8A  6EAA               	movwf	170,c	;volatile
  4939                           
  4940                           ;dc_motor.c: 37:     CCPR2H=0;
  4941   002B8C  0E00               	movlw	0
  4942   002B8E  6EA6               	movwf	166,c	;volatile
  4943                           
  4944                           ;dc_motor.c: 38:     CCPR3H=0;
  4945   002B90  0E00               	movlw	0
  4946   002B92  010F               	movlb	15	; () banked
  4947   002B94  6F25               	movwf	37,b	;volatile
  4948                           
  4949                           ;dc_motor.c: 39:     CCPR4H=0;
  4950   002B96  0E00               	movlw	0
  4951   002B98  6F21               	movwf	33,b	;volatile
  4952                           
  4953                           ;dc_motor.c: 42:     CCPTMRS0bits.C1TSEL=0;
  4954   002B9A  0EFC               	movlw	-4
  4955   002B9C  16AD               	andwf	173,f,c	;volatile
  4956                           
  4957                           ;dc_motor.c: 43:     CCPTMRS0bits.C2TSEL=0;
  4958   002B9E  0EF3               	movlw	-13
  4959   002BA0  16AD               	andwf	173,f,c	;volatile
  4960                           
  4961                           ;dc_motor.c: 44:     CCPTMRS0bits.C3TSEL=0;
  4962   002BA2  0ECF               	movlw	-49
  4963   002BA4  16AD               	andwf	173,f,c	;volatile
  4964                           
  4965                           ;dc_motor.c: 45:     CCPTMRS0bits.C4TSEL=0;
  4966   002BA6  0E3F               	movlw	-193
  4967   002BA8  16AD               	andwf	173,f,c	;volatile
  4968   002BAA                     
  4969                           ; BSR set to: 15
  4970                           ;dc_motor.c: 48:     CCP1CONbits.FMT=1;
  4971   002BAA  88AB               	bsf	171,4,c	;volatile
  4972                           
  4973                           ;dc_motor.c: 49:     CCP1CONbits.CCP1MODE=0b1100;
  4974   002BAC  50AB               	movf	171,w,c	;volatile
  4975   002BAE  0BF0               	andlw	-16
  4976   002BB0  090C               	iorlw	12
  4977   002BB2  6EAB               	movwf	171,c	;volatile
  4978   002BB4                     
  4979                           ; BSR set to: 15
  4980                           ;dc_motor.c: 50:     CCP1CONbits.EN=1;
  4981   002BB4  8EAB               	bsf	171,7,c	;volatile
  4982   002BB6                     
  4983                           ; BSR set to: 15
  4984                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
  4985   002BB6  88A7               	bsf	167,4,c	;volatile
  4986                           
  4987                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  4988   002BB8  50A7               	movf	167,w,c	;volatile
  4989   002BBA  0BF0               	andlw	-16
  4990   002BBC  090C               	iorlw	12
  4991   002BBE  6EA7               	movwf	167,c	;volatile
  4992   002BC0                     
  4993                           ; BSR set to: 15
  4994                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
  4995   002BC0  8EA7               	bsf	167,7,c	;volatile
  4996   002BC2                     
  4997                           ; BSR set to: 15
  4998                           ;dc_motor.c: 56:     CCP3CONbits.FMT=1;
  4999   002BC2  8926               	bsf	38,4,b	;volatile
  5000                           
  5001                           ;dc_motor.c: 57:     CCP3CONbits.CCP3MODE=0b1100;
  5002   002BC4  5126               	movf	38,w,b	;volatile
  5003   002BC6  0BF0               	andlw	-16
  5004   002BC8  090C               	iorlw	12
  5005   002BCA  6F26               	movwf	38,b	;volatile
  5006   002BCC                     
  5007                           ; BSR set to: 15
  5008                           ;dc_motor.c: 58:     CCP3CONbits.EN=1;
  5009   002BCC  8F26               	bsf	38,7,b	;volatile
  5010   002BCE                     
  5011                           ; BSR set to: 15
  5012                           ;dc_motor.c: 60:     CCP4CONbits.FMT=1;
  5013   002BCE  8922               	bsf	34,4,b	;volatile
  5014                           
  5015                           ;dc_motor.c: 61:     CCP4CONbits.CCP4MODE=0b1100;
  5016   002BD0  5122               	movf	34,w,b	;volatile
  5017   002BD2  0BF0               	andlw	-16
  5018   002BD4  090C               	iorlw	12
  5019   002BD6  6F22               	movwf	34,b	;volatile
  5020   002BD8                     
  5021                           ; BSR set to: 15
  5022                           ;dc_motor.c: 62:     CCP4CONbits.EN=1;
  5023   002BD8  8F22               	bsf	34,7,b	;volatile
  5024   002BDA                     
  5025                           ; BSR set to: 15
  5026   002BDA  0012               	return		;funcret
  5027   002BDC                     __end_of_initDCmotorsPWM:
  5028                           	callstack 0
  5029                           
  5030 ;; *************** function _color_read *****************
  5031 ;; Defined at:
  5032 ;;		line 72 in file "color.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  RGBC            2   16[COMRAM] PTR struct RGBC_val
  5035 ;;		 -> main@RGBC(8), 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5047 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5049 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5050 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5051 ;;Total ram usage:        9 bytes
  5052 ;; Hardware stack levels used: 1
  5053 ;; Hardware stack levels required when called: 7
  5054 ;; This function calls:
  5055 ;;		_I2C_2_Master_Read
  5056 ;;		_I2C_2_Master_RepStart
  5057 ;;		_I2C_2_Master_Start
  5058 ;;		_I2C_2_Master_Stop
  5059 ;;		_I2C_2_Master_Write
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text16
  5066   001D48                     __ptext16:
  5067                           	callstack 0
  5068   001D48                     _color_read:
  5069                           	callstack 23
  5070   001D48                     
  5071                           ;color.c: 72: void color_read(RGBC_val *RGBC);color.c: 73: {;color.c: 74:  I2C_2_Master_
      +                          Start();
  5072   001D48  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  5073                           
  5074                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  5075   001D4C  0E52               	movlw	82
  5076   001D4E  EC98  F018         	call	_I2C_2_Master_Write
  5077                           
  5078                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x16);
  5079   001D52  0EB6               	movlw	182
  5080   001D54  EC98  F018         	call	_I2C_2_Master_Write
  5081                           
  5082                           ;color.c: 77:  I2C_2_Master_RepStart();
  5083   001D58  ECA9  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5084                           
  5085                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  5086   001D5C  0E53               	movlw	83
  5087   001D5E  EC98  F018         	call	_I2C_2_Master_Write
  5088   001D62                     
  5089                           ;color.c: 79:  RGBC->R=I2C_2_Master_Read(1);
  5090   001D62  0E01               	movlw	1
  5091   001D64  EC35  F017         	call	_I2C_2_Master_Read
  5092   001D68  6E13               	movwf	??_color_read^0,c
  5093   001D6A  6A14               	clrf	(??_color_read+1)^0,c
  5094   001D6C  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5095   001D70  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5096   001D74  C013  FFDE         	movff	??_color_read,postinc2
  5097   001D78  C014  FFDD         	movff	??_color_read+1,postdec2
  5098   001D7C                     
  5099                           ;color.c: 80:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  5100   001D7C  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5101   001D80  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5102   001D84  CFDE F013          	movff	postinc2,??_color_read
  5103   001D88  CFDD F014          	movff	postdec2,??_color_read+1
  5104   001D8C  0E00               	movlw	0
  5105   001D8E  EC35  F017         	call	_I2C_2_Master_Read
  5106   001D92  6E15               	movwf	(??_color_read+2)^0,c
  5107   001D94  5015               	movf	(??_color_read+2)^0,w,c
  5108   001D96  6E17               	movwf	(??_color_read+4)^0,c
  5109   001D98  6A16               	clrf	(??_color_read+3)^0,c
  5110   001D9A  5013               	movf	??_color_read^0,w,c
  5111   001D9C  1016               	iorwf	(??_color_read+3)^0,w,c
  5112   001D9E  6E18               	movwf	(??_color_read+5)^0,c
  5113   001DA0  5014               	movf	(??_color_read+1)^0,w,c
  5114   001DA2  1017               	iorwf	(??_color_read+4)^0,w,c
  5115   001DA4  6E19               	movwf	(??_color_read+6)^0,c
  5116   001DA6  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5117   001DAA  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5118   001DAE  C018  FFDE         	movff	??_color_read+5,postinc2
  5119   001DB2  C019  FFDD         	movff	??_color_read+6,postdec2
  5120                           
  5121                           ;color.c: 81:  I2C_2_Master_Stop();
  5122   001DB6  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  5123                           
  5124                           ;color.c: 83:     I2C_2_Master_Start();
  5125   001DBA  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  5126                           
  5127                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x00);
  5128   001DBE  0E52               	movlw	82
  5129   001DC0  EC98  F018         	call	_I2C_2_Master_Write
  5130                           
  5131                           ;color.c: 85:  I2C_2_Master_Write(0xA0 | 0x18);
  5132   001DC4  0EB8               	movlw	184
  5133   001DC6  EC98  F018         	call	_I2C_2_Master_Write
  5134                           
  5135                           ;color.c: 86:  I2C_2_Master_RepStart();
  5136   001DCA  ECA9  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5137                           
  5138                           ;color.c: 87:  I2C_2_Master_Write(0x52 | 0x01);
  5139   001DCE  0E53               	movlw	83
  5140   001DD0  EC98  F018         	call	_I2C_2_Master_Write
  5141   001DD4                     
  5142                           ;color.c: 88:  RGBC->G=I2C_2_Master_Read(1);
  5143   001DD4  0E01               	movlw	1
  5144   001DD6  EC35  F017         	call	_I2C_2_Master_Read
  5145   001DDA  6E13               	movwf	??_color_read^0,c
  5146   001DDC  6A14               	clrf	(??_color_read+1)^0,c
  5147   001DDE  EE20 F002          	lfsr	2,2
  5148   001DE2  5011               	movf	color_read@RGBC^0,w,c
  5149   001DE4  26D9               	addwf	fsr2l,f,c
  5150   001DE6  5012               	movf	(color_read@RGBC+1)^0,w,c
  5151   001DE8  22DA               	addwfc	fsr2h,f,c
  5152   001DEA  C013  FFDE         	movff	??_color_read,postinc2
  5153   001DEE  C014  FFDD         	movff	??_color_read+1,postdec2
  5154   001DF2                     
  5155                           ;color.c: 89:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  5156   001DF2  EE20 F002          	lfsr	2,2
  5157   001DF6  5011               	movf	color_read@RGBC^0,w,c
  5158   001DF8  26D9               	addwf	fsr2l,f,c
  5159   001DFA  5012               	movf	(color_read@RGBC+1)^0,w,c
  5160   001DFC  22DA               	addwfc	fsr2h,f,c
  5161   001DFE  CFDE F013          	movff	postinc2,??_color_read
  5162   001E02  CFDD F014          	movff	postdec2,??_color_read+1
  5163   001E06  0E00               	movlw	0
  5164   001E08  EC35  F017         	call	_I2C_2_Master_Read
  5165   001E0C  6E15               	movwf	(??_color_read+2)^0,c
  5166   001E0E  5015               	movf	(??_color_read+2)^0,w,c
  5167   001E10  6E17               	movwf	(??_color_read+4)^0,c
  5168   001E12  6A16               	clrf	(??_color_read+3)^0,c
  5169   001E14  5013               	movf	??_color_read^0,w,c
  5170   001E16  1016               	iorwf	(??_color_read+3)^0,w,c
  5171   001E18  6E18               	movwf	(??_color_read+5)^0,c
  5172   001E1A  5014               	movf	(??_color_read+1)^0,w,c
  5173   001E1C  1017               	iorwf	(??_color_read+4)^0,w,c
  5174   001E1E  6E19               	movwf	(??_color_read+6)^0,c
  5175   001E20  EE20 F002          	lfsr	2,2
  5176   001E24  5011               	movf	color_read@RGBC^0,w,c
  5177   001E26  26D9               	addwf	fsr2l,f,c
  5178   001E28  5012               	movf	(color_read@RGBC+1)^0,w,c
  5179   001E2A  22DA               	addwfc	fsr2h,f,c
  5180   001E2C  C018  FFDE         	movff	??_color_read+5,postinc2
  5181   001E30  C019  FFDD         	movff	??_color_read+6,postdec2
  5182                           
  5183                           ;color.c: 90:  I2C_2_Master_Stop();
  5184   001E34  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  5185                           
  5186                           ;color.c: 92:     I2C_2_Master_Start();
  5187   001E38  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  5188                           
  5189                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  5190   001E3C  0E52               	movlw	82
  5191   001E3E  EC98  F018         	call	_I2C_2_Master_Write
  5192                           
  5193                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  5194   001E42  0EBA               	movlw	186
  5195   001E44  EC98  F018         	call	_I2C_2_Master_Write
  5196                           
  5197                           ;color.c: 95:  I2C_2_Master_RepStart();
  5198   001E48  ECA9  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5199                           
  5200                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  5201   001E4C  0E53               	movlw	83
  5202   001E4E  EC98  F018         	call	_I2C_2_Master_Write
  5203   001E52                     
  5204                           ;color.c: 97:  RGBC->B=I2C_2_Master_Read(1);
  5205   001E52  0E01               	movlw	1
  5206   001E54  EC35  F017         	call	_I2C_2_Master_Read
  5207   001E58  6E13               	movwf	??_color_read^0,c
  5208   001E5A  6A14               	clrf	(??_color_read+1)^0,c
  5209   001E5C  EE20 F004          	lfsr	2,4
  5210   001E60  5011               	movf	color_read@RGBC^0,w,c
  5211   001E62  26D9               	addwf	fsr2l,f,c
  5212   001E64  5012               	movf	(color_read@RGBC+1)^0,w,c
  5213   001E66  22DA               	addwfc	fsr2h,f,c
  5214   001E68  C013  FFDE         	movff	??_color_read,postinc2
  5215   001E6C  C014  FFDD         	movff	??_color_read+1,postdec2
  5216   001E70                     
  5217                           ;color.c: 98:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  5218   001E70  EE20 F004          	lfsr	2,4
  5219   001E74  5011               	movf	color_read@RGBC^0,w,c
  5220   001E76  26D9               	addwf	fsr2l,f,c
  5221   001E78  5012               	movf	(color_read@RGBC+1)^0,w,c
  5222   001E7A  22DA               	addwfc	fsr2h,f,c
  5223   001E7C  CFDE F013          	movff	postinc2,??_color_read
  5224   001E80  CFDD F014          	movff	postdec2,??_color_read+1
  5225   001E84  0E00               	movlw	0
  5226   001E86  EC35  F017         	call	_I2C_2_Master_Read
  5227   001E8A  6E15               	movwf	(??_color_read+2)^0,c
  5228   001E8C  5015               	movf	(??_color_read+2)^0,w,c
  5229   001E8E  6E17               	movwf	(??_color_read+4)^0,c
  5230   001E90  6A16               	clrf	(??_color_read+3)^0,c
  5231   001E92  5013               	movf	??_color_read^0,w,c
  5232   001E94  1016               	iorwf	(??_color_read+3)^0,w,c
  5233   001E96  6E18               	movwf	(??_color_read+5)^0,c
  5234   001E98  5014               	movf	(??_color_read+1)^0,w,c
  5235   001E9A  1017               	iorwf	(??_color_read+4)^0,w,c
  5236   001E9C  6E19               	movwf	(??_color_read+6)^0,c
  5237   001E9E  EE20 F004          	lfsr	2,4
  5238   001EA2  5011               	movf	color_read@RGBC^0,w,c
  5239   001EA4  26D9               	addwf	fsr2l,f,c
  5240   001EA6  5012               	movf	(color_read@RGBC+1)^0,w,c
  5241   001EA8  22DA               	addwfc	fsr2h,f,c
  5242   001EAA  C018  FFDE         	movff	??_color_read+5,postinc2
  5243   001EAE  C019  FFDD         	movff	??_color_read+6,postdec2
  5244                           
  5245                           ;color.c: 99:  I2C_2_Master_Stop();
  5246   001EB2  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  5247                           
  5248                           ;color.c: 101:     I2C_2_Master_Start();
  5249   001EB6  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  5250                           
  5251                           ;color.c: 102:  I2C_2_Master_Write(0x52 | 0x00);
  5252   001EBA  0E52               	movlw	82
  5253   001EBC  EC98  F018         	call	_I2C_2_Master_Write
  5254                           
  5255                           ;color.c: 103:  I2C_2_Master_Write(0xA0 | 0x14);
  5256   001EC0  0EB4               	movlw	180
  5257   001EC2  EC98  F018         	call	_I2C_2_Master_Write
  5258                           
  5259                           ;color.c: 104:  I2C_2_Master_RepStart();
  5260   001EC6  ECA9  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5261                           
  5262                           ;color.c: 105:  I2C_2_Master_Write(0x52 | 0x01);
  5263   001ECA  0E53               	movlw	83
  5264   001ECC  EC98  F018         	call	_I2C_2_Master_Write
  5265   001ED0                     
  5266                           ;color.c: 106:  RGBC->C=I2C_2_Master_Read(1);
  5267   001ED0  0E01               	movlw	1
  5268   001ED2  EC35  F017         	call	_I2C_2_Master_Read
  5269   001ED6  6E13               	movwf	??_color_read^0,c
  5270   001ED8  6A14               	clrf	(??_color_read+1)^0,c
  5271   001EDA  EE20 F006          	lfsr	2,6
  5272   001EDE  5011               	movf	color_read@RGBC^0,w,c
  5273   001EE0  26D9               	addwf	fsr2l,f,c
  5274   001EE2  5012               	movf	(color_read@RGBC+1)^0,w,c
  5275   001EE4  22DA               	addwfc	fsr2h,f,c
  5276   001EE6  C013  FFDE         	movff	??_color_read,postinc2
  5277   001EEA  C014  FFDD         	movff	??_color_read+1,postdec2
  5278   001EEE                     
  5279                           ;color.c: 107:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  5280   001EEE  EE20 F006          	lfsr	2,6
  5281   001EF2  5011               	movf	color_read@RGBC^0,w,c
  5282   001EF4  26D9               	addwf	fsr2l,f,c
  5283   001EF6  5012               	movf	(color_read@RGBC+1)^0,w,c
  5284   001EF8  22DA               	addwfc	fsr2h,f,c
  5285   001EFA  CFDE F013          	movff	postinc2,??_color_read
  5286   001EFE  CFDD F014          	movff	postdec2,??_color_read+1
  5287   001F02  0E00               	movlw	0
  5288   001F04  EC35  F017         	call	_I2C_2_Master_Read
  5289   001F08  6E15               	movwf	(??_color_read+2)^0,c
  5290   001F0A  5015               	movf	(??_color_read+2)^0,w,c
  5291   001F0C  6E17               	movwf	(??_color_read+4)^0,c
  5292   001F0E  6A16               	clrf	(??_color_read+3)^0,c
  5293   001F10  5013               	movf	??_color_read^0,w,c
  5294   001F12  1016               	iorwf	(??_color_read+3)^0,w,c
  5295   001F14  6E18               	movwf	(??_color_read+5)^0,c
  5296   001F16  5014               	movf	(??_color_read+1)^0,w,c
  5297   001F18  1017               	iorwf	(??_color_read+4)^0,w,c
  5298   001F1A  6E19               	movwf	(??_color_read+6)^0,c
  5299   001F1C  EE20 F006          	lfsr	2,6
  5300   001F20  5011               	movf	color_read@RGBC^0,w,c
  5301   001F22  26D9               	addwf	fsr2l,f,c
  5302   001F24  5012               	movf	(color_read@RGBC+1)^0,w,c
  5303   001F26  22DA               	addwfc	fsr2h,f,c
  5304   001F28  C018  FFDE         	movff	??_color_read+5,postinc2
  5305   001F2C  C019  FFDD         	movff	??_color_read+6,postdec2
  5306                           
  5307                           ;color.c: 108:  I2C_2_Master_Stop();
  5308   001F30  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  5309   001F34  0012               	return		;funcret
  5310   001F36                     __end_of_color_read:
  5311                           	callstack 0
  5312                           
  5313 ;; *************** function _I2C_2_Master_RepStart *****************
  5314 ;; Defined at:
  5315 ;;		line 33 in file "i2c.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; Hardware stack levels required when called: 6
  5336 ;; This function calls:
  5337 ;;		_I2C_2_Master_Idle
  5338 ;; This function is called by:
  5339 ;;		_color_read
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text17
  5344   003152                     __ptext17:
  5345                           	callstack 0
  5346   003152                     _I2C_2_Master_RepStart:
  5347                           	callstack 23
  5348   003152                     
  5349                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5350   003152  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  5351   003156                     
  5352                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5353   003156  010E               	movlb	14	; () banked
  5354   003158  83DA               	bsf	218,1,b	;volatile
  5355   00315A                     
  5356                           ; BSR set to: 14
  5357   00315A  0012               	return		;funcret
  5358   00315C                     __end_of_I2C_2_Master_RepStart:
  5359                           	callstack 0
  5360                           
  5361 ;; *************** function _I2C_2_Master_Read *****************
  5362 ;; Defined at:
  5363 ;;		line 51 in file "i2c.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  ack             1    wreg     unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  ack             1   14[COMRAM] unsigned char 
  5368 ;;  tmp             1   15[COMRAM] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      unsigned char 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5381 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5382 ;;Total ram usage:        3 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; Hardware stack levels required when called: 6
  5385 ;; This function calls:
  5386 ;;		_I2C_2_Master_Idle
  5387 ;; This function is called by:
  5388 ;;		_color_read
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text18
  5393   002E6A                     __ptext18:
  5394                           	callstack 0
  5395   002E6A                     _I2C_2_Master_Read:
  5396                           	callstack 23
  5397                           
  5398                           ; BSR set to: 14
  5399                           ;incstack = 0
  5400                           ;I2C_2_Master_Read@ack stored from wreg
  5401   002E6A  6E0F               	movwf	I2C_2_Master_Read@ack^0,c
  5402   002E6C                     
  5403                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5404   002E6C  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  5405   002E70                     
  5406                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5407   002E70  010E               	movlb	14	; () banked
  5408   002E72  87DA               	bsf	218,3,b	;volatile
  5409                           
  5410                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5411   002E74  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  5412   002E78                     
  5413                           ;i2c.c: 57:   tmp = SSP2BUF;
  5414   002E78  CED5 F010          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5415                           
  5416                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5417   002E7C  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  5418   002E80                     
  5419                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5420   002E80  500F               	movf	I2C_2_Master_Read@ack^0,w,c
  5421   002E82  B4D8               	btfsc	status,2,c
  5422   002E84  EF46  F017         	goto	u1271
  5423   002E88  EF4A  F017         	goto	u1270
  5424   002E8C                     u1271:
  5425   002E8C  6A0E               	clrf	??_I2C_2_Master_Read^0,c
  5426   002E8E  2A0E               	incf	??_I2C_2_Master_Read^0,f,c
  5427   002E90  EF4B  F017         	goto	u1288
  5428   002E94                     u1270:
  5429   002E94  6A0E               	clrf	??_I2C_2_Master_Read^0,c
  5430   002E96                     u1288:
  5431   002E96  3A0E               	swapf	??_I2C_2_Master_Read^0,f,c
  5432   002E98  460E               	rlncf	??_I2C_2_Master_Read^0,f,c
  5433   002E9A  010E               	movlb	14	; () banked
  5434   002E9C  51DA               	movf	218,w,b	;volatile
  5435   002E9E  180E               	xorwf	??_I2C_2_Master_Read^0,w,c
  5436   002EA0  0BDF               	andlw	-33
  5437   002EA2  180E               	xorwf	??_I2C_2_Master_Read^0,w,c
  5438   002EA4  6FDA               	movwf	218,b	;volatile
  5439   002EA6                     
  5440                           ; BSR set to: 14
  5441                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5442   002EA6  89DA               	bsf	218,4,b	;volatile
  5443   002EA8                     
  5444                           ; BSR set to: 14
  5445                           ;i2c.c: 61:   return tmp;
  5446   002EA8  5010               	movf	I2C_2_Master_Read@tmp^0,w,c
  5447   002EAA                     
  5448                           ; BSR set to: 14
  5449   002EAA  0012               	return		;funcret
  5450   002EAC                     __end_of_I2C_2_Master_Read:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function _color_normalise *****************
  5454 ;; Defined at:
  5455 ;;		line 112 in file "color.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  RGBC            8   38[COMRAM] struct RGBC_val
  5458 ;;  RGBC_n          2   46[COMRAM] PTR struct RGBC_val
  5459 ;;		 -> main@RGBC_n(8), 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5471 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5474 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5475 ;;Total ram usage:       12 bytes
  5476 ;; Hardware stack levels used: 1
  5477 ;; Hardware stack levels required when called: 6
  5478 ;; This function calls:
  5479 ;;		___aldiv
  5480 ;;		___lmul
  5481 ;; This function is called by:
  5482 ;;		_main
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text19
  5487   002642                     __ptext19:
  5488                           	callstack 0
  5489   002642                     _color_normalise:
  5490                           	callstack 24
  5491   002642                     
  5492                           ;color.c: 130:     RGBC_n->C = RGBC.C;
  5493   002642  EE20 F006          	lfsr	2,6
  5494   002646  502F               	movf	color_normalise@RGBC_n^0,w,c
  5495   002648  26D9               	addwf	fsr2l,f,c
  5496   00264A  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5497   00264C  22DA               	addwfc	fsr2h,f,c
  5498   00264E  C02D  FFDE         	movff	color_normalise@RGBC+6,postinc2
  5499   002652  C02E  FFDD         	movff	color_normalise@RGBC+7,postdec2
  5500   002656                     
  5501                           ;color.c: 131:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  5502   002656  C027  F00D         	movff	color_normalise@RGBC,___lmul@multiplier
  5503   00265A  C028  F00E         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  5504   00265E  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5505   002660  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5506   002662  0EE8               	movlw	232
  5507   002664  6E11               	movwf	___lmul@multiplicand^0,c
  5508   002666  0E03               	movlw	3
  5509   002668  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5510   00266A  0E00               	movlw	0
  5511   00266C  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5512   00266E  0E00               	movlw	0
  5513   002670  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5514   002672  ECD9  F016         	call	___lmul	;wreg free
  5515   002676  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5516   00267A  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5517   00267E  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5518   002682  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5519   002686  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5520   002688  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5521   00268A  6E31               	movwf	??_color_normalise^0,c
  5522   00268C  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5523   00268E  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5524   002690  6E32               	movwf	(??_color_normalise+1)^0,c
  5525   002692  5027               	movf	color_normalise@RGBC^0,w,c
  5526   002694  2631               	addwf	??_color_normalise^0,f,c
  5527   002696  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5528   002698  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5529   00269A  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5530   00269E  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5531   0026A2  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5532   0026A4  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5533   0026A6  ECC6  F013         	call	___aldiv	;wreg free
  5534   0026AA  C02F  FFD9         	movff	color_normalise@RGBC_n,fsr2l
  5535   0026AE  C030  FFDA         	movff	color_normalise@RGBC_n+1,fsr2h
  5536   0026B2  C019  FFDE         	movff	?___aldiv,postinc2
  5537   0026B6  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5538   0026BA                     
  5539                           ;color.c: 132:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  5540   0026BA  C029  F00D         	movff	color_normalise@RGBC+2,___lmul@multiplier
  5541   0026BE  C02A  F00E         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  5542   0026C2  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5543   0026C4  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5544   0026C6  0EE8               	movlw	232
  5545   0026C8  6E11               	movwf	___lmul@multiplicand^0,c
  5546   0026CA  0E03               	movlw	3
  5547   0026CC  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5548   0026CE  0E00               	movlw	0
  5549   0026D0  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5550   0026D2  0E00               	movlw	0
  5551   0026D4  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5552   0026D6  ECD9  F016         	call	___lmul	;wreg free
  5553   0026DA  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5554   0026DE  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5555   0026E2  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5556   0026E6  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5557   0026EA  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5558   0026EC  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5559   0026EE  6E31               	movwf	??_color_normalise^0,c
  5560   0026F0  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5561   0026F2  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5562   0026F4  6E32               	movwf	(??_color_normalise+1)^0,c
  5563   0026F6  5027               	movf	color_normalise@RGBC^0,w,c
  5564   0026F8  2631               	addwf	??_color_normalise^0,f,c
  5565   0026FA  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5566   0026FC  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5567   0026FE  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5568   002702  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5569   002706  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5570   002708  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5571   00270A  ECC6  F013         	call	___aldiv	;wreg free
  5572   00270E  EE20 F002          	lfsr	2,2
  5573   002712  502F               	movf	color_normalise@RGBC_n^0,w,c
  5574   002714  26D9               	addwf	fsr2l,f,c
  5575   002716  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5576   002718  22DA               	addwfc	fsr2h,f,c
  5577   00271A  C019  FFDE         	movff	?___aldiv,postinc2
  5578   00271E  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5579   002722                     
  5580                           ;color.c: 133:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  5581   002722  C02B  F00D         	movff	color_normalise@RGBC+4,___lmul@multiplier
  5582   002726  C02C  F00E         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  5583   00272A  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5584   00272C  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5585   00272E  0EE8               	movlw	232
  5586   002730  6E11               	movwf	___lmul@multiplicand^0,c
  5587   002732  0E03               	movlw	3
  5588   002734  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5589   002736  0E00               	movlw	0
  5590   002738  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5591   00273A  0E00               	movlw	0
  5592   00273C  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5593   00273E  ECD9  F016         	call	___lmul	;wreg free
  5594   002742  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5595   002746  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5596   00274A  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5597   00274E  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5598   002752  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5599   002754  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5600   002756  6E31               	movwf	??_color_normalise^0,c
  5601   002758  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5602   00275A  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5603   00275C  6E32               	movwf	(??_color_normalise+1)^0,c
  5604   00275E  5027               	movf	color_normalise@RGBC^0,w,c
  5605   002760  2631               	addwf	??_color_normalise^0,f,c
  5606   002762  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5607   002764  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5608   002766  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5609   00276A  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5610   00276E  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5611   002770  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5612   002772  ECC6  F013         	call	___aldiv	;wreg free
  5613   002776  EE20 F004          	lfsr	2,4
  5614   00277A  502F               	movf	color_normalise@RGBC_n^0,w,c
  5615   00277C  26D9               	addwf	fsr2l,f,c
  5616   00277E  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5617   002780  22DA               	addwfc	fsr2h,f,c
  5618   002782  C019  FFDE         	movff	?___aldiv,postinc2
  5619   002786  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5620   00278A  0012               	return		;funcret
  5621   00278C                     __end_of_color_normalise:
  5622                           	callstack 0
  5623                           
  5624 ;; *************** function ___lmul *****************
  5625 ;; Defined at:
  5626 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  multiplier      4   12[COMRAM] unsigned long 
  5629 ;;  multiplicand    4   16[COMRAM] unsigned long 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  product         4   20[COMRAM] unsigned long 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  4   12[COMRAM] unsigned long 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5641 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5642 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5645 ;;Total ram usage:       12 bytes
  5646 ;; Hardware stack levels used: 1
  5647 ;; Hardware stack levels required when called: 5
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		_color_normalise
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text20
  5656   002DB2                     __ptext20:
  5657                           	callstack 0
  5658   002DB2                     ___lmul:
  5659                           	callstack 24
  5660   002DB2  0E00               	movlw	0
  5661   002DB4  6E15               	movwf	___lmul@product^0,c
  5662   002DB6  0E00               	movlw	0
  5663   002DB8  6E16               	movwf	(___lmul@product+1)^0,c
  5664   002DBA  0E00               	movlw	0
  5665   002DBC  6E17               	movwf	(___lmul@product+2)^0,c
  5666   002DBE  0E00               	movlw	0
  5667   002DC0  6E18               	movwf	(___lmul@product+3)^0,c
  5668   002DC2                     l2728:
  5669   002DC2  A00D               	btfss	___lmul@multiplier^0,0,c
  5670   002DC4  EFE6  F016         	goto	u1391
  5671   002DC8  EFE8  F016         	goto	u1390
  5672   002DCC                     u1391:
  5673   002DCC  EFF0  F016         	goto	l2732
  5674   002DD0                     u1390:
  5675   002DD0  5011               	movf	___lmul@multiplicand^0,w,c
  5676   002DD2  2615               	addwf	___lmul@product^0,f,c
  5677   002DD4  5012               	movf	(___lmul@multiplicand+1)^0,w,c
  5678   002DD6  2216               	addwfc	(___lmul@product+1)^0,f,c
  5679   002DD8  5013               	movf	(___lmul@multiplicand+2)^0,w,c
  5680   002DDA  2217               	addwfc	(___lmul@product+2)^0,f,c
  5681   002DDC  5014               	movf	(___lmul@multiplicand+3)^0,w,c
  5682   002DDE  2218               	addwfc	(___lmul@product+3)^0,f,c
  5683   002DE0                     l2732:
  5684   002DE0  90D8               	bcf	status,0,c
  5685   002DE2  3611               	rlcf	___lmul@multiplicand^0,f,c
  5686   002DE4  3612               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5687   002DE6  3613               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5688   002DE8  3614               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5689   002DEA  90D8               	bcf	status,0,c
  5690   002DEC  3210               	rrcf	(___lmul@multiplier+3)^0,f,c
  5691   002DEE  320F               	rrcf	(___lmul@multiplier+2)^0,f,c
  5692   002DF0  320E               	rrcf	(___lmul@multiplier+1)^0,f,c
  5693   002DF2  320D               	rrcf	___lmul@multiplier^0,f,c
  5694   002DF4  500D               	movf	___lmul@multiplier^0,w,c
  5695   002DF6  100E               	iorwf	(___lmul@multiplier+1)^0,w,c
  5696   002DF8  100F               	iorwf	(___lmul@multiplier+2)^0,w,c
  5697   002DFA  1010               	iorwf	(___lmul@multiplier+3)^0,w,c
  5698   002DFC  A4D8               	btfss	status,2,c
  5699   002DFE  EF03  F017         	goto	u1401
  5700   002E02  EF05  F017         	goto	u1400
  5701   002E06                     u1401:
  5702   002E06  EFE1  F016         	goto	l2728
  5703   002E0A                     u1400:
  5704   002E0A  C015  F00D         	movff	___lmul@product,?___lmul
  5705   002E0E  C016  F00E         	movff	___lmul@product+1,?___lmul+1
  5706   002E12  C017  F00F         	movff	___lmul@product+2,?___lmul+2
  5707   002E16  C018  F010         	movff	___lmul@product+3,?___lmul+3
  5708   002E1A  0012               	return		;funcret
  5709   002E1C                     __end_of___lmul:
  5710                           	callstack 0
  5711                           
  5712 ;; *************** function ___aldiv *****************
  5713 ;; Defined at:
  5714 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  dividend        4   24[COMRAM] long 
  5717 ;;  divisor         4   28[COMRAM] long 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  quotient        4   34[COMRAM] long 
  5720 ;;  sign            1   33[COMRAM] unsigned char 
  5721 ;;  counter         1   32[COMRAM] unsigned char 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  4   24[COMRAM] long 
  5724 ;; Registers used:
  5725 ;;		wreg, status,2, status,0
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5731 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5732 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;Total ram usage:       14 bytes
  5736 ;; Hardware stack levels used: 1
  5737 ;; Hardware stack levels required when called: 5
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_color_normalise
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text21
  5746   00278C                     __ptext21:
  5747                           	callstack 0
  5748   00278C                     ___aldiv:
  5749                           	callstack 24
  5750   00278C  0E00               	movlw	0
  5751   00278E  6E22               	movwf	___aldiv@sign^0,c
  5752   002790  BE20               	btfsc	(___aldiv@divisor+3)^0,7,c
  5753   002792  EFCF  F013         	goto	u1410
  5754   002796  EFCD  F013         	goto	u1411
  5755   00279A                     u1411:
  5756   00279A  EFD9  F013         	goto	l2744
  5757   00279E                     u1410:
  5758   00279E  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  5759   0027A0  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  5760   0027A2  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  5761   0027A4  6C1D               	negf	___aldiv@divisor^0,c
  5762   0027A6  0E00               	movlw	0
  5763   0027A8  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  5764   0027AA  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  5765   0027AC  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  5766   0027AE  0E01               	movlw	1
  5767   0027B0  6E22               	movwf	___aldiv@sign^0,c
  5768   0027B2                     l2744:
  5769   0027B2  BE1C               	btfsc	(___aldiv@dividend+3)^0,7,c
  5770   0027B4  EFE0  F013         	goto	u1420
  5771   0027B8  EFDE  F013         	goto	u1421
  5772   0027BC                     u1421:
  5773   0027BC  EFEA  F013         	goto	l2750
  5774   0027C0                     u1420:
  5775   0027C0  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  5776   0027C2  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  5777   0027C4  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  5778   0027C6  6C19               	negf	___aldiv@dividend^0,c
  5779   0027C8  0E00               	movlw	0
  5780   0027CA  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  5781   0027CC  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  5782   0027CE  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  5783   0027D0  0E01               	movlw	1
  5784   0027D2  1A22               	xorwf	___aldiv@sign^0,f,c
  5785   0027D4                     l2750:
  5786   0027D4  0E00               	movlw	0
  5787   0027D6  6E23               	movwf	___aldiv@quotient^0,c
  5788   0027D8  0E00               	movlw	0
  5789   0027DA  6E24               	movwf	(___aldiv@quotient+1)^0,c
  5790   0027DC  0E00               	movlw	0
  5791   0027DE  6E25               	movwf	(___aldiv@quotient+2)^0,c
  5792   0027E0  0E00               	movlw	0
  5793   0027E2  6E26               	movwf	(___aldiv@quotient+3)^0,c
  5794   0027E4  501D               	movf	___aldiv@divisor^0,w,c
  5795   0027E6  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  5796   0027E8  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  5797   0027EA  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  5798   0027EC  B4D8               	btfsc	status,2,c
  5799   0027EE  EFFB  F013         	goto	u1431
  5800   0027F2  EFFD  F013         	goto	u1430
  5801   0027F6                     u1431:
  5802   0027F6  EF33  F014         	goto	l2772
  5803   0027FA                     u1430:
  5804   0027FA  0E01               	movlw	1
  5805   0027FC  6E21               	movwf	___aldiv@counter^0,c
  5806   0027FE  EF07  F014         	goto	l2758
  5807   002802                     l2756:
  5808   002802  90D8               	bcf	status,0,c
  5809   002804  361D               	rlcf	___aldiv@divisor^0,f,c
  5810   002806  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  5811   002808  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  5812   00280A  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  5813   00280C  2A21               	incf	___aldiv@counter^0,f,c
  5814   00280E                     l2758:
  5815   00280E  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  5816   002810  EF0C  F014         	goto	u1441
  5817   002814  EF0E  F014         	goto	u1440
  5818   002818                     u1441:
  5819   002818  EF01  F014         	goto	l2756
  5820   00281C                     u1440:
  5821   00281C                     l2760:
  5822   00281C  90D8               	bcf	status,0,c
  5823   00281E  3623               	rlcf	___aldiv@quotient^0,f,c
  5824   002820  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  5825   002822  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  5826   002824  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  5827   002826  501D               	movf	___aldiv@divisor^0,w,c
  5828   002828  5C19               	subwf	___aldiv@dividend^0,w,c
  5829   00282A  501E               	movf	(___aldiv@divisor+1)^0,w,c
  5830   00282C  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  5831   00282E  501F               	movf	(___aldiv@divisor+2)^0,w,c
  5832   002830  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  5833   002832  5020               	movf	(___aldiv@divisor+3)^0,w,c
  5834   002834  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  5835   002836  A0D8               	btfss	status,0,c
  5836   002838  EF20  F014         	goto	u1451
  5837   00283C  EF22  F014         	goto	u1450
  5838   002840                     u1451:
  5839   002840  EF2B  F014         	goto	l2768
  5840   002844                     u1450:
  5841   002844  501D               	movf	___aldiv@divisor^0,w,c
  5842   002846  5E19               	subwf	___aldiv@dividend^0,f,c
  5843   002848  501E               	movf	(___aldiv@divisor+1)^0,w,c
  5844   00284A  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  5845   00284C  501F               	movf	(___aldiv@divisor+2)^0,w,c
  5846   00284E  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  5847   002850  5020               	movf	(___aldiv@divisor+3)^0,w,c
  5848   002852  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  5849   002854  8023               	bsf	___aldiv@quotient^0,0,c
  5850   002856                     l2768:
  5851   002856  90D8               	bcf	status,0,c
  5852   002858  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  5853   00285A  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  5854   00285C  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  5855   00285E  321D               	rrcf	___aldiv@divisor^0,f,c
  5856   002860  2E21               	decfsz	___aldiv@counter^0,f,c
  5857   002862  EF0E  F014         	goto	l2760
  5858   002866                     l2772:
  5859   002866  5022               	movf	___aldiv@sign^0,w,c
  5860   002868  B4D8               	btfsc	status,2,c
  5861   00286A  EF39  F014         	goto	u1461
  5862   00286E  EF3B  F014         	goto	u1460
  5863   002872                     u1461:
  5864   002872  EF43  F014         	goto	l2776
  5865   002876                     u1460:
  5866   002876  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  5867   002878  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  5868   00287A  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  5869   00287C  6C23               	negf	___aldiv@quotient^0,c
  5870   00287E  0E00               	movlw	0
  5871   002880  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  5872   002882  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  5873   002884  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  5874   002886                     l2776:
  5875   002886  C023  F019         	movff	___aldiv@quotient,?___aldiv
  5876   00288A  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  5877   00288E  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  5878   002892  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  5879   002896  0012               	return		;funcret
  5880   002898                     __end_of___aldiv:
  5881                           	callstack 0
  5882                           
  5883 ;; *************** function _color_click_init *****************
  5884 ;; Defined at:
  5885 ;;		line 5 in file "color.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5902 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;Total ram usage:        1 bytes
  5904 ;; Hardware stack levels used: 1
  5905 ;; Hardware stack levels required when called: 9
  5906 ;; This function calls:
  5907 ;;		_I2C_2_Master_Init
  5908 ;;		_color_clear_init_interrupts
  5909 ;;		_color_writetoaddr
  5910 ;; This function is called by:
  5911 ;;		_main
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text22
  5916   002EAC                     __ptext22:
  5917                           	callstack 0
  5918   002EAC                     _color_click_init:
  5919                           	callstack 21
  5920   002EAC                     
  5921                           ;color.c: 8:     I2C_2_Master_Init();
  5922   002EAC  EC8D  F017         	call	_I2C_2_Master_Init	;wreg free
  5923   002EB0                     
  5924                           ;color.c: 11:  color_writetoaddr(0x00, 0x01);
  5925   002EB0  0E01               	movlw	1
  5926   002EB2  6E0F               	movwf	color_writetoaddr@value^0,c
  5927   002EB4  0E00               	movlw	0
  5928   002EB6  EC29  F018         	call	_color_writetoaddr
  5929   002EBA                     
  5930                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5931   002EBA  0E3F               	movlw	63
  5932   002EBC  6E16               	movwf	??_color_click_init^0,c
  5933   002EBE  0E55               	movlw	85
  5934   002EC0                     u2657:
  5935   002EC0  2EE8               	decfsz	wreg,f,c
  5936   002EC2  D7FE               	bra	u2657
  5937   002EC4  2E16               	decfsz	??_color_click_init^0,f,c
  5938   002EC6  D7FC               	bra	u2657
  5939   002EC8  0000               	nop	
  5940   002ECA                     
  5941                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  5942   002ECA  0E03               	movlw	3
  5943   002ECC  6E0F               	movwf	color_writetoaddr@value^0,c
  5944   002ECE  0E00               	movlw	0
  5945   002ED0  EC29  F018         	call	_color_writetoaddr
  5946   002ED4                     
  5947                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5948   002ED4  0ED5               	movlw	213
  5949   002ED6  6E0F               	movwf	color_writetoaddr@value^0,c
  5950   002ED8  0E01               	movlw	1
  5951   002EDA  EC29  F018         	call	_color_writetoaddr
  5952   002EDE                     
  5953                           ;color.c: 21:     color_clear_init_interrupts();
  5954   002EDE  ECEE  F015         	call	_color_clear_init_interrupts	;wreg free
  5955   002EE2  0012               	return		;funcret
  5956   002EE4                     __end_of_color_click_init:
  5957                           	callstack 0
  5958                           
  5959 ;; *************** function _color_clear_init_interrupts *****************
  5960 ;; Defined at:
  5961 ;;		line 25 in file "color.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;		None
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  low_threshol    2   19[COMRAM] unsigned int 
  5966 ;;  high_thresho    2   17[COMRAM] unsigned int 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5977 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5979 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;Total ram usage:        5 bytes
  5981 ;; Hardware stack levels used: 1
  5982 ;; Hardware stack levels required when called: 8
  5983 ;; This function calls:
  5984 ;;		_I2C_2_Master_Start
  5985 ;;		_I2C_2_Master_Stop
  5986 ;;		_I2C_2_Master_Write
  5987 ;;		_color_writetoaddr
  5988 ;; This function is called by:
  5989 ;;		_color_click_init
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text23
  5994   002BDC                     __ptext23:
  5995                           	callstack 0
  5996   002BDC                     _color_clear_init_interrupts:
  5997                           	callstack 21
  5998   002BDC                     
  5999                           ;color.c: 27:     I2C_2_Master_Start();
  6000   002BDC  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  6001                           
  6002                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  6003   002BE0  0E52               	movlw	82
  6004   002BE2  EC98  F018         	call	_I2C_2_Master_Write
  6005                           
  6006                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  6007   002BE6  0EE6               	movlw	230
  6008   002BE8  EC98  F018         	call	_I2C_2_Master_Write
  6009                           
  6010                           ;color.c: 30:     I2C_2_Master_Stop();
  6011   002BEC  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  6012   002BF0                     
  6013                           ;color.c: 33:     unsigned int high_threshold = ambient + 600;
  6014   002BF0  0E58               	movlw	88
  6015   002BF2  244A               	addwf	_ambient^0,w,c
  6016   002BF4  6E12               	movwf	color_clear_init_interrupts@high_threshold^0,c
  6017   002BF6  0E02               	movlw	2
  6018   002BF8  204B               	addwfc	(_ambient+1)^0,w,c
  6019   002BFA  6E13               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  6020   002BFC                     
  6021                           ;color.c: 34:     unsigned int low_threshold = ambient - 400;
  6022   002BFC  0E70               	movlw	112
  6023   002BFE  244A               	addwf	_ambient^0,w,c
  6024   002C00  6E14               	movwf	color_clear_init_interrupts@low_threshold^0,c
  6025   002C02  0EFE               	movlw	254
  6026   002C04  204B               	addwfc	(_ambient+1)^0,w,c
  6027   002C06  6E15               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  6028                           
  6029                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  6030   002C08  0E13               	movlw	19
  6031   002C0A  6E0F               	movwf	color_writetoaddr@value^0,c
  6032   002C0C  0E00               	movlw	0
  6033   002C0E  EC29  F018         	call	_color_writetoaddr
  6034   002C12                     
  6035                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6036   002C12  0E3F               	movlw	63
  6037   002C14  6E11               	movwf	??_color_clear_init_interrupts^0,c
  6038   002C16  0E55               	movlw	85
  6039   002C18                     u2667:
  6040   002C18  2EE8               	decfsz	wreg,f,c
  6041   002C1A  D7FE               	bra	u2667
  6042   002C1C  2E11               	decfsz	??_color_clear_init_interrupts^0,f,c
  6043   002C1E  D7FC               	bra	u2667
  6044   002C20  0000               	nop	
  6045   002C22                     
  6046                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  6047   002C22  5013               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  6048   002C24  6E0F               	movwf	color_writetoaddr@value^0,c
  6049   002C26  0E07               	movlw	7
  6050   002C28  EC29  F018         	call	_color_writetoaddr
  6051   002C2C                     
  6052                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  6053   002C2C  C012  F00F         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  6054   002C30  0E06               	movlw	6
  6055   002C32  EC29  F018         	call	_color_writetoaddr
  6056   002C36                     
  6057                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  6058   002C36  5015               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  6059   002C38  6E0F               	movwf	color_writetoaddr@value^0,c
  6060   002C3A  0E05               	movlw	5
  6061   002C3C  EC29  F018         	call	_color_writetoaddr
  6062   002C40                     
  6063                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  6064   002C40  C014  F00F         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  6065   002C44  0E04               	movlw	4
  6066   002C46  EC29  F018         	call	_color_writetoaddr
  6067   002C4A                     
  6068                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  6069   002C4A  0E04               	movlw	4
  6070   002C4C  6E0F               	movwf	color_writetoaddr@value^0,c
  6071   002C4E  0E0C               	movlw	12
  6072   002C50  EC29  F018         	call	_color_writetoaddr
  6073   002C54  0012               	return		;funcret
  6074   002C56                     __end_of_color_clear_init_interrupts:
  6075                           	callstack 0
  6076                           
  6077 ;; *************** function _color_writetoaddr *****************
  6078 ;; Defined at:
  6079 ;;		line 48 in file "color.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  address         1    wreg     unsigned char 
  6082 ;;  value           1   14[COMRAM] unsigned char 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  address         1   15[COMRAM] unsigned char 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0, cstack
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6094 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6098 ;;Total ram usage:        2 bytes
  6099 ;; Hardware stack levels used: 1
  6100 ;; Hardware stack levels required when called: 7
  6101 ;; This function calls:
  6102 ;;		_I2C_2_Master_Start
  6103 ;;		_I2C_2_Master_Stop
  6104 ;;		_I2C_2_Master_Write
  6105 ;; This function is called by:
  6106 ;;		_color_click_init
  6107 ;;		_color_clear_init_interrupts
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text24
  6112   003052                     __ptext24:
  6113                           	callstack 0
  6114   003052                     _color_writetoaddr:
  6115                           	callstack 22
  6116                           
  6117                           ;incstack = 0
  6118                           ;color_writetoaddr@address stored from wreg
  6119   003052  6E10               	movwf	color_writetoaddr@address^0,c
  6120   003054                     
  6121                           ;color.c: 49:     I2C_2_Master_Start();
  6122   003054  ECB3  F018         	call	_I2C_2_Master_Start	;wreg free
  6123                           
  6124                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  6125   003058  0E52               	movlw	82
  6126   00305A  EC98  F018         	call	_I2C_2_Master_Write
  6127                           
  6128                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  6129   00305E  5010               	movf	color_writetoaddr@address^0,w,c
  6130   003060  0980               	iorlw	128
  6131   003062  EC98  F018         	call	_I2C_2_Master_Write
  6132                           
  6133                           ;color.c: 52:     I2C_2_Master_Write(value);
  6134   003066  500F               	movf	color_writetoaddr@value^0,w,c
  6135   003068  EC98  F018         	call	_I2C_2_Master_Write
  6136                           
  6137                           ;color.c: 53:     I2C_2_Master_Stop();
  6138   00306C  ECAE  F018         	call	_I2C_2_Master_Stop	;wreg free
  6139   003070  0012               	return		;funcret
  6140   003072                     __end_of_color_writetoaddr:
  6141                           	callstack 0
  6142                           
  6143 ;; *************** function _I2C_2_Master_Write *****************
  6144 ;; Defined at:
  6145 ;;		line 45 in file "i2c.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  data_byte       1    wreg     unsigned char 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  data_byte       1   13[COMRAM] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6163 ;;Total ram usage:        1 bytes
  6164 ;; Hardware stack levels used: 1
  6165 ;; Hardware stack levels required when called: 6
  6166 ;; This function calls:
  6167 ;;		_I2C_2_Master_Idle
  6168 ;; This function is called by:
  6169 ;;		_color_clear_init_interrupts
  6170 ;;		_color_writetoaddr
  6171 ;;		_color_read
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text25
  6176   003130                     __ptext25:
  6177                           	callstack 0
  6178   003130                     _I2C_2_Master_Write:
  6179                           	callstack 23
  6180                           
  6181                           ;incstack = 0
  6182                           ;I2C_2_Master_Write@data_byte stored from wreg
  6183   003130  6E0E               	movwf	I2C_2_Master_Write@data_byte^0,c
  6184   003132                     
  6185                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6186   003132  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  6187   003136                     
  6188                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6189   003136  C00E  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6190   00313A  0012               	return		;funcret
  6191   00313C                     __end_of_I2C_2_Master_Write:
  6192                           	callstack 0
  6193                           
  6194 ;; *************** function _I2C_2_Master_Stop *****************
  6195 ;; Defined at:
  6196 ;;		line 39 in file "i2c.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used: 1
  6216 ;; Hardware stack levels required when called: 6
  6217 ;; This function calls:
  6218 ;;		_I2C_2_Master_Idle
  6219 ;; This function is called by:
  6220 ;;		_color_clear_init_interrupts
  6221 ;;		_color_writetoaddr
  6222 ;;		_color_read
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text26
  6227   00315C                     __ptext26:
  6228                           	callstack 0
  6229   00315C                     _I2C_2_Master_Stop:
  6230                           	callstack 23
  6231   00315C                     
  6232                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6233   00315C  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  6234   003160                     
  6235                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6236   003160  010E               	movlb	14	; () banked
  6237   003162  85DA               	bsf	218,2,b	;volatile
  6238   003164                     
  6239                           ; BSR set to: 14
  6240   003164  0012               	return		;funcret
  6241   003166                     __end_of_I2C_2_Master_Stop:
  6242                           	callstack 0
  6243                           
  6244 ;; *************** function _I2C_2_Master_Start *****************
  6245 ;; Defined at:
  6246 ;;		line 27 in file "i2c.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used: 1
  6266 ;; Hardware stack levels required when called: 6
  6267 ;; This function calls:
  6268 ;;		_I2C_2_Master_Idle
  6269 ;; This function is called by:
  6270 ;;		_color_clear_init_interrupts
  6271 ;;		_color_writetoaddr
  6272 ;;		_color_read
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text27
  6277   003166                     __ptext27:
  6278                           	callstack 0
  6279   003166                     _I2C_2_Master_Start:
  6280                           	callstack 23
  6281   003166                     
  6282                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6283   003166  ECB6  F017         	call	_I2C_2_Master_Idle	;wreg free
  6284   00316A                     
  6285                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6286   00316A  010E               	movlb	14	; () banked
  6287   00316C  81DA               	bsf	218,0,b	;volatile
  6288   00316E                     
  6289                           ; BSR set to: 14
  6290   00316E  0012               	return		;funcret
  6291   003170                     __end_of_I2C_2_Master_Start:
  6292                           	callstack 0
  6293                           
  6294 ;; *************** function _I2C_2_Master_Idle *****************
  6295 ;; Defined at:
  6296 ;;		line 22 in file "i2c.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6314 ;;Total ram usage:        1 bytes
  6315 ;; Hardware stack levels used: 1
  6316 ;; Hardware stack levels required when called: 5
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_I2C_2_Master_Start
  6321 ;;		_I2C_2_Master_RepStart
  6322 ;;		_I2C_2_Master_Stop
  6323 ;;		_I2C_2_Master_Write
  6324 ;;		_I2C_2_Master_Read
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text28
  6329   002F6C                     __ptext28:
  6330                           	callstack 0
  6331   002F6C                     _I2C_2_Master_Idle:
  6332                           	callstack 23
  6333   002F6C                     l171:
  6334   002F6C  010E               	movlb	14	; () banked
  6335   002F6E  B5D8               	btfsc	216,2,b	;volatile
  6336   002F70  EFBC  F017         	goto	u991
  6337   002F74  EFBE  F017         	goto	u990
  6338   002F78                     u991:
  6339   002F78  EFB6  F017         	goto	l171
  6340   002F7C                     u990:
  6341   002F7C                     
  6342                           ; BSR set to: 14
  6343   002F7C  CEDA F00D          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6344   002F80  0E1F               	movlw	31
  6345   002F82  160D               	andwf	??_I2C_2_Master_Idle^0,f,c
  6346   002F84  A4D8               	btfss	status,2,c
  6347   002F86  EFC7  F017         	goto	u1001
  6348   002F8A  EFC9  F017         	goto	u1000
  6349   002F8E                     u1001:
  6350   002F8E  EFB6  F017         	goto	l171
  6351   002F92                     u1000:
  6352   002F92                     
  6353                           ; BSR set to: 14
  6354   002F92  0012               	return		;funcret
  6355   002F94                     __end_of_I2C_2_Master_Idle:
  6356                           	callstack 0
  6357                           
  6358 ;; *************** function _I2C_2_Master_Init *****************
  6359 ;; Defined at:
  6360 ;;		line 4 in file "i2c.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6378 ;;Total ram usage:        0 bytes
  6379 ;; Hardware stack levels used: 1
  6380 ;; Hardware stack levels required when called: 5
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_color_click_init
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text29
  6389   002F1A                     __ptext29:
  6390                           	callstack 0
  6391   002F1A                     _I2C_2_Master_Init:
  6392                           	callstack 24
  6393   002F1A                     
  6394                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6395   002F1A  010E               	movlb	14	; () banked
  6396   002F1C  51D9               	movf	217,w,b	;volatile
  6397   002F1E  0BF0               	andlw	-16
  6398   002F20  0908               	iorlw	8
  6399   002F22  6FD9               	movwf	217,b	;volatile
  6400   002F24                     
  6401                           ; BSR set to: 14
  6402                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6403   002F24  8BD9               	bsf	217,5,b	;volatile
  6404                           
  6405                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6406   002F26  0E9F               	movlw	159
  6407   002F28  6FD6               	movwf	214,b	;volatile
  6408   002F2A                     
  6409                           ; BSR set to: 14
  6410                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6411   002F2A  8A84               	bsf	132,5,c	;volatile
  6412   002F2C                     
  6413                           ; BSR set to: 14
  6414                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6415   002F2C  8C84               	bsf	132,6,c	;volatile
  6416   002F2E                     
  6417                           ; BSR set to: 14
  6418                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6419   002F2E  9BA7               	bcf	167,5,b	;volatile
  6420   002F30                     
  6421                           ; BSR set to: 14
  6422                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6423   002F30  9DA7               	bcf	167,6,b	;volatile
  6424                           
  6425                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6426   002F32  0E1D               	movlw	29
  6427   002F34  6F1D               	movwf	29,b	;volatile
  6428                           
  6429                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6430   002F36  0E1E               	movlw	30
  6431   002F38  6F1C               	movwf	28,b	;volatile
  6432                           
  6433                           ;i2c.c: 18:   RD5PPS=0x1C;
  6434   002F3A  0E1C               	movlw	28
  6435   002F3C  6F6F               	movwf	111,b	;volatile
  6436                           
  6437                           ;i2c.c: 19:   RD6PPS=0x1B;
  6438   002F3E  0E1B               	movlw	27
  6439   002F40  6F70               	movwf	112,b	;volatile
  6440   002F42                     
  6441                           ; BSR set to: 14
  6442   002F42  0012               	return		;funcret
  6443   002F44                     __end_of_I2C_2_Master_Init:
  6444                           	callstack 0
  6445                           
  6446 ;; *************** function _batteryLevel *****************
  6447 ;; Defined at:
  6448 ;;		line 6 in file "battery.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  batteryQuart    1   21[COMRAM] unsigned char 
  6453 ;;  batteryVolta    1   20[COMRAM] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  1    wreg      void 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6467 ;;Total ram usage:        2 bytes
  6468 ;; Hardware stack levels used: 1
  6469 ;; Hardware stack levels required when called: 6
  6470 ;; This function calls:
  6471 ;;		_ADC_getval
  6472 ;;		_ADC_init
  6473 ;;		___awdiv
  6474 ;; This function is called by:
  6475 ;;		_main
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text30
  6480   002E1C                     __ptext30:
  6481                           	callstack 0
  6482   002E1C                     _batteryLevel:
  6483                           	callstack 24
  6484   002E1C                     
  6485                           ;battery.c: 7:     ADC_init();
  6486   002E1C  EC68  F018         	call	_ADC_init	;wreg free
  6487                           
  6488                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6489   002E20  EC75  F018         	call	_ADC_getval	;wreg free
  6490   002E24  6E15               	movwf	batteryLevel@batteryVoltage^0,c
  6491   002E26                     
  6492                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6493   002E26  C015  F00D         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6494   002E2A  6A0E               	clrf	(___awdiv@dividend+1)^0,c
  6495   002E2C  0E00               	movlw	0
  6496   002E2E  6E10               	movwf	(___awdiv@divisor+1)^0,c
  6497   002E30  0E18               	movlw	24
  6498   002E32  6E0F               	movwf	___awdiv@divisor^0,c
  6499   002E34  EC44  F015         	call	___awdiv	;wreg free
  6500   002E38  500D               	movf	?___awdiv^0,w,c
  6501   002E3A  6E16               	movwf	batteryLevel@batteryQuarter^0,c
  6502   002E3C                     
  6503                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  6504   002E3C  A216               	btfss	batteryLevel@batteryQuarter^0,1,c
  6505   002E3E  EF23  F017         	goto	u1531
  6506   002E42  EF25  F017         	goto	u1530
  6507   002E46                     u1531:
  6508   002E46  EF28  F017         	goto	l376
  6509   002E4A                     u1530:
  6510   002E4A  8E7C               	bsf	124,7,c	;volatile
  6511   002E4C  EF29  F017         	goto	l377
  6512   002E50                     l376:
  6513   002E50  9E7C               	bcf	124,7,c	;volatile
  6514   002E52                     l377:
  6515                           
  6516                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  6517   002E52  A016               	btfss	batteryLevel@batteryQuarter^0,0,c
  6518   002E54  EF2E  F017         	goto	u1541
  6519   002E58  EF30  F017         	goto	u1540
  6520   002E5C                     u1541:
  6521   002E5C  EF33  F017         	goto	l378
  6522   002E60                     u1540:
  6523   002E60  8680               	bsf	128,3,c	;volatile
  6524   002E62  EF34  F017         	goto	l380
  6525   002E66                     l378:
  6526   002E66  9680               	bcf	128,3,c	;volatile
  6527   002E68                     l380:
  6528   002E68  0012               	return		;funcret
  6529   002E6A                     __end_of_batteryLevel:
  6530                           	callstack 0
  6531                           
  6532 ;; *************** function ___awdiv *****************
  6533 ;; Defined at:
  6534 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  dividend        2   12[COMRAM] int 
  6537 ;;  divisor         2   14[COMRAM] int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  quotient        2   18[COMRAM] int 
  6540 ;;  sign            1   17[COMRAM] unsigned char 
  6541 ;;  counter         1   16[COMRAM] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  2   12[COMRAM] int 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6552 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;Total ram usage:        8 bytes
  6556 ;; Hardware stack levels used: 1
  6557 ;; Hardware stack levels required when called: 5
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_batteryLevel
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text31
  6566   002A88                     __ptext31:
  6567                           	callstack 0
  6568   002A88                     ___awdiv:
  6569                           	callstack 24
  6570   002A88  0E00               	movlw	0
  6571   002A8A  6E12               	movwf	___awdiv@sign^0,c
  6572   002A8C  BE10               	btfsc	(___awdiv@divisor+1)^0,7,c
  6573   002A8E  EF4D  F015         	goto	u1470
  6574   002A92  EF4B  F015         	goto	u1471
  6575   002A96                     u1471:
  6576   002A96  EF53  F015         	goto	l2788
  6577   002A9A                     u1470:
  6578   002A9A  6C0F               	negf	___awdiv@divisor^0,c
  6579   002A9C  1E10               	comf	(___awdiv@divisor+1)^0,f,c
  6580   002A9E  B0D8               	btfsc	status,0,c
  6581   002AA0  2A10               	incf	(___awdiv@divisor+1)^0,f,c
  6582   002AA2  0E01               	movlw	1
  6583   002AA4  6E12               	movwf	___awdiv@sign^0,c
  6584   002AA6                     l2788:
  6585   002AA6  BE0E               	btfsc	(___awdiv@dividend+1)^0,7,c
  6586   002AA8  EF5A  F015         	goto	u1480
  6587   002AAC  EF58  F015         	goto	u1481
  6588   002AB0                     u1481:
  6589   002AB0  EF60  F015         	goto	l2794
  6590   002AB4                     u1480:
  6591   002AB4  6C0D               	negf	___awdiv@dividend^0,c
  6592   002AB6  1E0E               	comf	(___awdiv@dividend+1)^0,f,c
  6593   002AB8  B0D8               	btfsc	status,0,c
  6594   002ABA  2A0E               	incf	(___awdiv@dividend+1)^0,f,c
  6595   002ABC  0E01               	movlw	1
  6596   002ABE  1A12               	xorwf	___awdiv@sign^0,f,c
  6597   002AC0                     l2794:
  6598   002AC0  0E00               	movlw	0
  6599   002AC2  6E14               	movwf	(___awdiv@quotient+1)^0,c
  6600   002AC4  0E00               	movlw	0
  6601   002AC6  6E13               	movwf	___awdiv@quotient^0,c
  6602   002AC8  500F               	movf	___awdiv@divisor^0,w,c
  6603   002ACA  1010               	iorwf	(___awdiv@divisor+1)^0,w,c
  6604   002ACC  B4D8               	btfsc	status,2,c
  6605   002ACE  EF6B  F015         	goto	u1491
  6606   002AD2  EF6D  F015         	goto	u1490
  6607   002AD6                     u1491:
  6608   002AD6  EF95  F015         	goto	l2816
  6609   002ADA                     u1490:
  6610   002ADA  0E01               	movlw	1
  6611   002ADC  6E11               	movwf	___awdiv@counter^0,c
  6612   002ADE  EF75  F015         	goto	l2802
  6613   002AE2                     l2800:
  6614   002AE2  90D8               	bcf	status,0,c
  6615   002AE4  360F               	rlcf	___awdiv@divisor^0,f,c
  6616   002AE6  3610               	rlcf	(___awdiv@divisor+1)^0,f,c
  6617   002AE8  2A11               	incf	___awdiv@counter^0,f,c
  6618   002AEA                     l2802:
  6619   002AEA  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
  6620   002AEC  EF7A  F015         	goto	u1501
  6621   002AF0  EF7C  F015         	goto	u1500
  6622   002AF4                     u1501:
  6623   002AF4  EF71  F015         	goto	l2800
  6624   002AF8                     u1500:
  6625   002AF8                     l2804:
  6626   002AF8  90D8               	bcf	status,0,c
  6627   002AFA  3613               	rlcf	___awdiv@quotient^0,f,c
  6628   002AFC  3614               	rlcf	(___awdiv@quotient+1)^0,f,c
  6629   002AFE  500F               	movf	___awdiv@divisor^0,w,c
  6630   002B00  5C0D               	subwf	___awdiv@dividend^0,w,c
  6631   002B02  5010               	movf	(___awdiv@divisor+1)^0,w,c
  6632   002B04  580E               	subwfb	(___awdiv@dividend+1)^0,w,c
  6633   002B06  A0D8               	btfss	status,0,c
  6634   002B08  EF88  F015         	goto	u1511
  6635   002B0C  EF8A  F015         	goto	u1510
  6636   002B10                     u1511:
  6637   002B10  EF8F  F015         	goto	l2812
  6638   002B14                     u1510:
  6639   002B14  500F               	movf	___awdiv@divisor^0,w,c
  6640   002B16  5E0D               	subwf	___awdiv@dividend^0,f,c
  6641   002B18  5010               	movf	(___awdiv@divisor+1)^0,w,c
  6642   002B1A  5A0E               	subwfb	(___awdiv@dividend+1)^0,f,c
  6643   002B1C  8013               	bsf	___awdiv@quotient^0,0,c
  6644   002B1E                     l2812:
  6645   002B1E  90D8               	bcf	status,0,c
  6646   002B20  3210               	rrcf	(___awdiv@divisor+1)^0,f,c
  6647   002B22  320F               	rrcf	___awdiv@divisor^0,f,c
  6648   002B24  2E11               	decfsz	___awdiv@counter^0,f,c
  6649   002B26  EF7C  F015         	goto	l2804
  6650   002B2A                     l2816:
  6651   002B2A  5012               	movf	___awdiv@sign^0,w,c
  6652   002B2C  B4D8               	btfsc	status,2,c
  6653   002B2E  EF9B  F015         	goto	u1521
  6654   002B32  EF9D  F015         	goto	u1520
  6655   002B36                     u1521:
  6656   002B36  EFA1  F015         	goto	l2820
  6657   002B3A                     u1520:
  6658   002B3A  6C13               	negf	___awdiv@quotient^0,c
  6659   002B3C  1E14               	comf	(___awdiv@quotient+1)^0,f,c
  6660   002B3E  B0D8               	btfsc	status,0,c
  6661   002B40  2A14               	incf	(___awdiv@quotient+1)^0,f,c
  6662   002B42                     l2820:
  6663   002B42  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  6664   002B46  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  6665   002B4A  0012               	return		;funcret
  6666   002B4C                     __end_of___awdiv:
  6667                           	callstack 0
  6668                           
  6669 ;; *************** function _ADC_init *****************
  6670 ;; Defined at:
  6671 ;;		line 9 in file "ADC.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6689 ;;Total ram usage:        0 bytes
  6690 ;; Hardware stack levels used: 1
  6691 ;; Hardware stack levels required when called: 5
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_batteryLevel
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text32
  6700   0030D0                     __ptext32:
  6701                           	callstack 0
  6702   0030D0                     _ADC_init:
  6703                           	callstack 24
  6704   0030D0                     
  6705                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6706   0030D0  8C86               	bsf	134,6,c	;volatile
  6707                           
  6708                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6709   0030D2  010E               	movlb	14	; () banked
  6710   0030D4  8DB4               	bsf	180,6,b	;volatile
  6711                           
  6712                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6713   0030D6  010F               	movlb	15	; () banked
  6714   0030D8  9958               	bcf	88,4,b	;volatile
  6715   0030DA                     
  6716                           ; BSR set to: 15
  6717                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6718   0030DA  0EFC               	movlw	-4
  6719   0030DC  1758               	andwf	88,f,b	;volatile
  6720                           
  6721                           ;ADC.c: 17:     ADPCH=0b101110;
  6722   0030DE  0E2E               	movlw	46
  6723   0030E0  6F5F               	movwf	95,b	;volatile
  6724   0030E2                     
  6725                           ; BSR set to: 15
  6726                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6727   0030E2  9460               	bcf	96,2,c	;volatile
  6728   0030E4                     
  6729                           ; BSR set to: 15
  6730                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6731   0030E4  8860               	bsf	96,4,c	;volatile
  6732   0030E6                     
  6733                           ; BSR set to: 15
  6734                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6735   0030E6  8E60               	bsf	96,7,c	;volatile
  6736   0030E8                     
  6737                           ; BSR set to: 15
  6738   0030E8  0012               	return		;funcret
  6739   0030EA                     __end_of_ADC_init:
  6740                           	callstack 0
  6741                           
  6742 ;; *************** function _ADC_getval *****************
  6743 ;; Defined at:
  6744 ;;		line 23 in file "ADC.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  tmpval          1   12[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      unsigned char 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 5
  6765 ;; This function calls:
  6766 ;;		Nothing
  6767 ;; This function is called by:
  6768 ;;		_batteryLevel
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           	psect	text33
  6773   0030EA                     __ptext33:
  6774                           	callstack 0
  6775   0030EA                     _ADC_getval:
  6776                           	callstack 24
  6777   0030EA                     
  6778                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6779   0030EA  8060               	bsf	96,0,c	;volatile
  6780   0030EC                     l362:
  6781   0030EC  B060               	btfsc	96,0,c	;volatile
  6782   0030EE  EF7B  F018         	goto	u1291
  6783   0030F2  EF7D  F018         	goto	u1290
  6784   0030F6                     u1291:
  6785   0030F6  EF76  F018         	goto	l362
  6786   0030FA                     u1290:
  6787   0030FA                     
  6788                           ;ADC.c: 31:     tmpval = ADRESH;
  6789   0030FA  CF64 F00D          	movff	3940,ADC_getval@tmpval	;volatile
  6790   0030FE                     
  6791                           ;ADC.c: 35:     return tmpval;
  6792   0030FE  500D               	movf	ADC_getval@tmpval^0,w,c
  6793   003100  0012               	return		;funcret
  6794   003102                     __end_of_ADC_getval:
  6795                           	callstack 0
  6796                           
  6797 ;; *************** function _Timer0_init *****************
  6798 ;; Defined at:
  6799 ;;		line 7 in file "timers.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used: 1
  6819 ;; Hardware stack levels required when called: 5
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_main
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text34
  6828   003072                     __ptext34:
  6829                           	callstack 0
  6830   003072                     _Timer0_init:
  6831                           	callstack 25
  6832   003072                     
  6833                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  6834   003072  50D6               	movf	214,w,c	;volatile
  6835   003074  0B1F               	andlw	-225
  6836   003076  0940               	iorlw	64
  6837   003078  6ED6               	movwf	214,c	;volatile
  6838   00307A                     
  6839                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  6840   00307A  88D6               	bsf	214,4,c	;volatile
  6841                           
  6842                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1011;
  6843   00307C  50D6               	movf	214,w,c	;volatile
  6844   00307E  0BF0               	andlw	-16
  6845   003080  090B               	iorlw	11
  6846   003082  6ED6               	movwf	214,c	;volatile
  6847   003084                     
  6848                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  6849   003084  88D5               	bsf	213,4,c	;volatile
  6850                           
  6851                           ;timers.c: 15:     TMR0H=0;
  6852   003086  0E00               	movlw	0
  6853   003088  6ED4               	movwf	212,c	;volatile
  6854                           
  6855                           ;timers.c: 16:     TMR0L=0;
  6856   00308A  0E00               	movlw	0
  6857   00308C  6ED3               	movwf	211,c	;volatile
  6858   00308E                     
  6859                           ;timers.c: 17:     T0CON0bits.T0EN=1;
  6860   00308E  8ED5               	bsf	213,7,c	;volatile
  6861   003090  0012               	return		;funcret
  6862   003092                     __end_of_Timer0_init:
  6863                           	callstack 0
  6864                           
  6865 ;; *************** function _Interrupts_init *****************
  6866 ;; Defined at:
  6867 ;;		line 11 in file "interrupts.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;		None
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		None
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6885 ;;Total ram usage:        0 bytes
  6886 ;; Hardware stack levels used: 1
  6887 ;; Hardware stack levels required when called: 5
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_main
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text35
  6896   00311A                     __ptext35:
  6897                           	callstack 0
  6898   00311A                     _Interrupts_init:
  6899                           	callstack 25
  6900   00311A                     
  6901                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
  6902   00311A  8082               	bsf	130,0,c	;volatile
  6903                           
  6904                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
  6905   00311C  010E               	movlb	14	; () banked
  6906   00311E  919A               	bcf	154,0,b	;volatile
  6907                           
  6908                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
  6909   003120  8129               	bsf	41,0,b	;volatile
  6910                           
  6911                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
  6912   003122  811F               	bsf	31,0,b	;volatile
  6913                           
  6914                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
  6915   003124  90F2               	bcf	242,0,c	;volatile
  6916                           
  6917                           ;interrupts.c: 22:     TMR0IE=1;
  6918   003126  8B29               	bsf	41,5,b	;volatile
  6919                           
  6920                           ;interrupts.c: 23:     PIE4bits.RC4IE=1;
  6921   003128  872D               	bsf	45,3,b	;volatile
  6922                           
  6923                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
  6924   00312A  8CF2               	bsf	242,6,c	;volatile
  6925                           
  6926                           ;interrupts.c: 25:     INTCONbits.GIE=1;
  6927   00312C  8EF2               	bsf	242,7,c	;volatile
  6928   00312E                     
  6929                           ; BSR set to: 14
  6930   00312E  0012               	return		;funcret
  6931   003130                     __end_of_Interrupts_init:
  6932                           	callstack 0
  6933                           
  6934 ;; *************** function _Buggy_init *****************
  6935 ;; Defined at:
  6936 ;;		line 7 in file "buggysetup.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;		None
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      void 
  6943 ;; Registers used:
  6944 ;;		None
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6954 ;;Total ram usage:        0 bytes
  6955 ;; Hardware stack levels used: 1
  6956 ;; Hardware stack levels required when called: 5
  6957 ;; This function calls:
  6958 ;;		Nothing
  6959 ;; This function is called by:
  6960 ;;		_main
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text36
  6965   002EE4                     __ptext36:
  6966                           	callstack 0
  6967   002EE4                     _Buggy_init:
  6968                           	callstack 25
  6969   002EE4                     
  6970                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  6971   002EE4  9E7C               	bcf	124,7,c	;volatile
  6972                           
  6973                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  6974   002EE6  9E84               	bcf	132,7,c	;volatile
  6975                           
  6976                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  6977   002EE8  9680               	bcf	128,3,c	;volatile
  6978                           
  6979                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  6980   002EEA  9688               	bcf	136,3,c	;volatile
  6981                           
  6982                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  6983   002EEC  8486               	bsf	134,2,c	;volatile
  6984                           
  6985                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  6986   002EEE  010E               	movlb	14	; () banked
  6987   002EF0  95B4               	bcf	180,2,b	;volatile
  6988                           
  6989                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  6990   002EF2  8686               	bsf	134,3,c	;volatile
  6991                           
  6992                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  6993   002EF4  97B4               	bcf	180,3,b	;volatile
  6994                           
  6995                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  6996   002EF6  9280               	bcf	128,1,c	;volatile
  6997                           
  6998                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  6999   002EF8  9288               	bcf	136,1,c	;volatile
  7000                           
  7001                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  7002   002EFA  987C               	bcf	124,4,c	;volatile
  7003                           
  7004                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  7005   002EFC  9884               	bcf	132,4,c	;volatile
  7006                           
  7007                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  7008   002EFE  967C               	bcf	124,3,c	;volatile
  7009                           
  7010                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  7011   002F00  9684               	bcf	132,3,c	;volatile
  7012                           
  7013                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  7014   002F02  97A7               	bcf	167,3,b	;volatile
  7015                           
  7016                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  7017   002F04  9080               	bcf	128,0,c	;volatile
  7018                           
  7019                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  7020   002F06  9088               	bcf	136,0,c	;volatile
  7021                           
  7022                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  7023   002F08  907E               	bcf	126,0,c	;volatile
  7024                           
  7025                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  7026   002F0A  9086               	bcf	134,0,c	;volatile
  7027                           
  7028                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  7029   002F0C  907F               	bcf	127,0,c	;volatile
  7030                           
  7031                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  7032   002F0E  9087               	bcf	135,0,c	;volatile
  7033                           
  7034                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  7035   002F10  9E7D               	bcf	125,7,c	;volatile
  7036                           
  7037                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  7038   002F12  9E85               	bcf	133,7,c	;volatile
  7039                           
  7040                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  7041   002F14  9679               	bcf	121,3,c	;volatile
  7042                           
  7043                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  7044   002F16  9681               	bcf	129,3,c	;volatile
  7045   002F18                     
  7046                           ; BSR set to: 14
  7047   002F18  0012               	return		;funcret
  7048   002F1A                     __end_of_Buggy_init:
  7049                           	callstack 0
  7050                           
  7051 ;; *************** function _HighISR *****************
  7052 ;; Defined at:
  7053 ;;		line 33 in file "interrupts.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7069 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7070 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7071 ;;Total ram usage:        3 bytes
  7072 ;; Hardware stack levels used: 1
  7073 ;; Hardware stack levels required when called: 4
  7074 ;; This function calls:
  7075 ;;		_getCharFromTxBuf
  7076 ;;		_isDataInTxBuf
  7077 ;;		_putCharToRxBuf
  7078 ;;		i2_color_clear_init_interrupts
  7079 ;; This function is called by:
  7080 ;;		Interrupt level 2
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	intcode
  7085   000008                     __pintcode:
  7086                           	callstack 0
  7087   000008                     _HighISR:
  7088                           	callstack 21
  7089                           
  7090                           ; BSR set to: 14
  7091                           ;incstack = 0
  7092   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7093   00000A  CFD9 F00B          	movff	fsr2l,??_HighISR+1
  7094   00000E  CFDA F00C          	movff	fsr2h,??_HighISR+2
  7095   000012                     
  7096                           ;interrupts.c: 37:     if(PIR0bits.INT0IF){
  7097   000012  010E               	movlb	14	; () banked
  7098   000014  A133               	btfss	51,0,b	;volatile
  7099   000016  EF0F  F000         	goto	i2u178_41
  7100   00001A  EF11  F000         	goto	i2u178_40
  7101   00001E                     i2u178_41:
  7102   00001E  EF18  F000         	goto	i2l3178
  7103   000022                     i2u178_40:
  7104   000022                     
  7105                           ; BSR set to: 14
  7106                           ;interrupts.c: 39:     wall = 1;
  7107   000022  0E01               	movlw	1
  7108   000024  0101               	movlb	1	; () banked
  7109   000026  6FFA               	movwf	_wall& (0+255),b
  7110   000028                     
  7111                           ; BSR set to: 1
  7112                           ;interrupts.c: 40:     color_clear_init_interrupts();
  7113   000028  EC2B  F016         	call	i2_color_clear_init_interrupts	;wreg free
  7114   00002C                     
  7115                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  7116   00002C  010E               	movlb	14	; () banked
  7117   00002E  9133               	bcf	51,0,b	;volatile
  7118   000030                     i2l3178:
  7119                           
  7120                           ; BSR set to: 14
  7121                           ;interrupts.c: 49:     if(TMR0IF){
  7122   000030  AB33               	btfss	51,5,b	;volatile
  7123   000032  EF1D  F000         	goto	i2u179_41
  7124   000036  EF1F  F000         	goto	i2u179_40
  7125   00003A                     i2u179_41:
  7126   00003A  EF33  F000         	goto	i2l3184
  7127   00003E                     i2u179_40:
  7128   00003E                     
  7129                           ; BSR set to: 14
  7130                           ;interrupts.c: 51:     LATHbits.LATH3 = !LATHbits.LATH3;
  7131   00003E  A680               	btfss	128,3,c	;volatile
  7132   000040  EF24  F000         	goto	i2u180_41
  7133   000044  EF28  F000         	goto	i2u180_40
  7134   000048                     i2u180_41:
  7135   000048  6A0A               	clrf	??_HighISR^0,c
  7136   00004A  2A0A               	incf	??_HighISR^0,f,c
  7137   00004C  EF29  F000         	goto	i2u181_48
  7138   000050                     i2u180_40:
  7139   000050  6A0A               	clrf	??_HighISR^0,c
  7140   000052                     i2u181_48:
  7141   000052  460A               	rlncf	??_HighISR^0,f,c
  7142   000054  460A               	rlncf	??_HighISR^0,f,c
  7143   000056  460A               	rlncf	??_HighISR^0,f,c
  7144   000058  5080               	movf	128,w,c	;volatile
  7145   00005A  180A               	xorwf	??_HighISR^0,w,c
  7146   00005C  0BF7               	andlw	-9
  7147   00005E  180A               	xorwf	??_HighISR^0,w,c
  7148   000060  6E80               	movwf	128,c	;volatile
  7149   000062                     
  7150                           ;interrupts.c: 52:  TMR0IF=0;
  7151   000062  010E               	movlb	14	; () banked
  7152   000064  9B33               	bcf	51,5,b	;volatile
  7153   000066                     i2l3184:
  7154                           
  7155                           ; BSR set to: 14
  7156                           ;interrupts.c: 58:     if(PIR4bits.RC4IF){
  7157   000066  A737               	btfss	55,3,b	;volatile
  7158   000068  EF38  F000         	goto	i2u182_41
  7159   00006C  EF3A  F000         	goto	i2u182_40
  7160   000070                     i2u182_41:
  7161   000070  EF3D  F000         	goto	i2l3188
  7162   000074                     i2u182_40:
  7163   000074                     
  7164                           ; BSR set to: 14
  7165                           ;interrupts.c: 60:     putCharToRxBuf(RC4REG);
  7166   000074  51E3               	movf	227,w,b	;volatile
  7167   000076  ECF1  F017         	call	_putCharToRxBuf
  7168   00007A                     i2l3188:
  7169                           
  7170                           ;interrupts.c: 64:     if(PIR4bits.TX4IF){
  7171   00007A  010E               	movlb	14	; () banked
  7172   00007C  A537               	btfss	55,2,b	;volatile
  7173   00007E  EF43  F000         	goto	i2u183_41
  7174   000082  EF45  F000         	goto	i2u183_40
  7175   000086                     i2u183_41:
  7176   000086  EF55  F000         	goto	i2l281
  7177   00008A                     i2u183_40:
  7178   00008A                     
  7179                           ; BSR set to: 14
  7180                           ;interrupts.c: 66:     TX4REG = getCharFromTxBuf();
  7181   00008A  EC04  F018         	call	_getCharFromTxBuf	;wreg free
  7182   00008E  010E               	movlb	14	; () banked
  7183   000090  6FE4               	movwf	228,b	;volatile
  7184   000092                     
  7185                           ; BSR set to: 14
  7186                           ;interrupts.c: 67:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  7187   000092  EC81  F018         	call	_isDataInTxBuf	;wreg free
  7188   000096  0900               	iorlw	0
  7189   000098  A4D8               	btfss	status,2,c
  7190   00009A  EF51  F000         	goto	i2u184_41
  7191   00009E  EF53  F000         	goto	i2u184_40
  7192   0000A2                     i2u184_41:
  7193   0000A2  EF55  F000         	goto	i2l281
  7194   0000A6                     i2u184_40:
  7195   0000A6  010E               	movlb	14	; () banked
  7196   0000A8  952D               	bcf	45,2,b	;volatile
  7197   0000AA                     i2l281:
  7198   0000AA  C00C  FFDA         	movff	??_HighISR+2,fsr2h
  7199   0000AE  C00B  FFD9         	movff	??_HighISR+1,fsr2l
  7200   0000B2  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7201   0000B4  0011               	retfie		f
  7202   0000B6                     __end_of_HighISR:
  7203                           	callstack 0
  7204                           
  7205 ;; *************** function i2_color_clear_init_interrupts *****************
  7206 ;; Defined at:
  7207 ;;		line 25 in file "color.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  low_threshol    2    7[COMRAM] unsigned int 
  7212 ;;  high_thresho    2    5[COMRAM] unsigned int 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      void 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7226 ;;Total ram usage:        5 bytes
  7227 ;; Hardware stack levels used: 1
  7228 ;; Hardware stack levels required when called: 3
  7229 ;; This function calls:
  7230 ;;		i2_I2C_2_Master_Start
  7231 ;;		i2_I2C_2_Master_Stop
  7232 ;;		i2_I2C_2_Master_Write
  7233 ;;		i2_color_writetoaddr
  7234 ;; This function is called by:
  7235 ;;		_HighISR
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text38
  7240   002C56                     __ptext38:
  7241                           	callstack 0
  7242   002C56                     i2_color_clear_init_interrupts:
  7243                           	callstack 21
  7244   002C56                     
  7245                           ;color.c: 27:     I2C_2_Master_Start();
  7246   002C56  ECBD  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7247                           
  7248                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  7249   002C5A  0E52               	movlw	82
  7250   002C5C  EC9E  F018         	call	i2_I2C_2_Master_Write
  7251                           
  7252                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  7253   002C60  0EE6               	movlw	230
  7254   002C62  EC9E  F018         	call	i2_I2C_2_Master_Write
  7255                           
  7256                           ;color.c: 30:     I2C_2_Master_Stop();
  7257   002C66  ECB8  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7258   002C6A                     
  7259                           ;color.c: 33:     unsigned int high_threshold = ambient + 600;
  7260   002C6A  0E58               	movlw	88
  7261   002C6C  244A               	addwf	_ambient^0,w,c
  7262   002C6E  6E06               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
  7263   002C70  0E02               	movlw	2
  7264   002C72  204B               	addwfc	(_ambient+1)^0,w,c
  7265   002C74  6E07               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
  7266   002C76                     
  7267                           ;color.c: 34:     unsigned int low_threshold = ambient - 400;
  7268   002C76  0E70               	movlw	112
  7269   002C78  244A               	addwf	_ambient^0,w,c
  7270   002C7A  6E08               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
  7271   002C7C  0EFE               	movlw	254
  7272   002C7E  204B               	addwfc	(_ambient+1)^0,w,c
  7273   002C80  6E09               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
  7274                           
  7275                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  7276   002C82  0E13               	movlw	19
  7277   002C84  6E03               	movwf	i2color_writetoaddr@value^0,c
  7278   002C86  0E00               	movlw	0
  7279   002C88  EC49  F018         	call	i2_color_writetoaddr
  7280   002C8C                     
  7281                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7282   002C8C  0E3F               	movlw	63
  7283   002C8E  6E05               	movwf	??i2_color_clear_init_interrupts^0,c
  7284   002C90  0E55               	movlw	85
  7285   002C92                     i2u267_47:
  7286   002C92  2EE8               	decfsz	wreg,f,c
  7287   002C94  D7FE               	bra	i2u267_47
  7288   002C96  2E05               	decfsz	??i2_color_clear_init_interrupts^0,f,c
  7289   002C98  D7FC               	bra	i2u267_47
  7290   002C9A  0000               	nop	
  7291   002C9C                     
  7292                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  7293   002C9C  5007               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
  7294   002C9E  6E03               	movwf	i2color_writetoaddr@value^0,c
  7295   002CA0  0E07               	movlw	7
  7296   002CA2  EC49  F018         	call	i2_color_writetoaddr
  7297   002CA6                     
  7298                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  7299   002CA6  C006  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
  7300   002CAA  0E06               	movlw	6
  7301   002CAC  EC49  F018         	call	i2_color_writetoaddr
  7302   002CB0                     
  7303                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  7304   002CB0  5009               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
  7305   002CB2  6E03               	movwf	i2color_writetoaddr@value^0,c
  7306   002CB4  0E05               	movlw	5
  7307   002CB6  EC49  F018         	call	i2_color_writetoaddr
  7308   002CBA                     
  7309                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  7310   002CBA  C008  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
  7311   002CBE  0E04               	movlw	4
  7312   002CC0  EC49  F018         	call	i2_color_writetoaddr
  7313   002CC4                     
  7314                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  7315   002CC4  0E04               	movlw	4
  7316   002CC6  6E03               	movwf	i2color_writetoaddr@value^0,c
  7317   002CC8  0E0C               	movlw	12
  7318   002CCA  EC49  F018         	call	i2_color_writetoaddr
  7319   002CCE  0012               	return		;funcret
  7320   002CD0                     __end_ofi2_color_clear_init_interrupts:
  7321                           	callstack 0
  7322                           
  7323 ;; *************** function i2_color_writetoaddr *****************
  7324 ;; Defined at:
  7325 ;;		line 48 in file "color.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  address         1    wreg     unsigned char 
  7328 ;;  value           1    2[COMRAM] unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  address         1    3[COMRAM] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7340 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7344 ;;Total ram usage:        2 bytes
  7345 ;; Hardware stack levels used: 1
  7346 ;; Hardware stack levels required when called: 2
  7347 ;; This function calls:
  7348 ;;		i2_I2C_2_Master_Start
  7349 ;;		i2_I2C_2_Master_Stop
  7350 ;;		i2_I2C_2_Master_Write
  7351 ;; This function is called by:
  7352 ;;		i2_color_clear_init_interrupts
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text39
  7357   003092                     __ptext39:
  7358                           	callstack 0
  7359   003092                     i2_color_writetoaddr:
  7360                           	callstack 21
  7361                           
  7362                           ;incstack = 0
  7363                           ;i2color_writetoaddr@address stored from wreg
  7364   003092  6E04               	movwf	i2color_writetoaddr@address^0,c
  7365   003094                     
  7366                           ;color.c: 49:     I2C_2_Master_Start();
  7367   003094  ECBD  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7368                           
  7369                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  7370   003098  0E52               	movlw	82
  7371   00309A  EC9E  F018         	call	i2_I2C_2_Master_Write
  7372                           
  7373                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  7374   00309E  5004               	movf	i2color_writetoaddr@address^0,w,c
  7375   0030A0  0980               	iorlw	128
  7376   0030A2  EC9E  F018         	call	i2_I2C_2_Master_Write
  7377                           
  7378                           ;color.c: 52:     I2C_2_Master_Write(value);
  7379   0030A6  5003               	movf	i2color_writetoaddr@value^0,w,c
  7380   0030A8  EC9E  F018         	call	i2_I2C_2_Master_Write
  7381                           
  7382                           ;color.c: 53:     I2C_2_Master_Stop();
  7383   0030AC  ECB8  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7384   0030B0  0012               	return		;funcret
  7385   0030B2                     __end_ofi2_color_writetoaddr:
  7386                           	callstack 0
  7387                           
  7388 ;; *************** function i2_I2C_2_Master_Write *****************
  7389 ;; Defined at:
  7390 ;;		line 45 in file "i2c.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  data_byte       1    wreg     unsigned char 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  data_byte       1    1[COMRAM] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  1    wreg      void 
  7397 ;; Registers used:
  7398 ;;		wreg, status,2, status,0, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7408 ;;Total ram usage:        1 bytes
  7409 ;; Hardware stack levels used: 1
  7410 ;; Hardware stack levels required when called: 1
  7411 ;; This function calls:
  7412 ;;		i2_I2C_2_Master_Idle
  7413 ;; This function is called by:
  7414 ;;		i2_color_clear_init_interrupts
  7415 ;;		i2_color_writetoaddr
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text40
  7420   00313C                     __ptext40:
  7421                           	callstack 0
  7422   00313C                     i2_I2C_2_Master_Write:
  7423                           	callstack 21
  7424                           
  7425                           ;incstack = 0
  7426                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7427   00313C  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7428   00313E                     
  7429                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7430   00313E  ECCA  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7431   003142                     
  7432                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7433   003142  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7434   003146  0012               	return		;funcret
  7435   003148                     __end_ofi2_I2C_2_Master_Write:
  7436                           	callstack 0
  7437                           
  7438 ;; *************** function i2_I2C_2_Master_Stop *****************
  7439 ;; Defined at:
  7440 ;;		line 39 in file "i2c.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;		None
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;		None
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;Total ram usage:        0 bytes
  7459 ;; Hardware stack levels used: 1
  7460 ;; Hardware stack levels required when called: 1
  7461 ;; This function calls:
  7462 ;;		i2_I2C_2_Master_Idle
  7463 ;; This function is called by:
  7464 ;;		i2_color_clear_init_interrupts
  7465 ;;		i2_color_writetoaddr
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text41
  7470   003170                     __ptext41:
  7471                           	callstack 0
  7472   003170                     i2_I2C_2_Master_Stop:
  7473                           	callstack 21
  7474   003170                     
  7475                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7476   003170  ECCA  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7477   003174                     
  7478                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7479   003174  010E               	movlb	14	; () banked
  7480   003176  85DA               	bsf	218,2,b	;volatile
  7481   003178                     
  7482                           ; BSR set to: 14
  7483   003178  0012               	return		;funcret
  7484   00317A                     __end_ofi2_I2C_2_Master_Stop:
  7485                           	callstack 0
  7486                           
  7487 ;; *************** function i2_I2C_2_Master_Start *****************
  7488 ;; Defined at:
  7489 ;;		line 27 in file "i2c.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7507 ;;Total ram usage:        0 bytes
  7508 ;; Hardware stack levels used: 1
  7509 ;; Hardware stack levels required when called: 1
  7510 ;; This function calls:
  7511 ;;		i2_I2C_2_Master_Idle
  7512 ;; This function is called by:
  7513 ;;		i2_color_clear_init_interrupts
  7514 ;;		i2_color_writetoaddr
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text42
  7519   00317A                     __ptext42:
  7520                           	callstack 0
  7521   00317A                     i2_I2C_2_Master_Start:
  7522                           	callstack 21
  7523   00317A                     
  7524                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7525   00317A  ECCA  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7526   00317E                     
  7527                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7528   00317E  010E               	movlb	14	; () banked
  7529   003180  81DA               	bsf	218,0,b	;volatile
  7530   003182                     
  7531                           ; BSR set to: 14
  7532   003182  0012               	return		;funcret
  7533   003184                     __end_ofi2_I2C_2_Master_Start:
  7534                           	callstack 0
  7535                           
  7536 ;; *************** function i2_I2C_2_Master_Idle *****************
  7537 ;; Defined at:
  7538 ;;		line 22 in file "i2c.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7556 ;;Total ram usage:        1 bytes
  7557 ;; Hardware stack levels used: 1
  7558 ;; This function calls:
  7559 ;;		Nothing
  7560 ;; This function is called by:
  7561 ;;		i2_I2C_2_Master_Start
  7562 ;;		i2_I2C_2_Master_Stop
  7563 ;;		i2_I2C_2_Master_Write
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           	psect	text43
  7568   002F94                     __ptext43:
  7569                           	callstack 0
  7570   002F94                     i2_I2C_2_Master_Idle:
  7571                           	callstack 21
  7572   002F94                     i2l171:
  7573   002F94  010E               	movlb	14	; () banked
  7574   002F96  B5D8               	btfsc	216,2,b	;volatile
  7575   002F98  EFD0  F017         	goto	i2u106_41
  7576   002F9C  EFD2  F017         	goto	i2u106_40
  7577   002FA0                     i2u106_41:
  7578   002FA0  EFCA  F017         	goto	i2l171
  7579   002FA4                     i2u106_40:
  7580   002FA4                     
  7581                           ; BSR set to: 14
  7582   002FA4  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7583   002FA8  0E1F               	movlw	31
  7584   002FAA  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7585   002FAC  A4D8               	btfss	status,2,c
  7586   002FAE  EFDB  F017         	goto	i2u107_41
  7587   002FB2  EFDD  F017         	goto	i2u107_40
  7588   002FB6                     i2u107_41:
  7589   002FB6  EFCA  F017         	goto	i2l171
  7590   002FBA                     i2u107_40:
  7591   002FBA                     
  7592                           ; BSR set to: 14
  7593   002FBA  0012               	return		;funcret
  7594   002FBC                     __end_ofi2_I2C_2_Master_Idle:
  7595                           	callstack 0
  7596                           
  7597 ;; *************** function _putCharToRxBuf *****************
  7598 ;; Defined at:
  7599 ;;		line 33 in file "serial.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  byte            1    wreg     unsigned char 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  byte            1    0[COMRAM] unsigned char 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      void 
  7606 ;; Registers used:
  7607 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7617 ;;Total ram usage:        1 bytes
  7618 ;; Hardware stack levels used: 1
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_HighISR
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           	psect	text44
  7627   002FE2                     __ptext44:
  7628                           	callstack 0
  7629   002FE2                     _putCharToRxBuf:
  7630                           	callstack 24
  7631                           
  7632                           ; BSR set to: 14
  7633                           ;incstack = 0
  7634                           ;putCharToRxBuf@byte stored from wreg
  7635   002FE2  6E01               	movwf	putCharToRxBuf@byte^0,c
  7636   002FE4                     
  7637                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  7638   002FE4  0E13               	movlw	19
  7639   002FE6  6449               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  7640   002FE8  EFF8  F017         	goto	i2u164_41
  7641   002FEC  EFFA  F017         	goto	i2u164_40
  7642   002FF0                     i2u164_41:
  7643   002FF0  EFFC  F017         	goto	i2l3018
  7644   002FF4                     i2u164_40:
  7645   002FF4  0E00               	movlw	0
  7646   002FF6  6E49               	movwf	_RxBufWriteCnt^0,c	;volatile
  7647   002FF8                     i2l3018:
  7648                           
  7649                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  7650   002FF8  5049               	movf	_RxBufWriteCnt^0,w,c
  7651   002FFA  0FC4               	addlw	low _EUSART4RXbuf
  7652   002FFC  6ED9               	movwf	fsr2l,c
  7653   002FFE  6ADA               	clrf	fsr2h,c
  7654   003000  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  7655   003004  2A49               	incf	_RxBufWriteCnt^0,f,c	;volatile
  7656   003006  0012               	return		;funcret
  7657   003008                     __end_of_putCharToRxBuf:
  7658                           	callstack 0
  7659                           
  7660 ;; *************** function _isDataInTxBuf *****************
  7661 ;; Defined at:
  7662 ;;		line 61 in file "serial.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      unsigned char 
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7680 ;;Total ram usage:        0 bytes
  7681 ;; Hardware stack levels used: 1
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_HighISR
  7686 ;;		_sendTxBuf
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text45
  7691   003102                     __ptext45:
  7692                           	callstack 0
  7693   003102                     _isDataInTxBuf:
  7694                           	callstack 24
  7695   003102                     
  7696                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  7697   003102  5046               	movf	_TxBufReadCnt^0,w,c	;volatile
  7698   003104  1847               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  7699   003106  A4D8               	btfss	status,2,c
  7700   003108  EF88  F018         	goto	i2u166_41
  7701   00310C  EF8B  F018         	goto	i2u166_40
  7702   003110                     i2u166_41:
  7703   003110  0E01               	movlw	1
  7704   003112  EF8C  F018         	goto	i2u167_40
  7705   003116                     i2u166_40:
  7706   003116  0E00               	movlw	0
  7707   003118                     i2u167_40:
  7708   003118  0012               	return		;funcret
  7709   00311A                     __end_of_isDataInTxBuf:
  7710                           	callstack 0
  7711                           
  7712 ;; *************** function _getCharFromTxBuf *****************
  7713 ;; Defined at:
  7714 ;;		line 47 in file "serial.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      unsigned char 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7731 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7732 ;;Total ram usage:        1 bytes
  7733 ;; Hardware stack levels used: 1
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_HighISR
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           	psect	text46
  7742   003008                     __ptext46:
  7743                           	callstack 0
  7744   003008                     _getCharFromTxBuf:
  7745                           	callstack 24
  7746   003008                     
  7747                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7748   003008  0E3B               	movlw	59
  7749   00300A  6446               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7750   00300C  EF0A  F018         	goto	i2u165_41
  7751   003010  EF0C  F018         	goto	i2u165_40
  7752   003014                     i2u165_41:
  7753   003014  EF0E  F018         	goto	i2l3026
  7754   003018                     i2u165_40:
  7755   003018  0E00               	movlw	0
  7756   00301A  6E46               	movwf	_TxBufReadCnt^0,c	;volatile
  7757   00301C                     i2l3026:
  7758                           
  7759                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  7760   00301C  2A46               	incf	_TxBufReadCnt^0,f,c	;volatile
  7761   00301E  0446               	decf	_TxBufReadCnt^0,w,c	;volatile
  7762   003020  6E01               	movwf	??_getCharFromTxBuf^0,c
  7763   003022  5001               	movf	??_getCharFromTxBuf^0,w,c
  7764   003024  0F60               	addlw	low _EUSART4TXbuf
  7765   003026  6ED9               	movwf	fsr2l,c
  7766   003028  6ADA               	clrf	fsr2h,c
  7767   00302A  50DF               	movf	indf2,w,c
  7768   00302C  0012               	return		;funcret
  7769   00302E                     __end_of_getCharFromTxBuf:
  7770                           	callstack 0
  7771                           
  7772                           	psect	smallconst
  7773   000E00                     __psmallconst:
  7774                           	callstack 0
  7775   000E00  00                 	db	0
  7776   000E01  00                 	db	0	; dummy byte at the end
  7777   000000                     
  7778                           	psect	rparam
  7779   000000                     
  7780                           	psect	temp
  7781   00004C                     btemp:
  7782                           	callstack 0
  7783   00004C                     	ds	1
  7784   000000                     int$flags	set	btemp
  7785   000000                     wtemp8	set	btemp+1
  7786   000000                     ttemp5	set	btemp+1
  7787   000000                     ttemp6	set	btemp+4
  7788   000000                     ttemp7	set	btemp+8
  7789                           
  7790                           	psect	config
  7791                           
  7792                           ;Config register CONFIG1L @ 0x300000
  7793                           ;	External Oscillator mode Selection bits
  7794                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7795                           ;	Power-up default value for COSC bits
  7796                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7797   300000                     	org	3145728
  7798   300000  AA                 	db	170
  7799                           
  7800                           ;Config register CONFIG1H @ 0x300001
  7801                           ;	unspecified, using default values
  7802                           ;	Clock Out Enable bit
  7803                           ;	CLKOUTEN = 0x1, unprogrammed default
  7804                           ;	Clock Switch Enable bit
  7805                           ;	CSWEN = 0x1, unprogrammed default
  7806                           ;	Fail-Safe Clock Monitor Enable bit
  7807                           ;	FCMEN = 0x1, unprogrammed default
  7808   300001                     	org	3145729
  7809   300001  FF                 	db	255
  7810                           
  7811                           ;Config register CONFIG3L @ 0x300004
  7812                           ;	WDT Period Select bits
  7813                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7814                           ;	WDT operating mode
  7815                           ;	WDTE = OFF, WDT Disabled
  7816   300004                     	org	3145732
  7817   300004  9F                 	db	159
  7818                           
  7819                           ;Config register CONFIG3H @ 0x300005
  7820                           ;	unspecified, using default values
  7821                           ;	WDT Window Select bits
  7822                           ;	WDTCWS = 0x7, unprogrammed default
  7823                           ;	WDT input clock selector
  7824                           ;	WDTCCS = 0x7, unprogrammed default
  7825   300005                     	org	3145733
  7826   300005  FF                 	db	255
  7827                           tosu	equ	0xFFF
  7828                           tosh	equ	0xFFE
  7829                           tosl	equ	0xFFD
  7830                           stkptr	equ	0xFFC
  7831                           pclatu	equ	0xFFB
  7832                           pclath	equ	0xFFA
  7833                           pcl	equ	0xFF9
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           indf0	equ	0xFEF
  7841                           postinc0	equ	0xFEE
  7842                           postdec0	equ	0xFED
  7843                           preinc0	equ	0xFEC
  7844                           plusw0	equ	0xFEB
  7845                           fsr0h	equ	0xFEA
  7846                           fsr0l	equ	0xFE9
  7847                           wreg	equ	0xFE8
  7848                           indf1	equ	0xFE7
  7849                           postinc1	equ	0xFE6
  7850                           postdec1	equ	0xFE5
  7851                           preinc1	equ	0xFE4
  7852                           plusw1	equ	0xFE3
  7853                           fsr1h	equ	0xFE2
  7854                           fsr1l	equ	0xFE1
  7855                           bsr	equ	0xFE0
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           preinc2	equ	0xFDC
  7860                           plusw2	equ	0xFDB
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         247
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      75
    BANK0           160     16     136
    BANK1           256    210     255
    BANK2           256      0      82
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC_n(BANK1[8]), 

    color_read@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    move@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    move@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    returnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    returnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), main@motorR(BANK1[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _move->_returnHome
    _returnHome->_reverseOneSquare
    _returnHome->_turnLeft
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _batteryLevel->___awdiv

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_move

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               214   214      0   97592
                                             67 COMRAM     2     2      0
                                              0 BANK1    210   210      0
                         _Buggy_init
                    _Interrupts_init
                        _Timer0_init
                       _batteryLevel
                   _color_click_init
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                         _resetTimer
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _move                                                18     2     16   81782
                                             65 COMRAM     2     2      0
                                              0 BANK0     16     0     16
                     _fullSpeedAhead
                         _returnHome
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          20     5     15   41905
                                             45 COMRAM    20     5     15
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     7      7    9773
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     7      7   14333
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                12     7      5    3369
                                             31 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    14     7      7    4497
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _get16bitTMR0val                                     10     8      2      69
                                             12 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                      13     7      6    5637
                                             31 COMRAM    13     7      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2285
                                             25 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             18 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           9     7      2     483
                                             16 COMRAM     9     7      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             13 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     12     2     10    1965
                                             38 COMRAM    12     2     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                             12 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             24 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    1612
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0     862
                                             16 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             14 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             13 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             20 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              3     3      0     356
                                              9 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        5     5      0     334
                                              4 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _Timer0_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _color_writetoaddr
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _returnHome
       _fullSpeedAhead
       _get16bitTMR0val
       _resetTimer
       _reverseOneSquare
         _setMotorPWM
       _stop
         _setMotorPWM
       _turnLeft
         _setMotorPWM
       _turnRight
         _setMotorPWM
     _reverseOneSquare
     _turnLeft
     _turnRight
   _resetTimer
   _stop
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      52       9       32.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D2      FF       7       99.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      88       5       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4B       1       79.8%
BITBIGSFRllllhh     37      0       0      46        0.0%
BITBIGSFRllhlll     31      0       0      44        0.0%
BITBIGSFRllllhl     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRllllhl     20      0       0      49        0.0%
BITBIGSFRhlhh       1B      0       0      33        0.0%
BITBIGSFRllhh       17      0       0      38        0.0%
BITBIGSFRllhlll     14      0       0      41        0.0%
BITBIGSFRhlhl       13      0       0      34        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRllllhl     11      0       0      53        0.0%
BITBIGSFRhllh        E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      51        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRlllllh      9      0       0      62        0.0%
BITBIGSFRllllhh      8      0       0      47        0.0%
BITBIGSFRllhlll      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllhl      6      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      60        0.0%
BITBIGSFRllhlhh      5      0       0      39        0.0%
BITBIGSFRllhlll      3      0       0      42        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRllllhl      3      0       0      55        0.0%
BITBIGSFRllllhl      3      0       0      61        0.0%
BITBIGSFRlllh        2      0       0      45        0.0%
BITBIGSFRlh          2      0       0      37        0.0%
BITBIGSFRllllhl      1      0       0      54        0.0%
BITBIGSFRlllllh      1      0       0      63        0.0%
BITBIGSFRllllhl      1      0       0      48        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRhlll        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     224      66        0.0%
DATA                 0      0     224       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 09 15:23:39 2024

                                _white_Light 302E                                           l81 1B9E  
                                         l87 1D44                                           l79 1B90  
                               ___awdiv@sign 0012                          ___wmul@multiplicand 000F  
                           main@turnDuration 01A8                            ??_Interrupts_init 000D  
                                        l122 3070                                          l130 1F34  
                                        l220 2F18                                          l116 2EE2  
                                        l133 278A                                          l125 304A  
                                        l119 2C54                                          l127 3050  
                                        l312 30CE                                          l171 2F6C  
                                        l180 315A                                          l174 2F92  
                                        l510 29A0                                          l271 312E  
                                        l183 3164                                          l168 2F42  
                                        l177 316E                                          l521 2422  
                                        l362 30EC                                          l186 313A  
                                        l602 2F6A                                          l507 295E  
                                        l515 2392                                          l364 30FA  
                                        l380 2E68                                          l460 2640  
                                        l524 24A6                                          l532 21B8  
                                        l365 3100                                          l189 2EAA  
                                        l453 2BDA                                          l605 2FE0  
                                        l541 22CC                                          l359 30E8  
                                        l527 24D4                                          l519 23FE  
                                        l376 2E50                                          l616 2E0A  
                                        l544 22FA                                          l536 2224  
                                        l472 1AC6                                          l377 2E52  
                                        l617 2E1A                                          l553 2A86  
                                        l378 2E66                                          l570 2120  
                                        l562 2036                                          l538 2248  
                                        l564 205A                                          l549 2A3A  
                                        l493 1440                                          l558 1FCA  
                                        l478 1AC6                                          l567 20DE  
                                        l487 1440                                          l596 3090  
                                        l836 2B4A                                          l684 2896  
                                        l599 3150                                          u990 2F7C  
                                        u991 2F78                                          prod 0FF3  
                        i2_color_writetoaddr 3092                                          wreg 0FE8  
  color_clear_init_interrupts@high_threshold 0012  i2color_clear_init_interrupts@high_threshold 0006  
                            _color_normalise 2642                                         l1103 2D42  
                                       l2300 2D0E                                         l2310 3166  
                                       l2302 2D24                                         l2312 316A  
                                       l2320 3160                                         l2304 2D2C  
                                       l1096 2D3A                                         l2400 2140  
                                       l2314 3132                                         l2306 2D2E  
                                       l2330 255E                                         l2322 24D6  
                                       l2410 21A4                                         l2402 214C  
                                       l2316 3136                                         l2308 2D34  
                                       l2332 25A0                                         l2324 24F2  
                                       l2500 1FAA                                         l2420 2210  
                                       l2412 21B4                                         l2404 2180  
                                       l3300 173A                                         l2318 315C  
                                       l2334 25BC                                         l2326 2546  
                                       l2350 2A0E                                         l2342 29A2  
                                       l2510 2016                                         l2502 1FB6  
                                       l2430 2294                                         l2422 2220  
                                       l2414 21DC                                         l2406 218C  
                                       l3310 17F4                                         l3302 1752  
                                       l2600 30DA                                         l2280 2F7C  
                                       l2336 2600                                         l2328 255A  
                                       l2352 2A1A                                         l2360 2A62  
                                       l2344 29C2                                         l2520 2072  
                                       l2512 2022                                         l2504 1FC6  
                                       l2440 22F0                                         l2432 22A0  
                                       l2424 224E                                         l2408 2198  
                                       l2416 21E0                                         l3312 1814  
                                       l3320 18BC                                         l3304 178A  
                                       l3400 1B74                                         l2610 30FE  
                                       l2602 30E2                                         l2290 2CD8  
                                       l2282 2FBC                                         l2354 2A26  
                                       l2346 29CE                                         l2362 2F44  
                                       l2530 20DA                                         l2522 20A6  
                                       l2514 2032                                         l2506 1FEE  
                                       l2370 2898                                         l2450 235A  
                                       l2434 22AC                                         l2418 2204  
                                       l3330 195E                                         l3322 18CE  
                                       l3314 182C                                         l3306 17AA  
                                       l3410 1B88                                         l3402 1B78  
                                       l2604 30E4                                         l2292 2CEA  
                                       l2284 2FD8                                         l2356 2A36  
                                       l2348 2A02                                         l2364 2F50  
                                       l2532 2102                                         l2524 20B2  
                                       l2516 2060                                         l2508 1FF2  
                                       l2380 2932                                         l2372 28E0  
                                       l2460 23B6                                         l2452 2366  
                                       l2444 22FC                                         l2436 22B8  
                                       l2428 2260                                         l2700 1332  
                                       l2620 0E3E                                         l3340 1A18  
                                       l3324 18EE                                         l3332 1996  
                                       l3316 1864                                         l3308 17E2  
                                       l3260 14B2                                         l3420 1BDC  
                                       l3412 1B8C                                         l3404 1B7C  
                                       l2606 30E6                                         l2550 2F1A  
                                       l2278 2F6C                                         l2294 2CF2  
                                       l2358 2A5E                                         l2366 2F62  
                                       l2526 20BE                                         l2382 293E  
                                       l2470 2428                                         l2454 2372  
                                       l2462 23BA                                         l2446 231A  
                                       l2438 22C8                                         l2710 13CC  
                                       l2702 136A                                         l2630 0F02  
                                       l2622 0E76                                         l2614 0E02  
                                       l3342 1A38                                         l3334 19A8  
                                       l3326 1906                                         l3318 1884  
                                       l3262 14C4                                         l3270 1554  
                                       l3430 1C2A                                         l3422 1BE8  
                                       l3414 1BA6                                         l3406 1B80  
                                       l3350 1AD4                                         l2608 30EA  
                                       l2800 2AE2                                         l2560 2F30  
                                       l2552 2F24                                         l2296 2CFA  
                                       l2288 2CD0                                         l2528 20CA  
                                       l2536 210C                                         l2384 294A  
                                       l2392 298C                                         l2376 28F2  
                                       l2480 2486                                         l2464 23DE  
                                       l2456 237E                                         l2448 2326  
                                       l2720 1460                                         l2712 13E4  
                                       l2640 0F54                                         l2632 0F06  
                                       l2624 0E96                                         l2616 0E06  
                                       l3336 19C8                                         l3344 1A70  
                                       l3328 193E                                         l3272 1566  
                                       l3280 15F6                                         l3264 14E4  
                                       l3440 1CAC                                         l3432 1C3C  
                                       l3424 1BF0                                         l3416 1BBE  
                                       l3408 1B84                                         l3360 1B02  
                                       l3352 1AD4                                         l2810 2B1C  
                                       l2802 2AEA                                         l2554 2F2A  
                                       l2570 2C22                                         l2562 2BDC  
                                       l2730 2DD0                                         l2298 2D08  
                                       l2394 3148                                         l2490 1F36  
                                       l2386 295A                                         l2378 2926  
                                       l2482 2492                                         l2474 243A  
                                       l2466 23EA                                         l2458 238E  
                                       l2722 1492                                         l2714 141C  
                                       l2706 138E                                         l2650 1002  
                                       l2642 0F70                                         l2634 0F38  
                                       l2626 0ECE                                         l2618 0E26  
                                       l3346 1A82                                         l3338 19E0  
                                       l3290 1698                                         l3282 1608  
                                       l3274 1586                                         l3266 14FC  
                                       l3450 1D1C                                         l3442 1CBE  
                                       l3434 1C4C                                         l3426 1C08  
                                       l3418 1BC4                                         l3370 1B16  
                                       l3362 1B06                                         l3354 1AE0  
                                       l2820 2B42                                         l2812 2B1E  
                                       l2804 2AF8                                         l2556 2F2C  
                                       l2396 3054                                         l2572 2C2C  
                                       l2564 2BF0                                         l2740 279E  
                                       l2732 2DE0                                         l2580 3152  
                                       l2900 1D48                                         l2492 1F52  
                                       l2388 2982                                         l2484 24A2  
                                       l2476 246E                                         l2468 23FA  
                                       l2724 14AA                                         l2708 13AC  
                                       l2660 10B4                                         l2652 1022  
                                       l2644 0F90                                         l2636 0F50  
                                       l2628 0EE6                                         l3292 16D0  
                                       l3284 1628                                         l3276 159E  
                                       l3268 1534                                         l3452 1D2C  
                                       l3444 1CCE                                         l3436 1C82  
                                       l3428 1C0E                                         l3380 1B38  
                                       l3372 1B22                                         l3364 1B0A  
                                       l3356 1AEC                                         l3348 1AC8  
                                       l2814 2B24                                         l2806 2AFE  
                                       l2558 2F2E                                         l2574 2C36  
                                       l2566 2BFC                                         l2830 2EB0  
                                       l2750 27D4                                         l2742 27AE  
                                       l2734 2DEA                                         l2726 2DB2  
                                       l2590 2E80                                         l2582 3156  
                                       l2910 1E52                                         l2902 1D62  
                                       l2494 1F5E                                         l2486 24CA  
                                       l2478 247A                                         l2398 2122  
                                       l2718 145C                                         l2662 10CC  
                                       l2670 1178                                         l2654 103A  
                                       l2646 0FA8                                         l3294 16E8  
                                       l3286 1640                                         l3278 15D6  
                                       l3446 1D14                                         l3438 1C8E  
                                       l3454 1D32                                         l3390 1B54  
                                       l3382 1B40                                         l3374 1B28  
                                       l3366 1B0E                                         l3358 1AF2  
                                       l2840 3072                                         l2808 2B14  
                                       l2816 2B2A                                         l2576 2C40  
                                       l2568 2C12                                         l2832 2EBA  
                                       l2760 281C                                         l2752 27E4  
                                       l2744 27B2                                         l2736 278C  
                                       l2728 2DC2                                         l2920 2656  
                                       l2592 2EA6                                         l2584 2E6C  
                                       l2912 1E70                                         l2904 1D7C  
                                       l2496 1F92                                         l2672 1196  
                                       l2664 1104                                         l2656 1076  
                                       l2648 0FE4                                         l3288 1678  
                                       l3296 1708                                         l3448 1D18  
                                       l3392 1B58                                         l3384 1B48  
                                       l3376 1B2C                                         l3368 1B12  
                                       l2826 2EE4                                         l2842 307A  
                                       l2818 2B3A                                         l2578 2C4A  
                                       l2834 2ECA                                         l2770 2860  
                                       l2762 2826                                         l2754 27FA  
                                       l2746 27C0                                         l2738 2790  
                                       l2922 26BA                                         l2594 2EA8  
                                       l2586 2E70                                         l2914 1ED0  
                                       l2906 1DD4                                         l2850 30B2  
                                       l2498 1F9E                                         l2690 12B8  
                                       l2674 11B6                                         l2682 122A  
                                       l2666 1124                                         l2658 1094  
                                       l3298 171A                                         l3394 1B60  
                                       l3386 1B4C                                         l3378 1B30  
                                       l2844 3084                                         l2780 2A88  
                                       l2836 2ED4                                         l2828 2EAC  
                                       l2764 2844                                         l2756 2802  
                                       l2772 2866                                         l2748 27D0  
                                       l2924 2722                                         l2588 2E78  
                                       l2916 1EEE                                         l2908 1DF2  
                                       l2860 30CC                                         l2852 30BC  
                                       l2684 1248                                         l2676 11CE  
                                       l2668 115C                                         l3396 1B68  
                                       l3388 1B50                                         l2846 308E  
                                       l2598 30D0                                         l2790 2AB4  
                                       l2782 2A8C                                         l2838 2EDE  
                                       l2774 2876                                         l2766 2854  
                                       l2758 280E                                         l2918 2642  
                                       l2870 2BAA                                         l2862 2B4C  
                                       l2854 30BE                                         l2686 1268  
                                       l2694 12DC                                         l2678 1206  
                                       l3398 1B70                                         l2848 311A  
                                       l2792 2ABC                                         l2784 2A9A  
                                       l2776 2886                                         l2768 2856  
                                       l2880 2BCC                                         l2872 2BB4  
                                       l2864 2B5C                                         l2856 30C8  
                                       l2696 12FA                                         l2688 1280  
                                       l2794 2AC0                                         l2786 2AA2  
                                       l2890 2E3C                                         l2882 2BCE  
                                       l2874 2BB6                                         l2866 2B82  
                                       l2858 30CA                                         l2698 131A  
                                       l2796 2AC8                                         l2788 2AA6  
                                       l2892 2E4A                                         l2884 2BD8  
                                       l2876 2BC0                                         l2868 2B86  
                                       l2798 2ADA                                         l2894 2E60  
                                       l2886 2E1C                                         l2878 2BC2  
                                       l2888 2E26                                         l2896 3030  
                                       l2898 3040                                  main@curMove 01B5  
                                       u1000 2F92                                         u1001 2F8E  
                                       u1010 2CEA                                         u1011 2CE6  
                                       u1020 2D08                                         u1100 28EE  
                                       u1021 2D04                                         u1101 28EA  
                                       u1030 2D24                                         u1110 2982  
                                       u1031 2D20                                         u1111 297E  
                                       u1040 24F2                                         u1200 2436  
                                       u1120 21DC                                         u2000 19A8  
                                       u1041 24EE                                         u1201 2432  
                                       u1121 21D8                                         u2001 19A4  
                                       u1050 25BC                                         u1210 24CA  
                                       u1130 2204                                         u2010 1A82  
                                       u1051 25B8                                         u1211 24C6  
                                       u1131 2200                                         u2011 1A7E  
                                       u1220 1FEE                                         u1140 2248  
                                       u1300 0F38                                         u2100 1D44  
                                       u1221 1FEA                                         u1141 2244  
                                       u1301 0F34                                         u2101 1D40  
                                       u2021 1ACE                                         u1230 2016  
                                       u1150 225C                                         u1310 0F70  
                                       u1231 2012                                         u1151 2258  
                                       u1311 0F6C                                         u2031 1ADA  
                                       u1400 2E0A                                         u1080 2A5E  
                                       u1240 205A                                         u1160 22F0  
                                       u1320 1002                                         u1401 2E06  
                                       u1081 2A5A                                         u1241 2056  
                                       u1161 22EC                                         u1321 0FFE  
                                       u2041 1AE6                                         u1410 279E  
                                       u1090 2A86                                         u1250 206E  
                                       u1170 23B6                                         u1330 1094  
                                       u2050 1B9E                                         u1411 279A  
                                       u1091 2A82                                         u1251 206A  
                                       u1171 23B2                                         u1331 1090  
                                       u2051 1B9A                                         u1500 2AF8  
                                       u1420 27C0                                         u1260 2102  
                                       u1180 23DE                                         u1340 1196  
                                       u2060 1C3C                                         u1501 2AF4  
                                       u1421 27BC                                         u1261 20FE  
                                       u1181 23DA                                         u1341 1192  
                                       u2061 1C38                                         u2117 1BB0  
                                       u1510 2B14                                         u1430 27FA  
                                       u1270 2E94                                         u1190 2422  
                                       u1350 1248                                         u1511 2B10  
                                       u1431 27F6                                         u1271 2E8C  
                                       u1191 241E                                         u1351 1244  
                                       u2207 16A2                                         u2127 1BCE  
                                       u1520 2B3A                                         u1440 281C  
                                       u1360 12FA                                 _BAUD4CONbits 0EE9  
                                       u1521 2B36                                         u1441 2818  
                                       u1361 12F6                                         u2217 16DA  
                                       u2081 1C98                                         u2137 1BFA  
                                       u1290 30FA                                         u1530 2E4A  
                                       u1450 2844                                         u1370 13AC  
                                       u1291 30F6                                         u1531 2E46  
                                       u1451 2840                                         u1371 13A8  
                                       u2307 1968                                         u2227 1744  
                                       u2147 14EE                                         u2075 1C48  
                                       u1540 2E60                                         u1460 2876  
                                       u1380 1492                                         u1541 2E5C  
                                       u1461 2872                                         u1381 148E  
                                       u2317 19D2                                         u2237 177C  
                                       u2157 1526                                         u2077 1C4C  
                                       u1470 2A9A                                         u1390 2DD0  
                                       u1550 3040                                         u1471 2A96  
                                       u1391 2DCC                                         u2407 102C  
                                       u2327 1A0A                                         u2247 17B4  
                                       u2167 1590                                         u1551 303C  
                                       u2095 1D28                                         u1480 2AB4  
                                       u1288 2E96                                         u1481 2AB0  
                                       u2417 1064                                         u2337 1A42  
                                       u2257 181E                                         u2177 15C8  
                                       u2097 1D2C                                         u1490 2ADA  
                                       _T2PR 0FBC                                         u1491 2AD6  
                                       u2507 1324                                         u2427 10BE  
                                       u2347 0E30                                         u2267 1856  
                                       u2187 1632                                         u2517 135C  
                                       u2437 10F6                                         u2357 0E68  
                                       u2277 188E                                         u2197 166A  
                                       u2607 2950                                         u2527 13D6  
                                       u2447 112E                                         u2367 0EA0  
                                       u2287 18F8                                         u2617 1FBC  
                                       u2537 140E                                         u2457 1166  
                                       u2377 0ED8                                         u2297 1930  
                                       u2627 2028                                         u2547 21AA  
                                       u2467 11C0                                         u2387 0F9A  
                                       u1940 14C4                                         u2637 20D0  
                                       u2557 2216                                         u2477 11F8  
                                       u2397 0FD2                                         u1941 14C0  
                                       u1950 1566                                         u2647 2A2C  
                                       u2567 22BE                                         u2487 1272  
                                       u1951 1562                                         u1960 1608  
                                       u2657 2EC0                                         u2577 2384  
                                       u2497 12AA                                         u1961 1604  
                                       u1970 171A                                         u2667 2C18  
                                       u2587 23F0                                         u1971 1716  
                                       u1980 17F4                                         u2597 2498  
                                       u1981 17F0                                         u1990 18CE  
                                       u1991 18CA                                         _main 1AC8  
                                       _move 14B2                                         _wall 01FA  
                                       fsr2h 0FDA                                         indf2 0FDF  
                                       fsr1l 0FE1                                         fsr2l 0FD9  
                                       btemp 004C                                         _stop 2898  
                                       prodh 0FF4                                         prodl 0FF3  
                                       start 00B6                          main@reverseDuration 01A6  
                           __end_of_ADC_init 30EA                         ?i2_color_writetoaddr 0003  
                            __end_of_HighISR 00B6                                 ___param_bank 0000  
                       __end_of_batteryLevel 2E6A                              __end_of___aldiv 2898  
                                      ?_main 0001                                        _ADPCH 0F5F  
                            __end_of___awdiv 2B4C                                        ?_move 00D8  
                                      ?_stop 0020                              ___awdiv@divisor 000F  
                            __end_of___lwdiv 2D44                                        i2l122 30B0  
                                      i2l119 2CCE                                        i2l320 3006  
                                      i2l171 2F94                                        i2l334 3118  
                                      i2l174 2FBA                                        i2l327 302C  
                                      i2l183 3178                                        i2l177 3182  
                                      i2l281 00AA                                        i2l186 3146  
                            ___awdiv@counter 0011                                        _TMR0H 0FD4  
                                      _TMR0L 0FD3                          ___lmul@multiplicand 0011  
                 __end_of_I2C_2_Master_Start 3170                   __end_of_I2C_2_Master_Write 313C  
                                 _Buggy_init 2EE4                       returnHome@straightRamp 0039  
                     returnHome@straightTime 0034                                        tablat 0FF5  
                                      plusw0 0FEB                                        plusw2 0FDB  
                                      ttemp5 004D                                        ttemp6 0050  
                                      ttemp7 0054                                        stop@i 0028  
                                      status 0FD8                                        wtemp8 004D  
                      ??i2_color_writetoaddr 0004                                 main@turnRamp 01A9  
                      _I2C_2_Master_RepStart 3152                           putCharToRxBuf@byte 0001  
                            __initialization 2D44                    get16bitTMR0val@timer_high 0013  
                               __end_of_main 1D48                                 __end_of_move 1AC8  
                               __end_of_stop 29A2                          move@reverseDuration 00E3  
                            _get16bitTMR0val 2F44                                       ??_main 0044  
                                     ??_move 0042                                       ??_stop 0025  
                              __activetblptr 0000                      __end_of_color_normalise 278C  
                     returnHome@turnDuration 003B                                 ?_setMotorPWM 001A  
                                     _ADRESH 0F64                                       _CCPR1H 0FAA  
                                     _CCPR2H 0FA6                                       _CCPR3H 0F25  
                                     _CCPR4H 0F21                             ___awdiv@dividend 000D  
                                     _RC0PPS 0E62                                       _RC4REG 0EE3  
                                     _RE2PPS 0E74                                       _RC7PPS 0E69  
                                     _RD5PPS 0E6F                                       _RE4PPS 0E76  
                                     _RD6PPS 0E70                                       i2l3020 3004  
                                     i2l3022 3008                                       i2l3030 3102  
                                     i2l3014 2FE4                                       i2l3024 3018  
                                     i2l3016 2FF4                                       i2l3026 301C  
                                     i2l3018 2FF8                                       i2l3050 2C9C  
                                     i2l3042 2C56                                       i2l2340 2FA4  
                                     i2l3052 2CA6                                       i2l3044 2C6A  
                                     i2l3054 2CB0                                       i2l3046 2C76  
                                     i2l3056 2CBA                                       i2l3048 2C8C  
                                     i2l2338 2F94                                       i2l3058 2CC4  
                                     i2l3170 0012                                       i2l2540 317E  
                                     i2l3180 003E                                       i2l3172 0022  
                                     i2l2542 3170                                       i2l3190 008A  
                                     i2l3182 0062                                       i2l3174 0028  
                                     i2l2544 3174                                       i2l3192 0092  
                                     i2l3184 0066                                       i2l3176 002C  
                                     i2l2538 317A                                       i2l2546 313E  
                                     i2l3194 00A6                                       i2l3186 0074  
                                     i2l3178 0030                                       i2l2548 3142  
                                     i2l3188 007A                                       i2l2824 3094  
                                     _RG6PPS 0E88                                    ??_HighISR 000A  
                   __end_of_color_click_init 2EE4                                       _TMR0IE 714D  
                                     _TMR0IF 719D                                       _RX4PPS 0E15  
                                     _TX4REG 0EE4                                 ??_ADC_getval 000D  
                              ??_Timer0_init 000D                                 _CCPTMRS0bits 0FAD  
                           _getCharFromTxBuf 3008                                       ___lmul 2DB2  
                                  ??___aldiv 0021                                       ___wmul 2FBC  
                                  ??___awdiv 0011                                    ??___lwdiv 0017  
                                     clear_0 2D82                                       clear_1 2D8E  
                                     clear_2 2D9A                             ___awdiv@quotient 0013  
                                     isa$std 0001                      returnHome@straightSpeed 0037  
                               __pdataCOMRAM 004A                                       move@mL 00D8  
                                     move@mR 00DA                                 __mediumconst 0000  
                                     tblptrh 0FF7                                       tblptrl 0FF6  
                                     tblptru 0FF8                                    ?_ADC_init 0001  
                                     stop@mL 0020                                       stop@mR 0022  
                                ?_Buggy_init 0001                            ??_initDCmotorsPWM 000F  
                         __end_of_ADC_getval 3102                   i2color_writetoaddr@address 0004  
                           __end_of_turnLeft 24D6                        __end_of_isDataInTxBuf 311A  
                                 __accesstop 0060                      __end_of__initialization 2DA8  
                            fullSpeedAhead@i 0029                                main@turnSpeed 01A7  
                     ?_I2C_2_Master_RepStart 0001                                ___rparam_used 0001  
                            _Interrupts_init 311A                               __pcstackCOMRAM 0001  
                    __end_of_get16bitTMR0val 2F6C                                 ?_white_Light 0001  
                               __pidataBANK1 3184                     get16bitTMR0val@timer_low 0011  
                   get16bitTMR0val@timer_val 0015                 ?_color_clear_init_interrupts 0001  
                           _reverseOneSquare 1F36                          __end_of_Timer0_init 3092  
                           ?_color_normalise 0027                                   ??_ADC_init 000D  
                               _batteryLevel 2E1C                                   __pbssBANK0 0060  
                                 __pbssBANK1 01D2                                   __pbssBANK2 0200  
                          _color_writetoaddr 3052                                 _T2CLKCONbits 0FBF  
                         ?_color_writetoaddr 000F                                      ?___lmul 000D  
                                    ?___wmul 000D                               ___lmul@product 0015  
              ??_color_clear_init_interrupts 0011                                  move@curMove 00E1  
                        ??_color_writetoaddr 0010                                      _SP4BRGH 0EE6  
                                    _SP4BRGL 0EE5                   fullSpeedAhead@straightRamp 0025  
                      turnRight@turnDuration 0025                                      _SSP2ADD 0ED6  
                                    _SSP2BUF 0ED5                                   _color_read 1D48  
                    __end_of_Interrupts_init 3130                       color_writetoaddr@value 000F  
                                    _HighISR 0008                    __end_of_color_writetoaddr 3072  
                                  _ADREFbits 0F58                           _I2C_2_Master_Start 3166  
                                 _initUSART4 30B2                          i2_I2C_2_Master_Idle 2F94  
                         _I2C_2_Master_Write 3130                                      __Hparam 0000  
                        i2_I2C_2_Master_Stop 3170                                      __Lparam 0000  
                                _Timer0_init 3072                             ?_get16bitTMR0val 000D  
                                    ___aldiv 278C                                      ___awdiv 2A88  
                        ?_I2C_2_Master_Start 0001                                      ___lwdiv 2CD0  
                        ?_I2C_2_Master_Write 0001                                 __psmallconst 0E00  
                                    _ambient 004A                                      __pcinit 2D44  
                                    __ramtop 0E00                                    ?_turnLeft 0020  
                                    __ptext0 1AC8                                      __ptext1 302E  
                                    __ptext2 14B2                                      __ptext3 0E02  
                                    __ptext4 2122                                      __ptext5 22FC  
                                    __ptext6 2898                                      __ptext7 1F36  
                                    __ptext8 3148                                      __ptext9 2F44  
                       ?i2_I2C_2_Master_Idle 0001                                    _T2CONbits 0FBD  
                       ?i2_I2C_2_Master_Stop 0001                             ___aldiv@dividend 0019  
                                  _T2HLTbits 0FBE                                _RxBufWriteCnt 0049  
                   __end_of_getCharFromTxBuf 302E                                      main@buf 0100  
                       ??_I2C_2_Master_Start 000E                         ??_I2C_2_Master_Write 000E  
                      color_normalise@RGBC_n 002F                         end_of_initialization 2DA8  
            ??i2_color_clear_init_interrupts 0005                  __end_ofi2_color_writetoaddr 30B2  
                           ADC_getval@tmpval 000D                            reverseOneSquare@i 002A  
                          ?_color_click_init 0001                                   _resetTimer 3148  
                         ??_color_click_init 0016                             ___aldiv@quotient 0023  
                 batteryLevel@batteryQuarter 0016                                      postdec1 0FE5  
                                    postdec2 0FDD                                      postinc0 0FEE  
                                    postinc2 0FDE                   batteryLevel@batteryVoltage 0015  
                                 main@F14601 01FB                                   main@F14592 01D2  
                                 main@F14596 009C                                   main@F14598 0200  
                                 _returnHome 0E02                              _initDCmotorsPWM 2B4C  
                                 ??_turnLeft 0027                                    _PORTFbits 0F8E  
                         setMotorPWM@negDuty 001F                        ??i2_I2C_2_Master_Idle 0001  
                              move@turnSpeed 00E5                            __end_of_turnRight 22FC  
                      ??i2_I2C_2_Master_Stop 0002                                   main@RGBC_n 01AA  
                                returnHome@i 0041                                    _TRISAbits 0F81  
                         setMotorPWM@posDuty 001E                                    _TRISBbits 0F82  
                                  _TRISCbits 0F83                                    _TRISDbits 0F84  
                                  _TRISEbits 0F85                                    _TRISFbits 0F86  
                                  _TRISGbits 0F87                                    _TRISHbits 0F88  
                           white_Light@state 000D                                 ??_Buggy_init 000D  
                           fullSpeedAhead@mL 0020                             fullSpeedAhead@mR 0022  
                                ?_color_read 0011                     color_writetoaddr@address 0010  
                    ??_I2C_2_Master_RepStart 000E                     __end_of_reverseOneSquare 2122  
                           ?_Interrupts_init 0001                                stop@cur_power 002A  
                                _CCP1CONbits 0FAB                                 _EUSART4RXbuf 00C4  
                        returnHome@turnSpeed 003A                                 _EUSART4TXbuf 0060  
                                _CCP2CONbits 0FA7                                  _CCP3CONbits 0F26  
                                ?_initUSART4 0001                                  _CCP4CONbits 0F22  
                                 main@motorL 01C8                                   main@motorR 01BE  
                             color_read@RGBC 0011                               _fullSpeedAhead 29A2  
                             __end_of___lmul 2E1C                         turnLeft@turnDuration 0025  
                             __end_of___wmul 2FE2                           __end_of_Buggy_init 2F1A  
                              __pidataCOMRAM 3188                          start_initialization 2D44  
                              _TxBufWriteCnt 0047                             move@moveSequence 00DD  
      __end_ofi2_color_clear_init_interrupts 2CD0                i2_color_clear_init_interrupts 2C56  
                                ?_resetTimer 0001                      __end_of_initDCmotorsPWM 2BDC  
                     __end_of_fullSpeedAhead 2A88                           turnRight@cur_power 002C  
                                   ??___lmul 0015                                     ??___wmul 0011  
                             _putCharToRxBuf 2FE2                          color_normalise@RGBC 0027  
                                __pdataBANK1 01FB                i2I2C_2_Master_Write@data_byte 0002  
                                ?_returnHome 002E                 reverseOneSquare@straightRamp 0026  
               __end_ofi2_I2C_2_Master_Start 3184                 __end_ofi2_I2C_2_Master_Write 3148  
                          turnLeft@cur_power 002C                                  __pbssCOMRAM 0046  
                              __pcstackBANK0 00D8                                __pcstackBANK1 0100  
                                   ?_HighISR 0001                             stop@straightRamp 0024  
                           ___lwdiv@dividend 0013                                 ?_Timer0_init 0001  
                     __end_of_putCharToRxBuf 3008                              ?_fullSpeedAhead 0020  
                                  __pintcode 0008                                     ?___aldiv 0019  
                         turnRight@turnSpeed 0024                                     ?___awdiv 000D  
                                   ?___lwdiv 0013                         I2C_2_Master_Read@ack 000F  
                       I2C_2_Master_Read@tmp 0010                                  __smallconst 0E00  
                           main@moveSequence 017A                            _I2C_2_Master_Idle 2F6C  
                          _I2C_2_Master_Init 2F1A                            _I2C_2_Master_Read 2E6A  
                          turnLeft@turnSpeed 0024                            _I2C_2_Master_Stop 315C  
                               _RxBufReadCnt 0048                                     _ADC_init 30D0  
                         ?_I2C_2_Master_Idle 0001                           ?_I2C_2_Master_Init 0001  
                         ?_I2C_2_Master_Read 0001                                ??_setMotorPWM 001C  
                         ?_I2C_2_Master_Stop 0001                             ___lwdiv@quotient 0017  
                   initDCmotorsPWM@PWMperiod 000D                            ?_getCharFromTxBuf 0001  
                         ??_getCharFromTxBuf 0001                            move@straightSpeed 00E2  
                            ___aldiv@divisor 001D                          ??_I2C_2_Master_Idle 000D  
                            ___aldiv@counter 0021                          ??_I2C_2_Master_Init 000D  
                        ??_I2C_2_Master_Read 000E                               ___wmul@product 0011  
                                   _LATAbits 0F79                          ??_I2C_2_Master_Stop 000E  
                                   _LATCbits 0F7B                                _isDataInTxBuf 3102  
                                   _LATDbits 0F7C                                     _LATEbits 0F7D  
                                   _LATFbits 0F7E                                     _LATGbits 0F7F  
                                   _LATHbits 0F80                                     _IPR0bits 0E1F  
                                   _PIE0bits 0E29                                     _PIE4bits 0E2D  
                                   i2u106_40 2FA4                                     i2u106_41 2FA0  
                                   i2u107_40 2FBA                                     i2u107_41 2FB6  
                                turnRight@mL 0020                                  turnRight@mR 0022  
                                   i2u164_40 2FF4                                     i2u180_40 0050  
                                   i2u164_41 2FF0                                     i2u180_41 0048  
                                   i2u165_40 3018                                     i2u165_41 3014  
                                   i2u166_40 3116                                     i2u182_40 0074  
                                   i2u181_48 0052                                     i2u166_41 3110  
                                   i2u182_41 0070                                     i2u167_40 3118  
                                   i2u183_40 008A                                     i2u183_41 0086  
                                   _PIR0bits 0E33                                     i2u184_40 00A6  
                                   i2u184_41 00A2                                     i2u178_40 0022  
                                   i2u178_41 001E                                     i2u179_40 003E  
                                   i2u179_41 003A                                     i2u267_47 2C92  
                                   _PIR4bits 0E37                              ?_putCharToRxBuf 0001  
                           ?_initDCmotorsPWM 000D                  fullSpeedAhead@straightSpeed 0024  
        __end_of_color_clear_init_interrupts 2C56               ?i2_color_clear_init_interrupts 0001  
                _color_clear_init_interrupts 2BDC                                     _SSP2CON2 0EDA  
                                   _SSP2STAT 0ED8                                 move@turnRamp 00E7  
                                 _ADCON0bits 0F60                    __end_of_I2C_2_Master_Idle 2F94  
                  __end_of_I2C_2_Master_Init 2F44                    __end_of_I2C_2_Master_Read 2EAC  
                          ___wmul@multiplier 000D                    __end_of_I2C_2_Master_Stop 3166  
   color_clear_init_interrupts@low_threshold 0014   i2color_clear_init_interrupts@low_threshold 0008  
                               setMotorPWM@m 001A                  I2C_2_Master_Write@data_byte 000E  
                         returnHome@turnRamp 003C                                    main@color 01B3  
                               _TxBufReadCnt 0046                     i2color_writetoaddr@value 0003  
                                  _turnRight 2122                    returnHome@reverseDuration 0038  
                               ??_color_read 0013                            ___lmul@multiplier 000D  
                                  copy_data0 2D58                               ?_isDataInTxBuf 0001  
              __end_of_I2C_2_Master_RepStart 315C                            ?_reverseOneSquare 0020  
                        __end_of_setMotorPWM 2642                                 ??_initUSART4 000D  
                       i2_I2C_2_Master_Start 317A              reverseOneSquare@reverseDuration 0025  
                       i2_I2C_2_Master_Write 313C                           ??_reverseOneSquare 0027  
                                   __Hrparam 0000                            ??_color_normalise 0031  
                                 _ADC_getval 30EA                             main@testSequence 01A2  
                                   __Lrparam 0000                                ??_white_Light 000D  
                __end_ofi2_I2C_2_Master_Idle 2FBC                  __end_ofi2_I2C_2_Master_Stop 317A  
                         __end_of_color_read 1F36                                   _ANSELBbits 0E9A  
                                 _ANSELDbits 0EA7                                   _ANSELFbits 0EB4  
                                 _T0CON0bits 0FD5                                   _T0CON1bits 0FD6  
              reverseOneSquare@straightSpeed 0024                              ___lwdiv@divisor 0015  
                     returnHome@moveSequence 0032                           __end_of_initUSART4 30D0  
                            ___lwdiv@counter 0019                            turnRight@turnRamp 0026  
                                 ?_turnRight 0020                                     __ptext10 29A2  
                                   __ptext11 24D6                                     __ptext20 2DB2  
                                   __ptext12 2FBC                                     __ptext21 278C  
                                   __ptext13 2CD0                                     __ptext30 2E1C  
                                   __ptext22 2EAC                                     __ptext14 30B2  
                                   __ptext31 2A88                                     __ptext23 2BDC  
                                   __ptext15 2B4C                                     __ptext40 313C  
                                   __ptext32 30D0                                     __ptext24 3052  
                                   __ptext16 1D48                                     __ptext41 3170  
                                   __ptext33 30EA                                     __ptext25 3130  
                                   __ptext17 3152                                     __ptext42 317A  
                                   __ptext34 3072                                     __ptext26 315C  
                                   __ptext18 2E6A                                     __ptext43 2F94  
                                   __ptext35 311A                                     __ptext27 3166  
                                   __ptext19 2642                                     __ptext44 2FE2  
                                   __ptext36 2EE4                                     __ptext28 2F6C  
                                   __ptext45 3102                                     __ptext29 2F1A  
                                   __ptext46 3008                                     __ptext38 2C56  
                                   __ptext39 3092                                    move@color 00DC  
                              ?_batteryLevel 0001                                 _SSP2CON1bits 0ED9  
                               _SSP2CON2bits 0EDA                             turnLeft@turnRamp 0026  
                                 turnLeft@mL 0020                                   turnLeft@mR 0022  
                      ?i2_I2C_2_Master_Start 0001                             move@straightRamp 00E4  
                      ?i2_I2C_2_Master_Write 0001                             move@straightTime 00DF  
                          returnHome@curMove 0036                                 ??_resetTimer 000D  
                                 turnRight@i 002A                                     isa$xinst 0000  
                                 _RC4STAbits 0EE7                                     main@RGBC 01B6  
                                   int$flags 004C                                 ??_returnHome 003D  
                                   _turnLeft 22FC                      fullSpeedAhead@cur_power 002B  
                        __end_of_white_Light 3052                                   _INTCONbits 0FF2  
                  reverseOneSquare@cur_power 002C                           reverseOneSquare@mL 0020  
                         reverseOneSquare@mR 0022                           __end_of_resetTimer 3152  
                           move@turnDuration 00E6                               ??_batteryLevel 0015  
                                _setMotorPWM 24D6                            ??_get16bitTMR0val 000F  
                            ??_isDataInTxBuf 0001                                     intlevel2 0000  
                           ??_fullSpeedAhead 0026                           __end_of_returnHome 14B2  
                                  turnLeft@i 002A                                  ?_ADC_getval 0001  
                          main@straightSpeed 01B2                             _color_click_init 2EAC  
                                 _SSP2DATPPS 0E1D                                   _SSP2CLKPPS 0E1C  
                               ___aldiv@sign 0022                                  ??_turnRight 0027  
                           main@straightRamp 01B4                             main@straightTime 0128  
                                 _TX4STAbits 0EE8                       ??i2_I2C_2_Master_Start 0002  
                     ??i2_I2C_2_Master_Write 0002                             ??_putCharToRxBuf 0001  
                               returnHome@mL 002E                                 returnHome@mR 0030  
