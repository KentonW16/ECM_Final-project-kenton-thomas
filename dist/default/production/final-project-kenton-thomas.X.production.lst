

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Feb 28 16:52:14 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 21/07/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F67K40 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     _RC7PPS	set	3689
    57   000000                     _RE2PPS	set	3700
    58   000000                     _ANSELFbits	set	3764
    59   000000                     _CCPR4H	set	3873
    60   000000                     _CCPR3H	set	3877
    61   000000                     _CCPR2H	set	4006
    62   000000                     _CCPR1H	set	4010
    63   000000                     _CCP1CONbits	set	4011
    64   000000                     _CCPTMRS0bits	set	4013
    65   000000                     _T2PR	set	4028
    66   000000                     _T2CONbits	set	4029
    67   000000                     _CCP2CONbits	set	4007
    68   000000                     _CCP3CONbits	set	3878
    69   000000                     _LATCbits	set	3963
    70   000000                     _LATEbits	set	3965
    71   000000                     _TRISFbits	set	3974
    72   000000                     _CCP4CONbits	set	3874
    73   000000                     _TRISGbits	set	3975
    74   000000                     _PORTFbits	set	3982
    75   000000                     _LATGbits	set	3967
    76   000000                     _TRISCbits	set	3971
    77   000000                     _TRISEbits	set	3973
    78   000000                     _RE4PPS	set	3702
    79   000000                     _RG6PPS	set	3720
    80   000000                     _T2CLKCONbits	set	4031
    81   000000                     _T2HLTbits	set	4030
    82                           
    83                           ; #config settings
    84                           
    85                           	psect	cinit
    86   0018FC                     __pcinit:
    87                           	callstack 0
    88   0018FC                     start_initialization:
    89                           	callstack 0
    90   0018FC                     __initialization:
    91                           	callstack 0
    92   0018FC                     end_of_initialization:
    93                           	callstack 0
    94   0018FC                     __end_of__initialization:
    95                           	callstack 0
    96   0018FC  0100               	movlb	0
    97   0018FE  EF99  F009         	goto	_main	;jump to C main() function
    98                           
    99                           	psect	cstackCOMRAM
   100   000001                     __pcstackCOMRAM:
   101                           	callstack 0
   102   000001                     ?___wmul:
   103                           	callstack 0
   104   000001                     initDCmotorsPWM@PWMperiod:
   105                           	callstack 0
   106   000001                     ___wmul@multiplier:
   107                           	callstack 0
   108                           
   109                           ; 2 bytes @ 0x0
   110   000001                     	ds	2
   111   000003                     ___wmul@multiplicand:
   112                           	callstack 0
   113                           
   114                           ; 2 bytes @ 0x2
   115   000003                     	ds	2
   116   000005                     ___wmul@product:
   117                           	callstack 0
   118                           
   119                           ; 2 bytes @ 0x4
   120   000005                     	ds	2
   121   000007                     ?___lwdiv:
   122                           	callstack 0
   123   000007                     ___lwdiv@dividend:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x6
   127   000007                     	ds	2
   128   000009                     ___lwdiv@divisor:
   129                           	callstack 0
   130                           
   131                           ; 2 bytes @ 0x8
   132   000009                     	ds	2
   133   00000B                     ___lwdiv@quotient:
   134                           	callstack 0
   135                           
   136                           ; 2 bytes @ 0xA
   137   00000B                     	ds	2
   138   00000D                     ___lwdiv@counter:
   139                           	callstack 0
   140                           
   141                           ; 1 bytes @ 0xC
   142   00000D                     	ds	1
   143   00000E                     setMotorPWM@m:
   144                           	callstack 0
   145                           
   146                           ; 1 bytes @ 0xD
   147   00000E                     	ds	1
   148   00000F                     ??_setMotorPWM:
   149                           
   150                           ; 1 bytes @ 0xE
   151   00000F                     	ds	2
   152   000011                     setMotorPWM@posDuty:
   153                           	callstack 0
   154                           
   155                           ; 1 bytes @ 0x10
   156   000011                     	ds	1
   157   000012                     setMotorPWM@negDuty:
   158                           	callstack 0
   159                           
   160                           ; 1 bytes @ 0x11
   161   000012                     	ds	1
   162   000013                     stop@mL:
   163                           	callstack 0
   164   000013                     turnLeft@mL:
   165                           	callstack 0
   166   000013                     turnRight@mL:
   167                           	callstack 0
   168   000013                     fullSpeedAhead@mL:
   169                           	callstack 0
   170   000013                     reverseOneSquare@mL:
   171                           	callstack 0
   172                           
   173                           ; 1 bytes @ 0x12
   174   000013                     	ds	1
   175   000014                     stop@mR:
   176                           	callstack 0
   177   000014                     turnLeft@mR:
   178                           	callstack 0
   179   000014                     turnRight@mR:
   180                           	callstack 0
   181   000014                     fullSpeedAhead@mR:
   182                           	callstack 0
   183   000014                     reverseOneSquare@mR:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x13
   187   000014                     	ds	1
   188   000015                     stop@straightRamp:
   189                           	callstack 0
   190   000015                     turnLeft@turnSpeed:
   191                           	callstack 0
   192   000015                     turnRight@turnSpeed:
   193                           	callstack 0
   194   000015                     fullSpeedAhead@straightSpeed:
   195                           	callstack 0
   196   000015                     reverseOneSquare@straightSpeed:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x14
   200   000015                     	ds	1
   201   000016                     ??_stop:
   202   000016                     turnLeft@turnDuration:
   203                           	callstack 0
   204   000016                     turnRight@turnDuration:
   205                           	callstack 0
   206   000016                     fullSpeedAhead@straightRamp:
   207                           	callstack 0
   208   000016                     reverseOneSquare@reverseDuration:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x15
   212   000016                     	ds	1
   213   000017                     ??_fullSpeedAhead:
   214   000017                     turnLeft@turnRamp:
   215                           	callstack 0
   216   000017                     turnRight@turnRamp:
   217                           	callstack 0
   218   000017                     reverseOneSquare@straightRamp:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x16
   222   000017                     	ds	1
   223   000018                     ??_turnLeft:
   224   000018                     ??_turnRight:
   225   000018                     ??_reverseOneSquare:
   226                           
   227                           ; 1 bytes @ 0x17
   228   000018                     	ds	1
   229   000019                     stop@i:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x18
   233   000019                     	ds	1
   234   00001A                     fullSpeedAhead@i:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x19
   238   00001A                     	ds	1
   239   00001B                     stop@cur_power:
   240                           	callstack 0
   241   00001B                     turnLeft@i:
   242                           	callstack 0
   243   00001B                     turnRight@i:
   244                           	callstack 0
   245   00001B                     reverseOneSquare@i:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0x1A
   249   00001B                     	ds	1
   250   00001C                     fullSpeedAhead@cur_power:
   251                           	callstack 0
   252                           
   253                           ; 2 bytes @ 0x1B
   254   00001C                     	ds	1
   255   00001D                     turnLeft@cur_power:
   256                           	callstack 0
   257   00001D                     turnRight@cur_power:
   258                           	callstack 0
   259   00001D                     reverseOneSquare@cur_power:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x1C
   263   00001D                     	ds	2
   264   00001F                     ??_main:
   265                           
   266                           ; 1 bytes @ 0x1E
   267   00001F                     	ds	2
   268   000021                     main@reverseDuration:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x20
   272   000021                     	ds	1
   273   000022                     main@straightSpeed:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x21
   277   000022                     	ds	1
   278   000023                     main@turnSpeed:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x22
   282   000023                     	ds	1
   283   000024                     main@turnDuration:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0x23
   287   000024                     	ds	1
   288   000025                     main@turnRamp:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x24
   292   000025                     	ds	1
   293   000026                     main@straightRamp:
   294                           	callstack 0
   295                           
   296                           ; 1 bytes @ 0x25
   297   000026                     	ds	1
   298   000027                     main@motorR:
   299                           	callstack 0
   300                           
   301                           ; 10 bytes @ 0x26
   302   000027                     	ds	10
   303   000031                     main@motorL:
   304                           	callstack 0
   305                           
   306                           ; 10 bytes @ 0x30
   307   000031                     	ds	10
   308                           
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 13 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;  motorL         10   48[COMRAM] struct DC_motor
   319 ;;  motorR         10   38[COMRAM] struct DC_motor
   320 ;;  PWMcycle        2    0        unsigned int 
   321 ;;  straightRamp    1   37[COMRAM] unsigned char 
   322 ;;  turnRamp        1   36[COMRAM] unsigned char 
   323 ;;  turnDuration    1   35[COMRAM] unsigned char 
   324 ;;  turnSpeed       1   34[COMRAM] unsigned char 
   325 ;;  straightSpee    1   33[COMRAM] unsigned char 
   326 ;;  reverseDurat    1   32[COMRAM] unsigned char 
   327 ;; Return value:  Size  Location     Type
   328 ;;                  1    wreg      void 
   329 ;; Registers used:
   330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   331 ;; Tracked objects:
   332 ;;		On entry : 0/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   337 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   339 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   340 ;;Total ram usage:       28 bytes
   341 ;; Hardware stack levels required when called: 3
   342 ;; This function calls:
   343 ;;		_fullSpeedAhead
   344 ;;		_initDCmotorsPWM
   345 ;;		_reverseOneSquare
   346 ;;		_stop
   347 ;;		_turnLeft
   348 ;;		_turnRight
   349 ;; This function is called by:
   350 ;;		Startup code after reset
   351 ;; This function uses a non-reentrant model
   352 ;;
   353                           
   354                           	psect	text0
   355   001332                     __ptext0:
   356                           	callstack 0
   357   001332                     _main:
   358                           	callstack 28
   359   001332                     
   360                           ;main.c: 15:     initDCmotorsPWM(PWMcycle);
   361   001332  0E00               	movlw	0
   362   001334  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   363   001336  0EC7               	movlw	199
   364   001338  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   365   00133A  ECE9  F00B         	call	_initDCmotorsPWM	;wreg free
   366   00133E                     
   367                           ;main.c: 17:     struct DC_motor motorL, motorR;;main.c: 19:     motorL.power=0;
   368   00133E  0E00               	movlw	0
   369   001340  6E31               	movwf	main@motorL^0,c
   370   001342                     
   371                           ;main.c: 20:     motorL.direction=1;
   372   001342  0E01               	movlw	1
   373   001344  6E32               	movwf	(main@motorL+1)^0,c
   374   001346                     
   375                           ;main.c: 21:     motorL.brakemode=1;
   376   001346  0E01               	movlw	1
   377   001348  6E33               	movwf	(main@motorL+2)^0,c
   378   00134A                     
   379                           ;main.c: 22:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   380   00134A  0EAA               	movlw	170
   381   00134C  6E36               	movwf	(main@motorL+5)^0,c
   382   00134E  0E0F               	movlw	15
   383   001350  6E37               	movwf	(main@motorL+6)^0,c
   384   001352                     
   385                           ;main.c: 23:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   386   001352  0EA6               	movlw	166
   387   001354  6E38               	movwf	(main@motorL+7)^0,c
   388   001356  0E0F               	movlw	15
   389   001358  6E39               	movwf	(main@motorL+8)^0,c
   390   00135A                     
   391                           ;main.c: 24:     motorL.PWMperiod=PWMcycle;
   392   00135A  0E00               	movlw	0
   393   00135C  6E35               	movwf	(main@motorL+4)^0,c
   394   00135E  0EC7               	movlw	199
   395   001360  6E34               	movwf	(main@motorL+3)^0,c
   396   001362                     
   397                           ;main.c: 25:     motorL.compensation=3;
   398   001362  0E03               	movlw	3
   399   001364  6E3A               	movwf	(main@motorL+9)^0,c
   400   001366                     
   401                           ;main.c: 27:     motorR.power=0;
   402   001366  0E00               	movlw	0
   403   001368  6E27               	movwf	main@motorR^0,c
   404   00136A                     
   405                           ;main.c: 28:     motorR.direction=1;
   406   00136A  0E01               	movlw	1
   407   00136C  6E28               	movwf	(main@motorR+1)^0,c
   408   00136E                     
   409                           ;main.c: 29:     motorR.brakemode=1;
   410   00136E  0E01               	movlw	1
   411   001370  6E29               	movwf	(main@motorR+2)^0,c
   412   001372                     
   413                           ;main.c: 30:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   414   001372  0E25               	movlw	37
   415   001374  6E2C               	movwf	(main@motorR+5)^0,c
   416   001376  0E0F               	movlw	15
   417   001378  6E2D               	movwf	(main@motorR+6)^0,c
   418   00137A                     
   419                           ;main.c: 31:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   420   00137A  0E21               	movlw	33
   421   00137C  6E2E               	movwf	(main@motorR+7)^0,c
   422   00137E  0E0F               	movlw	15
   423   001380  6E2F               	movwf	(main@motorR+8)^0,c
   424   001382                     
   425                           ;main.c: 32:     motorR.PWMperiod=PWMcycle;
   426   001382  0E00               	movlw	0
   427   001384  6E2B               	movwf	(main@motorR+4)^0,c
   428   001386  0EC7               	movlw	199
   429   001388  6E2A               	movwf	(main@motorR+3)^0,c
   430   00138A                     
   431                           ;main.c: 33:     motorR.compensation=0;
   432   00138A  0E00               	movlw	0
   433   00138C  6E30               	movwf	(main@motorR+9)^0,c
   434   00138E                     
   435                           ;main.c: 36:     char straightSpeed=60;
   436   00138E  0E3C               	movlw	60
   437   001390  6E22               	movwf	main@straightSpeed^0,c
   438   001392                     
   439                           ;main.c: 37:     unsigned char straightRamp=2;
   440   001392  0E02               	movlw	2
   441   001394  6E26               	movwf	main@straightRamp^0,c
   442   001396                     
   443                           ;main.c: 39:     unsigned char reverseDuration=10;
   444   001396  0E0A               	movlw	10
   445   001398  6E21               	movwf	main@reverseDuration^0,c
   446   00139A                     
   447                           ;main.c: 41:     char turnSpeed=22;
   448   00139A  0E16               	movlw	22
   449   00139C  6E23               	movwf	main@turnSpeed^0,c
   450   00139E                     
   451                           ;main.c: 42:     unsigned char turnDuration=2;
   452   00139E  0E02               	movlw	2
   453   0013A0  6E24               	movwf	main@turnDuration^0,c
   454   0013A2                     
   455                           ;main.c: 43:     unsigned char turnRamp=4;
   456   0013A2  0E04               	movlw	4
   457   0013A4  6E25               	movwf	main@turnRamp^0,c
   458   0013A6                     
   459                           ;main.c: 46:     TRISFbits.TRISF2=1;
   460   0013A6  8486               	bsf	134,2,c	;volatile
   461   0013A8                     
   462                           ;main.c: 47:     ANSELFbits.ANSELF2=0;
   463   0013A8  010E               	movlb	14	; () banked
   464   0013AA  95B4               	bcf	180,2,b	;volatile
   465   0013AC                     l33:
   466   0013AC  B48E               	btfsc	142,2,c	;volatile
   467   0013AE  EFDB  F009         	goto	u501
   468   0013B2  EFDD  F009         	goto	u500
   469   0013B6                     u501:
   470   0013B6  EFD6  F009         	goto	l33
   471   0013BA                     u500:
   472   0013BA                     
   473                           ;main.c: 49:     _delay((unsigned long)((500)*(64000000/4000.0)));
   474   0013BA  0E29               	movlw	41
   475   0013BC  6E20               	movwf	(??_main+1)^0,c
   476   0013BE  0E96               	movlw	150
   477   0013C0  6E1F               	movwf	??_main^0,c
   478   0013C2  0E7F               	movlw	127
   479   0013C4                     u517:
   480   0013C4  2EE8               	decfsz	wreg,f,c
   481   0013C6  D7FE               	bra	u517
   482   0013C8  2E1F               	decfsz	??_main^0,f,c
   483   0013CA  D7FC               	bra	u517
   484   0013CC  2E20               	decfsz	(??_main+1)^0,f,c
   485   0013CE  D7FA               	bra	u517
   486   0013D0  0000               	nop	
   487   0013D2                     l1459:
   488                           
   489                           ;main.c: 53:         turnLeft(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   490   0013D2  0E31               	movlw	low main@motorL
   491   0013D4  6E13               	movwf	turnLeft@mL^0,c
   492   0013D6  0E27               	movlw	low main@motorR
   493   0013D8  6E14               	movwf	turnLeft@mR^0,c
   494   0013DA  C023  F015         	movff	main@turnSpeed,turnLeft@turnSpeed
   495   0013DE  C024  F016         	movff	main@turnDuration,turnLeft@turnDuration
   496   0013E2  C025  F017         	movff	main@turnRamp,turnLeft@turnRamp
   497   0013E6  ECBE  F008         	call	_turnLeft	;wreg free
   498   0013EA                     
   499                           ;main.c: 54:         _delay((unsigned long)((50)*(64000000/4000.0)));
   500   0013EA  0E05               	movlw	5
   501   0013EC  6E20               	movwf	(??_main+1)^0,c
   502   0013EE  0E0F               	movlw	15
   503   0013F0  6E1F               	movwf	??_main^0,c
   504   0013F2  0EF1               	movlw	241
   505   0013F4                     u527:
   506   0013F4  2EE8               	decfsz	wreg,f,c
   507   0013F6  D7FE               	bra	u527
   508   0013F8  2E1F               	decfsz	??_main^0,f,c
   509   0013FA  D7FC               	bra	u527
   510   0013FC  2E20               	decfsz	(??_main+1)^0,f,c
   511   0013FE  D7FA               	bra	u527
   512   001400  0000               	nop	
   513                           
   514                           ;main.c: 55:         turnRight(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   515   001402  0E31               	movlw	low main@motorL
   516   001404  6E13               	movwf	turnRight@mL^0,c
   517   001406  0E27               	movlw	low main@motorR
   518   001408  6E14               	movwf	turnRight@mR^0,c
   519   00140A  C023  F015         	movff	main@turnSpeed,turnRight@turnSpeed
   520   00140E  C024  F016         	movff	main@turnDuration,turnRight@turnDuration
   521   001412  C025  F017         	movff	main@turnRamp,turnRight@turnRamp
   522   001416  ECE3  F007         	call	_turnRight	;wreg free
   523   00141A                     
   524                           ;main.c: 56:         _delay((unsigned long)((50)*(64000000/4000.0)));
   525   00141A  0E05               	movlw	5
   526   00141C  6E20               	movwf	(??_main+1)^0,c
   527   00141E  0E0F               	movlw	15
   528   001420  6E1F               	movwf	??_main^0,c
   529   001422  0EF1               	movlw	241
   530   001424                     u537:
   531   001424  2EE8               	decfsz	wreg,f,c
   532   001426  D7FE               	bra	u537
   533   001428  2E1F               	decfsz	??_main^0,f,c
   534   00142A  D7FC               	bra	u537
   535   00142C  2E20               	decfsz	(??_main+1)^0,f,c
   536   00142E  D7FA               	bra	u537
   537   001430  0000               	nop	
   538   001432                     
   539                           ;main.c: 57:         fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
   540   001432  0E31               	movlw	low main@motorL
   541   001434  6E13               	movwf	fullSpeedAhead@mL^0,c
   542   001436  0E27               	movlw	low main@motorR
   543   001438  6E14               	movwf	fullSpeedAhead@mR^0,c
   544   00143A  C022  F015         	movff	main@straightSpeed,fullSpeedAhead@straightSpeed
   545   00143E  C026  F016         	movff	main@straightRamp,fullSpeedAhead@straightRamp
   546   001442  EC80  F00B         	call	_fullSpeedAhead	;wreg free
   547                           
   548                           ;main.c: 58:         _delay((unsigned long)((50)*(64000000/4000.0)));
   549   001446  0E05               	movlw	5
   550   001448  6E20               	movwf	(??_main+1)^0,c
   551   00144A  0E0F               	movlw	15
   552   00144C  6E1F               	movwf	??_main^0,c
   553   00144E  0EF1               	movlw	241
   554   001450                     u547:
   555   001450  2EE8               	decfsz	wreg,f,c
   556   001452  D7FE               	bra	u547
   557   001454  2E1F               	decfsz	??_main^0,f,c
   558   001456  D7FC               	bra	u547
   559   001458  2E20               	decfsz	(??_main+1)^0,f,c
   560   00145A  D7FA               	bra	u547
   561   00145C  0000               	nop	
   562   00145E                     
   563                           ;main.c: 59:         stop(&motorL, &motorR, straightRamp);
   564   00145E  0E31               	movlw	low main@motorL
   565   001460  6E13               	movwf	stop@mL^0,c
   566   001462  0E27               	movlw	low main@motorR
   567   001464  6E14               	movwf	stop@mR^0,c
   568   001466  C026  F015         	movff	main@straightRamp,stop@straightRamp
   569   00146A  EC09  F00B         	call	_stop	;wreg free
   570   00146E                     
   571                           ;main.c: 60:         _delay((unsigned long)((50)*(64000000/4000.0)));
   572   00146E  0E05               	movlw	5
   573   001470  6E20               	movwf	(??_main+1)^0,c
   574   001472  0E0F               	movlw	15
   575   001474  6E1F               	movwf	??_main^0,c
   576   001476  0EF1               	movlw	241
   577   001478                     u557:
   578   001478  2EE8               	decfsz	wreg,f,c
   579   00147A  D7FE               	bra	u557
   580   00147C  2E1F               	decfsz	??_main^0,f,c
   581   00147E  D7FC               	bra	u557
   582   001480  2E20               	decfsz	(??_main+1)^0,f,c
   583   001482  D7FA               	bra	u557
   584   001484  0000               	nop	
   585                           
   586                           ;main.c: 61:         reverseOneSquare(&motorL, &motorR, straightSpeed, reverseDuration, 
      +                          straightRamp);
   587   001486  0E31               	movlw	low main@motorL
   588   001488  6E13               	movwf	reverseOneSquare@mL^0,c
   589   00148A  0E27               	movlw	low main@motorR
   590   00148C  6E14               	movwf	reverseOneSquare@mR^0,c
   591   00148E  C022  F015         	movff	main@straightSpeed,reverseOneSquare@straightSpeed
   592   001492  C021  F016         	movff	main@reverseDuration,reverseOneSquare@reverseDuration
   593   001496  C026  F017         	movff	main@straightRamp,reverseOneSquare@straightRamp
   594   00149A  EC01  F007         	call	_reverseOneSquare	;wreg free
   595   00149E                     
   596                           ;main.c: 62:         _delay((unsigned long)((50)*(64000000/4000.0)));
   597   00149E  0E05               	movlw	5
   598   0014A0  6E20               	movwf	(??_main+1)^0,c
   599   0014A2  0E0F               	movlw	15
   600   0014A4  6E1F               	movwf	??_main^0,c
   601   0014A6  0EF1               	movlw	241
   602   0014A8                     u567:
   603   0014A8  2EE8               	decfsz	wreg,f,c
   604   0014AA  D7FE               	bra	u567
   605   0014AC  2E1F               	decfsz	??_main^0,f,c
   606   0014AE  D7FC               	bra	u567
   607   0014B0  2E20               	decfsz	(??_main+1)^0,f,c
   608   0014B2  D7FA               	bra	u567
   609   0014B4  0000               	nop	
   610   0014B6  EFE9  F009         	goto	l1459
   611   0014BA  EF00  F000         	goto	start
   612   0014BE                     __end_of_main:
   613                           	callstack 0
   614                           
   615 ;; *************** function _turnRight *****************
   616 ;; Defined at:
   617 ;;		line 140 in file "dc_motor.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   620 ;;		 -> main@motorL(10), 
   621 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   622 ;;		 -> main@motorR(10), 
   623 ;;  turnSpeed       1   20[COMRAM] unsigned char 
   624 ;;  turnDuration    1   21[COMRAM] unsigned char 
   625 ;;  turnRamp        1   22[COMRAM] unsigned char 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  cur_power       2   28[COMRAM] int 
   628 ;;  i               2   26[COMRAM] int 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   638 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   639 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   640 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   641 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   642 ;;Total ram usage:       12 bytes
   643 ;; Hardware stack levels used: 1
   644 ;; Hardware stack levels required when called: 2
   645 ;; This function calls:
   646 ;;		_setMotorPWM
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text1
   653   000FC6                     __ptext1:
   654                           	callstack 0
   655   000FC6                     _turnRight:
   656                           	callstack 28
   657   000FC6                     
   658                           ;dc_motor.c: 140: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 141: {;dc_motor.c: 142:     mL->dir
      +                          ection = 1;
   659   000FC6  5013               	movf	turnRight@mL^0,w,c
   660   000FC8  6ED9               	movwf	fsr2l,c
   661   000FCA  6ADA               	clrf	fsr2h,c
   662   000FCC  0E01               	movlw	1
   663   000FCE  26D9               	addwf	fsr2l,f,c
   664   000FD0  0E01               	movlw	1
   665   000FD2  6EDF               	movwf	indf2,c
   666                           
   667                           ;dc_motor.c: 143:     mR->direction = 0;
   668   000FD4  5014               	movf	turnRight@mR^0,w,c
   669   000FD6  6ED9               	movwf	fsr2l,c
   670   000FD8  6ADA               	clrf	fsr2h,c
   671   000FDA  0E01               	movlw	1
   672   000FDC  26D9               	addwf	fsr2l,f,c
   673   000FDE  6ADF               	clrf	indf2,c
   674   000FE0                     
   675                           ;dc_motor.c: 144:     int i;;dc_motor.c: 145:     int cur_power;;dc_motor.c: 146:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
   676   000FE0  0E00               	movlw	0
   677   000FE2  6E1E               	movwf	(turnRight@cur_power+1)^0,c
   678   000FE4  0E01               	movlw	1
   679   000FE6  6E1D               	movwf	turnRight@cur_power^0,c
   680   000FE8  EF38  F008         	goto	l1289
   681   000FEC                     l1275:
   682                           
   683                           ;dc_motor.c: 147:         mL->power = cur_power+mL->compensation;
   684   000FEC  5013               	movf	turnRight@mL^0,w,c
   685   000FEE  6ED9               	movwf	fsr2l,c
   686   000FF0  6ADA               	clrf	fsr2h,c
   687   000FF2  5013               	movf	turnRight@mL^0,w,c
   688   000FF4  6EE1               	movwf	fsr1l,c
   689   000FF6  6AE2               	clrf	fsr1h,c
   690   000FF8  0E09               	movlw	9
   691   000FFA  26E1               	addwf	fsr1l,f,c
   692   000FFC  50E7               	movf	indf1,w,c
   693   000FFE  241D               	addwf	turnRight@cur_power^0,w,c
   694   001000  6EDF               	movwf	indf2,c
   695                           
   696                           ;dc_motor.c: 148:         mR->power = cur_power+mR->compensation;
   697   001002  5014               	movf	turnRight@mR^0,w,c
   698   001004  6ED9               	movwf	fsr2l,c
   699   001006  6ADA               	clrf	fsr2h,c
   700   001008  5014               	movf	turnRight@mR^0,w,c
   701   00100A  6EE1               	movwf	fsr1l,c
   702   00100C  6AE2               	clrf	fsr1h,c
   703   00100E  0E09               	movlw	9
   704   001010  26E1               	addwf	fsr1l,f,c
   705   001012  50E7               	movf	indf1,w,c
   706   001014  241D               	addwf	turnRight@cur_power^0,w,c
   707   001016  6EDF               	movwf	indf2,c
   708   001018                     
   709                           ;dc_motor.c: 149:         setMotorPWM(mL);
   710   001018  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
   711   00101C  EC5F  F00A         	call	_setMotorPWM	;wreg free
   712   001020                     
   713                           ;dc_motor.c: 150:         setMotorPWM(mR);
   714   001020  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
   715   001024  EC5F  F00A         	call	_setMotorPWM	;wreg free
   716   001028                     
   717                           ;dc_motor.c: 151:         for (i=0;i<turnRamp;i++) {
   718   001028  0E00               	movlw	0
   719   00102A  6E1C               	movwf	(turnRight@i+1)^0,c
   720   00102C  0E00               	movlw	0
   721   00102E  6E1B               	movwf	turnRight@i^0,c
   722   001030  EF24  F008         	goto	l127
   723   001034                     l1283:
   724                           
   725                           ;dc_motor.c: 152:             _delay((unsigned long)((5)*(64000000/4000.0)));
   726   001034  0E68               	movlw	104
   727   001036  6E18               	movwf	??_turnRight^0,c
   728   001038  0EE4               	movlw	228
   729   00103A                     u577:
   730   00103A  2EE8               	decfsz	wreg,f,c
   731   00103C  D7FE               	bra	u577
   732   00103E  2E18               	decfsz	??_turnRight^0,f,c
   733   001040  D7FC               	bra	u577
   734   001042  D000               	nop2	
   735   001044                     
   736                           ;dc_motor.c: 153:         }
   737   001044  4A1B               	infsnz	turnRight@i^0,f,c
   738   001046  2A1C               	incf	(turnRight@i+1)^0,f,c
   739   001048                     l127:
   740   001048  5017               	movf	turnRight@turnRamp^0,w,c
   741   00104A  6E18               	movwf	??_turnRight^0,c
   742   00104C  6A19               	clrf	(??_turnRight+1)^0,c
   743   00104E  5018               	movf	??_turnRight^0,w,c
   744   001050  5C1B               	subwf	turnRight@i^0,w,c
   745   001052  501C               	movf	(turnRight@i+1)^0,w,c
   746   001054  0A80               	xorlw	128
   747   001056  6E1A               	movwf	(??_turnRight+2)^0,c
   748   001058  5019               	movf	(??_turnRight+1)^0,w,c
   749   00105A  0A80               	xorlw	128
   750   00105C  581A               	subwfb	(??_turnRight+2)^0,w,c
   751   00105E  A0D8               	btfss	status,0,c
   752   001060  EF34  F008         	goto	u361
   753   001064  EF36  F008         	goto	u360
   754   001068                     u361:
   755   001068  EF1A  F008         	goto	l1283
   756   00106C                     u360:
   757   00106C                     
   758                           ;dc_motor.c: 154:     }
   759   00106C  4A1D               	infsnz	turnRight@cur_power^0,f,c
   760   00106E  2A1E               	incf	(turnRight@cur_power+1)^0,f,c
   761   001070                     l1289:
   762   001070  5015               	movf	turnRight@turnSpeed^0,w,c
   763   001072  6E18               	movwf	??_turnRight^0,c
   764   001074  6A19               	clrf	(??_turnRight+1)^0,c
   765   001076  501D               	movf	turnRight@cur_power^0,w,c
   766   001078  5C18               	subwf	??_turnRight^0,w,c
   767   00107A  5019               	movf	(??_turnRight+1)^0,w,c
   768   00107C  0A80               	xorlw	128
   769   00107E  6E1A               	movwf	(??_turnRight+2)^0,c
   770   001080  501E               	movf	(turnRight@cur_power+1)^0,w,c
   771   001082  0A80               	xorlw	128
   772   001084  581A               	subwfb	(??_turnRight+2)^0,w,c
   773   001086  B0D8               	btfsc	status,0,c
   774   001088  EF48  F008         	goto	u371
   775   00108C  EF4A  F008         	goto	u370
   776   001090                     u371:
   777   001090  EFF6  F007         	goto	l1275
   778   001094                     u370:
   779   001094                     
   780                           ;dc_motor.c: 156:     for (i=0;i<turnDuration;i++) {
   781   001094  0E00               	movlw	0
   782   001096  6E1C               	movwf	(turnRight@i+1)^0,c
   783   001098  0E00               	movlw	0
   784   00109A  6E1B               	movwf	turnRight@i^0,c
   785   00109C  EF5A  F008         	goto	l131
   786   0010A0                     l1293:
   787                           
   788                           ;dc_motor.c: 157:             _delay((unsigned long)((5)*(64000000/4000.0)));
   789   0010A0  0E68               	movlw	104
   790   0010A2  6E18               	movwf	??_turnRight^0,c
   791   0010A4  0EE4               	movlw	228
   792   0010A6                     u587:
   793   0010A6  2EE8               	decfsz	wreg,f,c
   794   0010A8  D7FE               	bra	u587
   795   0010AA  2E18               	decfsz	??_turnRight^0,f,c
   796   0010AC  D7FC               	bra	u587
   797   0010AE  D000               	nop2	
   798   0010B0                     
   799                           ;dc_motor.c: 158:         }
   800   0010B0  4A1B               	infsnz	turnRight@i^0,f,c
   801   0010B2  2A1C               	incf	(turnRight@i+1)^0,f,c
   802   0010B4                     l131:
   803   0010B4  5016               	movf	turnRight@turnDuration^0,w,c
   804   0010B6  6E18               	movwf	??_turnRight^0,c
   805   0010B8  6A19               	clrf	(??_turnRight+1)^0,c
   806   0010BA  5018               	movf	??_turnRight^0,w,c
   807   0010BC  5C1B               	subwf	turnRight@i^0,w,c
   808   0010BE  501C               	movf	(turnRight@i+1)^0,w,c
   809   0010C0  0A80               	xorlw	128
   810   0010C2  6E1A               	movwf	(??_turnRight+2)^0,c
   811   0010C4  5019               	movf	(??_turnRight+1)^0,w,c
   812   0010C6  0A80               	xorlw	128
   813   0010C8  581A               	subwfb	(??_turnRight+2)^0,w,c
   814   0010CA  A0D8               	btfss	status,0,c
   815   0010CC  EF6A  F008         	goto	u381
   816   0010D0  EF6C  F008         	goto	u380
   817   0010D4                     u381:
   818   0010D4  EF50  F008         	goto	l1293
   819   0010D8                     u380:
   820   0010D8                     
   821                           ;dc_motor.c: 160:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
   822   0010D8  C015  F01D         	movff	turnRight@turnSpeed,turnRight@cur_power
   823   0010DC  6A1E               	clrf	(turnRight@cur_power+1)^0,c
   824   0010DE                     l1297:
   825   0010DE  BE1E               	btfsc	(turnRight@cur_power+1)^0,7,c
   826   0010E0  EF76  F008         	goto	u390
   827   0010E4  EF74  F008         	goto	u391
   828   0010E8                     u391:
   829   0010E8  EF78  F008         	goto	l1301
   830   0010EC                     u390:
   831   0010EC  EFBD  F008         	goto	l139
   832   0010F0                     l1301:
   833                           
   834                           ;dc_motor.c: 161:         mL->power = cur_power+mL->compensation;
   835   0010F0  5013               	movf	turnRight@mL^0,w,c
   836   0010F2  6ED9               	movwf	fsr2l,c
   837   0010F4  6ADA               	clrf	fsr2h,c
   838   0010F6  5013               	movf	turnRight@mL^0,w,c
   839   0010F8  6EE1               	movwf	fsr1l,c
   840   0010FA  6AE2               	clrf	fsr1h,c
   841   0010FC  0E09               	movlw	9
   842   0010FE  26E1               	addwf	fsr1l,f,c
   843   001100  50E7               	movf	indf1,w,c
   844   001102  241D               	addwf	turnRight@cur_power^0,w,c
   845   001104  6EDF               	movwf	indf2,c
   846                           
   847                           ;dc_motor.c: 162:         mR->power = cur_power+mR->compensation;
   848   001106  5014               	movf	turnRight@mR^0,w,c
   849   001108  6ED9               	movwf	fsr2l,c
   850   00110A  6ADA               	clrf	fsr2h,c
   851   00110C  5014               	movf	turnRight@mR^0,w,c
   852   00110E  6EE1               	movwf	fsr1l,c
   853   001110  6AE2               	clrf	fsr1h,c
   854   001112  0E09               	movlw	9
   855   001114  26E1               	addwf	fsr1l,f,c
   856   001116  50E7               	movf	indf1,w,c
   857   001118  241D               	addwf	turnRight@cur_power^0,w,c
   858   00111A  6EDF               	movwf	indf2,c
   859   00111C                     
   860                           ;dc_motor.c: 163:         setMotorPWM(mL);
   861   00111C  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
   862   001120  EC5F  F00A         	call	_setMotorPWM	;wreg free
   863   001124                     
   864                           ;dc_motor.c: 164:         setMotorPWM(mR);
   865   001124  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
   866   001128  EC5F  F00A         	call	_setMotorPWM	;wreg free
   867   00112C                     
   868                           ;dc_motor.c: 165:         for (i=0;i<turnRamp;i++) {
   869   00112C  0E00               	movlw	0
   870   00112E  6E1C               	movwf	(turnRight@i+1)^0,c
   871   001130  0E00               	movlw	0
   872   001132  6E1B               	movwf	turnRight@i^0,c
   873   001134  EFA6  F008         	goto	l136
   874   001138                     l1309:
   875                           
   876                           ;dc_motor.c: 166:             _delay((unsigned long)((5)*(64000000/4000.0)));
   877   001138  0E68               	movlw	104
   878   00113A  6E18               	movwf	??_turnRight^0,c
   879   00113C  0EE4               	movlw	228
   880   00113E                     u597:
   881   00113E  2EE8               	decfsz	wreg,f,c
   882   001140  D7FE               	bra	u597
   883   001142  2E18               	decfsz	??_turnRight^0,f,c
   884   001144  D7FC               	bra	u597
   885   001146  D000               	nop2	
   886   001148                     
   887                           ;dc_motor.c: 167:         }
   888   001148  4A1B               	infsnz	turnRight@i^0,f,c
   889   00114A  2A1C               	incf	(turnRight@i+1)^0,f,c
   890   00114C                     l136:
   891   00114C  5017               	movf	turnRight@turnRamp^0,w,c
   892   00114E  6E18               	movwf	??_turnRight^0,c
   893   001150  6A19               	clrf	(??_turnRight+1)^0,c
   894   001152  5018               	movf	??_turnRight^0,w,c
   895   001154  5C1B               	subwf	turnRight@i^0,w,c
   896   001156  501C               	movf	(turnRight@i+1)^0,w,c
   897   001158  0A80               	xorlw	128
   898   00115A  6E1A               	movwf	(??_turnRight+2)^0,c
   899   00115C  5019               	movf	(??_turnRight+1)^0,w,c
   900   00115E  0A80               	xorlw	128
   901   001160  581A               	subwfb	(??_turnRight+2)^0,w,c
   902   001162  A0D8               	btfss	status,0,c
   903   001164  EFB6  F008         	goto	u401
   904   001168  EFB8  F008         	goto	u400
   905   00116C                     u401:
   906   00116C  EF9C  F008         	goto	l1309
   907   001170                     u400:
   908   001170                     
   909                           ;dc_motor.c: 168:     }
   910   001170  061D               	decf	turnRight@cur_power^0,f,c
   911   001172  A0D8               	btfss	status,0,c
   912   001174  061E               	decf	(turnRight@cur_power+1)^0,f,c
   913   001176  EF6F  F008         	goto	l1297
   914   00117A                     l139:
   915   00117A  0012               	return		;funcret
   916   00117C                     __end_of_turnRight:
   917                           	callstack 0
   918                           
   919 ;; *************** function _turnLeft *****************
   920 ;; Defined at:
   921 ;;		line 108 in file "dc_motor.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   924 ;;		 -> main@motorL(10), 
   925 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   926 ;;		 -> main@motorR(10), 
   927 ;;  turnSpeed       1   20[COMRAM] unsigned char 
   928 ;;  turnDuration    1   21[COMRAM] unsigned char 
   929 ;;  turnRamp        1   22[COMRAM] unsigned char 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  cur_power       2   28[COMRAM] int 
   932 ;;  i               2   26[COMRAM] int 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   942 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   943 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   944 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   945 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   946 ;;Total ram usage:       12 bytes
   947 ;; Hardware stack levels used: 1
   948 ;; Hardware stack levels required when called: 2
   949 ;; This function calls:
   950 ;;		_setMotorPWM
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text2
   957   00117C                     __ptext2:
   958                           	callstack 0
   959   00117C                     _turnLeft:
   960                           	callstack 28
   961   00117C                     
   962                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 109: {;dc_motor.c: 110:     mL->dire
      +                          ction = 0;
   963   00117C  5013               	movf	turnLeft@mL^0,w,c
   964   00117E  6ED9               	movwf	fsr2l,c
   965   001180  6ADA               	clrf	fsr2h,c
   966   001182  0E01               	movlw	1
   967   001184  26D9               	addwf	fsr2l,f,c
   968   001186  6ADF               	clrf	indf2,c
   969                           
   970                           ;dc_motor.c: 111:     mR->direction = 1;
   971   001188  5014               	movf	turnLeft@mR^0,w,c
   972   00118A  6ED9               	movwf	fsr2l,c
   973   00118C  6ADA               	clrf	fsr2h,c
   974   00118E  0E01               	movlw	1
   975   001190  26D9               	addwf	fsr2l,f,c
   976   001192  0E01               	movlw	1
   977   001194  6EDF               	movwf	indf2,c
   978   001196                     
   979                           ;dc_motor.c: 112:     int i;;dc_motor.c: 113:     int cur_power;;dc_motor.c: 114:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
   980   001196  0E00               	movlw	0
   981   001198  6E1E               	movwf	(turnLeft@cur_power+1)^0,c
   982   00119A  0E01               	movlw	1
   983   00119C  6E1D               	movwf	turnLeft@cur_power^0,c
   984   00119E  EF13  F009         	goto	l1243
   985   0011A2                     l1229:
   986                           
   987                           ;dc_motor.c: 115:         mL->power = cur_power+mL->compensation;
   988   0011A2  5013               	movf	turnLeft@mL^0,w,c
   989   0011A4  6ED9               	movwf	fsr2l,c
   990   0011A6  6ADA               	clrf	fsr2h,c
   991   0011A8  5013               	movf	turnLeft@mL^0,w,c
   992   0011AA  6EE1               	movwf	fsr1l,c
   993   0011AC  6AE2               	clrf	fsr1h,c
   994   0011AE  0E09               	movlw	9
   995   0011B0  26E1               	addwf	fsr1l,f,c
   996   0011B2  50E7               	movf	indf1,w,c
   997   0011B4  241D               	addwf	turnLeft@cur_power^0,w,c
   998   0011B6  6EDF               	movwf	indf2,c
   999                           
  1000                           ;dc_motor.c: 116:         mR->power = cur_power+mR->compensation;
  1001   0011B8  5014               	movf	turnLeft@mR^0,w,c
  1002   0011BA  6ED9               	movwf	fsr2l,c
  1003   0011BC  6ADA               	clrf	fsr2h,c
  1004   0011BE  5014               	movf	turnLeft@mR^0,w,c
  1005   0011C0  6EE1               	movwf	fsr1l,c
  1006   0011C2  6AE2               	clrf	fsr1h,c
  1007   0011C4  0E09               	movlw	9
  1008   0011C6  26E1               	addwf	fsr1l,f,c
  1009   0011C8  50E7               	movf	indf1,w,c
  1010   0011CA  241D               	addwf	turnLeft@cur_power^0,w,c
  1011   0011CC  6EDF               	movwf	indf2,c
  1012   0011CE                     
  1013                           ;dc_motor.c: 117:         setMotorPWM(mL);
  1014   0011CE  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1015   0011D2  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1016   0011D6                     
  1017                           ;dc_motor.c: 118:         setMotorPWM(mR);
  1018   0011D6  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1019   0011DA  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1020   0011DE                     
  1021                           ;dc_motor.c: 119:         for (i=0;i<turnRamp;i++) {
  1022   0011DE  0E00               	movlw	0
  1023   0011E0  6E1C               	movwf	(turnLeft@i+1)^0,c
  1024   0011E2  0E00               	movlw	0
  1025   0011E4  6E1B               	movwf	turnLeft@i^0,c
  1026   0011E6  EFFF  F008         	goto	l110
  1027   0011EA                     l1237:
  1028                           
  1029                           ;dc_motor.c: 120:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1030   0011EA  0E68               	movlw	104
  1031   0011EC  6E18               	movwf	??_turnLeft^0,c
  1032   0011EE  0EE4               	movlw	228
  1033   0011F0                     u607:
  1034   0011F0  2EE8               	decfsz	wreg,f,c
  1035   0011F2  D7FE               	bra	u607
  1036   0011F4  2E18               	decfsz	??_turnLeft^0,f,c
  1037   0011F6  D7FC               	bra	u607
  1038   0011F8  D000               	nop2	
  1039   0011FA                     
  1040                           ;dc_motor.c: 121:         }
  1041   0011FA  4A1B               	infsnz	turnLeft@i^0,f,c
  1042   0011FC  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1043   0011FE                     l110:
  1044   0011FE  5017               	movf	turnLeft@turnRamp^0,w,c
  1045   001200  6E18               	movwf	??_turnLeft^0,c
  1046   001202  6A19               	clrf	(??_turnLeft+1)^0,c
  1047   001204  5018               	movf	??_turnLeft^0,w,c
  1048   001206  5C1B               	subwf	turnLeft@i^0,w,c
  1049   001208  501C               	movf	(turnLeft@i+1)^0,w,c
  1050   00120A  0A80               	xorlw	128
  1051   00120C  6E1A               	movwf	(??_turnLeft+2)^0,c
  1052   00120E  5019               	movf	(??_turnLeft+1)^0,w,c
  1053   001210  0A80               	xorlw	128
  1054   001212  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1055   001214  A0D8               	btfss	status,0,c
  1056   001216  EF0F  F009         	goto	u311
  1057   00121A  EF11  F009         	goto	u310
  1058   00121E                     u311:
  1059   00121E  EFF5  F008         	goto	l1237
  1060   001222                     u310:
  1061   001222                     
  1062                           ;dc_motor.c: 122:     }
  1063   001222  4A1D               	infsnz	turnLeft@cur_power^0,f,c
  1064   001224  2A1E               	incf	(turnLeft@cur_power+1)^0,f,c
  1065   001226                     l1243:
  1066   001226  5015               	movf	turnLeft@turnSpeed^0,w,c
  1067   001228  6E18               	movwf	??_turnLeft^0,c
  1068   00122A  6A19               	clrf	(??_turnLeft+1)^0,c
  1069   00122C  501D               	movf	turnLeft@cur_power^0,w,c
  1070   00122E  5C18               	subwf	??_turnLeft^0,w,c
  1071   001230  5019               	movf	(??_turnLeft+1)^0,w,c
  1072   001232  0A80               	xorlw	128
  1073   001234  6E1A               	movwf	(??_turnLeft+2)^0,c
  1074   001236  501E               	movf	(turnLeft@cur_power+1)^0,w,c
  1075   001238  0A80               	xorlw	128
  1076   00123A  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1077   00123C  B0D8               	btfsc	status,0,c
  1078   00123E  EF23  F009         	goto	u321
  1079   001242  EF25  F009         	goto	u320
  1080   001246                     u321:
  1081   001246  EFD1  F008         	goto	l1229
  1082   00124A                     u320:
  1083   00124A                     
  1084                           ;dc_motor.c: 124:     for (i=0;i<turnDuration;i++) {
  1085   00124A  0E00               	movlw	0
  1086   00124C  6E1C               	movwf	(turnLeft@i+1)^0,c
  1087   00124E  0E00               	movlw	0
  1088   001250  6E1B               	movwf	turnLeft@i^0,c
  1089   001252  EF35  F009         	goto	l114
  1090   001256                     l1247:
  1091                           
  1092                           ;dc_motor.c: 125:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1093   001256  0E68               	movlw	104
  1094   001258  6E18               	movwf	??_turnLeft^0,c
  1095   00125A  0EE4               	movlw	228
  1096   00125C                     u617:
  1097   00125C  2EE8               	decfsz	wreg,f,c
  1098   00125E  D7FE               	bra	u617
  1099   001260  2E18               	decfsz	??_turnLeft^0,f,c
  1100   001262  D7FC               	bra	u617
  1101   001264  D000               	nop2	
  1102   001266                     
  1103                           ;dc_motor.c: 126:         }
  1104   001266  4A1B               	infsnz	turnLeft@i^0,f,c
  1105   001268  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1106   00126A                     l114:
  1107   00126A  5016               	movf	turnLeft@turnDuration^0,w,c
  1108   00126C  6E18               	movwf	??_turnLeft^0,c
  1109   00126E  6A19               	clrf	(??_turnLeft+1)^0,c
  1110   001270  5018               	movf	??_turnLeft^0,w,c
  1111   001272  5C1B               	subwf	turnLeft@i^0,w,c
  1112   001274  501C               	movf	(turnLeft@i+1)^0,w,c
  1113   001276  0A80               	xorlw	128
  1114   001278  6E1A               	movwf	(??_turnLeft+2)^0,c
  1115   00127A  5019               	movf	(??_turnLeft+1)^0,w,c
  1116   00127C  0A80               	xorlw	128
  1117   00127E  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1118   001280  A0D8               	btfss	status,0,c
  1119   001282  EF45  F009         	goto	u331
  1120   001286  EF47  F009         	goto	u330
  1121   00128A                     u331:
  1122   00128A  EF2B  F009         	goto	l1247
  1123   00128E                     u330:
  1124   00128E                     
  1125                           ;dc_motor.c: 128:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  1126   00128E  C015  F01D         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  1127   001292  6A1E               	clrf	(turnLeft@cur_power+1)^0,c
  1128   001294                     l1251:
  1129   001294  BE1E               	btfsc	(turnLeft@cur_power+1)^0,7,c
  1130   001296  EF51  F009         	goto	u340
  1131   00129A  EF4F  F009         	goto	u341
  1132   00129E                     u341:
  1133   00129E  EF53  F009         	goto	l1255
  1134   0012A2                     u340:
  1135   0012A2  EF98  F009         	goto	l122
  1136   0012A6                     l1255:
  1137                           
  1138                           ;dc_motor.c: 129:         mL->power = cur_power+mL->compensation;
  1139   0012A6  5013               	movf	turnLeft@mL^0,w,c
  1140   0012A8  6ED9               	movwf	fsr2l,c
  1141   0012AA  6ADA               	clrf	fsr2h,c
  1142   0012AC  5013               	movf	turnLeft@mL^0,w,c
  1143   0012AE  6EE1               	movwf	fsr1l,c
  1144   0012B0  6AE2               	clrf	fsr1h,c
  1145   0012B2  0E09               	movlw	9
  1146   0012B4  26E1               	addwf	fsr1l,f,c
  1147   0012B6  50E7               	movf	indf1,w,c
  1148   0012B8  241D               	addwf	turnLeft@cur_power^0,w,c
  1149   0012BA  6EDF               	movwf	indf2,c
  1150                           
  1151                           ;dc_motor.c: 130:         mR->power = cur_power+mR->compensation;
  1152   0012BC  5014               	movf	turnLeft@mR^0,w,c
  1153   0012BE  6ED9               	movwf	fsr2l,c
  1154   0012C0  6ADA               	clrf	fsr2h,c
  1155   0012C2  5014               	movf	turnLeft@mR^0,w,c
  1156   0012C4  6EE1               	movwf	fsr1l,c
  1157   0012C6  6AE2               	clrf	fsr1h,c
  1158   0012C8  0E09               	movlw	9
  1159   0012CA  26E1               	addwf	fsr1l,f,c
  1160   0012CC  50E7               	movf	indf1,w,c
  1161   0012CE  241D               	addwf	turnLeft@cur_power^0,w,c
  1162   0012D0  6EDF               	movwf	indf2,c
  1163   0012D2                     
  1164                           ;dc_motor.c: 131:         setMotorPWM(mL);
  1165   0012D2  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1166   0012D6  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1167   0012DA                     
  1168                           ;dc_motor.c: 132:         setMotorPWM(mR);
  1169   0012DA  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1170   0012DE  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1171   0012E2                     
  1172                           ;dc_motor.c: 133:         for (i=0;i<turnRamp;i++) {
  1173   0012E2  0E00               	movlw	0
  1174   0012E4  6E1C               	movwf	(turnLeft@i+1)^0,c
  1175   0012E6  0E00               	movlw	0
  1176   0012E8  6E1B               	movwf	turnLeft@i^0,c
  1177   0012EA  EF81  F009         	goto	l119
  1178   0012EE                     l1263:
  1179                           
  1180                           ;dc_motor.c: 134:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1181   0012EE  0E68               	movlw	104
  1182   0012F0  6E18               	movwf	??_turnLeft^0,c
  1183   0012F2  0EE4               	movlw	228
  1184   0012F4                     u627:
  1185   0012F4  2EE8               	decfsz	wreg,f,c
  1186   0012F6  D7FE               	bra	u627
  1187   0012F8  2E18               	decfsz	??_turnLeft^0,f,c
  1188   0012FA  D7FC               	bra	u627
  1189   0012FC  D000               	nop2	
  1190   0012FE                     
  1191                           ;dc_motor.c: 135:         }
  1192   0012FE  4A1B               	infsnz	turnLeft@i^0,f,c
  1193   001300  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1194   001302                     l119:
  1195   001302  5017               	movf	turnLeft@turnRamp^0,w,c
  1196   001304  6E18               	movwf	??_turnLeft^0,c
  1197   001306  6A19               	clrf	(??_turnLeft+1)^0,c
  1198   001308  5018               	movf	??_turnLeft^0,w,c
  1199   00130A  5C1B               	subwf	turnLeft@i^0,w,c
  1200   00130C  501C               	movf	(turnLeft@i+1)^0,w,c
  1201   00130E  0A80               	xorlw	128
  1202   001310  6E1A               	movwf	(??_turnLeft+2)^0,c
  1203   001312  5019               	movf	(??_turnLeft+1)^0,w,c
  1204   001314  0A80               	xorlw	128
  1205   001316  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1206   001318  A0D8               	btfss	status,0,c
  1207   00131A  EF91  F009         	goto	u351
  1208   00131E  EF93  F009         	goto	u350
  1209   001322                     u351:
  1210   001322  EF77  F009         	goto	l1263
  1211   001326                     u350:
  1212   001326                     
  1213                           ;dc_motor.c: 136:     }
  1214   001326  061D               	decf	turnLeft@cur_power^0,f,c
  1215   001328  A0D8               	btfss	status,0,c
  1216   00132A  061E               	decf	(turnLeft@cur_power+1)^0,f,c
  1217   00132C  EF4A  F009         	goto	l1251
  1218   001330                     l122:
  1219   001330  0012               	return		;funcret
  1220   001332                     __end_of_turnLeft:
  1221                           	callstack 0
  1222                           
  1223 ;; *************** function _stop *****************
  1224 ;; Defined at:
  1225 ;;		line 88 in file "dc_motor.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1228 ;;		 -> main@motorL(10), 
  1229 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1230 ;;		 -> main@motorR(10), 
  1231 ;;  straightRamp    1   20[COMRAM] unsigned char 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  cur_power       2   26[COMRAM] int 
  1234 ;;  i               2   24[COMRAM] int 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1244 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1245 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1246 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1248 ;;Total ram usage:       10 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 2
  1251 ;; This function calls:
  1252 ;;		_setMotorPWM
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text3
  1259   001612                     __ptext3:
  1260                           	callstack 0
  1261   001612                     _stop:
  1262                           	callstack 28
  1263   001612                     
  1264                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_mo
      +                          tor.c: 89: {;dc_motor.c: 90:     mL->direction = 1;
  1265   001612  5013               	movf	stop@mL^0,w,c
  1266   001614  6ED9               	movwf	fsr2l,c
  1267   001616  6ADA               	clrf	fsr2h,c
  1268   001618  0E01               	movlw	1
  1269   00161A  26D9               	addwf	fsr2l,f,c
  1270   00161C  0E01               	movlw	1
  1271   00161E  6EDF               	movwf	indf2,c
  1272                           
  1273                           ;dc_motor.c: 91:     mR->direction = 1;
  1274   001620  5014               	movf	stop@mR^0,w,c
  1275   001622  6ED9               	movwf	fsr2l,c
  1276   001624  6ADA               	clrf	fsr2h,c
  1277   001626  0E01               	movlw	1
  1278   001628  26D9               	addwf	fsr2l,f,c
  1279   00162A  0E01               	movlw	1
  1280   00162C  6EDF               	movwf	indf2,c
  1281                           
  1282                           ;dc_motor.c: 92:     int i;;dc_motor.c: 93:     int cur_power;;dc_motor.c: 94:     for (
      +                          cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  1283   00162E  5013               	movf	stop@mL^0,w,c
  1284   001630  6ED9               	movwf	fsr2l,c
  1285   001632  6ADA               	clrf	fsr2h,c
  1286   001634  50DF               	movf	indf2,w,c
  1287   001636  6E16               	movwf	??_stop^0,c
  1288   001638  5013               	movf	stop@mL^0,w,c
  1289   00163A  6ED9               	movwf	fsr2l,c
  1290   00163C  6ADA               	clrf	fsr2h,c
  1291   00163E  0E09               	movlw	9
  1292   001640  26D9               	addwf	fsr2l,f,c
  1293   001642  50DF               	movf	indf2,w,c
  1294   001644  6E17               	movwf	(??_stop+1)^0,c
  1295   001646  5017               	movf	(??_stop+1)^0,w,c
  1296   001648  5C16               	subwf	??_stop^0,w,c
  1297   00164A  6E1B               	movwf	stop@cur_power^0,c
  1298   00164C  6A1C               	clrf	(stop@cur_power+1)^0,c
  1299   00164E  A0D8               	btfss	status,0,c
  1300   001650  061C               	decf	(stop@cur_power+1)^0,f,c
  1301   001652                     l1339:
  1302   001652  BE1C               	btfsc	(stop@cur_power+1)^0,7,c
  1303   001654  EF30  F00B         	goto	u430
  1304   001658  EF2E  F00B         	goto	u431
  1305   00165C                     u431:
  1306   00165C  EF32  F00B         	goto	l1343
  1307   001660                     u430:
  1308   001660  EF77  F00B         	goto	l1359
  1309   001664                     l1343:
  1310                           
  1311                           ;dc_motor.c: 95:         mL->power = cur_power+mL->compensation;
  1312   001664  5013               	movf	stop@mL^0,w,c
  1313   001666  6ED9               	movwf	fsr2l,c
  1314   001668  6ADA               	clrf	fsr2h,c
  1315   00166A  5013               	movf	stop@mL^0,w,c
  1316   00166C  6EE1               	movwf	fsr1l,c
  1317   00166E  6AE2               	clrf	fsr1h,c
  1318   001670  0E09               	movlw	9
  1319   001672  26E1               	addwf	fsr1l,f,c
  1320   001674  50E7               	movf	indf1,w,c
  1321   001676  241B               	addwf	stop@cur_power^0,w,c
  1322   001678  6EDF               	movwf	indf2,c
  1323                           
  1324                           ;dc_motor.c: 96:         mR->power = cur_power+mR->compensation;
  1325   00167A  5014               	movf	stop@mR^0,w,c
  1326   00167C  6ED9               	movwf	fsr2l,c
  1327   00167E  6ADA               	clrf	fsr2h,c
  1328   001680  5014               	movf	stop@mR^0,w,c
  1329   001682  6EE1               	movwf	fsr1l,c
  1330   001684  6AE2               	clrf	fsr1h,c
  1331   001686  0E09               	movlw	9
  1332   001688  26E1               	addwf	fsr1l,f,c
  1333   00168A  50E7               	movf	indf1,w,c
  1334   00168C  241B               	addwf	stop@cur_power^0,w,c
  1335   00168E  6EDF               	movwf	indf2,c
  1336   001690                     
  1337                           ;dc_motor.c: 97:         setMotorPWM(mL);
  1338   001690  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1339   001694  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1340   001698                     
  1341                           ;dc_motor.c: 98:         setMotorPWM(mR);
  1342   001698  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1343   00169C  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1344   0016A0                     
  1345                           ;dc_motor.c: 99:         for (i=0;i<straightRamp;i++) {
  1346   0016A0  0E00               	movlw	0
  1347   0016A2  6E1A               	movwf	(stop@i+1)^0,c
  1348   0016A4  0E00               	movlw	0
  1349   0016A6  6E19               	movwf	stop@i^0,c
  1350   0016A8  EF60  F00B         	goto	l102
  1351   0016AC                     l1351:
  1352                           
  1353                           ;dc_motor.c: 100:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1354   0016AC  0E68               	movlw	104
  1355   0016AE  6E16               	movwf	??_stop^0,c
  1356   0016B0  0EE4               	movlw	228
  1357   0016B2                     u637:
  1358   0016B2  2EE8               	decfsz	wreg,f,c
  1359   0016B4  D7FE               	bra	u637
  1360   0016B6  2E16               	decfsz	??_stop^0,f,c
  1361   0016B8  D7FC               	bra	u637
  1362   0016BA  D000               	nop2	
  1363   0016BC                     
  1364                           ;dc_motor.c: 101:         }
  1365   0016BC  4A19               	infsnz	stop@i^0,f,c
  1366   0016BE  2A1A               	incf	(stop@i+1)^0,f,c
  1367   0016C0                     l102:
  1368   0016C0  5015               	movf	stop@straightRamp^0,w,c
  1369   0016C2  6E16               	movwf	??_stop^0,c
  1370   0016C4  6A17               	clrf	(??_stop+1)^0,c
  1371   0016C6  5016               	movf	??_stop^0,w,c
  1372   0016C8  5C19               	subwf	stop@i^0,w,c
  1373   0016CA  501A               	movf	(stop@i+1)^0,w,c
  1374   0016CC  0A80               	xorlw	128
  1375   0016CE  6E18               	movwf	(??_stop+2)^0,c
  1376   0016D0  5017               	movf	(??_stop+1)^0,w,c
  1377   0016D2  0A80               	xorlw	128
  1378   0016D4  5818               	subwfb	(??_stop+2)^0,w,c
  1379   0016D6  A0D8               	btfss	status,0,c
  1380   0016D8  EF70  F00B         	goto	u441
  1381   0016DC  EF72  F00B         	goto	u440
  1382   0016E0                     u441:
  1383   0016E0  EF56  F00B         	goto	l1351
  1384   0016E4                     u440:
  1385   0016E4                     
  1386                           ;dc_motor.c: 102:     }
  1387   0016E4  061B               	decf	stop@cur_power^0,f,c
  1388   0016E6  A0D8               	btfss	status,0,c
  1389   0016E8  061C               	decf	(stop@cur_power+1)^0,f,c
  1390   0016EA  EF29  F00B         	goto	l1339
  1391   0016EE                     l1359:
  1392                           
  1393                           ;dc_motor.c: 103:     mL->power = 0;
  1394   0016EE  5013               	movf	stop@mL^0,w,c
  1395   0016F0  6ED9               	movwf	fsr2l,c
  1396   0016F2  6ADA               	clrf	fsr2h,c
  1397   0016F4  6ADF               	clrf	indf2,c
  1398                           
  1399                           ;dc_motor.c: 104:     mR->power = 0;
  1400   0016F6  5014               	movf	stop@mR^0,w,c
  1401   0016F8  6ED9               	movwf	fsr2l,c
  1402   0016FA  6ADA               	clrf	fsr2h,c
  1403   0016FC  6ADF               	clrf	indf2,c
  1404   0016FE  0012               	return		;funcret
  1405   001700                     __end_of_stop:
  1406                           	callstack 0
  1407                           
  1408 ;; *************** function _reverseOneSquare *****************
  1409 ;; Defined at:
  1410 ;;		line 189 in file "dc_motor.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1413 ;;		 -> main@motorL(10), 
  1414 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1415 ;;		 -> main@motorR(10), 
  1416 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1417 ;;  reverseDurat    1   21[COMRAM] unsigned char 
  1418 ;;  straightRamp    1   22[COMRAM] unsigned char 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  cur_power       2   28[COMRAM] int 
  1421 ;;  i               2   26[COMRAM] int 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1431 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1432 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1433 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1435 ;;Total ram usage:       12 bytes
  1436 ;; Hardware stack levels used: 1
  1437 ;; Hardware stack levels required when called: 2
  1438 ;; This function calls:
  1439 ;;		_setMotorPWM
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text4
  1446   000E02                     __ptext4:
  1447                           	callstack 0
  1448   000E02                     _reverseOneSquare:
  1449                           	callstack 28
  1450   000E02                     
  1451                           ;dc_motor.c: 189: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 190: {;dc_motor.c
      +                          : 191:     mL->direction = 0;
  1452   000E02  5013               	movf	reverseOneSquare@mL^0,w,c
  1453   000E04  6ED9               	movwf	fsr2l,c
  1454   000E06  6ADA               	clrf	fsr2h,c
  1455   000E08  0E01               	movlw	1
  1456   000E0A  26D9               	addwf	fsr2l,f,c
  1457   000E0C  6ADF               	clrf	indf2,c
  1458                           
  1459                           ;dc_motor.c: 192:     mR->direction = 0;
  1460   000E0E  5014               	movf	reverseOneSquare@mR^0,w,c
  1461   000E10  6ED9               	movwf	fsr2l,c
  1462   000E12  6ADA               	clrf	fsr2h,c
  1463   000E14  0E01               	movlw	1
  1464   000E16  26D9               	addwf	fsr2l,f,c
  1465   000E18  6ADF               	clrf	indf2,c
  1466   000E1A                     
  1467                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     int cur_power;;dc_motor.c: 195:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1468   000E1A  0E00               	movlw	0
  1469   000E1C  6E1E               	movwf	(reverseOneSquare@cur_power+1)^0,c
  1470   000E1E  0E01               	movlw	1
  1471   000E20  6E1D               	movwf	reverseOneSquare@cur_power^0,c
  1472   000E22  EF55  F007         	goto	l1379
  1473   000E26                     l1365:
  1474                           
  1475                           ;dc_motor.c: 196:         mL->power = cur_power+mL->compensation;
  1476   000E26  5013               	movf	reverseOneSquare@mL^0,w,c
  1477   000E28  6ED9               	movwf	fsr2l,c
  1478   000E2A  6ADA               	clrf	fsr2h,c
  1479   000E2C  5013               	movf	reverseOneSquare@mL^0,w,c
  1480   000E2E  6EE1               	movwf	fsr1l,c
  1481   000E30  6AE2               	clrf	fsr1h,c
  1482   000E32  0E09               	movlw	9
  1483   000E34  26E1               	addwf	fsr1l,f,c
  1484   000E36  50E7               	movf	indf1,w,c
  1485   000E38  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1486   000E3A  6EDF               	movwf	indf2,c
  1487                           
  1488                           ;dc_motor.c: 197:         mR->power = cur_power+mR->compensation;
  1489   000E3C  5014               	movf	reverseOneSquare@mR^0,w,c
  1490   000E3E  6ED9               	movwf	fsr2l,c
  1491   000E40  6ADA               	clrf	fsr2h,c
  1492   000E42  5014               	movf	reverseOneSquare@mR^0,w,c
  1493   000E44  6EE1               	movwf	fsr1l,c
  1494   000E46  6AE2               	clrf	fsr1h,c
  1495   000E48  0E09               	movlw	9
  1496   000E4A  26E1               	addwf	fsr1l,f,c
  1497   000E4C  50E7               	movf	indf1,w,c
  1498   000E4E  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1499   000E50  6EDF               	movwf	indf2,c
  1500   000E52                     
  1501                           ;dc_motor.c: 198:         setMotorPWM(mL);
  1502   000E52  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1503   000E56  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1504   000E5A                     
  1505                           ;dc_motor.c: 199:         setMotorPWM(mR);
  1506   000E5A  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1507   000E5E  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1508   000E62                     
  1509                           ;dc_motor.c: 200:         for (i=0;i<straightRamp;i++) {
  1510   000E62  0E00               	movlw	0
  1511   000E64  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1512   000E66  0E00               	movlw	0
  1513   000E68  6E1B               	movwf	reverseOneSquare@i^0,c
  1514   000E6A  EF41  F007         	goto	l153
  1515   000E6E                     l1373:
  1516                           
  1517                           ;dc_motor.c: 201:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1518   000E6E  0E68               	movlw	104
  1519   000E70  6E18               	movwf	??_reverseOneSquare^0,c
  1520   000E72  0EE4               	movlw	228
  1521   000E74                     u647:
  1522   000E74  2EE8               	decfsz	wreg,f,c
  1523   000E76  D7FE               	bra	u647
  1524   000E78  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1525   000E7A  D7FC               	bra	u647
  1526   000E7C  D000               	nop2	
  1527   000E7E                     
  1528                           ;dc_motor.c: 202:         }
  1529   000E7E  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1530   000E80  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1531   000E82                     l153:
  1532   000E82  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1533   000E84  6E18               	movwf	??_reverseOneSquare^0,c
  1534   000E86  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1535   000E88  5018               	movf	??_reverseOneSquare^0,w,c
  1536   000E8A  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1537   000E8C  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1538   000E8E  0A80               	xorlw	128
  1539   000E90  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1540   000E92  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1541   000E94  0A80               	xorlw	128
  1542   000E96  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1543   000E98  A0D8               	btfss	status,0,c
  1544   000E9A  EF51  F007         	goto	u451
  1545   000E9E  EF53  F007         	goto	u450
  1546   000EA2                     u451:
  1547   000EA2  EF37  F007         	goto	l1373
  1548   000EA6                     u450:
  1549   000EA6                     
  1550                           ;dc_motor.c: 203:     }
  1551   000EA6  4A1D               	infsnz	reverseOneSquare@cur_power^0,f,c
  1552   000EA8  2A1E               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  1553   000EAA                     l1379:
  1554   000EAA  5015               	movf	reverseOneSquare@straightSpeed^0,w,c
  1555   000EAC  6E18               	movwf	??_reverseOneSquare^0,c
  1556   000EAE  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1557   000EB0  501D               	movf	reverseOneSquare@cur_power^0,w,c
  1558   000EB2  5C18               	subwf	??_reverseOneSquare^0,w,c
  1559   000EB4  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1560   000EB6  0A80               	xorlw	128
  1561   000EB8  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1562   000EBA  501E               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  1563   000EBC  0A80               	xorlw	128
  1564   000EBE  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1565   000EC0  B0D8               	btfsc	status,0,c
  1566   000EC2  EF65  F007         	goto	u461
  1567   000EC6  EF67  F007         	goto	u460
  1568   000ECA                     u461:
  1569   000ECA  EF13  F007         	goto	l1365
  1570   000ECE                     u460:
  1571   000ECE                     
  1572                           ;dc_motor.c: 205:     for (i=0;i<reverseDuration;i++) {
  1573   000ECE  0E00               	movlw	0
  1574   000ED0  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1575   000ED2  0E00               	movlw	0
  1576   000ED4  6E1B               	movwf	reverseOneSquare@i^0,c
  1577   000ED6  EF77  F007         	goto	l157
  1578   000EDA                     l1383:
  1579                           
  1580                           ;dc_motor.c: 206:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1581   000EDA  0E68               	movlw	104
  1582   000EDC  6E18               	movwf	??_reverseOneSquare^0,c
  1583   000EDE  0EE4               	movlw	228
  1584   000EE0                     u657:
  1585   000EE0  2EE8               	decfsz	wreg,f,c
  1586   000EE2  D7FE               	bra	u657
  1587   000EE4  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1588   000EE6  D7FC               	bra	u657
  1589   000EE8  D000               	nop2	
  1590   000EEA                     
  1591                           ;dc_motor.c: 207:         }
  1592   000EEA  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1593   000EEC  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1594   000EEE                     l157:
  1595   000EEE  5016               	movf	reverseOneSquare@reverseDuration^0,w,c
  1596   000EF0  6E18               	movwf	??_reverseOneSquare^0,c
  1597   000EF2  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1598   000EF4  5018               	movf	??_reverseOneSquare^0,w,c
  1599   000EF6  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1600   000EF8  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1601   000EFA  0A80               	xorlw	128
  1602   000EFC  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1603   000EFE  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1604   000F00  0A80               	xorlw	128
  1605   000F02  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1606   000F04  A0D8               	btfss	status,0,c
  1607   000F06  EF87  F007         	goto	u471
  1608   000F0A  EF89  F007         	goto	u470
  1609   000F0E                     u471:
  1610   000F0E  EF6D  F007         	goto	l1383
  1611   000F12                     u470:
  1612   000F12                     
  1613                           ;dc_motor.c: 209:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  1614   000F12  C015  F01D         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  1615   000F16  6A1E               	clrf	(reverseOneSquare@cur_power+1)^0,c
  1616   000F18                     l1387:
  1617   000F18  BE1E               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  1618   000F1A  EF93  F007         	goto	u480
  1619   000F1E  EF91  F007         	goto	u481
  1620   000F22                     u481:
  1621   000F22  EF95  F007         	goto	l1391
  1622   000F26                     u480:
  1623   000F26  EFDA  F007         	goto	l1407
  1624   000F2A                     l1391:
  1625                           
  1626                           ;dc_motor.c: 210:         mL->power = cur_power+mL->compensation;
  1627   000F2A  5013               	movf	reverseOneSquare@mL^0,w,c
  1628   000F2C  6ED9               	movwf	fsr2l,c
  1629   000F2E  6ADA               	clrf	fsr2h,c
  1630   000F30  5013               	movf	reverseOneSquare@mL^0,w,c
  1631   000F32  6EE1               	movwf	fsr1l,c
  1632   000F34  6AE2               	clrf	fsr1h,c
  1633   000F36  0E09               	movlw	9
  1634   000F38  26E1               	addwf	fsr1l,f,c
  1635   000F3A  50E7               	movf	indf1,w,c
  1636   000F3C  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1637   000F3E  6EDF               	movwf	indf2,c
  1638                           
  1639                           ;dc_motor.c: 211:         mR->power = cur_power+mR->compensation;
  1640   000F40  5014               	movf	reverseOneSquare@mR^0,w,c
  1641   000F42  6ED9               	movwf	fsr2l,c
  1642   000F44  6ADA               	clrf	fsr2h,c
  1643   000F46  5014               	movf	reverseOneSquare@mR^0,w,c
  1644   000F48  6EE1               	movwf	fsr1l,c
  1645   000F4A  6AE2               	clrf	fsr1h,c
  1646   000F4C  0E09               	movlw	9
  1647   000F4E  26E1               	addwf	fsr1l,f,c
  1648   000F50  50E7               	movf	indf1,w,c
  1649   000F52  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1650   000F54  6EDF               	movwf	indf2,c
  1651   000F56                     
  1652                           ;dc_motor.c: 212:         setMotorPWM(mL);
  1653   000F56  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1654   000F5A  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1655   000F5E                     
  1656                           ;dc_motor.c: 213:         setMotorPWM(mR);
  1657   000F5E  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1658   000F62  EC5F  F00A         	call	_setMotorPWM	;wreg free
  1659   000F66                     
  1660                           ;dc_motor.c: 214:         for (i=0;i<straightRamp;i++) {
  1661   000F66  0E00               	movlw	0
  1662   000F68  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1663   000F6A  0E00               	movlw	0
  1664   000F6C  6E1B               	movwf	reverseOneSquare@i^0,c
  1665   000F6E  EFC3  F007         	goto	l162
  1666   000F72                     l1399:
  1667                           
  1668                           ;dc_motor.c: 215:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1669   000F72  0E68               	movlw	104
  1670   000F74  6E18               	movwf	??_reverseOneSquare^0,c
  1671   000F76  0EE4               	movlw	228
  1672   000F78                     u667:
  1673   000F78  2EE8               	decfsz	wreg,f,c
  1674   000F7A  D7FE               	bra	u667
  1675   000F7C  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1676   000F7E  D7FC               	bra	u667
  1677   000F80  D000               	nop2	
  1678   000F82                     
  1679                           ;dc_motor.c: 216:         }
  1680   000F82  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1681   000F84  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1682   000F86                     l162:
  1683   000F86  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1684   000F88  6E18               	movwf	??_reverseOneSquare^0,c
  1685   000F8A  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1686   000F8C  5018               	movf	??_reverseOneSquare^0,w,c
  1687   000F8E  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1688   000F90  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1689   000F92  0A80               	xorlw	128
  1690   000F94  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1691   000F96  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1692   000F98  0A80               	xorlw	128
  1693   000F9A  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1694   000F9C  A0D8               	btfss	status,0,c
  1695   000F9E  EFD3  F007         	goto	u491
  1696   000FA2  EFD5  F007         	goto	u490
  1697   000FA6                     u491:
  1698   000FA6  EFB9  F007         	goto	l1399
  1699   000FAA                     u490:
  1700   000FAA                     
  1701                           ;dc_motor.c: 217:     }
  1702   000FAA  061D               	decf	reverseOneSquare@cur_power^0,f,c
  1703   000FAC  A0D8               	btfss	status,0,c
  1704   000FAE  061E               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  1705   000FB0  EF8C  F007         	goto	l1387
  1706   000FB4                     l1407:
  1707                           
  1708                           ;dc_motor.c: 218:     mL->power = 0;
  1709   000FB4  5013               	movf	reverseOneSquare@mL^0,w,c
  1710   000FB6  6ED9               	movwf	fsr2l,c
  1711   000FB8  6ADA               	clrf	fsr2h,c
  1712   000FBA  6ADF               	clrf	indf2,c
  1713                           
  1714                           ;dc_motor.c: 219:     mR->power = 0;
  1715   000FBC  5014               	movf	reverseOneSquare@mR^0,w,c
  1716   000FBE  6ED9               	movwf	fsr2l,c
  1717   000FC0  6ADA               	clrf	fsr2h,c
  1718   000FC2  6ADF               	clrf	indf2,c
  1719   000FC4  0012               	return		;funcret
  1720   000FC6                     __end_of_reverseOneSquare:
  1721                           	callstack 0
  1722                           
  1723 ;; *************** function _initDCmotorsPWM *****************
  1724 ;; Defined at:
  1725 ;;		line 5 in file "dc_motor.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, status,2
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;Total ram usage:        2 bytes
  1744 ;; Hardware stack levels used: 1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text5
  1753   0017D2                     __ptext5:
  1754                           	callstack 0
  1755   0017D2                     _initDCmotorsPWM:
  1756                           	callstack 30
  1757   0017D2                     
  1758                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  1759   0017D2  947D               	bcf	125,2,c	;volatile
  1760                           
  1761                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  1762   0017D4  9485               	bcf	133,2,c	;volatile
  1763                           
  1764                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  1765   0017D6  987D               	bcf	125,4,c	;volatile
  1766                           
  1767                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  1768   0017D8  9885               	bcf	133,4,c	;volatile
  1769                           
  1770                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  1771   0017DA  9E7B               	bcf	123,7,c	;volatile
  1772                           
  1773                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  1774   0017DC  9E83               	bcf	131,7,c	;volatile
  1775                           
  1776                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  1777   0017DE  9C7F               	bcf	127,6,c	;volatile
  1778                           
  1779                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  1780   0017E0  9C87               	bcf	135,6,c	;volatile
  1781   0017E2                     
  1782                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1783   0017E2  0E05               	movlw	5
  1784   0017E4  010E               	movlb	14	; () banked
  1785   0017E6  6F74               	movwf	116,b	;volatile
  1786                           
  1787                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1788   0017E8  0E06               	movlw	6
  1789   0017EA  6F76               	movwf	118,b	;volatile
  1790                           
  1791                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1792   0017EC  0E07               	movlw	7
  1793   0017EE  6F69               	movwf	105,b	;volatile
  1794                           
  1795                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1796   0017F0  0E08               	movlw	8
  1797   0017F2  6F88               	movwf	136,b	;volatile
  1798                           
  1799                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  1800   0017F4  50BD               	movf	189,w,c	;volatile
  1801   0017F6  0B8F               	andlw	-113
  1802   0017F8  0930               	iorlw	48
  1803   0017FA  6EBD               	movwf	189,c	;volatile
  1804                           
  1805                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1806   0017FC  0EE0               	movlw	-32
  1807   0017FE  16BE               	andwf	190,f,c	;volatile
  1808                           
  1809                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1810   001800  50BF               	movf	191,w,c	;volatile
  1811   001802  0BF0               	andlw	-16
  1812   001804  0901               	iorlw	1
  1813   001806  6EBF               	movwf	191,c	;volatile
  1814   001808                     
  1815                           ; BSR set to: 14
  1816                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1817   001808  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1818   00180C                     
  1819                           ; BSR set to: 14
  1820                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1821   00180C  8EBD               	bsf	189,7,c	;volatile
  1822                           
  1823                           ;dc_motor.c: 35:     CCPR1H=0;
  1824   00180E  0E00               	movlw	0
  1825   001810  6EAA               	movwf	170,c	;volatile
  1826                           
  1827                           ;dc_motor.c: 36:     CCPR2H=0;
  1828   001812  0E00               	movlw	0
  1829   001814  6EA6               	movwf	166,c	;volatile
  1830                           
  1831                           ;dc_motor.c: 37:     CCPR3H=0;
  1832   001816  0E00               	movlw	0
  1833   001818  010F               	movlb	15	; () banked
  1834   00181A  6F25               	movwf	37,b	;volatile
  1835                           
  1836                           ;dc_motor.c: 38:     CCPR4H=0;
  1837   00181C  0E00               	movlw	0
  1838   00181E  6F21               	movwf	33,b	;volatile
  1839                           
  1840                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1841   001820  0EFC               	movlw	-4
  1842   001822  16AD               	andwf	173,f,c	;volatile
  1843                           
  1844                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1845   001824  0EF3               	movlw	-13
  1846   001826  16AD               	andwf	173,f,c	;volatile
  1847                           
  1848                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1849   001828  0ECF               	movlw	-49
  1850   00182A  16AD               	andwf	173,f,c	;volatile
  1851                           
  1852                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1853   00182C  0E3F               	movlw	-193
  1854   00182E  16AD               	andwf	173,f,c	;volatile
  1855   001830                     
  1856                           ; BSR set to: 15
  1857                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1858   001830  88AB               	bsf	171,4,c	;volatile
  1859                           
  1860                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1861   001832  50AB               	movf	171,w,c	;volatile
  1862   001834  0BF0               	andlw	-16
  1863   001836  090C               	iorlw	12
  1864   001838  6EAB               	movwf	171,c	;volatile
  1865   00183A                     
  1866                           ; BSR set to: 15
  1867                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1868   00183A  8EAB               	bsf	171,7,c	;volatile
  1869   00183C                     
  1870                           ; BSR set to: 15
  1871                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1872   00183C  88A7               	bsf	167,4,c	;volatile
  1873                           
  1874                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1875   00183E  50A7               	movf	167,w,c	;volatile
  1876   001840  0BF0               	andlw	-16
  1877   001842  090C               	iorlw	12
  1878   001844  6EA7               	movwf	167,c	;volatile
  1879   001846                     
  1880                           ; BSR set to: 15
  1881                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1882   001846  8EA7               	bsf	167,7,c	;volatile
  1883   001848                     
  1884                           ; BSR set to: 15
  1885                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1886   001848  8926               	bsf	38,4,b	;volatile
  1887                           
  1888                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1889   00184A  5126               	movf	38,w,b	;volatile
  1890   00184C  0BF0               	andlw	-16
  1891   00184E  090C               	iorlw	12
  1892   001850  6F26               	movwf	38,b	;volatile
  1893   001852                     
  1894                           ; BSR set to: 15
  1895                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1896   001852  8F26               	bsf	38,7,b	;volatile
  1897   001854                     
  1898                           ; BSR set to: 15
  1899                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1900   001854  8922               	bsf	34,4,b	;volatile
  1901                           
  1902                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1903   001856  5122               	movf	34,w,b	;volatile
  1904   001858  0BF0               	andlw	-16
  1905   00185A  090C               	iorlw	12
  1906   00185C  6F22               	movwf	34,b	;volatile
  1907   00185E                     
  1908                           ; BSR set to: 15
  1909                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1910   00185E  8F22               	bsf	34,7,b	;volatile
  1911   001860                     
  1912                           ; BSR set to: 15
  1913   001860  0012               	return		;funcret
  1914   001862                     __end_of_initDCmotorsPWM:
  1915                           	callstack 0
  1916                           
  1917 ;; *************** function _fullSpeedAhead *****************
  1918 ;; Defined at:
  1919 ;;		line 172 in file "dc_motor.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1922 ;;		 -> main@motorL(10), 
  1923 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1924 ;;		 -> main@motorR(10), 
  1925 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1926 ;;  straightRamp    1   21[COMRAM] unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  cur_power       2   27[COMRAM] int 
  1929 ;;  i               2   25[COMRAM] int 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1942 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1943 ;;Total ram usage:       11 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; Hardware stack levels required when called: 2
  1946 ;; This function calls:
  1947 ;;		_setMotorPWM
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text6
  1954   001700                     __ptext6:
  1955                           	callstack 0
  1956   001700                     _fullSpeedAhead:
  1957                           	callstack 28
  1958   001700                     
  1959                           ;dc_motor.c: 172: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 173: {;dc_motor.c: 174:     mL->direction = 1;
  1960   001700  5013               	movf	fullSpeedAhead@mL^0,w,c
  1961   001702  6ED9               	movwf	fsr2l,c
  1962   001704  6ADA               	clrf	fsr2h,c
  1963   001706  0E01               	movlw	1
  1964   001708  26D9               	addwf	fsr2l,f,c
  1965   00170A  0E01               	movlw	1
  1966   00170C  6EDF               	movwf	indf2,c
  1967                           
  1968                           ;dc_motor.c: 175:     mR->direction = 1;
  1969   00170E  5014               	movf	fullSpeedAhead@mR^0,w,c
  1970   001710  6ED9               	movwf	fsr2l,c
  1971   001712  6ADA               	clrf	fsr2h,c
  1972   001714  0E01               	movlw	1
  1973   001716  26D9               	addwf	fsr2l,f,c
  1974   001718  0E01               	movlw	1
  1975   00171A  6EDF               	movwf	indf2,c
  1976   00171C                     
  1977                           ;dc_motor.c: 176:     int i;;dc_motor.c: 177:     int cur_power;;dc_motor.c: 178:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1978   00171C  0E00               	movlw	0
  1979   00171E  6E1D               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  1980   001720  0E01               	movlw	1
  1981   001722  6E1C               	movwf	fullSpeedAhead@cur_power^0,c
  1982   001724  EFD6  F00B         	goto	l1335
  1983   001728                     l1321:
  1984                           
  1985                           ;dc_motor.c: 179:         mL->power = cur_power+mL->compensation;
  1986   001728  5013               	movf	fullSpeedAhead@mL^0,w,c
  1987   00172A  6ED9               	movwf	fsr2l,c
  1988   00172C  6ADA               	clrf	fsr2h,c
  1989   00172E  5013               	movf	fullSpeedAhead@mL^0,w,c
  1990   001730  6EE1               	movwf	fsr1l,c
  1991   001732  6AE2               	clrf	fsr1h,c
  1992   001734  0E09               	movlw	9
  1993   001736  26E1               	addwf	fsr1l,f,c
  1994   001738  50E7               	movf	indf1,w,c
  1995   00173A  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1996   00173C  6EDF               	movwf	indf2,c
  1997                           
  1998                           ;dc_motor.c: 180:         mR->power = cur_power+mR->compensation;
  1999   00173E  5014               	movf	fullSpeedAhead@mR^0,w,c
  2000   001740  6ED9               	movwf	fsr2l,c
  2001   001742  6ADA               	clrf	fsr2h,c
  2002   001744  5014               	movf	fullSpeedAhead@mR^0,w,c
  2003   001746  6EE1               	movwf	fsr1l,c
  2004   001748  6AE2               	clrf	fsr1h,c
  2005   00174A  0E09               	movlw	9
  2006   00174C  26E1               	addwf	fsr1l,f,c
  2007   00174E  50E7               	movf	indf1,w,c
  2008   001750  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  2009   001752  6EDF               	movwf	indf2,c
  2010   001754                     
  2011                           ;dc_motor.c: 181:         setMotorPWM(mL);
  2012   001754  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2013   001758  EC5F  F00A         	call	_setMotorPWM	;wreg free
  2014   00175C                     
  2015                           ;dc_motor.c: 182:         setMotorPWM(mR);
  2016   00175C  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2017   001760  EC5F  F00A         	call	_setMotorPWM	;wreg free
  2018   001764                     
  2019                           ;dc_motor.c: 183:         for (i=0;i<straightRamp;i++) {
  2020   001764  0E00               	movlw	0
  2021   001766  6E1B               	movwf	(fullSpeedAhead@i+1)^0,c
  2022   001768  0E00               	movlw	0
  2023   00176A  6E1A               	movwf	fullSpeedAhead@i^0,c
  2024   00176C  EFC2  F00B         	goto	l144
  2025   001770                     l1329:
  2026                           
  2027                           ;dc_motor.c: 184:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2028   001770  0E68               	movlw	104
  2029   001772  6E17               	movwf	??_fullSpeedAhead^0,c
  2030   001774  0EE4               	movlw	228
  2031   001776                     u677:
  2032   001776  2EE8               	decfsz	wreg,f,c
  2033   001778  D7FE               	bra	u677
  2034   00177A  2E17               	decfsz	??_fullSpeedAhead^0,f,c
  2035   00177C  D7FC               	bra	u677
  2036   00177E  D000               	nop2	
  2037   001780                     
  2038                           ;dc_motor.c: 185:         }
  2039   001780  4A1A               	infsnz	fullSpeedAhead@i^0,f,c
  2040   001782  2A1B               	incf	(fullSpeedAhead@i+1)^0,f,c
  2041   001784                     l144:
  2042   001784  5016               	movf	fullSpeedAhead@straightRamp^0,w,c
  2043   001786  6E17               	movwf	??_fullSpeedAhead^0,c
  2044   001788  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  2045   00178A  5017               	movf	??_fullSpeedAhead^0,w,c
  2046   00178C  5C1A               	subwf	fullSpeedAhead@i^0,w,c
  2047   00178E  501B               	movf	(fullSpeedAhead@i+1)^0,w,c
  2048   001790  0A80               	xorlw	128
  2049   001792  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  2050   001794  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  2051   001796  0A80               	xorlw	128
  2052   001798  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2053   00179A  A0D8               	btfss	status,0,c
  2054   00179C  EFD2  F00B         	goto	u411
  2055   0017A0  EFD4  F00B         	goto	u410
  2056   0017A4                     u411:
  2057   0017A4  EFB8  F00B         	goto	l1329
  2058   0017A8                     u410:
  2059   0017A8                     
  2060                           ;dc_motor.c: 186:     }
  2061   0017A8  4A1C               	infsnz	fullSpeedAhead@cur_power^0,f,c
  2062   0017AA  2A1D               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  2063   0017AC                     l1335:
  2064   0017AC  5015               	movf	fullSpeedAhead@straightSpeed^0,w,c
  2065   0017AE  6E17               	movwf	??_fullSpeedAhead^0,c
  2066   0017B0  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  2067   0017B2  501C               	movf	fullSpeedAhead@cur_power^0,w,c
  2068   0017B4  5C17               	subwf	??_fullSpeedAhead^0,w,c
  2069   0017B6  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  2070   0017B8  0A80               	xorlw	128
  2071   0017BA  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  2072   0017BC  501D               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  2073   0017BE  0A80               	xorlw	128
  2074   0017C0  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  2075   0017C2  B0D8               	btfsc	status,0,c
  2076   0017C4  EFE6  F00B         	goto	u421
  2077   0017C8  EFE8  F00B         	goto	u420
  2078   0017CC                     u421:
  2079   0017CC  EF94  F00B         	goto	l1321
  2080   0017D0                     u420:
  2081   0017D0  0012               	return		;funcret
  2082   0017D2                     __end_of_fullSpeedAhead:
  2083                           	callstack 0
  2084                           
  2085 ;; *************** function _setMotorPWM *****************
  2086 ;; Defined at:
  2087 ;;		line 65 in file "dc_motor.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2090 ;;		 -> main@motorR(10), main@motorL(10), 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  negDuty         1   17[COMRAM] unsigned char 
  2093 ;;  posDuty         1   16[COMRAM] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2103 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;Total ram usage:        5 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; Hardware stack levels required when called: 1
  2110 ;; This function calls:
  2111 ;;		___lwdiv
  2112 ;;		___wmul
  2113 ;; This function is called by:
  2114 ;;		_stop
  2115 ;;		_turnLeft
  2116 ;;		_turnRight
  2117 ;;		_fullSpeedAhead
  2118 ;;		_reverseOneSquare
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text7
  2123   0014BE                     __ptext7:
  2124                           	callstack 0
  2125   0014BE                     _setMotorPWM:
  2126                           	callstack 28
  2127   0014BE                     
  2128                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2129   0014BE  500E               	movf	setMotorPWM@m^0,w,c
  2130   0014C0  6ED9               	movwf	fsr2l,c
  2131   0014C2  6ADA               	clrf	fsr2h,c
  2132   0014C4  0E02               	movlw	2
  2133   0014C6  26D9               	addwf	fsr2l,f,c
  2134   0014C8  50DF               	movf	indf2,w,c
  2135   0014CA  B4D8               	btfsc	status,2,c
  2136   0014CC  EF6A  F00A         	goto	u291
  2137   0014D0  EF6C  F00A         	goto	u290
  2138   0014D4                     u291:
  2139   0014D4  EF9C  F00A         	goto	l1191
  2140   0014D8                     u290:
  2141   0014D8                     
  2142                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2143   0014D8  500E               	movf	setMotorPWM@m^0,w,c
  2144   0014DA  6ED9               	movwf	fsr2l,c
  2145   0014DC  6ADA               	clrf	fsr2h,c
  2146   0014DE  50DF               	movf	indf2,w,c
  2147   0014E0  6E0F               	movwf	??_setMotorPWM^0,c
  2148   0014E2  500F               	movf	??_setMotorPWM^0,w,c
  2149   0014E4  6E01               	movwf	___wmul@multiplier^0,c
  2150   0014E6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2151   0014E8  500E               	movf	setMotorPWM@m^0,w,c
  2152   0014EA  6ED9               	movwf	fsr2l,c
  2153   0014EC  6ADA               	clrf	fsr2h,c
  2154   0014EE  0E03               	movlw	3
  2155   0014F0  26D9               	addwf	fsr2l,f,c
  2156   0014F2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2157   0014F6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2158   0014FA  EC6B  F00C         	call	___wmul	;wreg free
  2159   0014FE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2160   001502  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2161   001506  0E00               	movlw	0
  2162   001508  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2163   00150A  0E64               	movlw	100
  2164   00150C  6E09               	movwf	___lwdiv@divisor^0,c
  2165   00150E  EC31  F00C         	call	___lwdiv	;wreg free
  2166   001512  500E               	movf	setMotorPWM@m^0,w,c
  2167   001514  6ED9               	movwf	fsr2l,c
  2168   001516  6ADA               	clrf	fsr2h,c
  2169   001518  0E03               	movlw	3
  2170   00151A  26D9               	addwf	fsr2l,f,c
  2171   00151C  50DF               	movf	indf2,w,c
  2172   00151E  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2173   001520  5007               	movf	?___lwdiv^0,w,c
  2174   001522  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2175   001524  6E11               	movwf	setMotorPWM@posDuty^0,c
  2176   001526                     
  2177                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2178   001526  500E               	movf	setMotorPWM@m^0,w,c
  2179   001528  6ED9               	movwf	fsr2l,c
  2180   00152A  6ADA               	clrf	fsr2h,c
  2181   00152C  0E03               	movlw	3
  2182   00152E  26D9               	addwf	fsr2l,f,c
  2183   001530  50DF               	movf	indf2,w,c
  2184   001532  6E12               	movwf	setMotorPWM@negDuty^0,c
  2185                           
  2186                           ;dc_motor.c: 72:     }
  2187   001534  EFBD  F00A         	goto	l1195
  2188   001538                     l1191:
  2189                           
  2190                           ;dc_motor.c: 74:         posDuty=0;
  2191   001538  0E00               	movlw	0
  2192   00153A  6E11               	movwf	setMotorPWM@posDuty^0,c
  2193   00153C                     
  2194                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2195   00153C  500E               	movf	setMotorPWM@m^0,w,c
  2196   00153E  6ED9               	movwf	fsr2l,c
  2197   001540  6ADA               	clrf	fsr2h,c
  2198   001542  50DF               	movf	indf2,w,c
  2199   001544  6E0F               	movwf	??_setMotorPWM^0,c
  2200   001546  500F               	movf	??_setMotorPWM^0,w,c
  2201   001548  6E01               	movwf	___wmul@multiplier^0,c
  2202   00154A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2203   00154C  500E               	movf	setMotorPWM@m^0,w,c
  2204   00154E  6ED9               	movwf	fsr2l,c
  2205   001550  6ADA               	clrf	fsr2h,c
  2206   001552  0E03               	movlw	3
  2207   001554  26D9               	addwf	fsr2l,f,c
  2208   001556  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2209   00155A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2210   00155E  EC6B  F00C         	call	___wmul	;wreg free
  2211   001562  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2212   001566  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2213   00156A  0E00               	movlw	0
  2214   00156C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2215   00156E  0E64               	movlw	100
  2216   001570  6E09               	movwf	___lwdiv@divisor^0,c
  2217   001572  EC31  F00C         	call	___lwdiv	;wreg free
  2218   001576  5007               	movf	?___lwdiv^0,w,c
  2219   001578  6E12               	movwf	setMotorPWM@negDuty^0,c
  2220   00157A                     l1195:
  2221                           
  2222                           ;dc_motor.c: 78:     if (m->direction) {
  2223   00157A  500E               	movf	setMotorPWM@m^0,w,c
  2224   00157C  6ED9               	movwf	fsr2l,c
  2225   00157E  6ADA               	clrf	fsr2h,c
  2226   001580  0E01               	movlw	1
  2227   001582  26D9               	addwf	fsr2l,f,c
  2228   001584  50DF               	movf	indf2,w,c
  2229   001586  B4D8               	btfsc	status,2,c
  2230   001588  EFC8  F00A         	goto	u301
  2231   00158C  EFCA  F00A         	goto	u300
  2232   001590                     u301:
  2233   001590  EFEA  F00A         	goto	l1199
  2234   001594                     u300:
  2235   001594                     
  2236                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  2237   001594  500E               	movf	setMotorPWM@m^0,w,c
  2238   001596  6ED9               	movwf	fsr2l,c
  2239   001598  6ADA               	clrf	fsr2h,c
  2240   00159A  0E05               	movlw	5
  2241   00159C  26D9               	addwf	fsr2l,f,c
  2242   00159E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2243   0015A2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2244   0015A6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2245   0015AA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2246   0015AE  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2247                           
  2248                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  2249   0015B2  500E               	movf	setMotorPWM@m^0,w,c
  2250   0015B4  6ED9               	movwf	fsr2l,c
  2251   0015B6  6ADA               	clrf	fsr2h,c
  2252   0015B8  0E07               	movlw	7
  2253   0015BA  26D9               	addwf	fsr2l,f,c
  2254   0015BC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2255   0015C0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2256   0015C4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2257   0015C8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2258   0015CC  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2259                           
  2260                           ;dc_motor.c: 81:     } else {
  2261   0015D0  EF08  F00B         	goto	l97
  2262   0015D4                     l1199:
  2263                           
  2264                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  2265   0015D4  500E               	movf	setMotorPWM@m^0,w,c
  2266   0015D6  6ED9               	movwf	fsr2l,c
  2267   0015D8  6ADA               	clrf	fsr2h,c
  2268   0015DA  0E05               	movlw	5
  2269   0015DC  26D9               	addwf	fsr2l,f,c
  2270   0015DE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2271   0015E2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2272   0015E6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2273   0015EA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2274   0015EE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2275                           
  2276                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  2277   0015F2  500E               	movf	setMotorPWM@m^0,w,c
  2278   0015F4  6ED9               	movwf	fsr2l,c
  2279   0015F6  6ADA               	clrf	fsr2h,c
  2280   0015F8  0E07               	movlw	7
  2281   0015FA  26D9               	addwf	fsr2l,f,c
  2282   0015FC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2283   001600  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2284   001604  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2285   001608  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2286   00160C  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2287   001610                     l97:
  2288   001610  0012               	return		;funcret
  2289   001612                     __end_of_setMotorPWM:
  2290                           	callstack 0
  2291                           
  2292 ;; *************** function ___wmul *****************
  2293 ;; Defined at:
  2294 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  multiplier      2    0[COMRAM] unsigned int 
  2297 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  product         2    4[COMRAM] unsigned int 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  2    0[COMRAM] unsigned int 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, prodl, prodh
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2313 ;;Total ram usage:        6 bytes
  2314 ;; Hardware stack levels used: 1
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_setMotorPWM
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text8
  2323   0018D6                     __ptext8:
  2324                           	callstack 0
  2325   0018D6                     ___wmul:
  2326                           	callstack 28
  2327   0018D6  5001               	movf	___wmul@multiplier^0,w,c
  2328   0018D8  0203               	mulwf	___wmul@multiplicand^0,c
  2329   0018DA  CFF3 F005          	movff	prodl,___wmul@product
  2330   0018DE  CFF4 F006          	movff	prodh,___wmul@product+1
  2331   0018E2  5001               	movf	___wmul@multiplier^0,w,c
  2332   0018E4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2333   0018E6  50F3               	movf	243,w,c
  2334   0018E8  2606               	addwf	(___wmul@product+1)^0,f,c
  2335   0018EA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2336   0018EC  0203               	mulwf	___wmul@multiplicand^0,c
  2337   0018EE  50F3               	movf	243,w,c
  2338   0018F0  2606               	addwf	(___wmul@product+1)^0,f,c
  2339   0018F2  C005  F001         	movff	___wmul@product,?___wmul
  2340   0018F6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2341   0018FA  0012               	return		;funcret
  2342   0018FC                     __end_of___wmul:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function ___lwdiv *****************
  2346 ;; Defined at:
  2347 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  dividend        2    6[COMRAM] unsigned int 
  2350 ;;  divisor         2    8[COMRAM] unsigned int 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  quotient        2   10[COMRAM] unsigned int 
  2353 ;;  counter         1   12[COMRAM] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2    6[COMRAM] unsigned int 
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;Total ram usage:        7 bytes
  2368 ;; Hardware stack levels used: 1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_setMotorPWM
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text9
  2377   001862                     __ptext9:
  2378                           	callstack 0
  2379   001862                     ___lwdiv:
  2380                           	callstack 28
  2381   001862  0E00               	movlw	0
  2382   001864  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2383   001866  0E00               	movlw	0
  2384   001868  6E0B               	movwf	___lwdiv@quotient^0,c
  2385   00186A  5009               	movf	___lwdiv@divisor^0,w,c
  2386   00186C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2387   00186E  B4D8               	btfsc	status,2,c
  2388   001870  EF3C  F00C         	goto	u261
  2389   001874  EF3E  F00C         	goto	u260
  2390   001878                     u261:
  2391   001878  EF66  F00C         	goto	l659
  2392   00187C                     u260:
  2393   00187C  0E01               	movlw	1
  2394   00187E  6E0D               	movwf	___lwdiv@counter^0,c
  2395   001880  EF46  F00C         	goto	l1171
  2396   001884                     l1169:
  2397   001884  90D8               	bcf	status,0,c
  2398   001886  3609               	rlcf	___lwdiv@divisor^0,f,c
  2399   001888  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2400   00188A  2A0D               	incf	___lwdiv@counter^0,f,c
  2401   00188C                     l1171:
  2402   00188C  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2403   00188E  EF4B  F00C         	goto	u271
  2404   001892  EF4D  F00C         	goto	u270
  2405   001896                     u271:
  2406   001896  EF42  F00C         	goto	l1169
  2407   00189A                     u270:
  2408   00189A                     l1173:
  2409   00189A  90D8               	bcf	status,0,c
  2410   00189C  360B               	rlcf	___lwdiv@quotient^0,f,c
  2411   00189E  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2412   0018A0  5009               	movf	___lwdiv@divisor^0,w,c
  2413   0018A2  5C07               	subwf	___lwdiv@dividend^0,w,c
  2414   0018A4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2415   0018A6  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2416   0018A8  A0D8               	btfss	status,0,c
  2417   0018AA  EF59  F00C         	goto	u281
  2418   0018AE  EF5B  F00C         	goto	u280
  2419   0018B2                     u281:
  2420   0018B2  EF60  F00C         	goto	l1181
  2421   0018B6                     u280:
  2422   0018B6  5009               	movf	___lwdiv@divisor^0,w,c
  2423   0018B8  5E07               	subwf	___lwdiv@dividend^0,f,c
  2424   0018BA  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2425   0018BC  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2426   0018BE  800B               	bsf	___lwdiv@quotient^0,0,c
  2427   0018C0                     l1181:
  2428   0018C0  90D8               	bcf	status,0,c
  2429   0018C2  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2430   0018C4  3209               	rrcf	___lwdiv@divisor^0,f,c
  2431   0018C6  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2432   0018C8  EF4D  F00C         	goto	l1173
  2433   0018CC                     l659:
  2434   0018CC  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2435   0018D0  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2436   0018D4  0012               	return		;funcret
  2437   0018D6                     __end_of___lwdiv:
  2438                           	callstack 0
  2439                           
  2440                           	psect	smallconst
  2441   000E00                     __psmallconst:
  2442                           	callstack 0
  2443   000E00  00                 	db	0
  2444   000E01  00                 	db	0	; dummy byte at the end
  2445   000000                     
  2446                           	psect	rparam
  2447   000000                     
  2448                           	psect	config
  2449                           
  2450                           ;Config register CONFIG1L @ 0x300000
  2451                           ;	External Oscillator mode Selection bits
  2452                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2453                           ;	Power-up default value for COSC bits
  2454                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2455   300000                     	org	3145728
  2456   300000  AA                 	db	170
  2457                           
  2458                           ;Config register CONFIG1H @ 0x300001
  2459                           ;	unspecified, using default values
  2460                           ;	Clock Out Enable bit
  2461                           ;	CLKOUTEN = 0x1, unprogrammed default
  2462                           ;	Clock Switch Enable bit
  2463                           ;	CSWEN = 0x1, unprogrammed default
  2464                           ;	Fail-Safe Clock Monitor Enable bit
  2465                           ;	FCMEN = 0x1, unprogrammed default
  2466   300001                     	org	3145729
  2467   300001  FF                 	db	255
  2468                           
  2469                           ;Config register CONFIG3L @ 0x300004
  2470                           ;	WDT Period Select bits
  2471                           ;	WDTCPS = 0x1F, unprogrammed default
  2472                           ;	WDT operating mode
  2473                           ;	WDTE = OFF, WDT Disabled
  2474   300004                     	org	3145732
  2475   300004  9F                 	db	159
  2476                           
  2477                           ;Config register CONFIG3H @ 0x300005
  2478                           ;	unspecified, using default values
  2479                           ;	WDT Window Select bits
  2480                           ;	WDTCWS = 0x7, unprogrammed default
  2481                           ;	WDT input clock selector
  2482                           ;	WDTCCS = 0x7, unprogrammed default
  2483   300005                     	org	3145733
  2484   300005  FF                 	db	255
  2485                           tosu	equ	0xFFF
  2486                           tosh	equ	0xFFE
  2487                           tosl	equ	0xFFD
  2488                           stkptr	equ	0xFFC
  2489                           pclatu	equ	0xFFB
  2490                           pclath	equ	0xFFA
  2491                           pcl	equ	0xFF9
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           indf0	equ	0xFEF
  2499                           postinc0	equ	0xFEE
  2500                           postdec0	equ	0xFED
  2501                           preinc0	equ	0xFEC
  2502                           plusw0	equ	0xFEB
  2503                           fsr0h	equ	0xFEA
  2504                           fsr0l	equ	0xFE9
  2505                           wreg	equ	0xFE8
  2506                           indf1	equ	0xFE7
  2507                           postinc1	equ	0xFE6
  2508                           postdec1	equ	0xFE5
  2509                           preinc1	equ	0xFE4
  2510                           plusw1	equ	0xFE3
  2511                           fsr1h	equ	0xFE2
  2512                           fsr1l	equ	0xFE1
  2513                           bsr	equ	0xFE0
  2514                           indf2	equ	0xFDF
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           preinc2	equ	0xFDC
  2518                           plusw2	equ	0xFDB
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), main@motorR(COMRAM[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_reverseOneSquare
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   16844
                                             30 COMRAM    28    28      0
                     _fullSpeedAhead
                    _initDCmotorsPWM
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                           12     7      5    3313
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                            12     7      5    3313
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             18 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseOneSquare                                    12     7      5    3357
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                      11     7      4    2901
                                             18 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _reverseOneSquare
     _setMotorPWM
   _stop
     _setMotorPWM
   _turnLeft
     _setMotorPWM
   _turnRight
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     3A      3A       1       61.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhhh      17      0       0      36        0.0%
BITBIGSFRllhhl       6      0       0      37        0.0%
BITBIGSFRllhlhh      1      0       0      38        0.0%
BITBIGSFRllhlhl      3      0       0      39        0.0%
BITBIGSFRllhlhl      1      0       0      40        0.0%
BITBIGSFRllhllh      1      0       0      41        0.0%
BITBIGSFRllhlll     54      0       0      42        0.0%
BITBIGSFRlllh        2      0       0      43        0.0%
BITBIGSFRllllh      6C      0       0      44        0.0%
BITBIGSFRlllllh     2B      0       0      45        0.0%
BITBIGSFRlllllh     11      0       0      46        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllllll      A      0       0      48        0.0%
BITBIGSFRllllll     7A      0       0      49        0.0%
ABS                  0      0       0      50        0.0%
BIGRAM             DE9      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Feb 28 16:52:14 2024

                             l33 13AC                               l90 1860                               l97 1610  
            ___wmul@multiplicand 0003                 main@turnDuration 0024                              l102 16C0  
                            l110 11FE                              l105 16FE                              l122 1330  
                            l114 126A                              l131 10B4                              l116 128E  
                            l133 10D8                              l119 1302                              l127 1048  
                            l144 1784                              l136 114C                              l153 0E82  
                            l162 0F86                              l139 117A                              l148 17D0  
                            l165 0FC4                              l157 0EEE                              l159 0F12  
                            l168 18FA                              l666 18D4                              l659 18CC  
                            u300 1594                              u301 1590                              u310 1222  
                            u311 121E                              u320 124A                              u400 1170  
                            u321 1246                              u401 116C                              u410 17A8  
                            u330 128E                              u411 17A4                              u331 128A  
                            u260 187C                              u420 17D0                              u340 12A2  
                            u500 13BA                              u261 1878                              u421 17CC  
                            u341 129E                              u501 13B6                              u270 189A  
                            u430 1660                              u350 1326                              u271 1896  
                            u431 165C                              u351 1322                              u280 18B6  
                            u440 16E4                              u360 106C                              u281 18B2  
                            u441 16E0                              u361 1068                              u290 14D8  
                            u450 0EA6                              u370 1094                              u291 14D4  
                            u451 0EA2                              u371 1090                              u460 0ECE  
                            u380 10D8                              u461 0ECA                              u381 10D4  
                            u517 13C4                              u470 0F12                              u390 10EC  
                            u471 0F0E                              u607 11F0                              u391 10E8  
                            u527 13F4                              u480 0F26                              u481 0F22  
                            u617 125C                              u537 1424                              u490 0FAA  
                            u491 0FA6                              u627 12F4                              u547 1450  
                            u637 16B2                              u557 1478                              u647 0E74  
                            u567 14A8                              u657 0EE0                              u577 103A  
                            u667 0F78                              u587 10A6                              u677 1776  
                            u597 113E                              wreg 0FE8                             l1201 17D2  
                           l1211 183A                             l1203 17E2                             l1221 1854  
                           l1213 183C                             l1205 1808                             l1301 10F0  
                           l1223 185E                             l1215 1846                             l1207 180C  
                           l1231 11CE                             l1311 1148                             l1303 111C  
                           l1321 1728                             l1217 1848                             l1209 1830  
                           l1401 0F82                             l1241 1222                             l1233 11D6  
                           l1225 117C                             l1313 1170                             l1305 1124  
                           l1171 188C                             l1163 1862                             l1331 1780  
                           l1323 1754                             l1219 1852                             l1403 0FAA  
                           l1251 1294                             l1235 11DE                             l1243 1226  
                           l1227 1196                             l1307 112C                             l1411 1332  
                           l1181 18C0                             l1173 189A                             l1165 186A  
                           l1157 18D6                             l1333 17A8                             l1325 175C  
                           l1317 1700                             l1261 12E2                             l1245 124A  
                           l1237 11EA                             l1229 11A2                             l1309 1138  
                           l1421 1352                             l1413 133E                             l1183 18C6  
                           l1175 18A0                             l1167 187C                             l1159 18F2  
                           l1191 1538                             l1327 1764                             l1335 17AC  
                           l1319 171C                             l1407 0FB4                             l1351 16AC  
                           l1343 1664                             l1263 12EE                             l1255 12A6  
                           l1247 1256                             l1239 11FA                             l1271 0FC6  
                           l1431 136E                             l1423 135A                             l1415 1342  
                           l1177 18B6                             l1169 1884                             l1193 153C  
                           l1185 14BE                             l1329 1770                             l1361 0E02  
                           l1353 16BC                             l1345 1690                             l1337 1612  
                           l1265 12FE                             l1257 12D2                             l1249 1266  
                           l1281 1028                             l1273 0FE0                             l1441 138E  
                           l1433 1372                             l1425 1362                             l1417 1346  
                           l1409 1332                             l1179 18BE                             l1195 157A  
                           l1187 14D8                             l1371 0E62                             l1363 0E1A  
                           l1355 16E4                             l1347 1698                             l1339 1652  
                           l1267 1326                             l1259 12DA                             l1291 1094  
                           l1283 1034                             l1275 0FEC                             l1451 13A2  
                           l1443 1392                             l1435 137A                             l1427 1366  
                           l1419 134A                             l1197 1594                             l1189 1526  
                           l1381 0ECE                             l1373 0E6E                             l1365 0E26  
                           l1349 16A0                             l1293 10A0                             l1285 1044  
                           l1277 1018                             l1461 13EA                             l1453 13A6  
                           l1445 1396                             l1437 1382                             l1429 136A  
                           l1199 15D4                             l1391 0F2A                             l1383 0EDA  
                           l1375 0E7E                             l1367 0E52                             l1359 16EE  
                           l1295 10B0                             l1287 106C                             l1279 1020  
                           l1471 149E                             l1463 141A                             l1455 13A8  
                           l1447 139A                             l1439 138A                             l1393 0F56  
                           l1385 0EEA                             l1377 0EA6                             l1369 0E5A  
                           l1297 10DE                             l1289 1070                             l1465 1432  
                           l1457 13BA                             l1449 139E                             l1395 0F5E  
                           l1387 0F18                             l1379 0EAA                             l1467 145E  
                           l1459 13D2                             l1397 0F66                             l1469 146E  
                           l1399 0F72                             _T2PR 0FBC                             _main 1332  
                           fsr1h 0FE2                             fsr2h 0FDA                             indf1 0FE7  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
                           _stop 1612                             prodh 0FF4                             prodl 0FF3  
                           start 0000              main@reverseDuration 0021                     ___param_bank 0000  
                          ?_main 0001                            ?_stop 0013                  __end_of___lwdiv 18D6  
                          stop@i 0019                            status 0FD8                     main@turnRamp 0025  
                __initialization 18FC                     __end_of_main 14BE                     __end_of_stop 1700  
                         ??_main 001F                           ??_stop 0016                    __activetblptr 0000  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                           _RE2PPS 0E74  
                         _RC7PPS 0E69                           _RE4PPS 0E76                           _RG6PPS 0E88  
                   _CCPTMRS0bits 0FAD                           ___wmul 18D6                        ??___lwdiv 000B  
                         isa$std 0001                     __mediumconst 0000                           stop@mL 0013  
                         stop@mR 0014                ??_initDCmotorsPWM 0003                 __end_of_turnLeft 1332  
                     __accesstop 0060          __end_of__initialization 18FC                  fullSpeedAhead@i 001A  
                  main@turnSpeed 0023                    ___rparam_used 0001                   __pcstackCOMRAM 0001  
               _reverseOneSquare 0E02                     _T2CLKCONbits 0FBF                          ?___wmul 0001  
     fullSpeedAhead@straightRamp 0016            turnRight@turnDuration 0016                          __Hparam 0000  
                        __Lparam 0000                          ___lwdiv 1862                     __psmallconst 0E00  
                        __pcinit 18FC                          __ramtop 0E00                        ?_turnLeft 0013  
                        __ptext0 1332                          __ptext1 0FC6                          __ptext2 117C  
                        __ptext3 1612                          __ptext4 0E02                          __ptext5 17D2  
                        __ptext6 1700                          __ptext7 14BE                          __ptext8 18D6  
                        __ptext9 1862                        _T2CONbits 0FBD                        _T2HLTbits 0FBE  
           end_of_initialization 18FC                reverseOneSquare@i 001B                          postdec2 0FDD  
                        postinc2 0FDE                  _initDCmotorsPWM 17D2                       ??_turnLeft 0018  
                      _PORTFbits 0F8E               setMotorPWM@negDuty 0012                __end_of_turnRight 117C  
             setMotorPWM@posDuty 0011                        _TRISCbits 0F83                        _TRISEbits 0F85  
                      _TRISFbits 0F86                        _TRISGbits 0F87                 fullSpeedAhead@mL 0013  
               fullSpeedAhead@mR 0014         __end_of_reverseOneSquare 0FC6                    stop@cur_power 001B  
                    _CCP1CONbits 0FAB                      _CCP2CONbits 0FA7                      _CCP3CONbits 0F26  
                    _CCP4CONbits 0F22                       main@motorL 0031                       main@motorR 0027  
                 _fullSpeedAhead 1700             turnLeft@turnDuration 0016                   __end_of___wmul 18FC  
            start_initialization 18FC          __end_of_initDCmotorsPWM 1862           __end_of_fullSpeedAhead 17D2  
             turnRight@cur_power 001D                         ??___wmul 0005     reverseOneSquare@straightRamp 0017  
              turnLeft@cur_power 001D                 stop@straightRamp 0015                 ___lwdiv@dividend 0007  
                ?_fullSpeedAhead 0013               turnRight@turnSpeed 0015                         ?___lwdiv 0007  
                    __smallconst 0E00                turnLeft@turnSpeed 0015                    ??_setMotorPWM 000F  
               ___lwdiv@quotient 000B         initDCmotorsPWM@PWMperiod 0001                   ___wmul@product 0005  
                       _LATCbits 0F7B                         _LATEbits 0F7D                         _LATGbits 0F7F  
                    turnRight@mL 0013                      turnRight@mR 0014                 ?_initDCmotorsPWM 0001  
    fullSpeedAhead@straightSpeed 0015                ___wmul@multiplier 0001                     setMotorPWM@m 000E  
                      _turnRight 0FC6                ?_reverseOneSquare 0013              __end_of_setMotorPWM 1612  
reverseOneSquare@reverseDuration 0016               ??_reverseOneSquare 0018                         __Hrparam 0000  
                       __Lrparam 0000                       _ANSELFbits 0EB4    reverseOneSquare@straightSpeed 0015  
                ___lwdiv@divisor 0009                  ___lwdiv@counter 000D                turnRight@turnRamp 0017  
                     ?_turnRight 0013                 turnLeft@turnRamp 0017                       turnLeft@mL 0013  
                     turnLeft@mR 0014                       turnRight@i 001B                         isa$xinst 0000  
                       _turnLeft 117C          fullSpeedAhead@cur_power 001C        reverseOneSquare@cur_power 001D  
             reverseOneSquare@mL 0013               reverseOneSquare@mR 0014                      _setMotorPWM 14BE  
               ??_fullSpeedAhead 0017                        turnLeft@i 001B                main@straightSpeed 0022  
                    ??_turnRight 0018                 main@straightRamp 0026  
