

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 05 17:36:32 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Generated 21/07/2023 GMT
    70                           ; 
    71                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TRISCbits	set	3971
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _SP4BRGL	set	3813
   107   000000                     _TX4STAbits	set	3816
   108   000000                     _BAUD4CONbits	set	3817
   109   000000                     _TX4REG	set	3812
   110   000000                     _TRISBbits	set	3970
   111   000000                     _TRISAbits	set	3969
   112   000000                     _TRISEbits	set	3973
   113   000000                     _TRISGbits	set	3975
   114   000000                     _LATFbits	set	3966
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISHbits	set	3976
   117   000000                     _TRISDbits	set	3972
   118   000000                     _LATEbits	set	3965
   119   000000                     _LATGbits	set	3967
   120   000000                     _LATHbits	set	3968
   121   000000                     _SSP2CON2bits	set	3802
   122   000000                     _RX4PPS	set	3605
   123   000000                     _SSP2CLKPPS	set	3612
   124   000000                     _SSP2DATPPS	set	3613
   125   000000                     _ANSELDbits	set	3751
   126   000000                     _SSP2ADD	set	3798
   127   000000                     _SSP2CON1bits	set	3801
   128   000000                     _CCPR4H	set	3873
   129   000000                     _CCPR3H	set	3877
   130   000000                     _CCPR2H	set	4006
   131   000000                     _CCPR1H	set	4010
   132   000000                     _CCP1CONbits	set	4011
   133   000000                     _CCPTMRS0bits	set	4013
   134   000000                     _T2PR	set	4028
   135   000000                     _T2CONbits	set	4029
   136   000000                     _INTCONbits	set	4082
   137   000000                     _CCP2CONbits	set	4007
   138   000000                     _CCP3CONbits	set	3878
   139   000000                     _ADREFbits	set	3928
   140   000000                     _LATAbits	set	3961
   141   000000                     _LATDbits	set	3964
   142   000000                     _PORTFbits	set	3982
   143   000000                     _CCP4CONbits	set	3874
   144   000000                     _LATCbits	set	3963
   145   000000                     _RC4REG	set	3811
   146   000000                     _SSP2CON2	set	3802
   147   000000                     _SSP2STAT	set	3800
   148   000000                     _ANSELFbits	set	3764
   149   000000                     _SSP2BUF	set	3797
   150   000000                     _IPR0bits	set	3615
   151   000000                     _PIE0bits	set	3625
   152   000000                     _RD5PPS	set	3695
   153   000000                     _RE2PPS	set	3700
   154   000000                     _ANSELBbits	set	3738
   155   000000                     _RD6PPS	set	3696
   156   000000                     _PIE4bits	set	3629
   157   000000                     _PIR0bits	set	3635
   158   000000                     _PIR4bits	set	3639
   159   000000                     _RC0PPS	set	3682
   160   000000                     _RC7PPS	set	3689
   161   000000                     _ADPCH	set	3935
   162   000000                     _ADRESH	set	3940
   163   000000                     _ADCON0bits	set	3936
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _T2CLKCONbits	set	4031
   167   000000                     _T2HLTbits	set	4030
   168                           
   169                           	psect	smallconst
   170   000E00                     __psmallconst:
   171                           	callstack 0
   172   000E00  00                 	db	0
   173   000E01                     STR_1:
   174   000E01  72                 	db	114	;'r'
   175   000E02  3D                 	db	61	;'='
   176   000E03  25                 	db	37
   177   000E04  64                 	db	100	;'d'
   178   000E05  20                 	db	32
   179   000E06  67                 	db	103	;'g'
   180   000E07  3D                 	db	61	;'='
   181   000E08  25                 	db	37
   182   000E09  64                 	db	100	;'d'
   183   000E0A  20                 	db	32
   184   000E0B  62                 	db	98	;'b'
   185   000E0C  3D                 	db	61	;'='
   186   000E0D  25                 	db	37
   187   000E0E  64                 	db	100	;'d'
   188   000E0F  20                 	db	32
   189   000E10  63                 	db	99	;'c'
   190   000E11  3D                 	db	61	;'='
   191   000E12  25                 	db	37
   192   000E13  64                 	db	100	;'d'
   193   000E14  20                 	db	32
   194   000E15  20                 	db	32
   195   000E16  20                 	db	32
   196   000E17  6E                 	db	110	;'n'
   197   000E18  3A                 	db	58	;':'
   198   000E19  20                 	db	32
   199   000E1A  72                 	db	114	;'r'
   200   000E1B  3D                 	db	61	;'='
   201   000E1C  25                 	db	37
   202   000E1D  64                 	db	100	;'d'
   203   000E1E  20                 	db	32
   204   000E1F  67                 	db	103	;'g'
   205   000E20  3D                 	db	61	;'='
   206   000E21  25                 	db	37
   207   000E22  64                 	db	100	;'d'
   208   000E23  20                 	db	32
   209   000E24  62                 	db	98	;'b'
   210   000E25  3D                 	db	61	;'='
   211   000E26  25                 	db	37
   212   000E27  64                 	db	100	;'d'
   213   000E28  20                 	db	32
   214   000E29  20                 	db	32
   215   000E2A  63                 	db	99	;'c'
   216   000E2B  6F                 	db	111	;'o'
   217   000E2C  6C                 	db	108	;'l'
   218   000E2D  6F                 	db	111	;'o'
   219   000E2E  72                 	db	114	;'r'
   220   000E2F  3A                 	db	58	;':'
   221   000E30  20                 	db	32
   222   000E31  25                 	db	37
   223   000E32  64                 	db	100	;'d'
   224   000E33  20                 	db	32
   225   000E34  0D                 	db	13
   226   000E35  0A                 	db	10
   227   000E36  00                 	db	0
   228   000E37  00                 	db	0	; dummy byte at the end
   229   000000                     
   230                           ; #config settings
   231                           
   232                           	psect	cinit
   233   00286A                     __pcinit:
   234                           	callstack 0
   235   00286A                     start_initialization:
   236                           	callstack 0
   237   00286A                     __initialization:
   238                           	callstack 0
   239                           
   240                           ; Clear objects allocated to BANK1 (60 bytes)
   241   00286A  EE01  F000         	lfsr	0,__pbssBANK1
   242   00286E  0E3C               	movlw	60
   243   002870                     clear_0:
   244   002870  6AEE               	clrf	postinc0,c
   245   002872  06E8               	decf	wreg,f,c
   246   002874  E1FD               	bnz	clear_0
   247                           
   248                           ; Clear objects allocated to BANK0 (72 bytes)
   249   002876  EE00  F0B5         	lfsr	0,__pbssBANK0
   250   00287A  0E48               	movlw	72
   251   00287C                     clear_1:
   252   00287C  6AEE               	clrf	postinc0,c
   253   00287E  06E8               	decf	wreg,f,c
   254   002880  E1FD               	bnz	clear_1
   255                           
   256                           ; Clear objects allocated to COMRAM (29 bytes)
   257   002882  EE00  F03D         	lfsr	0,__pbssCOMRAM
   258   002886  0E1D               	movlw	29
   259   002888                     clear_2:
   260   002888  6AEE               	clrf	postinc0,c
   261   00288A  06E8               	decf	wreg,f,c
   262   00288C  E1FD               	bnz	clear_2
   263   00288E                     end_of_initialization:
   264                           	callstack 0
   265   00288E                     __end_of__initialization:
   266                           	callstack 0
   267   00288E  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   268   002890  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   269   002892  0E00               	movlw	low (__Lmediumconst shr (0+16))
   270   002894  6EF8               	movwf	tblptru,c
   271   002896  0100               	movlb	0
   272   002898  EFD9  F008         	goto	_main	;jump to C main() function
   273                           
   274                           	psect	bssCOMRAM
   275   00003D                     __pbssCOMRAM:
   276                           	callstack 0
   277   00003D                     _EUSART4RXbuf:
   278                           	callstack 0
   279   00003D                     	ds	20
   280   000051                     _width:
   281                           	callstack 0
   282   000051                     	ds	2
   283   000053                     _prec:
   284                           	callstack 0
   285   000053                     	ds	2
   286   000055                     _flags:
   287                           	callstack 0
   288   000055                     	ds	1
   289   000056                     _TxBufReadCnt:
   290                           	callstack 0
   291   000056                     	ds	1
   292   000057                     _TxBufWriteCnt:
   293                           	callstack 0
   294   000057                     	ds	1
   295   000058                     _RxBufReadCnt:
   296                           	callstack 0
   297   000058                     	ds	1
   298   000059                     _RxBufWriteCnt:
   299                           	callstack 0
   300   000059                     	ds	1
   301                           
   302                           	psect	bssBANK0
   303   0000B5                     __pbssBANK0:
   304                           	callstack 0
   305   0000B5                     	ds	40
   306   0000DD                     _dbuf:
   307                           	callstack 0
   308   0000DD                     	ds	32
   309                           
   310                           	psect	bssBANK1
   311   000100                     __pbssBANK1:
   312                           	callstack 0
   313   000100                     _EUSART4TXbuf:
   314                           	callstack 0
   315   000100                     	ds	60
   316                           
   317                           	psect	cstackBANK0
   318   000060                     __pcstackBANK0:
   319                           	callstack 0
   320   000060                     ??_main:
   321                           
   322                           ; 1 bytes @ 0x0
   323   000060                     	ds	2
   324   000062                     main@buf:
   325                           	callstack 0
   326                           
   327                           ; 40 bytes @ 0x2
   328   000062                     	ds	40
   329   00008A                     main@straightSpeed:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x2A
   333   00008A                     	ds	1
   334   00008B                     main@straightRamp:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0x2B
   338   00008B                     	ds	1
   339   00008C                     main@reverseDuration:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0x2C
   343   00008C                     	ds	1
   344   00008D                     main@color:
   345                           	callstack 0
   346                           
   347                           ; 1 bytes @ 0x2D
   348   00008D                     	ds	1
   349   00008E                     main@turnSpeed:
   350                           	callstack 0
   351                           
   352                           ; 1 bytes @ 0x2E
   353   00008E                     	ds	1
   354   00008F                     main@turnRamp:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x2F
   358   00008F                     	ds	1
   359   000090                     main@turnDuration:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x30
   363   000090                     	ds	1
   364   000091                     main@RGBC_n:
   365                           	callstack 0
   366                           
   367                           ; 8 bytes @ 0x31
   368   000091                     	ds	8
   369   000099                     main@RGBC:
   370                           	callstack 0
   371                           
   372                           ; 8 bytes @ 0x39
   373   000099                     	ds	8
   374   0000A1                     main@motorL:
   375                           	callstack 0
   376                           
   377                           ; 10 bytes @ 0x41
   378   0000A1                     	ds	10
   379   0000AB                     main@motorR:
   380                           	callstack 0
   381                           
   382                           ; 10 bytes @ 0x4B
   383   0000AB                     	ds	10
   384                           
   385                           	psect	cstackCOMRAM
   386   000001                     __pcstackCOMRAM:
   387                           	callstack 0
   388   000001                     ??_getCharFromTxBuf:
   389   000001                     ??i2_I2C_2_Master_Idle:
   390   000001                     putCharToRxBuf@byte:
   391                           	callstack 0
   392   000001                     
   393                           ; 1 bytes @ 0x0
   394   000001                     	ds	1
   395   000002                     i2I2C_2_Master_Write@data_byte:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0x1
   399   000002                     	ds	1
   400   000003                     ??_HighISR:
   401                           
   402                           ; 1 bytes @ 0x2
   403   000003                     	ds	2
   404   000005                     ??_I2C_2_Master_Idle:
   405   000005                     ?___wmul:
   406                           	callstack 0
   407   000005                     ?___awdiv:
   408                           	callstack 0
   409   000005                     ?___awmod:
   410                           	callstack 0
   411   000005                     ?___lmul:
   412                           	callstack 0
   413   000005                     white_Light@state:
   414                           	callstack 0
   415   000005                     putCharToTxBuf@byte:
   416                           	callstack 0
   417   000005                     ADC_getval@tmpval:
   418                           	callstack 0
   419   000005                     initDCmotorsPWM@PWMperiod:
   420                           	callstack 0
   421   000005                     ___wmul@multiplier:
   422                           	callstack 0
   423   000005                     ___awdiv@dividend:
   424                           	callstack 0
   425   000005                     ___awmod@dividend:
   426                           	callstack 0
   427   000005                     fputc@c:
   428                           	callstack 0
   429   000005                     ___lmul@multiplier:
   430                           	callstack 0
   431   000005                     color_detect@RGBC_n:
   432                           	callstack 0
   433                           
   434                           ; 8 bytes @ 0x4
   435   000005                     	ds	1
   436   000006                     ??_I2C_2_Master_Read:
   437   000006                     I2C_2_Master_Write@data_byte:
   438                           	callstack 0
   439   000006                     TxBufferedString@string:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x5
   443   000006                     	ds	1
   444   000007                     color_writetoaddr@value:
   445                           	callstack 0
   446   000007                     I2C_2_Master_Read@ack:
   447                           	callstack 0
   448   000007                     fputc@fp:
   449                           	callstack 0
   450   000007                     ___wmul@multiplicand:
   451                           	callstack 0
   452   000007                     ___awdiv@divisor:
   453                           	callstack 0
   454   000007                     ___awmod@divisor:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x6
   458   000007                     	ds	1
   459   000008                     ??_fputc:
   460   000008                     color_writetoaddr@address:
   461                           	callstack 0
   462   000008                     I2C_2_Master_Read@tmp:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0x7
   466   000008                     	ds	1
   467   000009                     ??_color_click_init:
   468   000009                     color_read@RGBC:
   469                           	callstack 0
   470   000009                     ___awdiv@counter:
   471                           	callstack 0
   472   000009                     ___awmod@counter:
   473                           	callstack 0
   474   000009                     ___wmul@product:
   475                           	callstack 0
   476   000009                     ___lmul@multiplicand:
   477                           	callstack 0
   478                           
   479                           ; 4 bytes @ 0x8
   480   000009                     	ds	1
   481   00000A                     ??_color_read:
   482   00000A                     ___awdiv@sign:
   483                           	callstack 0
   484   00000A                     ___awmod@sign:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x9
   488   00000A                     	ds	1
   489   00000B                     ?_abs:
   490                           	callstack 0
   491   00000B                     ?___lwdiv:
   492                           	callstack 0
   493   00000B                     ___awdiv@quotient:
   494                           	callstack 0
   495   00000B                     ___lwdiv@dividend:
   496                           	callstack 0
   497   00000B                     abs@a:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0xA
   501   00000B                     	ds	2
   502   00000D                     ??_abs:
   503   00000D                     color_detect@color:
   504                           	callstack 0
   505   00000D                     batteryLevel@batteryVoltage:
   506                           	callstack 0
   507   00000D                     ___lwdiv@divisor:
   508                           	callstack 0
   509   00000D                     ___lmul@product:
   510                           	callstack 0
   511                           
   512                           ; 4 bytes @ 0xC
   513   00000D                     	ds	1
   514   00000E                     batteryLevel@batteryQuarter:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0xD
   518   00000E                     	ds	1
   519   00000F                     vfpfcnvrt@fp:
   520                           	callstack 0
   521   00000F                     ___lwdiv@quotient:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0xE
   525   00000F                     	ds	1
   526   000010                     vfpfcnvrt@fmt:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0xF
   530   000010                     	ds	1
   531   000011                     ?___aldiv:
   532                           	callstack 0
   533   000011                     ___lwdiv@counter:
   534                           	callstack 0
   535   000011                     vfpfcnvrt@ap:
   536                           	callstack 0
   537   000011                     ___aldiv@dividend:
   538                           	callstack 0
   539                           
   540                           ; 4 bytes @ 0x10
   541   000011                     	ds	1
   542   000012                     ??_vfpfcnvrt:
   543   000012                     setMotorPWM@m:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x11
   547   000012                     	ds	1
   548   000013                     ??_setMotorPWM:
   549   000013                     vfpfcnvrt@done:
   550                           	callstack 0
   551                           
   552                           ; 1 bytes @ 0x12
   553   000013                     	ds	1
   554   000014                     vfpfcnvrt@cp:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x13
   558   000014                     	ds	1
   559   000015                     setMotorPWM@posDuty:
   560                           	callstack 0
   561   000015                     ___aldiv@divisor:
   562                           	callstack 0
   563   000015                     vfpfcnvrt@convarg:
   564                           	callstack 0
   565                           
   566                           ; 4 bytes @ 0x14
   567   000015                     	ds	1
   568   000016                     setMotorPWM@negDuty:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x15
   572   000016                     	ds	1
   573   000017                     turnLeft@mL:
   574                           	callstack 0
   575   000017                     turnRight@mL:
   576                           	callstack 0
   577   000017                     fullSpeedAhead@mL:
   578                           	callstack 0
   579   000017                     reverseOneSquare@mL:
   580                           	callstack 0
   581                           
   582                           ; 1 bytes @ 0x16
   583   000017                     	ds	1
   584   000018                     turnLeft@mR:
   585                           	callstack 0
   586   000018                     turnRight@mR:
   587                           	callstack 0
   588   000018                     fullSpeedAhead@mR:
   589                           	callstack 0
   590   000018                     reverseOneSquare@mR:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x17
   594   000018                     	ds	1
   595   000019                     turnLeft@turnSpeed:
   596                           	callstack 0
   597   000019                     turnRight@turnSpeed:
   598                           	callstack 0
   599   000019                     fullSpeedAhead@straightSpeed:
   600                           	callstack 0
   601   000019                     reverseOneSquare@straightSpeed:
   602                           	callstack 0
   603   000019                     ___aldiv@counter:
   604                           	callstack 0
   605   000019                     vfpfcnvrt@c:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x18
   609   000019                     	ds	1
   610   00001A                     ?_vfprintf:
   611                           	callstack 0
   612   00001A                     turnLeft@turnDuration:
   613                           	callstack 0
   614   00001A                     turnRight@turnDuration:
   615                           	callstack 0
   616   00001A                     fullSpeedAhead@straightRamp:
   617                           	callstack 0
   618   00001A                     reverseOneSquare@reverseDuration:
   619                           	callstack 0
   620   00001A                     ___aldiv@sign:
   621                           	callstack 0
   622   00001A                     vfprintf@fp:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x19
   626   00001A                     	ds	1
   627   00001B                     ??_fullSpeedAhead:
   628   00001B                     turnLeft@turnRamp:
   629                           	callstack 0
   630   00001B                     turnRight@turnRamp:
   631                           	callstack 0
   632   00001B                     reverseOneSquare@straightRamp:
   633                           	callstack 0
   634   00001B                     vfprintf@fmt:
   635                           	callstack 0
   636   00001B                     ___aldiv@quotient:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x1A
   640   00001B                     	ds	1
   641   00001C                     ??_turnRight:
   642   00001C                     ??_turnLeft:
   643   00001C                     ??_reverseOneSquare:
   644   00001C                     vfprintf@ap:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0x1B
   648   00001C                     	ds	1
   649   00001D                     vfprintf@cfmt:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x1C
   653   00001D                     	ds	1
   654   00001E                     ?_sprintf:
   655                           	callstack 0
   656   00001E                     sprintf@s:
   657                           	callstack 0
   658   00001E                     fullSpeedAhead@i:
   659                           	callstack 0
   660                           
   661                           ; 2 bytes @ 0x1D
   662   00001E                     	ds	1
   663   00001F                     sprintf@fmt:
   664                           	callstack 0
   665   00001F                     turnLeft@i:
   666                           	callstack 0
   667   00001F                     turnRight@i:
   668                           	callstack 0
   669   00001F                     reverseOneSquare@i:
   670                           	callstack 0
   671   00001F                     color_normalise@RGBC:
   672                           	callstack 0
   673                           
   674                           ; 8 bytes @ 0x1E
   675   00001F                     	ds	1
   676   000020                     fullSpeedAhead@cur_power:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x1F
   680   000020                     	ds	1
   681   000021                     turnLeft@cur_power:
   682                           	callstack 0
   683   000021                     turnRight@cur_power:
   684                           	callstack 0
   685   000021                     reverseOneSquare@cur_power:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x20
   689   000021                     	ds	2
   690   000023                     move@mL:
   691                           	callstack 0
   692   000023                     calibration@mL:
   693                           	callstack 0
   694                           
   695                           ; 1 bytes @ 0x22
   696   000023                     	ds	1
   697   000024                     move@mR:
   698                           	callstack 0
   699   000024                     calibration@mR:
   700                           	callstack 0
   701                           
   702                           ; 1 bytes @ 0x23
   703   000024                     	ds	1
   704   000025                     move@color:
   705                           	callstack 0
   706   000025                     calibration@turnSpeed:
   707                           	callstack 0
   708                           
   709                           ; 1 bytes @ 0x24
   710   000025                     	ds	1
   711   000026                     move@straightSpeed:
   712                           	callstack 0
   713   000026                     calibration@turnDuration:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x25
   717   000026                     	ds	1
   718   000027                     color_normalise@RGBC_n:
   719                           	callstack 0
   720   000027                     move@reverseDuration:
   721                           	callstack 0
   722   000027                     calibration@turnRamp:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x26
   726   000027                     	ds	1
   727   000028                     ??_calibration:
   728   000028                     ??_color_normalise:
   729   000028                     move@straightRamp:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x27
   733   000028                     	ds	1
   734   000029                     move@turnSpeed:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x28
   738   000029                     	ds	1
   739   00002A                     move@turnDuration:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x29
   743   00002A                     	ds	1
   744   00002B                     move@turnRamp:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x2A
   748   00002B                     	ds	1
   749   00002C                     ??_move:
   750                           
   751                           ; 1 bytes @ 0x2B
   752   00002C                     	ds	4
   753   000030                     sprintf@ap:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x2F
   757   000030                     	ds	1
   758   000031                     sprintf@f:
   759                           	callstack 0
   760                           
   761                           ; 12 bytes @ 0x30
   762   000031                     	ds	12
   763                           
   764 ;;
   765 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   766 ;;
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 23 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  buf            40    2[BANK0 ] unsigned char [40]
   774 ;;  motorR         10   75[BANK0 ] struct DC_motor
   775 ;;  motorL         10   65[BANK0 ] struct DC_motor
   776 ;;  RGBC            8   57[BANK0 ] struct RGBC_val
   777 ;;  RGBC_n          8   49[BANK0 ] struct RGBC_val
   778 ;;  PWMcycle        2    0        unsigned int 
   779 ;;  turnDuration    1   48[BANK0 ] unsigned char 
   780 ;;  turnRamp        1   47[BANK0 ] unsigned char 
   781 ;;  turnSpeed       1   46[BANK0 ] unsigned char 
   782 ;;  color           1   45[BANK0 ] unsigned char 
   783 ;;  reverseDurat    1   44[BANK0 ] unsigned char 
   784 ;;  straightRamp    1   43[BANK0 ] unsigned char 
   785 ;;  straightSpee    1   42[BANK0 ] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;      Locals:         0      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   798 ;;      Totals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   799 ;;Total ram usage:       85 bytes
   800 ;; Hardware stack levels required when called: 8
   801 ;; This function calls:
   802 ;;		_Buggy_init
   803 ;;		_Interrupts_init
   804 ;;		_TxBufferedString
   805 ;;		_batteryLevel
   806 ;;		_calibration
   807 ;;		_color_click_init
   808 ;;		_color_detect
   809 ;;		_color_normalise
   810 ;;		_color_read
   811 ;;		_initDCmotorsPWM
   812 ;;		_initUSART4
   813 ;;		_move
   814 ;;		_sendTxBuf
   815 ;;		_sprintf
   816 ;;		_white_Light
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text0
   823   0011B2                     __ptext0:
   824                           	callstack 0
   825   0011B2                     _main:
   826                           	callstack 23
   827   0011B2                     
   828                           ;main.c: 24:     Buggy_init();
   829   0011B2  ECE6  F013         	call	_Buggy_init	;wreg free
   830   0011B6                     
   831                           ;main.c: 25:     color_click_init();
   832   0011B6  EC1B  F013         	call	_color_click_init	;wreg free
   833   0011BA                     
   834                           ;main.c: 26:     initUSART4();
   835   0011BA  ECFE  F014         	call	_initUSART4	;wreg free
   836   0011BE                     
   837                           ;main.c: 27:     Interrupts_init();
   838   0011BE  EC4B  F015         	call	_Interrupts_init	;wreg free
   839   0011C2                     
   840                           ;main.c: 29:     initDCmotorsPWM(PWMcycle);
   841   0011C2  0E00               	movlw	0
   842   0011C4  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   843   0011C6  0EC7               	movlw	199
   844   0011C8  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   845   0011CA  EC2A  F012         	call	_initDCmotorsPWM	;wreg free
   846   0011CE                     
   847                           ;main.c: 30:     struct RGBC_val RGBC, RGBC_n;;main.c: 31:     unsigned char color;;main
      +                          .c: 32:     char buf[40] = {0};
   848   0011CE  EE20  F062         	lfsr	2,main@buf
   849   0011D2  0E27               	movlw	39
   850   0011D4                     u2131:
   851   0011D4  6ADE               	clrf	postinc2,c
   852   0011D6  06E8               	decf	wreg,f,c
   853   0011D8  E2FD               	bc	u2131
   854   0011DA                     
   855                           ;main.c: 34:     struct DC_motor motorL, motorR;;main.c: 36:     motorL.power=0;
   856   0011DA  0E00               	movlw	0
   857   0011DC  0100               	movlb	0	; () banked
   858   0011DE  6FA1               	movwf	main@motorL& (0+255),b
   859   0011E0                     
   860                           ; BSR set to: 0
   861                           ;main.c: 37:     motorL.direction=1;
   862   0011E0  0E01               	movlw	1
   863   0011E2  6FA2               	movwf	(main@motorL+1)& (0+255),b
   864   0011E4                     
   865                           ; BSR set to: 0
   866                           ;main.c: 38:     motorL.brakemode=1;
   867   0011E4  0E01               	movlw	1
   868   0011E6  6FA3               	movwf	(main@motorL+2)& (0+255),b
   869   0011E8                     
   870                           ; BSR set to: 0
   871                           ;main.c: 39:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   872   0011E8  0EAA               	movlw	170
   873   0011EA  6FA6               	movwf	(main@motorL+5)& (0+255),b
   874   0011EC  0E0F               	movlw	15
   875   0011EE  6FA7               	movwf	(main@motorL+6)& (0+255),b
   876   0011F0                     
   877                           ; BSR set to: 0
   878                           ;main.c: 40:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   879   0011F0  0EA6               	movlw	166
   880   0011F2  6FA8               	movwf	(main@motorL+7)& (0+255),b
   881   0011F4  0E0F               	movlw	15
   882   0011F6  6FA9               	movwf	(main@motorL+8)& (0+255),b
   883   0011F8                     
   884                           ; BSR set to: 0
   885                           ;main.c: 41:     motorL.PWMperiod=PWMcycle;
   886   0011F8  0E00               	movlw	0
   887   0011FA  6FA5               	movwf	(main@motorL+4)& (0+255),b
   888   0011FC  0EC7               	movlw	199
   889   0011FE  6FA4               	movwf	(main@motorL+3)& (0+255),b
   890   001200                     
   891                           ; BSR set to: 0
   892                           ;main.c: 42:     motorL.compensation=3;
   893   001200  0E03               	movlw	3
   894   001202  6FAA               	movwf	(main@motorL+9)& (0+255),b
   895   001204                     
   896                           ; BSR set to: 0
   897                           ;main.c: 44:     motorR.power=0;
   898   001204  0E00               	movlw	0
   899   001206  6FAB               	movwf	main@motorR& (0+255),b
   900   001208                     
   901                           ; BSR set to: 0
   902                           ;main.c: 45:     motorR.direction=1;
   903   001208  0E01               	movlw	1
   904   00120A  6FAC               	movwf	(main@motorR+1)& (0+255),b
   905   00120C                     
   906                           ; BSR set to: 0
   907                           ;main.c: 46:     motorR.brakemode=1;
   908   00120C  0E01               	movlw	1
   909   00120E  6FAD               	movwf	(main@motorR+2)& (0+255),b
   910   001210                     
   911                           ; BSR set to: 0
   912                           ;main.c: 47:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   913   001210  0E25               	movlw	37
   914   001212  6FB0               	movwf	(main@motorR+5)& (0+255),b
   915   001214  0E0F               	movlw	15
   916   001216  6FB1               	movwf	(main@motorR+6)& (0+255),b
   917   001218                     
   918                           ; BSR set to: 0
   919                           ;main.c: 48:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   920   001218  0E21               	movlw	33
   921   00121A  6FB2               	movwf	(main@motorR+7)& (0+255),b
   922   00121C  0E0F               	movlw	15
   923   00121E  6FB3               	movwf	(main@motorR+8)& (0+255),b
   924   001220                     
   925                           ; BSR set to: 0
   926                           ;main.c: 49:     motorR.PWMperiod=PWMcycle;
   927   001220  0E00               	movlw	0
   928   001222  6FAF               	movwf	(main@motorR+4)& (0+255),b
   929   001224  0EC7               	movlw	199
   930   001226  6FAE               	movwf	(main@motorR+3)& (0+255),b
   931   001228                     
   932                           ; BSR set to: 0
   933                           ;main.c: 50:     motorR.compensation=0;
   934   001228  0E00               	movlw	0
   935   00122A  6FB4               	movwf	(main@motorR+9)& (0+255),b
   936   00122C                     
   937                           ; BSR set to: 0
   938                           ;main.c: 53:     char straightSpeed=60;
   939   00122C  0E3C               	movlw	60
   940   00122E  6F8A               	movwf	main@straightSpeed& (0+255),b
   941   001230                     
   942                           ; BSR set to: 0
   943                           ;main.c: 54:     unsigned char straightRamp=2;
   944   001230  0E02               	movlw	2
   945   001232  6F8B               	movwf	main@straightRamp& (0+255),b
   946   001234                     
   947                           ; BSR set to: 0
   948                           ;main.c: 56:     unsigned char reverseDuration=10;
   949   001234  0E0A               	movlw	10
   950   001236  6F8C               	movwf	main@reverseDuration& (0+255),b
   951   001238                     
   952                           ; BSR set to: 0
   953                           ;main.c: 58:     char turnSpeed=21;
   954   001238  0E15               	movlw	21
   955   00123A  6F8E               	movwf	main@turnSpeed& (0+255),b
   956   00123C                     
   957                           ; BSR set to: 0
   958                           ;main.c: 59:     unsigned char turnDuration=10;
   959   00123C  0E0A               	movlw	10
   960   00123E  6F90               	movwf	main@turnDuration& (0+255),b
   961   001240                     
   962                           ; BSR set to: 0
   963                           ;main.c: 60:     unsigned char turnRamp=4;
   964   001240  0E04               	movlw	4
   965   001242  6F8F               	movwf	main@turnRamp& (0+255),b
   966   001244                     
   967                           ; BSR set to: 0
   968                           ;main.c: 63:     batteryLevel();
   969   001244  EC7F  F013         	call	_batteryLevel	;wreg free
   970   001248                     l65:
   971   001248  B48E               	btfsc	142,2,c	;volatile
   972   00124A  EF29  F009         	goto	u2141
   973   00124E  EF2B  F009         	goto	u2140
   974   001252                     u2141:
   975   001252  EF24  F009         	goto	l65
   976   001256                     u2140:
   977   001256                     
   978                           ;main.c: 67:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   979   001256  9680               	bcf	128,3,c	;volatile
   980   001258  9E7C               	bcf	124,7,c	;volatile
   981                           
   982                           ;main.c: 69:     LATHbits.LATH1=LATDbits.LATD3=1;
   983   00125A  867C               	bsf	124,3,c	;volatile
   984   00125C  8280               	bsf	128,1,c	;volatile
   985   00125E                     
   986                           ;main.c: 70:     _delay((unsigned long)((500)*(64000000/4000.0)));
   987   00125E  0E29               	movlw	41
   988   001260  0100               	movlb	0	; () banked
   989   001262  6F61               	movwf	(??_main+1)& (0+255),b
   990   001264  0E96               	movlw	150
   991   001266  6F60               	movwf	??_main& (0+255),b
   992   001268  0E7F               	movlw	127
   993   00126A                     u2187:
   994   00126A  2EE8               	decfsz	wreg,f,c
   995   00126C  D7FE               	bra	u2187
   996   00126E  2F60               	decfsz	??_main& (0+255),f,b
   997   001270  D7FC               	bra	u2187
   998   001272  2F61               	decfsz	(??_main+1)& (0+255),f,b
   999   001274  D7FA               	bra	u2187
  1000   001276                     
  1001                           ;main.c: 72:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
  1002   001276  0EA1               	movlw	low main@motorL
  1003   001278  6E23               	movwf	calibration@mL^0,c
  1004   00127A  0EAB               	movlw	low main@motorR
  1005   00127C  6E24               	movwf	calibration@mR^0,c
  1006   00127E  0E15               	movlw	21
  1007   001280  6E25               	movwf	calibration@turnSpeed^0,c
  1008   001282  0E90               	movlw	low main@turnDuration
  1009   001284  6E26               	movwf	calibration@turnDuration^0,c
  1010   001286  0E04               	movlw	4
  1011   001288  6E27               	movwf	calibration@turnRamp^0,c
  1012   00128A  EC29  F00E         	call	_calibration	;wreg free
  1013   00128E                     
  1014                           ;main.c: 75:     white_Light(1);
  1015   00128E  0E01               	movlw	1
  1016   001290  ECDC  F014         	call	_white_Light
  1017   001294                     l69:
  1018   001294  B48E               	btfsc	142,2,c	;volatile
  1019   001296  EF4F  F009         	goto	u2151
  1020   00129A  EF51  F009         	goto	u2150
  1021   00129E                     u2151:
  1022   00129E  EF4A  F009         	goto	l69
  1023   0012A2                     u2150:
  1024   0012A2                     
  1025                           ;main.c: 80:         color_read(&RGBC);
  1026   0012A2  0E99               	movlw	low main@RGBC
  1027   0012A4  6E09               	movwf	color_read@RGBC^0,c
  1028   0012A6  ECCA  F009         	call	_color_read	;wreg free
  1029   0012AA                     
  1030                           ;main.c: 81:         color_normalise(RGBC, &RGBC_n);
  1031   0012AA  EE20  F099         	lfsr	2,main@RGBC
  1032   0012AE  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1033   0012B2  0E07               	movlw	7
  1034   0012B4                     u2161:
  1035   0012B4  CFDB FFEB          	movff	plusw2,plusw0
  1036   0012B8  06E8               	decf	wreg,f,c
  1037   0012BA  E2FC               	bc	u2161
  1038   0012BC  0E91               	movlw	low main@RGBC_n
  1039   0012BE  6E27               	movwf	color_normalise@RGBC_n^0,c
  1040   0012C0  EC8B  F00F         	call	_color_normalise	;wreg free
  1041   0012C4                     
  1042                           ;main.c: 82:         color = color_detect(RGBC_n);
  1043   0012C4  EE20  F091         	lfsr	2,main@RGBC_n
  1044   0012C8  EE00  F005         	lfsr	0,color_detect@RGBC_n
  1045   0012CC  0E07               	movlw	7
  1046   0012CE                     u2171:
  1047   0012CE  CFDB FFEB          	movff	plusw2,plusw0
  1048   0012D2  06E8               	decf	wreg,f,c
  1049   0012D4  E2FC               	bc	u2171
  1050   0012D6  EC72  F012         	call	_color_detect	;wreg free
  1051   0012DA  0100               	movlb	0	; () banked
  1052   0012DC  6F8D               	movwf	main@color& (0+255),b
  1053   0012DE                     
  1054                           ; BSR set to: 0
  1055                           ;main.c: 83:         move(&motorL, &motorR, color, straightSpeed, reverseDuration, strai
      +                          ghtRamp, turnSpeed, turnDuration, turnRamp);
  1056   0012DE  0EA1               	movlw	low main@motorL
  1057   0012E0  6E23               	movwf	move@mL^0,c
  1058   0012E2  0EAB               	movlw	low main@motorR
  1059   0012E4  6E24               	movwf	move@mR^0,c
  1060   0012E6  C08D  F025         	movff	main@color,move@color
  1061   0012EA  C08A  F026         	movff	main@straightSpeed,move@straightSpeed
  1062   0012EE  C08C  F027         	movff	main@reverseDuration,move@reverseDuration
  1063   0012F2  C08B  F028         	movff	main@straightRamp,move@straightRamp
  1064   0012F6  C08E  F029         	movff	main@turnSpeed,move@turnSpeed
  1065   0012FA  C090  F02A         	movff	main@turnDuration,move@turnDuration
  1066   0012FE  C08F  F02B         	movff	main@turnRamp,move@turnRamp
  1067   001302  EC1C  F007         	call	_move	;wreg free
  1068   001306                     
  1069                           ;main.c: 85:         sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d  color: %d \r\
      +                          n",RGBC.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B,color);
  1070   001306  0E62               	movlw	low main@buf
  1071   001308  6E1E               	movwf	sprintf@s^0,c
  1072   00130A  0E01               	movlw	low STR_1
  1073   00130C  6E1F               	movwf	sprintf@fmt^0,c
  1074   00130E  C099  F020         	movff	main@RGBC,?_sprintf+2
  1075   001312  C09A  F021         	movff	main@RGBC+1,?_sprintf+3
  1076   001316  C09B  F022         	movff	main@RGBC+2,?_sprintf+4
  1077   00131A  C09C  F023         	movff	main@RGBC+3,?_sprintf+5
  1078   00131E  C09D  F024         	movff	main@RGBC+4,?_sprintf+6
  1079   001322  C09E  F025         	movff	main@RGBC+5,?_sprintf+7
  1080   001326  C09F  F026         	movff	main@RGBC+6,?_sprintf+8
  1081   00132A  C0A0  F027         	movff	main@RGBC+7,?_sprintf+9
  1082   00132E  C091  F028         	movff	main@RGBC_n,?_sprintf+10
  1083   001332  C092  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1084   001336  C093  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1085   00133A  C094  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1086   00133E  C095  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1087   001342  C096  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1088   001346  C08D  F02E         	movff	main@color,?_sprintf+16
  1089   00134A  6A2F               	clrf	(?_sprintf+17)^0,c
  1090   00134C  EC01  F014         	call	_sprintf	;wreg free
  1091   001350                     
  1092                           ;main.c: 86:         sendTxBuf();
  1093   001350  EC0D  F015         	call	_sendTxBuf	;wreg free
  1094   001354                     
  1095                           ;main.c: 87:         TxBufferedString(buf);
  1096   001354  0E62               	movlw	low main@buf
  1097   001356  6E06               	movwf	TxBufferedString@string^0,c
  1098   001358  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1099   00135A  EC4E  F013         	call	_TxBufferedString	;wreg free
  1100   00135E                     
  1101                           ;main.c: 88:         sendTxBuf();
  1102   00135E  EC0D  F015         	call	_sendTxBuf	;wreg free
  1103   001362                     
  1104                           ;main.c: 89:         TxBufferedString("");
  1105   001362  0E36               	movlw	low (STR_1+53)
  1106   001364  6E06               	movwf	TxBufferedString@string^0,c
  1107   001366  5006               	movf	TxBufferedString@string^0,w,c
  1108   001368  A4D8               	btfss	status,2,c
  1109   00136A  0E0E               	movlw	high __smallconst
  1110   00136C  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1111   00136E  EC4E  F013         	call	_TxBufferedString	;wreg free
  1112   001372                     
  1113                           ;main.c: 90:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1114   001372  0E19               	movlw	25
  1115   001374  0100               	movlb	0	; () banked
  1116   001376  6F61               	movwf	(??_main+1)& (0+255),b
  1117   001378  0E5A               	movlw	90
  1118   00137A  6F60               	movwf	??_main& (0+255),b
  1119   00137C  0EB1               	movlw	177
  1120   00137E                     u2197:
  1121   00137E  2EE8               	decfsz	wreg,f,c
  1122   001380  D7FE               	bra	u2197
  1123   001382  2F60               	decfsz	??_main& (0+255),f,b
  1124   001384  D7FC               	bra	u2197
  1125   001386  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1126   001388  D7FA               	bra	u2197
  1127   00138A  D000               	nop2	
  1128   00138C  EF4A  F009         	goto	l69
  1129   001390  EF46  F000         	goto	start
  1130   001394                     __end_of_main:
  1131                           	callstack 0
  1132                           
  1133 ;; *************** function _white_Light *****************
  1134 ;; Defined at:
  1135 ;;		line 40 in file "color.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  state           1    wreg     unsigned char 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  state           1    4[COMRAM] unsigned char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1153 ;;Total ram usage:        1 bytes
  1154 ;; Hardware stack levels used: 1
  1155 ;; Hardware stack levels required when called: 3
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164   0029B8                     __ptext1:
  1165                           	callstack 0
  1166   0029B8                     _white_Light:
  1167                           	callstack 27
  1168                           
  1169                           ;incstack = 0
  1170                           ;white_Light@state stored from wreg
  1171   0029B8  6E05               	movwf	white_Light@state^0,c
  1172   0029BA                     
  1173                           ;color.c: 40: void white_Light(char state);color.c: 41: {;color.c: 42:     if (state){
  1174   0029BA  5005               	movf	white_Light@state^0,w,c
  1175   0029BC  B4D8               	btfsc	status,2,c
  1176   0029BE  EFE3  F014         	goto	u1851
  1177   0029C2  EFE5  F014         	goto	u1850
  1178   0029C6                     u1851:
  1179   0029C6  EFEA  F014         	goto	l105
  1180   0029CA                     u1850:
  1181   0029CA                     
  1182                           ;color.c: 43:         LATGbits.LATG0 = 1;
  1183   0029CA  807F               	bsf	127,0,c	;volatile
  1184                           
  1185                           ;color.c: 44:         LATEbits.LATE7 = 1;
  1186   0029CC  8E7D               	bsf	125,7,c	;volatile
  1187                           
  1188                           ;color.c: 45:         LATAbits.LATA3 = 1;
  1189   0029CE  8679               	bsf	121,3,c	;volatile
  1190                           
  1191                           ;color.c: 46:     }
  1192   0029D0  EFED  F014         	goto	l107
  1193   0029D4                     l105:
  1194                           
  1195                           ;color.c: 48:         LATGbits.LATG0 = 0;
  1196   0029D4  907F               	bcf	127,0,c	;volatile
  1197                           
  1198                           ;color.c: 49:         LATEbits.LATE7 = 0;
  1199   0029D6  9E7D               	bcf	125,7,c	;volatile
  1200                           
  1201                           ;color.c: 50:         LATAbits.LATA3 = 0;
  1202   0029D8  9679               	bcf	121,3,c	;volatile
  1203   0029DA                     l107:
  1204   0029DA  0012               	return		;funcret
  1205   0029DC                     __end_of_white_Light:
  1206                           	callstack 0
  1207                           
  1208 ;; *************** function _sprintf *****************
  1209 ;; Defined at:
  1210 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  s               1   29[COMRAM] PTR unsigned char 
  1213 ;;		 -> main@buf(40), 
  1214 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1215 ;;		 -> STR_1(54), 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  f              12   48[COMRAM] struct _IO_FILE
  1218 ;;  ret             2    0        int 
  1219 ;;  ap              1   47[COMRAM] PTR void [1]
  1220 ;;		 -> ?_sprintf(2), 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  2   29[COMRAM] int 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1230 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1231 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1233 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1234 ;;Total ram usage:       31 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 7
  1237 ;; This function calls:
  1238 ;;		_vfprintf
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text2
  1245   002802                     __ptext2:
  1246                           	callstack 0
  1247   002802                     _sprintf:
  1248                           	callstack 23
  1249   002802  0E20               	movlw	low (?_sprintf+2)
  1250   002804  6E30               	movwf	sprintf@ap^0,c
  1251   002806  C01E  F031         	movff	sprintf@s,sprintf@f
  1252   00280A  0E00               	movlw	0
  1253   00280C  6E35               	movwf	(sprintf@f+4)^0,c
  1254   00280E  0E00               	movlw	0
  1255   002810  6E34               	movwf	(sprintf@f+3)^0,c
  1256   002812  0E00               	movlw	0
  1257   002814  6E3C               	movwf	(sprintf@f+11)^0,c
  1258   002816  0E00               	movlw	0
  1259   002818  6E3B               	movwf	(sprintf@f+10)^0,c
  1260   00281A  0E31               	movlw	low sprintf@f
  1261   00281C  6E1A               	movwf	vfprintf@fp^0,c
  1262   00281E  C01F  F01B         	movff	sprintf@fmt,vfprintf@fmt
  1263   002822  0E30               	movlw	low sprintf@ap
  1264   002824  6E1C               	movwf	vfprintf@ap^0,c
  1265   002826  ECC7  F013         	call	_vfprintf	;wreg free
  1266   00282A  501E               	movf	sprintf@s^0,w,c
  1267   00282C  2434               	addwf	(sprintf@f+3)^0,w,c
  1268   00282E  6ED9               	movwf	fsr2l,c
  1269   002830  6ADA               	clrf	fsr2h,c
  1270   002832  6ADF               	clrf	indf2,c
  1271   002834  0012               	return		;funcret
  1272   002836                     __end_of_sprintf:
  1273                           	callstack 0
  1274                           
  1275 ;; *************** function _vfprintf *****************
  1276 ;; Defined at:
  1277 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  1280 ;;		 -> sprintf@f(12), 
  1281 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1282 ;;		 -> STR_1(54), 
  1283 ;;  ap              1   27[COMRAM] PTR PTR void 
  1284 ;;		 -> sprintf@ap(1), 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  cfmt            1   28[COMRAM] PTR unsigned char 
  1287 ;;		 -> STR_1(54), 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  2   25[COMRAM] int 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1301 ;;Total ram usage:        4 bytes
  1302 ;; Hardware stack levels used: 1
  1303 ;; Hardware stack levels required when called: 6
  1304 ;; This function calls:
  1305 ;;		_vfpfcnvrt
  1306 ;; This function is called by:
  1307 ;;		_sprintf
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text3
  1312   00278E                     __ptext3:
  1313                           	callstack 0
  1314   00278E                     _vfprintf:
  1315                           	callstack 23
  1316   00278E                     
  1317                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1318   00278E  C01B  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  1319                           
  1320                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1321   002792  EFD3  F013         	goto	l2709
  1322   002796                     l2707:
  1323                           
  1324                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1325   002796  C01A  F00F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1326   00279A  0E1D               	movlw	low vfprintf@cfmt
  1327   00279C  6E10               	movwf	vfpfcnvrt@fmt^0,c
  1328   00279E  C01C  F011         	movff	vfprintf@ap,vfpfcnvrt@ap
  1329   0027A2  EC97  F00B         	call	_vfpfcnvrt	;wreg free
  1330   0027A6                     l2709:
  1331                           
  1332                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1333   0027A6  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1334   0027AA                     	if	1	;There is more than 1 active tblptr byte
  1335   0027AA  0E0E               	movlw	high __smallconst
  1336   0027AC  6EF7               	movwf	tblptrh,c
  1337   0027AE                     	endif
  1338   0027AE                     	if	0	;tblptru may be non-zero
  1339   0027AE                     	endif
  1340   0027AE                     	if	0	;tblptru may be non-zero
  1341   0027AE                     	endif
  1342   0027AE  0008               	tblrd		*
  1343   0027B0  50F5               	movf	tablat,w,c
  1344   0027B2  0900               	iorlw	0
  1345   0027B4  A4D8               	btfss	status,2,c
  1346   0027B6  EFDF  F013         	goto	u1741
  1347   0027BA  EFE1  F013         	goto	u1740
  1348   0027BE                     u1741:
  1349   0027BE  EFCB  F013         	goto	l2707
  1350   0027C2                     u1740:
  1351   0027C2                     
  1352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1353   0027C2  0E00               	movlw	0
  1354   0027C4  6E1B               	movwf	(?_vfprintf+1)^0,c
  1355   0027C6  0E00               	movlw	0
  1356   0027C8  6E1A               	movwf	?_vfprintf^0,c
  1357   0027CA  0012               	return		;funcret
  1358   0027CC                     __end_of_vfprintf:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _vfpfcnvrt *****************
  1362 ;; Defined at:
  1363 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1366 ;;		 -> sprintf@f(12), 
  1367 ;;  fmt             1   15[COMRAM] PTR PTR unsigned char 
  1368 ;;		 -> vfprintf@cfmt(1), 
  1369 ;;  ap              1   16[COMRAM] PTR PTR void 
  1370 ;;		 -> sprintf@ap(1), 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  convarg         4   20[COMRAM] struct .
  1373 ;;  c               1   24[COMRAM] unsigned char 
  1374 ;;  cp              1   19[COMRAM] PTR unsigned char 
  1375 ;;		 -> STR_1(54), 
  1376 ;;  done            1   18[COMRAM] _Bool 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1386 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1390 ;;Total ram usage:       11 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 5
  1393 ;; This function calls:
  1394 ;;		___awdiv
  1395 ;;		___awmod
  1396 ;;		_abs
  1397 ;;		_fputc
  1398 ;; This function is called by:
  1399 ;;		_vfprintf
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text4
  1404   00172E                     __ptext4:
  1405                           	callstack 0
  1406   00172E                     _vfpfcnvrt:
  1407                           	callstack 23
  1408   00172E                     
  1409                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1410   00172E  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1411   001730  6ED9               	movwf	fsr2l,c
  1412   001732  6ADA               	clrf	fsr2h,c
  1413   001734  CFDF FFF6          	movff	indf2,tblptrl
  1414   001738                     	if	1	;There is more than 1 active tblptr byte
  1415   001738  0E0E               	movlw	high __smallconst
  1416   00173A  6EF7               	movwf	tblptrh,c
  1417   00173C                     	endif
  1418   00173C                     	if	0	;tblptru may be non-zero
  1419   00173C                     	endif
  1420   00173C                     	if	0	;tblptru may be non-zero
  1421   00173C                     	endif
  1422   00173C  0008               	tblrd		*
  1423   00173E  50F5               	movf	tablat,w,c
  1424   001740  0A25               	xorlw	37
  1425   001742  A4D8               	btfss	status,2,c
  1426   001744  EFA6  F00B         	goto	u1331
  1427   001748  EFA8  F00B         	goto	u1330
  1428   00174C                     u1331:
  1429   00174C  EF61  F00C         	goto	l2425
  1430   001750                     u1330:
  1431   001750                     
  1432                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1433   001750  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1434   001752  6ED9               	movwf	fsr2l,c
  1435   001754  6ADA               	clrf	fsr2h,c
  1436   001756  2ADF               	incf	indf2,f,c
  1437   001758                     
  1438                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1439   001758  0E00               	movlw	0
  1440   00175A  6E52               	movwf	(_width+1)^0,c
  1441   00175C  0E00               	movlw	0
  1442   00175E  6E51               	movwf	_width^0,c
  1443   001760  C051  F055         	movff	_width,_flags
  1444   001764                     
  1445                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1446   001764  6853               	setf	_prec^0,c
  1447   001766  6854               	setf	(_prec+1)^0,c
  1448   001768                     
  1449                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1450   001768  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1451   00176A  6ED9               	movwf	fsr2l,c
  1452   00176C  6ADA               	clrf	fsr2h,c
  1453   00176E  50DF               	movf	indf2,w,c
  1454   001770  6E14               	movwf	vfpfcnvrt@cp^0,c
  1455   001772                     
  1456                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1457   001772  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1458   001776                     	if	1	;There is more than 1 active tblptr byte
  1459   001776  0E0E               	movlw	high __smallconst
  1460   001778  6EF7               	movwf	tblptrh,c
  1461   00177A                     	endif
  1462   00177A                     	if	0	;tblptru may be non-zero
  1463   00177A                     	endif
  1464   00177A                     	if	0	;tblptru may be non-zero
  1465   00177A                     	endif
  1466   00177A  0008               	tblrd		*
  1467   00177C  50F5               	movf	tablat,w,c
  1468   00177E  0A64               	xorlw	100
  1469   001780  B4D8               	btfsc	status,2,c
  1470   001782  EFC5  F00B         	goto	u1341
  1471   001786  EFC7  F00B         	goto	u1340
  1472   00178A                     u1341:
  1473   00178A  EFD5  F00B         	goto	l2395
  1474   00178E                     u1340:
  1475   00178E  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1476   001792                     	if	1	;There is more than 1 active tblptr byte
  1477   001792  0E0E               	movlw	high __smallconst
  1478   001794  6EF7               	movwf	tblptrh,c
  1479   001796                     	endif
  1480   001796                     	if	0	;tblptru may be non-zero
  1481   001796                     	endif
  1482   001796                     	if	0	;tblptru may be non-zero
  1483   001796                     	endif
  1484   001796  0008               	tblrd		*
  1485   001798  50F5               	movf	tablat,w,c
  1486   00179A  0A69               	xorlw	105
  1487   00179C  A4D8               	btfss	status,2,c
  1488   00179E  EFD3  F00B         	goto	u1351
  1489   0017A2  EFD5  F00B         	goto	u1350
  1490   0017A6                     u1351:
  1491   0017A6  EF5B  F00C         	goto	l2421
  1492   0017AA                     u1350:
  1493   0017AA                     l2395:
  1494                           
  1495                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1496   0017AA  5011               	movf	vfpfcnvrt@ap^0,w,c
  1497   0017AC  6ED9               	movwf	fsr2l,c
  1498   0017AE  6ADA               	clrf	fsr2h,c
  1499   0017B0  0E02               	movlw	2
  1500   0017B2  26DF               	addwf	indf2,f,c
  1501   0017B4  5CDF               	subwf	indf2,w,c
  1502   0017B6  6ED9               	movwf	fsr2l,c
  1503   0017B8  6ADA               	clrf	fsr2h,c
  1504   0017BA  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg
  1505   0017BE  CFDE F016          	movff	postinc2,vfpfcnvrt@convarg+1
  1506   0017C2                     
  1507                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1508   0017C2  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1509   0017C4  6ED9               	movwf	fsr2l,c
  1510   0017C6  6ADA               	clrf	fsr2h,c
  1511   0017C8  2814               	incf	vfpfcnvrt@cp^0,w,c
  1512   0017CA  6EDF               	movwf	indf2,c
  1513   0017CC                     
  1514                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1515   0017CC  0E20               	movlw	32
  1516   0017CE  6E19               	movwf	vfpfcnvrt@c^0,c
  1517                           
  1518                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1519   0017D0  BE16               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1520   0017D2  EFED  F00B         	goto	u1361
  1521   0017D6  EFF0  F00B         	goto	u1360
  1522   0017DA                     u1361:
  1523   0017DA  0E01               	movlw	1
  1524   0017DC  EFF1  F00B         	goto	u1370
  1525   0017E0                     u1360:
  1526   0017E0  0E00               	movlw	0
  1527   0017E2                     u1370:
  1528   0017E2  6E13               	movwf	vfpfcnvrt@done^0,c
  1529   0017E4                     l2401:
  1530                           
  1531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1532   0017E4  0619               	decf	vfpfcnvrt@c^0,f,c
  1533   0017E6  5019               	movf	vfpfcnvrt@c^0,w,c
  1534   0017E8  0FDD               	addlw	low _dbuf
  1535   0017EA  6ED9               	movwf	fsr2l,c
  1536   0017EC  6ADA               	clrf	fsr2h,c
  1537   0017EE  C015  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1538   0017F2  C016  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1539   0017F6  0E00               	movlw	0
  1540   0017F8  6E08               	movwf	(___awmod@divisor+1)^0,c
  1541   0017FA  0E0A               	movlw	10
  1542   0017FC  6E07               	movwf	___awmod@divisor^0,c
  1543   0017FE  EC7D  F011         	call	___awmod	;wreg free
  1544   001802  C005  F00B         	movff	?___awmod,abs@a
  1545   001806  C006  F00C         	movff	?___awmod+1,abs@a+1
  1546   00180A  EC1B  F014         	call	_abs	;wreg free
  1547   00180E  500B               	movf	?_abs^0,w,c
  1548   001810  0F30               	addlw	48
  1549   001812  6EDF               	movwf	indf2,c
  1550   001814                     
  1551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1552   001814  C015  F005         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1553   001818  C016  F006         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1554   00181C  0E00               	movlw	0
  1555   00181E  6E08               	movwf	(___awdiv@divisor+1)^0,c
  1556   001820  0E0A               	movlw	10
  1557   001822  6E07               	movwf	___awdiv@divisor^0,c
  1558   001824  EC1B  F011         	call	___awdiv	;wreg free
  1559   001828  C005  F015         	movff	?___awdiv,vfpfcnvrt@convarg
  1560   00182C  C006  F016         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1561   001830                     
  1562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1563   001830  5015               	movf	vfpfcnvrt@convarg^0,w,c
  1564   001832  1016               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1565   001834  B4D8               	btfsc	status,2,c
  1566   001836  EF1F  F00C         	goto	u1381
  1567   00183A  EF21  F00C         	goto	u1380
  1568   00183E                     u1381:
  1569   00183E  EF29  F00C         	goto	l2409
  1570   001842                     u1380:
  1571   001842  5019               	movf	vfpfcnvrt@c^0,w,c
  1572   001844  A4D8               	btfss	status,2,c
  1573   001846  EF27  F00C         	goto	u1391
  1574   00184A  EF29  F00C         	goto	u1390
  1575   00184E                     u1391:
  1576   00184E  EFF2  F00B         	goto	l2401
  1577   001852                     u1390:
  1578   001852                     l2409:
  1579                           
  1580                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1581   001852  5019               	movf	vfpfcnvrt@c^0,w,c
  1582   001854  B4D8               	btfsc	status,2,c
  1583   001856  EF2F  F00C         	goto	u1401
  1584   00185A  EF31  F00C         	goto	u1400
  1585   00185E                     u1401:
  1586   00185E  EF50  F00C         	goto	l2419
  1587   001862                     u1400:
  1588   001862  5013               	movf	vfpfcnvrt@done^0,w,c
  1589   001864  B4D8               	btfsc	status,2,c
  1590   001866  EF37  F00C         	goto	u1411
  1591   00186A  EF39  F00C         	goto	u1410
  1592   00186E                     u1411:
  1593   00186E  EF50  F00C         	goto	l2419
  1594   001872                     u1410:
  1595   001872                     
  1596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1597   001872  0619               	decf	vfpfcnvrt@c^0,f,c
  1598   001874  5019               	movf	vfpfcnvrt@c^0,w,c
  1599   001876  0FDD               	addlw	low _dbuf
  1600   001878  6ED9               	movwf	fsr2l,c
  1601   00187A  6ADA               	clrf	fsr2h,c
  1602   00187C  0E2D               	movlw	45
  1603   00187E  6EDF               	movwf	indf2,c
  1604   001880  EF50  F00C         	goto	l2419
  1605   001884                     l2415:
  1606                           
  1607                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1608   001884  5019               	movf	vfpfcnvrt@c^0,w,c
  1609   001886  0FDD               	addlw	low _dbuf
  1610   001888  6ED9               	movwf	fsr2l,c
  1611   00188A  6ADA               	clrf	fsr2h,c
  1612   00188C  50DF               	movf	indf2,w,c
  1613   00188E  6E12               	movwf	??_vfpfcnvrt^0,c
  1614   001890  5012               	movf	??_vfpfcnvrt^0,w,c
  1615   001892  6E05               	movwf	fputc@c^0,c
  1616   001894  6A06               	clrf	(fputc@c+1)^0,c
  1617   001896  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1618   00189A  ECD5  F011         	call	_fputc	;wreg free
  1619   00189E  2A19               	incf	vfpfcnvrt@c^0,f,c
  1620   0018A0                     l2419:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1623   0018A0  0E20               	movlw	32
  1624   0018A2  1819               	xorwf	vfpfcnvrt@c^0,w,c
  1625   0018A4  A4D8               	btfss	status,2,c
  1626   0018A6  EF57  F00C         	goto	u1421
  1627   0018AA  EF59  F00C         	goto	u1420
  1628   0018AE                     u1421:
  1629   0018AE  EF42  F00C         	goto	l2415
  1630   0018B2                     u1420:
  1631   0018B2  EF72  F00C         	goto	l1249
  1632   0018B6                     l2421:
  1633                           
  1634                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1635   0018B6  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1636   0018B8  6ED9               	movwf	fsr2l,c
  1637   0018BA  6ADA               	clrf	fsr2h,c
  1638   0018BC  2ADF               	incf	indf2,f,c
  1639   0018BE  EF72  F00C         	goto	l1249
  1640   0018C2                     l2425:
  1641                           
  1642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1643   0018C2  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1644   0018C4  6ED9               	movwf	fsr2l,c
  1645   0018C6  6ADA               	clrf	fsr2h,c
  1646   0018C8  CFDF FFF6          	movff	indf2,tblptrl
  1647   0018CC                     	if	1	;There is more than 1 active tblptr byte
  1648   0018CC  0E0E               	movlw	high __smallconst
  1649   0018CE  6EF7               	movwf	tblptrh,c
  1650   0018D0                     	endif
  1651   0018D0                     	if	0	;tblptru may be non-zero
  1652   0018D0                     	endif
  1653   0018D0                     	if	0	;tblptru may be non-zero
  1654   0018D0                     	endif
  1655   0018D0  0008               	tblrd		*
  1656   0018D2  50F5               	movf	tablat,w,c
  1657   0018D4  6E05               	movwf	fputc@c^0,c
  1658   0018D6  6A06               	clrf	(fputc@c+1)^0,c
  1659   0018D8  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1660   0018DC  ECD5  F011         	call	_fputc	;wreg free
  1661   0018E0  EF5B  F00C         	goto	l2421
  1662   0018E4                     l1249:
  1663   0018E4  0012               	return		;funcret
  1664   0018E6                     __end_of_vfpfcnvrt:
  1665                           	callstack 0
  1666                           
  1667 ;; *************** function _fputc *****************
  1668 ;; Defined at:
  1669 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  c               2    4[COMRAM] int 
  1672 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  1673 ;;		 -> sprintf@f(12), 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    4[COMRAM] int 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1685 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1687 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1688 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1689 ;;Total ram usage:        8 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; Hardware stack levels required when called: 4
  1692 ;; This function calls:
  1693 ;;		_putch
  1694 ;; This function is called by:
  1695 ;;		_vfpfcnvrt
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text5
  1700   0023AA                     __ptext5:
  1701                           	callstack 0
  1702   0023AA                     _fputc:
  1703                           	callstack 23
  1704   0023AA  5007               	movf	fputc@fp^0,w,c
  1705   0023AC  B4D8               	btfsc	status,2,c
  1706   0023AE  EFDB  F011         	goto	u1261
  1707   0023B2  EFDD  F011         	goto	u1260
  1708   0023B6                     u1261:
  1709   0023B6  EFE5  F011         	goto	l2339
  1710   0023BA                     u1260:
  1711   0023BA  5007               	movf	fputc@fp^0,w,c
  1712   0023BC  A4D8               	btfss	status,2,c
  1713   0023BE  EFE3  F011         	goto	u1271
  1714   0023C2  EFE5  F011         	goto	u1270
  1715   0023C6                     u1271:
  1716   0023C6  EFEA  F011         	goto	l2341
  1717   0023CA                     u1270:
  1718   0023CA                     l2339:
  1719   0023CA  5005               	movf	fputc@c^0,w,c
  1720   0023CC  EC79  F015         	call	_putch
  1721   0023D0  EF29  F012         	goto	l1274
  1722   0023D4                     l2341:
  1723   0023D4  5007               	movf	fputc@fp^0,w,c
  1724   0023D6  6ED9               	movwf	fsr2l,c
  1725   0023D8  6ADA               	clrf	fsr2h,c
  1726   0023DA  0E0A               	movlw	10
  1727   0023DC  26D9               	addwf	fsr2l,f,c
  1728   0023DE  50DE               	movf	postinc2,w,c
  1729   0023E0  10DE               	iorwf	postinc2,w,c
  1730   0023E2  B4D8               	btfsc	status,2,c
  1731   0023E4  EFF6  F011         	goto	u1281
  1732   0023E8  EFF8  F011         	goto	u1280
  1733   0023EC                     u1281:
  1734   0023EC  EF11  F012         	goto	l2345
  1735   0023F0                     u1280:
  1736   0023F0  5007               	movf	fputc@fp^0,w,c
  1737   0023F2  6ED9               	movwf	fsr2l,c
  1738   0023F4  6ADA               	clrf	fsr2h,c
  1739   0023F6  0E0A               	movlw	10
  1740   0023F8  26D9               	addwf	fsr2l,f,c
  1741   0023FA  5007               	movf	fputc@fp^0,w,c
  1742   0023FC  6EE1               	movwf	fsr1l,c
  1743   0023FE  6AE2               	clrf	fsr1h,c
  1744   002400  0E03               	movlw	3
  1745   002402  26E1               	addwf	fsr1l,f,c
  1746   002404  50DE               	movf	postinc2,w,c
  1747   002406  5CE6               	subwf	postinc1,w,c
  1748   002408  50E6               	movf	postinc1,w,c
  1749   00240A  0A80               	xorlw	128
  1750   00240C  6E0C               	movwf	(??_fputc+4)^0,c
  1751   00240E  50DE               	movf	postinc2,w,c
  1752   002410  0A80               	xorlw	128
  1753   002412  580C               	subwfb	(??_fputc+4)^0,w,c
  1754   002414  B0D8               	btfsc	status,0,c
  1755   002416  EF0F  F012         	goto	u1291
  1756   00241A  EF11  F012         	goto	u1290
  1757   00241E                     u1291:
  1758   00241E  EF29  F012         	goto	l1274
  1759   002422                     u1290:
  1760   002422                     l2345:
  1761   002422  5007               	movf	fputc@fp^0,w,c
  1762   002424  6ED9               	movwf	fsr2l,c
  1763   002426  6ADA               	clrf	fsr2h,c
  1764   002428  0E03               	movlw	3
  1765   00242A  26D9               	addwf	fsr2l,f,c
  1766   00242C  50DF               	movf	indf2,w,c
  1767   00242E  6E08               	movwf	??_fputc^0,c
  1768   002430  5007               	movf	fputc@fp^0,w,c
  1769   002432  6ED9               	movwf	fsr2l,c
  1770   002434  6ADA               	clrf	fsr2h,c
  1771   002436  50DF               	movf	indf2,w,c
  1772   002438  2408               	addwf	??_fputc^0,w,c
  1773   00243A  6ED9               	movwf	fsr2l,c
  1774   00243C  6ADA               	clrf	fsr2h,c
  1775   00243E  C005  FFDF         	movff	fputc@c,indf2
  1776   002442  5007               	movf	fputc@fp^0,w,c
  1777   002444  6ED9               	movwf	fsr2l,c
  1778   002446  6ADA               	clrf	fsr2h,c
  1779   002448  0E03               	movlw	3
  1780   00244A  26D9               	addwf	fsr2l,f,c
  1781   00244C  2ADE               	incf	postinc2,f,c
  1782   00244E  0E00               	movlw	0
  1783   002450  22DD               	addwfc	postdec2,f,c
  1784   002452                     l1274:
  1785   002452  0012               	return		;funcret
  1786   002454                     __end_of_fputc:
  1787                           	callstack 0
  1788                           
  1789 ;; *************** function _putch *****************
  1790 ;; Defined at:
  1791 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  c               1    wreg     unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  c               1    0[COMRAM] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used: 1
  1811 ;; Hardware stack levels required when called: 3
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_fputc
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text6
  1820   002AF2                     __ptext6:
  1821                           	callstack 0
  1822   002AF2                     _putch:
  1823                           	callstack 23
  1824   002AF2  0012               	return		;funcret
  1825   002AF4                     __end_of_putch:
  1826                           	callstack 0
  1827                           
  1828 ;; *************** function _abs *****************
  1829 ;; Defined at:
  1830 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  a               2   10[COMRAM] int 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  2   10[COMRAM] int 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1844 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1848 ;;Total ram usage:        4 bytes
  1849 ;; Hardware stack levels used: 1
  1850 ;; Hardware stack levels required when called: 3
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_vfpfcnvrt
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text7
  1859   002836                     __ptext7:
  1860                           	callstack 0
  1861   002836                     _abs:
  1862                           	callstack 24
  1863   002836  BE0C               	btfsc	(abs@a+1)^0,7,c
  1864   002838  EF20  F014         	goto	u1301
  1865   00283C  EF22  F014         	goto	u1300
  1866   002840                     u1301:
  1867   002840  EF28  F014         	goto	l1259
  1868   002844                     u1300:
  1869   002844  C00B  F00B         	movff	abs@a,?_abs
  1870   002848  C00C  F00C         	movff	abs@a+1,?_abs+1
  1871   00284C  EF34  F014         	goto	l1262
  1872   002850                     l1259:
  1873   002850  C00B  F00D         	movff	abs@a,??_abs
  1874   002854  C00C  F00E         	movff	abs@a+1,??_abs+1
  1875   002858  1E0D               	comf	??_abs^0,f,c
  1876   00285A  1E0E               	comf	(??_abs+1)^0,f,c
  1877   00285C  4A0D               	infsnz	??_abs^0,f,c
  1878   00285E  2A0E               	incf	(??_abs+1)^0,f,c
  1879   002860  C00D  F00B         	movff	??_abs,?_abs
  1880   002864  C00E  F00C         	movff	??_abs+1,?_abs+1
  1881   002868                     l1262:
  1882   002868  0012               	return		;funcret
  1883   00286A                     __end_of_abs:
  1884                           	callstack 0
  1885                           
  1886 ;; *************** function ___awmod *****************
  1887 ;; Defined at:
  1888 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  dividend        2    4[COMRAM] int 
  1891 ;;  divisor         2    6[COMRAM] int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  sign            1    9[COMRAM] unsigned char 
  1894 ;;  counter         1    8[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  2    4[COMRAM] int 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;Total ram usage:        6 bytes
  1909 ;; Hardware stack levels used: 1
  1910 ;; Hardware stack levels required when called: 3
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_vfpfcnvrt
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text8
  1919   0022FA                     __ptext8:
  1920                           	callstack 0
  1921   0022FA                     ___awmod:
  1922                           	callstack 24
  1923   0022FA  0E00               	movlw	0
  1924   0022FC  6E0A               	movwf	___awmod@sign^0,c
  1925   0022FE  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  1926   002300  EF86  F011         	goto	u1170
  1927   002304  EF84  F011         	goto	u1171
  1928   002308                     u1171:
  1929   002308  EF8C  F011         	goto	l2285
  1930   00230C                     u1170:
  1931   00230C  6C05               	negf	___awmod@dividend^0,c
  1932   00230E  1E06               	comf	(___awmod@dividend+1)^0,f,c
  1933   002310  B0D8               	btfsc	status,0,c
  1934   002312  2A06               	incf	(___awmod@dividend+1)^0,f,c
  1935   002314  0E01               	movlw	1
  1936   002316  6E0A               	movwf	___awmod@sign^0,c
  1937   002318                     l2285:
  1938   002318  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  1939   00231A  EF93  F011         	goto	u1180
  1940   00231E  EF91  F011         	goto	u1181
  1941   002322                     u1181:
  1942   002322  EF97  F011         	goto	l2289
  1943   002326                     u1180:
  1944   002326  6C07               	negf	___awmod@divisor^0,c
  1945   002328  1E08               	comf	(___awmod@divisor+1)^0,f,c
  1946   00232A  B0D8               	btfsc	status,0,c
  1947   00232C  2A08               	incf	(___awmod@divisor+1)^0,f,c
  1948   00232E                     l2289:
  1949   00232E  5007               	movf	___awmod@divisor^0,w,c
  1950   002330  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  1951   002332  B4D8               	btfsc	status,2,c
  1952   002334  EF9E  F011         	goto	u1191
  1953   002338  EFA0  F011         	goto	u1190
  1954   00233C                     u1191:
  1955   00233C  EFC4  F011         	goto	l2305
  1956   002340                     u1190:
  1957   002340  0E01               	movlw	1
  1958   002342  6E09               	movwf	___awmod@counter^0,c
  1959   002344  EFA8  F011         	goto	l2295
  1960   002348                     l2293:
  1961   002348  90D8               	bcf	status,0,c
  1962   00234A  3607               	rlcf	___awmod@divisor^0,f,c
  1963   00234C  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  1964   00234E  2A09               	incf	___awmod@counter^0,f,c
  1965   002350                     l2295:
  1966   002350  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  1967   002352  EFAD  F011         	goto	u1201
  1968   002356  EFAF  F011         	goto	u1200
  1969   00235A                     u1201:
  1970   00235A  EFA4  F011         	goto	l2293
  1971   00235E                     u1200:
  1972   00235E                     l2297:
  1973   00235E  5007               	movf	___awmod@divisor^0,w,c
  1974   002360  5C05               	subwf	___awmod@dividend^0,w,c
  1975   002362  5008               	movf	(___awmod@divisor+1)^0,w,c
  1976   002364  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  1977   002366  A0D8               	btfss	status,0,c
  1978   002368  EFB8  F011         	goto	u1211
  1979   00236C  EFBA  F011         	goto	u1210
  1980   002370                     u1211:
  1981   002370  EFBE  F011         	goto	l2301
  1982   002374                     u1210:
  1983   002374  5007               	movf	___awmod@divisor^0,w,c
  1984   002376  5E05               	subwf	___awmod@dividend^0,f,c
  1985   002378  5008               	movf	(___awmod@divisor+1)^0,w,c
  1986   00237A  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  1987   00237C                     l2301:
  1988   00237C  90D8               	bcf	status,0,c
  1989   00237E  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  1990   002380  3207               	rrcf	___awmod@divisor^0,f,c
  1991   002382  2E09               	decfsz	___awmod@counter^0,f,c
  1992   002384  EFAF  F011         	goto	l2297
  1993   002388                     l2305:
  1994   002388  500A               	movf	___awmod@sign^0,w,c
  1995   00238A  B4D8               	btfsc	status,2,c
  1996   00238C  EFCA  F011         	goto	u1221
  1997   002390  EFCC  F011         	goto	u1220
  1998   002394                     u1221:
  1999   002394  EFD0  F011         	goto	l2309
  2000   002398                     u1220:
  2001   002398  6C05               	negf	___awmod@dividend^0,c
  2002   00239A  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2003   00239C  B0D8               	btfsc	status,0,c
  2004   00239E  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2005   0023A0                     l2309:
  2006   0023A0  C005  F005         	movff	___awmod@dividend,?___awmod
  2007   0023A4  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2008   0023A8  0012               	return		;funcret
  2009   0023AA                     __end_of___awmod:
  2010                           	callstack 0
  2011                           
  2012 ;; *************** function _sendTxBuf *****************
  2013 ;; Defined at:
  2014 ;;		line 74 in file "serial.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2032 ;;Total ram usage:        0 bytes
  2033 ;; Hardware stack levels used: 1
  2034 ;; Hardware stack levels required when called: 4
  2035 ;; This function calls:
  2036 ;;		_isDataInTxBuf
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text9
  2043   002A1A                     __ptext9:
  2044                           	callstack 0
  2045   002A1A                     _sendTxBuf:
  2046                           	callstack 26
  2047   002A1A                     
  2048                           ;serial.c: 75:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2049   002A1A  EC27  F015         	call	_isDataInTxBuf	;wreg free
  2050   002A1E  0900               	iorlw	0
  2051   002A20  B4D8               	btfsc	status,2,c
  2052   002A22  EF15  F015         	goto	u1971
  2053   002A26  EF17  F015         	goto	u1970
  2054   002A2A                     u1971:
  2055   002A2A  EF19  F015         	goto	l321
  2056   002A2E                     u1970:
  2057   002A2E  010E               	movlb	14	; () banked
  2058   002A30  852D               	bsf	45,2,b	;volatile
  2059   002A32                     l321:
  2060   002A32  0012               	return		;funcret
  2061   002A34                     __end_of_sendTxBuf:
  2062                           	callstack 0
  2063                           
  2064 ;; *************** function _isDataInTxBuf *****************
  2065 ;; Defined at:
  2066 ;;		line 61 in file "serial.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      unsigned char 
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2084 ;;Total ram usage:        0 bytes
  2085 ;; Hardware stack levels used: 1
  2086 ;; Hardware stack levels required when called: 3
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_sendTxBuf
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text10
  2095   002A4E                     __ptext10:
  2096                           	callstack 0
  2097   002A4E                     _isDataInTxBuf:
  2098                           	callstack 26
  2099   002A4E                     
  2100                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  2101   002A4E  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  2102   002A50  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2103   002A52  A4D8               	btfss	status,2,c
  2104   002A54  EF2E  F015         	goto	u1451
  2105   002A58  EF31  F015         	goto	u1450
  2106   002A5C                     u1451:
  2107   002A5C  0E01               	movlw	1
  2108   002A5E  EF32  F015         	goto	u1460
  2109   002A62                     u1450:
  2110   002A62  0E00               	movlw	0
  2111   002A64                     u1460:
  2112   002A64  0012               	return		;funcret
  2113   002A66                     __end_of_isDataInTxBuf:
  2114                           	callstack 0
  2115                           
  2116 ;; *************** function _move *****************
  2117 ;; Defined at:
  2118 ;;		line 87 in file "dc_motor.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  2121 ;;		 -> main@motorL(10), 
  2122 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  2123 ;;		 -> main@motorR(10), 
  2124 ;;  color           1   36[COMRAM] unsigned char 
  2125 ;;  straightSpee    1   37[COMRAM] unsigned char 
  2126 ;;  reverseDurat    1   38[COMRAM] unsigned char 
  2127 ;;  straightRamp    1   39[COMRAM] unsigned char 
  2128 ;;  turnSpeed       1   40[COMRAM] unsigned char 
  2129 ;;  turnDuration    1   41[COMRAM] unsigned char 
  2130 ;;  turnRamp        1   42[COMRAM] unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2142 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2145 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;Total ram usage:       11 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 6
  2149 ;; This function calls:
  2150 ;;		_fullSpeedAhead
  2151 ;;		_reverseOneSquare
  2152 ;;		_turnLeft
  2153 ;;		_turnRight
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text11
  2160   000E38                     __ptext11:
  2161                           	callstack 0
  2162   000E38                     _move:
  2163                           	callstack 24
  2164   000E38                     
  2165                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  2166   000E38  0425               	decf	move@color^0,w,c
  2167   000E3A  A4D8               	btfss	status,2,c
  2168   000E3C  EF22  F007         	goto	u1901
  2169   000E40  EF24  F007         	goto	u1900
  2170   000E44                     u1901:
  2171   000E44  EF60  F007         	goto	l2889
  2172   000E48                     u1900:
  2173   000E48                     
  2174                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2175   000E48  C023  F017         	movff	move@mL,turnRight@mL
  2176   000E4C  C024  F018         	movff	move@mR,turnRight@mR
  2177   000E50  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2178   000E54  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2179   000E58  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2180   000E5C  EC73  F00C         	call	_turnRight	;wreg free
  2181   000E60                     
  2182                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2183   000E60  0E05               	movlw	5
  2184   000E62  6E2D               	movwf	(??_move+1)^0,c
  2185   000E64  0E0F               	movlw	15
  2186   000E66  6E2C               	movwf	??_move^0,c
  2187   000E68  0EF1               	movlw	241
  2188   000E6A                     u2207:
  2189   000E6A  2EE8               	decfsz	wreg,f,c
  2190   000E6C  D7FE               	bra	u2207
  2191   000E6E  2E2C               	decfsz	??_move^0,f,c
  2192   000E70  D7FC               	bra	u2207
  2193   000E72  2E2D               	decfsz	(??_move+1)^0,f,c
  2194   000E74  D7FA               	bra	u2207
  2195   000E76  0000               	nop	
  2196   000E78                     
  2197                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2198   000E78  C023  F017         	movff	move@mL,turnRight@mL
  2199   000E7C  C024  F018         	movff	move@mR,turnRight@mR
  2200   000E80  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2201   000E84  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2202   000E88  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2203   000E8C  EC73  F00C         	call	_turnRight	;wreg free
  2204                           
  2205                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2206   000E90  0E05               	movlw	5
  2207   000E92  6E2D               	movwf	(??_move+1)^0,c
  2208   000E94  0E0F               	movlw	15
  2209   000E96  6E2C               	movwf	??_move^0,c
  2210   000E98  0EF1               	movlw	241
  2211   000E9A                     u2217:
  2212   000E9A  2EE8               	decfsz	wreg,f,c
  2213   000E9C  D7FE               	bra	u2217
  2214   000E9E  2E2C               	decfsz	??_move^0,f,c
  2215   000EA0  D7FC               	bra	u2217
  2216   000EA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2217   000EA4  D7FA               	bra	u2217
  2218   000EA6  0000               	nop	
  2219   000EA8                     l2887:
  2220                           
  2221                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2222   000EA8  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2223   000EAC  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2224   000EB0  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2225   000EB4  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2226   000EB8  ECB2  F010         	call	_fullSpeedAhead	;wreg free
  2227                           
  2228                           ;dc_motor.c: 95:     }
  2229   000EBC  EFD8  F008         	goto	l447
  2230   000EC0                     l2889:
  2231   000EC0  0E02               	movlw	2
  2232   000EC2  1825               	xorwf	move@color^0,w,c
  2233   000EC4  A4D8               	btfss	status,2,c
  2234   000EC6  EF67  F007         	goto	u1911
  2235   000ECA  EF69  F007         	goto	u1910
  2236   000ECE                     u1911:
  2237   000ECE  EF9B  F007         	goto	l2899
  2238   000ED2                     u1910:
  2239   000ED2                     
  2240                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2241   000ED2  C023  F017         	movff	move@mL,turnLeft@mL
  2242   000ED6  C024  F018         	movff	move@mR,turnLeft@mR
  2243   000EDA  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2244   000EDE  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2245   000EE2  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2246   000EE6  EC4E  F00D         	call	_turnLeft	;wreg free
  2247   000EEA                     
  2248                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2249   000EEA  0E05               	movlw	5
  2250   000EEC  6E2D               	movwf	(??_move+1)^0,c
  2251   000EEE  0E0F               	movlw	15
  2252   000EF0  6E2C               	movwf	??_move^0,c
  2253   000EF2  0EF1               	movlw	241
  2254   000EF4                     u2227:
  2255   000EF4  2EE8               	decfsz	wreg,f,c
  2256   000EF6  D7FE               	bra	u2227
  2257   000EF8  2E2C               	decfsz	??_move^0,f,c
  2258   000EFA  D7FC               	bra	u2227
  2259   000EFC  2E2D               	decfsz	(??_move+1)^0,f,c
  2260   000EFE  D7FA               	bra	u2227
  2261   000F00  0000               	nop	
  2262   000F02                     
  2263                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2264   000F02  C023  F017         	movff	move@mL,turnLeft@mL
  2265   000F06  C024  F018         	movff	move@mR,turnLeft@mR
  2266   000F0A  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2267   000F0E  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2268   000F12  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2269   000F16  EC4E  F00D         	call	_turnLeft	;wreg free
  2270                           
  2271                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2272   000F1A  0E05               	movlw	5
  2273   000F1C  6E2D               	movwf	(??_move+1)^0,c
  2274   000F1E  0E0F               	movlw	15
  2275   000F20  6E2C               	movwf	??_move^0,c
  2276   000F22  0EF1               	movlw	241
  2277   000F24                     u2237:
  2278   000F24  2EE8               	decfsz	wreg,f,c
  2279   000F26  D7FE               	bra	u2237
  2280   000F28  2E2C               	decfsz	??_move^0,f,c
  2281   000F2A  D7FC               	bra	u2237
  2282   000F2C  2E2D               	decfsz	(??_move+1)^0,f,c
  2283   000F2E  D7FA               	bra	u2237
  2284   000F30  0000               	nop	
  2285   000F32  EF54  F007         	goto	l2887
  2286   000F36                     l2899:
  2287   000F36  0E03               	movlw	3
  2288   000F38  1825               	xorwf	move@color^0,w,c
  2289   000F3A  A4D8               	btfss	status,2,c
  2290   000F3C  EFA2  F007         	goto	u1921
  2291   000F40  EFA4  F007         	goto	u1920
  2292   000F44                     u1921:
  2293   000F44  EF06  F008         	goto	l2915
  2294   000F48                     u1920:
  2295   000F48                     
  2296                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2297   000F48  C023  F017         	movff	move@mL,turnLeft@mL
  2298   000F4C  C024  F018         	movff	move@mR,turnLeft@mR
  2299   000F50  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2300   000F54  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2301   000F58  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2302   000F5C  EC4E  F00D         	call	_turnLeft	;wreg free
  2303   000F60                     
  2304                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2305   000F60  0E05               	movlw	5
  2306   000F62  6E2D               	movwf	(??_move+1)^0,c
  2307   000F64  0E0F               	movlw	15
  2308   000F66  6E2C               	movwf	??_move^0,c
  2309   000F68  0EF1               	movlw	241
  2310   000F6A                     u2247:
  2311   000F6A  2EE8               	decfsz	wreg,f,c
  2312   000F6C  D7FE               	bra	u2247
  2313   000F6E  2E2C               	decfsz	??_move^0,f,c
  2314   000F70  D7FC               	bra	u2247
  2315   000F72  2E2D               	decfsz	(??_move+1)^0,f,c
  2316   000F74  D7FA               	bra	u2247
  2317   000F76  0000               	nop	
  2318   000F78                     
  2319                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2320   000F78  C023  F017         	movff	move@mL,turnLeft@mL
  2321   000F7C  C024  F018         	movff	move@mR,turnLeft@mR
  2322   000F80  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2323   000F84  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2324   000F88  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2325   000F8C  EC4E  F00D         	call	_turnLeft	;wreg free
  2326                           
  2327                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2328   000F90  0E05               	movlw	5
  2329   000F92  6E2D               	movwf	(??_move+1)^0,c
  2330   000F94  0E0F               	movlw	15
  2331   000F96  6E2C               	movwf	??_move^0,c
  2332   000F98  0EF1               	movlw	241
  2333   000F9A                     u2257:
  2334   000F9A  2EE8               	decfsz	wreg,f,c
  2335   000F9C  D7FE               	bra	u2257
  2336   000F9E  2E2C               	decfsz	??_move^0,f,c
  2337   000FA0  D7FC               	bra	u2257
  2338   000FA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2339   000FA4  D7FA               	bra	u2257
  2340   000FA6  0000               	nop	
  2341   000FA8                     
  2342                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2343   000FA8  C023  F017         	movff	move@mL,turnLeft@mL
  2344   000FAC  C024  F018         	movff	move@mR,turnLeft@mR
  2345   000FB0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2346   000FB4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2347   000FB8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2348   000FBC  EC4E  F00D         	call	_turnLeft	;wreg free
  2349   000FC0                     
  2350                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2351   000FC0  0E05               	movlw	5
  2352   000FC2  6E2D               	movwf	(??_move+1)^0,c
  2353   000FC4  0E0F               	movlw	15
  2354   000FC6  6E2C               	movwf	??_move^0,c
  2355   000FC8  0EF1               	movlw	241
  2356   000FCA                     u2267:
  2357   000FCA  2EE8               	decfsz	wreg,f,c
  2358   000FCC  D7FE               	bra	u2267
  2359   000FCE  2E2C               	decfsz	??_move^0,f,c
  2360   000FD0  D7FC               	bra	u2267
  2361   000FD2  2E2D               	decfsz	(??_move+1)^0,f,c
  2362   000FD4  D7FA               	bra	u2267
  2363   000FD6  0000               	nop	
  2364                           
  2365                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2366   000FD8  C023  F017         	movff	move@mL,turnLeft@mL
  2367   000FDC  C024  F018         	movff	move@mR,turnLeft@mR
  2368   000FE0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2369   000FE4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2370   000FE8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2371   000FEC  EC4E  F00D         	call	_turnLeft	;wreg free
  2372   000FF0                     
  2373                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2374   000FF0  0E05               	movlw	5
  2375   000FF2  6E2D               	movwf	(??_move+1)^0,c
  2376   000FF4  0E0F               	movlw	15
  2377   000FF6  6E2C               	movwf	??_move^0,c
  2378   000FF8  0EF1               	movlw	241
  2379   000FFA                     u2277:
  2380   000FFA  2EE8               	decfsz	wreg,f,c
  2381   000FFC  D7FE               	bra	u2277
  2382   000FFE  2E2C               	decfsz	??_move^0,f,c
  2383   001000  D7FC               	bra	u2277
  2384   001002  2E2D               	decfsz	(??_move+1)^0,f,c
  2385   001004  D7FA               	bra	u2277
  2386   001006  0000               	nop	
  2387   001008  EF54  F007         	goto	l2887
  2388   00100C                     l2915:
  2389   00100C  0E04               	movlw	4
  2390   00100E  1825               	xorwf	move@color^0,w,c
  2391   001010  A4D8               	btfss	status,2,c
  2392   001012  EF0D  F008         	goto	u1931
  2393   001016  EF0F  F008         	goto	u1930
  2394   00101A                     u1931:
  2395   00101A  EF63  F008         	goto	l2927
  2396   00101E                     u1930:
  2397   00101E                     
  2398                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2399   00101E  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2400   001022  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2401   001026  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2402   00102A  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2403   00102E  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2404   001032  ECB5  F00A         	call	_reverseOneSquare	;wreg free
  2405   001036                     l2919:
  2406                           
  2407                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2408   001036  0E05               	movlw	5
  2409   001038  6E2D               	movwf	(??_move+1)^0,c
  2410   00103A  0E0F               	movlw	15
  2411   00103C  6E2C               	movwf	??_move^0,c
  2412   00103E  0EF1               	movlw	241
  2413   001040                     u2287:
  2414   001040  2EE8               	decfsz	wreg,f,c
  2415   001042  D7FE               	bra	u2287
  2416   001044  2E2C               	decfsz	??_move^0,f,c
  2417   001046  D7FC               	bra	u2287
  2418   001048  2E2D               	decfsz	(??_move+1)^0,f,c
  2419   00104A  D7FA               	bra	u2287
  2420   00104C  0000               	nop	
  2421   00104E                     
  2422                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2423   00104E  C023  F017         	movff	move@mL,turnRight@mL
  2424   001052  C024  F018         	movff	move@mR,turnRight@mR
  2425   001056  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2426   00105A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2427   00105E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2428   001062  EC73  F00C         	call	_turnRight	;wreg free
  2429                           
  2430                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2431   001066  0E05               	movlw	5
  2432   001068  6E2D               	movwf	(??_move+1)^0,c
  2433   00106A  0E0F               	movlw	15
  2434   00106C  6E2C               	movwf	??_move^0,c
  2435   00106E  0EF1               	movlw	241
  2436   001070                     u2297:
  2437   001070  2EE8               	decfsz	wreg,f,c
  2438   001072  D7FE               	bra	u2297
  2439   001074  2E2C               	decfsz	??_move^0,f,c
  2440   001076  D7FC               	bra	u2297
  2441   001078  2E2D               	decfsz	(??_move+1)^0,f,c
  2442   00107A  D7FA               	bra	u2297
  2443   00107C  0000               	nop	
  2444   00107E                     
  2445                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2446   00107E  C023  F017         	movff	move@mL,turnRight@mL
  2447   001082  C024  F018         	movff	move@mR,turnRight@mR
  2448   001086  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2449   00108A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2450   00108E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2451   001092  EC73  F00C         	call	_turnRight	;wreg free
  2452   001096                     l2925:
  2453                           
  2454                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2455   001096  0E05               	movlw	5
  2456   001098  6E2D               	movwf	(??_move+1)^0,c
  2457   00109A  0E0F               	movlw	15
  2458   00109C  6E2C               	movwf	??_move^0,c
  2459   00109E  0EF1               	movlw	241
  2460   0010A0                     u2307:
  2461   0010A0  2EE8               	decfsz	wreg,f,c
  2462   0010A2  D7FE               	bra	u2307
  2463   0010A4  2E2C               	decfsz	??_move^0,f,c
  2464   0010A6  D7FC               	bra	u2307
  2465   0010A8  2E2D               	decfsz	(??_move+1)^0,f,c
  2466   0010AA  D7FA               	bra	u2307
  2467   0010AC  0000               	nop	
  2468                           
  2469                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2470   0010AE  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2471   0010B2  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2472   0010B6  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2473   0010BA  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2474   0010BE  ECB2  F010         	call	_fullSpeedAhead	;wreg free
  2475                           
  2476                           ;dc_motor.c: 125:     }
  2477   0010C2  EFD8  F008         	goto	l447
  2478   0010C6                     l2927:
  2479   0010C6  0E05               	movlw	5
  2480   0010C8  1825               	xorwf	move@color^0,w,c
  2481   0010CA  A4D8               	btfss	status,2,c
  2482   0010CC  EF6A  F008         	goto	u1941
  2483   0010D0  EF6C  F008         	goto	u1940
  2484   0010D4                     u1941:
  2485   0010D4  EFAA  F008         	goto	l2939
  2486   0010D8                     u1940:
  2487   0010D8                     
  2488                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2489   0010D8  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2490   0010DC  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2491   0010E0  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2492   0010E4  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2493   0010E8  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2494   0010EC  ECB5  F00A         	call	_reverseOneSquare	;wreg free
  2495   0010F0                     l2931:
  2496                           
  2497                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2498   0010F0  0E05               	movlw	5
  2499   0010F2  6E2D               	movwf	(??_move+1)^0,c
  2500   0010F4  0E0F               	movlw	15
  2501   0010F6  6E2C               	movwf	??_move^0,c
  2502   0010F8  0EF1               	movlw	241
  2503   0010FA                     u2317:
  2504   0010FA  2EE8               	decfsz	wreg,f,c
  2505   0010FC  D7FE               	bra	u2317
  2506   0010FE  2E2C               	decfsz	??_move^0,f,c
  2507   001100  D7FC               	bra	u2317
  2508   001102  2E2D               	decfsz	(??_move+1)^0,f,c
  2509   001104  D7FA               	bra	u2317
  2510   001106  0000               	nop	
  2511   001108                     
  2512                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2513   001108  C023  F017         	movff	move@mL,turnLeft@mL
  2514   00110C  C024  F018         	movff	move@mR,turnLeft@mR
  2515   001110  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2516   001114  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2517   001118  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2518   00111C  EC4E  F00D         	call	_turnLeft	;wreg free
  2519                           
  2520                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2521   001120  0E05               	movlw	5
  2522   001122  6E2D               	movwf	(??_move+1)^0,c
  2523   001124  0E0F               	movlw	15
  2524   001126  6E2C               	movwf	??_move^0,c
  2525   001128  0EF1               	movlw	241
  2526   00112A                     u2327:
  2527   00112A  2EE8               	decfsz	wreg,f,c
  2528   00112C  D7FE               	bra	u2327
  2529   00112E  2E2C               	decfsz	??_move^0,f,c
  2530   001130  D7FC               	bra	u2327
  2531   001132  2E2D               	decfsz	(??_move+1)^0,f,c
  2532   001134  D7FA               	bra	u2327
  2533   001136  0000               	nop	
  2534   001138                     
  2535                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2536   001138  C023  F017         	movff	move@mL,turnLeft@mL
  2537   00113C  C024  F018         	movff	move@mR,turnLeft@mR
  2538   001140  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2539   001144  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2540   001148  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2541   00114C  EC4E  F00D         	call	_turnLeft	;wreg free
  2542   001150  EF4B  F008         	goto	l2925
  2543   001154                     l2939:
  2544   001154  0E06               	movlw	6
  2545   001156  1825               	xorwf	move@color^0,w,c
  2546   001158  A4D8               	btfss	status,2,c
  2547   00115A  EFB1  F008         	goto	u1951
  2548   00115E  EFB3  F008         	goto	u1950
  2549   001162                     u1951:
  2550   001162  EFC1  F008         	goto	l2951
  2551   001166                     u1950:
  2552   001166                     
  2553                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2554   001166  C023  F017         	movff	move@mL,turnRight@mL
  2555   00116A  C024  F018         	movff	move@mR,turnRight@mR
  2556   00116E  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2557   001172  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2558   001176  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2559   00117A  EC73  F00C         	call	_turnRight	;wreg free
  2560   00117E  EF1B  F008         	goto	l2919
  2561   001182                     l2951:
  2562   001182  0E07               	movlw	7
  2563   001184  1825               	xorwf	move@color^0,w,c
  2564   001186  A4D8               	btfss	status,2,c
  2565   001188  EFC8  F008         	goto	u1961
  2566   00118C  EFCA  F008         	goto	u1960
  2567   001190                     u1961:
  2568   001190  EFD8  F008         	goto	l445
  2569   001194                     u1960:
  2570   001194                     
  2571                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2572   001194  C023  F017         	movff	move@mL,turnLeft@mL
  2573   001198  C024  F018         	movff	move@mR,turnLeft@mR
  2574   00119C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2575   0011A0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2576   0011A4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2577   0011A8  EC4E  F00D         	call	_turnLeft	;wreg free
  2578   0011AC  EF78  F008         	goto	l2931
  2579   0011B0                     l445:
  2580   0011B0                     l447:
  2581   0011B0  0012               	return		;funcret
  2582   0011B2                     __end_of_move:
  2583                           	callstack 0
  2584                           
  2585 ;; *************** function _reverseOneSquare *****************
  2586 ;; Defined at:
  2587 ;;		line 263 in file "dc_motor.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2590 ;;		 -> main@motorL(10), 
  2591 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2592 ;;		 -> main@motorR(10), 
  2593 ;;  straightSpee    1   24[COMRAM] unsigned char 
  2594 ;;  reverseDurat    1   25[COMRAM] unsigned char 
  2595 ;;  straightRamp    1   26[COMRAM] unsigned char 
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  cur_power       2   32[COMRAM] int 
  2598 ;;  i               2   30[COMRAM] int 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2608 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2609 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;Total ram usage:       12 bytes
  2613 ;; Hardware stack levels used: 1
  2614 ;; Hardware stack levels required when called: 5
  2615 ;; This function calls:
  2616 ;;		_setMotorPWM
  2617 ;; This function is called by:
  2618 ;;		_move
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text12
  2623   00156A                     __ptext12:
  2624                           	callstack 0
  2625   00156A                     _reverseOneSquare:
  2626                           	callstack 24
  2627   00156A                     
  2628                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  2629   00156A  5017               	movf	reverseOneSquare@mL^0,w,c
  2630   00156C  6ED9               	movwf	fsr2l,c
  2631   00156E  6ADA               	clrf	fsr2h,c
  2632   001570  0E01               	movlw	1
  2633   001572  26D9               	addwf	fsr2l,f,c
  2634   001574  6ADF               	clrf	indf2,c
  2635                           
  2636                           ;dc_motor.c: 266:     mR->direction = 0;
  2637   001576  5018               	movf	reverseOneSquare@mR^0,w,c
  2638   001578  6ED9               	movwf	fsr2l,c
  2639   00157A  6ADA               	clrf	fsr2h,c
  2640   00157C  0E01               	movlw	1
  2641   00157E  26D9               	addwf	fsr2l,f,c
  2642   001580  6ADF               	clrf	indf2,c
  2643   001582                     
  2644                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2645   001582  0E00               	movlw	0
  2646   001584  6E22               	movwf	(reverseOneSquare@cur_power+1)^0,c
  2647   001586  0E01               	movlw	1
  2648   001588  6E21               	movwf	reverseOneSquare@cur_power^0,c
  2649   00158A  EF09  F00B         	goto	l2621
  2650   00158E                     l2607:
  2651                           
  2652                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  2653   00158E  5017               	movf	reverseOneSquare@mL^0,w,c
  2654   001590  6ED9               	movwf	fsr2l,c
  2655   001592  6ADA               	clrf	fsr2h,c
  2656   001594  5017               	movf	reverseOneSquare@mL^0,w,c
  2657   001596  6EE1               	movwf	fsr1l,c
  2658   001598  6AE2               	clrf	fsr1h,c
  2659   00159A  0E09               	movlw	9
  2660   00159C  26E1               	addwf	fsr1l,f,c
  2661   00159E  50E7               	movf	indf1,w,c
  2662   0015A0  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  2663   0015A2  6EDF               	movwf	indf2,c
  2664                           
  2665                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  2666   0015A4  5018               	movf	reverseOneSquare@mR^0,w,c
  2667   0015A6  6ED9               	movwf	fsr2l,c
  2668   0015A8  6ADA               	clrf	fsr2h,c
  2669   0015AA  5018               	movf	reverseOneSquare@mR^0,w,c
  2670   0015AC  6EE1               	movwf	fsr1l,c
  2671   0015AE  6AE2               	clrf	fsr1h,c
  2672   0015B0  0E09               	movlw	9
  2673   0015B2  26E1               	addwf	fsr1l,f,c
  2674   0015B4  50E7               	movf	indf1,w,c
  2675   0015B6  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  2676   0015B8  6EDF               	movwf	indf2,c
  2677   0015BA                     
  2678                           ;dc_motor.c: 272:         setMotorPWM(mL);
  2679   0015BA  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  2680   0015BE  ECE1  F00E         	call	_setMotorPWM	;wreg free
  2681   0015C2                     
  2682                           ;dc_motor.c: 273:         setMotorPWM(mR);
  2683   0015C2  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  2684   0015C6  ECE1  F00E         	call	_setMotorPWM	;wreg free
  2685   0015CA                     
  2686                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  2687   0015CA  0E00               	movlw	0
  2688   0015CC  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  2689   0015CE  0E00               	movlw	0
  2690   0015D0  6E1F               	movwf	reverseOneSquare@i^0,c
  2691   0015D2  EFF5  F00A         	goto	l503
  2692   0015D6                     l2615:
  2693                           
  2694                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2695   0015D6  0E68               	movlw	104
  2696   0015D8  6E1C               	movwf	??_reverseOneSquare^0,c
  2697   0015DA  0EE4               	movlw	228
  2698   0015DC                     u2337:
  2699   0015DC  2EE8               	decfsz	wreg,f,c
  2700   0015DE  D7FE               	bra	u2337
  2701   0015E0  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  2702   0015E2  D7FC               	bra	u2337
  2703   0015E4  D000               	nop2	
  2704   0015E6                     
  2705                           ;dc_motor.c: 276:         }
  2706   0015E6  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  2707   0015E8  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  2708   0015EA                     l503:
  2709   0015EA  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  2710   0015EC  6E1C               	movwf	??_reverseOneSquare^0,c
  2711   0015EE  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  2712   0015F0  501C               	movf	??_reverseOneSquare^0,w,c
  2713   0015F2  5C1F               	subwf	reverseOneSquare@i^0,w,c
  2714   0015F4  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  2715   0015F6  0A80               	xorlw	128
  2716   0015F8  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  2717   0015FA  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  2718   0015FC  0A80               	xorlw	128
  2719   0015FE  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2720   001600  A0D8               	btfss	status,0,c
  2721   001602  EF05  F00B         	goto	u1611
  2722   001606  EF07  F00B         	goto	u1610
  2723   00160A                     u1611:
  2724   00160A  EFEB  F00A         	goto	l2615
  2725   00160E                     u1610:
  2726   00160E                     
  2727                           ;dc_motor.c: 277:     }
  2728   00160E  4A21               	infsnz	reverseOneSquare@cur_power^0,f,c
  2729   001610  2A22               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  2730   001612                     l2621:
  2731   001612  5019               	movf	reverseOneSquare@straightSpeed^0,w,c
  2732   001614  6E1C               	movwf	??_reverseOneSquare^0,c
  2733   001616  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  2734   001618  5021               	movf	reverseOneSquare@cur_power^0,w,c
  2735   00161A  5C1C               	subwf	??_reverseOneSquare^0,w,c
  2736   00161C  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  2737   00161E  0A80               	xorlw	128
  2738   001620  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  2739   001622  5022               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  2740   001624  0A80               	xorlw	128
  2741   001626  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2742   001628  B0D8               	btfsc	status,0,c
  2743   00162A  EF19  F00B         	goto	u1621
  2744   00162E  EF1B  F00B         	goto	u1620
  2745   001632                     u1621:
  2746   001632  EFC7  F00A         	goto	l2607
  2747   001636                     u1620:
  2748   001636                     
  2749                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  2750   001636  0E00               	movlw	0
  2751   001638  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  2752   00163A  0E00               	movlw	0
  2753   00163C  6E1F               	movwf	reverseOneSquare@i^0,c
  2754   00163E  EF2B  F00B         	goto	l507
  2755   001642                     l2625:
  2756                           
  2757                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2758   001642  0E68               	movlw	104
  2759   001644  6E1C               	movwf	??_reverseOneSquare^0,c
  2760   001646  0EE4               	movlw	228
  2761   001648                     u2347:
  2762   001648  2EE8               	decfsz	wreg,f,c
  2763   00164A  D7FE               	bra	u2347
  2764   00164C  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  2765   00164E  D7FC               	bra	u2347
  2766   001650  D000               	nop2	
  2767   001652                     
  2768                           ;dc_motor.c: 281:         }
  2769   001652  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  2770   001654  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  2771   001656                     l507:
  2772   001656  501A               	movf	reverseOneSquare@reverseDuration^0,w,c
  2773   001658  6E1C               	movwf	??_reverseOneSquare^0,c
  2774   00165A  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  2775   00165C  501C               	movf	??_reverseOneSquare^0,w,c
  2776   00165E  5C1F               	subwf	reverseOneSquare@i^0,w,c
  2777   001660  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  2778   001662  0A80               	xorlw	128
  2779   001664  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  2780   001666  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  2781   001668  0A80               	xorlw	128
  2782   00166A  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2783   00166C  A0D8               	btfss	status,0,c
  2784   00166E  EF3B  F00B         	goto	u1631
  2785   001672  EF3D  F00B         	goto	u1630
  2786   001676                     u1631:
  2787   001676  EF21  F00B         	goto	l2625
  2788   00167A                     u1630:
  2789   00167A                     
  2790                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2791   00167A  C019  F021         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  2792   00167E  6A22               	clrf	(reverseOneSquare@cur_power+1)^0,c
  2793   001680                     l2629:
  2794   001680  BE22               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  2795   001682  EF47  F00B         	goto	u1640
  2796   001686  EF45  F00B         	goto	u1641
  2797   00168A                     u1641:
  2798   00168A  EF49  F00B         	goto	l2633
  2799   00168E                     u1640:
  2800   00168E  EF8E  F00B         	goto	l2649
  2801   001692                     l2633:
  2802                           
  2803                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  2804   001692  5017               	movf	reverseOneSquare@mL^0,w,c
  2805   001694  6ED9               	movwf	fsr2l,c
  2806   001696  6ADA               	clrf	fsr2h,c
  2807   001698  5017               	movf	reverseOneSquare@mL^0,w,c
  2808   00169A  6EE1               	movwf	fsr1l,c
  2809   00169C  6AE2               	clrf	fsr1h,c
  2810   00169E  0E09               	movlw	9
  2811   0016A0  26E1               	addwf	fsr1l,f,c
  2812   0016A2  50E7               	movf	indf1,w,c
  2813   0016A4  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  2814   0016A6  6EDF               	movwf	indf2,c
  2815                           
  2816                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  2817   0016A8  5018               	movf	reverseOneSquare@mR^0,w,c
  2818   0016AA  6ED9               	movwf	fsr2l,c
  2819   0016AC  6ADA               	clrf	fsr2h,c
  2820   0016AE  5018               	movf	reverseOneSquare@mR^0,w,c
  2821   0016B0  6EE1               	movwf	fsr1l,c
  2822   0016B2  6AE2               	clrf	fsr1h,c
  2823   0016B4  0E09               	movlw	9
  2824   0016B6  26E1               	addwf	fsr1l,f,c
  2825   0016B8  50E7               	movf	indf1,w,c
  2826   0016BA  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  2827   0016BC  6EDF               	movwf	indf2,c
  2828   0016BE                     
  2829                           ;dc_motor.c: 286:         setMotorPWM(mL);
  2830   0016BE  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  2831   0016C2  ECE1  F00E         	call	_setMotorPWM	;wreg free
  2832   0016C6                     
  2833                           ;dc_motor.c: 287:         setMotorPWM(mR);
  2834   0016C6  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  2835   0016CA  ECE1  F00E         	call	_setMotorPWM	;wreg free
  2836   0016CE                     
  2837                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  2838   0016CE  0E00               	movlw	0
  2839   0016D0  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  2840   0016D2  0E00               	movlw	0
  2841   0016D4  6E1F               	movwf	reverseOneSquare@i^0,c
  2842   0016D6  EF77  F00B         	goto	l512
  2843   0016DA                     l2641:
  2844                           
  2845                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2846   0016DA  0E68               	movlw	104
  2847   0016DC  6E1C               	movwf	??_reverseOneSquare^0,c
  2848   0016DE  0EE4               	movlw	228
  2849   0016E0                     u2357:
  2850   0016E0  2EE8               	decfsz	wreg,f,c
  2851   0016E2  D7FE               	bra	u2357
  2852   0016E4  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  2853   0016E6  D7FC               	bra	u2357
  2854   0016E8  D000               	nop2	
  2855   0016EA                     
  2856                           ;dc_motor.c: 290:         }
  2857   0016EA  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  2858   0016EC  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  2859   0016EE                     l512:
  2860   0016EE  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  2861   0016F0  6E1C               	movwf	??_reverseOneSquare^0,c
  2862   0016F2  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  2863   0016F4  501C               	movf	??_reverseOneSquare^0,w,c
  2864   0016F6  5C1F               	subwf	reverseOneSquare@i^0,w,c
  2865   0016F8  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  2866   0016FA  0A80               	xorlw	128
  2867   0016FC  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  2868   0016FE  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  2869   001700  0A80               	xorlw	128
  2870   001702  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  2871   001704  A0D8               	btfss	status,0,c
  2872   001706  EF87  F00B         	goto	u1651
  2873   00170A  EF89  F00B         	goto	u1650
  2874   00170E                     u1651:
  2875   00170E  EF6D  F00B         	goto	l2641
  2876   001712                     u1650:
  2877   001712                     
  2878                           ;dc_motor.c: 291:     }
  2879   001712  0621               	decf	reverseOneSquare@cur_power^0,f,c
  2880   001714  A0D8               	btfss	status,0,c
  2881   001716  0622               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  2882   001718  EF40  F00B         	goto	l2629
  2883   00171C                     l2649:
  2884                           
  2885                           ;dc_motor.c: 292:     mL->power = 0;
  2886   00171C  5017               	movf	reverseOneSquare@mL^0,w,c
  2887   00171E  6ED9               	movwf	fsr2l,c
  2888   001720  6ADA               	clrf	fsr2h,c
  2889   001722  6ADF               	clrf	indf2,c
  2890                           
  2891                           ;dc_motor.c: 293:     mR->power = 0;
  2892   001724  5018               	movf	reverseOneSquare@mR^0,w,c
  2893   001726  6ED9               	movwf	fsr2l,c
  2894   001728  6ADA               	clrf	fsr2h,c
  2895   00172A  6ADF               	clrf	indf2,c
  2896   00172C  0012               	return		;funcret
  2897   00172E                     __end_of_reverseOneSquare:
  2898                           	callstack 0
  2899                           
  2900 ;; *************** function _fullSpeedAhead *****************
  2901 ;; Defined at:
  2902 ;;		line 246 in file "dc_motor.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2905 ;;		 -> main@motorL(10), 
  2906 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2907 ;;		 -> main@motorR(10), 
  2908 ;;  straightSpee    1   24[COMRAM] unsigned char 
  2909 ;;  straightRamp    1   25[COMRAM] unsigned char 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  cur_power       2   31[COMRAM] int 
  2912 ;;  i               2   29[COMRAM] int 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2926 ;;Total ram usage:       11 bytes
  2927 ;; Hardware stack levels used: 1
  2928 ;; Hardware stack levels required when called: 5
  2929 ;; This function calls:
  2930 ;;		_setMotorPWM
  2931 ;; This function is called by:
  2932 ;;		_move
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text13
  2937   002164                     __ptext13:
  2938                           	callstack 0
  2939   002164                     _fullSpeedAhead:
  2940                           	callstack 24
  2941   002164                     
  2942                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  2943   002164  5017               	movf	fullSpeedAhead@mL^0,w,c
  2944   002166  6ED9               	movwf	fsr2l,c
  2945   002168  6ADA               	clrf	fsr2h,c
  2946   00216A  0E01               	movlw	1
  2947   00216C  26D9               	addwf	fsr2l,f,c
  2948   00216E  0E01               	movlw	1
  2949   002170  6EDF               	movwf	indf2,c
  2950                           
  2951                           ;dc_motor.c: 249:     mR->direction = 1;
  2952   002172  5018               	movf	fullSpeedAhead@mR^0,w,c
  2953   002174  6ED9               	movwf	fsr2l,c
  2954   002176  6ADA               	clrf	fsr2h,c
  2955   002178  0E01               	movlw	1
  2956   00217A  26D9               	addwf	fsr2l,f,c
  2957   00217C  0E01               	movlw	1
  2958   00217E  6EDF               	movwf	indf2,c
  2959   002180                     
  2960                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2961   002180  0E00               	movlw	0
  2962   002182  6E21               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  2963   002184  0E01               	movlw	1
  2964   002186  6E20               	movwf	fullSpeedAhead@cur_power^0,c
  2965   002188  EF08  F011         	goto	l2555
  2966   00218C                     l2541:
  2967                           
  2968                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  2969   00218C  5017               	movf	fullSpeedAhead@mL^0,w,c
  2970   00218E  6ED9               	movwf	fsr2l,c
  2971   002190  6ADA               	clrf	fsr2h,c
  2972   002192  5017               	movf	fullSpeedAhead@mL^0,w,c
  2973   002194  6EE1               	movwf	fsr1l,c
  2974   002196  6AE2               	clrf	fsr1h,c
  2975   002198  0E09               	movlw	9
  2976   00219A  26E1               	addwf	fsr1l,f,c
  2977   00219C  50E7               	movf	indf1,w,c
  2978   00219E  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  2979   0021A0  6EDF               	movwf	indf2,c
  2980                           
  2981                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  2982   0021A2  5018               	movf	fullSpeedAhead@mR^0,w,c
  2983   0021A4  6ED9               	movwf	fsr2l,c
  2984   0021A6  6ADA               	clrf	fsr2h,c
  2985   0021A8  5018               	movf	fullSpeedAhead@mR^0,w,c
  2986   0021AA  6EE1               	movwf	fsr1l,c
  2987   0021AC  6AE2               	clrf	fsr1h,c
  2988   0021AE  0E09               	movlw	9
  2989   0021B0  26E1               	addwf	fsr1l,f,c
  2990   0021B2  50E7               	movf	indf1,w,c
  2991   0021B4  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  2992   0021B6  6EDF               	movwf	indf2,c
  2993   0021B8                     
  2994                           ;dc_motor.c: 255:         setMotorPWM(mL);
  2995   0021B8  C017  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2996   0021BC  ECE1  F00E         	call	_setMotorPWM	;wreg free
  2997   0021C0                     
  2998                           ;dc_motor.c: 256:         setMotorPWM(mR);
  2999   0021C0  C018  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3000   0021C4  ECE1  F00E         	call	_setMotorPWM	;wreg free
  3001   0021C8                     
  3002                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  3003   0021C8  0E00               	movlw	0
  3004   0021CA  6E1F               	movwf	(fullSpeedAhead@i+1)^0,c
  3005   0021CC  0E00               	movlw	0
  3006   0021CE  6E1E               	movwf	fullSpeedAhead@i^0,c
  3007   0021D0  EFF4  F010         	goto	l494
  3008   0021D4                     l2549:
  3009                           
  3010                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3011   0021D4  0E68               	movlw	104
  3012   0021D6  6E1B               	movwf	??_fullSpeedAhead^0,c
  3013   0021D8  0EE4               	movlw	228
  3014   0021DA                     u2367:
  3015   0021DA  2EE8               	decfsz	wreg,f,c
  3016   0021DC  D7FE               	bra	u2367
  3017   0021DE  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  3018   0021E0  D7FC               	bra	u2367
  3019   0021E2  D000               	nop2	
  3020   0021E4                     
  3021                           ;dc_motor.c: 259:         }
  3022   0021E4  4A1E               	infsnz	fullSpeedAhead@i^0,f,c
  3023   0021E6  2A1F               	incf	(fullSpeedAhead@i+1)^0,f,c
  3024   0021E8                     l494:
  3025   0021E8  501A               	movf	fullSpeedAhead@straightRamp^0,w,c
  3026   0021EA  6E1B               	movwf	??_fullSpeedAhead^0,c
  3027   0021EC  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3028   0021EE  501B               	movf	??_fullSpeedAhead^0,w,c
  3029   0021F0  5C1E               	subwf	fullSpeedAhead@i^0,w,c
  3030   0021F2  501F               	movf	(fullSpeedAhead@i+1)^0,w,c
  3031   0021F4  0A80               	xorlw	128
  3032   0021F6  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3033   0021F8  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3034   0021FA  0A80               	xorlw	128
  3035   0021FC  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3036   0021FE  A0D8               	btfss	status,0,c
  3037   002200  EF04  F011         	goto	u1541
  3038   002204  EF06  F011         	goto	u1540
  3039   002208                     u1541:
  3040   002208  EFEA  F010         	goto	l2549
  3041   00220C                     u1540:
  3042   00220C                     
  3043                           ;dc_motor.c: 260:     }
  3044   00220C  4A20               	infsnz	fullSpeedAhead@cur_power^0,f,c
  3045   00220E  2A21               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  3046   002210                     l2555:
  3047   002210  5019               	movf	fullSpeedAhead@straightSpeed^0,w,c
  3048   002212  6E1B               	movwf	??_fullSpeedAhead^0,c
  3049   002214  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3050   002216  5020               	movf	fullSpeedAhead@cur_power^0,w,c
  3051   002218  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  3052   00221A  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3053   00221C  0A80               	xorlw	128
  3054   00221E  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3055   002220  5021               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  3056   002222  0A80               	xorlw	128
  3057   002224  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3058   002226  B0D8               	btfsc	status,0,c
  3059   002228  EF18  F011         	goto	u1551
  3060   00222C  EF1A  F011         	goto	u1550
  3061   002230                     u1551:
  3062   002230  EFC6  F010         	goto	l2541
  3063   002234                     u1550:
  3064   002234  0012               	return		;funcret
  3065   002236                     __end_of_fullSpeedAhead:
  3066                           	callstack 0
  3067                           
  3068 ;; *************** function _initUSART4 *****************
  3069 ;; Defined at:
  3070 ;;		line 4 in file "serial.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3088 ;;Total ram usage:        0 bytes
  3089 ;; Hardware stack levels used: 1
  3090 ;; Hardware stack levels required when called: 3
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text14
  3099   0029FC                     __ptext14:
  3100                           	callstack 0
  3101   0029FC                     _initUSART4:
  3102                           	callstack 27
  3103   0029FC                     
  3104                           ;serial.c: 7:     RC0PPS = 0x12;
  3105   0029FC  0E12               	movlw	18
  3106   0029FE  010E               	movlb	14	; () banked
  3107   002A00  6F62               	movwf	98,b	;volatile
  3108                           
  3109                           ;serial.c: 8:     RX4PPS = 0x11;
  3110   002A02  0E11               	movlw	17
  3111   002A04  6F15               	movwf	21,b	;volatile
  3112   002A06                     
  3113                           ; BSR set to: 14
  3114                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  3115   002A06  97E9               	bcf	233,3,b	;volatile
  3116   002A08                     
  3117                           ; BSR set to: 14
  3118                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  3119   002A08  95E8               	bcf	232,2,b	;volatile
  3120                           
  3121                           ;serial.c: 13:     SP4BRGL = 51;
  3122   002A0A  0E33               	movlw	51
  3123   002A0C  6FE5               	movwf	229,b	;volatile
  3124                           
  3125                           ;serial.c: 14:     SP4BRGH = 0;
  3126   002A0E  0E00               	movlw	0
  3127   002A10  6FE6               	movwf	230,b	;volatile
  3128   002A12                     
  3129                           ; BSR set to: 14
  3130                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  3131   002A12  89E7               	bsf	231,4,b	;volatile
  3132   002A14                     
  3133                           ; BSR set to: 14
  3134                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  3135   002A14  8BE8               	bsf	232,5,b	;volatile
  3136   002A16                     
  3137                           ; BSR set to: 14
  3138                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  3139   002A16  8FE7               	bsf	231,7,b	;volatile
  3140   002A18                     
  3141                           ; BSR set to: 14
  3142   002A18  0012               	return		;funcret
  3143   002A1A                     __end_of_initUSART4:
  3144                           	callstack 0
  3145                           
  3146 ;; *************** function _initDCmotorsPWM *****************
  3147 ;; Defined at:
  3148 ;;		line 5 in file "dc_motor.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3166 ;;Total ram usage:        2 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; Hardware stack levels required when called: 3
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text15
  3177   002454                     __ptext15:
  3178                           	callstack 0
  3179   002454                     _initDCmotorsPWM:
  3180                           	callstack 27
  3181   002454                     
  3182                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  3183   002454  947D               	bcf	125,2,c	;volatile
  3184                           
  3185                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  3186   002456  9485               	bcf	133,2,c	;volatile
  3187                           
  3188                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  3189   002458  987D               	bcf	125,4,c	;volatile
  3190                           
  3191                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  3192   00245A  9885               	bcf	133,4,c	;volatile
  3193                           
  3194                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  3195   00245C  9E7B               	bcf	123,7,c	;volatile
  3196                           
  3197                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  3198   00245E  9E83               	bcf	131,7,c	;volatile
  3199                           
  3200                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  3201   002460  9C7F               	bcf	127,6,c	;volatile
  3202                           
  3203                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  3204   002462  9C87               	bcf	135,6,c	;volatile
  3205   002464                     
  3206                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3207   002464  0E05               	movlw	5
  3208   002466  010E               	movlb	14	; () banked
  3209   002468  6F74               	movwf	116,b	;volatile
  3210                           
  3211                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3212   00246A  0E06               	movlw	6
  3213   00246C  6F76               	movwf	118,b	;volatile
  3214                           
  3215                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3216   00246E  0E07               	movlw	7
  3217   002470  6F69               	movwf	105,b	;volatile
  3218                           
  3219                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3220   002472  0E08               	movlw	8
  3221   002474  6F88               	movwf	136,b	;volatile
  3222                           
  3223                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  3224   002476  50BD               	movf	189,w,c	;volatile
  3225   002478  0B8F               	andlw	-113
  3226   00247A  0930               	iorlw	48
  3227   00247C  6EBD               	movwf	189,c	;volatile
  3228                           
  3229                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3230   00247E  0EE0               	movlw	-32
  3231   002480  16BE               	andwf	190,f,c	;volatile
  3232                           
  3233                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3234   002482  50BF               	movf	191,w,c	;volatile
  3235   002484  0BF0               	andlw	-16
  3236   002486  0901               	iorlw	1
  3237   002488  6EBF               	movwf	191,c	;volatile
  3238   00248A                     
  3239                           ; BSR set to: 14
  3240                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3241   00248A  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3242   00248E                     
  3243                           ; BSR set to: 14
  3244                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3245   00248E  8EBD               	bsf	189,7,c	;volatile
  3246                           
  3247                           ;dc_motor.c: 35:     CCPR1H=0;
  3248   002490  0E00               	movlw	0
  3249   002492  6EAA               	movwf	170,c	;volatile
  3250                           
  3251                           ;dc_motor.c: 36:     CCPR2H=0;
  3252   002494  0E00               	movlw	0
  3253   002496  6EA6               	movwf	166,c	;volatile
  3254                           
  3255                           ;dc_motor.c: 37:     CCPR3H=0;
  3256   002498  0E00               	movlw	0
  3257   00249A  010F               	movlb	15	; () banked
  3258   00249C  6F25               	movwf	37,b	;volatile
  3259                           
  3260                           ;dc_motor.c: 38:     CCPR4H=0;
  3261   00249E  0E00               	movlw	0
  3262   0024A0  6F21               	movwf	33,b	;volatile
  3263                           
  3264                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3265   0024A2  0EFC               	movlw	-4
  3266   0024A4  16AD               	andwf	173,f,c	;volatile
  3267                           
  3268                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3269   0024A6  0EF3               	movlw	-13
  3270   0024A8  16AD               	andwf	173,f,c	;volatile
  3271                           
  3272                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3273   0024AA  0ECF               	movlw	-49
  3274   0024AC  16AD               	andwf	173,f,c	;volatile
  3275                           
  3276                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3277   0024AE  0E3F               	movlw	-193
  3278   0024B0  16AD               	andwf	173,f,c	;volatile
  3279   0024B2                     
  3280                           ; BSR set to: 15
  3281                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3282   0024B2  88AB               	bsf	171,4,c	;volatile
  3283                           
  3284                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3285   0024B4  50AB               	movf	171,w,c	;volatile
  3286   0024B6  0BF0               	andlw	-16
  3287   0024B8  090C               	iorlw	12
  3288   0024BA  6EAB               	movwf	171,c	;volatile
  3289   0024BC                     
  3290                           ; BSR set to: 15
  3291                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3292   0024BC  8EAB               	bsf	171,7,c	;volatile
  3293   0024BE                     
  3294                           ; BSR set to: 15
  3295                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3296   0024BE  88A7               	bsf	167,4,c	;volatile
  3297                           
  3298                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3299   0024C0  50A7               	movf	167,w,c	;volatile
  3300   0024C2  0BF0               	andlw	-16
  3301   0024C4  090C               	iorlw	12
  3302   0024C6  6EA7               	movwf	167,c	;volatile
  3303   0024C8                     
  3304                           ; BSR set to: 15
  3305                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3306   0024C8  8EA7               	bsf	167,7,c	;volatile
  3307   0024CA                     
  3308                           ; BSR set to: 15
  3309                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3310   0024CA  8926               	bsf	38,4,b	;volatile
  3311                           
  3312                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3313   0024CC  5126               	movf	38,w,b	;volatile
  3314   0024CE  0BF0               	andlw	-16
  3315   0024D0  090C               	iorlw	12
  3316   0024D2  6F26               	movwf	38,b	;volatile
  3317   0024D4                     
  3318                           ; BSR set to: 15
  3319                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3320   0024D4  8F26               	bsf	38,7,b	;volatile
  3321   0024D6                     
  3322                           ; BSR set to: 15
  3323                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3324   0024D6  8922               	bsf	34,4,b	;volatile
  3325                           
  3326                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3327   0024D8  5122               	movf	34,w,b	;volatile
  3328   0024DA  0BF0               	andlw	-16
  3329   0024DC  090C               	iorlw	12
  3330   0024DE  6F22               	movwf	34,b	;volatile
  3331   0024E0                     
  3332                           ; BSR set to: 15
  3333                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3334   0024E0  8F22               	bsf	34,7,b	;volatile
  3335   0024E2                     
  3336                           ; BSR set to: 15
  3337   0024E2  0012               	return		;funcret
  3338   0024E4                     __end_of_initDCmotorsPWM:
  3339                           	callstack 0
  3340                           
  3341 ;; *************** function _color_read *****************
  3342 ;; Defined at:
  3343 ;;		line 55 in file "color.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  RGBC            1    8[COMRAM] PTR struct RGBC_val
  3346 ;;		 -> main@RGBC(8), 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;		None
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3358 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3360 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;Total ram usage:        8 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 5
  3365 ;; This function calls:
  3366 ;;		_I2C_2_Master_Read
  3367 ;;		_I2C_2_Master_RepStart
  3368 ;;		_I2C_2_Master_Start
  3369 ;;		_I2C_2_Master_Stop
  3370 ;;		_I2C_2_Master_Write
  3371 ;; This function is called by:
  3372 ;;		_main
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text16
  3377   001394                     __ptext16:
  3378                           	callstack 0
  3379   001394                     _color_read:
  3380                           	callstack 25
  3381   001394                     
  3382                           ;color.c: 55: void color_read(RGBC_val *RGBC);color.c: 56: {;color.c: 57:  I2C_2_Master_
      +                          Start();
  3383   001394  EC6A  F015         	call	_I2C_2_Master_Start	;wreg free
  3384                           
  3385                           ;color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  3386   001398  0E52               	movlw	82
  3387   00139A  EC54  F015         	call	_I2C_2_Master_Write
  3388                           
  3389                           ;color.c: 59:  I2C_2_Master_Write(0xA0 | 0x16);
  3390   00139E  0EB6               	movlw	182
  3391   0013A0  EC54  F015         	call	_I2C_2_Master_Write
  3392                           
  3393                           ;color.c: 60:  I2C_2_Master_RepStart();
  3394   0013A4  EC60  F015         	call	_I2C_2_Master_RepStart	;wreg free
  3395                           
  3396                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  3397   0013A8  0E53               	movlw	83
  3398   0013AA  EC54  F015         	call	_I2C_2_Master_Write
  3399   0013AE                     
  3400                           ;color.c: 62:  RGBC->R=I2C_2_Master_Read(1);
  3401   0013AE  0E01               	movlw	1
  3402   0013B0  ECA6  F013         	call	_I2C_2_Master_Read
  3403   0013B4  6E0A               	movwf	??_color_read^0,c
  3404   0013B6  6A0B               	clrf	(??_color_read+1)^0,c
  3405   0013B8  5009               	movf	color_read@RGBC^0,w,c
  3406   0013BA  6ED9               	movwf	fsr2l,c
  3407   0013BC  6ADA               	clrf	fsr2h,c
  3408   0013BE  C00A  FFDE         	movff	??_color_read,postinc2
  3409   0013C2  C00B  FFDD         	movff	??_color_read+1,postdec2
  3410   0013C6                     
  3411                           ;color.c: 63:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  3412   0013C6  5009               	movf	color_read@RGBC^0,w,c
  3413   0013C8  6ED9               	movwf	fsr2l,c
  3414   0013CA  6ADA               	clrf	fsr2h,c
  3415   0013CC  CFDE F00A          	movff	postinc2,??_color_read
  3416   0013D0  CFDD F00B          	movff	postdec2,??_color_read+1
  3417   0013D4  0E00               	movlw	0
  3418   0013D6  ECA6  F013         	call	_I2C_2_Master_Read
  3419   0013DA  6E0C               	movwf	(??_color_read+2)^0,c
  3420   0013DC  500C               	movf	(??_color_read+2)^0,w,c
  3421   0013DE  6E0E               	movwf	(??_color_read+4)^0,c
  3422   0013E0  6A0D               	clrf	(??_color_read+3)^0,c
  3423   0013E2  500A               	movf	??_color_read^0,w,c
  3424   0013E4  100D               	iorwf	(??_color_read+3)^0,w,c
  3425   0013E6  6E0F               	movwf	(??_color_read+5)^0,c
  3426   0013E8  500B               	movf	(??_color_read+1)^0,w,c
  3427   0013EA  100E               	iorwf	(??_color_read+4)^0,w,c
  3428   0013EC  6E10               	movwf	(??_color_read+6)^0,c
  3429   0013EE  5009               	movf	color_read@RGBC^0,w,c
  3430   0013F0  6ED9               	movwf	fsr2l,c
  3431   0013F2  6ADA               	clrf	fsr2h,c
  3432   0013F4  C00F  FFDE         	movff	??_color_read+5,postinc2
  3433   0013F8  C010  FFDD         	movff	??_color_read+6,postdec2
  3434                           
  3435                           ;color.c: 64:  I2C_2_Master_Stop();
  3436   0013FC  EC65  F015         	call	_I2C_2_Master_Stop	;wreg free
  3437                           
  3438                           ;color.c: 66:     I2C_2_Master_Start();
  3439   001400  EC6A  F015         	call	_I2C_2_Master_Start	;wreg free
  3440                           
  3441                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  3442   001404  0E52               	movlw	82
  3443   001406  EC54  F015         	call	_I2C_2_Master_Write
  3444                           
  3445                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x18);
  3446   00140A  0EB8               	movlw	184
  3447   00140C  EC54  F015         	call	_I2C_2_Master_Write
  3448                           
  3449                           ;color.c: 69:  I2C_2_Master_RepStart();
  3450   001410  EC60  F015         	call	_I2C_2_Master_RepStart	;wreg free
  3451                           
  3452                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  3453   001414  0E53               	movlw	83
  3454   001416  EC54  F015         	call	_I2C_2_Master_Write
  3455   00141A                     
  3456                           ;color.c: 71:  RGBC->G=I2C_2_Master_Read(1);
  3457   00141A  0E01               	movlw	1
  3458   00141C  ECA6  F013         	call	_I2C_2_Master_Read
  3459   001420  6E0A               	movwf	??_color_read^0,c
  3460   001422  6A0B               	clrf	(??_color_read+1)^0,c
  3461   001424  5009               	movf	color_read@RGBC^0,w,c
  3462   001426  6ED9               	movwf	fsr2l,c
  3463   001428  6ADA               	clrf	fsr2h,c
  3464   00142A  0E02               	movlw	2
  3465   00142C  26D9               	addwf	fsr2l,f,c
  3466   00142E  C00A  FFDE         	movff	??_color_read,postinc2
  3467   001432  C00B  FFDD         	movff	??_color_read+1,postdec2
  3468   001436                     
  3469                           ;color.c: 72:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  3470   001436  5009               	movf	color_read@RGBC^0,w,c
  3471   001438  6ED9               	movwf	fsr2l,c
  3472   00143A  6ADA               	clrf	fsr2h,c
  3473   00143C  0E02               	movlw	2
  3474   00143E  26D9               	addwf	fsr2l,f,c
  3475   001440  CFDE F00A          	movff	postinc2,??_color_read
  3476   001444  CFDD F00B          	movff	postdec2,??_color_read+1
  3477   001448  0E00               	movlw	0
  3478   00144A  ECA6  F013         	call	_I2C_2_Master_Read
  3479   00144E  6E0C               	movwf	(??_color_read+2)^0,c
  3480   001450  500C               	movf	(??_color_read+2)^0,w,c
  3481   001452  6E0E               	movwf	(??_color_read+4)^0,c
  3482   001454  6A0D               	clrf	(??_color_read+3)^0,c
  3483   001456  500A               	movf	??_color_read^0,w,c
  3484   001458  100D               	iorwf	(??_color_read+3)^0,w,c
  3485   00145A  6E0F               	movwf	(??_color_read+5)^0,c
  3486   00145C  500B               	movf	(??_color_read+1)^0,w,c
  3487   00145E  100E               	iorwf	(??_color_read+4)^0,w,c
  3488   001460  6E10               	movwf	(??_color_read+6)^0,c
  3489   001462  5009               	movf	color_read@RGBC^0,w,c
  3490   001464  6ED9               	movwf	fsr2l,c
  3491   001466  6ADA               	clrf	fsr2h,c
  3492   001468  0E02               	movlw	2
  3493   00146A  26D9               	addwf	fsr2l,f,c
  3494   00146C  C00F  FFDE         	movff	??_color_read+5,postinc2
  3495   001470  C010  FFDD         	movff	??_color_read+6,postdec2
  3496                           
  3497                           ;color.c: 73:  I2C_2_Master_Stop();
  3498   001474  EC65  F015         	call	_I2C_2_Master_Stop	;wreg free
  3499                           
  3500                           ;color.c: 75:     I2C_2_Master_Start();
  3501   001478  EC6A  F015         	call	_I2C_2_Master_Start	;wreg free
  3502                           
  3503                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  3504   00147C  0E52               	movlw	82
  3505   00147E  EC54  F015         	call	_I2C_2_Master_Write
  3506                           
  3507                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x1A);
  3508   001482  0EBA               	movlw	186
  3509   001484  EC54  F015         	call	_I2C_2_Master_Write
  3510                           
  3511                           ;color.c: 78:  I2C_2_Master_RepStart();
  3512   001488  EC60  F015         	call	_I2C_2_Master_RepStart	;wreg free
  3513                           
  3514                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  3515   00148C  0E53               	movlw	83
  3516   00148E  EC54  F015         	call	_I2C_2_Master_Write
  3517   001492                     
  3518                           ;color.c: 80:  RGBC->B=I2C_2_Master_Read(1);
  3519   001492  0E01               	movlw	1
  3520   001494  ECA6  F013         	call	_I2C_2_Master_Read
  3521   001498  6E0A               	movwf	??_color_read^0,c
  3522   00149A  6A0B               	clrf	(??_color_read+1)^0,c
  3523   00149C  5009               	movf	color_read@RGBC^0,w,c
  3524   00149E  6ED9               	movwf	fsr2l,c
  3525   0014A0  6ADA               	clrf	fsr2h,c
  3526   0014A2  0E04               	movlw	4
  3527   0014A4  26D9               	addwf	fsr2l,f,c
  3528   0014A6  C00A  FFDE         	movff	??_color_read,postinc2
  3529   0014AA  C00B  FFDD         	movff	??_color_read+1,postdec2
  3530   0014AE                     
  3531                           ;color.c: 81:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  3532   0014AE  5009               	movf	color_read@RGBC^0,w,c
  3533   0014B0  6ED9               	movwf	fsr2l,c
  3534   0014B2  6ADA               	clrf	fsr2h,c
  3535   0014B4  0E04               	movlw	4
  3536   0014B6  26D9               	addwf	fsr2l,f,c
  3537   0014B8  CFDE F00A          	movff	postinc2,??_color_read
  3538   0014BC  CFDD F00B          	movff	postdec2,??_color_read+1
  3539   0014C0  0E00               	movlw	0
  3540   0014C2  ECA6  F013         	call	_I2C_2_Master_Read
  3541   0014C6  6E0C               	movwf	(??_color_read+2)^0,c
  3542   0014C8  500C               	movf	(??_color_read+2)^0,w,c
  3543   0014CA  6E0E               	movwf	(??_color_read+4)^0,c
  3544   0014CC  6A0D               	clrf	(??_color_read+3)^0,c
  3545   0014CE  500A               	movf	??_color_read^0,w,c
  3546   0014D0  100D               	iorwf	(??_color_read+3)^0,w,c
  3547   0014D2  6E0F               	movwf	(??_color_read+5)^0,c
  3548   0014D4  500B               	movf	(??_color_read+1)^0,w,c
  3549   0014D6  100E               	iorwf	(??_color_read+4)^0,w,c
  3550   0014D8  6E10               	movwf	(??_color_read+6)^0,c
  3551   0014DA  5009               	movf	color_read@RGBC^0,w,c
  3552   0014DC  6ED9               	movwf	fsr2l,c
  3553   0014DE  6ADA               	clrf	fsr2h,c
  3554   0014E0  0E04               	movlw	4
  3555   0014E2  26D9               	addwf	fsr2l,f,c
  3556   0014E4  C00F  FFDE         	movff	??_color_read+5,postinc2
  3557   0014E8  C010  FFDD         	movff	??_color_read+6,postdec2
  3558                           
  3559                           ;color.c: 82:  I2C_2_Master_Stop();
  3560   0014EC  EC65  F015         	call	_I2C_2_Master_Stop	;wreg free
  3561                           
  3562                           ;color.c: 84:     I2C_2_Master_Start();
  3563   0014F0  EC6A  F015         	call	_I2C_2_Master_Start	;wreg free
  3564                           
  3565                           ;color.c: 85:  I2C_2_Master_Write(0x52 | 0x00);
  3566   0014F4  0E52               	movlw	82
  3567   0014F6  EC54  F015         	call	_I2C_2_Master_Write
  3568                           
  3569                           ;color.c: 86:  I2C_2_Master_Write(0xA0 | 0x14);
  3570   0014FA  0EB4               	movlw	180
  3571   0014FC  EC54  F015         	call	_I2C_2_Master_Write
  3572                           
  3573                           ;color.c: 87:  I2C_2_Master_RepStart();
  3574   001500  EC60  F015         	call	_I2C_2_Master_RepStart	;wreg free
  3575                           
  3576                           ;color.c: 88:  I2C_2_Master_Write(0x52 | 0x01);
  3577   001504  0E53               	movlw	83
  3578   001506  EC54  F015         	call	_I2C_2_Master_Write
  3579   00150A                     
  3580                           ;color.c: 89:  RGBC->C=I2C_2_Master_Read(1);
  3581   00150A  0E01               	movlw	1
  3582   00150C  ECA6  F013         	call	_I2C_2_Master_Read
  3583   001510  6E0A               	movwf	??_color_read^0,c
  3584   001512  6A0B               	clrf	(??_color_read+1)^0,c
  3585   001514  5009               	movf	color_read@RGBC^0,w,c
  3586   001516  6ED9               	movwf	fsr2l,c
  3587   001518  6ADA               	clrf	fsr2h,c
  3588   00151A  0E06               	movlw	6
  3589   00151C  26D9               	addwf	fsr2l,f,c
  3590   00151E  C00A  FFDE         	movff	??_color_read,postinc2
  3591   001522  C00B  FFDD         	movff	??_color_read+1,postdec2
  3592   001526                     
  3593                           ;color.c: 90:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  3594   001526  5009               	movf	color_read@RGBC^0,w,c
  3595   001528  6ED9               	movwf	fsr2l,c
  3596   00152A  6ADA               	clrf	fsr2h,c
  3597   00152C  0E06               	movlw	6
  3598   00152E  26D9               	addwf	fsr2l,f,c
  3599   001530  CFDE F00A          	movff	postinc2,??_color_read
  3600   001534  CFDD F00B          	movff	postdec2,??_color_read+1
  3601   001538  0E00               	movlw	0
  3602   00153A  ECA6  F013         	call	_I2C_2_Master_Read
  3603   00153E  6E0C               	movwf	(??_color_read+2)^0,c
  3604   001540  500C               	movf	(??_color_read+2)^0,w,c
  3605   001542  6E0E               	movwf	(??_color_read+4)^0,c
  3606   001544  6A0D               	clrf	(??_color_read+3)^0,c
  3607   001546  500A               	movf	??_color_read^0,w,c
  3608   001548  100D               	iorwf	(??_color_read+3)^0,w,c
  3609   00154A  6E0F               	movwf	(??_color_read+5)^0,c
  3610   00154C  500B               	movf	(??_color_read+1)^0,w,c
  3611   00154E  100E               	iorwf	(??_color_read+4)^0,w,c
  3612   001550  6E10               	movwf	(??_color_read+6)^0,c
  3613   001552  5009               	movf	color_read@RGBC^0,w,c
  3614   001554  6ED9               	movwf	fsr2l,c
  3615   001556  6ADA               	clrf	fsr2h,c
  3616   001558  0E06               	movlw	6
  3617   00155A  26D9               	addwf	fsr2l,f,c
  3618   00155C  C00F  FFDE         	movff	??_color_read+5,postinc2
  3619   001560  C010  FFDD         	movff	??_color_read+6,postdec2
  3620                           
  3621                           ;color.c: 91:  I2C_2_Master_Stop();
  3622   001564  EC65  F015         	call	_I2C_2_Master_Stop	;wreg free
  3623   001568  0012               	return		;funcret
  3624   00156A                     __end_of_color_read:
  3625                           	callstack 0
  3626                           
  3627 ;; *************** function _I2C_2_Master_RepStart *****************
  3628 ;; Defined at:
  3629 ;;		line 33 in file "i2c.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3647 ;;Total ram usage:        0 bytes
  3648 ;; Hardware stack levels used: 1
  3649 ;; Hardware stack levels required when called: 4
  3650 ;; This function calls:
  3651 ;;		_I2C_2_Master_Idle
  3652 ;; This function is called by:
  3653 ;;		_color_read
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text17
  3658   002AC0                     __ptext17:
  3659                           	callstack 0
  3660   002AC0                     _I2C_2_Master_RepStart:
  3661                           	callstack 25
  3662   002AC0                     
  3663                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3664   002AC0  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  3665   002AC4                     
  3666                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3667   002AC4  010E               	movlb	14	; () banked
  3668   002AC6  83DA               	bsf	218,1,b	;volatile
  3669   002AC8                     
  3670                           ; BSR set to: 14
  3671   002AC8  0012               	return		;funcret
  3672   002ACA                     __end_of_I2C_2_Master_RepStart:
  3673                           	callstack 0
  3674                           
  3675 ;; *************** function _I2C_2_Master_Read *****************
  3676 ;; Defined at:
  3677 ;;		line 51 in file "i2c.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  ack             1    wreg     unsigned char 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  ack             1    6[COMRAM] unsigned char 
  3682 ;;  tmp             1    7[COMRAM] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      unsigned char 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;Total ram usage:        3 bytes
  3697 ;; Hardware stack levels used: 1
  3698 ;; Hardware stack levels required when called: 4
  3699 ;; This function calls:
  3700 ;;		_I2C_2_Master_Idle
  3701 ;; This function is called by:
  3702 ;;		_color_read
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text18
  3707   00274C                     __ptext18:
  3708                           	callstack 0
  3709   00274C                     _I2C_2_Master_Read:
  3710                           	callstack 25
  3711                           
  3712                           ; BSR set to: 14
  3713                           ;incstack = 0
  3714                           ;I2C_2_Master_Read@ack stored from wreg
  3715   00274C  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  3716   00274E                     
  3717                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3718   00274E  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  3719   002752                     
  3720                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3721   002752  010E               	movlb	14	; () banked
  3722   002754  87DA               	bsf	218,3,b	;volatile
  3723                           
  3724                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3725   002756  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  3726   00275A                     
  3727                           ;i2c.c: 57:   tmp = SSP2BUF;
  3728   00275A  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3729                           
  3730                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3731   00275E  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  3732   002762                     
  3733                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3734   002762  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  3735   002764  B4D8               	btfsc	status,2,c
  3736   002766  EFB7  F013         	goto	u1431
  3737   00276A  EFBB  F013         	goto	u1430
  3738   00276E                     u1431:
  3739   00276E  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3740   002770  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  3741   002772  EFBC  F013         	goto	u1448
  3742   002776                     u1430:
  3743   002776  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3744   002778                     u1448:
  3745   002778  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  3746   00277A  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  3747   00277C  010E               	movlb	14	; () banked
  3748   00277E  51DA               	movf	218,w,b	;volatile
  3749   002780  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3750   002782  0BDF               	andlw	-33
  3751   002784  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3752   002786  6FDA               	movwf	218,b	;volatile
  3753   002788                     
  3754                           ; BSR set to: 14
  3755                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3756   002788  89DA               	bsf	218,4,b	;volatile
  3757   00278A                     
  3758                           ; BSR set to: 14
  3759                           ;i2c.c: 61:   return tmp;
  3760   00278A  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  3761   00278C                     
  3762                           ; BSR set to: 14
  3763   00278C  0012               	return		;funcret
  3764   00278E                     __end_of_I2C_2_Master_Read:
  3765                           	callstack 0
  3766                           
  3767 ;; *************** function _color_normalise *****************
  3768 ;; Defined at:
  3769 ;;		line 95 in file "color.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  RGBC            8   30[COMRAM] struct RGBC_val
  3772 ;;  RGBC_n          1   38[COMRAM] PTR struct RGBC_val
  3773 ;;		 -> main@RGBC_n(8), 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3785 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;Total ram usage:       11 bytes
  3790 ;; Hardware stack levels used: 1
  3791 ;; Hardware stack levels required when called: 4
  3792 ;; This function calls:
  3793 ;;		___aldiv
  3794 ;;		___lmul
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text19
  3801   001F16                     __ptext19:
  3802                           	callstack 0
  3803   001F16                     _color_normalise:
  3804                           	callstack 26
  3805   001F16                     
  3806                           ;color.c: 113:     RGBC_n->C = RGBC.C;
  3807   001F16  5027               	movf	color_normalise@RGBC_n^0,w,c
  3808   001F18  6ED9               	movwf	fsr2l,c
  3809   001F1A  6ADA               	clrf	fsr2h,c
  3810   001F1C  0E06               	movlw	6
  3811   001F1E  26D9               	addwf	fsr2l,f,c
  3812   001F20  C025  FFDE         	movff	color_normalise@RGBC+6,postinc2
  3813   001F24  C026  FFDD         	movff	color_normalise@RGBC+7,postdec2
  3814   001F28                     
  3815                           ;color.c: 114:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  3816   001F28  C01F  F005         	movff	color_normalise@RGBC,___lmul@multiplier
  3817   001F2C  C020  F006         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  3818   001F30  6A07               	clrf	(___lmul@multiplier+2)^0,c
  3819   001F32  6A08               	clrf	(___lmul@multiplier+3)^0,c
  3820   001F34  0EE8               	movlw	232
  3821   001F36  6E09               	movwf	___lmul@multiplicand^0,c
  3822   001F38  0E03               	movlw	3
  3823   001F3A  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  3824   001F3C  0E00               	movlw	0
  3825   001F3E  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  3826   001F40  0E00               	movlw	0
  3827   001F42  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  3828   001F44  ECE6  F012         	call	___lmul	;wreg free
  3829   001F48  C005  F011         	movff	?___lmul,___aldiv@dividend
  3830   001F4C  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  3831   001F50  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  3832   001F54  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  3833   001F58  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  3834   001F5A  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  3835   001F5C  6E28               	movwf	??_color_normalise^0,c
  3836   001F5E  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  3837   001F60  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3838   001F62  6E29               	movwf	(??_color_normalise+1)^0,c
  3839   001F64  501F               	movf	color_normalise@RGBC^0,w,c
  3840   001F66  2628               	addwf	??_color_normalise^0,f,c
  3841   001F68  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  3842   001F6A  2229               	addwfc	(??_color_normalise+1)^0,f,c
  3843   001F6C  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  3844   001F70  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  3845   001F74  6A17               	clrf	(___aldiv@divisor+2)^0,c
  3846   001F76  6A18               	clrf	(___aldiv@divisor+3)^0,c
  3847   001F78  EC2C  F010         	call	___aldiv	;wreg free
  3848   001F7C  5027               	movf	color_normalise@RGBC_n^0,w,c
  3849   001F7E  6ED9               	movwf	fsr2l,c
  3850   001F80  6ADA               	clrf	fsr2h,c
  3851   001F82  C011  FFDE         	movff	?___aldiv,postinc2
  3852   001F86  C012  FFDD         	movff	?___aldiv+1,postdec2
  3853   001F8A                     
  3854                           ;color.c: 115:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  3855   001F8A  C021  F005         	movff	color_normalise@RGBC+2,___lmul@multiplier
  3856   001F8E  C022  F006         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  3857   001F92  6A07               	clrf	(___lmul@multiplier+2)^0,c
  3858   001F94  6A08               	clrf	(___lmul@multiplier+3)^0,c
  3859   001F96  0EE8               	movlw	232
  3860   001F98  6E09               	movwf	___lmul@multiplicand^0,c
  3861   001F9A  0E03               	movlw	3
  3862   001F9C  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  3863   001F9E  0E00               	movlw	0
  3864   001FA0  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  3865   001FA2  0E00               	movlw	0
  3866   001FA4  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  3867   001FA6  ECE6  F012         	call	___lmul	;wreg free
  3868   001FAA  C005  F011         	movff	?___lmul,___aldiv@dividend
  3869   001FAE  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  3870   001FB2  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  3871   001FB6  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  3872   001FBA  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  3873   001FBC  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  3874   001FBE  6E28               	movwf	??_color_normalise^0,c
  3875   001FC0  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  3876   001FC2  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3877   001FC4  6E29               	movwf	(??_color_normalise+1)^0,c
  3878   001FC6  501F               	movf	color_normalise@RGBC^0,w,c
  3879   001FC8  2628               	addwf	??_color_normalise^0,f,c
  3880   001FCA  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  3881   001FCC  2229               	addwfc	(??_color_normalise+1)^0,f,c
  3882   001FCE  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  3883   001FD2  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  3884   001FD6  6A17               	clrf	(___aldiv@divisor+2)^0,c
  3885   001FD8  6A18               	clrf	(___aldiv@divisor+3)^0,c
  3886   001FDA  EC2C  F010         	call	___aldiv	;wreg free
  3887   001FDE  5027               	movf	color_normalise@RGBC_n^0,w,c
  3888   001FE0  6ED9               	movwf	fsr2l,c
  3889   001FE2  6ADA               	clrf	fsr2h,c
  3890   001FE4  0E02               	movlw	2
  3891   001FE6  26D9               	addwf	fsr2l,f,c
  3892   001FE8  C011  FFDE         	movff	?___aldiv,postinc2
  3893   001FEC  C012  FFDD         	movff	?___aldiv+1,postdec2
  3894   001FF0                     
  3895                           ;color.c: 116:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  3896   001FF0  C023  F005         	movff	color_normalise@RGBC+4,___lmul@multiplier
  3897   001FF4  C024  F006         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  3898   001FF8  6A07               	clrf	(___lmul@multiplier+2)^0,c
  3899   001FFA  6A08               	clrf	(___lmul@multiplier+3)^0,c
  3900   001FFC  0EE8               	movlw	232
  3901   001FFE  6E09               	movwf	___lmul@multiplicand^0,c
  3902   002000  0E03               	movlw	3
  3903   002002  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  3904   002004  0E00               	movlw	0
  3905   002006  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  3906   002008  0E00               	movlw	0
  3907   00200A  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  3908   00200C  ECE6  F012         	call	___lmul	;wreg free
  3909   002010  C005  F011         	movff	?___lmul,___aldiv@dividend
  3910   002014  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  3911   002018  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  3912   00201C  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  3913   002020  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  3914   002022  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  3915   002024  6E28               	movwf	??_color_normalise^0,c
  3916   002026  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  3917   002028  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  3918   00202A  6E29               	movwf	(??_color_normalise+1)^0,c
  3919   00202C  501F               	movf	color_normalise@RGBC^0,w,c
  3920   00202E  2628               	addwf	??_color_normalise^0,f,c
  3921   002030  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  3922   002032  2229               	addwfc	(??_color_normalise+1)^0,f,c
  3923   002034  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  3924   002038  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  3925   00203C  6A17               	clrf	(___aldiv@divisor+2)^0,c
  3926   00203E  6A18               	clrf	(___aldiv@divisor+3)^0,c
  3927   002040  EC2C  F010         	call	___aldiv	;wreg free
  3928   002044  5027               	movf	color_normalise@RGBC_n^0,w,c
  3929   002046  6ED9               	movwf	fsr2l,c
  3930   002048  6ADA               	clrf	fsr2h,c
  3931   00204A  0E04               	movlw	4
  3932   00204C  26D9               	addwf	fsr2l,f,c
  3933   00204E  C011  FFDE         	movff	?___aldiv,postinc2
  3934   002052  C012  FFDD         	movff	?___aldiv+1,postdec2
  3935   002056  0012               	return		;funcret
  3936   002058                     __end_of_color_normalise:
  3937                           	callstack 0
  3938                           
  3939 ;; *************** function ___lmul *****************
  3940 ;; Defined at:
  3941 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  multiplier      4    4[COMRAM] unsigned long 
  3944 ;;  multiplicand    4    8[COMRAM] unsigned long 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  product         4   12[COMRAM] unsigned long 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  4    4[COMRAM] unsigned long 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3956 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;Total ram usage:       12 bytes
  3961 ;; Hardware stack levels used: 1
  3962 ;; Hardware stack levels required when called: 3
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_color_normalise
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text20
  3971   0025CC                     __ptext20:
  3972                           	callstack 0
  3973   0025CC                     ___lmul:
  3974                           	callstack 26
  3975   0025CC  0E00               	movlw	0
  3976   0025CE  6E0D               	movwf	___lmul@product^0,c
  3977   0025D0  0E00               	movlw	0
  3978   0025D2  6E0E               	movwf	(___lmul@product+1)^0,c
  3979   0025D4  0E00               	movlw	0
  3980   0025D6  6E0F               	movwf	(___lmul@product+2)^0,c
  3981   0025D8  0E00               	movlw	0
  3982   0025DA  6E10               	movwf	(___lmul@product+3)^0,c
  3983   0025DC                     l2653:
  3984   0025DC  A005               	btfss	___lmul@multiplier^0,0,c
  3985   0025DE  EFF3  F012         	goto	u1661
  3986   0025E2  EFF5  F012         	goto	u1660
  3987   0025E6                     u1661:
  3988   0025E6  EFFD  F012         	goto	l2657
  3989   0025EA                     u1660:
  3990   0025EA  5009               	movf	___lmul@multiplicand^0,w,c
  3991   0025EC  260D               	addwf	___lmul@product^0,f,c
  3992   0025EE  500A               	movf	(___lmul@multiplicand+1)^0,w,c
  3993   0025F0  220E               	addwfc	(___lmul@product+1)^0,f,c
  3994   0025F2  500B               	movf	(___lmul@multiplicand+2)^0,w,c
  3995   0025F4  220F               	addwfc	(___lmul@product+2)^0,f,c
  3996   0025F6  500C               	movf	(___lmul@multiplicand+3)^0,w,c
  3997   0025F8  2210               	addwfc	(___lmul@product+3)^0,f,c
  3998   0025FA                     l2657:
  3999   0025FA  90D8               	bcf	status,0,c
  4000   0025FC  3609               	rlcf	___lmul@multiplicand^0,f,c
  4001   0025FE  360A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4002   002600  360B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4003   002602  360C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4004   002604  90D8               	bcf	status,0,c
  4005   002606  3208               	rrcf	(___lmul@multiplier+3)^0,f,c
  4006   002608  3207               	rrcf	(___lmul@multiplier+2)^0,f,c
  4007   00260A  3206               	rrcf	(___lmul@multiplier+1)^0,f,c
  4008   00260C  3205               	rrcf	___lmul@multiplier^0,f,c
  4009   00260E  5005               	movf	___lmul@multiplier^0,w,c
  4010   002610  1006               	iorwf	(___lmul@multiplier+1)^0,w,c
  4011   002612  1007               	iorwf	(___lmul@multiplier+2)^0,w,c
  4012   002614  1008               	iorwf	(___lmul@multiplier+3)^0,w,c
  4013   002616  A4D8               	btfss	status,2,c
  4014   002618  EF10  F013         	goto	u1671
  4015   00261C  EF12  F013         	goto	u1670
  4016   002620                     u1671:
  4017   002620  EFEE  F012         	goto	l2653
  4018   002624                     u1670:
  4019   002624  C00D  F005         	movff	___lmul@product,?___lmul
  4020   002628  C00E  F006         	movff	___lmul@product+1,?___lmul+1
  4021   00262C  C00F  F007         	movff	___lmul@product+2,?___lmul+2
  4022   002630  C010  F008         	movff	___lmul@product+3,?___lmul+3
  4023   002634  0012               	return		;funcret
  4024   002636                     __end_of___lmul:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function ___aldiv *****************
  4028 ;; Defined at:
  4029 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  dividend        4   16[COMRAM] long 
  4032 ;;  divisor         4   20[COMRAM] long 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  quotient        4   26[COMRAM] long 
  4035 ;;  sign            1   25[COMRAM] unsigned char 
  4036 ;;  counter         1   24[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  4   16[COMRAM] long 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4046 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4047 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4049 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;Total ram usage:       14 bytes
  4051 ;; Hardware stack levels used: 1
  4052 ;; Hardware stack levels required when called: 3
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_color_normalise
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text21
  4061   002058                     __ptext21:
  4062                           	callstack 0
  4063   002058                     ___aldiv:
  4064                           	callstack 26
  4065   002058  0E00               	movlw	0
  4066   00205A  6E1A               	movwf	___aldiv@sign^0,c
  4067   00205C  BE18               	btfsc	(___aldiv@divisor+3)^0,7,c
  4068   00205E  EF35  F010         	goto	u1680
  4069   002062  EF33  F010         	goto	u1681
  4070   002066                     u1681:
  4071   002066  EF3F  F010         	goto	l2669
  4072   00206A                     u1680:
  4073   00206A  1E18               	comf	(___aldiv@divisor+3)^0,f,c
  4074   00206C  1E17               	comf	(___aldiv@divisor+2)^0,f,c
  4075   00206E  1E16               	comf	(___aldiv@divisor+1)^0,f,c
  4076   002070  6C15               	negf	___aldiv@divisor^0,c
  4077   002072  0E00               	movlw	0
  4078   002074  2216               	addwfc	(___aldiv@divisor+1)^0,f,c
  4079   002076  2217               	addwfc	(___aldiv@divisor+2)^0,f,c
  4080   002078  2218               	addwfc	(___aldiv@divisor+3)^0,f,c
  4081   00207A  0E01               	movlw	1
  4082   00207C  6E1A               	movwf	___aldiv@sign^0,c
  4083   00207E                     l2669:
  4084   00207E  BE14               	btfsc	(___aldiv@dividend+3)^0,7,c
  4085   002080  EF46  F010         	goto	u1690
  4086   002084  EF44  F010         	goto	u1691
  4087   002088                     u1691:
  4088   002088  EF50  F010         	goto	l2675
  4089   00208C                     u1690:
  4090   00208C  1E14               	comf	(___aldiv@dividend+3)^0,f,c
  4091   00208E  1E13               	comf	(___aldiv@dividend+2)^0,f,c
  4092   002090  1E12               	comf	(___aldiv@dividend+1)^0,f,c
  4093   002092  6C11               	negf	___aldiv@dividend^0,c
  4094   002094  0E00               	movlw	0
  4095   002096  2212               	addwfc	(___aldiv@dividend+1)^0,f,c
  4096   002098  2213               	addwfc	(___aldiv@dividend+2)^0,f,c
  4097   00209A  2214               	addwfc	(___aldiv@dividend+3)^0,f,c
  4098   00209C  0E01               	movlw	1
  4099   00209E  1A1A               	xorwf	___aldiv@sign^0,f,c
  4100   0020A0                     l2675:
  4101   0020A0  0E00               	movlw	0
  4102   0020A2  6E1B               	movwf	___aldiv@quotient^0,c
  4103   0020A4  0E00               	movlw	0
  4104   0020A6  6E1C               	movwf	(___aldiv@quotient+1)^0,c
  4105   0020A8  0E00               	movlw	0
  4106   0020AA  6E1D               	movwf	(___aldiv@quotient+2)^0,c
  4107   0020AC  0E00               	movlw	0
  4108   0020AE  6E1E               	movwf	(___aldiv@quotient+3)^0,c
  4109   0020B0  5015               	movf	___aldiv@divisor^0,w,c
  4110   0020B2  1016               	iorwf	(___aldiv@divisor+1)^0,w,c
  4111   0020B4  1017               	iorwf	(___aldiv@divisor+2)^0,w,c
  4112   0020B6  1018               	iorwf	(___aldiv@divisor+3)^0,w,c
  4113   0020B8  B4D8               	btfsc	status,2,c
  4114   0020BA  EF61  F010         	goto	u1701
  4115   0020BE  EF63  F010         	goto	u1700
  4116   0020C2                     u1701:
  4117   0020C2  EF99  F010         	goto	l2697
  4118   0020C6                     u1700:
  4119   0020C6  0E01               	movlw	1
  4120   0020C8  6E19               	movwf	___aldiv@counter^0,c
  4121   0020CA  EF6D  F010         	goto	l2683
  4122   0020CE                     l2681:
  4123   0020CE  90D8               	bcf	status,0,c
  4124   0020D0  3615               	rlcf	___aldiv@divisor^0,f,c
  4125   0020D2  3616               	rlcf	(___aldiv@divisor+1)^0,f,c
  4126   0020D4  3617               	rlcf	(___aldiv@divisor+2)^0,f,c
  4127   0020D6  3618               	rlcf	(___aldiv@divisor+3)^0,f,c
  4128   0020D8  2A19               	incf	___aldiv@counter^0,f,c
  4129   0020DA                     l2683:
  4130   0020DA  AE18               	btfss	(___aldiv@divisor+3)^0,7,c
  4131   0020DC  EF72  F010         	goto	u1711
  4132   0020E0  EF74  F010         	goto	u1710
  4133   0020E4                     u1711:
  4134   0020E4  EF67  F010         	goto	l2681
  4135   0020E8                     u1710:
  4136   0020E8                     l2685:
  4137   0020E8  90D8               	bcf	status,0,c
  4138   0020EA  361B               	rlcf	___aldiv@quotient^0,f,c
  4139   0020EC  361C               	rlcf	(___aldiv@quotient+1)^0,f,c
  4140   0020EE  361D               	rlcf	(___aldiv@quotient+2)^0,f,c
  4141   0020F0  361E               	rlcf	(___aldiv@quotient+3)^0,f,c
  4142   0020F2  5015               	movf	___aldiv@divisor^0,w,c
  4143   0020F4  5C11               	subwf	___aldiv@dividend^0,w,c
  4144   0020F6  5016               	movf	(___aldiv@divisor+1)^0,w,c
  4145   0020F8  5812               	subwfb	(___aldiv@dividend+1)^0,w,c
  4146   0020FA  5017               	movf	(___aldiv@divisor+2)^0,w,c
  4147   0020FC  5813               	subwfb	(___aldiv@dividend+2)^0,w,c
  4148   0020FE  5018               	movf	(___aldiv@divisor+3)^0,w,c
  4149   002100  5814               	subwfb	(___aldiv@dividend+3)^0,w,c
  4150   002102  A0D8               	btfss	status,0,c
  4151   002104  EF86  F010         	goto	u1721
  4152   002108  EF88  F010         	goto	u1720
  4153   00210C                     u1721:
  4154   00210C  EF91  F010         	goto	l2693
  4155   002110                     u1720:
  4156   002110  5015               	movf	___aldiv@divisor^0,w,c
  4157   002112  5E11               	subwf	___aldiv@dividend^0,f,c
  4158   002114  5016               	movf	(___aldiv@divisor+1)^0,w,c
  4159   002116  5A12               	subwfb	(___aldiv@dividend+1)^0,f,c
  4160   002118  5017               	movf	(___aldiv@divisor+2)^0,w,c
  4161   00211A  5A13               	subwfb	(___aldiv@dividend+2)^0,f,c
  4162   00211C  5018               	movf	(___aldiv@divisor+3)^0,w,c
  4163   00211E  5A14               	subwfb	(___aldiv@dividend+3)^0,f,c
  4164   002120  801B               	bsf	___aldiv@quotient^0,0,c
  4165   002122                     l2693:
  4166   002122  90D8               	bcf	status,0,c
  4167   002124  3218               	rrcf	(___aldiv@divisor+3)^0,f,c
  4168   002126  3217               	rrcf	(___aldiv@divisor+2)^0,f,c
  4169   002128  3216               	rrcf	(___aldiv@divisor+1)^0,f,c
  4170   00212A  3215               	rrcf	___aldiv@divisor^0,f,c
  4171   00212C  2E19               	decfsz	___aldiv@counter^0,f,c
  4172   00212E  EF74  F010         	goto	l2685
  4173   002132                     l2697:
  4174   002132  501A               	movf	___aldiv@sign^0,w,c
  4175   002134  B4D8               	btfsc	status,2,c
  4176   002136  EF9F  F010         	goto	u1731
  4177   00213A  EFA1  F010         	goto	u1730
  4178   00213E                     u1731:
  4179   00213E  EFA9  F010         	goto	l2701
  4180   002142                     u1730:
  4181   002142  1E1E               	comf	(___aldiv@quotient+3)^0,f,c
  4182   002144  1E1D               	comf	(___aldiv@quotient+2)^0,f,c
  4183   002146  1E1C               	comf	(___aldiv@quotient+1)^0,f,c
  4184   002148  6C1B               	negf	___aldiv@quotient^0,c
  4185   00214A  0E00               	movlw	0
  4186   00214C  221C               	addwfc	(___aldiv@quotient+1)^0,f,c
  4187   00214E  221D               	addwfc	(___aldiv@quotient+2)^0,f,c
  4188   002150  221E               	addwfc	(___aldiv@quotient+3)^0,f,c
  4189   002152                     l2701:
  4190   002152  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  4191   002156  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  4192   00215A  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  4193   00215E  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  4194   002162  0012               	return		;funcret
  4195   002164                     __end_of___aldiv:
  4196                           	callstack 0
  4197                           
  4198 ;; *************** function _color_detect *****************
  4199 ;; Defined at:
  4200 ;;		line 119 in file "color.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  RGBC_n          8    4[COMRAM] struct RGBC_val
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  color           1   12[COMRAM] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4214 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4217 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4218 ;;Total ram usage:        9 bytes
  4219 ;; Hardware stack levels used: 1
  4220 ;; Hardware stack levels required when called: 3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text22
  4229   0024E4                     __ptext22:
  4230                           	callstack 0
  4231   0024E4                     _color_detect:
  4232                           	callstack 27
  4233   0024E4                     
  4234                           ;color.c: 119: unsigned char color_detect(RGBC_val RGBC_n);color.c: 120: {;color.c: 121:
      +                               unsigned char color=0;
  4235   0024E4  0E00               	movlw	0
  4236   0024E6  6E0D               	movwf	color_detect@color^0,c
  4237   0024E8                     
  4238                           ;color.c: 122:     if (RGBC_n.R > 550) {
  4239   0024E8  0E27               	movlw	39
  4240   0024EA  5C05               	subwf	color_detect@RGBC_n^0,w,c
  4241   0024EC  0E02               	movlw	2
  4242   0024EE  5806               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  4243   0024F0  A0D8               	btfss	status,0,c
  4244   0024F2  EF7D  F012         	goto	u1861
  4245   0024F6  EF7F  F012         	goto	u1860
  4246   0024FA                     u1861:
  4247   0024FA  EF83  F012         	goto	l2867
  4248   0024FE                     u1860:
  4249   0024FE                     
  4250                           ;color.c: 123:         color = 1;
  4251   0024FE  0E01               	movlw	1
  4252   002500  6E0D               	movwf	color_detect@color^0,c
  4253                           
  4254                           ;color.c: 124:     }
  4255   002502  EFAA  F012         	goto	l117
  4256   002506                     l2867:
  4257   002506  0E23               	movlw	35
  4258   002508  5C07               	subwf	(color_detect@RGBC_n+2)^0,w,c
  4259   00250A  0E01               	movlw	1
  4260   00250C  5808               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  4261   00250E  A0D8               	btfss	status,0,c
  4262   002510  EF8C  F012         	goto	u1871
  4263   002514  EF8E  F012         	goto	u1870
  4264   002518                     u1871:
  4265   002518  EF92  F012         	goto	l2871
  4266   00251C                     u1870:
  4267   00251C                     
  4268                           ;color.c: 126:         color = 2;
  4269   00251C  0E02               	movlw	2
  4270   00251E  6E0D               	movwf	color_detect@color^0,c
  4271                           
  4272                           ;color.c: 127:     }
  4273   002520  EFAA  F012         	goto	l117
  4274   002524                     l2871:
  4275   002524  500A               	movf	(color_detect@RGBC_n+5)^0,w,c
  4276   002526  E109               	bnz	u1880
  4277   002528  0EDD               	movlw	221
  4278   00252A  5C09               	subwf	(color_detect@RGBC_n+4)^0,w,c
  4279   00252C  A0D8               	btfss	status,0,c
  4280   00252E  EF9B  F012         	goto	u1881
  4281   002532  EF9D  F012         	goto	u1880
  4282   002536                     u1881:
  4283   002536  EFAA  F012         	goto	l117
  4284   00253A                     u1880:
  4285   00253A  0E20               	movlw	32
  4286   00253C  5C0B               	subwf	(color_detect@RGBC_n+6)^0,w,c
  4287   00253E  0E03               	movlw	3
  4288   002540  580C               	subwfb	(color_detect@RGBC_n+7)^0,w,c
  4289   002542  B0D8               	btfsc	status,0,c
  4290   002544  EFA6  F012         	goto	u1891
  4291   002548  EFA8  F012         	goto	u1890
  4292   00254C                     u1891:
  4293   00254C  EFAA  F012         	goto	l117
  4294   002550                     u1890:
  4295   002550                     
  4296                           ;color.c: 129:         color = 3;
  4297   002550  0E03               	movlw	3
  4298   002552  6E0D               	movwf	color_detect@color^0,c
  4299   002554                     l117:
  4300                           
  4301                           ;color.c: 149:     return color;
  4302   002554  500D               	movf	color_detect@color^0,w,c
  4303   002556  0012               	return		;funcret
  4304   002558                     __end_of_color_detect:
  4305                           	callstack 0
  4306                           
  4307 ;; *************** function _color_click_init *****************
  4308 ;; Defined at:
  4309 ;;		line 5 in file "color.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;Total ram usage:        1 bytes
  4328 ;; Hardware stack levels used: 1
  4329 ;; Hardware stack levels required when called: 6
  4330 ;; This function calls:
  4331 ;;		_I2C_2_Master_Init
  4332 ;;		_color_writetoaddr
  4333 ;; This function is called by:
  4334 ;;		_main
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text23
  4339   002636                     __ptext23:
  4340                           	callstack 0
  4341   002636                     _color_click_init:
  4342                           	callstack 24
  4343   002636                     
  4344                           ;color.c: 8:     I2C_2_Master_Init();
  4345   002636  EC64  F014         	call	_I2C_2_Master_Init	;wreg free
  4346   00263A                     
  4347                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  4348   00263A  0E01               	movlw	1
  4349   00263C  6E07               	movwf	color_writetoaddr@value^0,c
  4350   00263E  0E00               	movlw	0
  4351   002640  ECEE  F014         	call	_color_writetoaddr
  4352   002644                     
  4353                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4354   002644  0E3F               	movlw	63
  4355   002646  6E09               	movwf	??_color_click_init^0,c
  4356   002648  0E55               	movlw	85
  4357   00264A                     u2377:
  4358   00264A  2EE8               	decfsz	wreg,f,c
  4359   00264C  D7FE               	bra	u2377
  4360   00264E  2E09               	decfsz	??_color_click_init^0,f,c
  4361   002650  D7FC               	bra	u2377
  4362   002652  0000               	nop	
  4363   002654                     
  4364                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  4365   002654  0E03               	movlw	3
  4366   002656  6E07               	movwf	color_writetoaddr@value^0,c
  4367   002658  0E00               	movlw	0
  4368   00265A  ECEE  F014         	call	_color_writetoaddr
  4369   00265E                     
  4370                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  4371   00265E  0ED5               	movlw	213
  4372   002660  6E07               	movwf	color_writetoaddr@value^0,c
  4373   002662  0E01               	movlw	1
  4374   002664  ECEE  F014         	call	_color_writetoaddr
  4375   002668                     
  4376                           ;color.c: 21:  color_writetoaddr(0x00, 0x13);
  4377   002668  0E13               	movlw	19
  4378   00266A  6E07               	movwf	color_writetoaddr@value^0,c
  4379   00266C  0E00               	movlw	0
  4380   00266E  ECEE  F014         	call	_color_writetoaddr
  4381   002672                     
  4382                           ;color.c: 22:     color_writetoaddr(0x07, 0x07);
  4383   002672  0E07               	movlw	7
  4384   002674  6E07               	movwf	color_writetoaddr@value^0,c
  4385   002676  0E07               	movlw	7
  4386   002678  ECEE  F014         	call	_color_writetoaddr
  4387   00267C                     
  4388                           ;color.c: 23:     color_writetoaddr(0x06, 0xD0);
  4389   00267C  0ED0               	movlw	208
  4390   00267E  6E07               	movwf	color_writetoaddr@value^0,c
  4391   002680  0E06               	movlw	6
  4392   002682  ECEE  F014         	call	_color_writetoaddr
  4393   002686                     
  4394                           ;color.c: 24:     color_writetoaddr(0x05, 0x00);
  4395   002686  0E00               	movlw	0
  4396   002688  6E07               	movwf	color_writetoaddr@value^0,c
  4397   00268A  0E05               	movlw	5
  4398   00268C  ECEE  F014         	call	_color_writetoaddr
  4399   002690                     
  4400                           ;color.c: 25:     color_writetoaddr(0x04, 0x00);
  4401   002690  0E00               	movlw	0
  4402   002692  6E07               	movwf	color_writetoaddr@value^0,c
  4403   002694  0E04               	movlw	4
  4404   002696  ECEE  F014         	call	_color_writetoaddr
  4405   00269A  0012               	return		;funcret
  4406   00269C                     __end_of_color_click_init:
  4407                           	callstack 0
  4408                           
  4409 ;; *************** function _color_writetoaddr *****************
  4410 ;; Defined at:
  4411 ;;		line 31 in file "color.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  address         1    wreg     unsigned char 
  4414 ;;  value           1    6[COMRAM] unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  address         1    7[COMRAM] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4426 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;Total ram usage:        2 bytes
  4431 ;; Hardware stack levels used: 1
  4432 ;; Hardware stack levels required when called: 5
  4433 ;; This function calls:
  4434 ;;		_I2C_2_Master_Start
  4435 ;;		_I2C_2_Master_Stop
  4436 ;;		_I2C_2_Master_Write
  4437 ;; This function is called by:
  4438 ;;		_color_click_init
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text24
  4443   0029DC                     __ptext24:
  4444                           	callstack 0
  4445   0029DC                     _color_writetoaddr:
  4446                           	callstack 24
  4447                           
  4448                           ;incstack = 0
  4449                           ;color_writetoaddr@address stored from wreg
  4450   0029DC  6E08               	movwf	color_writetoaddr@address^0,c
  4451   0029DE                     
  4452                           ;color.c: 32:     I2C_2_Master_Start();
  4453   0029DE  EC6A  F015         	call	_I2C_2_Master_Start	;wreg free
  4454                           
  4455                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  4456   0029E2  0E52               	movlw	82
  4457   0029E4  EC54  F015         	call	_I2C_2_Master_Write
  4458                           
  4459                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  4460   0029E8  5008               	movf	color_writetoaddr@address^0,w,c
  4461   0029EA  0980               	iorlw	128
  4462   0029EC  EC54  F015         	call	_I2C_2_Master_Write
  4463                           
  4464                           ;color.c: 35:     I2C_2_Master_Write(value);
  4465   0029F0  5007               	movf	color_writetoaddr@value^0,w,c
  4466   0029F2  EC54  F015         	call	_I2C_2_Master_Write
  4467                           
  4468                           ;color.c: 36:     I2C_2_Master_Stop();
  4469   0029F6  EC65  F015         	call	_I2C_2_Master_Stop	;wreg free
  4470   0029FA  0012               	return		;funcret
  4471   0029FC                     __end_of_color_writetoaddr:
  4472                           	callstack 0
  4473                           
  4474 ;; *************** function _I2C_2_Master_Write *****************
  4475 ;; Defined at:
  4476 ;;		line 45 in file "i2c.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  data_byte       1    wreg     unsigned char 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  data_byte       1    5[COMRAM] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4494 ;;Total ram usage:        1 bytes
  4495 ;; Hardware stack levels used: 1
  4496 ;; Hardware stack levels required when called: 4
  4497 ;; This function calls:
  4498 ;;		_I2C_2_Master_Idle
  4499 ;; This function is called by:
  4500 ;;		_color_writetoaddr
  4501 ;;		_color_read
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text25
  4506   002AA8                     __ptext25:
  4507                           	callstack 0
  4508   002AA8                     _I2C_2_Master_Write:
  4509                           	callstack 25
  4510                           
  4511                           ;incstack = 0
  4512                           ;I2C_2_Master_Write@data_byte stored from wreg
  4513   002AA8  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  4514   002AAA                     
  4515                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4516   002AAA  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  4517   002AAE                     
  4518                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4519   002AAE  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4520   002AB2  0012               	return		;funcret
  4521   002AB4                     __end_of_I2C_2_Master_Write:
  4522                           	callstack 0
  4523                           
  4524 ;; *************** function _I2C_2_Master_Stop *****************
  4525 ;; Defined at:
  4526 ;;		line 39 in file "i2c.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;		None
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;Total ram usage:        0 bytes
  4545 ;; Hardware stack levels used: 1
  4546 ;; Hardware stack levels required when called: 4
  4547 ;; This function calls:
  4548 ;;		_I2C_2_Master_Idle
  4549 ;; This function is called by:
  4550 ;;		_color_writetoaddr
  4551 ;;		_color_read
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text26
  4556   002ACA                     __ptext26:
  4557                           	callstack 0
  4558   002ACA                     _I2C_2_Master_Stop:
  4559                           	callstack 25
  4560   002ACA                     
  4561                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4562   002ACA  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  4563   002ACE                     
  4564                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4565   002ACE  010E               	movlb	14	; () banked
  4566   002AD0  85DA               	bsf	218,2,b	;volatile
  4567   002AD2                     
  4568                           ; BSR set to: 14
  4569   002AD2  0012               	return		;funcret
  4570   002AD4                     __end_of_I2C_2_Master_Stop:
  4571                           	callstack 0
  4572                           
  4573 ;; *************** function _I2C_2_Master_Start *****************
  4574 ;; Defined at:
  4575 ;;		line 27 in file "i2c.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 4
  4596 ;; This function calls:
  4597 ;;		_I2C_2_Master_Idle
  4598 ;; This function is called by:
  4599 ;;		_color_writetoaddr
  4600 ;;		_color_read
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text27
  4605   002AD4                     __ptext27:
  4606                           	callstack 0
  4607   002AD4                     _I2C_2_Master_Start:
  4608                           	callstack 25
  4609   002AD4                     
  4610                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4611   002AD4  EC8E  F014         	call	_I2C_2_Master_Idle	;wreg free
  4612   002AD8                     
  4613                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4614   002AD8  010E               	movlb	14	; () banked
  4615   002ADA  81DA               	bsf	218,0,b	;volatile
  4616   002ADC                     
  4617                           ; BSR set to: 14
  4618   002ADC  0012               	return		;funcret
  4619   002ADE                     __end_of_I2C_2_Master_Start:
  4620                           	callstack 0
  4621                           
  4622 ;; *************** function _I2C_2_Master_Idle *****************
  4623 ;; Defined at:
  4624 ;;		line 22 in file "i2c.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4642 ;;Total ram usage:        1 bytes
  4643 ;; Hardware stack levels used: 1
  4644 ;; Hardware stack levels required when called: 3
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_I2C_2_Master_Start
  4649 ;;		_I2C_2_Master_RepStart
  4650 ;;		_I2C_2_Master_Stop
  4651 ;;		_I2C_2_Master_Write
  4652 ;;		_I2C_2_Master_Read
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text28
  4657   00291C                     __ptext28:
  4658                           	callstack 0
  4659   00291C                     _I2C_2_Master_Idle:
  4660                           	callstack 25
  4661   00291C                     l151:
  4662   00291C  010E               	movlb	14	; () banked
  4663   00291E  B5D8               	btfsc	216,2,b	;volatile
  4664   002920  EF94  F014         	goto	u1091
  4665   002924  EF96  F014         	goto	u1090
  4666   002928                     u1091:
  4667   002928  EF8E  F014         	goto	l151
  4668   00292C                     u1090:
  4669   00292C                     
  4670                           ; BSR set to: 14
  4671   00292C  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4672   002930  0E1F               	movlw	31
  4673   002932  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  4674   002934  A4D8               	btfss	status,2,c
  4675   002936  EF9F  F014         	goto	u1101
  4676   00293A  EFA1  F014         	goto	u1100
  4677   00293E                     u1101:
  4678   00293E  EF8E  F014         	goto	l151
  4679   002942                     u1100:
  4680   002942                     
  4681                           ; BSR set to: 14
  4682   002942  0012               	return		;funcret
  4683   002944                     __end_of_I2C_2_Master_Idle:
  4684                           	callstack 0
  4685                           
  4686 ;; *************** function _I2C_2_Master_Init *****************
  4687 ;; Defined at:
  4688 ;;		line 4 in file "i2c.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used: 1
  4708 ;; Hardware stack levels required when called: 3
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_color_click_init
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text29
  4717   0028C8                     __ptext29:
  4718                           	callstack 0
  4719   0028C8                     _I2C_2_Master_Init:
  4720                           	callstack 26
  4721   0028C8                     
  4722                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4723   0028C8  010E               	movlb	14	; () banked
  4724   0028CA  51D9               	movf	217,w,b	;volatile
  4725   0028CC  0BF0               	andlw	-16
  4726   0028CE  0908               	iorlw	8
  4727   0028D0  6FD9               	movwf	217,b	;volatile
  4728   0028D2                     
  4729                           ; BSR set to: 14
  4730                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4731   0028D2  8BD9               	bsf	217,5,b	;volatile
  4732                           
  4733                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4734   0028D4  0E9F               	movlw	159
  4735   0028D6  6FD6               	movwf	214,b	;volatile
  4736   0028D8                     
  4737                           ; BSR set to: 14
  4738                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4739   0028D8  8A84               	bsf	132,5,c	;volatile
  4740   0028DA                     
  4741                           ; BSR set to: 14
  4742                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4743   0028DA  8C84               	bsf	132,6,c	;volatile
  4744   0028DC                     
  4745                           ; BSR set to: 14
  4746                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4747   0028DC  9BA7               	bcf	167,5,b	;volatile
  4748   0028DE                     
  4749                           ; BSR set to: 14
  4750                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4751   0028DE  9DA7               	bcf	167,6,b	;volatile
  4752                           
  4753                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4754   0028E0  0E1D               	movlw	29
  4755   0028E2  6F1D               	movwf	29,b	;volatile
  4756                           
  4757                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4758   0028E4  0E1E               	movlw	30
  4759   0028E6  6F1C               	movwf	28,b	;volatile
  4760                           
  4761                           ;i2c.c: 18:   RD5PPS=0x1C;
  4762   0028E8  0E1C               	movlw	28
  4763   0028EA  6F6F               	movwf	111,b	;volatile
  4764                           
  4765                           ;i2c.c: 19:   RD6PPS=0x1B;
  4766   0028EC  0E1B               	movlw	27
  4767   0028EE  6F70               	movwf	112,b	;volatile
  4768   0028F0                     
  4769                           ; BSR set to: 14
  4770   0028F0  0012               	return		;funcret
  4771   0028F2                     __end_of_I2C_2_Master_Init:
  4772                           	callstack 0
  4773                           
  4774 ;; *************** function _calibration *****************
  4775 ;; Defined at:
  4776 ;;		line 296 in file "dc_motor.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  4779 ;;		 -> main@motorL(10), 
  4780 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  4781 ;;		 -> main@motorR(10), 
  4782 ;;  turnSpeed       1   36[COMRAM] unsigned char 
  4783 ;;  turnDuration    1   37[COMRAM] PTR unsigned char 
  4784 ;;		 -> main@turnDuration(1), 
  4785 ;;  turnRamp        1   38[COMRAM] unsigned char 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;		None
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4797 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4799 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4800 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4801 ;;Total ram usage:        7 bytes
  4802 ;; Hardware stack levels used: 1
  4803 ;; Hardware stack levels required when called: 6
  4804 ;; This function calls:
  4805 ;;		_turnLeft
  4806 ;;		_turnRight
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text30
  4813   001C52                     __ptext30:
  4814                           	callstack 0
  4815   001C52                     _calibration:
  4816                           	callstack 24
  4817   001C52                     l2789:
  4818                           
  4819                           ;dc_motor.c: 296: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 297: {;dc_motor.c: 299:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  4820   001C52  C023  F017         	movff	calibration@mL,turnLeft@mL
  4821   001C56  C024  F018         	movff	calibration@mR,turnLeft@mR
  4822   001C5A  C025  F019         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  4823   001C5E  5026               	movf	calibration@turnDuration^0,w,c
  4824   001C60  6ED9               	movwf	fsr2l,c
  4825   001C62  6ADA               	clrf	fsr2h,c
  4826   001C64  50DF               	movf	indf2,w,c
  4827   001C66  6E1A               	movwf	turnLeft@turnDuration^0,c
  4828   001C68  C027  F01B         	movff	calibration@turnRamp,turnLeft@turnRamp
  4829   001C6C  EC4E  F00D         	call	_turnLeft	;wreg free
  4830   001C70                     
  4831                           ;dc_motor.c: 300:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4832   001C70  0E05               	movlw	5
  4833   001C72  6E29               	movwf	(??_calibration+1)^0,c
  4834   001C74  0E0F               	movlw	15
  4835   001C76  6E28               	movwf	??_calibration^0,c
  4836   001C78  0EF1               	movlw	241
  4837   001C7A                     u2387:
  4838   001C7A  2EE8               	decfsz	wreg,f,c
  4839   001C7C  D7FE               	bra	u2387
  4840   001C7E  2E28               	decfsz	??_calibration^0,f,c
  4841   001C80  D7FC               	bra	u2387
  4842   001C82  2E29               	decfsz	(??_calibration+1)^0,f,c
  4843   001C84  D7FA               	bra	u2387
  4844   001C86  0000               	nop	
  4845   001C88                     
  4846                           ;dc_motor.c: 301:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  4847   001C88  C023  F017         	movff	calibration@mL,turnLeft@mL
  4848   001C8C  C024  F018         	movff	calibration@mR,turnLeft@mR
  4849   001C90  C025  F019         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  4850   001C94  5026               	movf	calibration@turnDuration^0,w,c
  4851   001C96  6ED9               	movwf	fsr2l,c
  4852   001C98  6ADA               	clrf	fsr2h,c
  4853   001C9A  50DF               	movf	indf2,w,c
  4854   001C9C  6E1A               	movwf	turnLeft@turnDuration^0,c
  4855   001C9E  C027  F01B         	movff	calibration@turnRamp,turnLeft@turnRamp
  4856   001CA2  EC4E  F00D         	call	_turnLeft	;wreg free
  4857                           
  4858                           ;dc_motor.c: 302:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4859   001CA6  0E05               	movlw	5
  4860   001CA8  6E29               	movwf	(??_calibration+1)^0,c
  4861   001CAA  0E0F               	movlw	15
  4862   001CAC  6E28               	movwf	??_calibration^0,c
  4863   001CAE  0EF1               	movlw	241
  4864   001CB0                     u2397:
  4865   001CB0  2EE8               	decfsz	wreg,f,c
  4866   001CB2  D7FE               	bra	u2397
  4867   001CB4  2E28               	decfsz	??_calibration^0,f,c
  4868   001CB6  D7FC               	bra	u2397
  4869   001CB8  2E29               	decfsz	(??_calibration+1)^0,f,c
  4870   001CBA  D7FA               	bra	u2397
  4871   001CBC  0000               	nop	
  4872   001CBE                     
  4873                           ;dc_motor.c: 303:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  4874   001CBE  C023  F017         	movff	calibration@mL,turnRight@mL
  4875   001CC2  C024  F018         	movff	calibration@mR,turnRight@mR
  4876   001CC6  C025  F019         	movff	calibration@turnSpeed,turnRight@turnSpeed
  4877   001CCA  5026               	movf	calibration@turnDuration^0,w,c
  4878   001CCC  6ED9               	movwf	fsr2l,c
  4879   001CCE  6ADA               	clrf	fsr2h,c
  4880   001CD0  50DF               	movf	indf2,w,c
  4881   001CD2  6E1A               	movwf	turnRight@turnDuration^0,c
  4882   001CD4  C027  F01B         	movff	calibration@turnRamp,turnRight@turnRamp
  4883   001CD8  EC73  F00C         	call	_turnRight	;wreg free
  4884   001CDC                     
  4885                           ;dc_motor.c: 304:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4886   001CDC  0E05               	movlw	5
  4887   001CDE  6E29               	movwf	(??_calibration+1)^0,c
  4888   001CE0  0E0F               	movlw	15
  4889   001CE2  6E28               	movwf	??_calibration^0,c
  4890   001CE4  0EF1               	movlw	241
  4891   001CE6                     u2407:
  4892   001CE6  2EE8               	decfsz	wreg,f,c
  4893   001CE8  D7FE               	bra	u2407
  4894   001CEA  2E28               	decfsz	??_calibration^0,f,c
  4895   001CEC  D7FC               	bra	u2407
  4896   001CEE  2E29               	decfsz	(??_calibration+1)^0,f,c
  4897   001CF0  D7FA               	bra	u2407
  4898   001CF2  0000               	nop	
  4899                           
  4900                           ;dc_motor.c: 305:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  4901   001CF4  C023  F017         	movff	calibration@mL,turnRight@mL
  4902   001CF8  C024  F018         	movff	calibration@mR,turnRight@mR
  4903   001CFC  C025  F019         	movff	calibration@turnSpeed,turnRight@turnSpeed
  4904   001D00  5026               	movf	calibration@turnDuration^0,w,c
  4905   001D02  6ED9               	movwf	fsr2l,c
  4906   001D04  6ADA               	clrf	fsr2h,c
  4907   001D06  50DF               	movf	indf2,w,c
  4908   001D08  6E1A               	movwf	turnRight@turnDuration^0,c
  4909   001D0A  C027  F01B         	movff	calibration@turnRamp,turnRight@turnRamp
  4910   001D0E  EC73  F00C         	call	_turnRight	;wreg free
  4911   001D12                     l519:
  4912   001D12  A48E               	btfss	142,2,c	;volatile
  4913   001D14  EF8E  F00E         	goto	u1791
  4914   001D18  EF90  F00E         	goto	u1790
  4915   001D1C                     u1791:
  4916   001D1C  EF97  F00E         	goto	l523
  4917   001D20                     u1790:
  4918   001D20  B68E               	btfsc	142,3,c	;volatile
  4919   001D22  EF95  F00E         	goto	u1801
  4920   001D26  EF97  F00E         	goto	u1800
  4921   001D2A                     u1801:
  4922   001D2A  EF89  F00E         	goto	l519
  4923   001D2E                     u1800:
  4924   001D2E                     l523:
  4925                           
  4926                           ;dc_motor.c: 310:         if (!PORTFbits.RF2 && *turnDuration>0) {
  4927   001D2E  B48E               	btfsc	142,2,c	;volatile
  4928   001D30  EF9C  F00E         	goto	u1811
  4929   001D34  EF9E  F00E         	goto	u1810
  4930   001D38                     u1811:
  4931   001D38  EFAD  F00E         	goto	l524
  4932   001D3C                     u1810:
  4933   001D3C  5026               	movf	calibration@turnDuration^0,w,c
  4934   001D3E  6ED9               	movwf	fsr2l,c
  4935   001D40  6ADA               	clrf	fsr2h,c
  4936   001D42  50DF               	movf	indf2,w,c
  4937   001D44  B4D8               	btfsc	status,2,c
  4938   001D46  EFA7  F00E         	goto	u1821
  4939   001D4A  EFA9  F00E         	goto	u1820
  4940   001D4E                     u1821:
  4941   001D4E  EFAD  F00E         	goto	l524
  4942   001D52                     u1820:
  4943   001D52                     
  4944                           ;dc_motor.c: 311:             *turnDuration--;
  4945   001D52  0626               	decf	calibration@turnDuration^0,f,c
  4946   001D54                     
  4947                           ;dc_motor.c: 312:             LATDbits.LATD7 = 1;
  4948   001D54  8E7C               	bsf	124,7,c	;volatile
  4949                           
  4950                           ;dc_motor.c: 313:         }
  4951   001D56  EFB6  F00E         	goto	l2811
  4952   001D5A                     l524:
  4953   001D5A  B68E               	btfsc	142,3,c	;volatile
  4954   001D5C  EFB2  F00E         	goto	u1831
  4955   001D60  EFB4  F00E         	goto	u1830
  4956   001D64                     u1831:
  4957   001D64  EFB6  F00E         	goto	l2811
  4958   001D68                     u1830:
  4959   001D68                     
  4960                           ;dc_motor.c: 316:             *turnDuration++;
  4961   001D68  2A26               	incf	calibration@turnDuration^0,f,c
  4962   001D6A                     
  4963                           ;dc_motor.c: 317:             LATHbits.LATH3 = 1;
  4964   001D6A  8680               	bsf	128,3,c	;volatile
  4965   001D6C                     l2811:
  4966                           
  4967                           ;dc_motor.c: 320:         _delay((unsigned long)((500)*(64000000/4000.0)));
  4968   001D6C  0E29               	movlw	41
  4969   001D6E  6E29               	movwf	(??_calibration+1)^0,c
  4970   001D70  0E96               	movlw	150
  4971   001D72  6E28               	movwf	??_calibration^0,c
  4972   001D74  0E7F               	movlw	127
  4973   001D76                     u2417:
  4974   001D76  2EE8               	decfsz	wreg,f,c
  4975   001D78  D7FE               	bra	u2417
  4976   001D7A  2E28               	decfsz	??_calibration^0,f,c
  4977   001D7C  D7FC               	bra	u2417
  4978   001D7E  2E29               	decfsz	(??_calibration+1)^0,f,c
  4979   001D80  D7FA               	bra	u2417
  4980   001D82  0000               	nop	
  4981   001D84                     
  4982                           ;dc_motor.c: 322:         if (!PORTFbits.RF3) {
  4983   001D84  B68E               	btfsc	142,3,c	;volatile
  4984   001D86  EFC7  F00E         	goto	u1841
  4985   001D8A  EFC9  F00E         	goto	u1840
  4986   001D8E                     u1841:
  4987   001D8E  EFCC  F00E         	goto	l527
  4988   001D92                     u1840:
  4989   001D92                     
  4990                           ;dc_motor.c: 323:             *turnDuration--;
  4991   001D92  0626               	decf	calibration@turnDuration^0,f,c
  4992                           
  4993                           ;dc_motor.c: 324:             break;
  4994   001D94  EFD0  F00E         	goto	l528
  4995   001D98                     l527:
  4996                           
  4997                           ;dc_motor.c: 327:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  4998   001D98  9680               	bcf	128,3,c	;volatile
  4999   001D9A  9E7C               	bcf	124,7,c	;volatile
  5000   001D9C  EF29  F00E         	goto	l2789
  5001   001DA0                     l528:
  5002                           
  5003                           ;dc_motor.c: 341:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5004   001DA0  8680               	bsf	128,3,c	;volatile
  5005   001DA2  8E7C               	bsf	124,7,c	;volatile
  5006   001DA4                     
  5007                           ;dc_motor.c: 342:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5008   001DA4  0E09               	movlw	9
  5009   001DA6  6E29               	movwf	(??_calibration+1)^0,c
  5010   001DA8  0E1E               	movlw	30
  5011   001DAA  6E28               	movwf	??_calibration^0,c
  5012   001DAC  0EE4               	movlw	228
  5013   001DAE                     u2427:
  5014   001DAE  2EE8               	decfsz	wreg,f,c
  5015   001DB0  D7FE               	bra	u2427
  5016   001DB2  2E28               	decfsz	??_calibration^0,f,c
  5017   001DB4  D7FC               	bra	u2427
  5018   001DB6  2E29               	decfsz	(??_calibration+1)^0,f,c
  5019   001DB8  D7FA               	bra	u2427
  5020   001DBA  D000               	nop2	
  5021   001DBC                     
  5022                           ;dc_motor.c: 343:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5023   001DBC  9680               	bcf	128,3,c	;volatile
  5024   001DBE  9E7C               	bcf	124,7,c	;volatile
  5025   001DC0  0012               	return		;funcret
  5026   001DC2                     __end_of_calibration:
  5027                           	callstack 0
  5028                           
  5029 ;; *************** function _turnRight *****************
  5030 ;; Defined at:
  5031 ;;		line 214 in file "dc_motor.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  5034 ;;		 -> main@motorL(10), 
  5035 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  5036 ;;		 -> main@motorR(10), 
  5037 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  5038 ;;  turnDuration    1   25[COMRAM] unsigned char 
  5039 ;;  turnRamp        1   26[COMRAM] unsigned char 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  cur_power       2   32[COMRAM] int 
  5042 ;;  i               2   30[COMRAM] int 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5052 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5053 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5054 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5055 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5056 ;;Total ram usage:       12 bytes
  5057 ;; Hardware stack levels used: 1
  5058 ;; Hardware stack levels required when called: 5
  5059 ;; This function calls:
  5060 ;;		_setMotorPWM
  5061 ;; This function is called by:
  5062 ;;		_move
  5063 ;;		_calibration
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text31
  5068   0018E6                     __ptext31:
  5069                           	callstack 0
  5070   0018E6                     _turnRight:
  5071                           	callstack 24
  5072   0018E6                     
  5073                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  5074   0018E6  5017               	movf	turnRight@mL^0,w,c
  5075   0018E8  6ED9               	movwf	fsr2l,c
  5076   0018EA  6ADA               	clrf	fsr2h,c
  5077   0018EC  0E01               	movlw	1
  5078   0018EE  26D9               	addwf	fsr2l,f,c
  5079   0018F0  0E01               	movlw	1
  5080   0018F2  6EDF               	movwf	indf2,c
  5081                           
  5082                           ;dc_motor.c: 217:     mR->direction = 0;
  5083   0018F4  5018               	movf	turnRight@mR^0,w,c
  5084   0018F6  6ED9               	movwf	fsr2l,c
  5085   0018F8  6ADA               	clrf	fsr2h,c
  5086   0018FA  0E01               	movlw	1
  5087   0018FC  26D9               	addwf	fsr2l,f,c
  5088   0018FE  6ADF               	clrf	indf2,c
  5089   001900                     
  5090                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  5091   001900  0E00               	movlw	0
  5092   001902  6E22               	movwf	(turnRight@cur_power+1)^0,c
  5093   001904  0E01               	movlw	1
  5094   001906  6E21               	movwf	turnRight@cur_power^0,c
  5095   001908  EFC8  F00C         	goto	l2509
  5096   00190C                     l2495:
  5097                           
  5098                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  5099   00190C  5017               	movf	turnRight@mL^0,w,c
  5100   00190E  6ED9               	movwf	fsr2l,c
  5101   001910  6ADA               	clrf	fsr2h,c
  5102   001912  5017               	movf	turnRight@mL^0,w,c
  5103   001914  6EE1               	movwf	fsr1l,c
  5104   001916  6AE2               	clrf	fsr1h,c
  5105   001918  0E09               	movlw	9
  5106   00191A  26E1               	addwf	fsr1l,f,c
  5107   00191C  50E7               	movf	indf1,w,c
  5108   00191E  2421               	addwf	turnRight@cur_power^0,w,c
  5109   001920  6EDF               	movwf	indf2,c
  5110                           
  5111                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  5112   001922  5018               	movf	turnRight@mR^0,w,c
  5113   001924  6ED9               	movwf	fsr2l,c
  5114   001926  6ADA               	clrf	fsr2h,c
  5115   001928  5018               	movf	turnRight@mR^0,w,c
  5116   00192A  6EE1               	movwf	fsr1l,c
  5117   00192C  6AE2               	clrf	fsr1h,c
  5118   00192E  0E09               	movlw	9
  5119   001930  26E1               	addwf	fsr1l,f,c
  5120   001932  50E7               	movf	indf1,w,c
  5121   001934  2421               	addwf	turnRight@cur_power^0,w,c
  5122   001936  6EDF               	movwf	indf2,c
  5123   001938                     
  5124                           ;dc_motor.c: 223:         setMotorPWM(mL);
  5125   001938  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  5126   00193C  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5127   001940                     
  5128                           ;dc_motor.c: 224:         setMotorPWM(mR);
  5129   001940  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  5130   001944  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5131   001948                     
  5132                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  5133   001948  0E00               	movlw	0
  5134   00194A  6E20               	movwf	(turnRight@i+1)^0,c
  5135   00194C  0E00               	movlw	0
  5136   00194E  6E1F               	movwf	turnRight@i^0,c
  5137   001950  EFB4  F00C         	goto	l477
  5138   001954                     l2503:
  5139                           
  5140                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5141   001954  0E68               	movlw	104
  5142   001956  6E1C               	movwf	??_turnRight^0,c
  5143   001958  0EE4               	movlw	228
  5144   00195A                     u2437:
  5145   00195A  2EE8               	decfsz	wreg,f,c
  5146   00195C  D7FE               	bra	u2437
  5147   00195E  2E1C               	decfsz	??_turnRight^0,f,c
  5148   001960  D7FC               	bra	u2437
  5149   001962  D000               	nop2	
  5150   001964                     
  5151                           ;dc_motor.c: 227:         }
  5152   001964  4A1F               	infsnz	turnRight@i^0,f,c
  5153   001966  2A20               	incf	(turnRight@i+1)^0,f,c
  5154   001968                     l477:
  5155   001968  501B               	movf	turnRight@turnRamp^0,w,c
  5156   00196A  6E1C               	movwf	??_turnRight^0,c
  5157   00196C  6A1D               	clrf	(??_turnRight+1)^0,c
  5158   00196E  501C               	movf	??_turnRight^0,w,c
  5159   001970  5C1F               	subwf	turnRight@i^0,w,c
  5160   001972  5020               	movf	(turnRight@i+1)^0,w,c
  5161   001974  0A80               	xorlw	128
  5162   001976  6E1E               	movwf	(??_turnRight+2)^0,c
  5163   001978  501D               	movf	(??_turnRight+1)^0,w,c
  5164   00197A  0A80               	xorlw	128
  5165   00197C  581E               	subwfb	(??_turnRight+2)^0,w,c
  5166   00197E  A0D8               	btfss	status,0,c
  5167   001980  EFC4  F00C         	goto	u1491
  5168   001984  EFC6  F00C         	goto	u1490
  5169   001988                     u1491:
  5170   001988  EFAA  F00C         	goto	l2503
  5171   00198C                     u1490:
  5172   00198C                     
  5173                           ;dc_motor.c: 228:     }
  5174   00198C  4A21               	infsnz	turnRight@cur_power^0,f,c
  5175   00198E  2A22               	incf	(turnRight@cur_power+1)^0,f,c
  5176   001990                     l2509:
  5177   001990  5019               	movf	turnRight@turnSpeed^0,w,c
  5178   001992  6E1C               	movwf	??_turnRight^0,c
  5179   001994  6A1D               	clrf	(??_turnRight+1)^0,c
  5180   001996  5021               	movf	turnRight@cur_power^0,w,c
  5181   001998  5C1C               	subwf	??_turnRight^0,w,c
  5182   00199A  501D               	movf	(??_turnRight+1)^0,w,c
  5183   00199C  0A80               	xorlw	128
  5184   00199E  6E1E               	movwf	(??_turnRight+2)^0,c
  5185   0019A0  5022               	movf	(turnRight@cur_power+1)^0,w,c
  5186   0019A2  0A80               	xorlw	128
  5187   0019A4  581E               	subwfb	(??_turnRight+2)^0,w,c
  5188   0019A6  B0D8               	btfsc	status,0,c
  5189   0019A8  EFD8  F00C         	goto	u1501
  5190   0019AC  EFDA  F00C         	goto	u1500
  5191   0019B0                     u1501:
  5192   0019B0  EF86  F00C         	goto	l2495
  5193   0019B4                     u1500:
  5194   0019B4                     
  5195                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  5196   0019B4  0E00               	movlw	0
  5197   0019B6  6E20               	movwf	(turnRight@i+1)^0,c
  5198   0019B8  0E00               	movlw	0
  5199   0019BA  6E1F               	movwf	turnRight@i^0,c
  5200   0019BC  EFEA  F00C         	goto	l481
  5201   0019C0                     l2513:
  5202                           
  5203                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5204   0019C0  0E68               	movlw	104
  5205   0019C2  6E1C               	movwf	??_turnRight^0,c
  5206   0019C4  0EE4               	movlw	228
  5207   0019C6                     u2447:
  5208   0019C6  2EE8               	decfsz	wreg,f,c
  5209   0019C8  D7FE               	bra	u2447
  5210   0019CA  2E1C               	decfsz	??_turnRight^0,f,c
  5211   0019CC  D7FC               	bra	u2447
  5212   0019CE  D000               	nop2	
  5213   0019D0                     
  5214                           ;dc_motor.c: 232:         }
  5215   0019D0  4A1F               	infsnz	turnRight@i^0,f,c
  5216   0019D2  2A20               	incf	(turnRight@i+1)^0,f,c
  5217   0019D4                     l481:
  5218   0019D4  501A               	movf	turnRight@turnDuration^0,w,c
  5219   0019D6  6E1C               	movwf	??_turnRight^0,c
  5220   0019D8  6A1D               	clrf	(??_turnRight+1)^0,c
  5221   0019DA  501C               	movf	??_turnRight^0,w,c
  5222   0019DC  5C1F               	subwf	turnRight@i^0,w,c
  5223   0019DE  5020               	movf	(turnRight@i+1)^0,w,c
  5224   0019E0  0A80               	xorlw	128
  5225   0019E2  6E1E               	movwf	(??_turnRight+2)^0,c
  5226   0019E4  501D               	movf	(??_turnRight+1)^0,w,c
  5227   0019E6  0A80               	xorlw	128
  5228   0019E8  581E               	subwfb	(??_turnRight+2)^0,w,c
  5229   0019EA  A0D8               	btfss	status,0,c
  5230   0019EC  EFFA  F00C         	goto	u1511
  5231   0019F0  EFFC  F00C         	goto	u1510
  5232   0019F4                     u1511:
  5233   0019F4  EFE0  F00C         	goto	l2513
  5234   0019F8                     u1510:
  5235   0019F8                     
  5236                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  5237   0019F8  C019  F021         	movff	turnRight@turnSpeed,turnRight@cur_power
  5238   0019FC  6A22               	clrf	(turnRight@cur_power+1)^0,c
  5239   0019FE                     l2517:
  5240   0019FE  BE22               	btfsc	(turnRight@cur_power+1)^0,7,c
  5241   001A00  EF06  F00D         	goto	u1520
  5242   001A04  EF04  F00D         	goto	u1521
  5243   001A08                     u1521:
  5244   001A08  EF08  F00D         	goto	l2521
  5245   001A0C                     u1520:
  5246   001A0C  EF4D  F00D         	goto	l489
  5247   001A10                     l2521:
  5248                           
  5249                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  5250   001A10  5017               	movf	turnRight@mL^0,w,c
  5251   001A12  6ED9               	movwf	fsr2l,c
  5252   001A14  6ADA               	clrf	fsr2h,c
  5253   001A16  5017               	movf	turnRight@mL^0,w,c
  5254   001A18  6EE1               	movwf	fsr1l,c
  5255   001A1A  6AE2               	clrf	fsr1h,c
  5256   001A1C  0E09               	movlw	9
  5257   001A1E  26E1               	addwf	fsr1l,f,c
  5258   001A20  50E7               	movf	indf1,w,c
  5259   001A22  2421               	addwf	turnRight@cur_power^0,w,c
  5260   001A24  6EDF               	movwf	indf2,c
  5261                           
  5262                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  5263   001A26  5018               	movf	turnRight@mR^0,w,c
  5264   001A28  6ED9               	movwf	fsr2l,c
  5265   001A2A  6ADA               	clrf	fsr2h,c
  5266   001A2C  5018               	movf	turnRight@mR^0,w,c
  5267   001A2E  6EE1               	movwf	fsr1l,c
  5268   001A30  6AE2               	clrf	fsr1h,c
  5269   001A32  0E09               	movlw	9
  5270   001A34  26E1               	addwf	fsr1l,f,c
  5271   001A36  50E7               	movf	indf1,w,c
  5272   001A38  2421               	addwf	turnRight@cur_power^0,w,c
  5273   001A3A  6EDF               	movwf	indf2,c
  5274   001A3C                     
  5275                           ;dc_motor.c: 237:         setMotorPWM(mL);
  5276   001A3C  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  5277   001A40  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5278   001A44                     
  5279                           ;dc_motor.c: 238:         setMotorPWM(mR);
  5280   001A44  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  5281   001A48  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5282   001A4C                     
  5283                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  5284   001A4C  0E00               	movlw	0
  5285   001A4E  6E20               	movwf	(turnRight@i+1)^0,c
  5286   001A50  0E00               	movlw	0
  5287   001A52  6E1F               	movwf	turnRight@i^0,c
  5288   001A54  EF36  F00D         	goto	l486
  5289   001A58                     l2529:
  5290                           
  5291                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5292   001A58  0E68               	movlw	104
  5293   001A5A  6E1C               	movwf	??_turnRight^0,c
  5294   001A5C  0EE4               	movlw	228
  5295   001A5E                     u2457:
  5296   001A5E  2EE8               	decfsz	wreg,f,c
  5297   001A60  D7FE               	bra	u2457
  5298   001A62  2E1C               	decfsz	??_turnRight^0,f,c
  5299   001A64  D7FC               	bra	u2457
  5300   001A66  D000               	nop2	
  5301   001A68                     
  5302                           ;dc_motor.c: 241:         }
  5303   001A68  4A1F               	infsnz	turnRight@i^0,f,c
  5304   001A6A  2A20               	incf	(turnRight@i+1)^0,f,c
  5305   001A6C                     l486:
  5306   001A6C  501B               	movf	turnRight@turnRamp^0,w,c
  5307   001A6E  6E1C               	movwf	??_turnRight^0,c
  5308   001A70  6A1D               	clrf	(??_turnRight+1)^0,c
  5309   001A72  501C               	movf	??_turnRight^0,w,c
  5310   001A74  5C1F               	subwf	turnRight@i^0,w,c
  5311   001A76  5020               	movf	(turnRight@i+1)^0,w,c
  5312   001A78  0A80               	xorlw	128
  5313   001A7A  6E1E               	movwf	(??_turnRight+2)^0,c
  5314   001A7C  501D               	movf	(??_turnRight+1)^0,w,c
  5315   001A7E  0A80               	xorlw	128
  5316   001A80  581E               	subwfb	(??_turnRight+2)^0,w,c
  5317   001A82  A0D8               	btfss	status,0,c
  5318   001A84  EF46  F00D         	goto	u1531
  5319   001A88  EF48  F00D         	goto	u1530
  5320   001A8C                     u1531:
  5321   001A8C  EF2C  F00D         	goto	l2529
  5322   001A90                     u1530:
  5323   001A90                     
  5324                           ;dc_motor.c: 242:     }
  5325   001A90  0621               	decf	turnRight@cur_power^0,f,c
  5326   001A92  A0D8               	btfss	status,0,c
  5327   001A94  0622               	decf	(turnRight@cur_power+1)^0,f,c
  5328   001A96  EFFF  F00C         	goto	l2517
  5329   001A9A                     l489:
  5330   001A9A  0012               	return		;funcret
  5331   001A9C                     __end_of_turnRight:
  5332                           	callstack 0
  5333                           
  5334 ;; *************** function _turnLeft *****************
  5335 ;; Defined at:
  5336 ;;		line 182 in file "dc_motor.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  5339 ;;		 -> main@motorL(10), 
  5340 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  5341 ;;		 -> main@motorR(10), 
  5342 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  5343 ;;  turnDuration    1   25[COMRAM] unsigned char 
  5344 ;;  turnRamp        1   26[COMRAM] unsigned char 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  cur_power       2   32[COMRAM] int 
  5347 ;;  i               2   30[COMRAM] int 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      void 
  5350 ;; Registers used:
  5351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5357 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5358 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5360 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5361 ;;Total ram usage:       12 bytes
  5362 ;; Hardware stack levels used: 1
  5363 ;; Hardware stack levels required when called: 5
  5364 ;; This function calls:
  5365 ;;		_setMotorPWM
  5366 ;; This function is called by:
  5367 ;;		_move
  5368 ;;		_calibration
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text32
  5373   001A9C                     __ptext32:
  5374                           	callstack 0
  5375   001A9C                     _turnLeft:
  5376                           	callstack 24
  5377   001A9C                     
  5378                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  5379   001A9C  5017               	movf	turnLeft@mL^0,w,c
  5380   001A9E  6ED9               	movwf	fsr2l,c
  5381   001AA0  6ADA               	clrf	fsr2h,c
  5382   001AA2  0E01               	movlw	1
  5383   001AA4  26D9               	addwf	fsr2l,f,c
  5384   001AA6  6ADF               	clrf	indf2,c
  5385                           
  5386                           ;dc_motor.c: 185:     mR->direction = 1;
  5387   001AA8  5018               	movf	turnLeft@mR^0,w,c
  5388   001AAA  6ED9               	movwf	fsr2l,c
  5389   001AAC  6ADA               	clrf	fsr2h,c
  5390   001AAE  0E01               	movlw	1
  5391   001AB0  26D9               	addwf	fsr2l,f,c
  5392   001AB2  0E01               	movlw	1
  5393   001AB4  6EDF               	movwf	indf2,c
  5394   001AB6                     
  5395                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  5396   001AB6  0E00               	movlw	0
  5397   001AB8  6E22               	movwf	(turnLeft@cur_power+1)^0,c
  5398   001ABA  0E01               	movlw	1
  5399   001ABC  6E21               	movwf	turnLeft@cur_power^0,c
  5400   001ABE  EFA3  F00D         	goto	l2575
  5401   001AC2                     l2561:
  5402                           
  5403                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  5404   001AC2  5017               	movf	turnLeft@mL^0,w,c
  5405   001AC4  6ED9               	movwf	fsr2l,c
  5406   001AC6  6ADA               	clrf	fsr2h,c
  5407   001AC8  5017               	movf	turnLeft@mL^0,w,c
  5408   001ACA  6EE1               	movwf	fsr1l,c
  5409   001ACC  6AE2               	clrf	fsr1h,c
  5410   001ACE  0E09               	movlw	9
  5411   001AD0  26E1               	addwf	fsr1l,f,c
  5412   001AD2  50E7               	movf	indf1,w,c
  5413   001AD4  2421               	addwf	turnLeft@cur_power^0,w,c
  5414   001AD6  6EDF               	movwf	indf2,c
  5415                           
  5416                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  5417   001AD8  5018               	movf	turnLeft@mR^0,w,c
  5418   001ADA  6ED9               	movwf	fsr2l,c
  5419   001ADC  6ADA               	clrf	fsr2h,c
  5420   001ADE  5018               	movf	turnLeft@mR^0,w,c
  5421   001AE0  6EE1               	movwf	fsr1l,c
  5422   001AE2  6AE2               	clrf	fsr1h,c
  5423   001AE4  0E09               	movlw	9
  5424   001AE6  26E1               	addwf	fsr1l,f,c
  5425   001AE8  50E7               	movf	indf1,w,c
  5426   001AEA  2421               	addwf	turnLeft@cur_power^0,w,c
  5427   001AEC  6EDF               	movwf	indf2,c
  5428   001AEE                     
  5429                           ;dc_motor.c: 191:         setMotorPWM(mL);
  5430   001AEE  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  5431   001AF2  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5432   001AF6                     
  5433                           ;dc_motor.c: 192:         setMotorPWM(mR);
  5434   001AF6  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  5435   001AFA  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5436   001AFE                     
  5437                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  5438   001AFE  0E00               	movlw	0
  5439   001B00  6E20               	movwf	(turnLeft@i+1)^0,c
  5440   001B02  0E00               	movlw	0
  5441   001B04  6E1F               	movwf	turnLeft@i^0,c
  5442   001B06  EF8F  F00D         	goto	l460
  5443   001B0A                     l2569:
  5444                           
  5445                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5446   001B0A  0E68               	movlw	104
  5447   001B0C  6E1C               	movwf	??_turnLeft^0,c
  5448   001B0E  0EE4               	movlw	228
  5449   001B10                     u2467:
  5450   001B10  2EE8               	decfsz	wreg,f,c
  5451   001B12  D7FE               	bra	u2467
  5452   001B14  2E1C               	decfsz	??_turnLeft^0,f,c
  5453   001B16  D7FC               	bra	u2467
  5454   001B18  D000               	nop2	
  5455   001B1A                     
  5456                           ;dc_motor.c: 195:         }
  5457   001B1A  4A1F               	infsnz	turnLeft@i^0,f,c
  5458   001B1C  2A20               	incf	(turnLeft@i+1)^0,f,c
  5459   001B1E                     l460:
  5460   001B1E  501B               	movf	turnLeft@turnRamp^0,w,c
  5461   001B20  6E1C               	movwf	??_turnLeft^0,c
  5462   001B22  6A1D               	clrf	(??_turnLeft+1)^0,c
  5463   001B24  501C               	movf	??_turnLeft^0,w,c
  5464   001B26  5C1F               	subwf	turnLeft@i^0,w,c
  5465   001B28  5020               	movf	(turnLeft@i+1)^0,w,c
  5466   001B2A  0A80               	xorlw	128
  5467   001B2C  6E1E               	movwf	(??_turnLeft+2)^0,c
  5468   001B2E  501D               	movf	(??_turnLeft+1)^0,w,c
  5469   001B30  0A80               	xorlw	128
  5470   001B32  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5471   001B34  A0D8               	btfss	status,0,c
  5472   001B36  EF9F  F00D         	goto	u1561
  5473   001B3A  EFA1  F00D         	goto	u1560
  5474   001B3E                     u1561:
  5475   001B3E  EF85  F00D         	goto	l2569
  5476   001B42                     u1560:
  5477   001B42                     
  5478                           ;dc_motor.c: 196:     }
  5479   001B42  4A21               	infsnz	turnLeft@cur_power^0,f,c
  5480   001B44  2A22               	incf	(turnLeft@cur_power+1)^0,f,c
  5481   001B46                     l2575:
  5482   001B46  5019               	movf	turnLeft@turnSpeed^0,w,c
  5483   001B48  6E1C               	movwf	??_turnLeft^0,c
  5484   001B4A  6A1D               	clrf	(??_turnLeft+1)^0,c
  5485   001B4C  5021               	movf	turnLeft@cur_power^0,w,c
  5486   001B4E  5C1C               	subwf	??_turnLeft^0,w,c
  5487   001B50  501D               	movf	(??_turnLeft+1)^0,w,c
  5488   001B52  0A80               	xorlw	128
  5489   001B54  6E1E               	movwf	(??_turnLeft+2)^0,c
  5490   001B56  5022               	movf	(turnLeft@cur_power+1)^0,w,c
  5491   001B58  0A80               	xorlw	128
  5492   001B5A  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5493   001B5C  B0D8               	btfsc	status,0,c
  5494   001B5E  EFB3  F00D         	goto	u1571
  5495   001B62  EFB5  F00D         	goto	u1570
  5496   001B66                     u1571:
  5497   001B66  EF61  F00D         	goto	l2561
  5498   001B6A                     u1570:
  5499   001B6A                     
  5500                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  5501   001B6A  0E00               	movlw	0
  5502   001B6C  6E20               	movwf	(turnLeft@i+1)^0,c
  5503   001B6E  0E00               	movlw	0
  5504   001B70  6E1F               	movwf	turnLeft@i^0,c
  5505   001B72  EFC5  F00D         	goto	l464
  5506   001B76                     l2579:
  5507                           
  5508                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5509   001B76  0E68               	movlw	104
  5510   001B78  6E1C               	movwf	??_turnLeft^0,c
  5511   001B7A  0EE4               	movlw	228
  5512   001B7C                     u2477:
  5513   001B7C  2EE8               	decfsz	wreg,f,c
  5514   001B7E  D7FE               	bra	u2477
  5515   001B80  2E1C               	decfsz	??_turnLeft^0,f,c
  5516   001B82  D7FC               	bra	u2477
  5517   001B84  D000               	nop2	
  5518   001B86                     
  5519                           ;dc_motor.c: 200:         }
  5520   001B86  4A1F               	infsnz	turnLeft@i^0,f,c
  5521   001B88  2A20               	incf	(turnLeft@i+1)^0,f,c
  5522   001B8A                     l464:
  5523   001B8A  501A               	movf	turnLeft@turnDuration^0,w,c
  5524   001B8C  6E1C               	movwf	??_turnLeft^0,c
  5525   001B8E  6A1D               	clrf	(??_turnLeft+1)^0,c
  5526   001B90  501C               	movf	??_turnLeft^0,w,c
  5527   001B92  5C1F               	subwf	turnLeft@i^0,w,c
  5528   001B94  5020               	movf	(turnLeft@i+1)^0,w,c
  5529   001B96  0A80               	xorlw	128
  5530   001B98  6E1E               	movwf	(??_turnLeft+2)^0,c
  5531   001B9A  501D               	movf	(??_turnLeft+1)^0,w,c
  5532   001B9C  0A80               	xorlw	128
  5533   001B9E  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5534   001BA0  A0D8               	btfss	status,0,c
  5535   001BA2  EFD5  F00D         	goto	u1581
  5536   001BA6  EFD7  F00D         	goto	u1580
  5537   001BAA                     u1581:
  5538   001BAA  EFBB  F00D         	goto	l2579
  5539   001BAE                     u1580:
  5540   001BAE                     
  5541                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  5542   001BAE  C019  F021         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  5543   001BB2  6A22               	clrf	(turnLeft@cur_power+1)^0,c
  5544   001BB4                     l2583:
  5545   001BB4  BE22               	btfsc	(turnLeft@cur_power+1)^0,7,c
  5546   001BB6  EFE1  F00D         	goto	u1590
  5547   001BBA  EFDF  F00D         	goto	u1591
  5548   001BBE                     u1591:
  5549   001BBE  EFE3  F00D         	goto	l2587
  5550   001BC2                     u1590:
  5551   001BC2  EF28  F00E         	goto	l472
  5552   001BC6                     l2587:
  5553                           
  5554                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  5555   001BC6  5017               	movf	turnLeft@mL^0,w,c
  5556   001BC8  6ED9               	movwf	fsr2l,c
  5557   001BCA  6ADA               	clrf	fsr2h,c
  5558   001BCC  5017               	movf	turnLeft@mL^0,w,c
  5559   001BCE  6EE1               	movwf	fsr1l,c
  5560   001BD0  6AE2               	clrf	fsr1h,c
  5561   001BD2  0E09               	movlw	9
  5562   001BD4  26E1               	addwf	fsr1l,f,c
  5563   001BD6  50E7               	movf	indf1,w,c
  5564   001BD8  2421               	addwf	turnLeft@cur_power^0,w,c
  5565   001BDA  6EDF               	movwf	indf2,c
  5566                           
  5567                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  5568   001BDC  5018               	movf	turnLeft@mR^0,w,c
  5569   001BDE  6ED9               	movwf	fsr2l,c
  5570   001BE0  6ADA               	clrf	fsr2h,c
  5571   001BE2  5018               	movf	turnLeft@mR^0,w,c
  5572   001BE4  6EE1               	movwf	fsr1l,c
  5573   001BE6  6AE2               	clrf	fsr1h,c
  5574   001BE8  0E09               	movlw	9
  5575   001BEA  26E1               	addwf	fsr1l,f,c
  5576   001BEC  50E7               	movf	indf1,w,c
  5577   001BEE  2421               	addwf	turnLeft@cur_power^0,w,c
  5578   001BF0  6EDF               	movwf	indf2,c
  5579   001BF2                     
  5580                           ;dc_motor.c: 205:         setMotorPWM(mL);
  5581   001BF2  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  5582   001BF6  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5583   001BFA                     
  5584                           ;dc_motor.c: 206:         setMotorPWM(mR);
  5585   001BFA  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  5586   001BFE  ECE1  F00E         	call	_setMotorPWM	;wreg free
  5587   001C02                     
  5588                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  5589   001C02  0E00               	movlw	0
  5590   001C04  6E20               	movwf	(turnLeft@i+1)^0,c
  5591   001C06  0E00               	movlw	0
  5592   001C08  6E1F               	movwf	turnLeft@i^0,c
  5593   001C0A  EF11  F00E         	goto	l469
  5594   001C0E                     l2595:
  5595                           
  5596                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5597   001C0E  0E68               	movlw	104
  5598   001C10  6E1C               	movwf	??_turnLeft^0,c
  5599   001C12  0EE4               	movlw	228
  5600   001C14                     u2487:
  5601   001C14  2EE8               	decfsz	wreg,f,c
  5602   001C16  D7FE               	bra	u2487
  5603   001C18  2E1C               	decfsz	??_turnLeft^0,f,c
  5604   001C1A  D7FC               	bra	u2487
  5605   001C1C  D000               	nop2	
  5606   001C1E                     
  5607                           ;dc_motor.c: 209:         }
  5608   001C1E  4A1F               	infsnz	turnLeft@i^0,f,c
  5609   001C20  2A20               	incf	(turnLeft@i+1)^0,f,c
  5610   001C22                     l469:
  5611   001C22  501B               	movf	turnLeft@turnRamp^0,w,c
  5612   001C24  6E1C               	movwf	??_turnLeft^0,c
  5613   001C26  6A1D               	clrf	(??_turnLeft+1)^0,c
  5614   001C28  501C               	movf	??_turnLeft^0,w,c
  5615   001C2A  5C1F               	subwf	turnLeft@i^0,w,c
  5616   001C2C  5020               	movf	(turnLeft@i+1)^0,w,c
  5617   001C2E  0A80               	xorlw	128
  5618   001C30  6E1E               	movwf	(??_turnLeft+2)^0,c
  5619   001C32  501D               	movf	(??_turnLeft+1)^0,w,c
  5620   001C34  0A80               	xorlw	128
  5621   001C36  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5622   001C38  A0D8               	btfss	status,0,c
  5623   001C3A  EF21  F00E         	goto	u1601
  5624   001C3E  EF23  F00E         	goto	u1600
  5625   001C42                     u1601:
  5626   001C42  EF07  F00E         	goto	l2595
  5627   001C46                     u1600:
  5628   001C46                     
  5629                           ;dc_motor.c: 210:     }
  5630   001C46  0621               	decf	turnLeft@cur_power^0,f,c
  5631   001C48  A0D8               	btfss	status,0,c
  5632   001C4A  0622               	decf	(turnLeft@cur_power+1)^0,f,c
  5633   001C4C  EFDA  F00D         	goto	l2583
  5634   001C50                     l472:
  5635   001C50  0012               	return		;funcret
  5636   001C52                     __end_of_turnLeft:
  5637                           	callstack 0
  5638                           
  5639 ;; *************** function _setMotorPWM *****************
  5640 ;; Defined at:
  5641 ;;		line 65 in file "dc_motor.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  m               1   17[COMRAM] PTR struct DC_motor
  5644 ;;		 -> main@motorR(10), main@motorL(10), 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  negDuty         1   21[COMRAM] unsigned char 
  5647 ;;  posDuty         1   20[COMRAM] unsigned char 
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5657 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5659 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5660 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5661 ;;Total ram usage:        5 bytes
  5662 ;; Hardware stack levels used: 1
  5663 ;; Hardware stack levels required when called: 4
  5664 ;; This function calls:
  5665 ;;		___lwdiv
  5666 ;;		___wmul
  5667 ;; This function is called by:
  5668 ;;		_turnLeft
  5669 ;;		_turnRight
  5670 ;;		_fullSpeedAhead
  5671 ;;		_reverseOneSquare
  5672 ;;		_stop
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text33
  5677   001DC2                     __ptext33:
  5678                           	callstack 0
  5679   001DC2                     _setMotorPWM:
  5680                           	callstack 24
  5681   001DC2                     
  5682                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  5683   001DC2  5012               	movf	setMotorPWM@m^0,w,c
  5684   001DC4  6ED9               	movwf	fsr2l,c
  5685   001DC6  6ADA               	clrf	fsr2h,c
  5686   001DC8  0E02               	movlw	2
  5687   001DCA  26D9               	addwf	fsr2l,f,c
  5688   001DCC  50DF               	movf	indf2,w,c
  5689   001DCE  B4D8               	btfsc	status,2,c
  5690   001DD0  EFEC  F00E         	goto	u1311
  5691   001DD4  EFEE  F00E         	goto	u1310
  5692   001DD8                     u1311:
  5693   001DD8  EF1E  F00F         	goto	l2371
  5694   001DDC                     u1310:
  5695   001DDC                     
  5696                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5697   001DDC  5012               	movf	setMotorPWM@m^0,w,c
  5698   001DDE  6ED9               	movwf	fsr2l,c
  5699   001DE0  6ADA               	clrf	fsr2h,c
  5700   001DE2  50DF               	movf	indf2,w,c
  5701   001DE4  6E13               	movwf	??_setMotorPWM^0,c
  5702   001DE6  5013               	movf	??_setMotorPWM^0,w,c
  5703   001DE8  6E05               	movwf	___wmul@multiplier^0,c
  5704   001DEA  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5705   001DEC  5012               	movf	setMotorPWM@m^0,w,c
  5706   001DEE  6ED9               	movwf	fsr2l,c
  5707   001DF0  6ADA               	clrf	fsr2h,c
  5708   001DF2  0E03               	movlw	3
  5709   001DF4  26D9               	addwf	fsr2l,f,c
  5710   001DF6  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5711   001DFA  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5712   001DFE  ECB6  F014         	call	___wmul	;wreg free
  5713   001E02  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5714   001E06  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5715   001E0A  0E00               	movlw	0
  5716   001E0C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5717   001E0E  0E64               	movlw	100
  5718   001E10  6E0D               	movwf	___lwdiv@divisor^0,c
  5719   001E12  ECAC  F012         	call	___lwdiv	;wreg free
  5720   001E16  5012               	movf	setMotorPWM@m^0,w,c
  5721   001E18  6ED9               	movwf	fsr2l,c
  5722   001E1A  6ADA               	clrf	fsr2h,c
  5723   001E1C  0E03               	movlw	3
  5724   001E1E  26D9               	addwf	fsr2l,f,c
  5725   001E20  50DF               	movf	indf2,w,c
  5726   001E22  6E14               	movwf	(??_setMotorPWM+1)^0,c
  5727   001E24  500B               	movf	?___lwdiv^0,w,c
  5728   001E26  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  5729   001E28  6E15               	movwf	setMotorPWM@posDuty^0,c
  5730   001E2A                     
  5731                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  5732   001E2A  5012               	movf	setMotorPWM@m^0,w,c
  5733   001E2C  6ED9               	movwf	fsr2l,c
  5734   001E2E  6ADA               	clrf	fsr2h,c
  5735   001E30  0E03               	movlw	3
  5736   001E32  26D9               	addwf	fsr2l,f,c
  5737   001E34  50DF               	movf	indf2,w,c
  5738   001E36  6E16               	movwf	setMotorPWM@negDuty^0,c
  5739                           
  5740                           ;dc_motor.c: 72:     }
  5741   001E38  EF3F  F00F         	goto	l2375
  5742   001E3C                     l2371:
  5743                           
  5744                           ;dc_motor.c: 74:         posDuty=0;
  5745   001E3C  0E00               	movlw	0
  5746   001E3E  6E15               	movwf	setMotorPWM@posDuty^0,c
  5747   001E40                     
  5748                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5749   001E40  5012               	movf	setMotorPWM@m^0,w,c
  5750   001E42  6ED9               	movwf	fsr2l,c
  5751   001E44  6ADA               	clrf	fsr2h,c
  5752   001E46  50DF               	movf	indf2,w,c
  5753   001E48  6E13               	movwf	??_setMotorPWM^0,c
  5754   001E4A  5013               	movf	??_setMotorPWM^0,w,c
  5755   001E4C  6E05               	movwf	___wmul@multiplier^0,c
  5756   001E4E  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5757   001E50  5012               	movf	setMotorPWM@m^0,w,c
  5758   001E52  6ED9               	movwf	fsr2l,c
  5759   001E54  6ADA               	clrf	fsr2h,c
  5760   001E56  0E03               	movlw	3
  5761   001E58  26D9               	addwf	fsr2l,f,c
  5762   001E5A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5763   001E5E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5764   001E62  ECB6  F014         	call	___wmul	;wreg free
  5765   001E66  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5766   001E6A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5767   001E6E  0E00               	movlw	0
  5768   001E70  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5769   001E72  0E64               	movlw	100
  5770   001E74  6E0D               	movwf	___lwdiv@divisor^0,c
  5771   001E76  ECAC  F012         	call	___lwdiv	;wreg free
  5772   001E7A  500B               	movf	?___lwdiv^0,w,c
  5773   001E7C  6E16               	movwf	setMotorPWM@negDuty^0,c
  5774   001E7E                     l2375:
  5775                           
  5776                           ;dc_motor.c: 78:     if (m->direction) {
  5777   001E7E  5012               	movf	setMotorPWM@m^0,w,c
  5778   001E80  6ED9               	movwf	fsr2l,c
  5779   001E82  6ADA               	clrf	fsr2h,c
  5780   001E84  0E01               	movlw	1
  5781   001E86  26D9               	addwf	fsr2l,f,c
  5782   001E88  50DF               	movf	indf2,w,c
  5783   001E8A  B4D8               	btfsc	status,2,c
  5784   001E8C  EF4A  F00F         	goto	u1321
  5785   001E90  EF4C  F00F         	goto	u1320
  5786   001E94                     u1321:
  5787   001E94  EF6C  F00F         	goto	l2379
  5788   001E98                     u1320:
  5789   001E98                     
  5790                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  5791   001E98  5012               	movf	setMotorPWM@m^0,w,c
  5792   001E9A  6ED9               	movwf	fsr2l,c
  5793   001E9C  6ADA               	clrf	fsr2h,c
  5794   001E9E  0E05               	movlw	5
  5795   001EA0  26D9               	addwf	fsr2l,f,c
  5796   001EA2  CFDE F013          	movff	postinc2,??_setMotorPWM
  5797   001EA6  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  5798   001EAA  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  5799   001EAE  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5800   001EB2  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  5801                           
  5802                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  5803   001EB6  5012               	movf	setMotorPWM@m^0,w,c
  5804   001EB8  6ED9               	movwf	fsr2l,c
  5805   001EBA  6ADA               	clrf	fsr2h,c
  5806   001EBC  0E07               	movlw	7
  5807   001EBE  26D9               	addwf	fsr2l,f,c
  5808   001EC0  CFDE F013          	movff	postinc2,??_setMotorPWM
  5809   001EC4  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  5810   001EC8  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  5811   001ECC  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5812   001ED0  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  5813                           
  5814                           ;dc_motor.c: 81:     } else {
  5815   001ED4  EF8A  F00F         	goto	l429
  5816   001ED8                     l2379:
  5817                           
  5818                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  5819   001ED8  5012               	movf	setMotorPWM@m^0,w,c
  5820   001EDA  6ED9               	movwf	fsr2l,c
  5821   001EDC  6ADA               	clrf	fsr2h,c
  5822   001EDE  0E05               	movlw	5
  5823   001EE0  26D9               	addwf	fsr2l,f,c
  5824   001EE2  CFDE F013          	movff	postinc2,??_setMotorPWM
  5825   001EE6  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  5826   001EEA  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  5827   001EEE  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5828   001EF2  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  5829                           
  5830                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  5831   001EF6  5012               	movf	setMotorPWM@m^0,w,c
  5832   001EF8  6ED9               	movwf	fsr2l,c
  5833   001EFA  6ADA               	clrf	fsr2h,c
  5834   001EFC  0E07               	movlw	7
  5835   001EFE  26D9               	addwf	fsr2l,f,c
  5836   001F00  CFDE F013          	movff	postinc2,??_setMotorPWM
  5837   001F04  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  5838   001F08  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  5839   001F0C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5840   001F10  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  5841   001F14                     l429:
  5842   001F14  0012               	return		;funcret
  5843   001F16                     __end_of_setMotorPWM:
  5844                           	callstack 0
  5845                           
  5846 ;; *************** function ___wmul *****************
  5847 ;; Defined at:
  5848 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  multiplier      2    4[COMRAM] unsigned int 
  5851 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  product         2    8[COMRAM] unsigned int 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2    4[COMRAM] unsigned int 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0, prodl, prodh
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;Total ram usage:        6 bytes
  5868 ;; Hardware stack levels used: 1
  5869 ;; Hardware stack levels required when called: 3
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_setMotorPWM
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text34
  5878   00296C                     __ptext34:
  5879                           	callstack 0
  5880   00296C                     ___wmul:
  5881                           	callstack 24
  5882   00296C  5005               	movf	___wmul@multiplier^0,w,c
  5883   00296E  0207               	mulwf	___wmul@multiplicand^0,c
  5884   002970  CFF3 F009          	movff	prodl,___wmul@product
  5885   002974  CFF4 F00A          	movff	prodh,___wmul@product+1
  5886   002978  5005               	movf	___wmul@multiplier^0,w,c
  5887   00297A  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5888   00297C  50F3               	movf	243,w,c
  5889   00297E  260A               	addwf	(___wmul@product+1)^0,f,c
  5890   002980  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5891   002982  0207               	mulwf	___wmul@multiplicand^0,c
  5892   002984  50F3               	movf	243,w,c
  5893   002986  260A               	addwf	(___wmul@product+1)^0,f,c
  5894   002988  C009  F005         	movff	___wmul@product,?___wmul
  5895   00298C  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5896   002990  0012               	return		;funcret
  5897   002992                     __end_of___wmul:
  5898                           	callstack 0
  5899                           
  5900 ;; *************** function ___lwdiv *****************
  5901 ;; Defined at:
  5902 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  dividend        2   10[COMRAM] unsigned int 
  5905 ;;  divisor         2   12[COMRAM] unsigned int 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  quotient        2   14[COMRAM] unsigned int 
  5908 ;;  counter         1   16[COMRAM] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  2   10[COMRAM] unsigned int 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5921 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;Total ram usage:        7 bytes
  5923 ;; Hardware stack levels used: 1
  5924 ;; Hardware stack levels required when called: 3
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_setMotorPWM
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text35
  5933   002558                     __ptext35:
  5934                           	callstack 0
  5935   002558                     ___lwdiv:
  5936                           	callstack 24
  5937   002558  0E00               	movlw	0
  5938   00255A  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5939   00255C  0E00               	movlw	0
  5940   00255E  6E0F               	movwf	___lwdiv@quotient^0,c
  5941   002560  500D               	movf	___lwdiv@divisor^0,w,c
  5942   002562  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5943   002564  B4D8               	btfsc	status,2,c
  5944   002566  EFB7  F012         	goto	u1231
  5945   00256A  EFB9  F012         	goto	u1230
  5946   00256E                     u1231:
  5947   00256E  EFE1  F012         	goto	l1024
  5948   002572                     u1230:
  5949   002572  0E01               	movlw	1
  5950   002574  6E11               	movwf	___lwdiv@counter^0,c
  5951   002576  EFC1  F012         	goto	l2321
  5952   00257A                     l2319:
  5953   00257A  90D8               	bcf	status,0,c
  5954   00257C  360D               	rlcf	___lwdiv@divisor^0,f,c
  5955   00257E  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5956   002580  2A11               	incf	___lwdiv@counter^0,f,c
  5957   002582                     l2321:
  5958   002582  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5959   002584  EFC6  F012         	goto	u1241
  5960   002588  EFC8  F012         	goto	u1240
  5961   00258C                     u1241:
  5962   00258C  EFBD  F012         	goto	l2319
  5963   002590                     u1240:
  5964   002590                     l2323:
  5965   002590  90D8               	bcf	status,0,c
  5966   002592  360F               	rlcf	___lwdiv@quotient^0,f,c
  5967   002594  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5968   002596  500D               	movf	___lwdiv@divisor^0,w,c
  5969   002598  5C0B               	subwf	___lwdiv@dividend^0,w,c
  5970   00259A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5971   00259C  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5972   00259E  A0D8               	btfss	status,0,c
  5973   0025A0  EFD4  F012         	goto	u1251
  5974   0025A4  EFD6  F012         	goto	u1250
  5975   0025A8                     u1251:
  5976   0025A8  EFDB  F012         	goto	l2331
  5977   0025AC                     u1250:
  5978   0025AC  500D               	movf	___lwdiv@divisor^0,w,c
  5979   0025AE  5E0B               	subwf	___lwdiv@dividend^0,f,c
  5980   0025B0  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5981   0025B2  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5982   0025B4  800F               	bsf	___lwdiv@quotient^0,0,c
  5983   0025B6                     l2331:
  5984   0025B6  90D8               	bcf	status,0,c
  5985   0025B8  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5986   0025BA  320D               	rrcf	___lwdiv@divisor^0,f,c
  5987   0025BC  2E11               	decfsz	___lwdiv@counter^0,f,c
  5988   0025BE  EFC8  F012         	goto	l2323
  5989   0025C2                     l1024:
  5990   0025C2  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5991   0025C6  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5992   0025CA  0012               	return		;funcret
  5993   0025CC                     __end_of___lwdiv:
  5994                           	callstack 0
  5995                           
  5996 ;; *************** function _batteryLevel *****************
  5997 ;; Defined at:
  5998 ;;		line 6 in file "battery.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  batteryQuart    1   13[COMRAM] unsigned char 
  6003 ;;  batteryVolta    1   12[COMRAM] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6016 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6017 ;;Total ram usage:        2 bytes
  6018 ;; Hardware stack levels used: 1
  6019 ;; Hardware stack levels required when called: 4
  6020 ;; This function calls:
  6021 ;;		_ADC_getval
  6022 ;;		_ADC_init
  6023 ;;		___awdiv
  6024 ;; This function is called by:
  6025 ;;		_main
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text36
  6030   0026FE                     __ptext36:
  6031                           	callstack 0
  6032   0026FE                     _batteryLevel:
  6033                           	callstack 26
  6034   0026FE                     
  6035                           ;battery.c: 7:     ADC_init();
  6036   0026FE  EC1A  F015         	call	_ADC_init	;wreg free
  6037                           
  6038                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6039   002702  EC33  F015         	call	_ADC_getval	;wreg free
  6040   002706  6E0D               	movwf	batteryLevel@batteryVoltage^0,c
  6041   002708                     
  6042                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6043   002708  C00D  F005         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6044   00270C  6A06               	clrf	(___awdiv@dividend+1)^0,c
  6045   00270E  0E00               	movlw	0
  6046   002710  6E08               	movwf	(___awdiv@divisor+1)^0,c
  6047   002712  0E18               	movlw	24
  6048   002714  6E07               	movwf	___awdiv@divisor^0,c
  6049   002716  EC1B  F011         	call	___awdiv	;wreg free
  6050   00271A  5005               	movf	?___awdiv^0,w,c
  6051   00271C  6E0E               	movwf	batteryLevel@batteryQuarter^0,c
  6052   00271E                     
  6053                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  6054   00271E  A20E               	btfss	batteryLevel@batteryQuarter^0,1,c
  6055   002720  EF94  F013         	goto	u1771
  6056   002724  EF96  F013         	goto	u1770
  6057   002728                     u1771:
  6058   002728  EF99  F013         	goto	l353
  6059   00272C                     u1770:
  6060   00272C  8E7C               	bsf	124,7,c	;volatile
  6061   00272E  EF9A  F013         	goto	l354
  6062   002732                     l353:
  6063   002732  9E7C               	bcf	124,7,c	;volatile
  6064   002734                     l354:
  6065                           
  6066                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  6067   002734  A00E               	btfss	batteryLevel@batteryQuarter^0,0,c
  6068   002736  EF9F  F013         	goto	u1781
  6069   00273A  EFA1  F013         	goto	u1780
  6070   00273E                     u1781:
  6071   00273E  EFA4  F013         	goto	l355
  6072   002742                     u1780:
  6073   002742  8680               	bsf	128,3,c	;volatile
  6074   002744  EFA5  F013         	goto	l357
  6075   002748                     l355:
  6076   002748  9680               	bcf	128,3,c	;volatile
  6077   00274A                     l357:
  6078   00274A  0012               	return		;funcret
  6079   00274C                     __end_of_batteryLevel:
  6080                           	callstack 0
  6081                           
  6082 ;; *************** function ___awdiv *****************
  6083 ;; Defined at:
  6084 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  dividend        2    4[COMRAM] int 
  6087 ;;  divisor         2    6[COMRAM] int 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;  quotient        2   10[COMRAM] int 
  6090 ;;  sign            1    9[COMRAM] unsigned char 
  6091 ;;  counter         1    8[COMRAM] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  2    4[COMRAM] int 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6102 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6104 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6105 ;;Total ram usage:        8 bytes
  6106 ;; Hardware stack levels used: 1
  6107 ;; Hardware stack levels required when called: 3
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_batteryLevel
  6112 ;;		_vfpfcnvrt
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text37
  6117   002236                     __ptext37:
  6118                           	callstack 0
  6119   002236                     ___awdiv:
  6120                           	callstack 24
  6121   002236  0E00               	movlw	0
  6122   002238  6E0A               	movwf	___awdiv@sign^0,c
  6123   00223A  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  6124   00223C  EF24  F011         	goto	u1110
  6125   002240  EF22  F011         	goto	u1111
  6126   002244                     u1111:
  6127   002244  EF2A  F011         	goto	l2241
  6128   002248                     u1110:
  6129   002248  6C07               	negf	___awdiv@divisor^0,c
  6130   00224A  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6131   00224C  B0D8               	btfsc	status,0,c
  6132   00224E  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6133   002250  0E01               	movlw	1
  6134   002252  6E0A               	movwf	___awdiv@sign^0,c
  6135   002254                     l2241:
  6136   002254  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  6137   002256  EF31  F011         	goto	u1120
  6138   00225A  EF2F  F011         	goto	u1121
  6139   00225E                     u1121:
  6140   00225E  EF37  F011         	goto	l2247
  6141   002262                     u1120:
  6142   002262  6C05               	negf	___awdiv@dividend^0,c
  6143   002264  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6144   002266  B0D8               	btfsc	status,0,c
  6145   002268  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6146   00226A  0E01               	movlw	1
  6147   00226C  1A0A               	xorwf	___awdiv@sign^0,f,c
  6148   00226E                     l2247:
  6149   00226E  0E00               	movlw	0
  6150   002270  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6151   002272  0E00               	movlw	0
  6152   002274  6E0B               	movwf	___awdiv@quotient^0,c
  6153   002276  5007               	movf	___awdiv@divisor^0,w,c
  6154   002278  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6155   00227A  B4D8               	btfsc	status,2,c
  6156   00227C  EF42  F011         	goto	u1131
  6157   002280  EF44  F011         	goto	u1130
  6158   002284                     u1131:
  6159   002284  EF6C  F011         	goto	l2269
  6160   002288                     u1130:
  6161   002288  0E01               	movlw	1
  6162   00228A  6E09               	movwf	___awdiv@counter^0,c
  6163   00228C  EF4C  F011         	goto	l2255
  6164   002290                     l2253:
  6165   002290  90D8               	bcf	status,0,c
  6166   002292  3607               	rlcf	___awdiv@divisor^0,f,c
  6167   002294  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6168   002296  2A09               	incf	___awdiv@counter^0,f,c
  6169   002298                     l2255:
  6170   002298  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6171   00229A  EF51  F011         	goto	u1141
  6172   00229E  EF53  F011         	goto	u1140
  6173   0022A2                     u1141:
  6174   0022A2  EF48  F011         	goto	l2253
  6175   0022A6                     u1140:
  6176   0022A6                     l2257:
  6177   0022A6  90D8               	bcf	status,0,c
  6178   0022A8  360B               	rlcf	___awdiv@quotient^0,f,c
  6179   0022AA  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6180   0022AC  5007               	movf	___awdiv@divisor^0,w,c
  6181   0022AE  5C05               	subwf	___awdiv@dividend^0,w,c
  6182   0022B0  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6183   0022B2  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6184   0022B4  A0D8               	btfss	status,0,c
  6185   0022B6  EF5F  F011         	goto	u1151
  6186   0022BA  EF61  F011         	goto	u1150
  6187   0022BE                     u1151:
  6188   0022BE  EF66  F011         	goto	l2265
  6189   0022C2                     u1150:
  6190   0022C2  5007               	movf	___awdiv@divisor^0,w,c
  6191   0022C4  5E05               	subwf	___awdiv@dividend^0,f,c
  6192   0022C6  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6193   0022C8  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6194   0022CA  800B               	bsf	___awdiv@quotient^0,0,c
  6195   0022CC                     l2265:
  6196   0022CC  90D8               	bcf	status,0,c
  6197   0022CE  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6198   0022D0  3207               	rrcf	___awdiv@divisor^0,f,c
  6199   0022D2  2E09               	decfsz	___awdiv@counter^0,f,c
  6200   0022D4  EF53  F011         	goto	l2257
  6201   0022D8                     l2269:
  6202   0022D8  500A               	movf	___awdiv@sign^0,w,c
  6203   0022DA  B4D8               	btfsc	status,2,c
  6204   0022DC  EF72  F011         	goto	u1161
  6205   0022E0  EF74  F011         	goto	u1160
  6206   0022E4                     u1161:
  6207   0022E4  EF78  F011         	goto	l2273
  6208   0022E8                     u1160:
  6209   0022E8  6C0B               	negf	___awdiv@quotient^0,c
  6210   0022EA  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6211   0022EC  B0D8               	btfsc	status,0,c
  6212   0022EE  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6213   0022F0                     l2273:
  6214   0022F0  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6215   0022F4  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6216   0022F8  0012               	return		;funcret
  6217   0022FA                     __end_of___awdiv:
  6218                           	callstack 0
  6219                           
  6220 ;; *************** function _ADC_init *****************
  6221 ;; Defined at:
  6222 ;;		line 9 in file "ADC.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;		None
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;		None
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, status,2
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6240 ;;Total ram usage:        0 bytes
  6241 ;; Hardware stack levels used: 1
  6242 ;; Hardware stack levels required when called: 3
  6243 ;; This function calls:
  6244 ;;		Nothing
  6245 ;; This function is called by:
  6246 ;;		_batteryLevel
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text38
  6251   002A34                     __ptext38:
  6252                           	callstack 0
  6253   002A34                     _ADC_init:
  6254                           	callstack 26
  6255   002A34                     
  6256                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6257   002A34  8C86               	bsf	134,6,c	;volatile
  6258                           
  6259                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6260   002A36  010E               	movlb	14	; () banked
  6261   002A38  8DB4               	bsf	180,6,b	;volatile
  6262                           
  6263                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6264   002A3A  010F               	movlb	15	; () banked
  6265   002A3C  9958               	bcf	88,4,b	;volatile
  6266   002A3E                     
  6267                           ; BSR set to: 15
  6268                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6269   002A3E  0EFC               	movlw	-4
  6270   002A40  1758               	andwf	88,f,b	;volatile
  6271                           
  6272                           ;ADC.c: 17:     ADPCH=0b101110;
  6273   002A42  0E2E               	movlw	46
  6274   002A44  6F5F               	movwf	95,b	;volatile
  6275   002A46                     
  6276                           ; BSR set to: 15
  6277                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6278   002A46  9460               	bcf	96,2,c	;volatile
  6279   002A48                     
  6280                           ; BSR set to: 15
  6281                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6282   002A48  8860               	bsf	96,4,c	;volatile
  6283   002A4A                     
  6284                           ; BSR set to: 15
  6285                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6286   002A4A  8E60               	bsf	96,7,c	;volatile
  6287   002A4C                     
  6288                           ; BSR set to: 15
  6289   002A4C  0012               	return		;funcret
  6290   002A4E                     __end_of_ADC_init:
  6291                           	callstack 0
  6292                           
  6293 ;; *************** function _ADC_getval *****************
  6294 ;; Defined at:
  6295 ;;		line 23 in file "ADC.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  tmpval          1    4[COMRAM] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      unsigned char 
  6302 ;; Registers used:
  6303 ;;		wreg, status,2
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6313 ;;Total ram usage:        1 bytes
  6314 ;; Hardware stack levels used: 1
  6315 ;; Hardware stack levels required when called: 3
  6316 ;; This function calls:
  6317 ;;		Nothing
  6318 ;; This function is called by:
  6319 ;;		_batteryLevel
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text39
  6324   002A66                     __ptext39:
  6325                           	callstack 0
  6326   002A66                     _ADC_getval:
  6327                           	callstack 26
  6328   002A66                     
  6329                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6330   002A66  8060               	bsf	96,0,c	;volatile
  6331   002A68                     l339:
  6332   002A68  B060               	btfsc	96,0,c	;volatile
  6333   002A6A  EF39  F015         	goto	u1481
  6334   002A6E  EF3B  F015         	goto	u1480
  6335   002A72                     u1481:
  6336   002A72  EF34  F015         	goto	l339
  6337   002A76                     u1480:
  6338   002A76                     
  6339                           ;ADC.c: 31:     tmpval = ADRESH;
  6340   002A76  CF64 F005          	movff	3940,ADC_getval@tmpval	;volatile
  6341   002A7A                     
  6342                           ;ADC.c: 35:     return tmpval;
  6343   002A7A  5005               	movf	ADC_getval@tmpval^0,w,c
  6344   002A7C  0012               	return		;funcret
  6345   002A7E                     __end_of_ADC_getval:
  6346                           	callstack 0
  6347                           
  6348 ;; *************** function _TxBufferedString *****************
  6349 ;; Defined at:
  6350 ;;		line 66 in file "serial.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  string          2    5[COMRAM] PTR unsigned char 
  6353 ;;		 -> STR_2(1), main@buf(40), 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6369 ;;Total ram usage:        2 bytes
  6370 ;; Hardware stack levels used: 1
  6371 ;; Hardware stack levels required when called: 4
  6372 ;; This function calls:
  6373 ;;		_putCharToTxBuf
  6374 ;; This function is called by:
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text40
  6380   00269C                     __ptext40:
  6381                           	callstack 0
  6382   00269C                     _TxBufferedString:
  6383                           	callstack 26
  6384   00269C                     
  6385                           ;serial.c: 67:     while(*string != 0){
  6386   00269C  EF65  F013         	goto	l2987
  6387   0026A0                     l2983:
  6388                           
  6389                           ;serial.c: 68:   putCharToTxBuf(*string++);
  6390   0026A0  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6391   0026A4  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6392   0026A8  0E00               	movlw	low (__smallconst shr (0+16))
  6393   0026AA  6EF8               	movwf	tblptru,c
  6394   0026AC  0E0D               	movlw	(high __ramtop+-1)
  6395   0026AE  64F7               	cpfsgt	tblptrh,c
  6396   0026B0  D003               	bra	u1987
  6397   0026B2  0008               	tblrd		*
  6398   0026B4  50F5               	movf	tablat,w,c
  6399   0026B6  D005               	bra	u1980
  6400   0026B8                     u1987:
  6401   0026B8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6402   0026BC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6403   0026C0  50EF               	movf	indf0,w,c
  6404   0026C2                     u1980:
  6405   0026C2  EC79  F014         	call	_putCharToTxBuf
  6406   0026C6  4A06               	infsnz	TxBufferedString@string^0,f,c
  6407   0026C8  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  6408   0026CA                     l2987:
  6409                           
  6410                           ;serial.c: 67:     while(*string != 0){
  6411   0026CA  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6412   0026CE  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6413   0026D2  0E00               	movlw	low (__smallconst shr (0+16))
  6414   0026D4  6EF8               	movwf	tblptru,c
  6415   0026D6  0E0D               	movlw	(high __ramtop+-1)
  6416   0026D8  64F7               	cpfsgt	tblptrh,c
  6417   0026DA  D003               	bra	u1997
  6418   0026DC  0008               	tblrd		*
  6419   0026DE  50F5               	movf	tablat,w,c
  6420   0026E0  D005               	bra	u1990
  6421   0026E2                     u1997:
  6422   0026E2  CFF6 FFE9          	movff	tblptrl,fsr0l
  6423   0026E6  CFF7 FFEA          	movff	tblptrh,fsr0h
  6424   0026EA  50EF               	movf	indf0,w,c
  6425   0026EC                     u1990:
  6426   0026EC  0900               	iorlw	0
  6427   0026EE  A4D8               	btfss	status,2,c
  6428   0026F0  EF7C  F013         	goto	u2001
  6429   0026F4  EF7E  F013         	goto	u2000
  6430   0026F8                     u2001:
  6431   0026F8  EF50  F013         	goto	l2983
  6432   0026FC                     u2000:
  6433   0026FC  0012               	return		;funcret
  6434   0026FE                     __end_of_TxBufferedString:
  6435                           	callstack 0
  6436                           
  6437 ;; *************** function _putCharToTxBuf *****************
  6438 ;; Defined at:
  6439 ;;		line 53 in file "serial.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  byte            1    wreg     unsigned char 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  byte            1    4[COMRAM] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6456 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;Total ram usage:        1 bytes
  6458 ;; Hardware stack levels used: 1
  6459 ;; Hardware stack levels required when called: 3
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		_TxBufferedString
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text41
  6468   0028F2                     __ptext41:
  6469                           	callstack 0
  6470   0028F2                     _putCharToTxBuf:
  6471                           	callstack 26
  6472                           
  6473                           ;incstack = 0
  6474                           ;putCharToTxBuf@byte stored from wreg
  6475   0028F2  6E05               	movwf	putCharToTxBuf@byte^0,c
  6476   0028F4                     
  6477                           ;serial.c: 54:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  6478   0028F4  0E3B               	movlw	59
  6479   0028F6  6457               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  6480   0028F8  EF80  F014         	goto	u1471
  6481   0028FC  EF82  F014         	goto	u1470
  6482   002900                     u1471:
  6483   002900  EF84  F014         	goto	l2471
  6484   002904                     u1470:
  6485   002904  0E00               	movlw	0
  6486   002906  6E57               	movwf	_TxBufWriteCnt^0,c	;volatile
  6487   002908                     l2471:
  6488                           
  6489                           ;serial.c: 55:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  6490   002908  0E00               	movlw	low _EUSART4TXbuf
  6491   00290A  2457               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  6492   00290C  6ED9               	movwf	fsr2l,c
  6493   00290E  6ADA               	clrf	fsr2h,c
  6494   002910  0E01               	movlw	high _EUSART4TXbuf
  6495   002912  22DA               	addwfc	fsr2h,f,c
  6496   002914  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  6497   002918  2A57               	incf	_TxBufWriteCnt^0,f,c	;volatile
  6498   00291A  0012               	return		;funcret
  6499   00291C                     __end_of_putCharToTxBuf:
  6500                           	callstack 0
  6501                           
  6502 ;; *************** function _Interrupts_init *****************
  6503 ;; Defined at:
  6504 ;;		line 10 in file "interrupts.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		None
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6522 ;;Total ram usage:        0 bytes
  6523 ;; Hardware stack levels used: 1
  6524 ;; Hardware stack levels required when called: 3
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text42
  6533   002A96                     __ptext42:
  6534                           	callstack 0
  6535   002A96                     _Interrupts_init:
  6536                           	callstack 27
  6537   002A96                     
  6538                           ;interrupts.c: 12:  TRISBbits.TRISB0=1;
  6539   002A96  8082               	bsf	130,0,c	;volatile
  6540                           
  6541                           ;interrupts.c: 13:     ANSELBbits.ANSELB0=0;
  6542   002A98  010E               	movlb	14	; () banked
  6543   002A9A  919A               	bcf	154,0,b	;volatile
  6544                           
  6545                           ;interrupts.c: 14:     PIE0bits.INT0IE=1;
  6546   002A9C  8129               	bsf	41,0,b	;volatile
  6547                           
  6548                           ;interrupts.c: 15:     IPR0bits.INT0IP=1;
  6549   002A9E  811F               	bsf	31,0,b	;volatile
  6550                           
  6551                           ;interrupts.c: 19:     PIE4bits.RC4IE=1;
  6552   002AA0  872D               	bsf	45,3,b	;volatile
  6553                           
  6554                           ;interrupts.c: 20:     INTCONbits.PEIE=1;
  6555   002AA2  8CF2               	bsf	242,6,c	;volatile
  6556                           
  6557                           ;interrupts.c: 21:     INTCONbits.GIE=1;
  6558   002AA4  8EF2               	bsf	242,7,c	;volatile
  6559   002AA6                     
  6560                           ; BSR set to: 14
  6561   002AA6  0012               	return		;funcret
  6562   002AA8                     __end_of_Interrupts_init:
  6563                           	callstack 0
  6564                           
  6565 ;; *************** function _Buggy_init *****************
  6566 ;; Defined at:
  6567 ;;		line 7 in file "buggysetup.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		None
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6585 ;;Total ram usage:        0 bytes
  6586 ;; Hardware stack levels used: 1
  6587 ;; Hardware stack levels required when called: 3
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_main
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text43
  6596   0027CC                     __ptext43:
  6597                           	callstack 0
  6598   0027CC                     _Buggy_init:
  6599                           	callstack 27
  6600   0027CC                     
  6601                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  6602   0027CC  9E7C               	bcf	124,7,c	;volatile
  6603                           
  6604                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  6605   0027CE  9E84               	bcf	132,7,c	;volatile
  6606                           
  6607                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  6608   0027D0  9680               	bcf	128,3,c	;volatile
  6609                           
  6610                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  6611   0027D2  9688               	bcf	136,3,c	;volatile
  6612                           
  6613                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  6614   0027D4  8486               	bsf	134,2,c	;volatile
  6615                           
  6616                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  6617   0027D6  010E               	movlb	14	; () banked
  6618   0027D8  95B4               	bcf	180,2,b	;volatile
  6619                           
  6620                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  6621   0027DA  8686               	bsf	134,3,c	;volatile
  6622                           
  6623                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  6624   0027DC  97B4               	bcf	180,3,b	;volatile
  6625                           
  6626                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  6627   0027DE  9280               	bcf	128,1,c	;volatile
  6628                           
  6629                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  6630   0027E0  9288               	bcf	136,1,c	;volatile
  6631                           
  6632                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  6633   0027E2  987C               	bcf	124,4,c	;volatile
  6634                           
  6635                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  6636   0027E4  9884               	bcf	132,4,c	;volatile
  6637                           
  6638                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  6639   0027E6  967C               	bcf	124,3,c	;volatile
  6640                           
  6641                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  6642   0027E8  9684               	bcf	132,3,c	;volatile
  6643                           
  6644                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  6645   0027EA  97A7               	bcf	167,3,b	;volatile
  6646                           
  6647                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  6648   0027EC  9080               	bcf	128,0,c	;volatile
  6649                           
  6650                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  6651   0027EE  9088               	bcf	136,0,c	;volatile
  6652                           
  6653                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  6654   0027F0  907E               	bcf	126,0,c	;volatile
  6655                           
  6656                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  6657   0027F2  9086               	bcf	134,0,c	;volatile
  6658                           
  6659                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  6660   0027F4  907F               	bcf	127,0,c	;volatile
  6661                           
  6662                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  6663   0027F6  9087               	bcf	135,0,c	;volatile
  6664                           
  6665                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  6666   0027F8  9E7D               	bcf	125,7,c	;volatile
  6667                           
  6668                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  6669   0027FA  9E85               	bcf	133,7,c	;volatile
  6670                           
  6671                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  6672   0027FC  9679               	bcf	121,3,c	;volatile
  6673                           
  6674                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  6675   0027FE  9681               	bcf	129,3,c	;volatile
  6676   002800                     
  6677                           ; BSR set to: 14
  6678   002800  0012               	return		;funcret
  6679   002802                     __end_of_Buggy_init:
  6680                           	callstack 0
  6681                           
  6682 ;; *************** function _HighISR *****************
  6683 ;; Defined at:
  6684 ;;		line 29 in file "interrupts.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6700 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;Total ram usage:        2 bytes
  6703 ;; Hardware stack levels used: 1
  6704 ;; Hardware stack levels required when called: 2
  6705 ;; This function calls:
  6706 ;;		_getCharFromTxBuf
  6707 ;;		_putCharToRxBuf
  6708 ;;		i2_I2C_2_Master_Start
  6709 ;;		i2_I2C_2_Master_Stop
  6710 ;;		i2_I2C_2_Master_Write
  6711 ;;		i2_isDataInTxBuf
  6712 ;; This function is called by:
  6713 ;;		Interrupt level 2
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	intcode
  6718   000008                     __pintcode:
  6719                           	callstack 0
  6720   000008                     _HighISR:
  6721                           	callstack 23
  6722                           
  6723                           ; BSR set to: 14
  6724                           ;incstack = 0
  6725   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6726   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  6727   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  6728   000012                     
  6729                           ;interrupts.c: 33:     if(PIR0bits.INT0IF){
  6730   000012  010E               	movlb	14	; () banked
  6731   000014  A133               	btfss	51,0,b	;volatile
  6732   000016  EF0F  F000         	goto	i2u207_41
  6733   00001A  EF11  F000         	goto	i2u207_40
  6734   00001E                     i2u207_41:
  6735   00001E  EF1E  F000         	goto	i2l3099
  6736   000022                     i2u207_40:
  6737   000022                     
  6738                           ; BSR set to: 14
  6739                           ;interrupts.c: 34:  LATHbits.LATH3 = 1;
  6740   000022  8680               	bsf	128,3,c	;volatile
  6741   000024                     
  6742                           ; BSR set to: 14
  6743                           ;interrupts.c: 36:     I2C_2_Master_Start();
  6744   000024  EC74  F015         	call	i2_I2C_2_Master_Start	;wreg free
  6745                           
  6746                           ;interrupts.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  6747   000028  0E52               	movlw	82
  6748   00002A  EC5A  F015         	call	i2_I2C_2_Master_Write
  6749                           
  6750                           ;interrupts.c: 38:  I2C_2_Master_Write(0b11100110);
  6751   00002E  0EE6               	movlw	230
  6752   000030  EC5A  F015         	call	i2_I2C_2_Master_Write
  6753                           
  6754                           ;interrupts.c: 39:  I2C_2_Master_Stop();
  6755   000034  EC6F  F015         	call	i2_I2C_2_Master_Stop	;wreg free
  6756   000038                     
  6757                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  6758   000038  010E               	movlb	14	; () banked
  6759   00003A  9133               	bcf	51,0,b	;volatile
  6760   00003C                     i2l3099:
  6761                           
  6762                           ; BSR set to: 14
  6763                           ;interrupts.c: 44:     if(PIR4bits.RC4IF){
  6764   00003C  A737               	btfss	55,3,b	;volatile
  6765   00003E  EF23  F000         	goto	i2u208_41
  6766   000042  EF25  F000         	goto	i2u208_40
  6767   000046                     i2u208_41:
  6768   000046  EF28  F000         	goto	i2l3103
  6769   00004A                     i2u208_40:
  6770   00004A                     
  6771                           ; BSR set to: 14
  6772                           ;interrupts.c: 46:     putCharToRxBuf(RC4REG);
  6773   00004A  51E3               	movf	227,w,b	;volatile
  6774   00004C  ECC9  F014         	call	_putCharToRxBuf
  6775   000050                     i2l3103:
  6776                           
  6777                           ;interrupts.c: 50:     if(PIR4bits.TX4IF){
  6778   000050  010E               	movlb	14	; () banked
  6779   000052  A537               	btfss	55,2,b	;volatile
  6780   000054  EF2E  F000         	goto	i2u209_41
  6781   000058  EF30  F000         	goto	i2u209_40
  6782   00005C                     i2u209_41:
  6783   00005C  EF40  F000         	goto	i2l258
  6784   000060                     i2u209_40:
  6785   000060                     
  6786                           ; BSR set to: 14
  6787                           ;interrupts.c: 52:     TX4REG = getCharFromTxBuf();
  6788   000060  EC4E  F014         	call	_getCharFromTxBuf	;wreg free
  6789   000064  010E               	movlb	14	; () banked
  6790   000066  6FE4               	movwf	228,b	;volatile
  6791   000068                     
  6792                           ; BSR set to: 14
  6793                           ;interrupts.c: 53:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  6794   000068  EC3F  F015         	call	i2_isDataInTxBuf	;wreg free
  6795   00006C  0900               	iorlw	0
  6796   00006E  A4D8               	btfss	status,2,c
  6797   000070  EF3C  F000         	goto	i2u210_41
  6798   000074  EF3E  F000         	goto	i2u210_40
  6799   000078                     i2u210_41:
  6800   000078  EF40  F000         	goto	i2l258
  6801   00007C                     i2u210_40:
  6802   00007C  010E               	movlb	14	; () banked
  6803   00007E  952D               	bcf	45,2,b	;volatile
  6804   000080                     i2l258:
  6805   000080  C004  FFDA         	movff	??_HighISR+1,fsr2h
  6806   000084  C003  FFD9         	movff	??_HighISR,fsr2l
  6807   000088  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6808   00008A  0011               	retfie		f
  6809   00008C                     __end_of_HighISR:
  6810                           	callstack 0
  6811                           
  6812 ;; *************** function i2_isDataInTxBuf *****************
  6813 ;; Defined at:
  6814 ;;		line 61 in file "serial.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      unsigned char 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6832 ;;Total ram usage:        0 bytes
  6833 ;; Hardware stack levels used: 1
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_HighISR
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text45
  6842   002A7E                     __ptext45:
  6843                           	callstack 0
  6844   002A7E                     i2_isDataInTxBuf:
  6845                           	callstack 24
  6846   002A7E                     
  6847                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  6848   002A7E  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  6849   002A80  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6850   002A82  A4D8               	btfss	status,2,c
  6851   002A84  EF46  F015         	goto	i2u95_41
  6852   002A88  EF49  F015         	goto	i2u95_40
  6853   002A8C                     i2u95_41:
  6854   002A8C  0E01               	movlw	1
  6855   002A8E  EF4A  F015         	goto	i2u96_40
  6856   002A92                     i2u95_40:
  6857   002A92  0E00               	movlw	0
  6858   002A94                     i2u96_40:
  6859   002A94  0012               	return		;funcret
  6860   002A96                     __end_ofi2_isDataInTxBuf:
  6861                           	callstack 0
  6862                           
  6863 ;; *************** function i2_I2C_2_Master_Write *****************
  6864 ;; Defined at:
  6865 ;;		line 45 in file "i2c.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  data_byte       1    wreg     unsigned char 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  data_byte       1    1[COMRAM] unsigned char 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;Total ram usage:        1 bytes
  6884 ;; Hardware stack levels used: 1
  6885 ;; Hardware stack levels required when called: 1
  6886 ;; This function calls:
  6887 ;;		i2_I2C_2_Master_Idle
  6888 ;; This function is called by:
  6889 ;;		_HighISR
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text46
  6894   002AB4                     __ptext46:
  6895                           	callstack 0
  6896   002AB4                     i2_I2C_2_Master_Write:
  6897                           	callstack 23
  6898                           
  6899                           ;incstack = 0
  6900                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  6901   002AB4  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  6902   002AB6                     
  6903                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6904   002AB6  ECA2  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  6905   002ABA                     
  6906                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6907   002ABA  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  6908   002ABE  0012               	return		;funcret
  6909   002AC0                     __end_ofi2_I2C_2_Master_Write:
  6910                           	callstack 0
  6911                           
  6912 ;; *************** function i2_I2C_2_Master_Stop *****************
  6913 ;; Defined at:
  6914 ;;		line 39 in file "i2c.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;		None
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6932 ;;Total ram usage:        0 bytes
  6933 ;; Hardware stack levels used: 1
  6934 ;; Hardware stack levels required when called: 1
  6935 ;; This function calls:
  6936 ;;		i2_I2C_2_Master_Idle
  6937 ;; This function is called by:
  6938 ;;		_HighISR
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text47
  6943   002ADE                     __ptext47:
  6944                           	callstack 0
  6945   002ADE                     i2_I2C_2_Master_Stop:
  6946                           	callstack 23
  6947   002ADE                     
  6948                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6949   002ADE  ECA2  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  6950   002AE2                     
  6951                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6952   002AE2  010E               	movlb	14	; () banked
  6953   002AE4  85DA               	bsf	218,2,b	;volatile
  6954   002AE6                     
  6955                           ; BSR set to: 14
  6956   002AE6  0012               	return		;funcret
  6957   002AE8                     __end_ofi2_I2C_2_Master_Stop:
  6958                           	callstack 0
  6959                           
  6960 ;; *************** function i2_I2C_2_Master_Start *****************
  6961 ;; Defined at:
  6962 ;;		line 27 in file "i2c.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used: 1
  6982 ;; Hardware stack levels required when called: 1
  6983 ;; This function calls:
  6984 ;;		i2_I2C_2_Master_Idle
  6985 ;; This function is called by:
  6986 ;;		_HighISR
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text48
  6991   002AE8                     __ptext48:
  6992                           	callstack 0
  6993   002AE8                     i2_I2C_2_Master_Start:
  6994                           	callstack 23
  6995   002AE8                     
  6996                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6997   002AE8  ECA2  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  6998   002AEC                     
  6999                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7000   002AEC  010E               	movlb	14	; () banked
  7001   002AEE  81DA               	bsf	218,0,b	;volatile
  7002   002AF0                     
  7003                           ; BSR set to: 14
  7004   002AF0  0012               	return		;funcret
  7005   002AF2                     __end_ofi2_I2C_2_Master_Start:
  7006                           	callstack 0
  7007                           
  7008 ;; *************** function i2_I2C_2_Master_Idle *****************
  7009 ;; Defined at:
  7010 ;;		line 22 in file "i2c.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;		None
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  1    wreg      void 
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, status,0
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7028 ;;Total ram usage:        1 bytes
  7029 ;; Hardware stack levels used: 1
  7030 ;; This function calls:
  7031 ;;		Nothing
  7032 ;; This function is called by:
  7033 ;;		i2_I2C_2_Master_Start
  7034 ;;		i2_I2C_2_Master_Stop
  7035 ;;		i2_I2C_2_Master_Write
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text49
  7040   002944                     __ptext49:
  7041                           	callstack 0
  7042   002944                     i2_I2C_2_Master_Idle:
  7043                           	callstack 23
  7044   002944                     i2l151:
  7045   002944  010E               	movlb	14	; () banked
  7046   002946  B5D8               	btfsc	216,2,b	;volatile
  7047   002948  EFA8  F014         	goto	i2u175_41
  7048   00294C  EFAA  F014         	goto	i2u175_40
  7049   002950                     i2u175_41:
  7050   002950  EFA2  F014         	goto	i2l151
  7051   002954                     i2u175_40:
  7052   002954                     
  7053                           ; BSR set to: 14
  7054   002954  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7055   002958  0E1F               	movlw	31
  7056   00295A  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7057   00295C  A4D8               	btfss	status,2,c
  7058   00295E  EFB3  F014         	goto	i2u176_41
  7059   002962  EFB5  F014         	goto	i2u176_40
  7060   002966                     i2u176_41:
  7061   002966  EFA2  F014         	goto	i2l151
  7062   00296A                     i2u176_40:
  7063   00296A                     
  7064                           ; BSR set to: 14
  7065   00296A  0012               	return		;funcret
  7066   00296C                     __end_ofi2_I2C_2_Master_Idle:
  7067                           	callstack 0
  7068                           
  7069 ;; *************** function _putCharToRxBuf *****************
  7070 ;; Defined at:
  7071 ;;		line 33 in file "serial.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  byte            1    wreg     unsigned char 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  byte            1    0[COMRAM] unsigned char 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7089 ;;Total ram usage:        1 bytes
  7090 ;; Hardware stack levels used: 1
  7091 ;; This function calls:
  7092 ;;		Nothing
  7093 ;; This function is called by:
  7094 ;;		_HighISR
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text50
  7099   002992                     __ptext50:
  7100                           	callstack 0
  7101   002992                     _putCharToRxBuf:
  7102                           	callstack 24
  7103                           
  7104                           ; BSR set to: 14
  7105                           ;incstack = 0
  7106                           ;putCharToRxBuf@byte stored from wreg
  7107   002992  6E01               	movwf	putCharToRxBuf@byte^0,c
  7108   002994                     
  7109                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  7110   002994  0E13               	movlw	19
  7111   002996  6459               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  7112   002998  EFD0  F014         	goto	i2u93_41
  7113   00299C  EFD2  F014         	goto	i2u93_40
  7114   0029A0                     i2u93_41:
  7115   0029A0  EFD4  F014         	goto	i2l2057
  7116   0029A4                     i2u93_40:
  7117   0029A4  0E00               	movlw	0
  7118   0029A6  6E59               	movwf	_RxBufWriteCnt^0,c	;volatile
  7119   0029A8                     i2l2057:
  7120                           
  7121                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  7122   0029A8  5059               	movf	_RxBufWriteCnt^0,w,c
  7123   0029AA  0F3D               	addlw	low _EUSART4RXbuf
  7124   0029AC  6ED9               	movwf	fsr2l,c
  7125   0029AE  6ADA               	clrf	fsr2h,c
  7126   0029B0  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  7127   0029B4  2A59               	incf	_RxBufWriteCnt^0,f,c	;volatile
  7128   0029B6  0012               	return		;funcret
  7129   0029B8                     __end_of_putCharToRxBuf:
  7130                           	callstack 0
  7131                           
  7132 ;; *************** function _getCharFromTxBuf *****************
  7133 ;; Defined at:
  7134 ;;		line 47 in file "serial.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;		None
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;		None
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      unsigned char 
  7141 ;; Registers used:
  7142 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7151 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7152 ;;Total ram usage:        2 bytes
  7153 ;; Hardware stack levels used: 1
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_HighISR
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text51
  7162   00289C                     __ptext51:
  7163                           	callstack 0
  7164   00289C                     _getCharFromTxBuf:
  7165                           	callstack 24
  7166   00289C                     
  7167                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7168   00289C  0E3B               	movlw	59
  7169   00289E  6456               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7170   0028A0  EF54  F014         	goto	i2u201_41
  7171   0028A4  EF56  F014         	goto	i2u201_40
  7172   0028A8                     i2u201_41:
  7173   0028A8  EF58  F014         	goto	i2l2993
  7174   0028AC                     i2u201_40:
  7175   0028AC  0E00               	movlw	0
  7176   0028AE  6E56               	movwf	_TxBufReadCnt^0,c	;volatile
  7177   0028B0                     i2l2993:
  7178                           
  7179                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  7180   0028B0  2A56               	incf	_TxBufReadCnt^0,f,c	;volatile
  7181   0028B2  0456               	decf	_TxBufReadCnt^0,w,c	;volatile
  7182   0028B4  6E01               	movwf	??_getCharFromTxBuf^0,c
  7183   0028B6  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  7184   0028B8  0E00               	movlw	low _EUSART4TXbuf
  7185   0028BA  2401               	addwf	??_getCharFromTxBuf^0,w,c
  7186   0028BC  6ED9               	movwf	fsr2l,c
  7187   0028BE  0E01               	movlw	high _EUSART4TXbuf
  7188   0028C0  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  7189   0028C2  6EDA               	movwf	fsr2h,c
  7190   0028C4  50DF               	movf	indf2,w,c
  7191   0028C6  0012               	return		;funcret
  7192   0028C8                     __end_of_getCharFromTxBuf:
  7193                           	callstack 0
  7194                           
  7195                           	psect	rparam
  7196   000000                     
  7197                           	psect	temp
  7198   00005A                     btemp:
  7199                           	callstack 0
  7200   00005A                     	ds	1
  7201   000000                     int$flags	set	btemp
  7202   000000                     wtemp8	set	btemp+1
  7203   000000                     ttemp5	set	btemp+1
  7204   000000                     ttemp6	set	btemp+4
  7205   000000                     ttemp7	set	btemp+8
  7206                           
  7207                           	psect	config
  7208                           
  7209                           ;Config register CONFIG1L @ 0x300000
  7210                           ;	External Oscillator mode Selection bits
  7211                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7212                           ;	Power-up default value for COSC bits
  7213                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7214   300000                     	org	3145728
  7215   300000  AA                 	db	170
  7216                           
  7217                           ;Config register CONFIG1H @ 0x300001
  7218                           ;	unspecified, using default values
  7219                           ;	Clock Out Enable bit
  7220                           ;	CLKOUTEN = 0x1, unprogrammed default
  7221                           ;	Clock Switch Enable bit
  7222                           ;	CSWEN = 0x1, unprogrammed default
  7223                           ;	Fail-Safe Clock Monitor Enable bit
  7224                           ;	FCMEN = 0x1, unprogrammed default
  7225   300001                     	org	3145729
  7226   300001  FF                 	db	255
  7227                           
  7228                           ;Config register CONFIG3L @ 0x300004
  7229                           ;	WDT Period Select bits
  7230                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7231                           ;	WDT operating mode
  7232                           ;	WDTE = OFF, WDT Disabled
  7233   300004                     	org	3145732
  7234   300004  9F                 	db	159
  7235                           
  7236                           ;Config register CONFIG3H @ 0x300005
  7237                           ;	unspecified, using default values
  7238                           ;	WDT Window Select bits
  7239                           ;	WDTCWS = 0x7, unprogrammed default
  7240                           ;	WDT input clock selector
  7241                           ;	WDTCCS = 0x7, unprogrammed default
  7242   300005                     	org	3145733
  7243   300005  FF                 	db	255
  7244                           tosu	equ	0xFFF
  7245                           tosh	equ	0xFFE
  7246                           tosl	equ	0xFFD
  7247                           stkptr	equ	0xFFC
  7248                           pclatu	equ	0xFFB
  7249                           pclath	equ	0xFFA
  7250                           pcl	equ	0xFF9
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           indf0	equ	0xFEF
  7258                           postinc0	equ	0xFEE
  7259                           postdec0	equ	0xFED
  7260                           preinc0	equ	0xFEC
  7261                           plusw0	equ	0xFEB
  7262                           fsr0h	equ	0xFEA
  7263                           fsr0l	equ	0xFE9
  7264                           wreg	equ	0xFE8
  7265                           indf1	equ	0xFE7
  7266                           postinc1	equ	0xFE6
  7267                           postdec1	equ	0xFE5
  7268                           preinc1	equ	0xFE4
  7269                           plusw1	equ	0xFE3
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           bsr	equ	0xFE0
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           postdec2	equ	0xFDD
  7276                           preinc2	equ	0xFDC
  7277                           plusw2	equ	0xFDB
  7278                           fsr2h	equ	0xFDA
  7279                           fsr2l	equ	0xFD9
  7280                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160     85     157
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(BANK0[1]), 

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    S2927$buffer	PTR unsigned char  size(2) Largest target is 0

    S2927$source	PTR const unsigned char  size(2) Largest target is 0

    S50DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S50DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 40
		 -> main@buf(BANK0[40]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), STR_2(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf
    _HighISR->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                87    87      0   54467
                                              0 BANK0     85    85      0
                         _Buggy_init
                    _Interrupts_init
                   _TxBufferedString
                       _batteryLevel
                        _calibration
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                          _sendTxBuf
                            _sprintf
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             33    15     18    3439
                                             29 COMRAM    31    13     18
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    3088
                                             25 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2738
                                             14 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   27884
                                             34 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    4725
                                             22 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     407
                                              8 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    1965
                                             30 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     193
                                              4 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     674
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   17031
                                             34 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2285
                                             17 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     695
                                             12 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     219
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      37
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _TxBufferedString
     _putCharToTxBuf
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
       _setMotorPWM
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
     _turnRight
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_I2C_2_Master_Start
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Write
     i2_I2C_2_Master_Idle
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     55      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllll     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      50        0.0%
BITBIGSFRllllll      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      61        0.0%
BITBIGSFRllllhl      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllll      3      0       0      60        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRllllll      1      0       0      62        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      65        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 05 17:36:32 2024

                    _white_Light 29B8                               l65 1248                               l67 1256  
                             l69 1294                               l99 269A                     ___awdiv@sign 000A  
            ___wmul@multiplicand 0007                 main@turnDuration 0090                ??_Interrupts_init 0005  
                            l102 29FA                              l110 1568                              l200 2800  
                            l121 2556                              l113 2056                              l105 29D4  
                            l107 29DA                              l117 2554                              l151 291C  
                            l311 2A64                              l160 2AC8                              l321 2A32  
                            l154 2942                              l163 2AD2                              l308 291A  
                            l148 28F0                              l317 26FC                              l341 2A76  
                            l157 2ADC                              l342 2A7C                              l166 2AB2  
                            l422 24E2                              l503 15EA                              l336 2A4C  
                            l512 16EE                              l249 2AA6                              l353 2732  
                            l169 278C                              l354 2734                              l530 1DC0  
                            l339 2A68                              l355 2748                              l523 1D2E  
                            l515 172C                              l507 1656                              l460 1B1E  
                            l524 1D5A                              l612 2162                              l357 274A  
                            l533 2990                              l429 1F14                              l509 167A  
                            l445 11B0                              l527 1D98                              l519 1D12  
                            l447 11B0                              l472 1C50                              l464 1B8A  
                            l528 1DA0                              l544 2624                              l481 19D4  
                            l545 2634                              l289 2A18                              l466 1BAE  
                            l483 19F8                              l469 1C22                              l477 1968  
                            l486 1A6C                              l494 21E8                              l489 1A9A  
                            l498 2234                              l764 22F8                              l777 23A8  
                            _abs 2836                     ___awmod@sign 000A                    ?_color_detect 0005  
                            wreg 0FE8                  _color_normalise 1F16                             l1031 25CA  
                           l1024 25C2                             l1211 2834                             ?_abs 000B  
                           l2301 237C                             l1262 2868                             l2223 291C  
                           l2303 2382                             l1255 27CA                             l2241 2254  
                           l2233 2236                             l2321 2582                             l2313 2558  
                           l2225 292C                             l2305 2388                             l1249 18E4  
                           l2401 17E4                             l3201 12C4                             l1274 2452  
                           l2251 2288                             l2243 2262                             l2235 223A  
                           l2331 25B6                             l2323 2590                             l2315 2560  
                           l2227 296C                             l2307 2398                             l1259 2850  
                           l2411 1862                             l2403 1814                             l3211 135E  
                           l3203 12DE                             l2261 22C2                             l2253 2290  
                           l2245 226A                             l2237 2248                             l2333 25BC  
                           l2325 2596                             l2317 2572                             l2229 2988  
                           l2501 1948                             l2309 23A0                             l1285 2AF2  
                           l2341 23D4                             l2413 1872                             l2405 1830  
                           l2421 18B6                             l3213 1362                             l3205 1306  
                           l3141 11BE                             l2271 22E8                             l2263 22CA  
                           l2255 2298                             l2247 226E                             l2239 2250  
                           l2327 25AC                             l2319 257A                             l2511 19B4  
                           l2503 1954                             l2431 28C8                             l2351 2844  
                           l2343 23F0                             l2335 23AA                             l2415 1884  
                           l2407 1842                             l3215 1372                             l3207 1350  
                           l3151 11E0                             l3143 11C2                             l3135 11B2  
                           l2273 22F0                             l2265 22CC                             l2257 22A6  
                           l2249 2276                             l2329 25B4                             l2521 1A10  
                           l2513 19C0                             l2505 1964                             l2441 28DE  
                           l2433 28D2                             l2353 2AD4                             l2361 2ACA  
                           l2281 230C                             l2345 2422                             l2337 23BA  
                           l2417 189E                             l2409 1852                             l2425 18C2  
                           l3209 1354                             l3161 1200                             l3153 11E4  
                           l3145 11C2                             l3137 11B6                             l2267 22D2  
                           l2259 22AC                             l2371 1E3C                             l2531 1A68  
                           l2523 1A3C                             l2515 19D0                             l2507 198C  
                           l2435 28D8                             l2355 2AD8                             l2363 2ACE  
                           l2443 29DE                             l2451 2752                             l2611 15C2  
                           l2603 156A                             l2291 2340                             l2283 2314  
                           l2339 23CA                             l2419 18A0                             l3171 1218  
                           l3163 1204                             l3155 11E8                             l3147 11CE  
                           l3139 11BA                             l2269 22D8                             l2373 1E40  
                           l2365 1DC2                             l2533 1A90                             l2525 1A44  
                           l2517 19FE                             l2509 1990                             l2437 28DA  
                           l2357 2AAA                             l2701 2152                             l2453 275A  
                           l2445 2AC0                             l2541 218C                             l2613 15CA  
                           l2621 1612                             l2605 1582                             l2293 2348  
                           l2285 2318                             l2277 22FA                             l2349 2836  
                           l2381 172E                             l3181 1234                             l3173 1220  
                           l3165 1208                             l3157 11F0                             l3149 11DA  
                           l2471 2908                             l2375 1E7E                             l2367 1DDC  
                           l2527 1A4C                             l2439 28DC                             l2359 2AAE  
                           l2455 2762                             l2447 2AC4                             l2551 21E4  
                           l2543 21B8                             l2623 1636                             l2615 15D6  
                           l2607 158E                             l2463 2A4E                             l2295 2350  
                           l2287 2326                             l2279 22FE                             l2391 1772  
                           l2383 1750                             l2711 27C2                             l3191 125E  
                           l3183 1238                             l3175 1228                             l3167 120C  
                           l3159 11F8                             l2473 2918                             l2481 2A48  
                           l2377 1E98                             l2369 1E2A                             l2561 1AC2  
                           l2529 1A58                             l2801 1D3C                             l2721 2636  
                           l2457 2788                             l2449 274E                             l2553 220C  
                           l2545 21C0                             l2537 2164                             l2641 16DA  
                           l2633 1692                             l2625 1642                             l2617 15E6  
                           l2609 15BA                             l2297 235E                             l2289 232E  
                           l2393 178E                             l2385 1758                             l2705 278E  
                           l3193 1276                             l3185 123C                             l3177 122C  
                           l3169 1210                             l2467 28F4                             l2483 2A4A  
                           l2475 2A34                             l2379 1ED8                             l2571 1B1A  
                           l2563 1AEE                             l2491 18E6                             l2811 1D6C  
                           l2803 1D52                             l2731 2668                             l2723 263A  
                           l2651 25CC                             l2459 278A                             l2547 21C8  
                           l2555 2210                             l2539 2180                             l2643 16EA  
                           l2635 16BE                             l2627 1652                             l2619 160E  
                           l2299 2374                             l2395 17AA                             l2387 1764  
                           l2707 2796                             l3195 128E                             l3187 1240  
                           l3179 1230                             l2469 2904                             l2485 2A66  
                           l2477 2A3E                             l2581 1B86                             l2573 1B42  
                           l2565 1AF6                             l2557 1A9C                             l2493 1900  
                           l2813 1D84                             l2805 1D54                             l2733 2672  
                           l2725 2644                             l2661 2058                             l2653 25DC  
                           l2741 29FC                             l2549 21D4                             l2645 1712  
                           l2637 16C6                             l2629 1680                             l2901 0F48  
                           l2397 17C2                             l2389 1768                             l2709 27A6  
                           l3197 12A2                             l3189 1244                             l2719 27CC  
                           l2487 2A7A                             l2479 2A46                             l2591 1BFA  
                           l2583 1BB4                             l2567 1AFE                             l2575 1B46  
                           l2559 1AB6                             l2495 190C                             l2815 1D92  
                           l2807 1D68                             l2735 267C                             l2727 2654  
                           l2671 208C                             l2663 205C                             l2655 25EA  
                           l2751 2A16                             l2743 2A06                             l2639 16CE  
                           l2911 0FF0                             l2903 0F60                             l2399 17CC  
                           l2831 29BA                             l3199 12AA                             l2753 2A96  
                           l2593 1C02                             l2577 1B6A                             l2569 1B0A  
                           l2497 1938                             l2809 1D6A                             l2737 2686  
                           l2729 265E                             l2681 20CE                             l2673 209C  
                           l2665 206A                             l2657 25FA                             l2841 141A  
                           l2761 248E                             l2745 2A08                             l2649 171C  
                           l2921 104E                             l2905 0F78                             l2833 29CA  
                           l2595 1C0E                             l2587 1BC6                             l2579 1B76  
                           l2499 1940                             l2827 1DA4                             l2739 2690  
                           l2691 2120                             l2683 20DA                             l2675 20A0  
                           l2667 207A                             l2659 2604                             l2851 1526  
                           l2843 1436                             l2835 1394                             l2771 24CA  
                           l2763 24B2                             l2755 2454                             l2747 2A12  
                           l2931 10F0                             l2923 107E                             l2907 0FA8  
                           l2915 100C                             l2781 2708                             l2597 1C1E  
                           l2589 1BF2                             l2829 1DBC                             l2861 24E4  
                           l2693 2122                             l2685 20E8                             l2677 20B0  
                           l2669 207E                             l2853 1F16                             l2845 1492  
                           l2837 13AE                             l2773 24D4                             l2765 24BC  
                           l2757 2464                             l2749 2A14                             l2941 1166  
                           l2933 1108                             l2925 1096                             l2917 101E  
                           l2909 0FC0                             l2783 271E                             l2599 1C46  
                           l2791 1C70                             l2871 2524                             l2863 24E8  
                           l2695 212C                             l2687 20F2                             l2679 20C6  
                           l2855 1F28                             l2847 14AE                             l2839 13C6  
                           l2775 24D6                             l2767 24BE                             l2759 248A  
                           l2951 1182                             l2935 1138                             l2919 1036  
                           l2927 10C6                             l2785 272C                             l2793 1C88  
                           l2873 253A                             l2865 24FE                             l2689 2110  
                           l2697 2132                             l2857 1F8A                             l2849 150A  
                           l2777 24E0                             l2769 24C8                             l2953 1194  
                           l2929 10D8                             l2881 0E48                             l2787 2742  
                           l2779 26FE                             l2795 1CBE                             l2875 2550  
                           l2867 2506                             l2699 2142                             l2859 1FF0  
                           l2939 1154                             l2891 0ED2                             l2883 0E60  
                           l2971 281A                             l2981 269C                             l2797 1CDC  
                           l2789 1C52                             l2869 251C                             l2893 0EEA  
                           l2885 0E78                             l2973 282A                             l2965 2802  
                           l2983 26A0                             l2799 1D20                             l2895 0F02  
                           l2887 0EA8                             l2879 0E38                             l2967 280A  
                           l2985 26C6                             l2889 0EC0                             l2977 2A1A  
                           l2969 2812                             l2987 26CA                             l2899 0F36  
                           l2979 2A2E                             STR_1 0E01                             STR_2 0E36  
                           u1100 2942                             u1101 293E                             u1110 2248  
                           u1111 2244                             u2000 26FC                             u1120 2262  
                           u1200 235E                             u2001 26F8                             u1121 225E  
                           u1201 235A                             u1130 2288                             u1210 2374  
                           u1131 2284                             u1211 2370                             u1140 22A6  
                           u1220 2398                             u1300 2844                             u1141 22A2  
                           u1221 2394                             u1301 2840                             u1150 22C2  
                           u1230 2572                             u1310 1DDC                             u1151 22BE  
                           u1231 256E                             u1311 1DD8                             u1160 22E8  
                           u1240 2590                             u1320 1E98                             u1400 1862  
                           u1161 22E4                             u1241 258C                             u1321 1E94  
                           u1401 185E                             u1250 25AC                             u1090 292C  
                           u1170 230C                             u1410 1872                             u1330 1750  
                           u1251 25A8                             u1091 2928                             u1171 2308  
                           u1411 186E                             u1331 174C                             u2131 11D4  
                           u1500 19B4                             u1180 2326                             u1260 23BA  
                           u1420 18B2                             u1340 178E                             u2140 1256  
                           u1501 19B0                             u1181 2322                             u1261 23B6  
                           u1421 18AE                             u1341 178A                             u2141 1252  
                           u1510 19F8                             u1430 2776                             u1190 2340  
                           u1270 23CA                             u1350 17AA                             u2150 12A2  
                           u1511 19F4                             u1431 276E                             u2207 0E6A  
                           u1191 233C                             u1271 23C6                             u1351 17A6  
                           u2151 129E                             u1600 1C46                             u1520 1A0C  
                           u1280 23F0                             u1360 17E0                     _BAUD4CONbits 0EE9  
                           u1601 1C42                             u1521 1A08                             u2217 0E9A  
                           u1281 23EC                             u1361 17DA                             u2161 12B4  
                           u1530 1A90                             u1610 160E                             u1450 2A62  
                           u1290 2422                             u1370 17E2                             u1531 1A8C  
                           u1611 160A                             u2307 10A0                             u2227 0EF4  
                           u1451 2A5C                             u1291 241E                             u2171 12CE  
                           u1700 20C6                             u1540 220C                             u1620 1636  
                           u1460 2A64                             u1380 1842                             u1701 20C2  
                           u1541 2208                             u1621 1632                             u2317 10FA  
                           u2237 0F24                             u1381 183E                             u1470 2904  
                           u1710 20E8                             u1550 2234                             u1630 167A  
                           u1390 1852                             u1471 2900                             u2407 1CE6  
                           u1711 20E4                             u1551 2230                             u1631 1676  
                           u2327 112A                             u2247 0F6A                             u1391 184E  
                           u1480 2A76                             u1560 1B42                             u1800 1D2E  
                           u1720 2110                             u1448 2778                             u1640 168E  
                           u1481 2A72                             u1561 1B3E                             u2417 1D76  
                           u1801 1D2A                             u1721 210C                             u1641 168A  
                           u2337 15DC                             u2257 0F9A                             u1570 1B6A  
                           u1490 198C                             u1810 1D3C                             u1730 2142  
                           u1650 1712                             _T2PR 0FBC                             u1571 1B66  
                           u1491 1988                             u2427 1DAE                             u1811 1D38  
                           u1731 213E                             u1651 170E                             u2347 1648  
                           u2267 0FCA                             u2187 126A                             u1580 1BAE  
                           u1820 1D52                             u1660 25EA                             u1900 0E48  
                           u1740 27C2                             u1581 1BAA                             u2437 195A  
                           u1821 1D4E                             u1661 25E6                             u2357 16E0  
                           u2277 0FFA                             u1901 0E44                             u1741 27BE  
                           u2197 137E                             u1590 1BC2                             u1830 1D68  
                           u1670 2624                             u1910 0ED2                             u1591 1BBE  
                           u2447 19C6                             u1831 1D64                             u1671 2620  
                           u2367 21DA                             u2287 1040                             u1911 0ECE  
                           u1840 1D92                             u1680 206A                             u1920 0F48  
                           u2457 1A5E                             u1841 1D8E                             u2377 264A  
                           u1681 2066                             u2297 1070                             u1921 0F44  
                           u1770 272C                             u1690 208C                             u1930 101E  
                           u1850 29CA                             u1771 2728                             u2467 1B10  
                           u2387 1C7A                             u1691 2088                             u1931 101A  
                           u1851 29C6                             u1780 2742                             u1860 24FE  
                           u1940 10D8                             u1781 273E                             u2477 1B7C  
                           u2397 1CB0                             u1861 24FA                             u1941 10D4  
                           u1790 1D20                             u1870 251C                             u1950 1166  
                           u2487 1C14                             u1791 1D1C                             u1871 2518  
                           u1951 1162                             u1880 253A                             u1960 1194  
                           u1881 2536                             u1961 1190                             u1890 2550  
                           u1970 2A2E                             u1891 254C                             u1971 2A2A  
                           u1980 26C2                             u1990 26EC                             u1987 26B8  
                           u1997 26E2                             abs@a 000B                             _dbuf 00DD  
                           _main 11B2                             _prec 0053                             _move 0E38  
                           fsr0h 0FEA                             fsr1h 0FE2                             indf0 0FEF  
                           fsr2h 0FDA                             fsr0l 0FE9                             indf1 0FE7  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
                           btemp 005A                             prodh 0FF4                             prodl 0FF3  
                           start 008C              main@reverseDuration 008C                 __end_of_ADC_init 2A4E  
                __end_of_HighISR 008C                     ___param_bank 0000                            ??_abs 000D  
           __end_of_batteryLevel 274C                  __end_of___aldiv 2164                            ?_main 0001  
                          _ADPCH 0F5F                  __end_of___awdiv 22FA                            ?_move 0023  
                __end_of___awmod 23AA                  ___awdiv@divisor 0007                  __end_of___lwdiv 25CC  
                          i2l151 2944                            i2l311 2A94                            i2l304 28C6  
                          i2l154 296A                            i2l163 2AE6                            i2l157 2AF0  
                          i2l166 2ABE                            i2l258 0080                            i2l297 29B6  
                ___awdiv@counter 0009                   ??_color_detect 000D                     vfpfcnvrt@fmt 0010  
            ___lmul@multiplicand 0009       __end_of_I2C_2_Master_Start 2ADE       __end_of_I2C_2_Master_Write 2AB4  
                          _flags 0055                       _Buggy_init 27CC                            _fputc 23AA  
                          _width 0051                            _putch 2AF2                            tablat 0FF5  
                          plusw0 0FEB                            plusw2 0FDB                            ttemp5 005B  
                          ttemp6 005E                            ttemp7 0062                            status 0FD8  
                          wtemp8 005B                  __end_of_sprintf 2836                color_detect@color 000D  
                   main@turnRamp 008F            _I2C_2_Master_RepStart 2AC0               putCharToRxBuf@byte 0001  
                __initialization 286A                     __end_of_main 1394                     __end_of_move 11B2  
                i2_isDataInTxBuf 2A7E               putCharToTxBuf@byte 0005              move@reverseDuration 0027  
                         ??_main 0060                           ??_move 002C                    __activetblptr 0002  
                  calibration@mL 0023                    calibration@mR 0024          __end_of_color_normalise 2058  
                   ?_setMotorPWM 0012                           ?_fputc 0005                           _ADRESH 0F64  
                         _CCPR1H 0FAA                           _CCPR2H 0FA6                           _CCPR3H 0F25  
                         _CCPR4H 0F21                 ___awdiv@dividend 0005                           ?_putch 0001  
                         _RC0PPS 0E62                           _RC4REG 0EE3                           _RE2PPS 0E74  
                         _RC7PPS 0E69                           _RD5PPS 0E6F                           _RE4PPS 0E76  
                         _RD6PPS 0E70                           i2l3001 2ADE                           i2l3003 2AE2  
                         i2l2053 2994                           i2l3005 2AB6                           i2l3101 004A  
                         i2l2055 29A4                           i2l3007 2ABA                           i2l3103 0050  
                         i2l2057 29A8                           i2l2081 2A7E                           i2l3105 0060  
                         i2l2059 29B4                           i2l3107 0068                           i2l3109 007C  
                         i2l3091 0012                           i2l3093 0022                           i2l3095 0024  
                         i2l3097 0038                           i2l2715 2944                           i2l3099 003C  
                         i2l2717 2954                           _RG6PPS 0E88                           i2l2991 28AC  
                         i2l2993 28B0                           i2l2989 289C                           i2l2997 2AE8  
                         i2l2999 2AEC                    vfpfcnvrt@done 0013                        ??_HighISR 0003  
       __end_of_color_click_init 269C                           _RX4PPS 0E15                           _TX4REG 0EE4  
                   ??_ADC_getval 0005              calibration@turnRamp 0027          calibration@turnDuration 0026  
                   _CCPTMRS0bits 0FAD                     vfprintf@cfmt 001D                 _getCharFromTxBuf 289C  
                         ___lmul 25CC                        ??___aldiv 0019                           ___wmul 296C  
                      ??___awdiv 0009                        ??___awmod 0009                        ??___lwdiv 000F  
             color_detect@RGBC_n 0005                           clear_0 2870                           clear_1 287C  
                         clear_2 2888                 ___awdiv@quotient 000B                  ___awmod@divisor 0007  
                         isa$std 0001                  ___awmod@counter 0009                           fputc@c 0005  
              ?_TxBufferedString 0006                           move@mL 0023                           move@mR 0024  
                   __mediumconst 0000                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                        ?_ADC_init 0001               ??_TxBufferedString 0008  
                         putch@c 0001                 __end_of_vfprintf 27CC                      ?_Buggy_init 0001  
              ??_initDCmotorsPWM 0007                        ??_sprintf 0030               __end_of_ADC_getval 2A7E  
               __end_of_turnLeft 1C52            __end_of_isDataInTxBuf 2A66                       __accesstop 0060  
        __end_of__initialization 288E                  fullSpeedAhead@i 001E                    main@turnSpeed 008E  
         ?_I2C_2_Master_RepStart 0001          __end_ofi2_isDataInTxBuf 2A96                    ___rparam_used 0001  
           __end_of_color_detect 2558                  _Interrupts_init 2A96                   __pcstackCOMRAM 0001  
                   ?_white_Light 0001                    __end_of_fputc 2454                    __end_of_putch 2AF4  
               _reverseOneSquare 156A                 ?_color_normalise 001F                       ??_ADC_init 0005  
                        ??_fputc 0008                          ??_putch 0005                     _batteryLevel 26FE  
                     __pbssBANK0 00B5                       __pbssBANK1 0100                _color_writetoaddr 29DC  
                   _T2CLKCONbits 0FBF               ?_color_writetoaddr 0007                          ?___lmul 0005  
                        ?___wmul 0005                   ___lmul@product 000D              ??_color_writetoaddr 0008  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5       fullSpeedAhead@straightRamp 001A  
          turnRight@turnDuration 001A                          i2u93_40 29A4                          i2u93_41 29A0  
                        i2u95_40 2A92                          i2u95_41 2A8C                          i2u96_40 2A94  
                        _SSP2ADD 0ED6                          _SSP2BUF 0ED5                       _color_read 1394  
        __end_of_Interrupts_init 2AA8           color_writetoaddr@value 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 29FC                 ?i2_isDataInTxBuf 0001                        _ADREFbits 0F58  
             _I2C_2_Master_Start 2AD4                       _initUSART4 29FC              i2_I2C_2_Master_Idle 2944  
             _I2C_2_Master_Write 2AA8                          __Hparam 0000              i2_I2C_2_Master_Stop 2ADE  
                        __Lparam 0000             calibration@turnSpeed 0025                          ___aldiv 2058  
                        ___awdiv 2236                          ___awmod 22FA                    ??_calibration 0028  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 2558              ?_I2C_2_Master_Write 0001  
                      ?_vfprintf 001A                     __psmallconst 0E00                          __pcinit 286A  
                        __ramtop 0E00                        ?_turnLeft 0017                          __ptext0 11B2  
                        __ptext1 29B8                          __ptext2 2802                          __ptext3 278E  
                        __ptext4 172E                          __ptext5 23AA                          __ptext6 2AF2  
                        __ptext7 2836                          __ptext8 22FA                          __ptext9 2A1A  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 0FBD             ?i2_I2C_2_Master_Stop 0001  
               ___awmod@dividend 0005                 ___aldiv@dividend 0011                        _T2HLTbits 0FBE  
                  _RxBufWriteCnt 0059         __end_of_getCharFromTxBuf 28C8                          main@buf 0062  
                        _sprintf 2802             ??_I2C_2_Master_Start 0006             ??_I2C_2_Master_Write 0006  
          color_normalise@RGBC_n 0027             end_of_initialization 288E                __end_of_sendTxBuf 2A34  
               ADC_getval@tmpval 0005                reverseOneSquare@i 001F                          fputc@fp 0007  
                  __Lmediumconst 0000                ?_color_click_init 0001               ??_color_click_init 0009  
              __end_of_vfpfcnvrt 18E6                 ___aldiv@quotient 001B       batteryLevel@batteryQuarter 000E  
                        postdec2 0FDD                          postinc0 0FEE                          postinc1 0FE6  
                        postinc2 0FDE                 vfpfcnvrt@convarg 0015       batteryLevel@batteryVoltage 000D  
                     main@F14568 00B5                       ??_vfprintf 001D                  _initDCmotorsPWM 2454  
                     ??_turnLeft 001C                        _PORTFbits 0F8E               setMotorPWM@negDuty 0016  
          ??i2_I2C_2_Master_Idle 0001                    move@turnSpeed 0029                __end_of_turnRight 1A9C  
          ??i2_I2C_2_Master_Stop 0002                       main@RGBC_n 0091              __end_of_calibration 1DC2  
                   _color_detect 24E4                        _TRISAbits 0F81               setMotorPWM@posDuty 0015  
                      _TRISBbits 0F82                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 white_Light@state 0005                     ??_Buggy_init 0005  
               fullSpeedAhead@mL 0017                 fullSpeedAhead@mR 0018                      ?_color_read 0009  
       color_writetoaddr@address 0008          ??_I2C_2_Master_RepStart 0006         __end_of_reverseOneSquare 172E  
               ?_Interrupts_init 0001                      _CCP1CONbits 0FAB                     _EUSART4RXbuf 003D  
                   _EUSART4TXbuf 0100                      _CCP2CONbits 0FA7                      _CCP3CONbits 0F26  
                    ?_initUSART4 0001                      _CCP4CONbits 0F22                       main@motorL 00A1  
                     main@motorR 00AB                   color_read@RGBC 0009                   _fullSpeedAhead 2164  
                 __end_of___lmul 2636             turnLeft@turnDuration 001A                      vfpfcnvrt@ap 0011  
                    vfpfcnvrt@cp 0014                      vfpfcnvrt@fp 000F                   __end_of___wmul 2992  
             __end_of_Buggy_init 2802              start_initialization 286A                      __end_of_abs 286A  
                  _TxBufWriteCnt 0057          __end_of_initDCmotorsPWM 24E4                      vfprintf@fmt 001B  
         __end_of_fullSpeedAhead 2236               turnRight@cur_power 0021                         ??___lmul 000D  
                       ??___wmul 0009                   _putCharToRxBuf 2992                   _putCharToTxBuf 28F2  
            color_normalise@RGBC 001F    i2I2C_2_Master_Write@data_byte 0002                      _calibration 1C52  
   reverseOneSquare@straightRamp 001B     __end_ofi2_I2C_2_Master_Start 2AF2     __end_ofi2_I2C_2_Master_Write 2AC0  
              turnLeft@cur_power 0021                      __pbssCOMRAM 003D                    __pcstackBANK0 0060  
                       ?_HighISR 0001                 ___lwdiv@dividend 000B           __end_of_putCharToRxBuf 29B8  
         __end_of_putCharToTxBuf 291C                  ?_fullSpeedAhead 0017                        __pintcode 0008  
                       ?___aldiv 0011               turnRight@turnSpeed 0019                         ?___awdiv 0005  
                       ?___awmod 0005                         ?___lwdiv 000B           TxBufferedString@string 0006  
           I2C_2_Master_Read@ack 0007             I2C_2_Master_Read@tmp 0008                      __smallconst 0E00  
              _I2C_2_Master_Idle 291C                _I2C_2_Master_Init 28C8                _I2C_2_Master_Read 274C  
              turnLeft@turnSpeed 0019                _I2C_2_Master_Stop 2ACA                     _RxBufReadCnt 0058  
                       _ADC_init 2A34               ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0013               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000F         initDCmotorsPWM@PWMperiod 0005                         ?_sprintf 001E  
              ?_getCharFromTxBuf 0001               ??_getCharFromTxBuf 0001                move@straightSpeed 0026  
                ___aldiv@divisor 0015              ??_I2C_2_Master_Idle 0005                  ___aldiv@counter 0019  
            ??_I2C_2_Master_Init 0005              ??_I2C_2_Master_Read 0006                   ___wmul@product 0009  
                       _LATAbits 0F79              ??_I2C_2_Master_Stop 0006                         _LATCbits 0F7B  
                  _isDataInTxBuf 2A4E                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                 _TxBufferedString 269C                         _LATGbits 0F7F  
                       _LATHbits 0F80                        _sendTxBuf 2A1A                         _IPR0bits 0E1F  
                       _PIE0bits 0E29                         _PIE4bits 0E2D                         i2u201_40 28AC  
                       i2u201_41 28A8                         i2u210_40 007C                         i2u210_41 0078  
                    turnRight@mL 0017                         i2u207_40 0022                         i2u207_41 001E  
                    turnRight@mR 0018                         i2u208_40 004A                         i2u208_41 0046  
                       i2u209_40 0060                         i2u209_41 005C                         i2u175_40 2954  
                       i2u175_41 2950                         _PIR0bits 0E33                         i2u176_40 296A  
                       i2u176_41 2966                         _PIR4bits 0E37                  ?_putCharToRxBuf 0001  
               ?_initDCmotorsPWM 0005                  ?_putCharToTxBuf 0001      fullSpeedAhead@straightSpeed 0019  
                       _SSP2CON2 0EDA                         _SSP2STAT 0ED8                     move@turnRamp 002B  
                      _vfpfcnvrt 172E                       _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 2944  
      __end_of_I2C_2_Master_Init 28F2        __end_of_I2C_2_Master_Read 278E                ___wmul@multiplier 0005  
      __end_of_I2C_2_Master_Stop 2AD4                     setMotorPWM@m 0012      I2C_2_Master_Write@data_byte 0006  
                      main@color 008D                     _TxBufReadCnt 0056                        _turnRight 18E6  
                     vfpfcnvrt@c 0019                     ??_color_read 000A                ___lmul@multiplier 0005  
                 ?_isDataInTxBuf 0001    __end_of_I2C_2_Master_RepStart 2ACA                ?_reverseOneSquare 0017  
            __end_of_setMotorPWM 1F16                       ?_sendTxBuf 0001                     ??_initUSART4 0005  
           i2_I2C_2_Master_Start 2AE8  reverseOneSquare@reverseDuration 001A             i2_I2C_2_Master_Write 2AB4  
             ??_reverseOneSquare 001C                         __Hrparam 0000                ??_color_normalise 0028  
                     _ADC_getval 2A66                       vfprintf@ap 001C                         __Lrparam 0000  
                     vfprintf@fp 001A                    ??_white_Light 0005      __end_ofi2_I2C_2_Master_Idle 296C  
    __end_ofi2_I2C_2_Master_Stop 2AE8                       ?_vfpfcnvrt 000F               __end_of_color_read 156A  
                     _ANSELBbits 0E9A                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                     sprintf@fmt 001F    reverseOneSquare@straightSpeed 0019                  ___lwdiv@divisor 000D  
             __end_of_initUSART4 2A1A                  ___lwdiv@counter 0011                turnRight@turnRamp 001B  
                     ?_turnRight 0017                         __ptext10 2A4E                         __ptext11 0E38  
                       __ptext20 25CC                         __ptext12 156A                         __ptext21 2058  
                       __ptext13 2164                         __ptext30 1C52                         __ptext22 24E4  
                       __ptext14 29FC                         __ptext31 18E6                         __ptext23 2636  
                       __ptext15 2454                         __ptext40 269C                         __ptext32 1A9C  
                       __ptext24 29DC                         __ptext16 1394                         __ptext41 28F2  
                       __ptext33 1DC2                         __ptext25 2AA8                         __ptext17 2AC0  
                       __ptext50 2992                         __ptext42 2A96                         __ptext34 296C  
                       __ptext26 2ACA                         __ptext18 274C                         __ptext51 289C  
                       __ptext43 27CC                         __ptext35 2558                         __ptext27 2AD4  
                       __ptext19 1F16                         __ptext36 26FE                         __ptext28 291C  
                       __ptext45 2A7E                         __ptext37 2236                         __ptext29 28C8  
                       __ptext46 2AB4                         __ptext38 2A34                         __ptext47 2ADE  
                       __ptext39 2A66                         __ptext48 2AE8                         __ptext49 2944  
                      move@color 0025                    ?_batteryLevel 0001                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                 turnLeft@turnRamp 001B                       turnLeft@mL 0017  
                     turnLeft@mR 0018            ?i2_I2C_2_Master_Start 0001                 move@straightRamp 0028  
          ?i2_I2C_2_Master_Write 0001                       turnRight@i 001F                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         main@RGBC 0099                         int$flags 005A  
                   ?_calibration 0023                         _vfprintf 278E                         _turnLeft 1A9C  
        fullSpeedAhead@cur_power 0020              __end_of_white_Light 29DC                       _INTCONbits 0FF2  
              ??i2_isDataInTxBuf 0001        reverseOneSquare@cur_power 0021               reverseOneSquare@mL 0017  
             reverseOneSquare@mR 0018                 move@turnDuration 002A                   ??_batteryLevel 000D  
                    _setMotorPWM 1DC2                  ??_isDataInTxBuf 0005                         intlevel2 0000  
                      sprintf@ap 0030                 ??_fullSpeedAhead 001B                      ??_sendTxBuf 0005  
                      turnLeft@i 001F                      ?_ADC_getval 0001                main@straightSpeed 008A  
                    ??_vfpfcnvrt 0012                 _color_click_init 2636         __end_of_TxBufferedString 26FE  
                       sprintf@f 0031                         sprintf@s 001E                       _SSP2DATPPS 0E1D  
                     _SSP2CLKPPS 0E1C                     ___aldiv@sign 001A                      ??_turnRight 001C  
               main@straightRamp 008B                       _TX4STAbits 0EE8           ??i2_I2C_2_Master_Start 0002  
         ??i2_I2C_2_Master_Write 0002                 ??_putCharToRxBuf 0001                 ??_putCharToTxBuf 0005  
