

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 17:44:29 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 21/07/2023 GMT
    78                           ; 
    79                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112                           	psect	idataBANK0
   113   004C80                     __pidataBANK0:
   114                           	callstack 0
   115                           
   116                           ;initializer for main@F14661
   117   004C80  02                 	db	2
   118   004C81  02                 	db	2
   119   004C82  01                 	db	1
   120   004C83  01                 	db	1
   121                           
   122                           ;initializer for _ambient
   123   004C84  01F4               	dw	500
   124   000000                     _TRISCbits	set	3971
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _SP4BRGL	set	3813
   128   000000                     _TX4STAbits	set	3816
   129   000000                     _BAUD4CONbits	set	3817
   130   000000                     _TX4REG	set	3812
   131   000000                     _TRISBbits	set	3970
   132   000000                     _TRISAbits	set	3969
   133   000000                     _TRISEbits	set	3973
   134   000000                     _TRISGbits	set	3975
   135   000000                     _LATFbits	set	3966
   136   000000                     _TRISFbits	set	3974
   137   000000                     _TRISHbits	set	3976
   138   000000                     _TRISDbits	set	3972
   139   000000                     _LATEbits	set	3965
   140   000000                     _LATGbits	set	3967
   141   000000                     _LATHbits	set	3968
   142   000000                     _SSP2CON2bits	set	3802
   143   000000                     _TMR0IF	set	29085
   144   000000                     _TMR0IE	set	29005
   145   000000                     _RX4PPS	set	3605
   146   000000                     _SSP2CLKPPS	set	3612
   147   000000                     _SSP2DATPPS	set	3613
   148   000000                     _PIE0bits	set	3625
   149   000000                     _CCPR4H	set	3873
   150   000000                     _CCPR3H	set	3877
   151   000000                     _CCPR2H	set	4006
   152   000000                     _CCPR1H	set	4010
   153   000000                     _CCP1CONbits	set	4011
   154   000000                     _CCPTMRS0bits	set	4013
   155   000000                     _T2PR	set	4028
   156   000000                     _T2CONbits	set	4029
   157   000000                     _INTCONbits	set	4082
   158   000000                     _CCP2CONbits	set	4007
   159   000000                     _CCP3CONbits	set	3878
   160   000000                     _ADREFbits	set	3928
   161   000000                     _LATAbits	set	3961
   162   000000                     _LATDbits	set	3964
   163   000000                     _PORTFbits	set	3982
   164   000000                     _CCP4CONbits	set	3874
   165   000000                     _PIE4bits	set	3629
   166   000000                     _RD5PPS	set	3695
   167   000000                     _ANSELDbits	set	3751
   168   000000                     _SSP2ADD	set	3798
   169   000000                     _SSP2CON1bits	set	3801
   170   000000                     _LATCbits	set	3963
   171   000000                     _RC4REG	set	3811
   172   000000                     _SSP2CON2	set	3802
   173   000000                     _SSP2STAT	set	3800
   174   000000                     _ANSELFbits	set	3764
   175   000000                     _SSP2BUF	set	3797
   176   000000                     _IPR0bits	set	3615
   177   000000                     _RE2PPS	set	3700
   178   000000                     _ANSELBbits	set	3738
   179   000000                     _RD6PPS	set	3696
   180   000000                     _PIR0bits	set	3635
   181   000000                     _PIR4bits	set	3639
   182   000000                     _RC0PPS	set	3682
   183   000000                     _RC7PPS	set	3689
   184   000000                     _ADPCH	set	3935
   185   000000                     _ADRESH	set	3940
   186   000000                     _ADCON0bits	set	3936
   187   000000                     _RE4PPS	set	3702
   188   000000                     _RG6PPS	set	3720
   189   000000                     _TMR0L	set	4051
   190   000000                     _TMR0H	set	4052
   191   000000                     _T0CON0bits	set	4053
   192   000000                     _T0CON1bits	set	4054
   193   000000                     _T2CLKCONbits	set	4031
   194   000000                     _T2HLTbits	set	4030
   195                           
   196                           ; #config settings
   197                           
   198                           	psect	cinit
   199   004864                     __pcinit:
   200                           	callstack 0
   201   004864                     start_initialization:
   202                           	callstack 0
   203   004864                     __initialization:
   204                           	callstack 0
   205                           
   206                           ; Initialize objects allocated to BANK0 (6 bytes)
   207                           ; load TBLPTR registers with __pidataBANK0
   208   004864  0E80               	movlw	low __pidataBANK0
   209   004866  6EF6               	movwf	tblptrl,c
   210   004868  0E4C               	movlw	high __pidataBANK0
   211   00486A  6EF7               	movwf	tblptrh,c
   212   00486C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   213   00486E  6EF8               	movwf	tblptru,c
   214   004870  EE00  F0F5         	lfsr	0,__pdataBANK0
   215   004874  EE10 F006          	lfsr	1,6
   216   004878                     copy_data0:
   217   004878  0009               	tblrd		*+
   218   00487A  CFF5 FFEE          	movff	tablat,postinc0
   219   00487E  50E5               	movf	postdec1,w,c
   220   004880  50E1               	movf	fsr1l,w,c
   221   004882  E1FA               	bnz	copy_data0
   222                           
   223                           ; Clear objects allocated to BANK2 (142 bytes)
   224   004884  EE02  F000         	lfsr	0,__pbssBANK2
   225   004888  0E8E               	movlw	142
   226   00488A                     clear_0:
   227   00488A  6AEE               	clrf	postinc0,c
   228   00488C  06E8               	decf	wreg,f,c
   229   00488E  E1FD               	bnz	clear_0
   230                           
   231                           ; Clear objects allocated to BANK1 (40 bytes)
   232   004890  EE01  F0D7         	lfsr	0,__pbssBANK1
   233   004894  0E28               	movlw	40
   234   004896                     clear_1:
   235   004896  6AEE               	clrf	postinc0,c
   236   004898  06E8               	decf	wreg,f,c
   237   00489A  E1FD               	bnz	clear_1
   238                           
   239                           ; Clear objects allocated to BANK0 (61 bytes)
   240   00489C  EE00  F0B8         	lfsr	0,__pbssBANK0
   241   0048A0  0E3D               	movlw	61
   242   0048A2                     clear_2:
   243   0048A2  6AEE               	clrf	postinc0,c
   244   0048A4  06E8               	decf	wreg,f,c
   245   0048A6  E1FD               	bnz	clear_2
   246                           
   247                           ; Clear objects allocated to COMRAM (5 bytes)
   248   0048A8  6A4F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   249   0048AA  6A4E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   250   0048AC  6A4D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   251   0048AE  6A4C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   252   0048B0  6A4B               	clrf	__pbssCOMRAM& (0+255),c
   253   0048B2                     end_of_initialization:
   254                           	callstack 0
   255   0048B2                     __end_of__initialization:
   256                           	callstack 0
   257   0048B2  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   258   0048B4  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   259   0048B6  0100               	movlb	0
   260   0048B8  EFC0  F013         	goto	_main	;jump to C main() function
   261                           
   262                           	psect	bssCOMRAM
   263   00004B                     __pbssCOMRAM:
   264                           	callstack 0
   265   00004B                     _lost:
   266                           	callstack 0
   267   00004B                     	ds	1
   268   00004C                     _TxBufReadCnt:
   269                           	callstack 0
   270   00004C                     	ds	1
   271   00004D                     _TxBufWriteCnt:
   272                           	callstack 0
   273   00004D                     	ds	1
   274   00004E                     _RxBufReadCnt:
   275                           	callstack 0
   276   00004E                     	ds	1
   277   00004F                     _RxBufWriteCnt:
   278                           	callstack 0
   279   00004F                     	ds	1
   280                           
   281                           	psect	bssBANK0
   282   0000B8                     __pbssBANK0:
   283                           	callstack 0
   284   0000B8                     	ds	40
   285   0000E0                     _EUSART4RXbuf:
   286                           	callstack 0
   287   0000E0                     	ds	20
   288   0000F4                     _brightnessChange:
   289                           	callstack 0
   290   0000F4                     	ds	1
   291                           
   292                           	psect	dataBANK0
   293   0000F5                     __pdataBANK0:
   294                           	callstack 0
   295   0000F5                     main@F14661:
   296                           	callstack 0
   297   0000F5                     	ds	4
   298   0000F9                     _ambient:
   299                           	callstack 0
   300   0000F9                     	ds	2
   301                           
   302                           	psect	bssBANK1
   303   0001D7                     __pbssBANK1:
   304                           	callstack 0
   305   0001D7                     	ds	40
   306                           
   307                           	psect	bssBANK2
   308   000200                     __pbssBANK2:
   309                           	callstack 0
   310   000200                     	ds	82
   311   000252                     _EUSART4TXbuf:
   312                           	callstack 0
   313   000252                     	ds	60
   314                           
   315                           	psect	cstackBANK1
   316   000100                     __pcstackBANK1:
   317                           	callstack 0
   318   000100                     main@straightTime:
   319                           	callstack 0
   320                           
   321                           ; 82 bytes @ 0x0
   322   000100                     	ds	82
   323   000152                     main@moveSequence:
   324                           	callstack 0
   325                           
   326                           ; 40 bytes @ 0x52
   327   000152                     	ds	40
   328   00017A                     main@reverseDuration:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x7A
   332   00017A                     	ds	1
   333   00017B                     main@wall:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x7B
   337   00017B                     	ds	1
   338   00017C                     main@ambientNew:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x7C
   342   00017C                     	ds	2
   343   00017E                     main@turnSpeed:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x7E
   347   00017E                     	ds	1
   348   00017F                     main@turnRamp:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0x7F
   352   00017F                     	ds	1
   353   000180                     main@red:
   354                           	callstack 0
   355                           
   356                           ; 6 bytes @ 0x80
   357   000180                     	ds	6
   358   000186                     main@green:
   359                           	callstack 0
   360                           
   361                           ; 6 bytes @ 0x86
   362   000186                     	ds	6
   363   00018C                     main@blue:
   364                           	callstack 0
   365                           
   366                           ; 6 bytes @ 0x8C
   367   00018C                     	ds	6
   368   000192                     main@yellow:
   369                           	callstack 0
   370                           
   371                           ; 6 bytes @ 0x92
   372   000192                     	ds	6
   373   000198                     main@pink:
   374                           	callstack 0
   375                           
   376                           ; 6 bytes @ 0x98
   377   000198                     	ds	6
   378   00019E                     main@orange:
   379                           	callstack 0
   380                           
   381                           ; 6 bytes @ 0x9E
   382   00019E                     	ds	6
   383   0001A4                     main@lightblue:
   384                           	callstack 0
   385                           
   386                           ; 6 bytes @ 0xA4
   387   0001A4                     	ds	6
   388   0001AA                     main@white:
   389                           	callstack 0
   390                           
   391                           ; 6 bytes @ 0xAA
   392   0001AA                     	ds	6
   393   0001B0                     main@straightSpeed:
   394                           	callstack 0
   395                           
   396                           ; 1 bytes @ 0xB0
   397   0001B0                     	ds	1
   398   0001B1                     main@curMove:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0xB1
   402   0001B1                     	ds	1
   403   0001B2                     main@straightRamp:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0xB2
   407   0001B2                     	ds	1
   408   0001B3                     main@color:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xB3
   412   0001B3                     	ds	1
   413   0001B4                     main@turnDuration:
   414                           	callstack 0
   415                           
   416                           ; 1 bytes @ 0xB4
   417   0001B4                     	ds	1
   418   0001B5                     main@HSV:
   419                           	callstack 0
   420                           
   421                           ; 6 bytes @ 0xB5
   422   0001B5                     	ds	6
   423   0001BB                     main@RGBC:
   424                           	callstack 0
   425                           
   426                           ; 8 bytes @ 0xBB
   427   0001BB                     	ds	8
   428   0001C3                     main@motorR:
   429                           	callstack 0
   430                           
   431                           ; 10 bytes @ 0xC3
   432   0001C3                     	ds	10
   433   0001CD                     main@motorL:
   434                           	callstack 0
   435                           
   436                           ; 10 bytes @ 0xCD
   437   0001CD                     	ds	10
   438                           
   439                           	psect	cstackBANK0
   440   000060                     __pcstackBANK0:
   441                           	callstack 0
   442   000060                     ??_color_detect:
   443   000060                     move@mL:
   444                           	callstack 0
   445   000060                     _rgb_2_hsv$3606:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x0
   449   000060                     	ds	2
   450   000062                     move@mR:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x2
   454   000062                     	ds	2
   455   000064                     move@color:
   456                           	callstack 0
   457   000064                     rgb_2_hsv@cmin:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x4
   461   000064                     	ds	1
   462   000065                     move@moveSequence:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x5
   466   000065                     	ds	1
   467   000066                     _rgb_2_hsv$3604:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x6
   471   000066                     	ds	1
   472   000067                     move@straightTime:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x7
   476   000067                     	ds	1
   477   000068                     _rgb_2_hsv$3605:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x8
   481   000068                     	ds	1
   482   000069                     move@curMove:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0x9
   486   000069                     	ds	1
   487   00006A                     move@straightSpeed:
   488                           	callstack 0
   489   00006A                     rgb_2_hsv@r:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0xA
   493   00006A                     	ds	1
   494   00006B                     move@reverseDuration:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0xB
   498   00006B                     	ds	1
   499   00006C                     move@straightRamp:
   500                           	callstack 0
   501   00006C                     rgb_2_hsv@cmax:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0xC
   505   00006C                     	ds	1
   506   00006D                     move@turnSpeed:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0xD
   510   00006D                     	ds	1
   511   00006E                     move@turnDuration:
   512                           	callstack 0
   513   00006E                     rgb_2_hsv@diff:
   514                           	callstack 0
   515                           
   516                           ; 4 bytes @ 0xE
   517   00006E                     	ds	1
   518   00006F                     move@turnRamp:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0xF
   522   00006F                     	ds	3
   523   000072                     rgb_2_hsv@g:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x12
   527   000072                     	ds	2
   528   000074                     rgb_2_hsv@b:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x14
   532   000074                     	ds	2
   533   000076                     color_calibration@RGBC:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x16
   537   000076                     	ds	2
   538   000078                     color_calibration@HSV:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x18
   542   000078                     	ds	2
   543   00007A                     color_calibration@red:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x1A
   547   00007A                     	ds	2
   548   00007C                     color_calibration@green:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x1C
   552   00007C                     	ds	2
   553   00007E                     color_calibration@blue:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x1E
   557   00007E                     	ds	2
   558   000080                     color_calibration@yellow:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x20
   562   000080                     	ds	2
   563   000082                     color_calibration@pink:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x22
   567   000082                     	ds	2
   568   000084                     color_calibration@orange:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x24
   572   000084                     	ds	2
   573   000086                     color_calibration@lightblue:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x26
   577   000086                     	ds	2
   578   000088                     color_calibration@white:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x28
   582   000088                     	ds	2
   583   00008A                     ??_main:
   584                           
   585                           ; 1 bytes @ 0x2A
   586   00008A                     	ds	2
   587   00008C                     main@buf:
   588                           	callstack 0
   589                           
   590                           ; 40 bytes @ 0x2C
   591   00008C                     	ds	40
   592   0000B4                     main@testSequence:
   593                           	callstack 0
   594                           
   595                           ; 4 bytes @ 0x54
   596   0000B4                     	ds	4
   597                           
   598                           	psect	cstackCOMRAM
   599   000001                     __pcstackCOMRAM:
   600                           	callstack 0
   601   000001                     ??_getCharFromTxBuf:
   602   000001                     ??i2_I2C_2_Master_Idle:
   603   000001                     ?i2___lwdiv:
   604                           	callstack 0
   605   000001                     putCharToRxBuf@byte:
   606                           	callstack 0
   607   000001                     i2___lwdiv@dividend:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0x0
   611   000001                     	ds	1
   612   000002                     i2I2C_2_Master_Write@data_byte:
   613                           	callstack 0
   614                           
   615                           ; 1 bytes @ 0x1
   616   000002                     	ds	1
   617   000003                     i2color_writetoaddr@value:
   618                           	callstack 0
   619   000003                     i2___lwdiv@divisor:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x2
   623   000003                     	ds	1
   624   000004                     i2color_writetoaddr@address:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x3
   628   000004                     	ds	1
   629   000005                     i2___lwdiv@quotient:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x4
   633   000005                     	ds	2
   634   000007                     i2___lwdiv@counter:
   635                           	callstack 0
   636                           
   637                           ; 1 bytes @ 0x6
   638   000007                     	ds	1
   639   000008                     ??i2_color_clear_init_interrupts:
   640                           
   641                           ; 1 bytes @ 0x7
   642   000008                     	ds	1
   643   000009                     i2color_clear_init_interrupts@high_threshold:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x8
   647   000009                     	ds	2
   648   00000B                     i2color_clear_init_interrupts@low_threshold:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0xA
   652   00000B                     	ds	2
   653   00000D                     ??_HighISR:
   654                           
   655                           ; 1 bytes @ 0xC
   656   00000D                     	ds	3
   657   000010                     ??_I2C_2_Master_Idle:
   658   000010                     ?_get16bitTMR0val:
   659                           	callstack 0
   660   000010                     ?_min:
   661                           	callstack 0
   662   000010                     ?_max:
   663                           	callstack 0
   664   000010                     ?___wmul:
   665                           	callstack 0
   666   000010                     ?___awdiv:
   667                           	callstack 0
   668   000010                     ?___lmul:
   669                           	callstack 0
   670   000010                     white_Light@state:
   671                           	callstack 0
   672   000010                     ADC_getval@tmpval:
   673                           	callstack 0
   674   000010                     max@a:
   675                           	callstack 0
   676   000010                     min@a:
   677                           	callstack 0
   678   000010                     initDCmotorsPWM@PWMperiod:
   679                           	callstack 0
   680   000010                     ___wmul@multiplier:
   681                           	callstack 0
   682   000010                     ___awdiv@dividend:
   683                           	callstack 0
   684   000010                     ___lmul@multiplier:
   685                           	callstack 0
   686                           
   687                           ; 4 bytes @ 0xF
   688   000010                     	ds	1
   689   000011                     ??_I2C_2_Master_Read:
   690   000011                     I2C_2_Master_Write@data_byte:
   691                           	callstack 0
   692                           
   693                           ; 1 bytes @ 0x10
   694   000011                     	ds	1
   695   000012                     ??_get16bitTMR0val:
   696   000012                     color_writetoaddr@value:
   697                           	callstack 0
   698   000012                     I2C_2_Master_Read@ack:
   699                           	callstack 0
   700   000012                     max@b:
   701                           	callstack 0
   702   000012                     min@b:
   703                           	callstack 0
   704   000012                     ___wmul@multiplicand:
   705                           	callstack 0
   706   000012                     ___awdiv@divisor:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x11
   710   000012                     	ds	1
   711   000013                     color_writetoaddr@address:
   712                           	callstack 0
   713   000013                     I2C_2_Master_Read@tmp:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x12
   717   000013                     	ds	1
   718   000014                     ___awdiv@counter:
   719                           	callstack 0
   720   000014                     color_read@RGBC:
   721                           	callstack 0
   722   000014                     get16bitTMR0val@timer_low:
   723                           	callstack 0
   724   000014                     ___wmul@product:
   725                           	callstack 0
   726   000014                     ___lmul@multiplicand:
   727                           	callstack 0
   728   000014                     color_detect@HSV:
   729                           	callstack 0
   730                           
   731                           ; 6 bytes @ 0x13
   732   000014                     	ds	1
   733   000015                     ___awdiv@sign:
   734                           	callstack 0
   735                           
   736                           ; 1 bytes @ 0x14
   737   000015                     	ds	1
   738   000016                     ??_color_read:
   739   000016                     ?___lwdiv:
   740                           	callstack 0
   741   000016                     get16bitTMR0val@timer_high:
   742                           	callstack 0
   743   000016                     ___awdiv@quotient:
   744                           	callstack 0
   745   000016                     ___lwdiv@dividend:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x15
   749   000016                     	ds	2
   750   000018                     batteryLevel@batteryVoltage:
   751                           	callstack 0
   752   000018                     get16bitTMR0val@timer_val:
   753                           	callstack 0
   754   000018                     ___lwdiv@divisor:
   755                           	callstack 0
   756   000018                     ___lmul@product:
   757                           	callstack 0
   758                           
   759                           ; 4 bytes @ 0x17
   760   000018                     	ds	1
   761   000019                     batteryLevel@batteryQuarter:
   762                           	callstack 0
   763                           
   764                           ; 1 bytes @ 0x18
   765   000019                     	ds	1
   766   00001A                     ___lwdiv@quotient:
   767                           	callstack 0
   768   00001A                     color_detect@red:
   769                           	callstack 0
   770                           
   771                           ; 6 bytes @ 0x19
   772   00001A                     	ds	2
   773   00001C                     ?___lldiv:
   774                           	callstack 0
   775   00001C                     ?___aldiv:
   776                           	callstack 0
   777   00001C                     ___lwdiv@counter:
   778                           	callstack 0
   779   00001C                     ___lldiv@dividend:
   780                           	callstack 0
   781   00001C                     ___aldiv@dividend:
   782                           	callstack 0
   783                           
   784                           ; 4 bytes @ 0x1B
   785   00001C                     	ds	1
   786   00001D                     ??_color_clear_init_interrupts:
   787   00001D                     setMotorPWM@m:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x1C
   791   00001D                     	ds	1
   792   00001E                     color_clear_init_interrupts@high_threshold:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x1D
   796   00001E                     	ds	1
   797   00001F                     ??_setMotorPWM:
   798                           
   799                           ; 1 bytes @ 0x1E
   800   00001F                     	ds	1
   801   000020                     color_clear_init_interrupts@low_threshold:
   802                           	callstack 0
   803   000020                     ___lldiv@divisor:
   804                           	callstack 0
   805   000020                     ___aldiv@divisor:
   806                           	callstack 0
   807   000020                     color_detect@green:
   808                           	callstack 0
   809                           
   810                           ; 6 bytes @ 0x1F
   811   000020                     	ds	1
   812   000021                     setMotorPWM@posDuty:
   813                           	callstack 0
   814                           
   815                           ; 1 bytes @ 0x20
   816   000021                     	ds	1
   817   000022                     ??_color_click_init:
   818   000022                     setMotorPWM@negDuty:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x21
   822   000022                     	ds	1
   823   000023                     stop@mL:
   824                           	callstack 0
   825   000023                     turnLeft@mL:
   826                           	callstack 0
   827   000023                     turnRight@mL:
   828                           	callstack 0
   829   000023                     fullSpeedAhead@mL:
   830                           	callstack 0
   831   000023                     reverseOneSquare@mL:
   832                           	callstack 0
   833   000023                     wallAdjust@mL:
   834                           	callstack 0
   835   000023                     reverseShort@mL:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x22
   839   000023                     	ds	1
   840   000024                     ___aldiv@counter:
   841                           	callstack 0
   842   000024                     ___lldiv@quotient:
   843                           	callstack 0
   844                           
   845                           ; 4 bytes @ 0x23
   846   000024                     	ds	1
   847   000025                     ___aldiv@sign:
   848                           	callstack 0
   849   000025                     stop@mR:
   850                           	callstack 0
   851   000025                     turnLeft@mR:
   852                           	callstack 0
   853   000025                     turnRight@mR:
   854                           	callstack 0
   855   000025                     fullSpeedAhead@mR:
   856                           	callstack 0
   857   000025                     reverseOneSquare@mR:
   858                           	callstack 0
   859   000025                     wallAdjust@mR:
   860                           	callstack 0
   861   000025                     reverseShort@mR:
   862                           	callstack 0
   863                           
   864                           ; 2 bytes @ 0x24
   865   000025                     	ds	1
   866   000026                     ___aldiv@quotient:
   867                           	callstack 0
   868   000026                     color_detect@blue:
   869                           	callstack 0
   870                           
   871                           ; 6 bytes @ 0x25
   872   000026                     	ds	1
   873   000027                     stop@straightRamp:
   874                           	callstack 0
   875   000027                     turnLeft@turnSpeed:
   876                           	callstack 0
   877   000027                     turnRight@turnSpeed:
   878                           	callstack 0
   879   000027                     fullSpeedAhead@straightSpeed:
   880                           	callstack 0
   881   000027                     reverseOneSquare@straightSpeed:
   882                           	callstack 0
   883   000027                     wallAdjust@straightSpeed:
   884                           	callstack 0
   885   000027                     reverseShort@straightSpeed:
   886                           	callstack 0
   887                           
   888                           ; 1 bytes @ 0x26
   889   000027                     	ds	1
   890   000028                     ??_stop:
   891   000028                     turnLeft@turnDuration:
   892                           	callstack 0
   893   000028                     turnRight@turnDuration:
   894                           	callstack 0
   895   000028                     fullSpeedAhead@straightRamp:
   896                           	callstack 0
   897   000028                     reverseOneSquare@reverseDuration:
   898                           	callstack 0
   899   000028                     wallAdjust@straightRamp:
   900                           	callstack 0
   901   000028                     reverseShort@straightRamp:
   902                           	callstack 0
   903   000028                     ___lldiv@counter:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x27
   907   000028                     	ds	1
   908   000029                     ??_fullSpeedAhead:
   909   000029                     ??_wallAdjust:
   910   000029                     ??_reverseShort:
   911   000029                     turnLeft@turnRamp:
   912                           	callstack 0
   913   000029                     turnRight@turnRamp:
   914                           	callstack 0
   915   000029                     reverseOneSquare@straightRamp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x28
   919   000029                     	ds	1
   920   00002A                     ??_turnRight:
   921   00002A                     ??_turnLeft:
   922   00002A                     ??_reverseOneSquare:
   923   00002A                     rgb_2_hsv@RGBC:
   924                           	callstack 0
   925                           
   926                           ; 8 bytes @ 0x29
   927   00002A                     	ds	1
   928   00002B                     stop@i:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x2A
   932   00002B                     	ds	1
   933   00002C                     wallAdjust@adjustDuration:
   934                           	callstack 0
   935   00002C                     reverseShort@reverseDuration:
   936                           	callstack 0
   937   00002C                     fullSpeedAhead@i:
   938                           	callstack 0
   939   00002C                     color_detect@yellow:
   940                           	callstack 0
   941                           
   942                           ; 6 bytes @ 0x2B
   943   00002C                     	ds	1
   944   00002D                     wallAdjust@wallReverseDuration:
   945                           	callstack 0
   946   00002D                     stop@cur_power:
   947                           	callstack 0
   948   00002D                     turnLeft@i:
   949                           	callstack 0
   950   00002D                     turnRight@i:
   951                           	callstack 0
   952   00002D                     reverseOneSquare@i:
   953                           	callstack 0
   954   00002D                     reverseShort@i:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x2C
   958   00002D                     	ds	1
   959   00002E                     fullSpeedAhead@cur_power:
   960                           	callstack 0
   961   00002E                     wallAdjust@i:
   962                           	callstack 0
   963                           
   964                           ; 2 bytes @ 0x2D
   965   00002E                     	ds	1
   966   00002F                     turnLeft@cur_power:
   967                           	callstack 0
   968   00002F                     turnRight@cur_power:
   969                           	callstack 0
   970   00002F                     reverseOneSquare@cur_power:
   971                           	callstack 0
   972   00002F                     reverseShort@cur_power:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x2E
   976   00002F                     	ds	1
   977   000030                     wallAdjust@cur_power:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x2F
   981   000030                     	ds	1
   982   000031                     returnHome@mL:
   983                           	callstack 0
   984   000031                     calibration@mL:
   985                           	callstack 0
   986                           
   987                           ; 2 bytes @ 0x30
   988   000031                     	ds	1
   989   000032                     rgb_2_hsv@HSV:
   990                           	callstack 0
   991   000032                     color_detect@pink:
   992                           	callstack 0
   993                           
   994                           ; 6 bytes @ 0x31
   995   000032                     	ds	1
   996   000033                     returnHome@mR:
   997                           	callstack 0
   998   000033                     calibration@mR:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x32
  1002   000033                     	ds	1
  1003   000034                     ??_rgb_2_hsv:
  1004                           
  1005                           ; 1 bytes @ 0x33
  1006   000034                     	ds	1
  1007   000035                     calibration@turnSpeed:
  1008                           	callstack 0
  1009   000035                     returnHome@moveSequence:
  1010                           	callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x34
  1013   000035                     	ds	1
  1014   000036                     calibration@turnDuration:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x35
  1018   000036                     	ds	1
  1019   000037                     returnHome@straightTime:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x36
  1023   000037                     	ds	1
  1024   000038                     calibration@turnRamp:
  1025                           	callstack 0
  1026   000038                     color_detect@orange:
  1027                           	callstack 0
  1028                           
  1029                           ; 6 bytes @ 0x37
  1030   000038                     	ds	1
  1031   000039                     ??_calibration:
  1032   000039                     returnHome@curMove:
  1033                           	callstack 0
  1034                           
  1035                           ; 1 bytes @ 0x38
  1036   000039                     	ds	1
  1037   00003A                     returnHome@straightSpeed:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x39
  1041   00003A                     	ds	1
  1042   00003B                     returnHome@reverseDuration:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x3A
  1046   00003B                     	ds	1
  1047   00003C                     returnHome@straightRamp:
  1048                           	callstack 0
  1049                           
  1050                           ; 1 bytes @ 0x3B
  1051   00003C                     	ds	1
  1052   00003D                     returnHome@turnSpeed:
  1053                           	callstack 0
  1054                           
  1055                           ; 1 bytes @ 0x3C
  1056   00003D                     	ds	1
  1057   00003E                     returnHome@turnDuration:
  1058                           	callstack 0
  1059   00003E                     color_detect@lightblue:
  1060                           	callstack 0
  1061                           
  1062                           ; 6 bytes @ 0x3D
  1063   00003E                     	ds	1
  1064   00003F                     returnHome@turnRamp:
  1065                           	callstack 0
  1066                           
  1067                           ; 1 bytes @ 0x3E
  1068   00003F                     	ds	1
  1069   000040                     ??_color_calibration:
  1070   000040                     ??_returnHome:
  1071                           
  1072                           ; 1 bytes @ 0x3F
  1073   000040                     	ds	4
  1074   000044                     returnHome@i:
  1075                           	callstack 0
  1076   000044                     color_detect@white:
  1077                           	callstack 0
  1078                           
  1079                           ; 6 bytes @ 0x43
  1080   000044                     	ds	1
  1081   000045                     ??_move:
  1082                           
  1083                           ; 1 bytes @ 0x44
  1084   000045                     	ds	5
  1085   00004A                     color_detect@color:
  1086                           	callstack 0
  1087                           
  1088                           ; 1 bytes @ 0x49
  1089   00004A                     	ds	1
  1090                           
  1091 ;;
  1092 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1093 ;;
  1094 ;; *************** function _main *****************
  1095 ;; Defined at:
  1096 ;;		line 28 in file "main.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;		None
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  straightTime   82    0[BANK1 ] unsigned int [41]
  1101 ;;  moveSequence   40   82[BANK1 ] unsigned char [40]
  1102 ;;  buf            40   44[BANK0 ] unsigned char [40]
  1103 ;;  motorL         10  205[BANK1 ] struct DC_motor
  1104 ;;  motorR         10  195[BANK1 ] struct DC_motor
  1105 ;;  RGBC            8  187[BANK1 ] struct RGBC_val
  1106 ;;  RGBC_n          8    0        struct RGBC_val
  1107 ;;  HSV             6  181[BANK1 ] struct HSV_val
  1108 ;;  white           6  170[BANK1 ] struct HSV_calib
  1109 ;;  lightblue       6  164[BANK1 ] struct HSV_calib
  1110 ;;  orange          6  158[BANK1 ] struct HSV_calib
  1111 ;;  pink            6  152[BANK1 ] struct HSV_calib
  1112 ;;  yellow          6  146[BANK1 ] struct HSV_calib
  1113 ;;  blue            6  140[BANK1 ] struct HSV_calib
  1114 ;;  green           6  134[BANK1 ] struct HSV_calib
  1115 ;;  red             6  128[BANK1 ] struct HSV_calib
  1116 ;;  testSequence    4   84[BANK0 ] unsigned char [4]
  1117 ;;  PWMcycle        2    0        unsigned int 
  1118 ;;  ambientNew      2  124[BANK1 ] unsigned int 
  1119 ;;  turnDuration    1  180[BANK1 ] unsigned char 
  1120 ;;  color           1  179[BANK1 ] unsigned char 
  1121 ;;  straightRamp    1  178[BANK1 ] unsigned char 
  1122 ;;  curMove         1  177[BANK1 ] unsigned char 
  1123 ;;  straightSpee    1  176[BANK1 ] unsigned char 
  1124 ;;  turnRamp        1  127[BANK1 ] unsigned char 
  1125 ;;  turnSpeed       1  126[BANK1 ] unsigned char 
  1126 ;;  wall            1  123[BANK1 ] unsigned char 
  1127 ;;  reverseDurat    1  122[BANK1 ] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1138 ;;      Locals:         0      44     215       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1140 ;;      Totals:         0      46     215       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1141 ;;Total ram usage:      261 bytes
  1142 ;; Hardware stack levels required when called: 10
  1143 ;; This function calls:
  1144 ;;		_Buggy_init
  1145 ;;		_Interrupts_init
  1146 ;;		_Timer0_init
  1147 ;;		_batteryLevel
  1148 ;;		_calibration
  1149 ;;		_color_calibration
  1150 ;;		_color_clear_init_interrupts
  1151 ;;		_color_click_init
  1152 ;;		_color_detect
  1153 ;;		_color_read
  1154 ;;		_fullSpeedAhead
  1155 ;;		_get16bitTMR0val
  1156 ;;		_initDCmotorsPWM
  1157 ;;		_initUSART4
  1158 ;;		_move
  1159 ;;		_resetTimer
  1160 ;;		_rgb_2_hsv
  1161 ;;		_stop
  1162 ;;		_wallAdjust
  1163 ;;		_white_Light
  1164 ;; This function is called by:
  1165 ;;		Startup code after reset
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text0
  1170   002780                     __ptext0:
  1171                           	callstack 0
  1172   002780                     _main:
  1173                           	callstack 21
  1174   002780                     
  1175                           ;main.c: 30:     char buf[40] = {0};
  1176   002780  EE20  F08C         	lfsr	2,main@buf
  1177   002784  0E27               	movlw	39
  1178   002786                     u3711:
  1179   002786  6ADE               	clrf	postinc2,c
  1180   002788  06E8               	decf	wreg,f,c
  1181   00278A  E2FD               	bc	u3711
  1182   00278C                     
  1183                           ;main.c: 33:     unsigned int ambientNew;;main.c: 34:     char wall = 0;
  1184   00278C  0E00               	movlw	0
  1185   00278E  0101               	movlb	1	; () banked
  1186   002790  6F7B               	movwf	main@wall& (0+255),b
  1187   002792                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 35:     unsigned char color = 0;
  1190   002792  0E00               	movlw	0
  1191   002794  6FB3               	movwf	main@color& (0+255),b
  1192   002796                     
  1193                           ; BSR set to: 1
  1194                           ;main.c: 36:     unsigned char moveSequence[40] = {0};
  1195   002796  EE21  F052         	lfsr	2,main@moveSequence
  1196   00279A  0E27               	movlw	39
  1197   00279C                     u3721:
  1198   00279C  6ADE               	clrf	postinc2,c
  1199   00279E  06E8               	decf	wreg,f,c
  1200   0027A0  E2FD               	bc	u3721
  1201   0027A2                     
  1202                           ; BSR set to: 1
  1203                           ;main.c: 37:     unsigned int straightTime[41] = {0};
  1204   0027A2  EE21  F000         	lfsr	2,main@straightTime
  1205   0027A6  0E51               	movlw	81
  1206   0027A8                     u3731:
  1207   0027A8  6ADE               	clrf	postinc2,c
  1208   0027AA  06E8               	decf	wreg,f,c
  1209   0027AC  E2FD               	bc	u3731
  1210   0027AE                     
  1211                           ; BSR set to: 1
  1212                           ;main.c: 38:     char curMove = 0;
  1213   0027AE  0E00               	movlw	0
  1214   0027B0  6FB1               	movwf	main@curMove& (0+255),b
  1215   0027B2                     
  1216                           ; BSR set to: 1
  1217                           ;main.c: 40:     unsigned char testSequence[4] = {2,2,1,1,8};
  1218   0027B2  C0F5  F0B4         	movff	main@F14661,main@testSequence
  1219   0027B6  C0F6  F0B5         	movff	main@F14661+1,main@testSequence+1
  1220   0027BA  C0F7  F0B6         	movff	main@F14661+2,main@testSequence+2
  1221   0027BE  C0F8  F0B7         	movff	main@F14661+3,main@testSequence+3
  1222   0027C2                     
  1223                           ; BSR set to: 1
  1224                           ;main.c: 43:     struct RGBC_val RGBC, RGBC_n;;main.c: 44:     struct HSV_val HSV;;main.
      +                          c: 45:     struct DC_motor motorL, motorR;;main.c: 48:     Buggy_init();
  1225   0027C2  ECC2  F024         	call	_Buggy_init	;wreg free
  1226   0027C6                     
  1227                           ;main.c: 49:     color_click_init();
  1228   0027C6  ECA6  F024         	call	_color_click_init	;wreg free
  1229   0027CA                     
  1230                           ;main.c: 50:     Timer0_init();
  1231   0027CA  ECB8  F025         	call	_Timer0_init	;wreg free
  1232   0027CE                     
  1233                           ;main.c: 51:     Interrupts_init();
  1234   0027CE  EC0C  F026         	call	_Interrupts_init	;wreg free
  1235   0027D2                     
  1236                           ;main.c: 52:     initUSART4();
  1237   0027D2  ECD8  F025         	call	_initUSART4	;wreg free
  1238   0027D6                     
  1239                           ;main.c: 53:     initDCmotorsPWM(PWMcycle);
  1240   0027D6  0E00               	movlw	0
  1241   0027D8  6E11               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1242   0027DA  0EC7               	movlw	199
  1243   0027DC  6E10               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1244   0027DE  EC41  F023         	call	_initDCmotorsPWM	;wreg free
  1245   0027E2                     
  1246                           ;main.c: 55:     motorL.power=0;
  1247   0027E2  0E00               	movlw	0
  1248   0027E4  0101               	movlb	1	; () banked
  1249   0027E6  6FCD               	movwf	main@motorL& (0+255),b
  1250   0027E8                     
  1251                           ; BSR set to: 1
  1252                           ;main.c: 56:     motorL.direction=1;
  1253   0027E8  0E01               	movlw	1
  1254   0027EA  6FCE               	movwf	(main@motorL+1)& (0+255),b
  1255   0027EC                     
  1256                           ; BSR set to: 1
  1257                           ;main.c: 57:     motorL.brakemode=1;
  1258   0027EC  0E01               	movlw	1
  1259   0027EE  6FCF               	movwf	(main@motorL+2)& (0+255),b
  1260   0027F0                     
  1261                           ; BSR set to: 1
  1262                           ;main.c: 58:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1263   0027F0  0EAA               	movlw	170
  1264   0027F2  6FD2               	movwf	(main@motorL+5)& (0+255),b
  1265   0027F4  0E0F               	movlw	15
  1266   0027F6  6FD3               	movwf	(main@motorL+6)& (0+255),b
  1267   0027F8                     
  1268                           ; BSR set to: 1
  1269                           ;main.c: 59:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1270   0027F8  0EA6               	movlw	166
  1271   0027FA  6FD4               	movwf	(main@motorL+7)& (0+255),b
  1272   0027FC  0E0F               	movlw	15
  1273   0027FE  6FD5               	movwf	(main@motorL+8)& (0+255),b
  1274   002800                     
  1275                           ; BSR set to: 1
  1276                           ;main.c: 60:     motorL.PWMperiod=PWMcycle;
  1277   002800  0E00               	movlw	0
  1278   002802  6FD1               	movwf	(main@motorL+4)& (0+255),b
  1279   002804  0EC7               	movlw	199
  1280   002806  6FD0               	movwf	(main@motorL+3)& (0+255),b
  1281   002808                     
  1282                           ; BSR set to: 1
  1283                           ;main.c: 61:     motorL.compensation=0;
  1284   002808  0E00               	movlw	0
  1285   00280A  6FD6               	movwf	(main@motorL+9)& (0+255),b
  1286   00280C                     
  1287                           ; BSR set to: 1
  1288                           ;main.c: 63:     motorR.power=0;
  1289   00280C  0E00               	movlw	0
  1290   00280E  6FC3               	movwf	main@motorR& (0+255),b
  1291   002810                     
  1292                           ; BSR set to: 1
  1293                           ;main.c: 64:     motorR.direction=1;
  1294   002810  0E01               	movlw	1
  1295   002812  6FC4               	movwf	(main@motorR+1)& (0+255),b
  1296   002814                     
  1297                           ; BSR set to: 1
  1298                           ;main.c: 65:     motorR.brakemode=1;
  1299   002814  0E01               	movlw	1
  1300   002816  6FC5               	movwf	(main@motorR+2)& (0+255),b
  1301   002818                     
  1302                           ; BSR set to: 1
  1303                           ;main.c: 66:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1304   002818  0E25               	movlw	37
  1305   00281A  6FC8               	movwf	(main@motorR+5)& (0+255),b
  1306   00281C  0E0F               	movlw	15
  1307   00281E  6FC9               	movwf	(main@motorR+6)& (0+255),b
  1308   002820                     
  1309                           ; BSR set to: 1
  1310                           ;main.c: 67:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1311   002820  0E21               	movlw	33
  1312   002822  6FCA               	movwf	(main@motorR+7)& (0+255),b
  1313   002824  0E0F               	movlw	15
  1314   002826  6FCB               	movwf	(main@motorR+8)& (0+255),b
  1315   002828                     
  1316                           ; BSR set to: 1
  1317                           ;main.c: 68:     motorR.PWMperiod=PWMcycle;
  1318   002828  0E00               	movlw	0
  1319   00282A  6FC7               	movwf	(main@motorR+4)& (0+255),b
  1320   00282C  0EC7               	movlw	199
  1321   00282E  6FC6               	movwf	(main@motorR+3)& (0+255),b
  1322   002830                     
  1323                           ; BSR set to: 1
  1324                           ;main.c: 69:     motorR.compensation=0;
  1325   002830  0E00               	movlw	0
  1326   002832  6FCC               	movwf	(main@motorR+9)& (0+255),b
  1327   002834                     
  1328                           ; BSR set to: 1
  1329                           ;main.c: 72:     char straightSpeed=20;
  1330   002834  0E14               	movlw	20
  1331   002836  6FB0               	movwf	main@straightSpeed& (0+255),b
  1332   002838                     
  1333                           ; BSR set to: 1
  1334                           ;main.c: 73:     unsigned char straightRamp=2;
  1335   002838  0E02               	movlw	2
  1336   00283A  6FB2               	movwf	main@straightRamp& (0+255),b
  1337   00283C                     
  1338                           ; BSR set to: 1
  1339                           ;main.c: 75:     unsigned char reverseDuration=400;
  1340   00283C  0E90               	movlw	144
  1341   00283E  6F7A               	movwf	main@reverseDuration& (0+255),b
  1342   002840                     
  1343                           ; BSR set to: 1
  1344                           ;main.c: 77:     char turnSpeed=40;
  1345   002840  0E28               	movlw	40
  1346   002842  6F7E               	movwf	main@turnSpeed& (0+255),b
  1347   002844                     
  1348                           ; BSR set to: 1
  1349                           ;main.c: 78:     unsigned char turnDuration=10;
  1350   002844  0E0A               	movlw	10
  1351   002846  6FB4               	movwf	main@turnDuration& (0+255),b
  1352   002848                     
  1353                           ; BSR set to: 1
  1354                           ;main.c: 79:     unsigned char turnRamp=1;
  1355   002848  0E01               	movlw	1
  1356   00284A  6F7F               	movwf	main@turnRamp& (0+255),b
  1357   00284C                     
  1358                           ; BSR set to: 1
  1359                           ;main.c: 82:     batteryLevel();
  1360   00284C  EC5E  F024         	call	_batteryLevel	;wreg free
  1361   002850                     l91:
  1362   002850  B48E               	btfsc	142,2,c	;volatile
  1363   002852  EF2D  F014         	goto	u3741
  1364   002856  EF2F  F014         	goto	u3740
  1365   00285A                     u3741:
  1366   00285A  EF28  F014         	goto	l91
  1367   00285E                     u3740:
  1368   00285E                     
  1369                           ;main.c: 95:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1370   00285E  9680               	bcf	128,3,c	;volatile
  1371   002860  9E7C               	bcf	124,7,c	;volatile
  1372                           
  1373                           ;main.c: 98:     LATHbits.LATH1=LATDbits.LATD3=1;
  1374   002862  867C               	bsf	124,3,c	;volatile
  1375   002864  8280               	bsf	128,1,c	;volatile
  1376   002866                     
  1377                           ;main.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1378   002866  0E29               	movlw	41
  1379   002868  0100               	movlb	0	; () banked
  1380   00286A  6F8B               	movwf	(??_main+1)& (0+255),b
  1381   00286C  0E96               	movlw	150
  1382   00286E  6F8A               	movwf	??_main& (0+255),b
  1383   002870  0E7F               	movlw	127
  1384   002872                     u3917:
  1385   002872  2EE8               	decfsz	wreg,f,c
  1386   002874  D7FE               	bra	u3917
  1387   002876  2F8A               	decfsz	??_main& (0+255),f,b
  1388   002878  D7FC               	bra	u3917
  1389   00287A  2F8B               	decfsz	(??_main+1)& (0+255),f,b
  1390   00287C  D7FA               	bra	u3917
  1391   00287E                     
  1392                           ;main.c: 102:     struct HSV_calib red, green, blue, yellow, pink, orange, lightblue, wh
      +                          ite;;main.c: 103:     color_calibration(&RGBC, &HSV, &red, &green, &blue, &yellow, &pink
      +                          , &orange, &lightblue, &white);
  1393   00287E  0EBB               	movlw	low main@RGBC
  1394   002880  0100               	movlb	0	; () banked
  1395   002882  6F76               	movwf	color_calibration@RGBC& (0+255),b
  1396   002884  0E01               	movlw	high main@RGBC
  1397   002886  6F77               	movwf	(color_calibration@RGBC+1)& (0+255),b
  1398   002888  0EB5               	movlw	low main@HSV
  1399   00288A  6F78               	movwf	color_calibration@HSV& (0+255),b
  1400   00288C  0E01               	movlw	high main@HSV
  1401   00288E  6F79               	movwf	(color_calibration@HSV+1)& (0+255),b
  1402   002890  0E80               	movlw	low main@red
  1403   002892  6F7A               	movwf	color_calibration@red& (0+255),b
  1404   002894  0E01               	movlw	high main@red
  1405   002896  6F7B               	movwf	(color_calibration@red+1)& (0+255),b
  1406   002898  0E86               	movlw	low main@green
  1407   00289A  6F7C               	movwf	color_calibration@green& (0+255),b
  1408   00289C  0E01               	movlw	high main@green
  1409   00289E  6F7D               	movwf	(color_calibration@green+1)& (0+255),b
  1410   0028A0  0E8C               	movlw	low main@blue
  1411   0028A2  6F7E               	movwf	color_calibration@blue& (0+255),b
  1412   0028A4  0E01               	movlw	high main@blue
  1413   0028A6  6F7F               	movwf	(color_calibration@blue+1)& (0+255),b
  1414   0028A8  0E92               	movlw	low main@yellow
  1415   0028AA  6F80               	movwf	color_calibration@yellow& (0+255),b
  1416   0028AC  0E01               	movlw	high main@yellow
  1417   0028AE  6F81               	movwf	(color_calibration@yellow+1)& (0+255),b
  1418   0028B0  0E98               	movlw	low main@pink
  1419   0028B2  6F82               	movwf	color_calibration@pink& (0+255),b
  1420   0028B4  0E01               	movlw	high main@pink
  1421   0028B6  6F83               	movwf	(color_calibration@pink+1)& (0+255),b
  1422   0028B8  0E9E               	movlw	low main@orange
  1423   0028BA  6F84               	movwf	color_calibration@orange& (0+255),b
  1424   0028BC  0E01               	movlw	high main@orange
  1425   0028BE  6F85               	movwf	(color_calibration@orange+1)& (0+255),b
  1426   0028C0  0EA4               	movlw	low main@lightblue
  1427   0028C2  6F86               	movwf	color_calibration@lightblue& (0+255),b
  1428   0028C4  0E01               	movlw	high main@lightblue
  1429   0028C6  6F87               	movwf	(color_calibration@lightblue+1)& (0+255),b
  1430   0028C8  0EAA               	movlw	low main@white
  1431   0028CA  6F88               	movwf	color_calibration@white& (0+255),b
  1432   0028CC  0E01               	movlw	high main@white
  1433   0028CE  6F89               	movwf	(color_calibration@white+1)& (0+255),b
  1434   0028D0  EC74  F00E         	call	_color_calibration	;wreg free
  1435   0028D4                     
  1436                           ;main.c: 106:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
  1437   0028D4  0ECD               	movlw	low main@motorL
  1438   0028D6  6E31               	movwf	calibration@mL^0,c
  1439   0028D8  0E01               	movlw	high main@motorL
  1440   0028DA  6E32               	movwf	(calibration@mL+1)^0,c
  1441   0028DC  0EC3               	movlw	low main@motorR
  1442   0028DE  6E33               	movwf	calibration@mR^0,c
  1443   0028E0  0E01               	movlw	high main@motorR
  1444   0028E2  6E34               	movwf	(calibration@mR+1)^0,c
  1445   0028E4  0E28               	movlw	40
  1446   0028E6  6E35               	movwf	calibration@turnSpeed^0,c
  1447   0028E8  0EB4               	movlw	low main@turnDuration
  1448   0028EA  6E36               	movwf	calibration@turnDuration^0,c
  1449   0028EC  0E01               	movlw	high main@turnDuration
  1450   0028EE  6E37               	movwf	(calibration@turnDuration+1)^0,c
  1451   0028F0  0E01               	movlw	1
  1452   0028F2  6E38               	movwf	calibration@turnRamp^0,c
  1453   0028F4  ECA8  F019         	call	_calibration	;wreg free
  1454   0028F8                     
  1455                           ;main.c: 116:     white_Light(1);
  1456   0028F8  0E01               	movlw	1
  1457   0028FA  EC96  F025         	call	_white_Light
  1458   0028FE                     
  1459                           ;main.c: 117:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1460   0028FE  0E52               	movlw	82
  1461   002900  0100               	movlb	0	; () banked
  1462   002902  6F8B               	movwf	(??_main+1)& (0+255),b
  1463   002904  0E2B               	movlw	43
  1464   002906  6F8A               	movwf	??_main& (0+255),b
  1465   002908  0E00               	movlw	0
  1466   00290A                     u3927:
  1467   00290A  2EE8               	decfsz	wreg,f,c
  1468   00290C  D7FE               	bra	u3927
  1469   00290E  2F8A               	decfsz	??_main& (0+255),f,b
  1470   002910  D7FC               	bra	u3927
  1471   002912  2F8B               	decfsz	(??_main+1)& (0+255),f,b
  1472   002914  D7FA               	bra	u3927
  1473   002916  0000               	nop	
  1474   002918                     
  1475                           ;main.c: 120:     color_read(&RGBC);
  1476   002918  0EBB               	movlw	low main@RGBC
  1477   00291A  6E14               	movwf	color_read@RGBC^0,c
  1478   00291C  0E01               	movlw	high main@RGBC
  1479   00291E  6E15               	movwf	(color_read@RGBC+1)^0,c
  1480   002920  ECED  F01B         	call	_color_read	;wreg free
  1481   002924                     
  1482                           ;main.c: 121:     ambient=RGBC.C;
  1483   002924  C1C1  F0F9         	movff	main@RGBC+6,_ambient
  1484   002928  C1C2  F0FA         	movff	main@RGBC+7,_ambient+1
  1485   00292C                     
  1486                           ;main.c: 122:     color_clear_init_interrupts();
  1487   00292C  EC49  F022         	call	_color_clear_init_interrupts	;wreg free
  1488   002930                     
  1489                           ;main.c: 123:     _delay((unsigned long)((10)*(64000000/4000.0)));
  1490   002930  0ED0               	movlw	208
  1491   002932  0100               	movlb	0	; () banked
  1492   002934  6F8A               	movwf	??_main& (0+255),b
  1493   002936  0EC9               	movlw	201
  1494   002938                     u3937:
  1495   002938  2EE8               	decfsz	wreg,f,c
  1496   00293A  D7FE               	bra	u3937
  1497   00293C  2F8A               	decfsz	??_main& (0+255),f,b
  1498   00293E  D7FC               	bra	u3937
  1499   002940  D000               	nop2	
  1500   002942                     
  1501                           ;main.c: 126:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1502   002942  0ECD               	movlw	low main@motorL
  1503   002944  6E23               	movwf	fullSpeedAhead@mL^0,c
  1504   002946  0E01               	movlw	high main@motorL
  1505   002948  6E24               	movwf	(fullSpeedAhead@mL+1)^0,c
  1506   00294A  0EC3               	movlw	low main@motorR
  1507   00294C  6E25               	movwf	fullSpeedAhead@mR^0,c
  1508   00294E  0E01               	movlw	high main@motorR
  1509   002950  6E26               	movwf	(fullSpeedAhead@mR+1)^0,c
  1510   002952  0E14               	movlw	20
  1511   002954  6E27               	movwf	fullSpeedAhead@straightSpeed^0,c
  1512   002956  0E02               	movlw	2
  1513   002958  6E28               	movwf	fullSpeedAhead@straightRamp^0,c
  1514   00295A  EC74  F021         	call	_fullSpeedAhead	;wreg free
  1515   00295E                     
  1516                           ;main.c: 127:     resetTimer();
  1517   00295E  EC22  F026         	call	_resetTimer	;wreg free
  1518   002962                     
  1519                           ;main.c: 130:     brightnessChange=0;
  1520   002962  0E00               	movlw	0
  1521   002964  0100               	movlb	0	; () banked
  1522   002966  6FF4               	movwf	_brightnessChange& (0+255),b
  1523   002968                     
  1524                           ; BSR set to: 0
  1525                           ;main.c: 131:     lost=0;
  1526   002968  0E00               	movlw	0
  1527   00296A  6E4B               	movwf	_lost^0,c
  1528   00296C                     l4682:
  1529                           
  1530                           ;main.c: 134:         if (brightnessChange == 1) {
  1531   00296C  0100               	movlb	0	; () banked
  1532   00296E  05F4               	decf	_brightnessChange& (0+255),w,b
  1533   002970  A4D8               	btfss	status,2,c
  1534   002972  EFBD  F014         	goto	u3751
  1535   002976  EFBF  F014         	goto	u3750
  1536   00297A                     u3751:
  1537   00297A  EFF2  F014         	goto	l4700
  1538   00297E                     u3750:
  1539   00297E                     
  1540                           ; BSR set to: 0
  1541                           ;main.c: 137:             color_read(&RGBC);
  1542   00297E  0EBB               	movlw	low main@RGBC
  1543   002980  6E14               	movwf	color_read@RGBC^0,c
  1544   002982  0E01               	movlw	high main@RGBC
  1545   002984  6E15               	movwf	(color_read@RGBC+1)^0,c
  1546   002986  ECED  F01B         	call	_color_read	;wreg free
  1547   00298A                     
  1548                           ;main.c: 138:             ambientNew=RGBC.C;
  1549   00298A  C1C1  F17C         	movff	main@RGBC+6,main@ambientNew
  1550   00298E  C1C2  F17D         	movff	main@RGBC+7,main@ambientNew+1
  1551   002992                     
  1552                           ;main.c: 140:             if (ambientNew <= ambient) {
  1553   002992  0101               	movlb	1	; () banked
  1554   002994  517C               	movf	main@ambientNew& (0+255),w,b
  1555   002996  0100               	movlb	0	; () banked
  1556   002998  5DF9               	subwf	_ambient& (0+255),w,b
  1557   00299A  0101               	movlb	1	; () banked
  1558   00299C  517D               	movf	(main@ambientNew+1)& (0+255),w,b
  1559   00299E  0100               	movlb	0	; () banked
  1560   0029A0  59FA               	subwfb	(_ambient+1)& (0+255),w,b
  1561   0029A2  A0D8               	btfss	status,0,c
  1562   0029A4  EFD6  F014         	goto	u3761
  1563   0029A8  EFD8  F014         	goto	u3760
  1564   0029AC                     u3761:
  1565   0029AC  EFEC  F014         	goto	l4698
  1566   0029B0                     u3760:
  1567   0029B0                     
  1568                           ; BSR set to: 0
  1569                           ;main.c: 141:                 ambient = ambientNew;
  1570   0029B0  C17C  F0F9         	movff	main@ambientNew,_ambient
  1571   0029B4  C17D  F0FA         	movff	main@ambientNew+1,_ambient+1
  1572   0029B8                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 142:                 color_clear_init_interrupts();
  1575   0029B8  EC49  F022         	call	_color_clear_init_interrupts	;wreg free
  1576   0029BC                     
  1577                           ;main.c: 143:                 _delay((unsigned long)((10)*(64000000/4000.0)));
  1578   0029BC  0ED0               	movlw	208
  1579   0029BE  0100               	movlb	0	; () banked
  1580   0029C0  6F8A               	movwf	??_main& (0+255),b
  1581   0029C2  0EC9               	movlw	201
  1582   0029C4                     u3947:
  1583   0029C4  2EE8               	decfsz	wreg,f,c
  1584   0029C6  D7FE               	bra	u3947
  1585   0029C8  2F8A               	decfsz	??_main& (0+255),f,b
  1586   0029CA  D7FC               	bra	u3947
  1587   0029CC  D000               	nop2	
  1588   0029CE                     
  1589                           ;main.c: 144:                 brightnessChange = 0;
  1590   0029CE  0E00               	movlw	0
  1591   0029D0  0100               	movlb	0	; () banked
  1592   0029D2  6FF4               	movwf	_brightnessChange& (0+255),b
  1593                           
  1594                           ;main.c: 145:             }
  1595   0029D4  EFF2  F014         	goto	l4700
  1596   0029D8                     l4698:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 148:                 wall = 1;
  1600   0029D8  0E01               	movlw	1
  1601   0029DA  0101               	movlb	1	; () banked
  1602   0029DC  6F7B               	movwf	main@wall& (0+255),b
  1603                           
  1604                           ;main.c: 149:                 brightnessChange = 0;
  1605   0029DE  0E00               	movlw	0
  1606   0029E0  0100               	movlb	0	; () banked
  1607   0029E2  6FF4               	movwf	_brightnessChange& (0+255),b
  1608   0029E4                     l4700:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;main.c: 153:         if (wall == 1) {
  1612   0029E4  0101               	movlb	1	; () banked
  1613   0029E6  057B               	decf	main@wall& (0+255),w,b
  1614   0029E8  A4D8               	btfss	status,2,c
  1615   0029EA  EFF9  F014         	goto	u3771
  1616   0029EE  EFFB  F014         	goto	u3770
  1617   0029F2                     u3771:
  1618   0029F2  EFD9  F015         	goto	l4732
  1619   0029F6                     u3770:
  1620   0029F6                     
  1621                           ; BSR set to: 1
  1622                           ;main.c: 154:             PIE0bits.INT0IE=TMR0IE=0;
  1623   0029F6  010E               	movlb	14	; () banked
  1624   0029F8  9B29               	bcf	41,5,b	;volatile
  1625   0029FA  AB29               	btfss	41,5,b	;volatile
  1626   0029FC  D002               	bra	u3785
  1627   0029FE  8129               	bsf	41,0,b	;volatile
  1628   002A00  D002               	bra	u3787
  1629   002A02                     u3785:
  1630   002A02  010E               	movlb	14	; () banked
  1631   002A04  9129               	bcf	41,0,b	;volatile
  1632   002A06                     u3787:
  1633   002A06                     
  1634                           ; BSR set to: 14
  1635                           ;main.c: 155:             straightTime[curMove] = get16bitTMR0val();
  1636   002A06  EC34  F025         	call	_get16bitTMR0val	;wreg free
  1637   002A0A  0101               	movlb	1	; () banked
  1638   002A0C  51B1               	movf	main@curMove& (0+255),w,b
  1639   002A0E  0D02               	mullw	2
  1640   002A10  0E00               	movlw	low main@straightTime
  1641   002A12  24F3               	addwf	243,w,c
  1642   002A14  6ED9               	movwf	fsr2l,c
  1643   002A16  0E01               	movlw	high main@straightTime
  1644   002A18  20F4               	addwfc	prodh,w,c
  1645   002A1A  6EDA               	movwf	fsr2h,c
  1646   002A1C  C010  FFDE         	movff	?_get16bitTMR0val,postinc2
  1647   002A20  C011  FFDD         	movff	?_get16bitTMR0val+1,postdec2
  1648                           
  1649                           ;main.c: 158:             stop(&motorL, &motorR, straightRamp);
  1650   002A24  0ECD               	movlw	low main@motorL
  1651   002A26  6E23               	movwf	stop@mL^0,c
  1652   002A28  0E01               	movlw	high main@motorL
  1653   002A2A  6E24               	movwf	(stop@mL+1)^0,c
  1654   002A2C  0EC3               	movlw	low main@motorR
  1655   002A2E  6E25               	movwf	stop@mR^0,c
  1656   002A30  0E01               	movlw	high main@motorR
  1657   002A32  6E26               	movwf	(stop@mR+1)^0,c
  1658   002A34  C1B2  F027         	movff	main@straightRamp,stop@straightRamp
  1659   002A38  ECF0  F020         	call	_stop	;wreg free
  1660                           
  1661                           ;main.c: 159:             wallAdjust(&motorL, &motorR, straightSpeed, straightRamp);
  1662   002A3C  0ECD               	movlw	low main@motorL
  1663   002A3E  6E23               	movwf	wallAdjust@mL^0,c
  1664   002A40  0E01               	movlw	high main@motorL
  1665   002A42  6E24               	movwf	(wallAdjust@mL+1)^0,c
  1666   002A44  0EC3               	movlw	low main@motorR
  1667   002A46  6E25               	movwf	wallAdjust@mR^0,c
  1668   002A48  0E01               	movlw	high main@motorR
  1669   002A4A  6E26               	movwf	(wallAdjust@mR+1)^0,c
  1670   002A4C  C1B0  F027         	movff	main@straightSpeed,wallAdjust@straightSpeed
  1671   002A50  C1B2  F028         	movff	main@straightRamp,wallAdjust@straightRamp
  1672   002A54  ECED  F015         	call	_wallAdjust	;wreg free
  1673   002A58                     
  1674                           ;main.c: 160:             color_read(&RGBC);
  1675   002A58  0EBB               	movlw	low main@RGBC
  1676   002A5A  6E14               	movwf	color_read@RGBC^0,c
  1677   002A5C  0E01               	movlw	high main@RGBC
  1678   002A5E  6E15               	movwf	(color_read@RGBC+1)^0,c
  1679   002A60  ECED  F01B         	call	_color_read	;wreg free
  1680   002A64                     
  1681                           ;main.c: 162:             rgb_2_hsv(RGBC, &HSV);
  1682   002A64  EE21  F0BB         	lfsr	2,main@RGBC
  1683   002A68  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  1684   002A6C  0E07               	movlw	7
  1685   002A6E                     u3791:
  1686   002A6E  CFDB FFEB          	movff	plusw2,plusw0
  1687   002A72  06E8               	decf	wreg,f,c
  1688   002A74  E2FC               	bc	u3791
  1689   002A76  0EB5               	movlw	low main@HSV
  1690   002A78  6E32               	movwf	rgb_2_hsv@HSV^0,c
  1691   002A7A  0E01               	movlw	high main@HSV
  1692   002A7C  6E33               	movwf	(rgb_2_hsv@HSV+1)^0,c
  1693   002A7E  EC52  F011         	call	_rgb_2_hsv	;wreg free
  1694   002A82                     
  1695                           ;main.c: 163:             color = color_detect(HSV, red, green, blue, yellow, pink, oran
      +                          ge, lightblue, white);
  1696   002A82  EE21  F0B5         	lfsr	2,main@HSV
  1697   002A86  EE00  F014         	lfsr	0,color_detect@HSV
  1698   002A8A  0E05               	movlw	5
  1699   002A8C                     u3801:
  1700   002A8C  CFDB FFEB          	movff	plusw2,plusw0
  1701   002A90  06E8               	decf	wreg,f,c
  1702   002A92  E2FC               	bc	u3801
  1703   002A94  EE21  F080         	lfsr	2,main@red
  1704   002A98  EE00  F01A         	lfsr	0,color_detect@red
  1705   002A9C  0E05               	movlw	5
  1706   002A9E                     u3811:
  1707   002A9E  CFDB FFEB          	movff	plusw2,plusw0
  1708   002AA2  06E8               	decf	wreg,f,c
  1709   002AA4  E2FC               	bc	u3811
  1710   002AA6  EE21  F086         	lfsr	2,main@green
  1711   002AAA  EE00  F020         	lfsr	0,color_detect@green
  1712   002AAE  0E05               	movlw	5
  1713   002AB0                     u3821:
  1714   002AB0  CFDB FFEB          	movff	plusw2,plusw0
  1715   002AB4  06E8               	decf	wreg,f,c
  1716   002AB6  E2FC               	bc	u3821
  1717   002AB8  EE21  F08C         	lfsr	2,main@blue
  1718   002ABC  EE00  F026         	lfsr	0,color_detect@blue
  1719   002AC0  0E05               	movlw	5
  1720   002AC2                     u3831:
  1721   002AC2  CFDB FFEB          	movff	plusw2,plusw0
  1722   002AC6  06E8               	decf	wreg,f,c
  1723   002AC8  E2FC               	bc	u3831
  1724   002ACA  EE21  F092         	lfsr	2,main@yellow
  1725   002ACE  EE00  F02C         	lfsr	0,color_detect@yellow
  1726   002AD2  0E05               	movlw	5
  1727   002AD4                     u3841:
  1728   002AD4  CFDB FFEB          	movff	plusw2,plusw0
  1729   002AD8  06E8               	decf	wreg,f,c
  1730   002ADA  E2FC               	bc	u3841
  1731   002ADC  EE21  F098         	lfsr	2,main@pink
  1732   002AE0  EE00  F032         	lfsr	0,color_detect@pink
  1733   002AE4  0E05               	movlw	5
  1734   002AE6                     u3851:
  1735   002AE6  CFDB FFEB          	movff	plusw2,plusw0
  1736   002AEA  06E8               	decf	wreg,f,c
  1737   002AEC  E2FC               	bc	u3851
  1738   002AEE  EE21  F09E         	lfsr	2,main@orange
  1739   002AF2  EE00  F038         	lfsr	0,color_detect@orange
  1740   002AF6  0E05               	movlw	5
  1741   002AF8                     u3861:
  1742   002AF8  CFDB FFEB          	movff	plusw2,plusw0
  1743   002AFC  06E8               	decf	wreg,f,c
  1744   002AFE  E2FC               	bc	u3861
  1745   002B00  EE21  F0A4         	lfsr	2,main@lightblue
  1746   002B04  EE00  F03E         	lfsr	0,color_detect@lightblue
  1747   002B08  0E05               	movlw	5
  1748   002B0A                     u3871:
  1749   002B0A  CFDB FFEB          	movff	plusw2,plusw0
  1750   002B0E  06E8               	decf	wreg,f,c
  1751   002B10  E2FC               	bc	u3871
  1752   002B12  EE21  F0AA         	lfsr	2,main@white
  1753   002B16  EE00  F044         	lfsr	0,color_detect@white
  1754   002B1A  0E05               	movlw	5
  1755   002B1C                     u3881:
  1756   002B1C  CFDB FFEB          	movff	plusw2,plusw0
  1757   002B20  06E8               	decf	wreg,f,c
  1758   002B22  E2FC               	bc	u3881
  1759   002B24  ECD4  F017         	call	_color_detect	;wreg free
  1760   002B28  0101               	movlb	1	; () banked
  1761   002B2A  6FB3               	movwf	main@color& (0+255),b
  1762   002B2C                     
  1763                           ; BSR set to: 1
  1764                           ;main.c: 165:             moveSequence[curMove] = color;
  1765   002B2C  0E52               	movlw	low main@moveSequence
  1766   002B2E  25B1               	addwf	main@curMove& (0+255),w,b
  1767   002B30  6ED9               	movwf	fsr2l,c
  1768   002B32  6ADA               	clrf	fsr2h,c
  1769   002B34  0E01               	movlw	high main@moveSequence
  1770   002B36  22DA               	addwfc	fsr2h,f,c
  1771   002B38  C1B3  FFDF         	movff	main@color,indf2
  1772   002B3C                     
  1773                           ; BSR set to: 1
  1774                           ;main.c: 168:             move(&motorL, &motorR, color, moveSequence, straightTime, curM
      +                          ove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  1775   002B3C  0ECD               	movlw	low main@motorL
  1776   002B3E  0100               	movlb	0	; () banked
  1777   002B40  6F60               	movwf	move@mL& (0+255),b
  1778   002B42  0E01               	movlw	high main@motorL
  1779   002B44  6F61               	movwf	(move@mL+1)& (0+255),b
  1780   002B46  0EC3               	movlw	low main@motorR
  1781   002B48  6F62               	movwf	move@mR& (0+255),b
  1782   002B4A  0E01               	movlw	high main@motorR
  1783   002B4C  6F63               	movwf	(move@mR+1)& (0+255),b
  1784   002B4E  C1B3  F064         	movff	main@color,move@color
  1785   002B52  0E52               	movlw	low main@moveSequence
  1786   002B54  6F65               	movwf	move@moveSequence& (0+255),b
  1787   002B56  0E01               	movlw	high main@moveSequence
  1788   002B58  6F66               	movwf	(move@moveSequence+1)& (0+255),b
  1789   002B5A  0E00               	movlw	low main@straightTime
  1790   002B5C  6F67               	movwf	move@straightTime& (0+255),b
  1791   002B5E  0E01               	movlw	high main@straightTime
  1792   002B60  6F68               	movwf	(move@straightTime+1)& (0+255),b
  1793   002B62  C1B1  F069         	movff	main@curMove,move@curMove
  1794   002B66  C1B0  F06A         	movff	main@straightSpeed,move@straightSpeed
  1795   002B6A  C17A  F06B         	movff	main@reverseDuration,move@reverseDuration
  1796   002B6E  C1B2  F06C         	movff	main@straightRamp,move@straightRamp
  1797   002B72  C17E  F06D         	movff	main@turnSpeed,move@turnSpeed
  1798   002B76  C1B4  F06E         	movff	main@turnDuration,move@turnDuration
  1799   002B7A  C17F  F06F         	movff	main@turnRamp,move@turnRamp
  1800   002B7E  EC01  F007         	call	_move	;wreg free
  1801   002B82                     
  1802                           ;main.c: 171:             color_read(&RGBC);
  1803   002B82  0EBB               	movlw	low main@RGBC
  1804   002B84  6E14               	movwf	color_read@RGBC^0,c
  1805   002B86  0E01               	movlw	high main@RGBC
  1806   002B88  6E15               	movwf	(color_read@RGBC+1)^0,c
  1807   002B8A  ECED  F01B         	call	_color_read	;wreg free
  1808   002B8E                     
  1809                           ;main.c: 172:             ambient=RGBC.C;
  1810   002B8E  C1C1  F0F9         	movff	main@RGBC+6,_ambient
  1811   002B92  C1C2  F0FA         	movff	main@RGBC+7,_ambient+1
  1812   002B96                     
  1813                           ;main.c: 173:             color_clear_init_interrupts();
  1814   002B96  EC49  F022         	call	_color_clear_init_interrupts	;wreg free
  1815   002B9A                     
  1816                           ;main.c: 174:             brightnessChange = 0;
  1817   002B9A  0E00               	movlw	0
  1818   002B9C  0100               	movlb	0	; () banked
  1819   002B9E  6FF4               	movwf	_brightnessChange& (0+255),b
  1820   002BA0                     
  1821                           ; BSR set to: 0
  1822                           ;main.c: 176:             curMove++;
  1823   002BA0  0101               	movlb	1	; () banked
  1824   002BA2  2BB1               	incf	main@curMove& (0+255),f,b
  1825   002BA4                     
  1826                           ; BSR set to: 1
  1827                           ;main.c: 177:             resetTimer();
  1828   002BA4  EC22  F026         	call	_resetTimer	;wreg free
  1829   002BA8                     
  1830                           ;main.c: 179:             PIE0bits.INT0IE=1;
  1831   002BA8  010E               	movlb	14	; () banked
  1832   002BAA  8129               	bsf	41,0,b	;volatile
  1833   002BAC                     
  1834                           ; BSR set to: 14
  1835                           ;main.c: 180:             wall = 0;
  1836   002BAC  0E00               	movlw	0
  1837   002BAE  0101               	movlb	1	; () banked
  1838   002BB0  6F7B               	movwf	main@wall& (0+255),b
  1839   002BB2                     l4732:
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 193:         if (color == 8 || color == 9) {break;}
  1843   002BB2  0E08               	movlw	8
  1844   002BB4  19B3               	xorwf	main@color& (0+255),w,b
  1845   002BB6  B4D8               	btfsc	status,2,c
  1846   002BB8  EFE0  F015         	goto	u3891
  1847   002BBC  EFE2  F015         	goto	u3890
  1848   002BC0                     u3891:
  1849   002BC0  EFEB  F015         	goto	l104
  1850   002BC4                     u3890:
  1851   002BC4                     
  1852                           ; BSR set to: 1
  1853   002BC4  0E09               	movlw	9
  1854   002BC6  19B3               	xorwf	main@color& (0+255),w,b
  1855   002BC8  A4D8               	btfss	status,2,c
  1856   002BCA  EFE9  F015         	goto	u3901
  1857   002BCE  EFEB  F015         	goto	u3900
  1858   002BD2                     u3901:
  1859   002BD2  EFB6  F014         	goto	l4682
  1860   002BD6                     u3900:
  1861   002BD6                     l104:
  1862                           
  1863                           ; BSR set to: 1
  1864   002BD6  EF5D  F000         	goto	start
  1865   002BDA                     __end_of_main:
  1866                           	callstack 0
  1867                           
  1868 ;; *************** function _wallAdjust *****************
  1869 ;; Defined at:
  1870 ;;		line 501 in file "dc_motor.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  1873 ;;		 -> main@motorL(10), 
  1874 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  1875 ;;		 -> main@motorR(10), 
  1876 ;;  straightSpee    1   38[COMRAM] unsigned char 
  1877 ;;  straightRamp    1   39[COMRAM] unsigned char 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  cur_power       2   47[COMRAM] int 
  1880 ;;  i               2   45[COMRAM] int 
  1881 ;;  wallReverseD    1   44[COMRAM] unsigned char 
  1882 ;;  adjustDurati    1   43[COMRAM] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1892 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1893 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1894 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1895 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1896 ;;Total ram usage:       15 bytes
  1897 ;; Hardware stack levels used: 1
  1898 ;; Hardware stack levels required when called: 7
  1899 ;; This function calls:
  1900 ;;		_setMotorPWM
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text1
  1907   002BDA                     __ptext1:
  1908                           	callstack 0
  1909   002BDA                     _wallAdjust:
  1910                           	callstack 23
  1911   002BDA                     
  1912                           ;dc_motor.c: 501: void wallAdjust(DC_motor *mL, DC_motor *mR, char straightSpeed, unsign
      +                          ed char straightRamp);dc_motor.c: 502: {;dc_motor.c: 503:     unsigned char adjustDurati
      +                          on = 200;
  1913   002BDA  0EC8               	movlw	200
  1914   002BDC  6E2C               	movwf	wallAdjust@adjustDuration^0,c
  1915                           
  1916                           ;dc_motor.c: 504:     unsigned char wallReverseDuration = 20;
  1917   002BDE  0E14               	movlw	20
  1918   002BE0  6E2D               	movwf	wallAdjust@wallReverseDuration^0,c
  1919   002BE2                     
  1920                           ;dc_motor.c: 506:     mL->direction = 1;
  1921   002BE2  EE20 F001          	lfsr	2,1
  1922   002BE6  5023               	movf	wallAdjust@mL^0,w,c
  1923   002BE8  26D9               	addwf	fsr2l,f,c
  1924   002BEA  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1925   002BEC  22DA               	addwfc	fsr2h,f,c
  1926   002BEE  0E01               	movlw	1
  1927   002BF0  6EDF               	movwf	indf2,c
  1928   002BF2                     
  1929                           ;dc_motor.c: 507:     mR->direction = 1;
  1930   002BF2  EE20 F001          	lfsr	2,1
  1931   002BF6  5025               	movf	wallAdjust@mR^0,w,c
  1932   002BF8  26D9               	addwf	fsr2l,f,c
  1933   002BFA  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1934   002BFC  22DA               	addwfc	fsr2h,f,c
  1935   002BFE  0E01               	movlw	1
  1936   002C00  6EDF               	movwf	indf2,c
  1937                           
  1938                           ;dc_motor.c: 508:     int i;;dc_motor.c: 509:     int cur_power;;dc_motor.c: 510:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1939   002C02  0E00               	movlw	0
  1940   002C04  6E31               	movwf	(wallAdjust@cur_power+1)^0,c
  1941   002C06  0E01               	movlw	1
  1942   002C08  6E30               	movwf	wallAdjust@cur_power^0,c
  1943   002C0A  EF51  F016         	goto	l3968
  1944   002C0E                     l3954:
  1945                           
  1946                           ;dc_motor.c: 511:         mL->power = cur_power+mL->compensation;
  1947   002C0E  EE20 F009          	lfsr	2,9
  1948   002C12  5023               	movf	wallAdjust@mL^0,w,c
  1949   002C14  26D9               	addwf	fsr2l,f,c
  1950   002C16  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1951   002C18  22DA               	addwfc	fsr2h,f,c
  1952   002C1A  50DF               	movf	indf2,w,c
  1953   002C1C  2430               	addwf	wallAdjust@cur_power^0,w,c
  1954   002C1E  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  1955   002C22  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  1956   002C26  6EDF               	movwf	indf2,c
  1957                           
  1958                           ;dc_motor.c: 512:         mR->power = cur_power+mR->compensation;
  1959   002C28  EE20 F009          	lfsr	2,9
  1960   002C2C  5025               	movf	wallAdjust@mR^0,w,c
  1961   002C2E  26D9               	addwf	fsr2l,f,c
  1962   002C30  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1963   002C32  22DA               	addwfc	fsr2h,f,c
  1964   002C34  50DF               	movf	indf2,w,c
  1965   002C36  2430               	addwf	wallAdjust@cur_power^0,w,c
  1966   002C38  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  1967   002C3C  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  1968   002C40  6EDF               	movwf	indf2,c
  1969   002C42                     
  1970                           ;dc_motor.c: 513:         setMotorPWM(mL);
  1971   002C42  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  1972   002C46  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  1973   002C4A  ECB4  F01F         	call	_setMotorPWM	;wreg free
  1974   002C4E                     
  1975                           ;dc_motor.c: 514:         setMotorPWM(mR);
  1976   002C4E  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  1977   002C52  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  1978   002C56  ECB4  F01F         	call	_setMotorPWM	;wreg free
  1979   002C5A                     
  1980                           ;dc_motor.c: 515:         for (i=0;i<straightRamp;i++) {
  1981   002C5A  0E00               	movlw	0
  1982   002C5C  6E2F               	movwf	(wallAdjust@i+1)^0,c
  1983   002C5E  0E00               	movlw	0
  1984   002C60  6E2E               	movwf	wallAdjust@i^0,c
  1985   002C62  EF3D  F016         	goto	l701
  1986   002C66                     l3962:
  1987                           
  1988                           ;dc_motor.c: 516:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1989   002C66  0E68               	movlw	104
  1990   002C68  6E29               	movwf	??_wallAdjust^0,c
  1991   002C6A  0EE4               	movlw	228
  1992   002C6C                     u3957:
  1993   002C6C  2EE8               	decfsz	wreg,f,c
  1994   002C6E  D7FE               	bra	u3957
  1995   002C70  2E29               	decfsz	??_wallAdjust^0,f,c
  1996   002C72  D7FC               	bra	u3957
  1997   002C74  D000               	nop2	
  1998   002C76                     
  1999                           ;dc_motor.c: 517:         }
  2000   002C76  4A2E               	infsnz	wallAdjust@i^0,f,c
  2001   002C78  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2002   002C7A                     l701:
  2003   002C7A  5028               	movf	wallAdjust@straightRamp^0,w,c
  2004   002C7C  6E29               	movwf	??_wallAdjust^0,c
  2005   002C7E  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2006   002C80  5029               	movf	??_wallAdjust^0,w,c
  2007   002C82  5C2E               	subwf	wallAdjust@i^0,w,c
  2008   002C84  502F               	movf	(wallAdjust@i+1)^0,w,c
  2009   002C86  0A80               	xorlw	128
  2010   002C88  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2011   002C8A  502A               	movf	(??_wallAdjust+1)^0,w,c
  2012   002C8C  0A80               	xorlw	128
  2013   002C8E  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2014   002C90  A0D8               	btfss	status,0,c
  2015   002C92  EF4D  F016         	goto	u2861
  2016   002C96  EF4F  F016         	goto	u2860
  2017   002C9A                     u2861:
  2018   002C9A  EF33  F016         	goto	l3962
  2019   002C9E                     u2860:
  2020   002C9E                     
  2021                           ;dc_motor.c: 518:     }
  2022   002C9E  4A30               	infsnz	wallAdjust@cur_power^0,f,c
  2023   002CA0  2A31               	incf	(wallAdjust@cur_power+1)^0,f,c
  2024   002CA2                     l3968:
  2025   002CA2  5027               	movf	wallAdjust@straightSpeed^0,w,c
  2026   002CA4  6E29               	movwf	??_wallAdjust^0,c
  2027   002CA6  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2028   002CA8  5030               	movf	wallAdjust@cur_power^0,w,c
  2029   002CAA  5C29               	subwf	??_wallAdjust^0,w,c
  2030   002CAC  502A               	movf	(??_wallAdjust+1)^0,w,c
  2031   002CAE  0A80               	xorlw	128
  2032   002CB0  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2033   002CB2  5031               	movf	(wallAdjust@cur_power+1)^0,w,c
  2034   002CB4  0A80               	xorlw	128
  2035   002CB6  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2036   002CB8  B0D8               	btfsc	status,0,c
  2037   002CBA  EF61  F016         	goto	u2871
  2038   002CBE  EF63  F016         	goto	u2870
  2039   002CC2                     u2871:
  2040   002CC2  EF07  F016         	goto	l3954
  2041   002CC6                     u2870:
  2042   002CC6                     
  2043                           ;dc_motor.c: 520:     for (i=0;i<adjustDuration;i++) {
  2044   002CC6  0E00               	movlw	0
  2045   002CC8  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2046   002CCA  0E00               	movlw	0
  2047   002CCC  6E2E               	movwf	wallAdjust@i^0,c
  2048   002CCE  EF73  F016         	goto	l705
  2049   002CD2                     l3972:
  2050                           
  2051                           ;dc_motor.c: 521:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2052   002CD2  0E68               	movlw	104
  2053   002CD4  6E29               	movwf	??_wallAdjust^0,c
  2054   002CD6  0EE4               	movlw	228
  2055   002CD8                     u3967:
  2056   002CD8  2EE8               	decfsz	wreg,f,c
  2057   002CDA  D7FE               	bra	u3967
  2058   002CDC  2E29               	decfsz	??_wallAdjust^0,f,c
  2059   002CDE  D7FC               	bra	u3967
  2060   002CE0  D000               	nop2	
  2061   002CE2                     
  2062                           ;dc_motor.c: 522:         }
  2063   002CE2  4A2E               	infsnz	wallAdjust@i^0,f,c
  2064   002CE4  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2065   002CE6                     l705:
  2066   002CE6  502C               	movf	wallAdjust@adjustDuration^0,w,c
  2067   002CE8  6E29               	movwf	??_wallAdjust^0,c
  2068   002CEA  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2069   002CEC  5029               	movf	??_wallAdjust^0,w,c
  2070   002CEE  5C2E               	subwf	wallAdjust@i^0,w,c
  2071   002CF0  502F               	movf	(wallAdjust@i+1)^0,w,c
  2072   002CF2  0A80               	xorlw	128
  2073   002CF4  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2074   002CF6  502A               	movf	(??_wallAdjust+1)^0,w,c
  2075   002CF8  0A80               	xorlw	128
  2076   002CFA  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2077   002CFC  A0D8               	btfss	status,0,c
  2078   002CFE  EF83  F016         	goto	u2881
  2079   002D02  EF85  F016         	goto	u2880
  2080   002D06                     u2881:
  2081   002D06  EF69  F016         	goto	l3972
  2082   002D0A                     u2880:
  2083   002D0A                     
  2084                           ;dc_motor.c: 524:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2085   002D0A  C027  F030         	movff	wallAdjust@straightSpeed,wallAdjust@cur_power
  2086   002D0E  6A31               	clrf	(wallAdjust@cur_power+1)^0,c
  2087   002D10                     l3976:
  2088   002D10  BE31               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2089   002D12  EF8F  F016         	goto	u2890
  2090   002D16  EF8D  F016         	goto	u2891
  2091   002D1A                     u2891:
  2092   002D1A  EF91  F016         	goto	l3980
  2093   002D1E                     u2890:
  2094   002D1E  EFDE  F016         	goto	l3996
  2095   002D22                     l3980:
  2096                           
  2097                           ;dc_motor.c: 525:         mL->power = cur_power+mL->compensation;
  2098   002D22  EE20 F009          	lfsr	2,9
  2099   002D26  5023               	movf	wallAdjust@mL^0,w,c
  2100   002D28  26D9               	addwf	fsr2l,f,c
  2101   002D2A  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2102   002D2C  22DA               	addwfc	fsr2h,f,c
  2103   002D2E  50DF               	movf	indf2,w,c
  2104   002D30  2430               	addwf	wallAdjust@cur_power^0,w,c
  2105   002D32  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2106   002D36  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2107   002D3A  6EDF               	movwf	indf2,c
  2108                           
  2109                           ;dc_motor.c: 526:         mR->power = cur_power+mR->compensation;
  2110   002D3C  EE20 F009          	lfsr	2,9
  2111   002D40  5025               	movf	wallAdjust@mR^0,w,c
  2112   002D42  26D9               	addwf	fsr2l,f,c
  2113   002D44  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2114   002D46  22DA               	addwfc	fsr2h,f,c
  2115   002D48  50DF               	movf	indf2,w,c
  2116   002D4A  2430               	addwf	wallAdjust@cur_power^0,w,c
  2117   002D4C  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2118   002D50  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2119   002D54  6EDF               	movwf	indf2,c
  2120   002D56                     
  2121                           ;dc_motor.c: 527:         setMotorPWM(mL);
  2122   002D56  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2123   002D5A  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2124   002D5E  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2125   002D62                     
  2126                           ;dc_motor.c: 528:         setMotorPWM(mR);
  2127   002D62  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2128   002D66  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2129   002D6A  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2130   002D6E                     
  2131                           ;dc_motor.c: 529:         for (i=0;i<straightRamp;i++) {
  2132   002D6E  0E00               	movlw	0
  2133   002D70  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2134   002D72  0E00               	movlw	0
  2135   002D74  6E2E               	movwf	wallAdjust@i^0,c
  2136   002D76  EFC7  F016         	goto	l710
  2137   002D7A                     l3988:
  2138                           
  2139                           ;dc_motor.c: 530:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2140   002D7A  0E68               	movlw	104
  2141   002D7C  6E29               	movwf	??_wallAdjust^0,c
  2142   002D7E  0EE4               	movlw	228
  2143   002D80                     u3977:
  2144   002D80  2EE8               	decfsz	wreg,f,c
  2145   002D82  D7FE               	bra	u3977
  2146   002D84  2E29               	decfsz	??_wallAdjust^0,f,c
  2147   002D86  D7FC               	bra	u3977
  2148   002D88  D000               	nop2	
  2149   002D8A                     
  2150                           ;dc_motor.c: 531:         }
  2151   002D8A  4A2E               	infsnz	wallAdjust@i^0,f,c
  2152   002D8C  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2153   002D8E                     l710:
  2154   002D8E  5028               	movf	wallAdjust@straightRamp^0,w,c
  2155   002D90  6E29               	movwf	??_wallAdjust^0,c
  2156   002D92  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2157   002D94  5029               	movf	??_wallAdjust^0,w,c
  2158   002D96  5C2E               	subwf	wallAdjust@i^0,w,c
  2159   002D98  502F               	movf	(wallAdjust@i+1)^0,w,c
  2160   002D9A  0A80               	xorlw	128
  2161   002D9C  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2162   002D9E  502A               	movf	(??_wallAdjust+1)^0,w,c
  2163   002DA0  0A80               	xorlw	128
  2164   002DA2  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2165   002DA4  A0D8               	btfss	status,0,c
  2166   002DA6  EFD7  F016         	goto	u2901
  2167   002DAA  EFD9  F016         	goto	u2900
  2168   002DAE                     u2901:
  2169   002DAE  EFBD  F016         	goto	l3988
  2170   002DB2                     u2900:
  2171   002DB2                     
  2172                           ;dc_motor.c: 532:     }
  2173   002DB2  0630               	decf	wallAdjust@cur_power^0,f,c
  2174   002DB4  A0D8               	btfss	status,0,c
  2175   002DB6  0631               	decf	(wallAdjust@cur_power+1)^0,f,c
  2176   002DB8  EF88  F016         	goto	l3976
  2177   002DBC                     l3996:
  2178                           
  2179                           ;dc_motor.c: 534:     mL->direction = 0;
  2180   002DBC  EE20 F001          	lfsr	2,1
  2181   002DC0  5023               	movf	wallAdjust@mL^0,w,c
  2182   002DC2  26D9               	addwf	fsr2l,f,c
  2183   002DC4  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2184   002DC6  22DA               	addwfc	fsr2h,f,c
  2185   002DC8  6ADF               	clrf	indf2,c
  2186                           
  2187                           ;dc_motor.c: 535:     mR->direction = 0;
  2188   002DCA  EE20 F001          	lfsr	2,1
  2189   002DCE  5025               	movf	wallAdjust@mR^0,w,c
  2190   002DD0  26D9               	addwf	fsr2l,f,c
  2191   002DD2  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2192   002DD4  22DA               	addwfc	fsr2h,f,c
  2193   002DD6  6ADF               	clrf	indf2,c
  2194   002DD8                     
  2195                           ;dc_motor.c: 536:     for (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2196   002DD8  0E00               	movlw	0
  2197   002DDA  6E31               	movwf	(wallAdjust@cur_power+1)^0,c
  2198   002DDC  0E01               	movlw	1
  2199   002DDE  6E30               	movwf	wallAdjust@cur_power^0,c
  2200   002DE0  EF3C  F017         	goto	l4014
  2201   002DE4                     l4000:
  2202                           
  2203                           ;dc_motor.c: 537:         mL->power = cur_power+mL->compensation;
  2204   002DE4  EE20 F009          	lfsr	2,9
  2205   002DE8  5023               	movf	wallAdjust@mL^0,w,c
  2206   002DEA  26D9               	addwf	fsr2l,f,c
  2207   002DEC  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2208   002DEE  22DA               	addwfc	fsr2h,f,c
  2209   002DF0  50DF               	movf	indf2,w,c
  2210   002DF2  2430               	addwf	wallAdjust@cur_power^0,w,c
  2211   002DF4  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2212   002DF8  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2213   002DFC  6EDF               	movwf	indf2,c
  2214                           
  2215                           ;dc_motor.c: 538:         mR->power = cur_power+mR->compensation;
  2216   002DFE  EE20 F009          	lfsr	2,9
  2217   002E02  5025               	movf	wallAdjust@mR^0,w,c
  2218   002E04  26D9               	addwf	fsr2l,f,c
  2219   002E06  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2220   002E08  22DA               	addwfc	fsr2h,f,c
  2221   002E0A  50DF               	movf	indf2,w,c
  2222   002E0C  2430               	addwf	wallAdjust@cur_power^0,w,c
  2223   002E0E  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2224   002E12  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2225   002E16  6EDF               	movwf	indf2,c
  2226   002E18                     
  2227                           ;dc_motor.c: 539:         setMotorPWM(mL);
  2228   002E18  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2229   002E1C  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2230   002E20  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2231   002E24                     
  2232                           ;dc_motor.c: 540:         setMotorPWM(mR);
  2233   002E24  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2234   002E28  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2235   002E2C  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2236   002E30                     
  2237                           ;dc_motor.c: 541:         for (i=0;i<straightRamp;i++) {
  2238   002E30  0E00               	movlw	0
  2239   002E32  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2240   002E34  0E00               	movlw	0
  2241   002E36  6E2E               	movwf	wallAdjust@i^0,c
  2242   002E38  EF28  F017         	goto	l715
  2243   002E3C                     l4008:
  2244                           
  2245                           ;dc_motor.c: 542:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2246   002E3C  0E68               	movlw	104
  2247   002E3E  6E29               	movwf	??_wallAdjust^0,c
  2248   002E40  0EE4               	movlw	228
  2249   002E42                     u3987:
  2250   002E42  2EE8               	decfsz	wreg,f,c
  2251   002E44  D7FE               	bra	u3987
  2252   002E46  2E29               	decfsz	??_wallAdjust^0,f,c
  2253   002E48  D7FC               	bra	u3987
  2254   002E4A  D000               	nop2	
  2255   002E4C                     
  2256                           ;dc_motor.c: 543:         }
  2257   002E4C  4A2E               	infsnz	wallAdjust@i^0,f,c
  2258   002E4E  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2259   002E50                     l715:
  2260   002E50  5028               	movf	wallAdjust@straightRamp^0,w,c
  2261   002E52  6E29               	movwf	??_wallAdjust^0,c
  2262   002E54  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2263   002E56  5029               	movf	??_wallAdjust^0,w,c
  2264   002E58  5C2E               	subwf	wallAdjust@i^0,w,c
  2265   002E5A  502F               	movf	(wallAdjust@i+1)^0,w,c
  2266   002E5C  0A80               	xorlw	128
  2267   002E5E  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2268   002E60  502A               	movf	(??_wallAdjust+1)^0,w,c
  2269   002E62  0A80               	xorlw	128
  2270   002E64  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2271   002E66  A0D8               	btfss	status,0,c
  2272   002E68  EF38  F017         	goto	u2911
  2273   002E6C  EF3A  F017         	goto	u2910
  2274   002E70                     u2911:
  2275   002E70  EF1E  F017         	goto	l4008
  2276   002E74                     u2910:
  2277   002E74                     
  2278                           ;dc_motor.c: 544:     }
  2279   002E74  4A30               	infsnz	wallAdjust@cur_power^0,f,c
  2280   002E76  2A31               	incf	(wallAdjust@cur_power+1)^0,f,c
  2281   002E78                     l4014:
  2282   002E78  5027               	movf	wallAdjust@straightSpeed^0,w,c
  2283   002E7A  6E29               	movwf	??_wallAdjust^0,c
  2284   002E7C  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2285   002E7E  5030               	movf	wallAdjust@cur_power^0,w,c
  2286   002E80  5C29               	subwf	??_wallAdjust^0,w,c
  2287   002E82  502A               	movf	(??_wallAdjust+1)^0,w,c
  2288   002E84  0A80               	xorlw	128
  2289   002E86  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2290   002E88  5031               	movf	(wallAdjust@cur_power+1)^0,w,c
  2291   002E8A  0A80               	xorlw	128
  2292   002E8C  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2293   002E8E  B0D8               	btfsc	status,0,c
  2294   002E90  EF4C  F017         	goto	u2921
  2295   002E94  EF4E  F017         	goto	u2920
  2296   002E98                     u2921:
  2297   002E98  EFF2  F016         	goto	l4000
  2298   002E9C                     u2920:
  2299   002E9C                     
  2300                           ;dc_motor.c: 546:     for (i=0;i<wallReverseDuration;i++) {
  2301   002E9C  0E00               	movlw	0
  2302   002E9E  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2303   002EA0  0E00               	movlw	0
  2304   002EA2  6E2E               	movwf	wallAdjust@i^0,c
  2305   002EA4  EF5E  F017         	goto	l719
  2306   002EA8                     l4018:
  2307                           
  2308                           ;dc_motor.c: 547:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2309   002EA8  0E68               	movlw	104
  2310   002EAA  6E29               	movwf	??_wallAdjust^0,c
  2311   002EAC  0EE4               	movlw	228
  2312   002EAE                     u3997:
  2313   002EAE  2EE8               	decfsz	wreg,f,c
  2314   002EB0  D7FE               	bra	u3997
  2315   002EB2  2E29               	decfsz	??_wallAdjust^0,f,c
  2316   002EB4  D7FC               	bra	u3997
  2317   002EB6  D000               	nop2	
  2318   002EB8                     
  2319                           ;dc_motor.c: 548:         }
  2320   002EB8  4A2E               	infsnz	wallAdjust@i^0,f,c
  2321   002EBA  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2322   002EBC                     l719:
  2323   002EBC  502D               	movf	wallAdjust@wallReverseDuration^0,w,c
  2324   002EBE  6E29               	movwf	??_wallAdjust^0,c
  2325   002EC0  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2326   002EC2  5029               	movf	??_wallAdjust^0,w,c
  2327   002EC4  5C2E               	subwf	wallAdjust@i^0,w,c
  2328   002EC6  502F               	movf	(wallAdjust@i+1)^0,w,c
  2329   002EC8  0A80               	xorlw	128
  2330   002ECA  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2331   002ECC  502A               	movf	(??_wallAdjust+1)^0,w,c
  2332   002ECE  0A80               	xorlw	128
  2333   002ED0  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2334   002ED2  A0D8               	btfss	status,0,c
  2335   002ED4  EF6E  F017         	goto	u2931
  2336   002ED8  EF70  F017         	goto	u2930
  2337   002EDC                     u2931:
  2338   002EDC  EF54  F017         	goto	l4018
  2339   002EE0                     u2930:
  2340   002EE0                     
  2341                           ;dc_motor.c: 550:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2342   002EE0  C027  F030         	movff	wallAdjust@straightSpeed,wallAdjust@cur_power
  2343   002EE4  6A31               	clrf	(wallAdjust@cur_power+1)^0,c
  2344   002EE6                     l4022:
  2345   002EE6  BE31               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2346   002EE8  EF7A  F017         	goto	u2940
  2347   002EEC  EF78  F017         	goto	u2941
  2348   002EF0                     u2941:
  2349   002EF0  EF7C  F017         	goto	l4026
  2350   002EF4                     u2940:
  2351   002EF4  EFC9  F017         	goto	l4042
  2352   002EF8                     l4026:
  2353                           
  2354                           ;dc_motor.c: 551:         mL->power = cur_power+mL->compensation;
  2355   002EF8  EE20 F009          	lfsr	2,9
  2356   002EFC  5023               	movf	wallAdjust@mL^0,w,c
  2357   002EFE  26D9               	addwf	fsr2l,f,c
  2358   002F00  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2359   002F02  22DA               	addwfc	fsr2h,f,c
  2360   002F04  50DF               	movf	indf2,w,c
  2361   002F06  2430               	addwf	wallAdjust@cur_power^0,w,c
  2362   002F08  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2363   002F0C  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2364   002F10  6EDF               	movwf	indf2,c
  2365                           
  2366                           ;dc_motor.c: 552:         mR->power = cur_power+mR->compensation;
  2367   002F12  EE20 F009          	lfsr	2,9
  2368   002F16  5025               	movf	wallAdjust@mR^0,w,c
  2369   002F18  26D9               	addwf	fsr2l,f,c
  2370   002F1A  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2371   002F1C  22DA               	addwfc	fsr2h,f,c
  2372   002F1E  50DF               	movf	indf2,w,c
  2373   002F20  2430               	addwf	wallAdjust@cur_power^0,w,c
  2374   002F22  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2375   002F26  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2376   002F2A  6EDF               	movwf	indf2,c
  2377   002F2C                     
  2378                           ;dc_motor.c: 553:         setMotorPWM(mL);
  2379   002F2C  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2380   002F30  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2381   002F34  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2382   002F38                     
  2383                           ;dc_motor.c: 554:         setMotorPWM(mR);
  2384   002F38  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2385   002F3C  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2386   002F40  ECB4  F01F         	call	_setMotorPWM	;wreg free
  2387   002F44                     
  2388                           ;dc_motor.c: 555:         for (i=0;i<straightRamp;i++) {
  2389   002F44  0E00               	movlw	0
  2390   002F46  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2391   002F48  0E00               	movlw	0
  2392   002F4A  6E2E               	movwf	wallAdjust@i^0,c
  2393   002F4C  EFB2  F017         	goto	l724
  2394   002F50                     l4034:
  2395                           
  2396                           ;dc_motor.c: 556:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2397   002F50  0E68               	movlw	104
  2398   002F52  6E29               	movwf	??_wallAdjust^0,c
  2399   002F54  0EE4               	movlw	228
  2400   002F56                     u4007:
  2401   002F56  2EE8               	decfsz	wreg,f,c
  2402   002F58  D7FE               	bra	u4007
  2403   002F5A  2E29               	decfsz	??_wallAdjust^0,f,c
  2404   002F5C  D7FC               	bra	u4007
  2405   002F5E  D000               	nop2	
  2406   002F60                     
  2407                           ;dc_motor.c: 557:         }
  2408   002F60  4A2E               	infsnz	wallAdjust@i^0,f,c
  2409   002F62  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2410   002F64                     l724:
  2411   002F64  5028               	movf	wallAdjust@straightRamp^0,w,c
  2412   002F66  6E29               	movwf	??_wallAdjust^0,c
  2413   002F68  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2414   002F6A  5029               	movf	??_wallAdjust^0,w,c
  2415   002F6C  5C2E               	subwf	wallAdjust@i^0,w,c
  2416   002F6E  502F               	movf	(wallAdjust@i+1)^0,w,c
  2417   002F70  0A80               	xorlw	128
  2418   002F72  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2419   002F74  502A               	movf	(??_wallAdjust+1)^0,w,c
  2420   002F76  0A80               	xorlw	128
  2421   002F78  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2422   002F7A  A0D8               	btfss	status,0,c
  2423   002F7C  EFC2  F017         	goto	u2951
  2424   002F80  EFC4  F017         	goto	u2950
  2425   002F84                     u2951:
  2426   002F84  EFA8  F017         	goto	l4034
  2427   002F88                     u2950:
  2428   002F88                     
  2429                           ;dc_motor.c: 558:     }
  2430   002F88  0630               	decf	wallAdjust@cur_power^0,f,c
  2431   002F8A  A0D8               	btfss	status,0,c
  2432   002F8C  0631               	decf	(wallAdjust@cur_power+1)^0,f,c
  2433   002F8E  EF73  F017         	goto	l4022
  2434   002F92                     l4042:
  2435                           
  2436                           ;dc_motor.c: 559:     mL->power = 0;
  2437   002F92  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2438   002F96  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2439   002F9A  6ADF               	clrf	indf2,c
  2440                           
  2441                           ;dc_motor.c: 560:     mR->power = 0;
  2442   002F9C  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2443   002FA0  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2444   002FA4  6ADF               	clrf	indf2,c
  2445   002FA6  0012               	return		;funcret
  2446   002FA8                     __end_of_wallAdjust:
  2447                           	callstack 0
  2448                           
  2449 ;; *************** function _move *****************
  2450 ;; Defined at:
  2451 ;;		line 91 in file "dc_motor.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2454 ;;		 -> main@motorL(10), 
  2455 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2456 ;;		 -> main@motorR(10), 
  2457 ;;  color           1    4[BANK0 ] unsigned char 
  2458 ;;  moveSequence    2    5[BANK0 ] PTR unsigned char 
  2459 ;;		 -> main@moveSequence(40), 
  2460 ;;  straightTime    2    7[BANK0 ] PTR unsigned int 
  2461 ;;		 -> main@straightTime(82), 
  2462 ;;  curMove         1    9[BANK0 ] unsigned char 
  2463 ;;  straightSpee    1   10[BANK0 ] unsigned char 
  2464 ;;  reverseDurat    1   11[BANK0 ] unsigned char 
  2465 ;;  straightRamp    1   12[BANK0 ] unsigned char 
  2466 ;;  turnSpeed       1   13[BANK0 ] unsigned char 
  2467 ;;  turnDuration    1   14[BANK0 ] unsigned char 
  2468 ;;  turnRamp        1   15[BANK0 ] unsigned char 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2480 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;Total ram usage:       18 bytes
  2485 ;; Hardware stack levels used: 1
  2486 ;; Hardware stack levels required when called: 9
  2487 ;; This function calls:
  2488 ;;		_fullSpeedAhead
  2489 ;;		_returnHome
  2490 ;;		_reverseOneSquare
  2491 ;;		_reverseShort
  2492 ;;		_turnLeft
  2493 ;;		_turnRight
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text2
  2500   000E02                     __ptext2:
  2501                           	callstack 0
  2502   000E02                     _move:
  2503                           	callstack 21
  2504   000E02                     
  2505                           ;dc_motor.c: 91: void move(DC_motor *mL, DC_motor *mR, char color, unsigned char *moveSe
      +                          quence, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reve
      +                          rseDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, uns
      +                          igned char turnRamp);dc_motor.c: 92: {;dc_motor.c: 93:     if (color == 1) {
  2506   000E02  0100               	movlb	0	; () banked
  2507   000E04  0564               	decf	move@color& (0+255),w,b
  2508   000E06  A4D8               	btfss	status,2,c
  2509   000E08  EF08  F007         	goto	u3181
  2510   000E0C  EF0A  F007         	goto	u3180
  2511   000E10                     u3181:
  2512   000E10  EF6C  F007         	goto	l4122
  2513   000E14                     u3180:
  2514   000E14                     
  2515                           ; BSR set to: 0
  2516                           ;dc_motor.c: 94:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2517   000E14  C060  F023         	movff	move@mL,reverseShort@mL
  2518   000E18  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  2519   000E1C  C062  F025         	movff	move@mR,reverseShort@mR
  2520   000E20  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  2521   000E24  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2522   000E28  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2523   000E2C  ECF5  F01A         	call	_reverseShort	;wreg free
  2524   000E30                     
  2525                           ;dc_motor.c: 95:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2526   000E30  0E05               	movlw	5
  2527   000E32  6E46               	movwf	(??_move+1)^0,c
  2528   000E34  0E0F               	movlw	15
  2529   000E36  6E45               	movwf	??_move^0,c
  2530   000E38  0EF1               	movlw	241
  2531   000E3A                     u4017:
  2532   000E3A  2EE8               	decfsz	wreg,f,c
  2533   000E3C  D7FE               	bra	u4017
  2534   000E3E  2E45               	decfsz	??_move^0,f,c
  2535   000E40  D7FC               	bra	u4017
  2536   000E42  2E46               	decfsz	(??_move+1)^0,f,c
  2537   000E44  D7FA               	bra	u4017
  2538   000E46  0000               	nop	
  2539   000E48                     
  2540                           ;dc_motor.c: 96:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2541   000E48  C060  F023         	movff	move@mL,turnRight@mL
  2542   000E4C  C061  F024         	movff	move@mL+1,turnRight@mL+1
  2543   000E50  C062  F025         	movff	move@mR,turnRight@mR
  2544   000E54  C063  F026         	movff	move@mR+1,turnRight@mR+1
  2545   000E58  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2546   000E5C  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  2547   000E60  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  2548   000E64  ECDA  F01D         	call	_turnRight	;wreg free
  2549                           
  2550                           ;dc_motor.c: 97:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2551   000E68  0E05               	movlw	5
  2552   000E6A  6E46               	movwf	(??_move+1)^0,c
  2553   000E6C  0E0F               	movlw	15
  2554   000E6E  6E45               	movwf	??_move^0,c
  2555   000E70  0EF1               	movlw	241
  2556   000E72                     u4027:
  2557   000E72  2EE8               	decfsz	wreg,f,c
  2558   000E74  D7FE               	bra	u4027
  2559   000E76  2E45               	decfsz	??_move^0,f,c
  2560   000E78  D7FC               	bra	u4027
  2561   000E7A  2E46               	decfsz	(??_move+1)^0,f,c
  2562   000E7C  D7FA               	bra	u4027
  2563   000E7E  0000               	nop	
  2564   000E80                     
  2565                           ;dc_motor.c: 98:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2566   000E80  C060  F023         	movff	move@mL,turnRight@mL
  2567   000E84  C061  F024         	movff	move@mL+1,turnRight@mL+1
  2568   000E88  C062  F025         	movff	move@mR,turnRight@mR
  2569   000E8C  C063  F026         	movff	move@mR+1,turnRight@mR+1
  2570   000E90  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2571   000E94  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  2572   000E98  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  2573   000E9C  ECDA  F01D         	call	_turnRight	;wreg free
  2574   000EA0                     
  2575                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2576   000EA0  0E05               	movlw	5
  2577   000EA2  6E46               	movwf	(??_move+1)^0,c
  2578   000EA4  0E0F               	movlw	15
  2579   000EA6  6E45               	movwf	??_move^0,c
  2580   000EA8  0EF1               	movlw	241
  2581   000EAA                     u4037:
  2582   000EAA  2EE8               	decfsz	wreg,f,c
  2583   000EAC  D7FE               	bra	u4037
  2584   000EAE  2E45               	decfsz	??_move^0,f,c
  2585   000EB0  D7FC               	bra	u4037
  2586   000EB2  2E46               	decfsz	(??_move+1)^0,f,c
  2587   000EB4  D7FA               	bra	u4037
  2588   000EB6  0000               	nop	
  2589                           
  2590                           ;dc_motor.c: 100:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2591   000EB8  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  2592   000EBC  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2593   000EC0  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  2594   000EC4  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2595   000EC8  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2596   000ECC  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2597   000ED0  EC74  F021         	call	_fullSpeedAhead	;wreg free
  2598                           
  2599                           ;dc_motor.c: 101:     }
  2600   000ED4  EF15  F00B         	goto	l578
  2601   000ED8                     l4122:
  2602                           
  2603                           ; BSR set to: 0
  2604   000ED8  0E02               	movlw	2
  2605   000EDA  1964               	xorwf	move@color& (0+255),w,b
  2606   000EDC  A4D8               	btfss	status,2,c
  2607   000EDE  EF73  F007         	goto	u3191
  2608   000EE2  EF75  F007         	goto	u3190
  2609   000EE6                     u3191:
  2610   000EE6  EFD7  F007         	goto	l4134
  2611   000EEA                     u3190:
  2612   000EEA                     
  2613                           ; BSR set to: 0
  2614                           ;dc_motor.c: 104:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2615   000EEA  C060  F023         	movff	move@mL,reverseShort@mL
  2616   000EEE  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  2617   000EF2  C062  F025         	movff	move@mR,reverseShort@mR
  2618   000EF6  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  2619   000EFA  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2620   000EFE  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2621   000F02  ECF5  F01A         	call	_reverseShort	;wreg free
  2622   000F06                     
  2623                           ;dc_motor.c: 105:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2624   000F06  0E05               	movlw	5
  2625   000F08  6E46               	movwf	(??_move+1)^0,c
  2626   000F0A  0E0F               	movlw	15
  2627   000F0C  6E45               	movwf	??_move^0,c
  2628   000F0E  0EF1               	movlw	241
  2629   000F10                     u4047:
  2630   000F10  2EE8               	decfsz	wreg,f,c
  2631   000F12  D7FE               	bra	u4047
  2632   000F14  2E45               	decfsz	??_move^0,f,c
  2633   000F16  D7FC               	bra	u4047
  2634   000F18  2E46               	decfsz	(??_move+1)^0,f,c
  2635   000F1A  D7FA               	bra	u4047
  2636   000F1C  0000               	nop	
  2637   000F1E                     
  2638                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2639   000F1E  C060  F023         	movff	move@mL,turnLeft@mL
  2640   000F22  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2641   000F26  C062  F025         	movff	move@mR,turnLeft@mR
  2642   000F2A  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2643   000F2E  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2644   000F32  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2645   000F36  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2646   000F3A  ECC7  F01E         	call	_turnLeft	;wreg free
  2647                           
  2648                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2649   000F3E  0E05               	movlw	5
  2650   000F40  6E46               	movwf	(??_move+1)^0,c
  2651   000F42  0E0F               	movlw	15
  2652   000F44  6E45               	movwf	??_move^0,c
  2653   000F46  0EF1               	movlw	241
  2654   000F48                     u4057:
  2655   000F48  2EE8               	decfsz	wreg,f,c
  2656   000F4A  D7FE               	bra	u4057
  2657   000F4C  2E45               	decfsz	??_move^0,f,c
  2658   000F4E  D7FC               	bra	u4057
  2659   000F50  2E46               	decfsz	(??_move+1)^0,f,c
  2660   000F52  D7FA               	bra	u4057
  2661   000F54  0000               	nop	
  2662   000F56                     
  2663                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2664   000F56  C060  F023         	movff	move@mL,turnLeft@mL
  2665   000F5A  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2666   000F5E  C062  F025         	movff	move@mR,turnLeft@mR
  2667   000F62  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2668   000F66  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2669   000F6A  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2670   000F6E  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2671   000F72  ECC7  F01E         	call	_turnLeft	;wreg free
  2672   000F76                     
  2673                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2674   000F76  0E05               	movlw	5
  2675   000F78  6E46               	movwf	(??_move+1)^0,c
  2676   000F7A  0E0F               	movlw	15
  2677   000F7C  6E45               	movwf	??_move^0,c
  2678   000F7E  0EF1               	movlw	241
  2679   000F80                     u4067:
  2680   000F80  2EE8               	decfsz	wreg,f,c
  2681   000F82  D7FE               	bra	u4067
  2682   000F84  2E45               	decfsz	??_move^0,f,c
  2683   000F86  D7FC               	bra	u4067
  2684   000F88  2E46               	decfsz	(??_move+1)^0,f,c
  2685   000F8A  D7FA               	bra	u4067
  2686   000F8C  0000               	nop	
  2687                           
  2688                           ;dc_motor.c: 110:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2689   000F8E  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  2690   000F92  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2691   000F96  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  2692   000F9A  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2693   000F9E  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2694   000FA2  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2695   000FA6  EC74  F021         	call	_fullSpeedAhead	;wreg free
  2696                           
  2697                           ;dc_motor.c: 111:     }
  2698   000FAA  EF15  F00B         	goto	l578
  2699   000FAE                     l4134:
  2700                           
  2701                           ; BSR set to: 0
  2702   000FAE  0E03               	movlw	3
  2703   000FB0  1964               	xorwf	move@color& (0+255),w,b
  2704   000FB2  A4D8               	btfss	status,2,c
  2705   000FB4  EFDE  F007         	goto	u3201
  2706   000FB8  EFE0  F007         	goto	u3200
  2707   000FBC                     u3201:
  2708   000FBC  EF7A  F008         	goto	l4152
  2709   000FC0                     u3200:
  2710   000FC0                     
  2711                           ; BSR set to: 0
  2712                           ;dc_motor.c: 114:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2713   000FC0  C060  F023         	movff	move@mL,reverseShort@mL
  2714   000FC4  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  2715   000FC8  C062  F025         	movff	move@mR,reverseShort@mR
  2716   000FCC  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  2717   000FD0  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2718   000FD4  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2719   000FD8  ECF5  F01A         	call	_reverseShort	;wreg free
  2720   000FDC                     
  2721                           ;dc_motor.c: 115:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2722   000FDC  0E05               	movlw	5
  2723   000FDE  6E46               	movwf	(??_move+1)^0,c
  2724   000FE0  0E0F               	movlw	15
  2725   000FE2  6E45               	movwf	??_move^0,c
  2726   000FE4  0EF1               	movlw	241
  2727   000FE6                     u4077:
  2728   000FE6  2EE8               	decfsz	wreg,f,c
  2729   000FE8  D7FE               	bra	u4077
  2730   000FEA  2E45               	decfsz	??_move^0,f,c
  2731   000FEC  D7FC               	bra	u4077
  2732   000FEE  2E46               	decfsz	(??_move+1)^0,f,c
  2733   000FF0  D7FA               	bra	u4077
  2734   000FF2  0000               	nop	
  2735   000FF4                     
  2736                           ;dc_motor.c: 116:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2737   000FF4  C060  F023         	movff	move@mL,turnLeft@mL
  2738   000FF8  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2739   000FFC  C062  F025         	movff	move@mR,turnLeft@mR
  2740   001000  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2741   001004  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2742   001008  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2743   00100C  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2744   001010  ECC7  F01E         	call	_turnLeft	;wreg free
  2745                           
  2746                           ;dc_motor.c: 117:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2747   001014  0E05               	movlw	5
  2748   001016  6E46               	movwf	(??_move+1)^0,c
  2749   001018  0E0F               	movlw	15
  2750   00101A  6E45               	movwf	??_move^0,c
  2751   00101C  0EF1               	movlw	241
  2752   00101E                     u4087:
  2753   00101E  2EE8               	decfsz	wreg,f,c
  2754   001020  D7FE               	bra	u4087
  2755   001022  2E45               	decfsz	??_move^0,f,c
  2756   001024  D7FC               	bra	u4087
  2757   001026  2E46               	decfsz	(??_move+1)^0,f,c
  2758   001028  D7FA               	bra	u4087
  2759   00102A  0000               	nop	
  2760   00102C                     
  2761                           ;dc_motor.c: 118:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2762   00102C  C060  F023         	movff	move@mL,turnLeft@mL
  2763   001030  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2764   001034  C062  F025         	movff	move@mR,turnLeft@mR
  2765   001038  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2766   00103C  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2767   001040  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2768   001044  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2769   001048  ECC7  F01E         	call	_turnLeft	;wreg free
  2770   00104C                     
  2771                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2772   00104C  0E05               	movlw	5
  2773   00104E  6E46               	movwf	(??_move+1)^0,c
  2774   001050  0E0F               	movlw	15
  2775   001052  6E45               	movwf	??_move^0,c
  2776   001054  0EF1               	movlw	241
  2777   001056                     u4097:
  2778   001056  2EE8               	decfsz	wreg,f,c
  2779   001058  D7FE               	bra	u4097
  2780   00105A  2E45               	decfsz	??_move^0,f,c
  2781   00105C  D7FC               	bra	u4097
  2782   00105E  2E46               	decfsz	(??_move+1)^0,f,c
  2783   001060  D7FA               	bra	u4097
  2784   001062  0000               	nop	
  2785                           
  2786                           ;dc_motor.c: 120:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2787   001064  C060  F023         	movff	move@mL,turnLeft@mL
  2788   001068  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2789   00106C  C062  F025         	movff	move@mR,turnLeft@mR
  2790   001070  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2791   001074  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2792   001078  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2793   00107C  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2794   001080  ECC7  F01E         	call	_turnLeft	;wreg free
  2795   001084                     
  2796                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2797   001084  0E05               	movlw	5
  2798   001086  6E46               	movwf	(??_move+1)^0,c
  2799   001088  0E0F               	movlw	15
  2800   00108A  6E45               	movwf	??_move^0,c
  2801   00108C  0EF1               	movlw	241
  2802   00108E                     u4107:
  2803   00108E  2EE8               	decfsz	wreg,f,c
  2804   001090  D7FE               	bra	u4107
  2805   001092  2E45               	decfsz	??_move^0,f,c
  2806   001094  D7FC               	bra	u4107
  2807   001096  2E46               	decfsz	(??_move+1)^0,f,c
  2808   001098  D7FA               	bra	u4107
  2809   00109A  0000               	nop	
  2810   00109C                     
  2811                           ;dc_motor.c: 122:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2812   00109C  C060  F023         	movff	move@mL,turnLeft@mL
  2813   0010A0  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  2814   0010A4  C062  F025         	movff	move@mR,turnLeft@mR
  2815   0010A8  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  2816   0010AC  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2817   0010B0  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2818   0010B4  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2819   0010B8  ECC7  F01E         	call	_turnLeft	;wreg free
  2820                           
  2821                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2822   0010BC  0E05               	movlw	5
  2823   0010BE  6E46               	movwf	(??_move+1)^0,c
  2824   0010C0  0E0F               	movlw	15
  2825   0010C2  6E45               	movwf	??_move^0,c
  2826   0010C4  0EF1               	movlw	241
  2827   0010C6                     u4117:
  2828   0010C6  2EE8               	decfsz	wreg,f,c
  2829   0010C8  D7FE               	bra	u4117
  2830   0010CA  2E45               	decfsz	??_move^0,f,c
  2831   0010CC  D7FC               	bra	u4117
  2832   0010CE  2E46               	decfsz	(??_move+1)^0,f,c
  2833   0010D0  D7FA               	bra	u4117
  2834   0010D2  0000               	nop	
  2835   0010D4                     
  2836                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2837   0010D4  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  2838   0010D8  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2839   0010DC  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  2840   0010E0  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2841   0010E4  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2842   0010E8  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2843   0010EC  EC74  F021         	call	_fullSpeedAhead	;wreg free
  2844                           
  2845                           ;dc_motor.c: 125:     }
  2846   0010F0  EF15  F00B         	goto	l578
  2847   0010F4                     l4152:
  2848                           
  2849                           ; BSR set to: 0
  2850   0010F4  0E04               	movlw	4
  2851   0010F6  1964               	xorwf	move@color& (0+255),w,b
  2852   0010F8  A4D8               	btfss	status,2,c
  2853   0010FA  EF81  F008         	goto	u3211
  2854   0010FE  EF83  F008         	goto	u3210
  2855   001102                     u3211:
  2856   001102  EF01  F009         	goto	l4168
  2857   001106                     u3210:
  2858   001106                     
  2859                           ; BSR set to: 0
  2860                           ;dc_motor.c: 128:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2861   001106  C060  F023         	movff	move@mL,reverseShort@mL
  2862   00110A  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  2863   00110E  C062  F025         	movff	move@mR,reverseShort@mR
  2864   001112  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  2865   001116  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2866   00111A  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2867   00111E  ECF5  F01A         	call	_reverseShort	;wreg free
  2868   001122                     
  2869                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2870   001122  0E05               	movlw	5
  2871   001124  6E46               	movwf	(??_move+1)^0,c
  2872   001126  0E0F               	movlw	15
  2873   001128  6E45               	movwf	??_move^0,c
  2874   00112A  0EF1               	movlw	241
  2875   00112C                     u4127:
  2876   00112C  2EE8               	decfsz	wreg,f,c
  2877   00112E  D7FE               	bra	u4127
  2878   001130  2E45               	decfsz	??_move^0,f,c
  2879   001132  D7FC               	bra	u4127
  2880   001134  2E46               	decfsz	(??_move+1)^0,f,c
  2881   001136  D7FA               	bra	u4127
  2882   001138  0000               	nop	
  2883   00113A                     
  2884                           ;dc_motor.c: 130:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2885   00113A  C060  F023         	movff	move@mL,reverseOneSquare@mL
  2886   00113E  C061  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  2887   001142  C062  F025         	movff	move@mR,reverseOneSquare@mR
  2888   001146  C063  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  2889   00114A  C06A  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2890   00114E  C06B  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2891   001152  C06C  F029         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2892   001156  ECE4  F01C         	call	_reverseOneSquare	;wreg free
  2893                           
  2894                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2895   00115A  0E05               	movlw	5
  2896   00115C  6E46               	movwf	(??_move+1)^0,c
  2897   00115E  0E0F               	movlw	15
  2898   001160  6E45               	movwf	??_move^0,c
  2899   001162  0EF1               	movlw	241
  2900   001164                     u4137:
  2901   001164  2EE8               	decfsz	wreg,f,c
  2902   001166  D7FE               	bra	u4137
  2903   001168  2E45               	decfsz	??_move^0,f,c
  2904   00116A  D7FC               	bra	u4137
  2905   00116C  2E46               	decfsz	(??_move+1)^0,f,c
  2906   00116E  D7FA               	bra	u4137
  2907   001170  0000               	nop	
  2908   001172                     
  2909                           ;dc_motor.c: 132:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2910   001172  C060  F023         	movff	move@mL,turnRight@mL
  2911   001176  C061  F024         	movff	move@mL+1,turnRight@mL+1
  2912   00117A  C062  F025         	movff	move@mR,turnRight@mR
  2913   00117E  C063  F026         	movff	move@mR+1,turnRight@mR+1
  2914   001182  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2915   001186  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  2916   00118A  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  2917   00118E  ECDA  F01D         	call	_turnRight	;wreg free
  2918   001192                     
  2919                           ;dc_motor.c: 133:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2920   001192  0E05               	movlw	5
  2921   001194  6E46               	movwf	(??_move+1)^0,c
  2922   001196  0E0F               	movlw	15
  2923   001198  6E45               	movwf	??_move^0,c
  2924   00119A  0EF1               	movlw	241
  2925   00119C                     u4147:
  2926   00119C  2EE8               	decfsz	wreg,f,c
  2927   00119E  D7FE               	bra	u4147
  2928   0011A0  2E45               	decfsz	??_move^0,f,c
  2929   0011A2  D7FC               	bra	u4147
  2930   0011A4  2E46               	decfsz	(??_move+1)^0,f,c
  2931   0011A6  D7FA               	bra	u4147
  2932   0011A8  0000               	nop	
  2933                           
  2934                           ;dc_motor.c: 134:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2935   0011AA  C060  F023         	movff	move@mL,turnRight@mL
  2936   0011AE  C061  F024         	movff	move@mL+1,turnRight@mL+1
  2937   0011B2  C062  F025         	movff	move@mR,turnRight@mR
  2938   0011B6  C063  F026         	movff	move@mR+1,turnRight@mR+1
  2939   0011BA  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2940   0011BE  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  2941   0011C2  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  2942   0011C6  ECDA  F01D         	call	_turnRight	;wreg free
  2943   0011CA                     
  2944                           ;dc_motor.c: 135:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2945   0011CA  0E05               	movlw	5
  2946   0011CC  6E46               	movwf	(??_move+1)^0,c
  2947   0011CE  0E0F               	movlw	15
  2948   0011D0  6E45               	movwf	??_move^0,c
  2949   0011D2  0EF1               	movlw	241
  2950   0011D4                     u4157:
  2951   0011D4  2EE8               	decfsz	wreg,f,c
  2952   0011D6  D7FE               	bra	u4157
  2953   0011D8  2E45               	decfsz	??_move^0,f,c
  2954   0011DA  D7FC               	bra	u4157
  2955   0011DC  2E46               	decfsz	(??_move+1)^0,f,c
  2956   0011DE  D7FA               	bra	u4157
  2957   0011E0  0000               	nop	
  2958   0011E2                     
  2959                           ;dc_motor.c: 136:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2960   0011E2  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  2961   0011E6  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2962   0011EA  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  2963   0011EE  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2964   0011F2  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2965   0011F6  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2966   0011FA  EC74  F021         	call	_fullSpeedAhead	;wreg free
  2967                           
  2968                           ;dc_motor.c: 137:     }
  2969   0011FE  EF15  F00B         	goto	l578
  2970   001202                     l4168:
  2971                           
  2972                           ; BSR set to: 0
  2973   001202  0E05               	movlw	5
  2974   001204  1964               	xorwf	move@color& (0+255),w,b
  2975   001206  A4D8               	btfss	status,2,c
  2976   001208  EF08  F009         	goto	u3221
  2977   00120C  EF0A  F009         	goto	u3220
  2978   001210                     u3221:
  2979   001210  EF88  F009         	goto	l4184
  2980   001214                     u3220:
  2981   001214                     
  2982                           ; BSR set to: 0
  2983                           ;dc_motor.c: 140:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2984   001214  C060  F023         	movff	move@mL,reverseShort@mL
  2985   001218  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  2986   00121C  C062  F025         	movff	move@mR,reverseShort@mR
  2987   001220  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  2988   001224  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2989   001228  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2990   00122C  ECF5  F01A         	call	_reverseShort	;wreg free
  2991   001230                     
  2992                           ;dc_motor.c: 141:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2993   001230  0E05               	movlw	5
  2994   001232  6E46               	movwf	(??_move+1)^0,c
  2995   001234  0E0F               	movlw	15
  2996   001236  6E45               	movwf	??_move^0,c
  2997   001238  0EF1               	movlw	241
  2998   00123A                     u4167:
  2999   00123A  2EE8               	decfsz	wreg,f,c
  3000   00123C  D7FE               	bra	u4167
  3001   00123E  2E45               	decfsz	??_move^0,f,c
  3002   001240  D7FC               	bra	u4167
  3003   001242  2E46               	decfsz	(??_move+1)^0,f,c
  3004   001244  D7FA               	bra	u4167
  3005   001246  0000               	nop	
  3006   001248                     
  3007                           ;dc_motor.c: 142:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  3008   001248  C060  F023         	movff	move@mL,reverseOneSquare@mL
  3009   00124C  C061  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  3010   001250  C062  F025         	movff	move@mR,reverseOneSquare@mR
  3011   001254  C063  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  3012   001258  C06A  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  3013   00125C  C06B  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  3014   001260  C06C  F029         	movff	move@straightRamp,reverseOneSquare@straightRamp
  3015   001264  ECE4  F01C         	call	_reverseOneSquare	;wreg free
  3016                           
  3017                           ;dc_motor.c: 143:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3018   001268  0E05               	movlw	5
  3019   00126A  6E46               	movwf	(??_move+1)^0,c
  3020   00126C  0E0F               	movlw	15
  3021   00126E  6E45               	movwf	??_move^0,c
  3022   001270  0EF1               	movlw	241
  3023   001272                     u4177:
  3024   001272  2EE8               	decfsz	wreg,f,c
  3025   001274  D7FE               	bra	u4177
  3026   001276  2E45               	decfsz	??_move^0,f,c
  3027   001278  D7FC               	bra	u4177
  3028   00127A  2E46               	decfsz	(??_move+1)^0,f,c
  3029   00127C  D7FA               	bra	u4177
  3030   00127E  0000               	nop	
  3031   001280                     
  3032                           ;dc_motor.c: 144:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3033   001280  C060  F023         	movff	move@mL,turnLeft@mL
  3034   001284  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  3035   001288  C062  F025         	movff	move@mR,turnLeft@mR
  3036   00128C  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  3037   001290  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3038   001294  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3039   001298  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3040   00129C  ECC7  F01E         	call	_turnLeft	;wreg free
  3041   0012A0                     
  3042                           ;dc_motor.c: 145:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3043   0012A0  0E05               	movlw	5
  3044   0012A2  6E46               	movwf	(??_move+1)^0,c
  3045   0012A4  0E0F               	movlw	15
  3046   0012A6  6E45               	movwf	??_move^0,c
  3047   0012A8  0EF1               	movlw	241
  3048   0012AA                     u4187:
  3049   0012AA  2EE8               	decfsz	wreg,f,c
  3050   0012AC  D7FE               	bra	u4187
  3051   0012AE  2E45               	decfsz	??_move^0,f,c
  3052   0012B0  D7FC               	bra	u4187
  3053   0012B2  2E46               	decfsz	(??_move+1)^0,f,c
  3054   0012B4  D7FA               	bra	u4187
  3055   0012B6  0000               	nop	
  3056                           
  3057                           ;dc_motor.c: 146:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3058   0012B8  C060  F023         	movff	move@mL,turnLeft@mL
  3059   0012BC  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  3060   0012C0  C062  F025         	movff	move@mR,turnLeft@mR
  3061   0012C4  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  3062   0012C8  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3063   0012CC  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3064   0012D0  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3065   0012D4  ECC7  F01E         	call	_turnLeft	;wreg free
  3066   0012D8                     
  3067                           ;dc_motor.c: 147:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3068   0012D8  0E05               	movlw	5
  3069   0012DA  6E46               	movwf	(??_move+1)^0,c
  3070   0012DC  0E0F               	movlw	15
  3071   0012DE  6E45               	movwf	??_move^0,c
  3072   0012E0  0EF1               	movlw	241
  3073   0012E2                     u4197:
  3074   0012E2  2EE8               	decfsz	wreg,f,c
  3075   0012E4  D7FE               	bra	u4197
  3076   0012E6  2E45               	decfsz	??_move^0,f,c
  3077   0012E8  D7FC               	bra	u4197
  3078   0012EA  2E46               	decfsz	(??_move+1)^0,f,c
  3079   0012EC  D7FA               	bra	u4197
  3080   0012EE  0000               	nop	
  3081   0012F0                     
  3082                           ;dc_motor.c: 148:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3083   0012F0  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  3084   0012F4  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3085   0012F8  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  3086   0012FC  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3087   001300  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3088   001304  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3089   001308  EC74  F021         	call	_fullSpeedAhead	;wreg free
  3090                           
  3091                           ;dc_motor.c: 149:     }
  3092   00130C  EF15  F00B         	goto	l578
  3093   001310                     l4184:
  3094                           
  3095                           ; BSR set to: 0
  3096   001310  0E06               	movlw	6
  3097   001312  1964               	xorwf	move@color& (0+255),w,b
  3098   001314  A4D8               	btfss	status,2,c
  3099   001316  EF8F  F009         	goto	u3231
  3100   00131A  EF91  F009         	goto	u3230
  3101   00131E                     u3231:
  3102   00131E  EF0F  F00A         	goto	l4200
  3103   001322                     u3230:
  3104   001322                     
  3105                           ; BSR set to: 0
  3106                           ;dc_motor.c: 152:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3107   001322  C060  F023         	movff	move@mL,reverseShort@mL
  3108   001326  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  3109   00132A  C062  F025         	movff	move@mR,reverseShort@mR
  3110   00132E  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  3111   001332  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3112   001336  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3113   00133A  ECF5  F01A         	call	_reverseShort	;wreg free
  3114   00133E                     
  3115                           ;dc_motor.c: 153:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3116   00133E  0E05               	movlw	5
  3117   001340  6E46               	movwf	(??_move+1)^0,c
  3118   001342  0E0F               	movlw	15
  3119   001344  6E45               	movwf	??_move^0,c
  3120   001346  0EF1               	movlw	241
  3121   001348                     u4207:
  3122   001348  2EE8               	decfsz	wreg,f,c
  3123   00134A  D7FE               	bra	u4207
  3124   00134C  2E45               	decfsz	??_move^0,f,c
  3125   00134E  D7FC               	bra	u4207
  3126   001350  2E46               	decfsz	(??_move+1)^0,f,c
  3127   001352  D7FA               	bra	u4207
  3128   001354  0000               	nop	
  3129   001356                     
  3130                           ;dc_motor.c: 154:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3131   001356  C060  F023         	movff	move@mL,turnRight@mL
  3132   00135A  C061  F024         	movff	move@mL+1,turnRight@mL+1
  3133   00135E  C062  F025         	movff	move@mR,turnRight@mR
  3134   001362  C063  F026         	movff	move@mR+1,turnRight@mR+1
  3135   001366  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3136   00136A  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  3137   00136E  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  3138   001372  ECDA  F01D         	call	_turnRight	;wreg free
  3139                           
  3140                           ;dc_motor.c: 155:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3141   001376  0E05               	movlw	5
  3142   001378  6E46               	movwf	(??_move+1)^0,c
  3143   00137A  0E0F               	movlw	15
  3144   00137C  6E45               	movwf	??_move^0,c
  3145   00137E  0EF1               	movlw	241
  3146   001380                     u4217:
  3147   001380  2EE8               	decfsz	wreg,f,c
  3148   001382  D7FE               	bra	u4217
  3149   001384  2E45               	decfsz	??_move^0,f,c
  3150   001386  D7FC               	bra	u4217
  3151   001388  2E46               	decfsz	(??_move+1)^0,f,c
  3152   00138A  D7FA               	bra	u4217
  3153   00138C  0000               	nop	
  3154   00138E                     
  3155                           ;dc_motor.c: 156:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3156   00138E  C060  F023         	movff	move@mL,turnRight@mL
  3157   001392  C061  F024         	movff	move@mL+1,turnRight@mL+1
  3158   001396  C062  F025         	movff	move@mR,turnRight@mR
  3159   00139A  C063  F026         	movff	move@mR+1,turnRight@mR+1
  3160   00139E  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3161   0013A2  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  3162   0013A6  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  3163   0013AA  ECDA  F01D         	call	_turnRight	;wreg free
  3164   0013AE                     
  3165                           ;dc_motor.c: 157:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3166   0013AE  0E05               	movlw	5
  3167   0013B0  6E46               	movwf	(??_move+1)^0,c
  3168   0013B2  0E0F               	movlw	15
  3169   0013B4  6E45               	movwf	??_move^0,c
  3170   0013B6  0EF1               	movlw	241
  3171   0013B8                     u4227:
  3172   0013B8  2EE8               	decfsz	wreg,f,c
  3173   0013BA  D7FE               	bra	u4227
  3174   0013BC  2E45               	decfsz	??_move^0,f,c
  3175   0013BE  D7FC               	bra	u4227
  3176   0013C0  2E46               	decfsz	(??_move+1)^0,f,c
  3177   0013C2  D7FA               	bra	u4227
  3178   0013C4  0000               	nop	
  3179                           
  3180                           ;dc_motor.c: 158:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3181   0013C6  C060  F023         	movff	move@mL,turnRight@mL
  3182   0013CA  C061  F024         	movff	move@mL+1,turnRight@mL+1
  3183   0013CE  C062  F025         	movff	move@mR,turnRight@mR
  3184   0013D2  C063  F026         	movff	move@mR+1,turnRight@mR+1
  3185   0013D6  C06D  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3186   0013DA  C06E  F028         	movff	move@turnDuration,turnRight@turnDuration
  3187   0013DE  C06F  F029         	movff	move@turnRamp,turnRight@turnRamp
  3188   0013E2  ECDA  F01D         	call	_turnRight	;wreg free
  3189   0013E6                     
  3190                           ;dc_motor.c: 159:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3191   0013E6  0E05               	movlw	5
  3192   0013E8  6E46               	movwf	(??_move+1)^0,c
  3193   0013EA  0E0F               	movlw	15
  3194   0013EC  6E45               	movwf	??_move^0,c
  3195   0013EE  0EF1               	movlw	241
  3196   0013F0                     u4237:
  3197   0013F0  2EE8               	decfsz	wreg,f,c
  3198   0013F2  D7FE               	bra	u4237
  3199   0013F4  2E45               	decfsz	??_move^0,f,c
  3200   0013F6  D7FC               	bra	u4237
  3201   0013F8  2E46               	decfsz	(??_move+1)^0,f,c
  3202   0013FA  D7FA               	bra	u4237
  3203   0013FC  0000               	nop	
  3204   0013FE                     
  3205                           ;dc_motor.c: 160:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3206   0013FE  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  3207   001402  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3208   001406  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  3209   00140A  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3210   00140E  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3211   001412  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3212   001416  EC74  F021         	call	_fullSpeedAhead	;wreg free
  3213                           
  3214                           ;dc_motor.c: 161:     }
  3215   00141A  EF15  F00B         	goto	l578
  3216   00141E                     l4200:
  3217                           
  3218                           ; BSR set to: 0
  3219   00141E  0E07               	movlw	7
  3220   001420  1964               	xorwf	move@color& (0+255),w,b
  3221   001422  A4D8               	btfss	status,2,c
  3222   001424  EF16  F00A         	goto	u3241
  3223   001428  EF18  F00A         	goto	u3240
  3224   00142C                     u3241:
  3225   00142C  EF96  F00A         	goto	l4216
  3226   001430                     u3240:
  3227   001430                     
  3228                           ; BSR set to: 0
  3229                           ;dc_motor.c: 164:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3230   001430  C060  F023         	movff	move@mL,reverseShort@mL
  3231   001434  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  3232   001438  C062  F025         	movff	move@mR,reverseShort@mR
  3233   00143C  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  3234   001440  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3235   001444  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3236   001448  ECF5  F01A         	call	_reverseShort	;wreg free
  3237   00144C                     
  3238                           ;dc_motor.c: 165:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3239   00144C  0E05               	movlw	5
  3240   00144E  6E46               	movwf	(??_move+1)^0,c
  3241   001450  0E0F               	movlw	15
  3242   001452  6E45               	movwf	??_move^0,c
  3243   001454  0EF1               	movlw	241
  3244   001456                     u4247:
  3245   001456  2EE8               	decfsz	wreg,f,c
  3246   001458  D7FE               	bra	u4247
  3247   00145A  2E45               	decfsz	??_move^0,f,c
  3248   00145C  D7FC               	bra	u4247
  3249   00145E  2E46               	decfsz	(??_move+1)^0,f,c
  3250   001460  D7FA               	bra	u4247
  3251   001462  0000               	nop	
  3252   001464                     
  3253                           ;dc_motor.c: 166:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3254   001464  C060  F023         	movff	move@mL,turnLeft@mL
  3255   001468  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  3256   00146C  C062  F025         	movff	move@mR,turnLeft@mR
  3257   001470  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  3258   001474  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3259   001478  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3260   00147C  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3261   001480  ECC7  F01E         	call	_turnLeft	;wreg free
  3262                           
  3263                           ;dc_motor.c: 167:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3264   001484  0E05               	movlw	5
  3265   001486  6E46               	movwf	(??_move+1)^0,c
  3266   001488  0E0F               	movlw	15
  3267   00148A  6E45               	movwf	??_move^0,c
  3268   00148C  0EF1               	movlw	241
  3269   00148E                     u4257:
  3270   00148E  2EE8               	decfsz	wreg,f,c
  3271   001490  D7FE               	bra	u4257
  3272   001492  2E45               	decfsz	??_move^0,f,c
  3273   001494  D7FC               	bra	u4257
  3274   001496  2E46               	decfsz	(??_move+1)^0,f,c
  3275   001498  D7FA               	bra	u4257
  3276   00149A  0000               	nop	
  3277   00149C                     
  3278                           ;dc_motor.c: 168:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3279   00149C  C060  F023         	movff	move@mL,turnLeft@mL
  3280   0014A0  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  3281   0014A4  C062  F025         	movff	move@mR,turnLeft@mR
  3282   0014A8  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  3283   0014AC  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3284   0014B0  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3285   0014B4  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3286   0014B8  ECC7  F01E         	call	_turnLeft	;wreg free
  3287   0014BC                     
  3288                           ;dc_motor.c: 169:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3289   0014BC  0E05               	movlw	5
  3290   0014BE  6E46               	movwf	(??_move+1)^0,c
  3291   0014C0  0E0F               	movlw	15
  3292   0014C2  6E45               	movwf	??_move^0,c
  3293   0014C4  0EF1               	movlw	241
  3294   0014C6                     u4267:
  3295   0014C6  2EE8               	decfsz	wreg,f,c
  3296   0014C8  D7FE               	bra	u4267
  3297   0014CA  2E45               	decfsz	??_move^0,f,c
  3298   0014CC  D7FC               	bra	u4267
  3299   0014CE  2E46               	decfsz	(??_move+1)^0,f,c
  3300   0014D0  D7FA               	bra	u4267
  3301   0014D2  0000               	nop	
  3302                           
  3303                           ;dc_motor.c: 170:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3304   0014D4  C060  F023         	movff	move@mL,turnLeft@mL
  3305   0014D8  C061  F024         	movff	move@mL+1,turnLeft@mL+1
  3306   0014DC  C062  F025         	movff	move@mR,turnLeft@mR
  3307   0014E0  C063  F026         	movff	move@mR+1,turnLeft@mR+1
  3308   0014E4  C06D  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3309   0014E8  C06E  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3310   0014EC  C06F  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3311   0014F0  ECC7  F01E         	call	_turnLeft	;wreg free
  3312   0014F4                     
  3313                           ;dc_motor.c: 171:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3314   0014F4  0E05               	movlw	5
  3315   0014F6  6E46               	movwf	(??_move+1)^0,c
  3316   0014F8  0E0F               	movlw	15
  3317   0014FA  6E45               	movwf	??_move^0,c
  3318   0014FC  0EF1               	movlw	241
  3319   0014FE                     u4277:
  3320   0014FE  2EE8               	decfsz	wreg,f,c
  3321   001500  D7FE               	bra	u4277
  3322   001502  2E45               	decfsz	??_move^0,f,c
  3323   001504  D7FC               	bra	u4277
  3324   001506  2E46               	decfsz	(??_move+1)^0,f,c
  3325   001508  D7FA               	bra	u4277
  3326   00150A  0000               	nop	
  3327   00150C                     
  3328                           ;dc_motor.c: 172:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3329   00150C  C060  F023         	movff	move@mL,fullSpeedAhead@mL
  3330   001510  C061  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3331   001514  C062  F025         	movff	move@mR,fullSpeedAhead@mR
  3332   001518  C063  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3333   00151C  C06A  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3334   001520  C06C  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3335   001524  EC74  F021         	call	_fullSpeedAhead	;wreg free
  3336                           
  3337                           ;dc_motor.c: 173:     }
  3338   001528  EF15  F00B         	goto	l578
  3339   00152C                     l4216:
  3340                           
  3341                           ; BSR set to: 0
  3342   00152C  0E08               	movlw	8
  3343   00152E  1964               	xorwf	move@color& (0+255),w,b
  3344   001530  A4D8               	btfss	status,2,c
  3345   001532  EF9D  F00A         	goto	u3251
  3346   001536  EF9F  F00A         	goto	u3250
  3347   00153A                     u3251:
  3348   00153A  EFDB  F00A         	goto	l4224
  3349   00153E                     u3250:
  3350   00153E                     
  3351                           ; BSR set to: 0
  3352                           ;dc_motor.c: 176:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3353   00153E  C060  F023         	movff	move@mL,reverseShort@mL
  3354   001542  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  3355   001546  C062  F025         	movff	move@mR,reverseShort@mR
  3356   00154A  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  3357   00154E  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3358   001552  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3359   001556  ECF5  F01A         	call	_reverseShort	;wreg free
  3360   00155A                     
  3361                           ;dc_motor.c: 177:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3362   00155A  0E05               	movlw	5
  3363   00155C  6E46               	movwf	(??_move+1)^0,c
  3364   00155E  0E0F               	movlw	15
  3365   001560  6E45               	movwf	??_move^0,c
  3366   001562  0EF1               	movlw	241
  3367   001564                     u4287:
  3368   001564  2EE8               	decfsz	wreg,f,c
  3369   001566  D7FE               	bra	u4287
  3370   001568  2E45               	decfsz	??_move^0,f,c
  3371   00156A  D7FC               	bra	u4287
  3372   00156C  2E46               	decfsz	(??_move+1)^0,f,c
  3373   00156E  D7FA               	bra	u4287
  3374   001570  0000               	nop	
  3375   001572                     
  3376                           ;dc_motor.c: 178:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  3377   001572  C060  F031         	movff	move@mL,returnHome@mL
  3378   001576  C061  F032         	movff	move@mL+1,returnHome@mL+1
  3379   00157A  C062  F033         	movff	move@mR,returnHome@mR
  3380   00157E  C063  F034         	movff	move@mR+1,returnHome@mR+1
  3381   001582  C065  F035         	movff	move@moveSequence,returnHome@moveSequence
  3382   001586  C066  F036         	movff	move@moveSequence+1,returnHome@moveSequence+1
  3383   00158A  C067  F037         	movff	move@straightTime,returnHome@straightTime
  3384   00158E  C068  F038         	movff	move@straightTime+1,returnHome@straightTime+1
  3385   001592  C069  F039         	movff	move@curMove,returnHome@curMove
  3386   001596  C06A  F03A         	movff	move@straightSpeed,returnHome@straightSpeed
  3387   00159A  C06B  F03B         	movff	move@reverseDuration,returnHome@reverseDuration
  3388   00159E  C06C  F03C         	movff	move@straightRamp,returnHome@straightRamp
  3389   0015A2  C06D  F03D         	movff	move@turnSpeed,returnHome@turnSpeed
  3390   0015A6  C06E  F03E         	movff	move@turnDuration,returnHome@turnDuration
  3391   0015AA  C06F  F03F         	movff	move@turnRamp,returnHome@turnRamp
  3392   0015AE  EC16  F00B         	call	_returnHome	;wreg free
  3393                           
  3394                           ;dc_motor.c: 179:     }
  3395   0015B2  EF15  F00B         	goto	l578
  3396   0015B6                     l4224:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;dc_motor.c: 182:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3400   0015B6  C060  F023         	movff	move@mL,reverseShort@mL
  3401   0015BA  C061  F024         	movff	move@mL+1,reverseShort@mL+1
  3402   0015BE  C062  F025         	movff	move@mR,reverseShort@mR
  3403   0015C2  C063  F026         	movff	move@mR+1,reverseShort@mR+1
  3404   0015C6  C06A  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3405   0015CA  C06C  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3406   0015CE  ECF5  F01A         	call	_reverseShort	;wreg free
  3407   0015D2                     
  3408                           ;dc_motor.c: 183:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3409   0015D2  0E05               	movlw	5
  3410   0015D4  6E46               	movwf	(??_move+1)^0,c
  3411   0015D6  0E0F               	movlw	15
  3412   0015D8  6E45               	movwf	??_move^0,c
  3413   0015DA  0EF1               	movlw	241
  3414   0015DC                     u4297:
  3415   0015DC  2EE8               	decfsz	wreg,f,c
  3416   0015DE  D7FE               	bra	u4297
  3417   0015E0  2E45               	decfsz	??_move^0,f,c
  3418   0015E2  D7FC               	bra	u4297
  3419   0015E4  2E46               	decfsz	(??_move+1)^0,f,c
  3420   0015E6  D7FA               	bra	u4297
  3421   0015E8  0000               	nop	
  3422   0015EA                     
  3423                           ;dc_motor.c: 184:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  3424   0015EA  C060  F031         	movff	move@mL,returnHome@mL
  3425   0015EE  C061  F032         	movff	move@mL+1,returnHome@mL+1
  3426   0015F2  C062  F033         	movff	move@mR,returnHome@mR
  3427   0015F6  C063  F034         	movff	move@mR+1,returnHome@mR+1
  3428   0015FA  C065  F035         	movff	move@moveSequence,returnHome@moveSequence
  3429   0015FE  C066  F036         	movff	move@moveSequence+1,returnHome@moveSequence+1
  3430   001602  C067  F037         	movff	move@straightTime,returnHome@straightTime
  3431   001606  C068  F038         	movff	move@straightTime+1,returnHome@straightTime+1
  3432   00160A  C069  F039         	movff	move@curMove,returnHome@curMove
  3433   00160E  C06A  F03A         	movff	move@straightSpeed,returnHome@straightSpeed
  3434   001612  C06B  F03B         	movff	move@reverseDuration,returnHome@reverseDuration
  3435   001616  C06C  F03C         	movff	move@straightRamp,returnHome@straightRamp
  3436   00161A  C06D  F03D         	movff	move@turnSpeed,returnHome@turnSpeed
  3437   00161E  C06E  F03E         	movff	move@turnDuration,returnHome@turnDuration
  3438   001622  C06F  F03F         	movff	move@turnRamp,returnHome@turnRamp
  3439   001626  EC16  F00B         	call	_returnHome	;wreg free
  3440   00162A                     l578:
  3441   00162A  0012               	return		;funcret
  3442   00162C                     __end_of_move:
  3443                           	callstack 0
  3444                           
  3445 ;; *************** function _reverseShort *****************
  3446 ;; Defined at:
  3447 ;;		line 563 in file "dc_motor.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  3450 ;;		 -> main@motorL(10), 
  3451 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  3452 ;;		 -> main@motorR(10), 
  3453 ;;  straightSpee    1   38[COMRAM] unsigned char 
  3454 ;;  straightRamp    1   39[COMRAM] unsigned char 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  cur_power       2   46[COMRAM] int 
  3457 ;;  i               2   44[COMRAM] int 
  3458 ;;  reverseDurat    1   43[COMRAM] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3468 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3469 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3470 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3471 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3472 ;;Total ram usage:       14 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 7
  3475 ;; This function calls:
  3476 ;;		_setMotorPWM
  3477 ;; This function is called by:
  3478 ;;		_move
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text3
  3483   0035EA                     __ptext3:
  3484                           	callstack 0
  3485   0035EA                     _reverseShort:
  3486                           	callstack 22
  3487   0035EA                     
  3488                           ;dc_motor.c: 563: void reverseShort(DC_motor *mL, DC_motor *mR, char straightSpeed, unsi
      +                          gned char straightRamp);dc_motor.c: 564: {;dc_motor.c: 565:     unsigned char reverseDur
      +                          ation = 20;
  3489   0035EA  0E14               	movlw	20
  3490   0035EC  6E2C               	movwf	reverseShort@reverseDuration^0,c
  3491   0035EE                     
  3492                           ;dc_motor.c: 567:     mL->direction = 0;
  3493   0035EE  EE20 F001          	lfsr	2,1
  3494   0035F2  5023               	movf	reverseShort@mL^0,w,c
  3495   0035F4  26D9               	addwf	fsr2l,f,c
  3496   0035F6  5024               	movf	(reverseShort@mL+1)^0,w,c
  3497   0035F8  22DA               	addwfc	fsr2h,f,c
  3498   0035FA  6ADF               	clrf	indf2,c
  3499   0035FC                     
  3500                           ;dc_motor.c: 568:     mR->direction = 0;
  3501   0035FC  EE20 F001          	lfsr	2,1
  3502   003600  5025               	movf	reverseShort@mR^0,w,c
  3503   003602  26D9               	addwf	fsr2l,f,c
  3504   003604  5026               	movf	(reverseShort@mR+1)^0,w,c
  3505   003606  22DA               	addwfc	fsr2h,f,c
  3506   003608  6ADF               	clrf	indf2,c
  3507                           
  3508                           ;dc_motor.c: 569:     int i;;dc_motor.c: 570:     int cur_power;;dc_motor.c: 571:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3509   00360A  0E00               	movlw	0
  3510   00360C  6E30               	movwf	(reverseShort@cur_power+1)^0,c
  3511   00360E  0E01               	movlw	1
  3512   003610  6E2F               	movwf	reverseShort@cur_power^0,c
  3513   003612  EF55  F01B         	goto	l3512
  3514   003616                     l3498:
  3515                           
  3516                           ;dc_motor.c: 572:         mL->power = cur_power+mL->compensation;
  3517   003616  EE20 F009          	lfsr	2,9
  3518   00361A  5023               	movf	reverseShort@mL^0,w,c
  3519   00361C  26D9               	addwf	fsr2l,f,c
  3520   00361E  5024               	movf	(reverseShort@mL+1)^0,w,c
  3521   003620  22DA               	addwfc	fsr2h,f,c
  3522   003622  50DF               	movf	indf2,w,c
  3523   003624  242F               	addwf	reverseShort@cur_power^0,w,c
  3524   003626  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3525   00362A  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3526   00362E  6EDF               	movwf	indf2,c
  3527                           
  3528                           ;dc_motor.c: 573:         mR->power = cur_power+mR->compensation;
  3529   003630  EE20 F009          	lfsr	2,9
  3530   003634  5025               	movf	reverseShort@mR^0,w,c
  3531   003636  26D9               	addwf	fsr2l,f,c
  3532   003638  5026               	movf	(reverseShort@mR+1)^0,w,c
  3533   00363A  22DA               	addwfc	fsr2h,f,c
  3534   00363C  50DF               	movf	indf2,w,c
  3535   00363E  242F               	addwf	reverseShort@cur_power^0,w,c
  3536   003640  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3537   003644  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3538   003648  6EDF               	movwf	indf2,c
  3539   00364A                     
  3540                           ;dc_motor.c: 574:         setMotorPWM(mL);
  3541   00364A  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  3542   00364E  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  3543   003652  ECB4  F01F         	call	_setMotorPWM	;wreg free
  3544   003656                     
  3545                           ;dc_motor.c: 575:         setMotorPWM(mR);
  3546   003656  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  3547   00365A  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  3548   00365E  ECB4  F01F         	call	_setMotorPWM	;wreg free
  3549   003662                     
  3550                           ;dc_motor.c: 576:         for (i=0;i<straightRamp;i++) {
  3551   003662  0E00               	movlw	0
  3552   003664  6E2E               	movwf	(reverseShort@i+1)^0,c
  3553   003666  0E00               	movlw	0
  3554   003668  6E2D               	movwf	reverseShort@i^0,c
  3555   00366A  EF41  F01B         	goto	l732
  3556   00366E                     l3506:
  3557                           
  3558                           ;dc_motor.c: 577:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3559   00366E  0E68               	movlw	104
  3560   003670  6E29               	movwf	??_reverseShort^0,c
  3561   003672  0EE4               	movlw	228
  3562   003674                     u4307:
  3563   003674  2EE8               	decfsz	wreg,f,c
  3564   003676  D7FE               	bra	u4307
  3565   003678  2E29               	decfsz	??_reverseShort^0,f,c
  3566   00367A  D7FC               	bra	u4307
  3567   00367C  D000               	nop2	
  3568   00367E                     
  3569                           ;dc_motor.c: 578:         }
  3570   00367E  4A2D               	infsnz	reverseShort@i^0,f,c
  3571   003680  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3572   003682                     l732:
  3573   003682  5028               	movf	reverseShort@straightRamp^0,w,c
  3574   003684  6E29               	movwf	??_reverseShort^0,c
  3575   003686  6A2A               	clrf	(??_reverseShort+1)^0,c
  3576   003688  5029               	movf	??_reverseShort^0,w,c
  3577   00368A  5C2D               	subwf	reverseShort@i^0,w,c
  3578   00368C  502E               	movf	(reverseShort@i+1)^0,w,c
  3579   00368E  0A80               	xorlw	128
  3580   003690  6E2B               	movwf	(??_reverseShort+2)^0,c
  3581   003692  502A               	movf	(??_reverseShort+1)^0,w,c
  3582   003694  0A80               	xorlw	128
  3583   003696  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3584   003698  A0D8               	btfss	status,0,c
  3585   00369A  EF51  F01B         	goto	u2381
  3586   00369E  EF53  F01B         	goto	u2380
  3587   0036A2                     u2381:
  3588   0036A2  EF37  F01B         	goto	l3506
  3589   0036A6                     u2380:
  3590   0036A6                     
  3591                           ;dc_motor.c: 579:     }
  3592   0036A6  4A2F               	infsnz	reverseShort@cur_power^0,f,c
  3593   0036A8  2A30               	incf	(reverseShort@cur_power+1)^0,f,c
  3594   0036AA                     l3512:
  3595   0036AA  5027               	movf	reverseShort@straightSpeed^0,w,c
  3596   0036AC  6E29               	movwf	??_reverseShort^0,c
  3597   0036AE  6A2A               	clrf	(??_reverseShort+1)^0,c
  3598   0036B0  502F               	movf	reverseShort@cur_power^0,w,c
  3599   0036B2  5C29               	subwf	??_reverseShort^0,w,c
  3600   0036B4  502A               	movf	(??_reverseShort+1)^0,w,c
  3601   0036B6  0A80               	xorlw	128
  3602   0036B8  6E2B               	movwf	(??_reverseShort+2)^0,c
  3603   0036BA  5030               	movf	(reverseShort@cur_power+1)^0,w,c
  3604   0036BC  0A80               	xorlw	128
  3605   0036BE  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3606   0036C0  B0D8               	btfsc	status,0,c
  3607   0036C2  EF65  F01B         	goto	u2391
  3608   0036C6  EF67  F01B         	goto	u2390
  3609   0036CA                     u2391:
  3610   0036CA  EF0B  F01B         	goto	l3498
  3611   0036CE                     u2390:
  3612   0036CE                     
  3613                           ;dc_motor.c: 581:     for (i=0;i<reverseDuration;i++) {
  3614   0036CE  0E00               	movlw	0
  3615   0036D0  6E2E               	movwf	(reverseShort@i+1)^0,c
  3616   0036D2  0E00               	movlw	0
  3617   0036D4  6E2D               	movwf	reverseShort@i^0,c
  3618   0036D6  EF77  F01B         	goto	l736
  3619   0036DA                     l3516:
  3620                           
  3621                           ;dc_motor.c: 582:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3622   0036DA  0E68               	movlw	104
  3623   0036DC  6E29               	movwf	??_reverseShort^0,c
  3624   0036DE  0EE4               	movlw	228
  3625   0036E0                     u4317:
  3626   0036E0  2EE8               	decfsz	wreg,f,c
  3627   0036E2  D7FE               	bra	u4317
  3628   0036E4  2E29               	decfsz	??_reverseShort^0,f,c
  3629   0036E6  D7FC               	bra	u4317
  3630   0036E8  D000               	nop2	
  3631   0036EA                     
  3632                           ;dc_motor.c: 583:         }
  3633   0036EA  4A2D               	infsnz	reverseShort@i^0,f,c
  3634   0036EC  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3635   0036EE                     l736:
  3636   0036EE  502C               	movf	reverseShort@reverseDuration^0,w,c
  3637   0036F0  6E29               	movwf	??_reverseShort^0,c
  3638   0036F2  6A2A               	clrf	(??_reverseShort+1)^0,c
  3639   0036F4  5029               	movf	??_reverseShort^0,w,c
  3640   0036F6  5C2D               	subwf	reverseShort@i^0,w,c
  3641   0036F8  502E               	movf	(reverseShort@i+1)^0,w,c
  3642   0036FA  0A80               	xorlw	128
  3643   0036FC  6E2B               	movwf	(??_reverseShort+2)^0,c
  3644   0036FE  502A               	movf	(??_reverseShort+1)^0,w,c
  3645   003700  0A80               	xorlw	128
  3646   003702  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3647   003704  A0D8               	btfss	status,0,c
  3648   003706  EF87  F01B         	goto	u2401
  3649   00370A  EF89  F01B         	goto	u2400
  3650   00370E                     u2401:
  3651   00370E  EF6D  F01B         	goto	l3516
  3652   003712                     u2400:
  3653   003712                     
  3654                           ;dc_motor.c: 585:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3655   003712  C027  F02F         	movff	reverseShort@straightSpeed,reverseShort@cur_power
  3656   003716  6A30               	clrf	(reverseShort@cur_power+1)^0,c
  3657   003718                     l3520:
  3658   003718  BE30               	btfsc	(reverseShort@cur_power+1)^0,7,c
  3659   00371A  EF93  F01B         	goto	u2410
  3660   00371E  EF91  F01B         	goto	u2411
  3661   003722                     u2411:
  3662   003722  EF95  F01B         	goto	l3524
  3663   003726                     u2410:
  3664   003726  EFE2  F01B         	goto	l3540
  3665   00372A                     l3524:
  3666                           
  3667                           ;dc_motor.c: 586:         mL->power = cur_power+mL->compensation;
  3668   00372A  EE20 F009          	lfsr	2,9
  3669   00372E  5023               	movf	reverseShort@mL^0,w,c
  3670   003730  26D9               	addwf	fsr2l,f,c
  3671   003732  5024               	movf	(reverseShort@mL+1)^0,w,c
  3672   003734  22DA               	addwfc	fsr2h,f,c
  3673   003736  50DF               	movf	indf2,w,c
  3674   003738  242F               	addwf	reverseShort@cur_power^0,w,c
  3675   00373A  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3676   00373E  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3677   003742  6EDF               	movwf	indf2,c
  3678                           
  3679                           ;dc_motor.c: 587:         mR->power = cur_power+mR->compensation;
  3680   003744  EE20 F009          	lfsr	2,9
  3681   003748  5025               	movf	reverseShort@mR^0,w,c
  3682   00374A  26D9               	addwf	fsr2l,f,c
  3683   00374C  5026               	movf	(reverseShort@mR+1)^0,w,c
  3684   00374E  22DA               	addwfc	fsr2h,f,c
  3685   003750  50DF               	movf	indf2,w,c
  3686   003752  242F               	addwf	reverseShort@cur_power^0,w,c
  3687   003754  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3688   003758  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3689   00375C  6EDF               	movwf	indf2,c
  3690   00375E                     
  3691                           ;dc_motor.c: 588:         setMotorPWM(mL);
  3692   00375E  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  3693   003762  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  3694   003766  ECB4  F01F         	call	_setMotorPWM	;wreg free
  3695   00376A                     
  3696                           ;dc_motor.c: 589:         setMotorPWM(mR);
  3697   00376A  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  3698   00376E  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  3699   003772  ECB4  F01F         	call	_setMotorPWM	;wreg free
  3700   003776                     
  3701                           ;dc_motor.c: 590:         for (i=0;i<straightRamp;i++) {
  3702   003776  0E00               	movlw	0
  3703   003778  6E2E               	movwf	(reverseShort@i+1)^0,c
  3704   00377A  0E00               	movlw	0
  3705   00377C  6E2D               	movwf	reverseShort@i^0,c
  3706   00377E  EFCB  F01B         	goto	l741
  3707   003782                     l3532:
  3708                           
  3709                           ;dc_motor.c: 591:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3710   003782  0E68               	movlw	104
  3711   003784  6E29               	movwf	??_reverseShort^0,c
  3712   003786  0EE4               	movlw	228
  3713   003788                     u4327:
  3714   003788  2EE8               	decfsz	wreg,f,c
  3715   00378A  D7FE               	bra	u4327
  3716   00378C  2E29               	decfsz	??_reverseShort^0,f,c
  3717   00378E  D7FC               	bra	u4327
  3718   003790  D000               	nop2	
  3719   003792                     
  3720                           ;dc_motor.c: 592:         }
  3721   003792  4A2D               	infsnz	reverseShort@i^0,f,c
  3722   003794  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3723   003796                     l741:
  3724   003796  5028               	movf	reverseShort@straightRamp^0,w,c
  3725   003798  6E29               	movwf	??_reverseShort^0,c
  3726   00379A  6A2A               	clrf	(??_reverseShort+1)^0,c
  3727   00379C  5029               	movf	??_reverseShort^0,w,c
  3728   00379E  5C2D               	subwf	reverseShort@i^0,w,c
  3729   0037A0  502E               	movf	(reverseShort@i+1)^0,w,c
  3730   0037A2  0A80               	xorlw	128
  3731   0037A4  6E2B               	movwf	(??_reverseShort+2)^0,c
  3732   0037A6  502A               	movf	(??_reverseShort+1)^0,w,c
  3733   0037A8  0A80               	xorlw	128
  3734   0037AA  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3735   0037AC  A0D8               	btfss	status,0,c
  3736   0037AE  EFDB  F01B         	goto	u2421
  3737   0037B2  EFDD  F01B         	goto	u2420
  3738   0037B6                     u2421:
  3739   0037B6  EFC1  F01B         	goto	l3532
  3740   0037BA                     u2420:
  3741   0037BA                     
  3742                           ;dc_motor.c: 593:     }
  3743   0037BA  062F               	decf	reverseShort@cur_power^0,f,c
  3744   0037BC  A0D8               	btfss	status,0,c
  3745   0037BE  0630               	decf	(reverseShort@cur_power+1)^0,f,c
  3746   0037C0  EF8C  F01B         	goto	l3520
  3747   0037C4                     l3540:
  3748                           
  3749                           ;dc_motor.c: 594:     mL->power = 0;
  3750   0037C4  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3751   0037C8  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3752   0037CC  6ADF               	clrf	indf2,c
  3753                           
  3754                           ;dc_motor.c: 595:     mR->power = 0;
  3755   0037CE  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3756   0037D2  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3757   0037D6  6ADF               	clrf	indf2,c
  3758   0037D8  0012               	return		;funcret
  3759   0037DA                     __end_of_reverseShort:
  3760                           	callstack 0
  3761                           
  3762 ;; *************** function _returnHome *****************
  3763 ;; Defined at:
  3764 ;;		line 189 in file "dc_motor.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  3767 ;;		 -> main@motorL(10), 
  3768 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  3769 ;;		 -> main@motorR(10), 
  3770 ;;  moveSequence    2   52[COMRAM] PTR unsigned char 
  3771 ;;		 -> main@moveSequence(40), 
  3772 ;;  straightTime    2   54[COMRAM] PTR unsigned int 
  3773 ;;		 -> main@straightTime(82), 
  3774 ;;  curMove         1   56[COMRAM] unsigned char 
  3775 ;;  straightSpee    1   57[COMRAM] unsigned char 
  3776 ;;  reverseDurat    1   58[COMRAM] unsigned char 
  3777 ;;  straightRamp    1   59[COMRAM] unsigned char 
  3778 ;;  turnSpeed       1   60[COMRAM] unsigned char 
  3779 ;;  turnDuration    1   61[COMRAM] unsigned char 
  3780 ;;  turnRamp        1   62[COMRAM] unsigned char 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  i               1   67[COMRAM] unsigned char 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3792 ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3794 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3795 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;Total ram usage:       20 bytes
  3797 ;; Hardware stack levels used: 1
  3798 ;; Hardware stack levels required when called: 8
  3799 ;; This function calls:
  3800 ;;		_fullSpeedAhead
  3801 ;;		_get16bitTMR0val
  3802 ;;		_resetTimer
  3803 ;;		_reverseOneSquare
  3804 ;;		_stop
  3805 ;;		_turnLeft
  3806 ;;		_turnRight
  3807 ;; This function is called by:
  3808 ;;		_move
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text4
  3813   00162C                     __ptext4:
  3814                           	callstack 0
  3815   00162C                     _returnHome:
  3816                           	callstack 21
  3817   00162C                     
  3818                           ;dc_motor.c: 189: void returnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSequenc
      +                          e, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reverseDu
      +                          ration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsigned
      +                           char turnRamp);dc_motor.c: 190: {;dc_motor.c: 191:     turnLeft(mL, mR, turnSpeed, turn
      +                          Duration, turnRamp);
  3819   00162C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  3820   001630  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3821   001634  C033  F025         	movff	returnHome@mR,turnLeft@mR
  3822   001638  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3823   00163C  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3824   001640  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3825   001644  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3826   001648  ECC7  F01E         	call	_turnLeft	;wreg free
  3827   00164C                     
  3828                           ;dc_motor.c: 192:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3829   00164C  0E05               	movlw	5
  3830   00164E  6E41               	movwf	(??_returnHome+1)^0,c
  3831   001650  0E0F               	movlw	15
  3832   001652  6E40               	movwf	??_returnHome^0,c
  3833   001654  0EF1               	movlw	241
  3834   001656                     u4337:
  3835   001656  2EE8               	decfsz	wreg,f,c
  3836   001658  D7FE               	bra	u4337
  3837   00165A  2E40               	decfsz	??_returnHome^0,f,c
  3838   00165C  D7FC               	bra	u4337
  3839   00165E  2E41               	decfsz	(??_returnHome+1)^0,f,c
  3840   001660  D7FA               	bra	u4337
  3841   001662  0000               	nop	
  3842   001664                     
  3843                           ;dc_motor.c: 193:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3844   001664  C031  F023         	movff	returnHome@mL,turnLeft@mL
  3845   001668  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3846   00166C  C033  F025         	movff	returnHome@mR,turnLeft@mR
  3847   001670  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3848   001674  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3849   001678  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3850   00167C  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3851   001680  ECC7  F01E         	call	_turnLeft	;wreg free
  3852                           
  3853                           ;dc_motor.c: 194:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3854   001684  0E05               	movlw	5
  3855   001686  6E41               	movwf	(??_returnHome+1)^0,c
  3856   001688  0E0F               	movlw	15
  3857   00168A  6E40               	movwf	??_returnHome^0,c
  3858   00168C  0EF1               	movlw	241
  3859   00168E                     u4347:
  3860   00168E  2EE8               	decfsz	wreg,f,c
  3861   001690  D7FE               	bra	u4347
  3862   001692  2E40               	decfsz	??_returnHome^0,f,c
  3863   001694  D7FC               	bra	u4347
  3864   001696  2E41               	decfsz	(??_returnHome+1)^0,f,c
  3865   001698  D7FA               	bra	u4347
  3866   00169A  0000               	nop	
  3867   00169C                     
  3868                           ;dc_motor.c: 195:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3869   00169C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  3870   0016A0  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3871   0016A4  C033  F025         	movff	returnHome@mR,turnLeft@mR
  3872   0016A8  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3873   0016AC  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3874   0016B0  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3875   0016B4  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3876   0016B8  ECC7  F01E         	call	_turnLeft	;wreg free
  3877   0016BC                     
  3878                           ;dc_motor.c: 196:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3879   0016BC  0E05               	movlw	5
  3880   0016BE  6E41               	movwf	(??_returnHome+1)^0,c
  3881   0016C0  0E0F               	movlw	15
  3882   0016C2  6E40               	movwf	??_returnHome^0,c
  3883   0016C4  0EF1               	movlw	241
  3884   0016C6                     u4357:
  3885   0016C6  2EE8               	decfsz	wreg,f,c
  3886   0016C8  D7FE               	bra	u4357
  3887   0016CA  2E40               	decfsz	??_returnHome^0,f,c
  3888   0016CC  D7FC               	bra	u4357
  3889   0016CE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  3890   0016D0  D7FA               	bra	u4357
  3891   0016D2  0000               	nop	
  3892                           
  3893                           ;dc_motor.c: 197:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3894   0016D4  C031  F023         	movff	returnHome@mL,turnLeft@mL
  3895   0016D8  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3896   0016DC  C033  F025         	movff	returnHome@mR,turnLeft@mR
  3897   0016E0  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3898   0016E4  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3899   0016E8  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3900   0016EC  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3901   0016F0  ECC7  F01E         	call	_turnLeft	;wreg free
  3902   0016F4                     
  3903                           ;dc_motor.c: 198:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3904   0016F4  0E05               	movlw	5
  3905   0016F6  6E41               	movwf	(??_returnHome+1)^0,c
  3906   0016F8  0E0F               	movlw	15
  3907   0016FA  6E40               	movwf	??_returnHome^0,c
  3908   0016FC  0EF1               	movlw	241
  3909   0016FE                     u4367:
  3910   0016FE  2EE8               	decfsz	wreg,f,c
  3911   001700  D7FE               	bra	u4367
  3912   001702  2E40               	decfsz	??_returnHome^0,f,c
  3913   001704  D7FC               	bra	u4367
  3914   001706  2E41               	decfsz	(??_returnHome+1)^0,f,c
  3915   001708  D7FA               	bra	u4367
  3916   00170A  0000               	nop	
  3917   00170C                     
  3918                           ;dc_motor.c: 199:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3919   00170C  C031  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  3920   001710  C032  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  3921   001714  C033  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  3922   001718  C034  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  3923   00171C  C03A  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  3924   001720  C03C  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  3925   001724  EC74  F021         	call	_fullSpeedAhead	;wreg free
  3926   001728                     
  3927                           ;dc_motor.c: 200:     resetTimer();
  3928   001728  EC22  F026         	call	_resetTimer	;wreg free
  3929   00172C                     l3558:
  3930   00172C  5039               	movf	returnHome@curMove^0,w,c
  3931   00172E  0D02               	mullw	2
  3932   001730  CFF3 F040          	movff	prodl,??_returnHome
  3933   001734  CFF4 F041          	movff	prodh,??_returnHome+1
  3934   001738  5040               	movf	??_returnHome^0,w,c
  3935   00173A  2437               	addwf	returnHome@straightTime^0,w,c
  3936   00173C  6ED9               	movwf	fsr2l,c
  3937   00173E  5041               	movf	(??_returnHome+1)^0,w,c
  3938   001740  2038               	addwfc	(returnHome@straightTime+1)^0,w,c
  3939   001742  6EDA               	movwf	fsr2h,c
  3940   001744  EC34  F025         	call	_get16bitTMR0val	;wreg free
  3941   001748  50DE               	movf	postinc2,w,c
  3942   00174A  5C10               	subwf	?_get16bitTMR0val^0,w,c
  3943   00174C  50DE               	movf	postinc2,w,c
  3944   00174E  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  3945   001750  A0D8               	btfss	status,0,c
  3946   001752  EFAD  F00B         	goto	u2431
  3947   001756  EFAF  F00B         	goto	u2430
  3948   00175A                     u2431:
  3949   00175A  EF96  F00B         	goto	l3558
  3950   00175E                     u2430:
  3951   00175E                     
  3952                           ;dc_motor.c: 202:     stop(mL, mR, straightRamp);
  3953   00175E  C031  F023         	movff	returnHome@mL,stop@mL
  3954   001762  C032  F024         	movff	returnHome@mL+1,stop@mL+1
  3955   001766  C033  F025         	movff	returnHome@mR,stop@mR
  3956   00176A  C034  F026         	movff	returnHome@mR+1,stop@mR+1
  3957   00176E  C03C  F027         	movff	returnHome@straightRamp,stop@straightRamp
  3958   001772  ECF0  F020         	call	_stop	;wreg free
  3959   001776                     
  3960                           ;dc_motor.c: 204:     char i=curMove;
  3961   001776  C039  F044         	movff	returnHome@curMove,returnHome@i
  3962                           
  3963                           ;dc_motor.c: 205:     while (i>0) {
  3964   00177A  EF6B  F00E         	goto	l3650
  3965   00177E                     l3564:
  3966                           
  3967                           ;dc_motor.c: 206:         i--;
  3968   00177E  0644               	decf	returnHome@i^0,f,c
  3969   001780                     
  3970                           ;dc_motor.c: 208:         if (moveSequence[i] == 1) {
  3971   001780  5044               	movf	returnHome@i^0,w,c
  3972   001782  2435               	addwf	returnHome@moveSequence^0,w,c
  3973   001784  6ED9               	movwf	fsr2l,c
  3974   001786  0E00               	movlw	0
  3975   001788  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  3976   00178A  6EDA               	movwf	fsr2h,c
  3977   00178C  04DE               	decf	postinc2,w,c
  3978   00178E  A4D8               	btfss	status,2,c
  3979   001790  EFCC  F00B         	goto	u2441
  3980   001794  EFCE  F00B         	goto	u2440
  3981   001798                     u2441:
  3982   001798  EF08  F00C         	goto	l3574
  3983   00179C                     u2440:
  3984   00179C                     
  3985                           ;dc_motor.c: 209:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3986   00179C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  3987   0017A0  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3988   0017A4  C033  F025         	movff	returnHome@mR,turnLeft@mR
  3989   0017A8  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3990   0017AC  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3991   0017B0  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3992   0017B4  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3993   0017B8  ECC7  F01E         	call	_turnLeft	;wreg free
  3994   0017BC                     
  3995                           ;dc_motor.c: 210:             _delay((unsigned long)((50)*(64000000/4000.0)));
  3996   0017BC  0E05               	movlw	5
  3997   0017BE  6E41               	movwf	(??_returnHome+1)^0,c
  3998   0017C0  0E0F               	movlw	15
  3999   0017C2  6E40               	movwf	??_returnHome^0,c
  4000   0017C4  0EF1               	movlw	241
  4001   0017C6                     u4377:
  4002   0017C6  2EE8               	decfsz	wreg,f,c
  4003   0017C8  D7FE               	bra	u4377
  4004   0017CA  2E40               	decfsz	??_returnHome^0,f,c
  4005   0017CC  D7FC               	bra	u4377
  4006   0017CE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4007   0017D0  D7FA               	bra	u4377
  4008   0017D2  0000               	nop	
  4009   0017D4                     
  4010                           ;dc_motor.c: 211:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4011   0017D4  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4012   0017D8  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4013   0017DC  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4014   0017E0  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4015   0017E4  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4016   0017E8  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4017   0017EC  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4018   0017F0  ECC7  F01E         	call	_turnLeft	;wreg free
  4019                           
  4020                           ;dc_motor.c: 212:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4021   0017F4  0E05               	movlw	5
  4022   0017F6  6E41               	movwf	(??_returnHome+1)^0,c
  4023   0017F8  0E0F               	movlw	15
  4024   0017FA  6E40               	movwf	??_returnHome^0,c
  4025   0017FC  0EF1               	movlw	241
  4026   0017FE                     u4387:
  4027   0017FE  2EE8               	decfsz	wreg,f,c
  4028   001800  D7FE               	bra	u4387
  4029   001802  2E40               	decfsz	??_returnHome^0,f,c
  4030   001804  D7FC               	bra	u4387
  4031   001806  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4032   001808  D7FA               	bra	u4387
  4033   00180A  0000               	nop	
  4034                           
  4035                           ;dc_motor.c: 213:         }
  4036   00180C  EF36  F00E         	goto	l587
  4037   001810                     l3574:
  4038   001810  5044               	movf	returnHome@i^0,w,c
  4039   001812  2435               	addwf	returnHome@moveSequence^0,w,c
  4040   001814  6ED9               	movwf	fsr2l,c
  4041   001816  0E00               	movlw	0
  4042   001818  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4043   00181A  6EDA               	movwf	fsr2h,c
  4044   00181C  0E02               	movlw	2
  4045   00181E  18DE               	xorwf	postinc2,w,c
  4046   001820  A4D8               	btfss	status,2,c
  4047   001822  EF15  F00C         	goto	u2451
  4048   001826  EF17  F00C         	goto	u2450
  4049   00182A                     u2451:
  4050   00182A  EF51  F00C         	goto	l3582
  4051   00182E                     u2450:
  4052   00182E                     
  4053                           ;dc_motor.c: 216:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4054   00182E  C031  F023         	movff	returnHome@mL,turnRight@mL
  4055   001832  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4056   001836  C033  F025         	movff	returnHome@mR,turnRight@mR
  4057   00183A  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4058   00183E  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4059   001842  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4060   001846  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4061   00184A  ECDA  F01D         	call	_turnRight	;wreg free
  4062   00184E                     
  4063                           ;dc_motor.c: 217:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4064   00184E  0E05               	movlw	5
  4065   001850  6E41               	movwf	(??_returnHome+1)^0,c
  4066   001852  0E0F               	movlw	15
  4067   001854  6E40               	movwf	??_returnHome^0,c
  4068   001856  0EF1               	movlw	241
  4069   001858                     u4397:
  4070   001858  2EE8               	decfsz	wreg,f,c
  4071   00185A  D7FE               	bra	u4397
  4072   00185C  2E40               	decfsz	??_returnHome^0,f,c
  4073   00185E  D7FC               	bra	u4397
  4074   001860  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4075   001862  D7FA               	bra	u4397
  4076   001864  0000               	nop	
  4077   001866                     
  4078                           ;dc_motor.c: 218:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4079   001866  C031  F023         	movff	returnHome@mL,turnRight@mL
  4080   00186A  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4081   00186E  C033  F025         	movff	returnHome@mR,turnRight@mR
  4082   001872  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4083   001876  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4084   00187A  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4085   00187E  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4086   001882  ECDA  F01D         	call	_turnRight	;wreg free
  4087                           
  4088                           ;dc_motor.c: 219:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4089   001886  0E05               	movlw	5
  4090   001888  6E41               	movwf	(??_returnHome+1)^0,c
  4091   00188A  0E0F               	movlw	15
  4092   00188C  6E40               	movwf	??_returnHome^0,c
  4093   00188E  0EF1               	movlw	241
  4094   001890                     u4407:
  4095   001890  2EE8               	decfsz	wreg,f,c
  4096   001892  D7FE               	bra	u4407
  4097   001894  2E40               	decfsz	??_returnHome^0,f,c
  4098   001896  D7FC               	bra	u4407
  4099   001898  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4100   00189A  D7FA               	bra	u4407
  4101   00189C  0000               	nop	
  4102                           
  4103                           ;dc_motor.c: 220:         }
  4104   00189E  EF36  F00E         	goto	l587
  4105   0018A2                     l3582:
  4106   0018A2  5044               	movf	returnHome@i^0,w,c
  4107   0018A4  2435               	addwf	returnHome@moveSequence^0,w,c
  4108   0018A6  6ED9               	movwf	fsr2l,c
  4109   0018A8  0E00               	movlw	0
  4110   0018AA  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4111   0018AC  6EDA               	movwf	fsr2h,c
  4112   0018AE  0E03               	movlw	3
  4113   0018B0  18DE               	xorwf	postinc2,w,c
  4114   0018B2  A4D8               	btfss	status,2,c
  4115   0018B4  EF5E  F00C         	goto	u2461
  4116   0018B8  EF60  F00C         	goto	u2460
  4117   0018BC                     u2461:
  4118   0018BC  EFD2  F00C         	goto	l3596
  4119   0018C0                     u2460:
  4120   0018C0                     
  4121                           ;dc_motor.c: 223:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4122   0018C0  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4123   0018C4  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4124   0018C8  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4125   0018CC  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4126   0018D0  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4127   0018D4  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4128   0018D8  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4129   0018DC  ECC7  F01E         	call	_turnLeft	;wreg free
  4130   0018E0                     
  4131                           ;dc_motor.c: 224:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4132   0018E0  0E05               	movlw	5
  4133   0018E2  6E41               	movwf	(??_returnHome+1)^0,c
  4134   0018E4  0E0F               	movlw	15
  4135   0018E6  6E40               	movwf	??_returnHome^0,c
  4136   0018E8  0EF1               	movlw	241
  4137   0018EA                     u4417:
  4138   0018EA  2EE8               	decfsz	wreg,f,c
  4139   0018EC  D7FE               	bra	u4417
  4140   0018EE  2E40               	decfsz	??_returnHome^0,f,c
  4141   0018F0  D7FC               	bra	u4417
  4142   0018F2  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4143   0018F4  D7FA               	bra	u4417
  4144   0018F6  0000               	nop	
  4145   0018F8                     
  4146                           ;dc_motor.c: 225:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4147   0018F8  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4148   0018FC  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4149   001900  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4150   001904  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4151   001908  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4152   00190C  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4153   001910  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4154   001914  ECC7  F01E         	call	_turnLeft	;wreg free
  4155                           
  4156                           ;dc_motor.c: 226:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4157   001918  0E05               	movlw	5
  4158   00191A  6E41               	movwf	(??_returnHome+1)^0,c
  4159   00191C  0E0F               	movlw	15
  4160   00191E  6E40               	movwf	??_returnHome^0,c
  4161   001920  0EF1               	movlw	241
  4162   001922                     u4427:
  4163   001922  2EE8               	decfsz	wreg,f,c
  4164   001924  D7FE               	bra	u4427
  4165   001926  2E40               	decfsz	??_returnHome^0,f,c
  4166   001928  D7FC               	bra	u4427
  4167   00192A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4168   00192C  D7FA               	bra	u4427
  4169   00192E  0000               	nop	
  4170   001930                     
  4171                           ;dc_motor.c: 227:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4172   001930  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4173   001934  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4174   001938  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4175   00193C  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4176   001940  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4177   001944  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4178   001948  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4179   00194C  ECC7  F01E         	call	_turnLeft	;wreg free
  4180   001950                     
  4181                           ;dc_motor.c: 228:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4182   001950  0E05               	movlw	5
  4183   001952  6E41               	movwf	(??_returnHome+1)^0,c
  4184   001954  0E0F               	movlw	15
  4185   001956  6E40               	movwf	??_returnHome^0,c
  4186   001958  0EF1               	movlw	241
  4187   00195A                     u4437:
  4188   00195A  2EE8               	decfsz	wreg,f,c
  4189   00195C  D7FE               	bra	u4437
  4190   00195E  2E40               	decfsz	??_returnHome^0,f,c
  4191   001960  D7FC               	bra	u4437
  4192   001962  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4193   001964  D7FA               	bra	u4437
  4194   001966  0000               	nop	
  4195                           
  4196                           ;dc_motor.c: 229:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4197   001968  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4198   00196C  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4199   001970  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4200   001974  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4201   001978  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4202   00197C  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4203   001980  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4204   001984  ECC7  F01E         	call	_turnLeft	;wreg free
  4205   001988                     l3594:
  4206                           
  4207                           ;dc_motor.c: 230:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4208   001988  0E05               	movlw	5
  4209   00198A  6E41               	movwf	(??_returnHome+1)^0,c
  4210   00198C  0E0F               	movlw	15
  4211   00198E  6E40               	movwf	??_returnHome^0,c
  4212   001990  0EF1               	movlw	241
  4213   001992                     u4447:
  4214   001992  2EE8               	decfsz	wreg,f,c
  4215   001994  D7FE               	bra	u4447
  4216   001996  2E40               	decfsz	??_returnHome^0,f,c
  4217   001998  D7FC               	bra	u4447
  4218   00199A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4219   00199C  D7FA               	bra	u4447
  4220   00199E  0000               	nop	
  4221                           
  4222                           ;dc_motor.c: 231:         }
  4223   0019A0  EF36  F00E         	goto	l587
  4224   0019A4                     l3596:
  4225   0019A4  5044               	movf	returnHome@i^0,w,c
  4226   0019A6  2435               	addwf	returnHome@moveSequence^0,w,c
  4227   0019A8  6ED9               	movwf	fsr2l,c
  4228   0019AA  0E00               	movlw	0
  4229   0019AC  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4230   0019AE  6EDA               	movwf	fsr2h,c
  4231   0019B0  0E04               	movlw	4
  4232   0019B2  18DE               	xorwf	postinc2,w,c
  4233   0019B4  A4D8               	btfss	status,2,c
  4234   0019B6  EFDF  F00C         	goto	u2471
  4235   0019BA  EFE1  F00C         	goto	u2470
  4236   0019BE                     u2471:
  4237   0019BE  EF2B  F00D         	goto	l3608
  4238   0019C2                     u2470:
  4239   0019C2                     
  4240                           ;dc_motor.c: 234:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4241   0019C2  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4242   0019C6  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4243   0019CA  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4244   0019CE  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4245   0019D2  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4246   0019D6  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4247   0019DA  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4248   0019DE  ECC7  F01E         	call	_turnLeft	;wreg free
  4249   0019E2                     
  4250                           ;dc_motor.c: 235:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4251   0019E2  0E05               	movlw	5
  4252   0019E4  6E41               	movwf	(??_returnHome+1)^0,c
  4253   0019E6  0E0F               	movlw	15
  4254   0019E8  6E40               	movwf	??_returnHome^0,c
  4255   0019EA  0EF1               	movlw	241
  4256   0019EC                     u4457:
  4257   0019EC  2EE8               	decfsz	wreg,f,c
  4258   0019EE  D7FE               	bra	u4457
  4259   0019F0  2E40               	decfsz	??_returnHome^0,f,c
  4260   0019F2  D7FC               	bra	u4457
  4261   0019F4  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4262   0019F6  D7FA               	bra	u4457
  4263   0019F8  0000               	nop	
  4264   0019FA                     
  4265                           ;dc_motor.c: 236:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4266   0019FA  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4267   0019FE  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4268   001A02  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4269   001A06  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4270   001A0A  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4271   001A0E  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4272   001A12  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4273   001A16  ECC7  F01E         	call	_turnLeft	;wreg free
  4274                           
  4275                           ;dc_motor.c: 237:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4276   001A1A  0E05               	movlw	5
  4277   001A1C  6E41               	movwf	(??_returnHome+1)^0,c
  4278   001A1E  0E0F               	movlw	15
  4279   001A20  6E40               	movwf	??_returnHome^0,c
  4280   001A22  0EF1               	movlw	241
  4281   001A24                     u4467:
  4282   001A24  2EE8               	decfsz	wreg,f,c
  4283   001A26  D7FE               	bra	u4467
  4284   001A28  2E40               	decfsz	??_returnHome^0,f,c
  4285   001A2A  D7FC               	bra	u4467
  4286   001A2C  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4287   001A2E  D7FA               	bra	u4467
  4288   001A30  0000               	nop	
  4289   001A32                     
  4290                           ;dc_motor.c: 238:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  4291   001A32  C031  F023         	movff	returnHome@mL,reverseOneSquare@mL
  4292   001A36  C032  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  4293   001A3A  C033  F025         	movff	returnHome@mR,reverseOneSquare@mR
  4294   001A3E  C034  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  4295   001A42  C03A  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  4296   001A46  C03B  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  4297   001A4A  C03C  F029         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  4298   001A4E  ECE4  F01C         	call	_reverseOneSquare	;wreg free
  4299   001A52  EFC4  F00C         	goto	l3594
  4300   001A56                     l3608:
  4301   001A56  5044               	movf	returnHome@i^0,w,c
  4302   001A58  2435               	addwf	returnHome@moveSequence^0,w,c
  4303   001A5A  6ED9               	movwf	fsr2l,c
  4304   001A5C  0E00               	movlw	0
  4305   001A5E  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4306   001A60  6EDA               	movwf	fsr2h,c
  4307   001A62  0E05               	movlw	5
  4308   001A64  18DE               	xorwf	postinc2,w,c
  4309   001A66  A4D8               	btfss	status,2,c
  4310   001A68  EF38  F00D         	goto	u2481
  4311   001A6C  EF3A  F00D         	goto	u2480
  4312   001A70                     u2481:
  4313   001A70  EF84  F00D         	goto	l3620
  4314   001A74                     u2480:
  4315   001A74                     
  4316                           ;dc_motor.c: 243:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4317   001A74  C031  F023         	movff	returnHome@mL,turnRight@mL
  4318   001A78  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4319   001A7C  C033  F025         	movff	returnHome@mR,turnRight@mR
  4320   001A80  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4321   001A84  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4322   001A88  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4323   001A8C  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4324   001A90  ECDA  F01D         	call	_turnRight	;wreg free
  4325   001A94                     
  4326                           ;dc_motor.c: 244:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4327   001A94  0E05               	movlw	5
  4328   001A96  6E41               	movwf	(??_returnHome+1)^0,c
  4329   001A98  0E0F               	movlw	15
  4330   001A9A  6E40               	movwf	??_returnHome^0,c
  4331   001A9C  0EF1               	movlw	241
  4332   001A9E                     u4477:
  4333   001A9E  2EE8               	decfsz	wreg,f,c
  4334   001AA0  D7FE               	bra	u4477
  4335   001AA2  2E40               	decfsz	??_returnHome^0,f,c
  4336   001AA4  D7FC               	bra	u4477
  4337   001AA6  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4338   001AA8  D7FA               	bra	u4477
  4339   001AAA  0000               	nop	
  4340   001AAC                     
  4341                           ;dc_motor.c: 245:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4342   001AAC  C031  F023         	movff	returnHome@mL,turnRight@mL
  4343   001AB0  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4344   001AB4  C033  F025         	movff	returnHome@mR,turnRight@mR
  4345   001AB8  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4346   001ABC  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4347   001AC0  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4348   001AC4  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4349   001AC8  ECDA  F01D         	call	_turnRight	;wreg free
  4350                           
  4351                           ;dc_motor.c: 246:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4352   001ACC  0E05               	movlw	5
  4353   001ACE  6E41               	movwf	(??_returnHome+1)^0,c
  4354   001AD0  0E0F               	movlw	15
  4355   001AD2  6E40               	movwf	??_returnHome^0,c
  4356   001AD4  0EF1               	movlw	241
  4357   001AD6                     u4487:
  4358   001AD6  2EE8               	decfsz	wreg,f,c
  4359   001AD8  D7FE               	bra	u4487
  4360   001ADA  2E40               	decfsz	??_returnHome^0,f,c
  4361   001ADC  D7FC               	bra	u4487
  4362   001ADE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4363   001AE0  D7FA               	bra	u4487
  4364   001AE2  0000               	nop	
  4365   001AE4                     
  4366                           ;dc_motor.c: 247:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  4367   001AE4  C031  F023         	movff	returnHome@mL,reverseOneSquare@mL
  4368   001AE8  C032  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  4369   001AEC  C033  F025         	movff	returnHome@mR,reverseOneSquare@mR
  4370   001AF0  C034  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  4371   001AF4  C03A  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  4372   001AF8  C03B  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  4373   001AFC  C03C  F029         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  4374   001B00  ECE4  F01C         	call	_reverseOneSquare	;wreg free
  4375   001B04  EFC4  F00C         	goto	l3594
  4376   001B08                     l3620:
  4377   001B08  5044               	movf	returnHome@i^0,w,c
  4378   001B0A  2435               	addwf	returnHome@moveSequence^0,w,c
  4379   001B0C  6ED9               	movwf	fsr2l,c
  4380   001B0E  0E00               	movlw	0
  4381   001B10  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4382   001B12  6EDA               	movwf	fsr2h,c
  4383   001B14  0E06               	movlw	6
  4384   001B16  18DE               	xorwf	postinc2,w,c
  4385   001B18  A4D8               	btfss	status,2,c
  4386   001B1A  EF91  F00D         	goto	u2491
  4387   001B1E  EF93  F00D         	goto	u2490
  4388   001B22                     u2491:
  4389   001B22  EFDD  F00D         	goto	l3632
  4390   001B26                     u2490:
  4391   001B26                     
  4392                           ;dc_motor.c: 252:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4393   001B26  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4394   001B2A  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4395   001B2E  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4396   001B32  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4397   001B36  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4398   001B3A  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4399   001B3E  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4400   001B42  ECC7  F01E         	call	_turnLeft	;wreg free
  4401   001B46                     
  4402                           ;dc_motor.c: 253:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4403   001B46  0E05               	movlw	5
  4404   001B48  6E41               	movwf	(??_returnHome+1)^0,c
  4405   001B4A  0E0F               	movlw	15
  4406   001B4C  6E40               	movwf	??_returnHome^0,c
  4407   001B4E  0EF1               	movlw	241
  4408   001B50                     u4497:
  4409   001B50  2EE8               	decfsz	wreg,f,c
  4410   001B52  D7FE               	bra	u4497
  4411   001B54  2E40               	decfsz	??_returnHome^0,f,c
  4412   001B56  D7FC               	bra	u4497
  4413   001B58  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4414   001B5A  D7FA               	bra	u4497
  4415   001B5C  0000               	nop	
  4416   001B5E                     
  4417                           ;dc_motor.c: 254:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4418   001B5E  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4419   001B62  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4420   001B66  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4421   001B6A  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4422   001B6E  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4423   001B72  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4424   001B76  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4425   001B7A  ECC7  F01E         	call	_turnLeft	;wreg free
  4426                           
  4427                           ;dc_motor.c: 255:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4428   001B7E  0E05               	movlw	5
  4429   001B80  6E41               	movwf	(??_returnHome+1)^0,c
  4430   001B82  0E0F               	movlw	15
  4431   001B84  6E40               	movwf	??_returnHome^0,c
  4432   001B86  0EF1               	movlw	241
  4433   001B88                     u4507:
  4434   001B88  2EE8               	decfsz	wreg,f,c
  4435   001B8A  D7FE               	bra	u4507
  4436   001B8C  2E40               	decfsz	??_returnHome^0,f,c
  4437   001B8E  D7FC               	bra	u4507
  4438   001B90  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4439   001B92  D7FA               	bra	u4507
  4440   001B94  0000               	nop	
  4441   001B96                     
  4442                           ;dc_motor.c: 256:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4443   001B96  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4444   001B9A  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4445   001B9E  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4446   001BA2  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4447   001BA6  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4448   001BAA  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4449   001BAE  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4450   001BB2  ECC7  F01E         	call	_turnLeft	;wreg free
  4451   001BB6  EFC4  F00C         	goto	l3594
  4452   001BBA                     l3632:
  4453   001BBA  5044               	movf	returnHome@i^0,w,c
  4454   001BBC  2435               	addwf	returnHome@moveSequence^0,w,c
  4455   001BBE  6ED9               	movwf	fsr2l,c
  4456   001BC0  0E00               	movlw	0
  4457   001BC2  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4458   001BC4  6EDA               	movwf	fsr2h,c
  4459   001BC6  0E07               	movlw	7
  4460   001BC8  18DE               	xorwf	postinc2,w,c
  4461   001BCA  A4D8               	btfss	status,2,c
  4462   001BCC  EFEA  F00D         	goto	u2501
  4463   001BD0  EFEC  F00D         	goto	u2500
  4464   001BD4                     u2501:
  4465   001BD4  EF36  F00E         	goto	l593
  4466   001BD8                     u2500:
  4467   001BD8                     
  4468                           ;dc_motor.c: 261:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4469   001BD8  C031  F023         	movff	returnHome@mL,turnRight@mL
  4470   001BDC  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4471   001BE0  C033  F025         	movff	returnHome@mR,turnRight@mR
  4472   001BE4  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4473   001BE8  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4474   001BEC  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4475   001BF0  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4476   001BF4  ECDA  F01D         	call	_turnRight	;wreg free
  4477   001BF8                     
  4478                           ;dc_motor.c: 262:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4479   001BF8  0E05               	movlw	5
  4480   001BFA  6E41               	movwf	(??_returnHome+1)^0,c
  4481   001BFC  0E0F               	movlw	15
  4482   001BFE  6E40               	movwf	??_returnHome^0,c
  4483   001C00  0EF1               	movlw	241
  4484   001C02                     u4517:
  4485   001C02  2EE8               	decfsz	wreg,f,c
  4486   001C04  D7FE               	bra	u4517
  4487   001C06  2E40               	decfsz	??_returnHome^0,f,c
  4488   001C08  D7FC               	bra	u4517
  4489   001C0A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4490   001C0C  D7FA               	bra	u4517
  4491   001C0E  0000               	nop	
  4492   001C10                     
  4493                           ;dc_motor.c: 263:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4494   001C10  C031  F023         	movff	returnHome@mL,turnRight@mL
  4495   001C14  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4496   001C18  C033  F025         	movff	returnHome@mR,turnRight@mR
  4497   001C1C  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4498   001C20  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4499   001C24  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4500   001C28  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4501   001C2C  ECDA  F01D         	call	_turnRight	;wreg free
  4502                           
  4503                           ;dc_motor.c: 264:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4504   001C30  0E05               	movlw	5
  4505   001C32  6E41               	movwf	(??_returnHome+1)^0,c
  4506   001C34  0E0F               	movlw	15
  4507   001C36  6E40               	movwf	??_returnHome^0,c
  4508   001C38  0EF1               	movlw	241
  4509   001C3A                     u4527:
  4510   001C3A  2EE8               	decfsz	wreg,f,c
  4511   001C3C  D7FE               	bra	u4527
  4512   001C3E  2E40               	decfsz	??_returnHome^0,f,c
  4513   001C40  D7FC               	bra	u4527
  4514   001C42  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4515   001C44  D7FA               	bra	u4527
  4516   001C46  0000               	nop	
  4517   001C48                     
  4518                           ;dc_motor.c: 265:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4519   001C48  C031  F023         	movff	returnHome@mL,turnRight@mL
  4520   001C4C  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4521   001C50  C033  F025         	movff	returnHome@mR,turnRight@mR
  4522   001C54  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4523   001C58  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4524   001C5C  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4525   001C60  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4526   001C64  ECDA  F01D         	call	_turnRight	;wreg free
  4527   001C68  EFC4  F00C         	goto	l3594
  4528   001C6C                     l593:
  4529   001C6C                     l587:
  4530                           
  4531                           ;dc_motor.c: 269:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4532   001C6C  C031  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  4533   001C70  C032  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  4534   001C74  C033  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  4535   001C78  C034  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  4536   001C7C  C03A  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  4537   001C80  C03C  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  4538   001C84  EC74  F021         	call	_fullSpeedAhead	;wreg free
  4539   001C88                     
  4540                           ;dc_motor.c: 270:         resetTimer();
  4541   001C88  EC22  F026         	call	_resetTimer	;wreg free
  4542   001C8C                     l3646:
  4543   001C8C  5044               	movf	returnHome@i^0,w,c
  4544   001C8E  0D02               	mullw	2
  4545   001C90  CFF3 F040          	movff	prodl,??_returnHome
  4546   001C94  CFF4 F041          	movff	prodh,??_returnHome+1
  4547   001C98  5040               	movf	??_returnHome^0,w,c
  4548   001C9A  2437               	addwf	returnHome@straightTime^0,w,c
  4549   001C9C  6ED9               	movwf	fsr2l,c
  4550   001C9E  5041               	movf	(??_returnHome+1)^0,w,c
  4551   001CA0  2038               	addwfc	(returnHome@straightTime+1)^0,w,c
  4552   001CA2  6EDA               	movwf	fsr2h,c
  4553   001CA4  EC34  F025         	call	_get16bitTMR0val	;wreg free
  4554   001CA8  50DE               	movf	postinc2,w,c
  4555   001CAA  5C10               	subwf	?_get16bitTMR0val^0,w,c
  4556   001CAC  50DE               	movf	postinc2,w,c
  4557   001CAE  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  4558   001CB0  A0D8               	btfss	status,0,c
  4559   001CB2  EF5D  F00E         	goto	u2511
  4560   001CB6  EF5F  F00E         	goto	u2510
  4561   001CBA                     u2511:
  4562   001CBA  EF46  F00E         	goto	l3646
  4563   001CBE                     u2510:
  4564   001CBE                     
  4565                           ;dc_motor.c: 272:         stop(mL, mR, straightRamp);
  4566   001CBE  C031  F023         	movff	returnHome@mL,stop@mL
  4567   001CC2  C032  F024         	movff	returnHome@mL+1,stop@mL+1
  4568   001CC6  C033  F025         	movff	returnHome@mR,stop@mR
  4569   001CCA  C034  F026         	movff	returnHome@mR+1,stop@mR+1
  4570   001CCE  C03C  F027         	movff	returnHome@straightRamp,stop@straightRamp
  4571   001CD2  ECF0  F020         	call	_stop	;wreg free
  4572   001CD6                     l3650:
  4573                           
  4574                           ;dc_motor.c: 205:     while (i>0) {
  4575   001CD6  5044               	movf	returnHome@i^0,w,c
  4576   001CD8  A4D8               	btfss	status,2,c
  4577   001CDA  EF71  F00E         	goto	u2521
  4578   001CDE  EF73  F00E         	goto	u2520
  4579   001CE2                     u2521:
  4580   001CE2  EFBF  F00B         	goto	l3564
  4581   001CE6                     u2520:
  4582   001CE6  0012               	return		;funcret
  4583   001CE8                     __end_of_returnHome:
  4584                           	callstack 0
  4585                           
  4586 ;; *************** function _stop *****************
  4587 ;; Defined at:
  4588 ;;		line 367 in file "dc_motor.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  4591 ;;		 -> main@motorL(10), 
  4592 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  4593 ;;		 -> main@motorR(10), 
  4594 ;;  straightRamp    1   38[COMRAM] unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  cur_power       2   44[COMRAM] int 
  4597 ;;  i               2   42[COMRAM] int 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4607 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4608 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4610 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;Total ram usage:       12 bytes
  4612 ;; Hardware stack levels used: 1
  4613 ;; Hardware stack levels required when called: 7
  4614 ;; This function calls:
  4615 ;;		_setMotorPWM
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;;		_returnHome
  4619 ;;		_lostReturnHome
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text5
  4624   0041E0                     __ptext5:
  4625                           	callstack 0
  4626   0041E0                     _stop:
  4627                           	callstack 23
  4628   0041E0                     
  4629                           ;dc_motor.c: 367: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 368: {;dc_motor.c: 369:     mL->direction = 1;
  4630   0041E0  EE20 F001          	lfsr	2,1
  4631   0041E4  5023               	movf	stop@mL^0,w,c
  4632   0041E6  26D9               	addwf	fsr2l,f,c
  4633   0041E8  5024               	movf	(stop@mL+1)^0,w,c
  4634   0041EA  22DA               	addwfc	fsr2h,f,c
  4635   0041EC  0E01               	movlw	1
  4636   0041EE  6EDF               	movwf	indf2,c
  4637                           
  4638                           ;dc_motor.c: 370:     mR->direction = 1;
  4639   0041F0  EE20 F001          	lfsr	2,1
  4640   0041F4  5025               	movf	stop@mR^0,w,c
  4641   0041F6  26D9               	addwf	fsr2l,f,c
  4642   0041F8  5026               	movf	(stop@mR+1)^0,w,c
  4643   0041FA  22DA               	addwfc	fsr2h,f,c
  4644   0041FC  0E01               	movlw	1
  4645   0041FE  6EDF               	movwf	indf2,c
  4646                           
  4647                           ;dc_motor.c: 371:     int i;;dc_motor.c: 372:     int cur_power;;dc_motor.c: 373:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  4648   004200  C023  FFD9         	movff	stop@mL,fsr2l
  4649   004204  C024  FFDA         	movff	stop@mL+1,fsr2h
  4650   004208  50DF               	movf	indf2,w,c
  4651   00420A  6E28               	movwf	??_stop^0,c
  4652   00420C  EE20 F009          	lfsr	2,9
  4653   004210  5023               	movf	stop@mL^0,w,c
  4654   004212  26D9               	addwf	fsr2l,f,c
  4655   004214  5024               	movf	(stop@mL+1)^0,w,c
  4656   004216  22DA               	addwfc	fsr2h,f,c
  4657   004218  50DF               	movf	indf2,w,c
  4658   00421A  6E29               	movwf	(??_stop+1)^0,c
  4659   00421C  5029               	movf	(??_stop+1)^0,w,c
  4660   00421E  5C28               	subwf	??_stop^0,w,c
  4661   004220  6E2D               	movwf	stop@cur_power^0,c
  4662   004222  6A2E               	clrf	(stop@cur_power+1)^0,c
  4663   004224  A0D8               	btfss	status,0,c
  4664   004226  062E               	decf	(stop@cur_power+1)^0,f,c
  4665   004228                     l3116:
  4666   004228  BE2E               	btfsc	(stop@cur_power+1)^0,7,c
  4667   00422A  EF1B  F021         	goto	u1970
  4668   00422E  EF19  F021         	goto	u1971
  4669   004232                     u1971:
  4670   004232  EF1D  F021         	goto	l3120
  4671   004236                     u1970:
  4672   004236  EF69  F021         	goto	l3136
  4673   00423A                     l3120:
  4674                           
  4675                           ;dc_motor.c: 374:         mL->power = cur_power+mL->compensation;
  4676   00423A  EE20 F009          	lfsr	2,9
  4677   00423E  5023               	movf	stop@mL^0,w,c
  4678   004240  26D9               	addwf	fsr2l,f,c
  4679   004242  5024               	movf	(stop@mL+1)^0,w,c
  4680   004244  22DA               	addwfc	fsr2h,f,c
  4681   004246  50DF               	movf	indf2,w,c
  4682   004248  242D               	addwf	stop@cur_power^0,w,c
  4683   00424A  C023  FFD9         	movff	stop@mL,fsr2l
  4684   00424E  C024  FFDA         	movff	stop@mL+1,fsr2h
  4685   004252  6EDF               	movwf	indf2,c
  4686                           
  4687                           ;dc_motor.c: 375:         mR->power = cur_power+mR->compensation;
  4688   004254  EE20 F009          	lfsr	2,9
  4689   004258  5025               	movf	stop@mR^0,w,c
  4690   00425A  26D9               	addwf	fsr2l,f,c
  4691   00425C  5026               	movf	(stop@mR+1)^0,w,c
  4692   00425E  22DA               	addwfc	fsr2h,f,c
  4693   004260  50DF               	movf	indf2,w,c
  4694   004262  242D               	addwf	stop@cur_power^0,w,c
  4695   004264  C025  FFD9         	movff	stop@mR,fsr2l
  4696   004268  C026  FFDA         	movff	stop@mR+1,fsr2h
  4697   00426C  6EDF               	movwf	indf2,c
  4698   00426E                     
  4699                           ;dc_motor.c: 376:         setMotorPWM(mL);
  4700   00426E  C023  F01D         	movff	stop@mL,setMotorPWM@m
  4701   004272  C024  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  4702   004276  ECB4  F01F         	call	_setMotorPWM	;wreg free
  4703   00427A                     
  4704                           ;dc_motor.c: 377:         setMotorPWM(mR);
  4705   00427A  C025  F01D         	movff	stop@mR,setMotorPWM@m
  4706   00427E  C026  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  4707   004282  ECB4  F01F         	call	_setMotorPWM	;wreg free
  4708   004286                     
  4709                           ;dc_motor.c: 378:         for (i=0;i<straightRamp;i++) {
  4710   004286  0E00               	movlw	0
  4711   004288  6E2C               	movwf	(stop@i+1)^0,c
  4712   00428A  0E00               	movlw	0
  4713   00428C  6E2B               	movwf	stop@i^0,c
  4714   00428E  EF52  F021         	goto	l633
  4715   004292                     l3128:
  4716                           
  4717                           ;dc_motor.c: 379:             _delay((unsigned long)((10)*(64000000/4000.0)));
  4718   004292  0ED0               	movlw	208
  4719   004294  6E28               	movwf	??_stop^0,c
  4720   004296  0ECA               	movlw	202
  4721   004298                     u4537:
  4722   004298  2EE8               	decfsz	wreg,f,c
  4723   00429A  D7FE               	bra	u4537
  4724   00429C  2E28               	decfsz	??_stop^0,f,c
  4725   00429E  D7FC               	bra	u4537
  4726   0042A0                     
  4727                           ;dc_motor.c: 380:         }
  4728   0042A0  4A2B               	infsnz	stop@i^0,f,c
  4729   0042A2  2A2C               	incf	(stop@i+1)^0,f,c
  4730   0042A4                     l633:
  4731   0042A4  5027               	movf	stop@straightRamp^0,w,c
  4732   0042A6  6E28               	movwf	??_stop^0,c
  4733   0042A8  6A29               	clrf	(??_stop+1)^0,c
  4734   0042AA  5028               	movf	??_stop^0,w,c
  4735   0042AC  5C2B               	subwf	stop@i^0,w,c
  4736   0042AE  502C               	movf	(stop@i+1)^0,w,c
  4737   0042B0  0A80               	xorlw	128
  4738   0042B2  6E2A               	movwf	(??_stop+2)^0,c
  4739   0042B4  5029               	movf	(??_stop+1)^0,w,c
  4740   0042B6  0A80               	xorlw	128
  4741   0042B8  582A               	subwfb	(??_stop+2)^0,w,c
  4742   0042BA  A0D8               	btfss	status,0,c
  4743   0042BC  EF62  F021         	goto	u1981
  4744   0042C0  EF64  F021         	goto	u1980
  4745   0042C4                     u1981:
  4746   0042C4  EF49  F021         	goto	l3128
  4747   0042C8                     u1980:
  4748   0042C8                     
  4749                           ;dc_motor.c: 381:     }
  4750   0042C8  062D               	decf	stop@cur_power^0,f,c
  4751   0042CA  A0D8               	btfss	status,0,c
  4752   0042CC  062E               	decf	(stop@cur_power+1)^0,f,c
  4753   0042CE  EF14  F021         	goto	l3116
  4754   0042D2                     l3136:
  4755                           
  4756                           ;dc_motor.c: 382:     mL->power = 0;
  4757   0042D2  C023  FFD9         	movff	stop@mL,fsr2l
  4758   0042D6  C024  FFDA         	movff	stop@mL+1,fsr2h
  4759   0042DA  6ADF               	clrf	indf2,c
  4760                           
  4761                           ;dc_motor.c: 383:     mR->power = 0;
  4762   0042DC  C025  FFD9         	movff	stop@mR,fsr2l
  4763   0042E0  C026  FFDA         	movff	stop@mR+1,fsr2h
  4764   0042E4  6ADF               	clrf	indf2,c
  4765   0042E6  0012               	return		;funcret
  4766   0042E8                     __end_of_stop:
  4767                           	callstack 0
  4768                           
  4769 ;; *************** function _reverseOneSquare *****************
  4770 ;; Defined at:
  4771 ;;		line 468 in file "dc_motor.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  4774 ;;		 -> main@motorL(10), 
  4775 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  4776 ;;		 -> main@motorR(10), 
  4777 ;;  straightSpee    1   38[COMRAM] unsigned char 
  4778 ;;  reverseDurat    1   39[COMRAM] unsigned char 
  4779 ;;  straightRamp    1   40[COMRAM] unsigned char 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  cur_power       2   46[COMRAM] int 
  4782 ;;  i               2   44[COMRAM] int 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      void 
  4785 ;; Registers used:
  4786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4792 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4793 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4795 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4796 ;;Total ram usage:       14 bytes
  4797 ;; Hardware stack levels used: 1
  4798 ;; Hardware stack levels required when called: 7
  4799 ;; This function calls:
  4800 ;;		_setMotorPWM
  4801 ;; This function is called by:
  4802 ;;		_move
  4803 ;;		_returnHome
  4804 ;;		_lostReturnHome
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text6
  4809   0039C8                     __ptext6:
  4810                           	callstack 0
  4811   0039C8                     _reverseOneSquare:
  4812                           	callstack 22
  4813   0039C8                     
  4814                           ;dc_motor.c: 468: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 469: {;dc_motor.c
      +                          : 470:     mL->direction = 0;
  4815   0039C8  EE20 F001          	lfsr	2,1
  4816   0039CC  5023               	movf	reverseOneSquare@mL^0,w,c
  4817   0039CE  26D9               	addwf	fsr2l,f,c
  4818   0039D0  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  4819   0039D2  22DA               	addwfc	fsr2h,f,c
  4820   0039D4  6ADF               	clrf	indf2,c
  4821                           
  4822                           ;dc_motor.c: 471:     mR->direction = 0;
  4823   0039D6  EE20 F001          	lfsr	2,1
  4824   0039DA  5025               	movf	reverseOneSquare@mR^0,w,c
  4825   0039DC  26D9               	addwf	fsr2l,f,c
  4826   0039DE  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  4827   0039E0  22DA               	addwfc	fsr2h,f,c
  4828   0039E2  6ADF               	clrf	indf2,c
  4829   0039E4                     
  4830                           ;dc_motor.c: 472:     int i;;dc_motor.c: 473:     int cur_power;;dc_motor.c: 474:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  4831   0039E4  0E00               	movlw	0
  4832   0039E6  6E30               	movwf	(reverseOneSquare@cur_power+1)^0,c
  4833   0039E8  0E01               	movlw	1
  4834   0039EA  6E2F               	movwf	reverseOneSquare@cur_power^0,c
  4835   0039EC  EF42  F01D         	goto	l3280
  4836   0039F0                     l3266:
  4837                           
  4838                           ;dc_motor.c: 475:         mL->power = cur_power+mL->compensation;
  4839   0039F0  EE20 F009          	lfsr	2,9
  4840   0039F4  5023               	movf	reverseOneSquare@mL^0,w,c
  4841   0039F6  26D9               	addwf	fsr2l,f,c
  4842   0039F8  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  4843   0039FA  22DA               	addwfc	fsr2h,f,c
  4844   0039FC  50DF               	movf	indf2,w,c
  4845   0039FE  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  4846   003A00  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4847   003A04  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4848   003A08  6EDF               	movwf	indf2,c
  4849                           
  4850                           ;dc_motor.c: 476:         mR->power = cur_power+mR->compensation;
  4851   003A0A  EE20 F009          	lfsr	2,9
  4852   003A0E  5025               	movf	reverseOneSquare@mR^0,w,c
  4853   003A10  26D9               	addwf	fsr2l,f,c
  4854   003A12  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  4855   003A14  22DA               	addwfc	fsr2h,f,c
  4856   003A16  50DF               	movf	indf2,w,c
  4857   003A18  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  4858   003A1A  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  4859   003A1E  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  4860   003A22  6EDF               	movwf	indf2,c
  4861   003A24                     
  4862                           ;dc_motor.c: 477:         setMotorPWM(mL);
  4863   003A24  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  4864   003A28  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  4865   003A2C  ECB4  F01F         	call	_setMotorPWM	;wreg free
  4866   003A30                     
  4867                           ;dc_motor.c: 478:         setMotorPWM(mR);
  4868   003A30  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  4869   003A34  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  4870   003A38  ECB4  F01F         	call	_setMotorPWM	;wreg free
  4871   003A3C                     
  4872                           ;dc_motor.c: 479:         for (i=0;i<straightRamp;i++) {
  4873   003A3C  0E00               	movlw	0
  4874   003A3E  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  4875   003A40  0E00               	movlw	0
  4876   003A42  6E2D               	movwf	reverseOneSquare@i^0,c
  4877   003A44  EF2E  F01D         	goto	l684
  4878   003A48                     l3274:
  4879                           
  4880                           ;dc_motor.c: 480:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4881   003A48  0E68               	movlw	104
  4882   003A4A  6E2A               	movwf	??_reverseOneSquare^0,c
  4883   003A4C  0EE4               	movlw	228
  4884   003A4E                     u4547:
  4885   003A4E  2EE8               	decfsz	wreg,f,c
  4886   003A50  D7FE               	bra	u4547
  4887   003A52  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  4888   003A54  D7FC               	bra	u4547
  4889   003A56  D000               	nop2	
  4890   003A58                     
  4891                           ;dc_motor.c: 481:         }
  4892   003A58  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  4893   003A5A  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  4894   003A5C                     l684:
  4895   003A5C  5029               	movf	reverseOneSquare@straightRamp^0,w,c
  4896   003A5E  6E2A               	movwf	??_reverseOneSquare^0,c
  4897   003A60  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  4898   003A62  502A               	movf	??_reverseOneSquare^0,w,c
  4899   003A64  5C2D               	subwf	reverseOneSquare@i^0,w,c
  4900   003A66  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  4901   003A68  0A80               	xorlw	128
  4902   003A6A  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  4903   003A6C  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  4904   003A6E  0A80               	xorlw	128
  4905   003A70  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4906   003A72  A0D8               	btfss	status,0,c
  4907   003A74  EF3E  F01D         	goto	u2131
  4908   003A78  EF40  F01D         	goto	u2130
  4909   003A7C                     u2131:
  4910   003A7C  EF24  F01D         	goto	l3274
  4911   003A80                     u2130:
  4912   003A80                     
  4913                           ;dc_motor.c: 482:     }
  4914   003A80  4A2F               	infsnz	reverseOneSquare@cur_power^0,f,c
  4915   003A82  2A30               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  4916   003A84                     l3280:
  4917   003A84  5027               	movf	reverseOneSquare@straightSpeed^0,w,c
  4918   003A86  6E2A               	movwf	??_reverseOneSquare^0,c
  4919   003A88  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  4920   003A8A  502F               	movf	reverseOneSquare@cur_power^0,w,c
  4921   003A8C  5C2A               	subwf	??_reverseOneSquare^0,w,c
  4922   003A8E  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  4923   003A90  0A80               	xorlw	128
  4924   003A92  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  4925   003A94  5030               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  4926   003A96  0A80               	xorlw	128
  4927   003A98  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4928   003A9A  B0D8               	btfsc	status,0,c
  4929   003A9C  EF52  F01D         	goto	u2141
  4930   003AA0  EF54  F01D         	goto	u2140
  4931   003AA4                     u2141:
  4932   003AA4  EFF8  F01C         	goto	l3266
  4933   003AA8                     u2140:
  4934   003AA8                     
  4935                           ;dc_motor.c: 484:     for (i=0;i<reverseDuration;i++) {
  4936   003AA8  0E00               	movlw	0
  4937   003AAA  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  4938   003AAC  0E00               	movlw	0
  4939   003AAE  6E2D               	movwf	reverseOneSquare@i^0,c
  4940   003AB0  EF64  F01D         	goto	l688
  4941   003AB4                     l3284:
  4942                           
  4943                           ;dc_motor.c: 485:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4944   003AB4  0E68               	movlw	104
  4945   003AB6  6E2A               	movwf	??_reverseOneSquare^0,c
  4946   003AB8  0EE4               	movlw	228
  4947   003ABA                     u4557:
  4948   003ABA  2EE8               	decfsz	wreg,f,c
  4949   003ABC  D7FE               	bra	u4557
  4950   003ABE  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  4951   003AC0  D7FC               	bra	u4557
  4952   003AC2  D000               	nop2	
  4953   003AC4                     
  4954                           ;dc_motor.c: 486:         }
  4955   003AC4  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  4956   003AC6  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  4957   003AC8                     l688:
  4958   003AC8  5028               	movf	reverseOneSquare@reverseDuration^0,w,c
  4959   003ACA  6E2A               	movwf	??_reverseOneSquare^0,c
  4960   003ACC  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  4961   003ACE  502A               	movf	??_reverseOneSquare^0,w,c
  4962   003AD0  5C2D               	subwf	reverseOneSquare@i^0,w,c
  4963   003AD2  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  4964   003AD4  0A80               	xorlw	128
  4965   003AD6  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  4966   003AD8  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  4967   003ADA  0A80               	xorlw	128
  4968   003ADC  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4969   003ADE  A0D8               	btfss	status,0,c
  4970   003AE0  EF74  F01D         	goto	u2151
  4971   003AE4  EF76  F01D         	goto	u2150
  4972   003AE8                     u2151:
  4973   003AE8  EF5A  F01D         	goto	l3284
  4974   003AEC                     u2150:
  4975   003AEC                     
  4976                           ;dc_motor.c: 488:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  4977   003AEC  C027  F02F         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  4978   003AF0  6A30               	clrf	(reverseOneSquare@cur_power+1)^0,c
  4979   003AF2                     l3288:
  4980   003AF2  BE30               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  4981   003AF4  EF80  F01D         	goto	u2160
  4982   003AF8  EF7E  F01D         	goto	u2161
  4983   003AFC                     u2161:
  4984   003AFC  EF82  F01D         	goto	l3292
  4985   003B00                     u2160:
  4986   003B00  EFCF  F01D         	goto	l3308
  4987   003B04                     l3292:
  4988                           
  4989                           ;dc_motor.c: 489:         mL->power = cur_power+mL->compensation;
  4990   003B04  EE20 F009          	lfsr	2,9
  4991   003B08  5023               	movf	reverseOneSquare@mL^0,w,c
  4992   003B0A  26D9               	addwf	fsr2l,f,c
  4993   003B0C  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  4994   003B0E  22DA               	addwfc	fsr2h,f,c
  4995   003B10  50DF               	movf	indf2,w,c
  4996   003B12  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  4997   003B14  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4998   003B18  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4999   003B1C  6EDF               	movwf	indf2,c
  5000                           
  5001                           ;dc_motor.c: 490:         mR->power = cur_power+mR->compensation;
  5002   003B1E  EE20 F009          	lfsr	2,9
  5003   003B22  5025               	movf	reverseOneSquare@mR^0,w,c
  5004   003B24  26D9               	addwf	fsr2l,f,c
  5005   003B26  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  5006   003B28  22DA               	addwfc	fsr2h,f,c
  5007   003B2A  50DF               	movf	indf2,w,c
  5008   003B2C  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  5009   003B2E  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  5010   003B32  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  5011   003B36  6EDF               	movwf	indf2,c
  5012   003B38                     
  5013                           ;dc_motor.c: 491:         setMotorPWM(mL);
  5014   003B38  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  5015   003B3C  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  5016   003B40  ECB4  F01F         	call	_setMotorPWM	;wreg free
  5017   003B44                     
  5018                           ;dc_motor.c: 492:         setMotorPWM(mR);
  5019   003B44  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  5020   003B48  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  5021   003B4C  ECB4  F01F         	call	_setMotorPWM	;wreg free
  5022   003B50                     
  5023                           ;dc_motor.c: 493:         for (i=0;i<straightRamp;i++) {
  5024   003B50  0E00               	movlw	0
  5025   003B52  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  5026   003B54  0E00               	movlw	0
  5027   003B56  6E2D               	movwf	reverseOneSquare@i^0,c
  5028   003B58  EFB8  F01D         	goto	l693
  5029   003B5C                     l3300:
  5030                           
  5031                           ;dc_motor.c: 494:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5032   003B5C  0E68               	movlw	104
  5033   003B5E  6E2A               	movwf	??_reverseOneSquare^0,c
  5034   003B60  0EE4               	movlw	228
  5035   003B62                     u4567:
  5036   003B62  2EE8               	decfsz	wreg,f,c
  5037   003B64  D7FE               	bra	u4567
  5038   003B66  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  5039   003B68  D7FC               	bra	u4567
  5040   003B6A  D000               	nop2	
  5041   003B6C                     
  5042                           ;dc_motor.c: 495:         }
  5043   003B6C  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  5044   003B6E  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  5045   003B70                     l693:
  5046   003B70  5029               	movf	reverseOneSquare@straightRamp^0,w,c
  5047   003B72  6E2A               	movwf	??_reverseOneSquare^0,c
  5048   003B74  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  5049   003B76  502A               	movf	??_reverseOneSquare^0,w,c
  5050   003B78  5C2D               	subwf	reverseOneSquare@i^0,w,c
  5051   003B7A  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  5052   003B7C  0A80               	xorlw	128
  5053   003B7E  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  5054   003B80  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  5055   003B82  0A80               	xorlw	128
  5056   003B84  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  5057   003B86  A0D8               	btfss	status,0,c
  5058   003B88  EFC8  F01D         	goto	u2171
  5059   003B8C  EFCA  F01D         	goto	u2170
  5060   003B90                     u2171:
  5061   003B90  EFAE  F01D         	goto	l3300
  5062   003B94                     u2170:
  5063   003B94                     
  5064                           ;dc_motor.c: 496:     }
  5065   003B94  062F               	decf	reverseOneSquare@cur_power^0,f,c
  5066   003B96  A0D8               	btfss	status,0,c
  5067   003B98  0630               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  5068   003B9A  EF79  F01D         	goto	l3288
  5069   003B9E                     l3308:
  5070                           
  5071                           ;dc_motor.c: 497:     mL->power = 0;
  5072   003B9E  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  5073   003BA2  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  5074   003BA6  6ADF               	clrf	indf2,c
  5075                           
  5076                           ;dc_motor.c: 498:     mR->power = 0;
  5077   003BA8  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  5078   003BAC  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  5079   003BB0  6ADF               	clrf	indf2,c
  5080   003BB2  0012               	return		;funcret
  5081   003BB4                     __end_of_reverseOneSquare:
  5082                           	callstack 0
  5083                           
  5084 ;; *************** function _resetTimer *****************
  5085 ;; Defined at:
  5086 ;;		line 23 in file "timers.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5104 ;;Total ram usage:        0 bytes
  5105 ;; Hardware stack levels used: 1
  5106 ;; Hardware stack levels required when called: 5
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_main
  5111 ;;		_returnHome
  5112 ;;		_lostReturnHome
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text7
  5117   004C44                     __ptext7:
  5118                           	callstack 0
  5119   004C44                     _resetTimer:
  5120                           	callstack 25
  5121   004C44                     
  5122                           ;timers.c: 25:     TMR0H=0;
  5123   004C44  0E00               	movlw	0
  5124   004C46  6ED4               	movwf	212,c	;volatile
  5125                           
  5126                           ;timers.c: 26:     TMR0L=0;
  5127   004C48  0E00               	movlw	0
  5128   004C4A  6ED3               	movwf	211,c	;volatile
  5129   004C4C  0012               	return		;funcret
  5130   004C4E                     __end_of_resetTimer:
  5131                           	callstack 0
  5132                           
  5133 ;; *************** function _get16bitTMR0val *****************
  5134 ;; Defined at:
  5135 ;;		line 33 in file "timers.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  timer_val       2   23[COMRAM] unsigned int 
  5140 ;;  timer_high      2   21[COMRAM] unsigned int 
  5141 ;;  timer_low       2   19[COMRAM] unsigned int 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  2   15[COMRAM] unsigned int 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5152 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5154 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5155 ;;Total ram usage:       10 bytes
  5156 ;; Hardware stack levels used: 1
  5157 ;; Hardware stack levels required when called: 5
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;;		_returnHome
  5163 ;;		_lostReturnHome
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text8
  5168   004A68                     __ptext8:
  5169                           	callstack 0
  5170   004A68                     _get16bitTMR0val:
  5171                           	callstack 23
  5172   004A68                     
  5173                           ;timers.c: 36:     unsigned int timer_low = TMR0L;
  5174   004A68  CFD3 F014          	movff	4051,get16bitTMR0val@timer_low	;volatile
  5175   004A6C  6A15               	clrf	(get16bitTMR0val@timer_low+1)^0,c
  5176                           
  5177                           ;timers.c: 37:     unsigned int timer_high = TMR0H;
  5178   004A6E  CFD4 F016          	movff	4052,get16bitTMR0val@timer_high	;volatile
  5179   004A72  6A17               	clrf	(get16bitTMR0val@timer_high+1)^0,c
  5180   004A74                     
  5181                           ;timers.c: 38:     unsigned int timer_val = (timer_high<<8) | timer_low;
  5182   004A74  5016               	movf	get16bitTMR0val@timer_high^0,w,c
  5183   004A76  6E13               	movwf	(??_get16bitTMR0val+1)^0,c
  5184   004A78  6A12               	clrf	??_get16bitTMR0val^0,c
  5185   004A7A  5014               	movf	get16bitTMR0val@timer_low^0,w,c
  5186   004A7C  1012               	iorwf	??_get16bitTMR0val^0,w,c
  5187   004A7E  6E18               	movwf	get16bitTMR0val@timer_val^0,c
  5188   004A80  5015               	movf	(get16bitTMR0val@timer_low+1)^0,w,c
  5189   004A82  1013               	iorwf	(??_get16bitTMR0val+1)^0,w,c
  5190   004A84  6E19               	movwf	(get16bitTMR0val@timer_val+1)^0,c
  5191   004A86                     
  5192                           ;timers.c: 39:     return timer_val;
  5193   004A86  C018  F010         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  5194   004A8A  C019  F011         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  5195   004A8E  0012               	return		;funcret
  5196   004A90                     __end_of_get16bitTMR0val:
  5197                           	callstack 0
  5198                           
  5199 ;; *************** function _fullSpeedAhead *****************
  5200 ;; Defined at:
  5201 ;;		line 451 in file "dc_motor.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  5204 ;;		 -> main@motorL(10), 
  5205 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  5206 ;;		 -> main@motorR(10), 
  5207 ;;  straightSpee    1   38[COMRAM] unsigned char 
  5208 ;;  straightRamp    1   39[COMRAM] unsigned char 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  cur_power       2   45[COMRAM] int 
  5211 ;;  i               2   43[COMRAM] int 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5221 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5224 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5225 ;;Total ram usage:       13 bytes
  5226 ;; Hardware stack levels used: 1
  5227 ;; Hardware stack levels required when called: 7
  5228 ;; This function calls:
  5229 ;;		_setMotorPWM
  5230 ;; This function is called by:
  5231 ;;		_main
  5232 ;;		_move
  5233 ;;		_returnHome
  5234 ;;		_lostReturnHome
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text9
  5239   0042E8                     __ptext9:
  5240                           	callstack 0
  5241   0042E8                     _fullSpeedAhead:
  5242                           	callstack 21
  5243   0042E8                     
  5244                           ;dc_motor.c: 451: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 452: {;dc_motor.c: 453:     mL->direction = 1;
  5245   0042E8  EE20 F001          	lfsr	2,1
  5246   0042EC  5023               	movf	fullSpeedAhead@mL^0,w,c
  5247   0042EE  26D9               	addwf	fsr2l,f,c
  5248   0042F0  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  5249   0042F2  22DA               	addwfc	fsr2h,f,c
  5250   0042F4  0E01               	movlw	1
  5251   0042F6  6EDF               	movwf	indf2,c
  5252                           
  5253                           ;dc_motor.c: 454:     mR->direction = 1;
  5254   0042F8  EE20 F001          	lfsr	2,1
  5255   0042FC  5025               	movf	fullSpeedAhead@mR^0,w,c
  5256   0042FE  26D9               	addwf	fsr2l,f,c
  5257   004300  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  5258   004302  22DA               	addwfc	fsr2h,f,c
  5259   004304  0E01               	movlw	1
  5260   004306  6EDF               	movwf	indf2,c
  5261   004308                     
  5262                           ;dc_motor.c: 455:     int i;;dc_motor.c: 456:     int cur_power;;dc_motor.c: 457:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  5263   004308  0E00               	movlw	0
  5264   00430A  6E2F               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  5265   00430C  0E01               	movlw	1
  5266   00430E  6E2E               	movwf	fullSpeedAhead@cur_power^0,c
  5267   004310  EFD4  F021         	goto	l3102
  5268   004314                     l3088:
  5269                           
  5270                           ;dc_motor.c: 458:         mL->power = cur_power+mL->compensation;
  5271   004314  EE20 F009          	lfsr	2,9
  5272   004318  5023               	movf	fullSpeedAhead@mL^0,w,c
  5273   00431A  26D9               	addwf	fsr2l,f,c
  5274   00431C  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  5275   00431E  22DA               	addwfc	fsr2h,f,c
  5276   004320  50DF               	movf	indf2,w,c
  5277   004322  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  5278   004324  C023  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5279   004328  C024  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5280   00432C  6EDF               	movwf	indf2,c
  5281                           
  5282                           ;dc_motor.c: 459:         mR->power = cur_power+mR->compensation;
  5283   00432E  EE20 F009          	lfsr	2,9
  5284   004332  5025               	movf	fullSpeedAhead@mR^0,w,c
  5285   004334  26D9               	addwf	fsr2l,f,c
  5286   004336  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  5287   004338  22DA               	addwfc	fsr2h,f,c
  5288   00433A  50DF               	movf	indf2,w,c
  5289   00433C  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  5290   00433E  C025  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5291   004342  C026  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5292   004346  6EDF               	movwf	indf2,c
  5293   004348                     
  5294                           ;dc_motor.c: 460:         setMotorPWM(mL);
  5295   004348  C023  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  5296   00434C  C024  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  5297   004350  ECB4  F01F         	call	_setMotorPWM	;wreg free
  5298   004354                     
  5299                           ;dc_motor.c: 461:         setMotorPWM(mR);
  5300   004354  C025  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  5301   004358  C026  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  5302   00435C  ECB4  F01F         	call	_setMotorPWM	;wreg free
  5303   004360                     
  5304                           ;dc_motor.c: 462:         for (i=0;i<straightRamp;i++) {
  5305   004360  0E00               	movlw	0
  5306   004362  6E2D               	movwf	(fullSpeedAhead@i+1)^0,c
  5307   004364  0E00               	movlw	0
  5308   004366  6E2C               	movwf	fullSpeedAhead@i^0,c
  5309   004368  EFC0  F021         	goto	l675
  5310   00436C                     l3096:
  5311                           
  5312                           ;dc_motor.c: 463:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5313   00436C  0E68               	movlw	104
  5314   00436E  6E29               	movwf	??_fullSpeedAhead^0,c
  5315   004370  0EE4               	movlw	228
  5316   004372                     u4577:
  5317   004372  2EE8               	decfsz	wreg,f,c
  5318   004374  D7FE               	bra	u4577
  5319   004376  2E29               	decfsz	??_fullSpeedAhead^0,f,c
  5320   004378  D7FC               	bra	u4577
  5321   00437A  D000               	nop2	
  5322   00437C                     
  5323                           ;dc_motor.c: 464:         }
  5324   00437C  4A2C               	infsnz	fullSpeedAhead@i^0,f,c
  5325   00437E  2A2D               	incf	(fullSpeedAhead@i+1)^0,f,c
  5326   004380                     l675:
  5327   004380  5028               	movf	fullSpeedAhead@straightRamp^0,w,c
  5328   004382  6E29               	movwf	??_fullSpeedAhead^0,c
  5329   004384  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  5330   004386  5029               	movf	??_fullSpeedAhead^0,w,c
  5331   004388  5C2C               	subwf	fullSpeedAhead@i^0,w,c
  5332   00438A  502D               	movf	(fullSpeedAhead@i+1)^0,w,c
  5333   00438C  0A80               	xorlw	128
  5334   00438E  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  5335   004390  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  5336   004392  0A80               	xorlw	128
  5337   004394  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  5338   004396  A0D8               	btfss	status,0,c
  5339   004398  EFD0  F021         	goto	u1951
  5340   00439C  EFD2  F021         	goto	u1950
  5341   0043A0                     u1951:
  5342   0043A0  EFB6  F021         	goto	l3096
  5343   0043A4                     u1950:
  5344   0043A4                     
  5345                           ;dc_motor.c: 465:     }
  5346   0043A4  4A2E               	infsnz	fullSpeedAhead@cur_power^0,f,c
  5347   0043A6  2A2F               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  5348   0043A8                     l3102:
  5349   0043A8  5027               	movf	fullSpeedAhead@straightSpeed^0,w,c
  5350   0043AA  6E29               	movwf	??_fullSpeedAhead^0,c
  5351   0043AC  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  5352   0043AE  502E               	movf	fullSpeedAhead@cur_power^0,w,c
  5353   0043B0  5C29               	subwf	??_fullSpeedAhead^0,w,c
  5354   0043B2  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  5355   0043B4  0A80               	xorlw	128
  5356   0043B6  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  5357   0043B8  502F               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  5358   0043BA  0A80               	xorlw	128
  5359   0043BC  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  5360   0043BE  B0D8               	btfsc	status,0,c
  5361   0043C0  EFE4  F021         	goto	u1961
  5362   0043C4  EFE6  F021         	goto	u1960
  5363   0043C8                     u1961:
  5364   0043C8  EF8A  F021         	goto	l3088
  5365   0043CC                     u1960:
  5366   0043CC  0012               	return		;funcret
  5367   0043CE                     __end_of_fullSpeedAhead:
  5368                           	callstack 0
  5369                           
  5370 ;; *************** function _initUSART4 *****************
  5371 ;; Defined at:
  5372 ;;		line 4 in file "serial.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used: 1
  5392 ;; Hardware stack levels required when called: 5
  5393 ;; This function calls:
  5394 ;;		Nothing
  5395 ;; This function is called by:
  5396 ;;		_main
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text10
  5401   004BB0                     __ptext10:
  5402                           	callstack 0
  5403   004BB0                     _initUSART4:
  5404                           	callstack 25
  5405   004BB0                     
  5406                           ;serial.c: 7:     RC0PPS = 0x12;
  5407   004BB0  0E12               	movlw	18
  5408   004BB2  010E               	movlb	14	; () banked
  5409   004BB4  6F62               	movwf	98,b	;volatile
  5410                           
  5411                           ;serial.c: 8:     RX4PPS = 0x11;
  5412   004BB6  0E11               	movlw	17
  5413   004BB8  6F15               	movwf	21,b	;volatile
  5414   004BBA                     
  5415                           ; BSR set to: 14
  5416                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  5417   004BBA  97E9               	bcf	233,3,b	;volatile
  5418   004BBC                     
  5419                           ; BSR set to: 14
  5420                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  5421   004BBC  95E8               	bcf	232,2,b	;volatile
  5422                           
  5423                           ;serial.c: 13:     SP4BRGL = 51;
  5424   004BBE  0E33               	movlw	51
  5425   004BC0  6FE5               	movwf	229,b	;volatile
  5426                           
  5427                           ;serial.c: 14:     SP4BRGH = 0;
  5428   004BC2  0E00               	movlw	0
  5429   004BC4  6FE6               	movwf	230,b	;volatile
  5430   004BC6                     
  5431                           ; BSR set to: 14
  5432                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  5433   004BC6  89E7               	bsf	231,4,b	;volatile
  5434   004BC8                     
  5435                           ; BSR set to: 14
  5436                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  5437   004BC8  8BE8               	bsf	232,5,b	;volatile
  5438   004BCA                     
  5439                           ; BSR set to: 14
  5440                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  5441   004BCA  8FE7               	bsf	231,7,b	;volatile
  5442   004BCC                     
  5443                           ; BSR set to: 14
  5444   004BCC  0012               	return		;funcret
  5445   004BCE                     __end_of_initUSART4:
  5446                           	callstack 0
  5447                           
  5448 ;; *************** function _initDCmotorsPWM *****************
  5449 ;; Defined at:
  5450 ;;		line 8 in file "dc_motor.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  PWMperiod       2   15[COMRAM] unsigned int 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5464 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5468 ;;Total ram usage:        2 bytes
  5469 ;; Hardware stack levels used: 1
  5470 ;; Hardware stack levels required when called: 5
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text11
  5479   004682                     __ptext11:
  5480                           	callstack 0
  5481   004682                     _initDCmotorsPWM:
  5482                           	callstack 25
  5483   004682                     
  5484                           ;dc_motor.c: 11:     LATEbits.LATE2=0;
  5485   004682  947D               	bcf	125,2,c	;volatile
  5486                           
  5487                           ;dc_motor.c: 12:     TRISEbits.TRISE2=0;
  5488   004684  9485               	bcf	133,2,c	;volatile
  5489                           
  5490                           ;dc_motor.c: 13:     LATEbits.LATE4=0;
  5491   004686  987D               	bcf	125,4,c	;volatile
  5492                           
  5493                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  5494   004688  9885               	bcf	133,4,c	;volatile
  5495                           
  5496                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  5497   00468A  9E7B               	bcf	123,7,c	;volatile
  5498                           
  5499                           ;dc_motor.c: 16:     TRISCbits.TRISC7=0;
  5500   00468C  9E83               	bcf	131,7,c	;volatile
  5501                           
  5502                           ;dc_motor.c: 17:     LATGbits.LATG6=0;
  5503   00468E  9C7F               	bcf	127,6,c	;volatile
  5504                           
  5505                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  5506   004690  9C87               	bcf	135,6,c	;volatile
  5507   004692                     
  5508                           ;dc_motor.c: 21:     RE2PPS=0x05;
  5509   004692  0E05               	movlw	5
  5510   004694  010E               	movlb	14	; () banked
  5511   004696  6F74               	movwf	116,b	;volatile
  5512                           
  5513                           ;dc_motor.c: 22:     RE4PPS=0x06;
  5514   004698  0E06               	movlw	6
  5515   00469A  6F76               	movwf	118,b	;volatile
  5516                           
  5517                           ;dc_motor.c: 23:     RC7PPS=0x07;
  5518   00469C  0E07               	movlw	7
  5519   00469E  6F69               	movwf	105,b	;volatile
  5520                           
  5521                           ;dc_motor.c: 24:     RG6PPS=0x08;
  5522   0046A0  0E08               	movlw	8
  5523   0046A2  6F88               	movwf	136,b	;volatile
  5524                           
  5525                           ;dc_motor.c: 27:     T2CONbits.CKPS=0b011;
  5526   0046A4  50BD               	movf	189,w,c	;volatile
  5527   0046A6  0B8F               	andlw	-113
  5528   0046A8  0930               	iorlw	48
  5529   0046AA  6EBD               	movwf	189,c	;volatile
  5530                           
  5531                           ;dc_motor.c: 28:     T2HLTbits.MODE=0b00000;
  5532   0046AC  0EE0               	movlw	-32
  5533   0046AE  16BE               	andwf	190,f,c	;volatile
  5534                           
  5535                           ;dc_motor.c: 29:     T2CLKCONbits.CS=0b0001;
  5536   0046B0  50BF               	movf	191,w,c	;volatile
  5537   0046B2  0BF0               	andlw	-16
  5538   0046B4  0901               	iorlw	1
  5539   0046B6  6EBF               	movwf	191,c	;volatile
  5540   0046B8                     
  5541                           ; BSR set to: 14
  5542                           ;dc_motor.c: 33:     T2PR=PWMperiod;
  5543   0046B8  C010  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5544   0046BC                     
  5545                           ; BSR set to: 14
  5546                           ;dc_motor.c: 34:     T2CONbits.ON=1;
  5547   0046BC  8EBD               	bsf	189,7,c	;volatile
  5548                           
  5549                           ;dc_motor.c: 38:     CCPR1H=0;
  5550   0046BE  0E00               	movlw	0
  5551   0046C0  6EAA               	movwf	170,c	;volatile
  5552                           
  5553                           ;dc_motor.c: 39:     CCPR2H=0;
  5554   0046C2  0E00               	movlw	0
  5555   0046C4  6EA6               	movwf	166,c	;volatile
  5556                           
  5557                           ;dc_motor.c: 40:     CCPR3H=0;
  5558   0046C6  0E00               	movlw	0
  5559   0046C8  010F               	movlb	15	; () banked
  5560   0046CA  6F25               	movwf	37,b	;volatile
  5561                           
  5562                           ;dc_motor.c: 41:     CCPR4H=0;
  5563   0046CC  0E00               	movlw	0
  5564   0046CE  6F21               	movwf	33,b	;volatile
  5565                           
  5566                           ;dc_motor.c: 44:     CCPTMRS0bits.C1TSEL=0;
  5567   0046D0  0EFC               	movlw	-4
  5568   0046D2  16AD               	andwf	173,f,c	;volatile
  5569                           
  5570                           ;dc_motor.c: 45:     CCPTMRS0bits.C2TSEL=0;
  5571   0046D4  0EF3               	movlw	-13
  5572   0046D6  16AD               	andwf	173,f,c	;volatile
  5573                           
  5574                           ;dc_motor.c: 46:     CCPTMRS0bits.C3TSEL=0;
  5575   0046D8  0ECF               	movlw	-49
  5576   0046DA  16AD               	andwf	173,f,c	;volatile
  5577                           
  5578                           ;dc_motor.c: 47:     CCPTMRS0bits.C4TSEL=0;
  5579   0046DC  0E3F               	movlw	-193
  5580   0046DE  16AD               	andwf	173,f,c	;volatile
  5581   0046E0                     
  5582                           ; BSR set to: 15
  5583                           ;dc_motor.c: 50:     CCP1CONbits.FMT=1;
  5584   0046E0  88AB               	bsf	171,4,c	;volatile
  5585                           
  5586                           ;dc_motor.c: 51:     CCP1CONbits.CCP1MODE=0b1100;
  5587   0046E2  50AB               	movf	171,w,c	;volatile
  5588   0046E4  0BF0               	andlw	-16
  5589   0046E6  090C               	iorlw	12
  5590   0046E8  6EAB               	movwf	171,c	;volatile
  5591   0046EA                     
  5592                           ; BSR set to: 15
  5593                           ;dc_motor.c: 52:     CCP1CONbits.EN=1;
  5594   0046EA  8EAB               	bsf	171,7,c	;volatile
  5595   0046EC                     
  5596                           ; BSR set to: 15
  5597                           ;dc_motor.c: 54:     CCP2CONbits.FMT=1;
  5598   0046EC  88A7               	bsf	167,4,c	;volatile
  5599                           
  5600                           ;dc_motor.c: 55:     CCP2CONbits.CCP2MODE=0b1100;
  5601   0046EE  50A7               	movf	167,w,c	;volatile
  5602   0046F0  0BF0               	andlw	-16
  5603   0046F2  090C               	iorlw	12
  5604   0046F4  6EA7               	movwf	167,c	;volatile
  5605   0046F6                     
  5606                           ; BSR set to: 15
  5607                           ;dc_motor.c: 56:     CCP2CONbits.EN=1;
  5608   0046F6  8EA7               	bsf	167,7,c	;volatile
  5609   0046F8                     
  5610                           ; BSR set to: 15
  5611                           ;dc_motor.c: 58:     CCP3CONbits.FMT=1;
  5612   0046F8  8926               	bsf	38,4,b	;volatile
  5613                           
  5614                           ;dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  5615   0046FA  5126               	movf	38,w,b	;volatile
  5616   0046FC  0BF0               	andlw	-16
  5617   0046FE  090C               	iorlw	12
  5618   004700  6F26               	movwf	38,b	;volatile
  5619   004702                     
  5620                           ; BSR set to: 15
  5621                           ;dc_motor.c: 60:     CCP3CONbits.EN=1;
  5622   004702  8F26               	bsf	38,7,b	;volatile
  5623   004704                     
  5624                           ; BSR set to: 15
  5625                           ;dc_motor.c: 62:     CCP4CONbits.FMT=1;
  5626   004704  8922               	bsf	34,4,b	;volatile
  5627                           
  5628                           ;dc_motor.c: 63:     CCP4CONbits.CCP4MODE=0b1100;
  5629   004706  5122               	movf	34,w,b	;volatile
  5630   004708  0BF0               	andlw	-16
  5631   00470A  090C               	iorlw	12
  5632   00470C  6F22               	movwf	34,b	;volatile
  5633   00470E                     
  5634                           ; BSR set to: 15
  5635                           ;dc_motor.c: 64:     CCP4CONbits.EN=1;
  5636   00470E  8F22               	bsf	34,7,b	;volatile
  5637   004710                     
  5638                           ; BSR set to: 15
  5639   004710  0012               	return		;funcret
  5640   004712                     __end_of_initDCmotorsPWM:
  5641                           	callstack 0
  5642                           
  5643 ;; *************** function _color_detect *****************
  5644 ;; Defined at:
  5645 ;;		line 116 in file "color.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  HSV             6   19[COMRAM] struct HSV_val
  5648 ;;  red             6   25[COMRAM] struct HSV_calib
  5649 ;;  green           6   31[COMRAM] struct HSV_calib
  5650 ;;  blue            6   37[COMRAM] struct HSV_calib
  5651 ;;  yellow          6   43[COMRAM] struct HSV_calib
  5652 ;;  pink            6   49[COMRAM] struct HSV_calib
  5653 ;;  orange          6   55[COMRAM] struct HSV_calib
  5654 ;;  lightblue       6   61[COMRAM] struct HSV_calib
  5655 ;;  white           6   67[COMRAM] struct HSV_calib
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  color           1   73[COMRAM] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      unsigned char 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5667 ;;      Params:        54       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5669 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5670 ;;      Totals:        55      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5671 ;;Total ram usage:       68 bytes
  5672 ;; Hardware stack levels used: 1
  5673 ;; Hardware stack levels required when called: 6
  5674 ;; This function calls:
  5675 ;;		_max
  5676 ;;		_min
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text12
  5683   002FA8                     __ptext12:
  5684                           	callstack 0
  5685   002FA8                     _color_detect:
  5686                           	callstack 24
  5687   002FA8                     
  5688                           ;color.c: 116: unsigned char color_detect(HSV_val HSV, HSV_calib red, HSV_calib green, H
      +                          SV_calib blue, HSV_calib yellow, HSV_calib pink, HSV_calib orange, HSV_calib lightblue, 
      +                          HSV_calib white);color.c: 117: {;color.c: 118:     unsigned char color=9;
  5689   002FA8  0E09               	movlw	9
  5690   002FAA  6E4A               	movwf	color_detect@color^0,c
  5691   002FAC                     
  5692                           ;color.c: 121:     if (min(green.H,lightblue.H)-2000 < HSV.H && HSV.H < max(green.H,ligh
      +                          tblue.H)+2000) {
  5693   002FAC  C020  F010         	movff	color_detect@green,min@a
  5694   002FB0  C021  F011         	movff	color_detect@green+1,min@a+1
  5695   002FB4  C03E  F012         	movff	color_detect@lightblue,min@b
  5696   002FB8  C03F  F013         	movff	color_detect@lightblue+1,min@b+1
  5697   002FBC  ECDD  F024         	call	_min	;wreg free
  5698   002FC0  0E30               	movlw	48
  5699   002FC2  2410               	addwf	?_min^0,w,c
  5700   002FC4  0100               	movlb	0	; () banked
  5701   002FC6  6F60               	movwf	??_color_detect& (0+255),b
  5702   002FC8  0EF8               	movlw	248
  5703   002FCA  2011               	addwfc	(?_min+1)^0,w,c
  5704   002FCC  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5705   002FCE  5014               	movf	color_detect@HSV^0,w,c
  5706   002FD0  5D60               	subwf	??_color_detect& (0+255),w,b
  5707   002FD2  5015               	movf	(color_detect@HSV+1)^0,w,c
  5708   002FD4  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5709   002FD6  B0D8               	btfsc	status,0,c
  5710   002FD8  EFF0  F017         	goto	u2961
  5711   002FDC  EFF2  F017         	goto	u2960
  5712   002FE0                     u2961:
  5713   002FE0  EF29  F018         	goto	l4056
  5714   002FE4                     u2960:
  5715   002FE4                     
  5716                           ; BSR set to: 0
  5717   002FE4  C020  F010         	movff	color_detect@green,max@a
  5718   002FE8  C021  F011         	movff	color_detect@green+1,max@a+1
  5719   002FEC  C03E  F012         	movff	color_detect@lightblue,max@b
  5720   002FF0  C03F  F013         	movff	color_detect@lightblue+1,max@b+1
  5721   002FF4  ECF3  F024         	call	_max	;wreg free
  5722   002FF8  0ED0               	movlw	208
  5723   002FFA  2410               	addwf	?_max^0,w,c
  5724   002FFC  0100               	movlb	0	; () banked
  5725   002FFE  6F60               	movwf	??_color_detect& (0+255),b
  5726   003000  0E07               	movlw	7
  5727   003002  2011               	addwfc	(?_max+1)^0,w,c
  5728   003004  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5729   003006  5160               	movf	??_color_detect& (0+255),w,b
  5730   003008  5C14               	subwf	color_detect@HSV^0,w,c
  5731   00300A  5161               	movf	(??_color_detect+1)& (0+255),w,b
  5732   00300C  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5733   00300E  B0D8               	btfsc	status,0,c
  5734   003010  EF0C  F018         	goto	u2971
  5735   003014  EF0E  F018         	goto	u2970
  5736   003018                     u2971:
  5737   003018  EF29  F018         	goto	l4056
  5738   00301C                     u2970:
  5739   00301C                     
  5740                           ; BSR set to: 0
  5741                           ;color.c: 122:         if (HSV.S > lightblue.S + 500){color = 2;}
  5742   00301C  0EF4               	movlw	244
  5743   00301E  2440               	addwf	(color_detect@lightblue+2)^0,w,c
  5744   003020  6F60               	movwf	??_color_detect& (0+255),b
  5745   003022  0E01               	movlw	1
  5746   003024  2041               	addwfc	(color_detect@lightblue+3)^0,w,c
  5747   003026  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5748   003028  5016               	movf	(color_detect@HSV+2)^0,w,c
  5749   00302A  5D60               	subwf	??_color_detect& (0+255),w,b
  5750   00302C  5017               	movf	(color_detect@HSV+3)^0,w,c
  5751   00302E  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5752   003030  B0D8               	btfsc	status,0,c
  5753   003032  EF1D  F018         	goto	u2981
  5754   003036  EF1F  F018         	goto	u2980
  5755   00303A                     u2981:
  5756   00303A  EF23  F018         	goto	l4054
  5757   00303E                     u2980:
  5758   00303E                     
  5759                           ; BSR set to: 0
  5760   00303E  0E02               	movlw	2
  5761   003040  6E4A               	movwf	color_detect@color^0,c
  5762   003042  EFEA  F018         	goto	l4084
  5763   003046                     l4054:
  5764                           
  5765                           ; BSR set to: 0
  5766   003046  0E07               	movlw	7
  5767   003048  6E4A               	movwf	color_detect@color^0,c
  5768   00304A  EFEA  F018         	goto	l4084
  5769   00304E                     l164:
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;color.c: 124:     }
  5773   00304E  EFEA  F018         	goto	l4084
  5774   003052                     l4056:
  5775                           
  5776                           ; BSR set to: 0
  5777   003052  0E30               	movlw	48
  5778   003054  2426               	addwf	color_detect@blue^0,w,c
  5779   003056  6F60               	movwf	??_color_detect& (0+255),b
  5780   003058  0EF8               	movlw	248
  5781   00305A  2027               	addwfc	(color_detect@blue+1)^0,w,c
  5782   00305C  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5783   00305E  5014               	movf	color_detect@HSV^0,w,c
  5784   003060  5D60               	subwf	??_color_detect& (0+255),w,b
  5785   003062  5015               	movf	(color_detect@HSV+1)^0,w,c
  5786   003064  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5787   003066  B0D8               	btfsc	status,0,c
  5788   003068  EF38  F018         	goto	u2991
  5789   00306C  EF3A  F018         	goto	u2990
  5790   003070                     u2991:
  5791   003070  EF4F  F018         	goto	l4062
  5792   003074                     u2990:
  5793   003074                     
  5794                           ; BSR set to: 0
  5795   003074  0ED0               	movlw	208
  5796   003076  2426               	addwf	color_detect@blue^0,w,c
  5797   003078  6F60               	movwf	??_color_detect& (0+255),b
  5798   00307A  0E07               	movlw	7
  5799   00307C  2027               	addwfc	(color_detect@blue+1)^0,w,c
  5800   00307E  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5801   003080  5160               	movf	??_color_detect& (0+255),w,b
  5802   003082  5C14               	subwf	color_detect@HSV^0,w,c
  5803   003084  5161               	movf	(??_color_detect+1)& (0+255),w,b
  5804   003086  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5805   003088  B0D8               	btfsc	status,0,c
  5806   00308A  EF49  F018         	goto	u3001
  5807   00308E  EF4B  F018         	goto	u3000
  5808   003092                     u3001:
  5809   003092  EF4F  F018         	goto	l4062
  5810   003096                     u3000:
  5811   003096                     
  5812                           ; BSR set to: 0
  5813   003096  0E03               	movlw	3
  5814   003098  6E4A               	movwf	color_detect@color^0,c
  5815   00309A  EFEA  F018         	goto	l4084
  5816   00309E                     l4062:
  5817                           
  5818                           ; BSR set to: 0
  5819   00309E  C02C  F010         	movff	color_detect@yellow,min@a
  5820   0030A2  C02D  F011         	movff	color_detect@yellow+1,min@a+1
  5821   0030A6  C032  F012         	movff	color_detect@pink,min@b
  5822   0030AA  C033  F013         	movff	color_detect@pink+1,min@b+1
  5823   0030AE  ECDD  F024         	call	_min	;wreg free
  5824   0030B2  0E18               	movlw	24
  5825   0030B4  2410               	addwf	?_min^0,w,c
  5826   0030B6  0100               	movlb	0	; () banked
  5827   0030B8  6F60               	movwf	??_color_detect& (0+255),b
  5828   0030BA  0EFC               	movlw	252
  5829   0030BC  2011               	addwfc	(?_min+1)^0,w,c
  5830   0030BE  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5831   0030C0  5014               	movf	color_detect@HSV^0,w,c
  5832   0030C2  5D60               	subwf	??_color_detect& (0+255),w,b
  5833   0030C4  5015               	movf	(color_detect@HSV+1)^0,w,c
  5834   0030C6  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5835   0030C8  B0D8               	btfsc	status,0,c
  5836   0030CA  EF69  F018         	goto	u3011
  5837   0030CE  EF6B  F018         	goto	u3010
  5838   0030D2                     u3011:
  5839   0030D2  EFA0  F018         	goto	l4072
  5840   0030D6                     u3010:
  5841   0030D6                     
  5842                           ; BSR set to: 0
  5843   0030D6  C02C  F010         	movff	color_detect@yellow,max@a
  5844   0030DA  C02D  F011         	movff	color_detect@yellow+1,max@a+1
  5845   0030DE  C032  F012         	movff	color_detect@pink,max@b
  5846   0030E2  C033  F013         	movff	color_detect@pink+1,max@b+1
  5847   0030E6  ECF3  F024         	call	_max	;wreg free
  5848   0030EA  0EE8               	movlw	232
  5849   0030EC  2410               	addwf	?_max^0,w,c
  5850   0030EE  0100               	movlb	0	; () banked
  5851   0030F0  6F60               	movwf	??_color_detect& (0+255),b
  5852   0030F2  0E03               	movlw	3
  5853   0030F4  2011               	addwfc	(?_max+1)^0,w,c
  5854   0030F6  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5855   0030F8  5160               	movf	??_color_detect& (0+255),w,b
  5856   0030FA  5C14               	subwf	color_detect@HSV^0,w,c
  5857   0030FC  5161               	movf	(??_color_detect+1)& (0+255),w,b
  5858   0030FE  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5859   003100  B0D8               	btfsc	status,0,c
  5860   003102  EF85  F018         	goto	u3021
  5861   003106  EF87  F018         	goto	u3020
  5862   00310A                     u3021:
  5863   00310A  EFA0  F018         	goto	l4072
  5864   00310E                     u3020:
  5865   00310E                     
  5866                           ; BSR set to: 0
  5867                           ;color.c: 131:         if (HSV.S > pink.S + 500){color = 4;}
  5868   00310E  0EF4               	movlw	244
  5869   003110  2434               	addwf	(color_detect@pink+2)^0,w,c
  5870   003112  6F60               	movwf	??_color_detect& (0+255),b
  5871   003114  0E01               	movlw	1
  5872   003116  2035               	addwfc	(color_detect@pink+3)^0,w,c
  5873   003118  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5874   00311A  5016               	movf	(color_detect@HSV+2)^0,w,c
  5875   00311C  5D60               	subwf	??_color_detect& (0+255),w,b
  5876   00311E  5017               	movf	(color_detect@HSV+3)^0,w,c
  5877   003120  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5878   003122  B0D8               	btfsc	status,0,c
  5879   003124  EF96  F018         	goto	u3031
  5880   003128  EF98  F018         	goto	u3030
  5881   00312C                     u3031:
  5882   00312C  EF9C  F018         	goto	l4070
  5883   003130                     u3030:
  5884   003130                     
  5885                           ; BSR set to: 0
  5886   003130  0E04               	movlw	4
  5887   003132  6E4A               	movwf	color_detect@color^0,c
  5888   003134  EFEA  F018         	goto	l4084
  5889   003138                     l4070:
  5890                           
  5891                           ; BSR set to: 0
  5892   003138  0E05               	movlw	5
  5893   00313A  6E4A               	movwf	color_detect@color^0,c
  5894   00313C  EFEA  F018         	goto	l4084
  5895   003140                     l4072:
  5896                           
  5897                           ; BSR set to: 0
  5898   003140  0E0C               	movlw	12
  5899   003142  2438               	addwf	color_detect@orange^0,w,c
  5900   003144  6F60               	movwf	??_color_detect& (0+255),b
  5901   003146  0EFE               	movlw	254
  5902   003148  2039               	addwfc	(color_detect@orange+1)^0,w,c
  5903   00314A  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5904   00314C  5014               	movf	color_detect@HSV^0,w,c
  5905   00314E  5D60               	subwf	??_color_detect& (0+255),w,b
  5906   003150  5015               	movf	(color_detect@HSV+1)^0,w,c
  5907   003152  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5908   003154  B0D8               	btfsc	status,0,c
  5909   003156  EFAF  F018         	goto	u3041
  5910   00315A  EFB1  F018         	goto	u3040
  5911   00315E                     u3041:
  5912   00315E  EFC6  F018         	goto	l4078
  5913   003162                     u3040:
  5914   003162                     
  5915                           ; BSR set to: 0
  5916   003162  0EF4               	movlw	244
  5917   003164  2438               	addwf	color_detect@orange^0,w,c
  5918   003166  6F60               	movwf	??_color_detect& (0+255),b
  5919   003168  0E01               	movlw	1
  5920   00316A  2039               	addwfc	(color_detect@orange+1)^0,w,c
  5921   00316C  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5922   00316E  5160               	movf	??_color_detect& (0+255),w,b
  5923   003170  5C14               	subwf	color_detect@HSV^0,w,c
  5924   003172  5161               	movf	(??_color_detect+1)& (0+255),w,b
  5925   003174  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5926   003176  B0D8               	btfsc	status,0,c
  5927   003178  EFC0  F018         	goto	u3051
  5928   00317C  EFC2  F018         	goto	u3050
  5929   003180                     u3051:
  5930   003180  EFC6  F018         	goto	l4078
  5931   003184                     u3050:
  5932   003184                     
  5933                           ; BSR set to: 0
  5934   003184  0E06               	movlw	6
  5935   003186  6E4A               	movwf	color_detect@color^0,c
  5936   003188  EFEA  F018         	goto	l4084
  5937   00318C                     l4078:
  5938                           
  5939                           ; BSR set to: 0
  5940   00318C  0E0C               	movlw	12
  5941   00318E  2444               	addwf	color_detect@white^0,w,c
  5942   003190  6F60               	movwf	??_color_detect& (0+255),b
  5943   003192  0EFE               	movlw	254
  5944   003194  2045               	addwfc	(color_detect@white+1)^0,w,c
  5945   003196  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5946   003198  5014               	movf	color_detect@HSV^0,w,c
  5947   00319A  5D60               	subwf	??_color_detect& (0+255),w,b
  5948   00319C  5015               	movf	(color_detect@HSV+1)^0,w,c
  5949   00319E  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  5950   0031A0  B0D8               	btfsc	status,0,c
  5951   0031A2  EFD5  F018         	goto	u3061
  5952   0031A6  EFD7  F018         	goto	u3060
  5953   0031AA                     u3061:
  5954   0031AA  EF27  F018         	goto	l164
  5955   0031AE                     u3060:
  5956   0031AE                     
  5957                           ; BSR set to: 0
  5958   0031AE  0EF4               	movlw	244
  5959   0031B0  2444               	addwf	color_detect@white^0,w,c
  5960   0031B2  6F60               	movwf	??_color_detect& (0+255),b
  5961   0031B4  0E01               	movlw	1
  5962   0031B6  2045               	addwfc	(color_detect@white+1)^0,w,c
  5963   0031B8  6F61               	movwf	(??_color_detect+1)& (0+255),b
  5964   0031BA  5160               	movf	??_color_detect& (0+255),w,b
  5965   0031BC  5C14               	subwf	color_detect@HSV^0,w,c
  5966   0031BE  5161               	movf	(??_color_detect+1)& (0+255),w,b
  5967   0031C0  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5968   0031C2  B0D8               	btfsc	status,0,c
  5969   0031C4  EFE6  F018         	goto	u3071
  5970   0031C8  EFE8  F018         	goto	u3070
  5971   0031CC                     u3071:
  5972   0031CC  EF27  F018         	goto	l164
  5973   0031D0                     u3070:
  5974   0031D0                     
  5975                           ; BSR set to: 0
  5976   0031D0  0E08               	movlw	8
  5977   0031D2  6E4A               	movwf	color_detect@color^0,c
  5978   0031D4                     l4084:
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;color.c: 142:     if (red.H > 30000){
  5982   0031D4  0E31               	movlw	49
  5983   0031D6  5C1A               	subwf	color_detect@red^0,w,c
  5984   0031D8  0E75               	movlw	117
  5985   0031DA  581B               	subwfb	(color_detect@red+1)^0,w,c
  5986   0031DC  A0D8               	btfss	status,0,c
  5987   0031DE  EFF3  F018         	goto	u3081
  5988   0031E2  EFF5  F018         	goto	u3080
  5989   0031E6                     u3081:
  5990   0031E6  EF49  F019         	goto	l4096
  5991   0031EA                     u3080:
  5992   0031EA                     
  5993                           ; BSR set to: 0
  5994                           ;color.c: 143:         if(((red.H)-1000 < HSV.H && HSV.H < 36000) || (0 < HSV.H && HSV.H
      +                           < 1000 + red.H -36000)) {color = 1;}
  5995   0031EA  0E18               	movlw	24
  5996   0031EC  241A               	addwf	color_detect@red^0,w,c
  5997   0031EE  6F60               	movwf	??_color_detect& (0+255),b
  5998   0031F0  0EFC               	movlw	252
  5999   0031F2  201B               	addwfc	(color_detect@red+1)^0,w,c
  6000   0031F4  6F61               	movwf	(??_color_detect+1)& (0+255),b
  6001   0031F6  5014               	movf	color_detect@HSV^0,w,c
  6002   0031F8  5D60               	subwf	??_color_detect& (0+255),w,b
  6003   0031FA  5015               	movf	(color_detect@HSV+1)^0,w,c
  6004   0031FC  5961               	subwfb	(??_color_detect+1)& (0+255),w,b
  6005   0031FE  B0D8               	btfsc	status,0,c
  6006   003200  EF04  F019         	goto	u3091
  6007   003204  EF06  F019         	goto	u3090
  6008   003208                     u3091:
  6009   003208  EF11  F019         	goto	l4090
  6010   00320C                     u3090:
  6011   00320C                     
  6012                           ; BSR set to: 0
  6013   00320C  0EA0               	movlw	160
  6014   00320E  5C14               	subwf	color_detect@HSV^0,w,c
  6015   003210  0E8C               	movlw	140
  6016   003212  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6017   003214  A0D8               	btfss	status,0,c
  6018   003216  EF0F  F019         	goto	u3101
  6019   00321A  EF11  F019         	goto	u3100
  6020   00321E                     u3101:
  6021   00321E  EF47  F019         	goto	l4094
  6022   003222                     u3100:
  6023   003222                     l4090:
  6024                           
  6025                           ; BSR set to: 0
  6026   003222  5014               	movf	color_detect@HSV^0,w,c
  6027   003224  1015               	iorwf	(color_detect@HSV+1)^0,w,c
  6028   003226  B4D8               	btfsc	status,2,c
  6029   003228  EF18  F019         	goto	u3111
  6030   00322C  EF1A  F019         	goto	u3110
  6031   003230                     u3111:
  6032   003230  EF49  F019         	goto	l4096
  6033   003234                     u3110:
  6034   003234                     
  6035                           ; BSR set to: 0
  6036   003234  0EE8               	movlw	232
  6037   003236  241A               	addwf	color_detect@red^0,w,c
  6038   003238  6F60               	movwf	??_color_detect& (0+255),b
  6039   00323A  0E03               	movlw	3
  6040   00323C  201B               	addwfc	(color_detect@red+1)^0,w,c
  6041   00323E  6F61               	movwf	(??_color_detect+1)& (0+255),b
  6042   003240  6B62               	clrf	(??_color_detect+2)& (0+255),b
  6043   003242  6B63               	clrf	(??_color_detect+3)& (0+255),b
  6044   003244  0E60               	movlw	96
  6045   003246  2560               	addwf	??_color_detect& (0+255),w,b
  6046   003248  6F64               	movwf	(??_color_detect+4)& (0+255),b
  6047   00324A  0E73               	movlw	115
  6048   00324C  2161               	addwfc	(??_color_detect+1)& (0+255),w,b
  6049   00324E  6F65               	movwf	(??_color_detect+5)& (0+255),b
  6050   003250  0EFF               	movlw	255
  6051   003252  2162               	addwfc	(??_color_detect+2)& (0+255),w,b
  6052   003254  6F66               	movwf	(??_color_detect+6)& (0+255),b
  6053   003256  0EFF               	movlw	255
  6054   003258  2163               	addwfc	(??_color_detect+3)& (0+255),w,b
  6055   00325A  6F67               	movwf	(??_color_detect+7)& (0+255),b
  6056   00325C  5014               	movf	color_detect@HSV^0,w,c
  6057   00325E  6F68               	movwf	(??_color_detect+8)& (0+255),b
  6058   003260  5015               	movf	(color_detect@HSV+1)^0,w,c
  6059   003262  6F69               	movwf	(??_color_detect+9)& (0+255),b
  6060   003264  6B6A               	clrf	(??_color_detect+10)& (0+255),b
  6061   003266  6B6B               	clrf	(??_color_detect+11)& (0+255),b
  6062   003268  5164               	movf	(??_color_detect+4)& (0+255),w,b
  6063   00326A  5D68               	subwf	(??_color_detect+8)& (0+255),w,b
  6064   00326C  5165               	movf	(??_color_detect+5)& (0+255),w,b
  6065   00326E  5969               	subwfb	(??_color_detect+9)& (0+255),w,b
  6066   003270  5166               	movf	(??_color_detect+6)& (0+255),w,b
  6067   003272  596A               	subwfb	(??_color_detect+10)& (0+255),w,b
  6068   003274  516B               	movf	(??_color_detect+11)& (0+255),w,b
  6069   003276  0A80               	xorlw	128
  6070   003278  6F6C               	movwf	(??_color_detect+12)& (0+255),b
  6071   00327A  5167               	movf	(??_color_detect+7)& (0+255),w,b
  6072   00327C  0A80               	xorlw	128
  6073   00327E  596C               	subwfb	(??_color_detect+12)& (0+255),w,b
  6074   003280  B0D8               	btfsc	status,0,c
  6075   003282  EF45  F019         	goto	u3121
  6076   003286  EF47  F019         	goto	u3120
  6077   00328A                     u3121:
  6078   00328A  EF49  F019         	goto	l4096
  6079   00328E                     u3120:
  6080   00328E                     l4094:
  6081                           
  6082                           ; BSR set to: 0
  6083   00328E  0E01               	movlw	1
  6084   003290  6E4A               	movwf	color_detect@color^0,c
  6085   003292                     l4096:
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;color.c: 146:     if (red.H < 10000){
  6089   003292  0E10               	movlw	16
  6090   003294  5C1A               	subwf	color_detect@red^0,w,c
  6091   003296  0E27               	movlw	39
  6092   003298  581B               	subwfb	(color_detect@red+1)^0,w,c
  6093   00329A  B0D8               	btfsc	status,0,c
  6094   00329C  EF52  F019         	goto	u3131
  6095   0032A0  EF54  F019         	goto	u3130
  6096   0032A4                     u3131:
  6097   0032A4  EFA6  F019         	goto	l181
  6098   0032A8                     u3130:
  6099   0032A8                     
  6100                           ; BSR set to: 0
  6101                           ;color.c: 147:         if((36000 - 1000 + (red.H) < HSV.H && HSV.H < 36000) || (0 < HSV.
      +                          H && HSV.H < red.H + 1000)) {color = 1;}
  6102   0032A8  5014               	movf	color_detect@HSV^0,w,c
  6103   0032AA  6F60               	movwf	??_color_detect& (0+255),b
  6104   0032AC  5015               	movf	(color_detect@HSV+1)^0,w,c
  6105   0032AE  6F61               	movwf	(??_color_detect+1)& (0+255),b
  6106   0032B0  6B62               	clrf	(??_color_detect+2)& (0+255),b
  6107   0032B2  6B63               	clrf	(??_color_detect+3)& (0+255),b
  6108   0032B4  501A               	movf	color_detect@red^0,w,c
  6109   0032B6  6F64               	movwf	(??_color_detect+4)& (0+255),b
  6110   0032B8  501B               	movf	(color_detect@red+1)^0,w,c
  6111   0032BA  6F65               	movwf	(??_color_detect+5)& (0+255),b
  6112   0032BC  6B66               	clrf	(??_color_detect+6)& (0+255),b
  6113   0032BE  6B67               	clrf	(??_color_detect+7)& (0+255),b
  6114   0032C0  0EB8               	movlw	184
  6115   0032C2  2564               	addwf	(??_color_detect+4)& (0+255),w,b
  6116   0032C4  6F68               	movwf	(??_color_detect+8)& (0+255),b
  6117   0032C6  0E88               	movlw	136
  6118   0032C8  2165               	addwfc	(??_color_detect+5)& (0+255),w,b
  6119   0032CA  6F69               	movwf	(??_color_detect+9)& (0+255),b
  6120   0032CC  0E00               	movlw	0
  6121   0032CE  2166               	addwfc	(??_color_detect+6)& (0+255),w,b
  6122   0032D0  6F6A               	movwf	(??_color_detect+10)& (0+255),b
  6123   0032D2  0E00               	movlw	0
  6124   0032D4  2167               	addwfc	(??_color_detect+7)& (0+255),w,b
  6125   0032D6  6F6B               	movwf	(??_color_detect+11)& (0+255),b
  6126   0032D8  5160               	movf	??_color_detect& (0+255),w,b
  6127   0032DA  5D68               	subwf	(??_color_detect+8)& (0+255),w,b
  6128   0032DC  5161               	movf	(??_color_detect+1)& (0+255),w,b
  6129   0032DE  5969               	subwfb	(??_color_detect+9)& (0+255),w,b
  6130   0032E0  5162               	movf	(??_color_detect+2)& (0+255),w,b
  6131   0032E2  596A               	subwfb	(??_color_detect+10)& (0+255),w,b
  6132   0032E4  516B               	movf	(??_color_detect+11)& (0+255),w,b
  6133   0032E6  0A80               	xorlw	128
  6134   0032E8  6F6C               	movwf	(??_color_detect+12)& (0+255),b
  6135   0032EA  5163               	movf	(??_color_detect+3)& (0+255),w,b
  6136   0032EC  0A80               	xorlw	128
  6137   0032EE  596C               	subwfb	(??_color_detect+12)& (0+255),w,b
  6138   0032F0  B0D8               	btfsc	status,0,c
  6139   0032F2  EF7D  F019         	goto	u3141
  6140   0032F6  EF7F  F019         	goto	u3140
  6141   0032FA                     u3141:
  6142   0032FA  EF8A  F019         	goto	l4102
  6143   0032FE                     u3140:
  6144   0032FE                     
  6145                           ; BSR set to: 0
  6146   0032FE  0EA0               	movlw	160
  6147   003300  5C14               	subwf	color_detect@HSV^0,w,c
  6148   003302  0E8C               	movlw	140
  6149   003304  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6150   003306  A0D8               	btfss	status,0,c
  6151   003308  EF88  F019         	goto	u3151
  6152   00330C  EF8A  F019         	goto	u3150
  6153   003310                     u3151:
  6154   003310  EFA4  F019         	goto	l4106
  6155   003314                     u3150:
  6156   003314                     l4102:
  6157                           
  6158                           ; BSR set to: 0
  6159   003314  5014               	movf	color_detect@HSV^0,w,c
  6160   003316  1015               	iorwf	(color_detect@HSV+1)^0,w,c
  6161   003318  B4D8               	btfsc	status,2,c
  6162   00331A  EF91  F019         	goto	u3161
  6163   00331E  EF93  F019         	goto	u3160
  6164   003322                     u3161:
  6165   003322  EFA6  F019         	goto	l181
  6166   003326                     u3160:
  6167   003326                     
  6168                           ; BSR set to: 0
  6169   003326  0EE8               	movlw	232
  6170   003328  241A               	addwf	color_detect@red^0,w,c
  6171   00332A  6F60               	movwf	??_color_detect& (0+255),b
  6172   00332C  0E03               	movlw	3
  6173   00332E  201B               	addwfc	(color_detect@red+1)^0,w,c
  6174   003330  6F61               	movwf	(??_color_detect+1)& (0+255),b
  6175   003332  5160               	movf	??_color_detect& (0+255),w,b
  6176   003334  5C14               	subwf	color_detect@HSV^0,w,c
  6177   003336  5161               	movf	(??_color_detect+1)& (0+255),w,b
  6178   003338  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6179   00333A  B0D8               	btfsc	status,0,c
  6180   00333C  EFA2  F019         	goto	u3171
  6181   003340  EFA4  F019         	goto	u3170
  6182   003344                     u3171:
  6183   003344  EFA6  F019         	goto	l181
  6184   003348                     u3170:
  6185   003348                     l4106:
  6186                           
  6187                           ; BSR set to: 0
  6188   003348  0E01               	movlw	1
  6189   00334A  6E4A               	movwf	color_detect@color^0,c
  6190   00334C                     l181:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;color.c: 150:     return color;
  6194   00334C  504A               	movf	color_detect@color^0,w,c
  6195   00334E                     
  6196                           ; BSR set to: 0
  6197   00334E  0012               	return		;funcret
  6198   003350                     __end_of_color_detect:
  6199                           	callstack 0
  6200                           
  6201 ;; *************** function _color_click_init *****************
  6202 ;; Defined at:
  6203 ;;		line 7 in file "color.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;		None
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;		None
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;Total ram usage:        1 bytes
  6222 ;; Hardware stack levels used: 1
  6223 ;; Hardware stack levels required when called: 9
  6224 ;; This function calls:
  6225 ;;		_I2C_2_Master_Init
  6226 ;;		_color_clear_init_interrupts
  6227 ;;		_color_writetoaddr
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text13
  6234   00494C                     __ptext13:
  6235                           	callstack 0
  6236   00494C                     _color_click_init:
  6237                           	callstack 21
  6238   00494C                     
  6239                           ;color.c: 10:     I2C_2_Master_Init();
  6240   00494C  EC1F  F025         	call	_I2C_2_Master_Init	;wreg free
  6241   004950                     
  6242                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  6243   004950  0E01               	movlw	1
  6244   004952  6E12               	movwf	color_writetoaddr@value^0,c
  6245   004954  0E00               	movlw	0
  6246   004956  ECA8  F025         	call	_color_writetoaddr
  6247   00495A                     
  6248                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6249   00495A  0E3F               	movlw	63
  6250   00495C  6E22               	movwf	??_color_click_init^0,c
  6251   00495E  0E55               	movlw	85
  6252   004960                     u4587:
  6253   004960  2EE8               	decfsz	wreg,f,c
  6254   004962  D7FE               	bra	u4587
  6255   004964  2E22               	decfsz	??_color_click_init^0,f,c
  6256   004966  D7FC               	bra	u4587
  6257   004968  0000               	nop	
  6258   00496A                     
  6259                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  6260   00496A  0E03               	movlw	3
  6261   00496C  6E12               	movwf	color_writetoaddr@value^0,c
  6262   00496E  0E00               	movlw	0
  6263   004970  ECA8  F025         	call	_color_writetoaddr
  6264   004974                     
  6265                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  6266   004974  0ED5               	movlw	213
  6267   004976  6E12               	movwf	color_writetoaddr@value^0,c
  6268   004978  0E01               	movlw	1
  6269   00497A  ECA8  F025         	call	_color_writetoaddr
  6270   00497E                     
  6271                           ;color.c: 23:     color_clear_init_interrupts();
  6272   00497E  EC49  F022         	call	_color_clear_init_interrupts	;wreg free
  6273   004982  0012               	return		;funcret
  6274   004984                     __end_of_color_click_init:
  6275                           	callstack 0
  6276                           
  6277 ;; *************** function _color_clear_init_interrupts *****************
  6278 ;; Defined at:
  6279 ;;		line 27 in file "color.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  low_threshol    2   31[COMRAM] unsigned int 
  6284 ;;  high_thresho    2   29[COMRAM] unsigned int 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6295 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6297 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6298 ;;Total ram usage:        5 bytes
  6299 ;; Hardware stack levels used: 1
  6300 ;; Hardware stack levels required when called: 8
  6301 ;; This function calls:
  6302 ;;		_I2C_2_Master_Start
  6303 ;;		_I2C_2_Master_Stop
  6304 ;;		_I2C_2_Master_Write
  6305 ;;		___lwdiv
  6306 ;;		_color_writetoaddr
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;;		_color_click_init
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text14
  6314   004492                     __ptext14:
  6315                           	callstack 0
  6316   004492                     _color_clear_init_interrupts:
  6317                           	callstack 21
  6318   004492                     
  6319                           ;color.c: 29:     I2C_2_Master_Start();
  6320   004492  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  6321                           
  6322                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  6323   004496  0E52               	movlw	82
  6324   004498  EC16  F026         	call	_I2C_2_Master_Write
  6325                           
  6326                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
  6327   00449C  0EE6               	movlw	230
  6328   00449E  EC16  F026         	call	_I2C_2_Master_Write
  6329                           
  6330                           ;color.c: 32:     I2C_2_Master_Stop();
  6331   0044A2  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  6332                           
  6333                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/3);
  6334   0044A6  C0F9  F016         	movff	_ambient,___lwdiv@dividend
  6335   0044AA  C0FA  F017         	movff	_ambient+1,___lwdiv@dividend+1
  6336   0044AE  0E00               	movlw	0
  6337   0044B0  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  6338   0044B2  0E03               	movlw	3
  6339   0044B4  6E18               	movwf	___lwdiv@divisor^0,c
  6340   0044B6  EC89  F023         	call	___lwdiv	;wreg free
  6341   0044BA  0100               	movlb	0	; () banked
  6342   0044BC  51F9               	movf	_ambient& (0+255),w,b
  6343   0044BE  2416               	addwf	?___lwdiv^0,w,c
  6344   0044C0  6E1E               	movwf	color_clear_init_interrupts@high_threshold^0,c
  6345   0044C2  51FA               	movf	(_ambient+1)& (0+255),w,b
  6346   0044C4  2017               	addwfc	(?___lwdiv+1)^0,w,c
  6347   0044C6  6E1F               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  6348                           
  6349                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
  6350   0044C8  C0F9  F016         	movff	_ambient,___lwdiv@dividend
  6351   0044CC  C0FA  F017         	movff	_ambient+1,___lwdiv@dividend+1
  6352   0044D0  0E00               	movlw	0
  6353   0044D2  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  6354   0044D4  0E14               	movlw	20
  6355   0044D6  6E18               	movwf	___lwdiv@divisor^0,c
  6356   0044D8  EC89  F023         	call	___lwdiv	;wreg free
  6357   0044DC  5016               	movf	?___lwdiv^0,w,c
  6358   0044DE  0100               	movlb	0	; () banked
  6359   0044E0  5DF9               	subwf	_ambient& (0+255),w,b
  6360   0044E2  6E20               	movwf	color_clear_init_interrupts@low_threshold^0,c
  6361   0044E4  5017               	movf	(?___lwdiv+1)^0,w,c
  6362   0044E6  59FA               	subwfb	(_ambient+1)& (0+255),w,b
  6363   0044E8  6E21               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  6364                           
  6365                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
  6366   0044EA  0E13               	movlw	19
  6367   0044EC  6E12               	movwf	color_writetoaddr@value^0,c
  6368   0044EE  0E00               	movlw	0
  6369   0044F0  ECA8  F025         	call	_color_writetoaddr
  6370   0044F4                     
  6371                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6372   0044F4  0E3F               	movlw	63
  6373   0044F6  6E1D               	movwf	??_color_clear_init_interrupts^0,c
  6374   0044F8  0E55               	movlw	85
  6375   0044FA                     u4597:
  6376   0044FA  2EE8               	decfsz	wreg,f,c
  6377   0044FC  D7FE               	bra	u4597
  6378   0044FE  2E1D               	decfsz	??_color_clear_init_interrupts^0,f,c
  6379   004500  D7FC               	bra	u4597
  6380   004502  0000               	nop	
  6381   004504                     
  6382                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
  6383   004504  501F               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  6384   004506  6E12               	movwf	color_writetoaddr@value^0,c
  6385   004508  0E07               	movlw	7
  6386   00450A  ECA8  F025         	call	_color_writetoaddr
  6387   00450E                     
  6388                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  6389   00450E  C01E  F012         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  6390   004512  0E06               	movlw	6
  6391   004514  ECA8  F025         	call	_color_writetoaddr
  6392   004518                     
  6393                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
  6394   004518  5021               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  6395   00451A  6E12               	movwf	color_writetoaddr@value^0,c
  6396   00451C  0E05               	movlw	5
  6397   00451E  ECA8  F025         	call	_color_writetoaddr
  6398   004522                     
  6399                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  6400   004522  C020  F012         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  6401   004526  0E04               	movlw	4
  6402   004528  ECA8  F025         	call	_color_writetoaddr
  6403   00452C                     
  6404                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
  6405   00452C  0E03               	movlw	3
  6406   00452E  6E12               	movwf	color_writetoaddr@value^0,c
  6407   004530  0E0C               	movlw	12
  6408   004532  ECA8  F025         	call	_color_writetoaddr
  6409   004536  0012               	return		;funcret
  6410   004538                     __end_of_color_clear_init_interrupts:
  6411                           	callstack 0
  6412                           
  6413 ;; *************** function _color_writetoaddr *****************
  6414 ;; Defined at:
  6415 ;;		line 53 in file "color.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  address         1    wreg     unsigned char 
  6418 ;;  value           1   17[COMRAM] unsigned char 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  address         1   18[COMRAM] unsigned char 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, status,2, status,0, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6430 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;Total ram usage:        2 bytes
  6435 ;; Hardware stack levels used: 1
  6436 ;; Hardware stack levels required when called: 7
  6437 ;; This function calls:
  6438 ;;		_I2C_2_Master_Start
  6439 ;;		_I2C_2_Master_Stop
  6440 ;;		_I2C_2_Master_Write
  6441 ;; This function is called by:
  6442 ;;		_color_click_init
  6443 ;;		_color_clear_init_interrupts
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text15
  6448   004B50                     __ptext15:
  6449                           	callstack 0
  6450   004B50                     _color_writetoaddr:
  6451                           	callstack 22
  6452                           
  6453                           ;incstack = 0
  6454                           ;color_writetoaddr@address stored from wreg
  6455   004B50  6E13               	movwf	color_writetoaddr@address^0,c
  6456   004B52                     
  6457                           ;color.c: 54:     I2C_2_Master_Start();
  6458   004B52  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  6459                           
  6460                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
  6461   004B56  0E52               	movlw	82
  6462   004B58  EC16  F026         	call	_I2C_2_Master_Write
  6463                           
  6464                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
  6465   004B5C  5013               	movf	color_writetoaddr@address^0,w,c
  6466   004B5E  0980               	iorlw	128
  6467   004B60  EC16  F026         	call	_I2C_2_Master_Write
  6468                           
  6469                           ;color.c: 57:     I2C_2_Master_Write(value);
  6470   004B64  5012               	movf	color_writetoaddr@value^0,w,c
  6471   004B66  EC16  F026         	call	_I2C_2_Master_Write
  6472                           
  6473                           ;color.c: 58:     I2C_2_Master_Stop();
  6474   004B6A  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  6475   004B6E  0012               	return		;funcret
  6476   004B70                     __end_of_color_writetoaddr:
  6477                           	callstack 0
  6478                           
  6479 ;; *************** function _I2C_2_Master_Init *****************
  6480 ;; Defined at:
  6481 ;;		line 4 in file "i2c.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 5
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_color_click_init
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text16
  6510   004A3E                     __ptext16:
  6511                           	callstack 0
  6512   004A3E                     _I2C_2_Master_Init:
  6513                           	callstack 24
  6514   004A3E                     
  6515                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6516   004A3E  010E               	movlb	14	; () banked
  6517   004A40  51D9               	movf	217,w,b	;volatile
  6518   004A42  0BF0               	andlw	-16
  6519   004A44  0908               	iorlw	8
  6520   004A46  6FD9               	movwf	217,b	;volatile
  6521   004A48                     
  6522                           ; BSR set to: 14
  6523                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6524   004A48  8BD9               	bsf	217,5,b	;volatile
  6525                           
  6526                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6527   004A4A  0E9F               	movlw	159
  6528   004A4C  6FD6               	movwf	214,b	;volatile
  6529   004A4E                     
  6530                           ; BSR set to: 14
  6531                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6532   004A4E  8A84               	bsf	132,5,c	;volatile
  6533   004A50                     
  6534                           ; BSR set to: 14
  6535                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6536   004A50  8C84               	bsf	132,6,c	;volatile
  6537   004A52                     
  6538                           ; BSR set to: 14
  6539                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6540   004A52  9BA7               	bcf	167,5,b	;volatile
  6541   004A54                     
  6542                           ; BSR set to: 14
  6543                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6544   004A54  9DA7               	bcf	167,6,b	;volatile
  6545                           
  6546                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6547   004A56  0E1D               	movlw	29
  6548   004A58  6F1D               	movwf	29,b	;volatile
  6549                           
  6550                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6551   004A5A  0E1E               	movlw	30
  6552   004A5C  6F1C               	movwf	28,b	;volatile
  6553                           
  6554                           ;i2c.c: 18:   RD5PPS=0x1C;
  6555   004A5E  0E1C               	movlw	28
  6556   004A60  6F6F               	movwf	111,b	;volatile
  6557                           
  6558                           ;i2c.c: 19:   RD6PPS=0x1B;
  6559   004A62  0E1B               	movlw	27
  6560   004A64  6F70               	movwf	112,b	;volatile
  6561   004A66                     
  6562                           ; BSR set to: 14
  6563   004A66  0012               	return		;funcret
  6564   004A68                     __end_of_I2C_2_Master_Init:
  6565                           	callstack 0
  6566                           
  6567 ;; *************** function _color_calibration *****************
  6568 ;; Defined at:
  6569 ;;		line 153 in file "color.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  RGBC            2   22[BANK0 ] PTR struct RGBC_val
  6572 ;;		 -> main@RGBC(8), 
  6573 ;;  HSV             2   24[BANK0 ] PTR struct HSV_val
  6574 ;;		 -> main@HSV(6), 
  6575 ;;  red             2   26[BANK0 ] PTR struct HSV_calib
  6576 ;;		 -> main@red(6), 
  6577 ;;  green           2   28[BANK0 ] PTR struct HSV_calib
  6578 ;;		 -> main@green(6), 
  6579 ;;  blue            2   30[BANK0 ] PTR struct HSV_calib
  6580 ;;		 -> main@blue(6), 
  6581 ;;  yellow          2   32[BANK0 ] PTR struct HSV_calib
  6582 ;;		 -> main@yellow(6), 
  6583 ;;  pink            2   34[BANK0 ] PTR struct HSV_calib
  6584 ;;		 -> main@pink(6), 
  6585 ;;  orange          2   36[BANK0 ] PTR struct HSV_calib
  6586 ;;		 -> main@orange(6), 
  6587 ;;  lightblue       2   38[BANK0 ] PTR struct HSV_calib
  6588 ;;		 -> main@lightblue(6), 
  6589 ;;  white           2   40[BANK0 ] PTR struct HSV_calib
  6590 ;;		 -> main@white(6), 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6602 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;      Totals:         2      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;Total ram usage:       22 bytes
  6607 ;; Hardware stack levels used: 1
  6608 ;; Hardware stack levels required when called: 8
  6609 ;; This function calls:
  6610 ;;		_color_read
  6611 ;;		_rgb_2_hsv
  6612 ;;		_white_Light
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text17
  6619   001CE8                     __ptext17:
  6620                           	callstack 0
  6621   001CE8                     _color_calibration:
  6622                           	callstack 22
  6623   001CE8                     
  6624                           ;color.c: 153: void color_calibration(RGBC_val *RGBC, HSV_val *HSV, HSV_calib *red, HSV_
      +                          calib *green, HSV_calib *blue, HSV_calib *yellow, HSV_calib *pink, HSV_calib *orange, HS
      +                          V_calib *lightblue, HSV_calib *white);color.c: 154: {;color.c: 155:     white_Light(1);
  6625   001CE8  0E01               	movlw	1
  6626   001CEA  EC96  F025         	call	_white_Light
  6627   001CEE                     
  6628                           ;color.c: 156:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6629   001CEE  8680               	bsf	128,3,c	;volatile
  6630   001CF0  8E7C               	bsf	124,7,c	;volatile
  6631   001CF2                     l190:
  6632   001CF2  B48E               	btfsc	142,2,c	;volatile
  6633   001CF4  EF7E  F00E         	goto	u2641
  6634   001CF8  EF80  F00E         	goto	u2640
  6635   001CFC                     u2641:
  6636   001CFC  EF79  F00E         	goto	l190
  6637   001D00                     u2640:
  6638   001D00                     
  6639                           ;color.c: 160:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6640   001D00  9680               	bcf	128,3,c	;volatile
  6641   001D02  9E7C               	bcf	124,7,c	;volatile
  6642   001D04                     
  6643                           ;color.c: 161:     color_read(RGBC);
  6644   001D04  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6645   001D08  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6646   001D0C  ECED  F01B         	call	_color_read	;wreg free
  6647   001D10                     
  6648                           ;color.c: 162:     rgb_2_hsv(*RGBC, HSV);
  6649   001D10  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  6650   001D14  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6651   001D18  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  6652   001D1C  0E07               	movlw	7
  6653   001D1E                     u2651:
  6654   001D1E  CFDB FFEB          	movff	plusw2,plusw0
  6655   001D22  06E8               	decf	wreg,f,c
  6656   001D24  E2FC               	bc	u2651
  6657   001D26  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  6658   001D2A  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  6659   001D2E  EC52  F011         	call	_rgb_2_hsv	;wreg free
  6660   001D32                     
  6661                           ;color.c: 163:     red->H = HSV->H;
  6662   001D32  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  6663   001D36  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  6664   001D3A  C07A  FFE1         	movff	color_calibration@red,fsr1l
  6665   001D3E  C07B  FFE2         	movff	color_calibration@red+1,fsr1h
  6666   001D42  CFDE FFE6          	movff	postinc2,postinc1
  6667   001D46  CFDD FFE5          	movff	postdec2,postdec1
  6668   001D4A                     
  6669                           ;color.c: 164:     red->S = HSV->S;
  6670   001D4A  0100               	movlb	0	; () banked
  6671   001D4C  EE20 F002          	lfsr	2,2
  6672   001D50  5178               	movf	color_calibration@HSV& (0+255),w,b
  6673   001D52  26D9               	addwf	fsr2l,f,c
  6674   001D54  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6675   001D56  22DA               	addwfc	fsr2h,f,c
  6676   001D58  EE10 F002          	lfsr	1,2
  6677   001D5C  517A               	movf	color_calibration@red& (0+255),w,b
  6678   001D5E  26E1               	addwf	fsr1l,f,c
  6679   001D60  517B               	movf	(color_calibration@red+1)& (0+255),w,b
  6680   001D62  22E2               	addwfc	fsr1h,f,c
  6681   001D64  CFDE FFE6          	movff	postinc2,postinc1
  6682   001D68  CFDD FFE5          	movff	postdec2,postdec1
  6683   001D6C                     
  6684                           ; BSR set to: 0
  6685                           ;color.c: 165:     red->V = HSV->V;
  6686   001D6C  EE20 F004          	lfsr	2,4
  6687   001D70  5178               	movf	color_calibration@HSV& (0+255),w,b
  6688   001D72  26D9               	addwf	fsr2l,f,c
  6689   001D74  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6690   001D76  22DA               	addwfc	fsr2h,f,c
  6691   001D78  EE10 F004          	lfsr	1,4
  6692   001D7C  517A               	movf	color_calibration@red& (0+255),w,b
  6693   001D7E  26E1               	addwf	fsr1l,f,c
  6694   001D80  517B               	movf	(color_calibration@red+1)& (0+255),w,b
  6695   001D82  22E2               	addwfc	fsr1h,f,c
  6696   001D84  CFDE FFE6          	movff	postinc2,postinc1
  6697   001D88  CFDD FFE5          	movff	postdec2,postdec1
  6698   001D8C                     
  6699                           ; BSR set to: 0
  6700                           ;color.c: 167:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6701   001D8C  0E29               	movlw	41
  6702   001D8E  6E41               	movwf	(??_color_calibration+1)^0,c
  6703   001D90  0E96               	movlw	150
  6704   001D92  6E40               	movwf	??_color_calibration^0,c
  6705   001D94  0E7F               	movlw	127
  6706   001D96                     u4607:
  6707   001D96  2EE8               	decfsz	wreg,f,c
  6708   001D98  D7FE               	bra	u4607
  6709   001D9A  2E40               	decfsz	??_color_calibration^0,f,c
  6710   001D9C  D7FC               	bra	u4607
  6711   001D9E  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  6712   001DA0  D7FA               	bra	u4607
  6713   001DA2  0000               	nop	
  6714   001DA4                     
  6715                           ;color.c: 168:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6716   001DA4  8680               	bsf	128,3,c	;volatile
  6717   001DA6  8E7C               	bsf	124,7,c	;volatile
  6718   001DA8                     l193:
  6719   001DA8  B48E               	btfsc	142,2,c	;volatile
  6720   001DAA  EFD9  F00E         	goto	u2661
  6721   001DAE  EFDB  F00E         	goto	u2660
  6722   001DB2                     u2661:
  6723   001DB2  EFD4  F00E         	goto	l193
  6724   001DB6                     u2660:
  6725   001DB6                     
  6726                           ;color.c: 172:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6727   001DB6  9680               	bcf	128,3,c	;volatile
  6728   001DB8  9E7C               	bcf	124,7,c	;volatile
  6729   001DBA                     
  6730                           ;color.c: 173:     color_read(RGBC);
  6731   001DBA  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6732   001DBE  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6733   001DC2  ECED  F01B         	call	_color_read	;wreg free
  6734   001DC6                     
  6735                           ;color.c: 174:     rgb_2_hsv(*RGBC, HSV);
  6736   001DC6  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  6737   001DCA  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6738   001DCE  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  6739   001DD2  0E07               	movlw	7
  6740   001DD4                     u2671:
  6741   001DD4  CFDB FFEB          	movff	plusw2,plusw0
  6742   001DD8  06E8               	decf	wreg,f,c
  6743   001DDA  E2FC               	bc	u2671
  6744   001DDC  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  6745   001DE0  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  6746   001DE4  EC52  F011         	call	_rgb_2_hsv	;wreg free
  6747   001DE8                     
  6748                           ;color.c: 175:     green->H = HSV->H;
  6749   001DE8  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  6750   001DEC  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  6751   001DF0  C07C  FFE1         	movff	color_calibration@green,fsr1l
  6752   001DF4  C07D  FFE2         	movff	color_calibration@green+1,fsr1h
  6753   001DF8  CFDE FFE6          	movff	postinc2,postinc1
  6754   001DFC  CFDD FFE5          	movff	postdec2,postdec1
  6755   001E00                     
  6756                           ;color.c: 176:     green->S = HSV->S;
  6757   001E00  0100               	movlb	0	; () banked
  6758   001E02  EE20 F002          	lfsr	2,2
  6759   001E06  5178               	movf	color_calibration@HSV& (0+255),w,b
  6760   001E08  26D9               	addwf	fsr2l,f,c
  6761   001E0A  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6762   001E0C  22DA               	addwfc	fsr2h,f,c
  6763   001E0E  EE10 F002          	lfsr	1,2
  6764   001E12  517C               	movf	color_calibration@green& (0+255),w,b
  6765   001E14  26E1               	addwf	fsr1l,f,c
  6766   001E16  517D               	movf	(color_calibration@green+1)& (0+255),w,b
  6767   001E18  22E2               	addwfc	fsr1h,f,c
  6768   001E1A  CFDE FFE6          	movff	postinc2,postinc1
  6769   001E1E  CFDD FFE5          	movff	postdec2,postdec1
  6770   001E22                     
  6771                           ; BSR set to: 0
  6772                           ;color.c: 177:     green->V = HSV->V;
  6773   001E22  EE20 F004          	lfsr	2,4
  6774   001E26  5178               	movf	color_calibration@HSV& (0+255),w,b
  6775   001E28  26D9               	addwf	fsr2l,f,c
  6776   001E2A  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6777   001E2C  22DA               	addwfc	fsr2h,f,c
  6778   001E2E  EE10 F004          	lfsr	1,4
  6779   001E32  517C               	movf	color_calibration@green& (0+255),w,b
  6780   001E34  26E1               	addwf	fsr1l,f,c
  6781   001E36  517D               	movf	(color_calibration@green+1)& (0+255),w,b
  6782   001E38  22E2               	addwfc	fsr1h,f,c
  6783   001E3A  CFDE FFE6          	movff	postinc2,postinc1
  6784   001E3E  CFDD FFE5          	movff	postdec2,postdec1
  6785   001E42                     
  6786                           ; BSR set to: 0
  6787                           ;color.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6788   001E42  0E29               	movlw	41
  6789   001E44  6E41               	movwf	(??_color_calibration+1)^0,c
  6790   001E46  0E96               	movlw	150
  6791   001E48  6E40               	movwf	??_color_calibration^0,c
  6792   001E4A  0E7F               	movlw	127
  6793   001E4C                     u4617:
  6794   001E4C  2EE8               	decfsz	wreg,f,c
  6795   001E4E  D7FE               	bra	u4617
  6796   001E50  2E40               	decfsz	??_color_calibration^0,f,c
  6797   001E52  D7FC               	bra	u4617
  6798   001E54  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  6799   001E56  D7FA               	bra	u4617
  6800   001E58  0000               	nop	
  6801   001E5A                     
  6802                           ;color.c: 180:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6803   001E5A  8680               	bsf	128,3,c	;volatile
  6804   001E5C  8E7C               	bsf	124,7,c	;volatile
  6805   001E5E                     l196:
  6806   001E5E  B48E               	btfsc	142,2,c	;volatile
  6807   001E60  EF34  F00F         	goto	u2681
  6808   001E64  EF36  F00F         	goto	u2680
  6809   001E68                     u2681:
  6810   001E68  EF2F  F00F         	goto	l196
  6811   001E6C                     u2680:
  6812   001E6C                     
  6813                           ;color.c: 184:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6814   001E6C  9680               	bcf	128,3,c	;volatile
  6815   001E6E  9E7C               	bcf	124,7,c	;volatile
  6816   001E70                     
  6817                           ;color.c: 185:     color_read(RGBC);
  6818   001E70  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6819   001E74  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6820   001E78  ECED  F01B         	call	_color_read	;wreg free
  6821   001E7C                     
  6822                           ;color.c: 186:     rgb_2_hsv(*RGBC, HSV);
  6823   001E7C  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  6824   001E80  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6825   001E84  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  6826   001E88  0E07               	movlw	7
  6827   001E8A                     u2691:
  6828   001E8A  CFDB FFEB          	movff	plusw2,plusw0
  6829   001E8E  06E8               	decf	wreg,f,c
  6830   001E90  E2FC               	bc	u2691
  6831   001E92  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  6832   001E96  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  6833   001E9A  EC52  F011         	call	_rgb_2_hsv	;wreg free
  6834   001E9E                     
  6835                           ;color.c: 187:     blue->H = HSV->H;
  6836   001E9E  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  6837   001EA2  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  6838   001EA6  C07E  FFE1         	movff	color_calibration@blue,fsr1l
  6839   001EAA  C07F  FFE2         	movff	color_calibration@blue+1,fsr1h
  6840   001EAE  CFDE FFE6          	movff	postinc2,postinc1
  6841   001EB2  CFDD FFE5          	movff	postdec2,postdec1
  6842   001EB6                     
  6843                           ;color.c: 188:     blue->S = HSV->S;
  6844   001EB6  0100               	movlb	0	; () banked
  6845   001EB8  EE20 F002          	lfsr	2,2
  6846   001EBC  5178               	movf	color_calibration@HSV& (0+255),w,b
  6847   001EBE  26D9               	addwf	fsr2l,f,c
  6848   001EC0  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6849   001EC2  22DA               	addwfc	fsr2h,f,c
  6850   001EC4  EE10 F002          	lfsr	1,2
  6851   001EC8  517E               	movf	color_calibration@blue& (0+255),w,b
  6852   001ECA  26E1               	addwf	fsr1l,f,c
  6853   001ECC  517F               	movf	(color_calibration@blue+1)& (0+255),w,b
  6854   001ECE  22E2               	addwfc	fsr1h,f,c
  6855   001ED0  CFDE FFE6          	movff	postinc2,postinc1
  6856   001ED4  CFDD FFE5          	movff	postdec2,postdec1
  6857   001ED8                     
  6858                           ; BSR set to: 0
  6859                           ;color.c: 189:     blue->V = HSV->V;
  6860   001ED8  EE20 F004          	lfsr	2,4
  6861   001EDC  5178               	movf	color_calibration@HSV& (0+255),w,b
  6862   001EDE  26D9               	addwf	fsr2l,f,c
  6863   001EE0  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6864   001EE2  22DA               	addwfc	fsr2h,f,c
  6865   001EE4  EE10 F004          	lfsr	1,4
  6866   001EE8  517E               	movf	color_calibration@blue& (0+255),w,b
  6867   001EEA  26E1               	addwf	fsr1l,f,c
  6868   001EEC  517F               	movf	(color_calibration@blue+1)& (0+255),w,b
  6869   001EEE  22E2               	addwfc	fsr1h,f,c
  6870   001EF0  CFDE FFE6          	movff	postinc2,postinc1
  6871   001EF4  CFDD FFE5          	movff	postdec2,postdec1
  6872   001EF8                     
  6873                           ; BSR set to: 0
  6874                           ;color.c: 191:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6875   001EF8  0E29               	movlw	41
  6876   001EFA  6E41               	movwf	(??_color_calibration+1)^0,c
  6877   001EFC  0E96               	movlw	150
  6878   001EFE  6E40               	movwf	??_color_calibration^0,c
  6879   001F00  0E7F               	movlw	127
  6880   001F02                     u4627:
  6881   001F02  2EE8               	decfsz	wreg,f,c
  6882   001F04  D7FE               	bra	u4627
  6883   001F06  2E40               	decfsz	??_color_calibration^0,f,c
  6884   001F08  D7FC               	bra	u4627
  6885   001F0A  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  6886   001F0C  D7FA               	bra	u4627
  6887   001F0E  0000               	nop	
  6888   001F10                     
  6889                           ;color.c: 192:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6890   001F10  8680               	bsf	128,3,c	;volatile
  6891   001F12  8E7C               	bsf	124,7,c	;volatile
  6892   001F14                     l199:
  6893   001F14  B48E               	btfsc	142,2,c	;volatile
  6894   001F16  EF8F  F00F         	goto	u2701
  6895   001F1A  EF91  F00F         	goto	u2700
  6896   001F1E                     u2701:
  6897   001F1E  EF8A  F00F         	goto	l199
  6898   001F22                     u2700:
  6899   001F22                     
  6900                           ;color.c: 196:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6901   001F22  9680               	bcf	128,3,c	;volatile
  6902   001F24  9E7C               	bcf	124,7,c	;volatile
  6903   001F26                     
  6904                           ;color.c: 197:     color_read(RGBC);
  6905   001F26  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6906   001F2A  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6907   001F2E  ECED  F01B         	call	_color_read	;wreg free
  6908   001F32                     
  6909                           ;color.c: 198:     rgb_2_hsv(*RGBC, HSV);
  6910   001F32  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  6911   001F36  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6912   001F3A  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  6913   001F3E  0E07               	movlw	7
  6914   001F40                     u2711:
  6915   001F40  CFDB FFEB          	movff	plusw2,plusw0
  6916   001F44  06E8               	decf	wreg,f,c
  6917   001F46  E2FC               	bc	u2711
  6918   001F48  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  6919   001F4C  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  6920   001F50  EC52  F011         	call	_rgb_2_hsv	;wreg free
  6921   001F54                     
  6922                           ;color.c: 199:     yellow->H = HSV->H;
  6923   001F54  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  6924   001F58  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  6925   001F5C  C080  FFE1         	movff	color_calibration@yellow,fsr1l
  6926   001F60  C081  FFE2         	movff	color_calibration@yellow+1,fsr1h
  6927   001F64  CFDE FFE6          	movff	postinc2,postinc1
  6928   001F68  CFDD FFE5          	movff	postdec2,postdec1
  6929   001F6C                     
  6930                           ;color.c: 200:     yellow->S = HSV->S;
  6931   001F6C  0100               	movlb	0	; () banked
  6932   001F6E  EE20 F002          	lfsr	2,2
  6933   001F72  5178               	movf	color_calibration@HSV& (0+255),w,b
  6934   001F74  26D9               	addwf	fsr2l,f,c
  6935   001F76  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6936   001F78  22DA               	addwfc	fsr2h,f,c
  6937   001F7A  EE10 F002          	lfsr	1,2
  6938   001F7E  5180               	movf	color_calibration@yellow& (0+255),w,b
  6939   001F80  26E1               	addwf	fsr1l,f,c
  6940   001F82  5181               	movf	(color_calibration@yellow+1)& (0+255),w,b
  6941   001F84  22E2               	addwfc	fsr1h,f,c
  6942   001F86  CFDE FFE6          	movff	postinc2,postinc1
  6943   001F8A  CFDD FFE5          	movff	postdec2,postdec1
  6944   001F8E                     
  6945                           ; BSR set to: 0
  6946                           ;color.c: 201:     yellow->V = HSV->V;
  6947   001F8E  EE20 F004          	lfsr	2,4
  6948   001F92  5178               	movf	color_calibration@HSV& (0+255),w,b
  6949   001F94  26D9               	addwf	fsr2l,f,c
  6950   001F96  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6951   001F98  22DA               	addwfc	fsr2h,f,c
  6952   001F9A  EE10 F004          	lfsr	1,4
  6953   001F9E  5180               	movf	color_calibration@yellow& (0+255),w,b
  6954   001FA0  26E1               	addwf	fsr1l,f,c
  6955   001FA2  5181               	movf	(color_calibration@yellow+1)& (0+255),w,b
  6956   001FA4  22E2               	addwfc	fsr1h,f,c
  6957   001FA6  CFDE FFE6          	movff	postinc2,postinc1
  6958   001FAA  CFDD FFE5          	movff	postdec2,postdec1
  6959   001FAE                     
  6960                           ; BSR set to: 0
  6961                           ;color.c: 203:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6962   001FAE  0E29               	movlw	41
  6963   001FB0  6E41               	movwf	(??_color_calibration+1)^0,c
  6964   001FB2  0E96               	movlw	150
  6965   001FB4  6E40               	movwf	??_color_calibration^0,c
  6966   001FB6  0E7F               	movlw	127
  6967   001FB8                     u4637:
  6968   001FB8  2EE8               	decfsz	wreg,f,c
  6969   001FBA  D7FE               	bra	u4637
  6970   001FBC  2E40               	decfsz	??_color_calibration^0,f,c
  6971   001FBE  D7FC               	bra	u4637
  6972   001FC0  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  6973   001FC2  D7FA               	bra	u4637
  6974   001FC4  0000               	nop	
  6975   001FC6                     
  6976                           ;color.c: 204:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6977   001FC6  8680               	bsf	128,3,c	;volatile
  6978   001FC8  8E7C               	bsf	124,7,c	;volatile
  6979   001FCA                     l202:
  6980   001FCA  B48E               	btfsc	142,2,c	;volatile
  6981   001FCC  EFEA  F00F         	goto	u2721
  6982   001FD0  EFEC  F00F         	goto	u2720
  6983   001FD4                     u2721:
  6984   001FD4  EFE5  F00F         	goto	l202
  6985   001FD8                     u2720:
  6986   001FD8                     
  6987                           ;color.c: 208:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6988   001FD8  9680               	bcf	128,3,c	;volatile
  6989   001FDA  9E7C               	bcf	124,7,c	;volatile
  6990   001FDC                     
  6991                           ;color.c: 209:     color_read(RGBC);
  6992   001FDC  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6993   001FE0  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6994   001FE4  ECED  F01B         	call	_color_read	;wreg free
  6995   001FE8                     
  6996                           ;color.c: 210:     rgb_2_hsv(*RGBC, HSV);
  6997   001FE8  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  6998   001FEC  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6999   001FF0  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  7000   001FF4  0E07               	movlw	7
  7001   001FF6                     u2731:
  7002   001FF6  CFDB FFEB          	movff	plusw2,plusw0
  7003   001FFA  06E8               	decf	wreg,f,c
  7004   001FFC  E2FC               	bc	u2731
  7005   001FFE  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7006   002002  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7007   002006  EC52  F011         	call	_rgb_2_hsv	;wreg free
  7008   00200A                     
  7009                           ;color.c: 211:     pink->H = HSV->H;
  7010   00200A  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  7011   00200E  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7012   002012  C082  FFE1         	movff	color_calibration@pink,fsr1l
  7013   002016  C083  FFE2         	movff	color_calibration@pink+1,fsr1h
  7014   00201A  CFDE FFE6          	movff	postinc2,postinc1
  7015   00201E  CFDD FFE5          	movff	postdec2,postdec1
  7016   002022                     
  7017                           ;color.c: 212:     pink->S = HSV->S;
  7018   002022  0100               	movlb	0	; () banked
  7019   002024  EE20 F002          	lfsr	2,2
  7020   002028  5178               	movf	color_calibration@HSV& (0+255),w,b
  7021   00202A  26D9               	addwf	fsr2l,f,c
  7022   00202C  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7023   00202E  22DA               	addwfc	fsr2h,f,c
  7024   002030  EE10 F002          	lfsr	1,2
  7025   002034  5182               	movf	color_calibration@pink& (0+255),w,b
  7026   002036  26E1               	addwf	fsr1l,f,c
  7027   002038  5183               	movf	(color_calibration@pink+1)& (0+255),w,b
  7028   00203A  22E2               	addwfc	fsr1h,f,c
  7029   00203C  CFDE FFE6          	movff	postinc2,postinc1
  7030   002040  CFDD FFE5          	movff	postdec2,postdec1
  7031   002044                     
  7032                           ; BSR set to: 0
  7033                           ;color.c: 213:     pink->V = HSV->V;
  7034   002044  EE20 F004          	lfsr	2,4
  7035   002048  5178               	movf	color_calibration@HSV& (0+255),w,b
  7036   00204A  26D9               	addwf	fsr2l,f,c
  7037   00204C  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7038   00204E  22DA               	addwfc	fsr2h,f,c
  7039   002050  EE10 F004          	lfsr	1,4
  7040   002054  5182               	movf	color_calibration@pink& (0+255),w,b
  7041   002056  26E1               	addwf	fsr1l,f,c
  7042   002058  5183               	movf	(color_calibration@pink+1)& (0+255),w,b
  7043   00205A  22E2               	addwfc	fsr1h,f,c
  7044   00205C  CFDE FFE6          	movff	postinc2,postinc1
  7045   002060  CFDD FFE5          	movff	postdec2,postdec1
  7046   002064                     
  7047                           ; BSR set to: 0
  7048                           ;color.c: 215:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7049   002064  0E29               	movlw	41
  7050   002066  6E41               	movwf	(??_color_calibration+1)^0,c
  7051   002068  0E96               	movlw	150
  7052   00206A  6E40               	movwf	??_color_calibration^0,c
  7053   00206C  0E7F               	movlw	127
  7054   00206E                     u4647:
  7055   00206E  2EE8               	decfsz	wreg,f,c
  7056   002070  D7FE               	bra	u4647
  7057   002072  2E40               	decfsz	??_color_calibration^0,f,c
  7058   002074  D7FC               	bra	u4647
  7059   002076  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  7060   002078  D7FA               	bra	u4647
  7061   00207A  0000               	nop	
  7062   00207C                     
  7063                           ;color.c: 216:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7064   00207C  8680               	bsf	128,3,c	;volatile
  7065   00207E  8E7C               	bsf	124,7,c	;volatile
  7066   002080                     l205:
  7067   002080  B48E               	btfsc	142,2,c	;volatile
  7068   002082  EF45  F010         	goto	u2741
  7069   002086  EF47  F010         	goto	u2740
  7070   00208A                     u2741:
  7071   00208A  EF40  F010         	goto	l205
  7072   00208E                     u2740:
  7073   00208E                     
  7074                           ;color.c: 220:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7075   00208E  9680               	bcf	128,3,c	;volatile
  7076   002090  9E7C               	bcf	124,7,c	;volatile
  7077   002092                     
  7078                           ;color.c: 221:     color_read(RGBC);
  7079   002092  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7080   002096  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7081   00209A  ECED  F01B         	call	_color_read	;wreg free
  7082   00209E                     
  7083                           ;color.c: 222:     rgb_2_hsv(*RGBC, HSV);
  7084   00209E  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  7085   0020A2  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7086   0020A6  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  7087   0020AA  0E07               	movlw	7
  7088   0020AC                     u2751:
  7089   0020AC  CFDB FFEB          	movff	plusw2,plusw0
  7090   0020B0  06E8               	decf	wreg,f,c
  7091   0020B2  E2FC               	bc	u2751
  7092   0020B4  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7093   0020B8  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7094   0020BC  EC52  F011         	call	_rgb_2_hsv	;wreg free
  7095   0020C0                     
  7096                           ;color.c: 223:     orange->H = HSV->H;
  7097   0020C0  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  7098   0020C4  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7099   0020C8  C084  FFE1         	movff	color_calibration@orange,fsr1l
  7100   0020CC  C085  FFE2         	movff	color_calibration@orange+1,fsr1h
  7101   0020D0  CFDE FFE6          	movff	postinc2,postinc1
  7102   0020D4  CFDD FFE5          	movff	postdec2,postdec1
  7103   0020D8                     
  7104                           ;color.c: 224:     orange->S = HSV->S;
  7105   0020D8  0100               	movlb	0	; () banked
  7106   0020DA  EE20 F002          	lfsr	2,2
  7107   0020DE  5178               	movf	color_calibration@HSV& (0+255),w,b
  7108   0020E0  26D9               	addwf	fsr2l,f,c
  7109   0020E2  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7110   0020E4  22DA               	addwfc	fsr2h,f,c
  7111   0020E6  EE10 F002          	lfsr	1,2
  7112   0020EA  5184               	movf	color_calibration@orange& (0+255),w,b
  7113   0020EC  26E1               	addwf	fsr1l,f,c
  7114   0020EE  5185               	movf	(color_calibration@orange+1)& (0+255),w,b
  7115   0020F0  22E2               	addwfc	fsr1h,f,c
  7116   0020F2  CFDE FFE6          	movff	postinc2,postinc1
  7117   0020F6  CFDD FFE5          	movff	postdec2,postdec1
  7118   0020FA                     
  7119                           ; BSR set to: 0
  7120                           ;color.c: 225:     orange->V = HSV->V;
  7121   0020FA  EE20 F004          	lfsr	2,4
  7122   0020FE  5178               	movf	color_calibration@HSV& (0+255),w,b
  7123   002100  26D9               	addwf	fsr2l,f,c
  7124   002102  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7125   002104  22DA               	addwfc	fsr2h,f,c
  7126   002106  EE10 F004          	lfsr	1,4
  7127   00210A  5184               	movf	color_calibration@orange& (0+255),w,b
  7128   00210C  26E1               	addwf	fsr1l,f,c
  7129   00210E  5185               	movf	(color_calibration@orange+1)& (0+255),w,b
  7130   002110  22E2               	addwfc	fsr1h,f,c
  7131   002112  CFDE FFE6          	movff	postinc2,postinc1
  7132   002116  CFDD FFE5          	movff	postdec2,postdec1
  7133   00211A                     
  7134                           ; BSR set to: 0
  7135                           ;color.c: 227:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7136   00211A  0E29               	movlw	41
  7137   00211C  6E41               	movwf	(??_color_calibration+1)^0,c
  7138   00211E  0E96               	movlw	150
  7139   002120  6E40               	movwf	??_color_calibration^0,c
  7140   002122  0E7F               	movlw	127
  7141   002124                     u4657:
  7142   002124  2EE8               	decfsz	wreg,f,c
  7143   002126  D7FE               	bra	u4657
  7144   002128  2E40               	decfsz	??_color_calibration^0,f,c
  7145   00212A  D7FC               	bra	u4657
  7146   00212C  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  7147   00212E  D7FA               	bra	u4657
  7148   002130  0000               	nop	
  7149   002132                     
  7150                           ;color.c: 228:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7151   002132  8680               	bsf	128,3,c	;volatile
  7152   002134  8E7C               	bsf	124,7,c	;volatile
  7153   002136                     l208:
  7154   002136  B48E               	btfsc	142,2,c	;volatile
  7155   002138  EFA0  F010         	goto	u2761
  7156   00213C  EFA2  F010         	goto	u2760
  7157   002140                     u2761:
  7158   002140  EF9B  F010         	goto	l208
  7159   002144                     u2760:
  7160   002144                     
  7161                           ;color.c: 232:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7162   002144  9680               	bcf	128,3,c	;volatile
  7163   002146  9E7C               	bcf	124,7,c	;volatile
  7164   002148                     
  7165                           ;color.c: 233:     color_read(RGBC);
  7166   002148  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7167   00214C  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7168   002150  ECED  F01B         	call	_color_read	;wreg free
  7169   002154                     
  7170                           ;color.c: 234:     rgb_2_hsv(*RGBC, HSV);
  7171   002154  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  7172   002158  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7173   00215C  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  7174   002160  0E07               	movlw	7
  7175   002162                     u2771:
  7176   002162  CFDB FFEB          	movff	plusw2,plusw0
  7177   002166  06E8               	decf	wreg,f,c
  7178   002168  E2FC               	bc	u2771
  7179   00216A  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7180   00216E  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7181   002172  EC52  F011         	call	_rgb_2_hsv	;wreg free
  7182   002176                     
  7183                           ;color.c: 235:     lightblue->H = HSV->H;
  7184   002176  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  7185   00217A  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7186   00217E  C086  FFE1         	movff	color_calibration@lightblue,fsr1l
  7187   002182  C087  FFE2         	movff	color_calibration@lightblue+1,fsr1h
  7188   002186  CFDE FFE6          	movff	postinc2,postinc1
  7189   00218A  CFDD FFE5          	movff	postdec2,postdec1
  7190   00218E                     
  7191                           ;color.c: 236:     lightblue->S = HSV->S;
  7192   00218E  0100               	movlb	0	; () banked
  7193   002190  EE20 F002          	lfsr	2,2
  7194   002194  5178               	movf	color_calibration@HSV& (0+255),w,b
  7195   002196  26D9               	addwf	fsr2l,f,c
  7196   002198  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7197   00219A  22DA               	addwfc	fsr2h,f,c
  7198   00219C  EE10 F002          	lfsr	1,2
  7199   0021A0  5186               	movf	color_calibration@lightblue& (0+255),w,b
  7200   0021A2  26E1               	addwf	fsr1l,f,c
  7201   0021A4  5187               	movf	(color_calibration@lightblue+1)& (0+255),w,b
  7202   0021A6  22E2               	addwfc	fsr1h,f,c
  7203   0021A8  CFDE FFE6          	movff	postinc2,postinc1
  7204   0021AC  CFDD FFE5          	movff	postdec2,postdec1
  7205   0021B0                     
  7206                           ; BSR set to: 0
  7207                           ;color.c: 237:     lightblue->V = HSV->V;
  7208   0021B0  EE20 F004          	lfsr	2,4
  7209   0021B4  5178               	movf	color_calibration@HSV& (0+255),w,b
  7210   0021B6  26D9               	addwf	fsr2l,f,c
  7211   0021B8  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7212   0021BA  22DA               	addwfc	fsr2h,f,c
  7213   0021BC  EE10 F004          	lfsr	1,4
  7214   0021C0  5186               	movf	color_calibration@lightblue& (0+255),w,b
  7215   0021C2  26E1               	addwf	fsr1l,f,c
  7216   0021C4  5187               	movf	(color_calibration@lightblue+1)& (0+255),w,b
  7217   0021C6  22E2               	addwfc	fsr1h,f,c
  7218   0021C8  CFDE FFE6          	movff	postinc2,postinc1
  7219   0021CC  CFDD FFE5          	movff	postdec2,postdec1
  7220   0021D0                     
  7221                           ; BSR set to: 0
  7222                           ;color.c: 239:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7223   0021D0  0E29               	movlw	41
  7224   0021D2  6E41               	movwf	(??_color_calibration+1)^0,c
  7225   0021D4  0E96               	movlw	150
  7226   0021D6  6E40               	movwf	??_color_calibration^0,c
  7227   0021D8  0E7F               	movlw	127
  7228   0021DA                     u4667:
  7229   0021DA  2EE8               	decfsz	wreg,f,c
  7230   0021DC  D7FE               	bra	u4667
  7231   0021DE  2E40               	decfsz	??_color_calibration^0,f,c
  7232   0021E0  D7FC               	bra	u4667
  7233   0021E2  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  7234   0021E4  D7FA               	bra	u4667
  7235   0021E6  0000               	nop	
  7236   0021E8                     
  7237                           ;color.c: 240:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7238   0021E8  8680               	bsf	128,3,c	;volatile
  7239   0021EA  8E7C               	bsf	124,7,c	;volatile
  7240   0021EC                     l211:
  7241   0021EC  B48E               	btfsc	142,2,c	;volatile
  7242   0021EE  EFFB  F010         	goto	u2781
  7243   0021F2  EFFD  F010         	goto	u2780
  7244   0021F6                     u2781:
  7245   0021F6  EFF6  F010         	goto	l211
  7246   0021FA                     u2780:
  7247   0021FA                     
  7248                           ;color.c: 244:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7249   0021FA  9680               	bcf	128,3,c	;volatile
  7250   0021FC  9E7C               	bcf	124,7,c	;volatile
  7251   0021FE                     
  7252                           ;color.c: 245:     color_read(RGBC);
  7253   0021FE  C076  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7254   002202  C077  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7255   002206  ECED  F01B         	call	_color_read	;wreg free
  7256   00220A                     
  7257                           ;color.c: 246:     rgb_2_hsv(*RGBC, HSV);
  7258   00220A  C076  FFD9         	movff	color_calibration@RGBC,fsr2l
  7259   00220E  C077  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7260   002212  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  7261   002216  0E07               	movlw	7
  7262   002218                     u2791:
  7263   002218  CFDB FFEB          	movff	plusw2,plusw0
  7264   00221C  06E8               	decf	wreg,f,c
  7265   00221E  E2FC               	bc	u2791
  7266   002220  C078  F032         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7267   002224  C079  F033         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7268   002228  EC52  F011         	call	_rgb_2_hsv	;wreg free
  7269   00222C                     
  7270                           ;color.c: 247:     white->H = HSV->H;
  7271   00222C  C078  FFD9         	movff	color_calibration@HSV,fsr2l
  7272   002230  C079  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7273   002234  C088  FFE1         	movff	color_calibration@white,fsr1l
  7274   002238  C089  FFE2         	movff	color_calibration@white+1,fsr1h
  7275   00223C  CFDE FFE6          	movff	postinc2,postinc1
  7276   002240  CFDD FFE5          	movff	postdec2,postdec1
  7277   002244                     
  7278                           ;color.c: 248:     white->S = HSV->S;
  7279   002244  0100               	movlb	0	; () banked
  7280   002246  EE20 F002          	lfsr	2,2
  7281   00224A  5178               	movf	color_calibration@HSV& (0+255),w,b
  7282   00224C  26D9               	addwf	fsr2l,f,c
  7283   00224E  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7284   002250  22DA               	addwfc	fsr2h,f,c
  7285   002252  EE10 F002          	lfsr	1,2
  7286   002256  5188               	movf	color_calibration@white& (0+255),w,b
  7287   002258  26E1               	addwf	fsr1l,f,c
  7288   00225A  5189               	movf	(color_calibration@white+1)& (0+255),w,b
  7289   00225C  22E2               	addwfc	fsr1h,f,c
  7290   00225E  CFDE FFE6          	movff	postinc2,postinc1
  7291   002262  CFDD FFE5          	movff	postdec2,postdec1
  7292   002266                     
  7293                           ; BSR set to: 0
  7294                           ;color.c: 249:     white->V = HSV->V;
  7295   002266  EE20 F004          	lfsr	2,4
  7296   00226A  5178               	movf	color_calibration@HSV& (0+255),w,b
  7297   00226C  26D9               	addwf	fsr2l,f,c
  7298   00226E  5179               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7299   002270  22DA               	addwfc	fsr2h,f,c
  7300   002272  EE10 F004          	lfsr	1,4
  7301   002276  5188               	movf	color_calibration@white& (0+255),w,b
  7302   002278  26E1               	addwf	fsr1l,f,c
  7303   00227A  5189               	movf	(color_calibration@white+1)& (0+255),w,b
  7304   00227C  22E2               	addwfc	fsr1h,f,c
  7305   00227E  CFDE FFE6          	movff	postinc2,postinc1
  7306   002282  CFDD FFE5          	movff	postdec2,postdec1
  7307   002286                     
  7308                           ; BSR set to: 0
  7309                           ;color.c: 251:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7310   002286  0E29               	movlw	41
  7311   002288  6E41               	movwf	(??_color_calibration+1)^0,c
  7312   00228A  0E96               	movlw	150
  7313   00228C  6E40               	movwf	??_color_calibration^0,c
  7314   00228E  0E7F               	movlw	127
  7315   002290                     u4677:
  7316   002290  2EE8               	decfsz	wreg,f,c
  7317   002292  D7FE               	bra	u4677
  7318   002294  2E40               	decfsz	??_color_calibration^0,f,c
  7319   002296  D7FC               	bra	u4677
  7320   002298  2E41               	decfsz	(??_color_calibration+1)^0,f,c
  7321   00229A  D7FA               	bra	u4677
  7322   00229C  0000               	nop	
  7323   00229E                     
  7324                           ;color.c: 252:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7325   00229E  8680               	bsf	128,3,c	;volatile
  7326   0022A0  8E7C               	bsf	124,7,c	;volatile
  7327   0022A2  0012               	return		;funcret
  7328   0022A4                     __end_of_color_calibration:
  7329                           	callstack 0
  7330                           
  7331 ;; *************** function _white_Light *****************
  7332 ;; Defined at:
  7333 ;;		line 62 in file "color.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  state           1    wreg     unsigned char 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;  state           1   15[COMRAM] unsigned char 
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      void 
  7340 ;; Registers used:
  7341 ;;		wreg, status,2
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7351 ;;Total ram usage:        1 bytes
  7352 ;; Hardware stack levels used: 1
  7353 ;; Hardware stack levels required when called: 5
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_main
  7358 ;;		_color_calibration
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text18
  7363   004B2C                     __ptext18:
  7364                           	callstack 0
  7365   004B2C                     _white_Light:
  7366                           	callstack 25
  7367                           
  7368                           ;incstack = 0
  7369                           ;white_Light@state stored from wreg
  7370   004B2C  6E10               	movwf	white_Light@state^0,c
  7371   004B2E                     
  7372                           ;color.c: 62: void white_Light(char state);color.c: 63: {;color.c: 64:     if (state){
  7373   004B2E  5010               	movf	white_Light@state^0,w,c
  7374   004B30  B4D8               	btfsc	status,2,c
  7375   004B32  EF9D  F025         	goto	u2291
  7376   004B36  EF9F  F025         	goto	u2290
  7377   004B3A                     u2291:
  7378   004B3A  EFA4  F025         	goto	l154
  7379   004B3E                     u2290:
  7380   004B3E                     
  7381                           ;color.c: 65:         LATGbits.LATG0 = 1;
  7382   004B3E  807F               	bsf	127,0,c	;volatile
  7383                           
  7384                           ;color.c: 66:         LATEbits.LATE7 = 1;
  7385   004B40  8E7D               	bsf	125,7,c	;volatile
  7386                           
  7387                           ;color.c: 67:         LATAbits.LATA3 = 1;
  7388   004B42  8679               	bsf	121,3,c	;volatile
  7389                           
  7390                           ;color.c: 68:     }
  7391   004B44  EFA7  F025         	goto	l156
  7392   004B48                     l154:
  7393                           
  7394                           ;color.c: 70:         LATGbits.LATG0 = 0;
  7395   004B48  907F               	bcf	127,0,c	;volatile
  7396                           
  7397                           ;color.c: 71:         LATEbits.LATE7 = 0;
  7398   004B4A  9E7D               	bcf	125,7,c	;volatile
  7399                           
  7400                           ;color.c: 72:         LATAbits.LATA3 = 0;
  7401   004B4C  9679               	bcf	121,3,c	;volatile
  7402   004B4E                     l156:
  7403   004B4E  0012               	return		;funcret
  7404   004B50                     __end_of_white_Light:
  7405                           	callstack 0
  7406                           
  7407 ;; *************** function _rgb_2_hsv *****************
  7408 ;; Defined at:
  7409 ;;		line 265 in file "color.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  RGBC            8   41[COMRAM] struct RGBC_val
  7412 ;;  HSV             2   49[COMRAM] PTR struct HSV_val
  7413 ;;		 -> main@HSV(6), 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  diff            4   14[BANK0 ] unsigned long 
  7416 ;;  b               2   20[BANK0 ] unsigned int 
  7417 ;;  g               2   18[BANK0 ] unsigned int 
  7418 ;;  cmax            2   12[BANK0 ] unsigned int 
  7419 ;;  r               2   10[BANK0 ] unsigned int 
  7420 ;;  cmin            2    4[BANK0 ] unsigned int 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      void 
  7423 ;; Registers used:
  7424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7430 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7431 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7432 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7433 ;;      Totals:        22      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7434 ;;Total ram usage:       44 bytes
  7435 ;; Hardware stack levels used: 1
  7436 ;; Hardware stack levels required when called: 6
  7437 ;; This function calls:
  7438 ;;		___aldiv
  7439 ;;		___lldiv
  7440 ;;		___lmul
  7441 ;;		_max
  7442 ;;		_min
  7443 ;; This function is called by:
  7444 ;;		_main
  7445 ;;		_color_calibration
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text19
  7450   0022A4                     __ptext19:
  7451                           	callstack 0
  7452   0022A4                     _rgb_2_hsv:
  7453                           	callstack 24
  7454   0022A4                     
  7455                           ;color.c: 271:     unsigned int r = (unsigned int)(RGBC.R*10000L/1900);
  7456   0022A4  C02A  F010         	movff	rgb_2_hsv@RGBC,___lmul@multiplier
  7457   0022A8  C02B  F011         	movff	rgb_2_hsv@RGBC+1,___lmul@multiplier+1
  7458   0022AC  6A12               	clrf	(___lmul@multiplier+2)^0,c
  7459   0022AE  6A13               	clrf	(___lmul@multiplier+3)^0,c
  7460   0022B0  0E10               	movlw	16
  7461   0022B2  6E14               	movwf	___lmul@multiplicand^0,c
  7462   0022B4  0E27               	movlw	39
  7463   0022B6  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7464   0022B8  0E00               	movlw	0
  7465   0022BA  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7466   0022BC  0E00               	movlw	0
  7467   0022BE  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7468   0022C0  ECFD  F023         	call	___lmul	;wreg free
  7469   0022C4  C010  F01C         	movff	?___lmul,___aldiv@dividend
  7470   0022C8  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  7471   0022CC  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  7472   0022D0  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  7473   0022D4  0E6C               	movlw	108
  7474   0022D6  6E20               	movwf	___aldiv@divisor^0,c
  7475   0022D8  0E07               	movlw	7
  7476   0022DA  6E21               	movwf	(___aldiv@divisor+1)^0,c
  7477   0022DC  0E00               	movlw	0
  7478   0022DE  6E22               	movwf	(___aldiv@divisor+2)^0,c
  7479   0022E0  0E00               	movlw	0
  7480   0022E2  6E23               	movwf	(___aldiv@divisor+3)^0,c
  7481   0022E4  EC6A  F020         	call	___aldiv	;wreg free
  7482   0022E8  C01C  F06A         	movff	?___aldiv,rgb_2_hsv@r
  7483   0022EC  C01D  F06B         	movff	?___aldiv+1,rgb_2_hsv@r+1
  7484                           
  7485                           ;color.c: 272:     unsigned int g = (unsigned int)(RGBC.G*10000L/1400);
  7486   0022F0  C02C  F010         	movff	rgb_2_hsv@RGBC+2,___lmul@multiplier
  7487   0022F4  C02D  F011         	movff	rgb_2_hsv@RGBC+3,___lmul@multiplier+1
  7488   0022F8  6A12               	clrf	(___lmul@multiplier+2)^0,c
  7489   0022FA  6A13               	clrf	(___lmul@multiplier+3)^0,c
  7490   0022FC  0E10               	movlw	16
  7491   0022FE  6E14               	movwf	___lmul@multiplicand^0,c
  7492   002300  0E27               	movlw	39
  7493   002302  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7494   002304  0E00               	movlw	0
  7495   002306  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7496   002308  0E00               	movlw	0
  7497   00230A  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7498   00230C  ECFD  F023         	call	___lmul	;wreg free
  7499   002310  C010  F01C         	movff	?___lmul,___aldiv@dividend
  7500   002314  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  7501   002318  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  7502   00231C  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  7503   002320  0E78               	movlw	120
  7504   002322  6E20               	movwf	___aldiv@divisor^0,c
  7505   002324  0E05               	movlw	5
  7506   002326  6E21               	movwf	(___aldiv@divisor+1)^0,c
  7507   002328  0E00               	movlw	0
  7508   00232A  6E22               	movwf	(___aldiv@divisor+2)^0,c
  7509   00232C  0E00               	movlw	0
  7510   00232E  6E23               	movwf	(___aldiv@divisor+3)^0,c
  7511   002330  EC6A  F020         	call	___aldiv	;wreg free
  7512   002334  C01C  F072         	movff	?___aldiv,rgb_2_hsv@g
  7513   002338  C01D  F073         	movff	?___aldiv+1,rgb_2_hsv@g+1
  7514                           
  7515                           ;color.c: 273:     unsigned int b = (unsigned int)(RGBC.B*10000L/1600);
  7516   00233C  C02E  F010         	movff	rgb_2_hsv@RGBC+4,___lmul@multiplier
  7517   002340  C02F  F011         	movff	rgb_2_hsv@RGBC+5,___lmul@multiplier+1
  7518   002344  6A12               	clrf	(___lmul@multiplier+2)^0,c
  7519   002346  6A13               	clrf	(___lmul@multiplier+3)^0,c
  7520   002348  0E10               	movlw	16
  7521   00234A  6E14               	movwf	___lmul@multiplicand^0,c
  7522   00234C  0E27               	movlw	39
  7523   00234E  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7524   002350  0E00               	movlw	0
  7525   002352  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7526   002354  0E00               	movlw	0
  7527   002356  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7528   002358  ECFD  F023         	call	___lmul	;wreg free
  7529   00235C  C010  F01C         	movff	?___lmul,___aldiv@dividend
  7530   002360  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  7531   002364  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  7532   002368  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  7533   00236C  0E40               	movlw	64
  7534   00236E  6E20               	movwf	___aldiv@divisor^0,c
  7535   002370  0E06               	movlw	6
  7536   002372  6E21               	movwf	(___aldiv@divisor+1)^0,c
  7537   002374  0E00               	movlw	0
  7538   002376  6E22               	movwf	(___aldiv@divisor+2)^0,c
  7539   002378  0E00               	movlw	0
  7540   00237A  6E23               	movwf	(___aldiv@divisor+3)^0,c
  7541   00237C  EC6A  F020         	call	___aldiv	;wreg free
  7542   002380  C01C  F074         	movff	?___aldiv,rgb_2_hsv@b
  7543   002384  C01D  F075         	movff	?___aldiv+1,rgb_2_hsv@b+1
  7544                           
  7545                           ;color.c: 276:     unsigned int cmax = max(r, max(g, b));
  7546   002388  C072  F010         	movff	rgb_2_hsv@g,max@a
  7547   00238C  C073  F011         	movff	rgb_2_hsv@g+1,max@a+1
  7548   002390  C074  F012         	movff	rgb_2_hsv@b,max@b
  7549   002394  C075  F013         	movff	rgb_2_hsv@b+1,max@b+1
  7550   002398  ECF3  F024         	call	_max	;wreg free
  7551   00239C  C010  F066         	movff	?_max,_rgb_2_hsv$3604
  7552   0023A0  C011  F067         	movff	?_max+1,_rgb_2_hsv$3604+1
  7553                           
  7554                           ;color.c: 276:     unsigned int cmax = max(r, max(g, b));
  7555   0023A4  C06A  F010         	movff	rgb_2_hsv@r,max@a
  7556   0023A8  C06B  F011         	movff	rgb_2_hsv@r+1,max@a+1
  7557   0023AC  C066  F012         	movff	_rgb_2_hsv$3604,max@b
  7558   0023B0  C067  F013         	movff	_rgb_2_hsv$3604+1,max@b+1
  7559   0023B4  ECF3  F024         	call	_max	;wreg free
  7560   0023B8  C010  F06C         	movff	?_max,rgb_2_hsv@cmax
  7561   0023BC  C011  F06D         	movff	?_max+1,rgb_2_hsv@cmax+1
  7562                           
  7563                           ;color.c: 277:     unsigned int cmin = min(r, min(g, b));
  7564   0023C0  C072  F010         	movff	rgb_2_hsv@g,min@a
  7565   0023C4  C073  F011         	movff	rgb_2_hsv@g+1,min@a+1
  7566   0023C8  C074  F012         	movff	rgb_2_hsv@b,min@b
  7567   0023CC  C075  F013         	movff	rgb_2_hsv@b+1,min@b+1
  7568   0023D0  ECDD  F024         	call	_min	;wreg free
  7569   0023D4  C010  F068         	movff	?_min,_rgb_2_hsv$3605
  7570   0023D8  C011  F069         	movff	?_min+1,_rgb_2_hsv$3605+1
  7571                           
  7572                           ;color.c: 277:     unsigned int cmin = min(r, min(g, b));
  7573   0023DC  C06A  F010         	movff	rgb_2_hsv@r,min@a
  7574   0023E0  C06B  F011         	movff	rgb_2_hsv@r+1,min@a+1
  7575   0023E4  C068  F012         	movff	_rgb_2_hsv$3605,min@b
  7576   0023E8  C069  F013         	movff	_rgb_2_hsv$3605+1,min@b+1
  7577   0023EC  ECDD  F024         	call	_min	;wreg free
  7578   0023F0  C010  F064         	movff	?_min,rgb_2_hsv@cmin
  7579   0023F4  C011  F065         	movff	?_min+1,rgb_2_hsv@cmin+1
  7580   0023F8                     
  7581                           ;color.c: 278:     unsigned long diff = cmax - cmin;
  7582   0023F8  0100               	movlb	0	; () banked
  7583   0023FA  5164               	movf	rgb_2_hsv@cmin& (0+255),w,b
  7584   0023FC  5D6C               	subwf	rgb_2_hsv@cmax& (0+255),w,b
  7585   0023FE  6E34               	movwf	??_rgb_2_hsv^0,c
  7586   002400  5165               	movf	(rgb_2_hsv@cmin+1)& (0+255),w,b
  7587   002402  596D               	subwfb	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7588   002404  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  7589   002406  C034  F06E         	movff	??_rgb_2_hsv,rgb_2_hsv@diff
  7590   00240A  C035  F06F         	movff	??_rgb_2_hsv+1,rgb_2_hsv@diff+1
  7591   00240E  6B70               	clrf	(rgb_2_hsv@diff+2)& (0+255),b
  7592   002410  6B71               	clrf	(rgb_2_hsv@diff+3)& (0+255),b
  7593   002412                     
  7594                           ; BSR set to: 0
  7595                           ;color.c: 281:     if (cmax == r){
  7596   002412  516A               	movf	rgb_2_hsv@r& (0+255),w,b
  7597   002414  196C               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  7598   002416  E107               	bnz	u2301
  7599   002418  516B               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  7600   00241A  196D               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7601   00241C  A4D8               	btfss	status,2,c
  7602   00241E  EF13  F012         	goto	u2301
  7603   002422  EF15  F012         	goto	u2300
  7604   002426                     u2301:
  7605   002426  EFBC  F012         	goto	l3450
  7606   00242A                     u2300:
  7607   00242A                     
  7608                           ; BSR set to: 0
  7609                           ;color.c: 282:         if (g > b){HSV->H = (unsigned int)((g-b)*6000L/diff);}
  7610   00242A  5172               	movf	rgb_2_hsv@g& (0+255),w,b
  7611   00242C  5D74               	subwf	rgb_2_hsv@b& (0+255),w,b
  7612   00242E  5173               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7613   002430  5975               	subwfb	(rgb_2_hsv@b+1)& (0+255),w,b
  7614   002432  B0D8               	btfsc	status,0,c
  7615   002434  EF1E  F012         	goto	u2311
  7616   002438  EF20  F012         	goto	u2310
  7617   00243C                     u2311:
  7618   00243C  EF52  F012         	goto	l3444
  7619   002440                     u2310:
  7620   002440                     
  7621                           ; BSR set to: 0
  7622   002440  5174               	movf	rgb_2_hsv@b& (0+255),w,b
  7623   002442  5D72               	subwf	rgb_2_hsv@g& (0+255),w,b
  7624   002444  6E34               	movwf	??_rgb_2_hsv^0,c
  7625   002446  5175               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7626   002448  5973               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  7627   00244A  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  7628   00244C  C034  F010         	movff	??_rgb_2_hsv,___lmul@multiplier
  7629   002450  C035  F011         	movff	??_rgb_2_hsv+1,___lmul@multiplier+1
  7630   002454  6A12               	clrf	(___lmul@multiplier+2)^0,c
  7631   002456  6A13               	clrf	(___lmul@multiplier+3)^0,c
  7632   002458  0E70               	movlw	112
  7633   00245A  6E14               	movwf	___lmul@multiplicand^0,c
  7634   00245C  0E17               	movlw	23
  7635   00245E  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7636   002460  0E00               	movlw	0
  7637   002462  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7638   002464  0E00               	movlw	0
  7639   002466  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7640   002468  ECFD  F023         	call	___lmul	;wreg free
  7641   00246C  C010  F01C         	movff	?___lmul,___lldiv@dividend
  7642   002470  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  7643   002474  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  7644   002478  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  7645   00247C  C06E  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  7646   002480  C06F  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  7647   002484  C070  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  7648   002488  C071  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  7649   00248C  ECEF  F022         	call	___lldiv	;wreg free
  7650   002490  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7651   002494  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7652   002498  C01C  FFDE         	movff	?___lldiv,postinc2
  7653   00249C  C01D  FFDD         	movff	?___lldiv+1,postdec2
  7654   0024A0  EF74  F013         	goto	l231
  7655   0024A4                     l3444:
  7656                           
  7657                           ; BSR set to: 0
  7658   0024A4  5174               	movf	rgb_2_hsv@b& (0+255),w,b
  7659   0024A6  5D72               	subwf	rgb_2_hsv@g& (0+255),w,b
  7660   0024A8  5175               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7661   0024AA  5973               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  7662   0024AC  B0D8               	btfsc	status,0,c
  7663   0024AE  EF5B  F012         	goto	u2321
  7664   0024B2  EF5D  F012         	goto	u2320
  7665   0024B6                     u2321:
  7666   0024B6  EF74  F013         	goto	l231
  7667   0024BA                     u2320:
  7668   0024BA                     
  7669                           ; BSR set to: 0
  7670   0024BA  5174               	movf	rgb_2_hsv@b& (0+255),w,b
  7671   0024BC  6E34               	movwf	??_rgb_2_hsv^0,c
  7672   0024BE  5175               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7673   0024C0  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  7674   0024C2  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  7675   0024C4  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  7676   0024C6  C06E  F010         	movff	rgb_2_hsv@diff,___lmul@multiplier
  7677   0024CA  C06F  F011         	movff	rgb_2_hsv@diff+1,___lmul@multiplier+1
  7678   0024CE  C070  F012         	movff	rgb_2_hsv@diff+2,___lmul@multiplier+2
  7679   0024D2  C071  F013         	movff	rgb_2_hsv@diff+3,___lmul@multiplier+3
  7680   0024D6  0E06               	movlw	6
  7681   0024D8  6E14               	movwf	___lmul@multiplicand^0,c
  7682   0024DA  0E00               	movlw	0
  7683   0024DC  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7684   0024DE  0E00               	movlw	0
  7685   0024E0  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7686   0024E2  0E00               	movlw	0
  7687   0024E4  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7688   0024E6  ECFD  F023         	call	___lmul	;wreg free
  7689   0024EA  0100               	movlb	0	; () banked
  7690   0024EC  5172               	movf	rgb_2_hsv@g& (0+255),w,b
  7691   0024EE  2410               	addwf	?___lmul^0,w,c
  7692   0024F0  6E38               	movwf	(??_rgb_2_hsv+4)^0,c
  7693   0024F2  5173               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7694   0024F4  2011               	addwfc	(?___lmul+1)^0,w,c
  7695   0024F6  6E39               	movwf	(??_rgb_2_hsv+5)^0,c
  7696   0024F8  0E00               	movlw	0
  7697   0024FA  2012               	addwfc	(?___lmul+2)^0,w,c
  7698   0024FC  6E3A               	movwf	(??_rgb_2_hsv+6)^0,c
  7699   0024FE  0E00               	movlw	0
  7700   002500  2013               	addwfc	(?___lmul+3)^0,w,c
  7701   002502  6E3B               	movwf	(??_rgb_2_hsv+7)^0,c
  7702   002504  5034               	movf	??_rgb_2_hsv^0,w,c
  7703   002506  5C38               	subwf	(??_rgb_2_hsv+4)^0,w,c
  7704   002508  6F60               	movwf	_rgb_2_hsv$3606& (0+255),b
  7705   00250A  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  7706   00250C  5839               	subwfb	(??_rgb_2_hsv+5)^0,w,c
  7707   00250E  6F61               	movwf	(_rgb_2_hsv$3606+1)& (0+255),b
  7708   002510  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  7709   002512  583A               	subwfb	(??_rgb_2_hsv+6)^0,w,c
  7710   002514  6F62               	movwf	(_rgb_2_hsv$3606+2)& (0+255),b
  7711   002516  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  7712   002518  583B               	subwfb	(??_rgb_2_hsv+7)^0,w,c
  7713   00251A  6F63               	movwf	(_rgb_2_hsv$3606+3)& (0+255),b
  7714   00251C                     
  7715                           ; BSR set to: 0
  7716   00251C  C060  F010         	movff	_rgb_2_hsv$3606,___lmul@multiplier
  7717   002520  C061  F011         	movff	_rgb_2_hsv$3606+1,___lmul@multiplier+1
  7718   002524  C062  F012         	movff	_rgb_2_hsv$3606+2,___lmul@multiplier+2
  7719   002528  C063  F013         	movff	_rgb_2_hsv$3606+3,___lmul@multiplier+3
  7720   00252C  0E70               	movlw	112
  7721   00252E  6E14               	movwf	___lmul@multiplicand^0,c
  7722   002530  0E17               	movlw	23
  7723   002532  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7724   002534  0E00               	movlw	0
  7725   002536  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7726   002538  0E00               	movlw	0
  7727   00253A  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7728   00253C  ECFD  F023         	call	___lmul	;wreg free
  7729   002540  C010  F01C         	movff	?___lmul,___lldiv@dividend
  7730   002544  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  7731   002548  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  7732   00254C  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  7733   002550  C06E  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  7734   002554  C06F  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  7735   002558  C070  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  7736   00255C  C071  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  7737   002560  ECEF  F022         	call	___lldiv	;wreg free
  7738   002564  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7739   002568  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7740   00256C  C01C  FFDE         	movff	?___lldiv,postinc2
  7741   002570  C01D  FFDD         	movff	?___lldiv+1,postdec2
  7742   002574  EF74  F013         	goto	l231
  7743   002578                     l3450:
  7744                           
  7745                           ; BSR set to: 0
  7746   002578  5172               	movf	rgb_2_hsv@g& (0+255),w,b
  7747   00257A  196C               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  7748   00257C  E107               	bnz	u2331
  7749   00257E  5173               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7750   002580  196D               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7751   002582  A4D8               	btfss	status,2,c
  7752   002584  EFC6  F012         	goto	u2331
  7753   002588  EFC8  F012         	goto	u2330
  7754   00258C                     u2331:
  7755   00258C  EF15  F013         	goto	l3454
  7756   002590                     u2330:
  7757   002590                     
  7758                           ; BSR set to: 0
  7759   002590  516A               	movf	rgb_2_hsv@r& (0+255),w,b
  7760   002592  6E34               	movwf	??_rgb_2_hsv^0,c
  7761   002594  516B               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  7762   002596  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  7763   002598  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  7764   00259A  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  7765   00259C  90D8               	bcf	status,0,c
  7766   00259E  356E               	rlcf	rgb_2_hsv@diff& (0+255),w,b
  7767   0025A0  6E38               	movwf	(??_rgb_2_hsv+4)^0,c
  7768   0025A2  356F               	rlcf	(rgb_2_hsv@diff+1)& (0+255),w,b
  7769   0025A4  6E39               	movwf	(??_rgb_2_hsv+5)^0,c
  7770   0025A6  3570               	rlcf	(rgb_2_hsv@diff+2)& (0+255),w,b
  7771   0025A8  6E3A               	movwf	(??_rgb_2_hsv+6)^0,c
  7772   0025AA  3571               	rlcf	(rgb_2_hsv@diff+3)& (0+255),w,b
  7773   0025AC  6E3B               	movwf	(??_rgb_2_hsv+7)^0,c
  7774   0025AE  5174               	movf	rgb_2_hsv@b& (0+255),w,b
  7775   0025B0  2438               	addwf	(??_rgb_2_hsv+4)^0,w,c
  7776   0025B2  6E3C               	movwf	(??_rgb_2_hsv+8)^0,c
  7777   0025B4  5175               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7778   0025B6  2039               	addwfc	(??_rgb_2_hsv+5)^0,w,c
  7779   0025B8  6E3D               	movwf	(??_rgb_2_hsv+9)^0,c
  7780   0025BA  0E00               	movlw	0
  7781   0025BC  203A               	addwfc	(??_rgb_2_hsv+6)^0,w,c
  7782   0025BE  6E3E               	movwf	(??_rgb_2_hsv+10)^0,c
  7783   0025C0  0E00               	movlw	0
  7784   0025C2  203B               	addwfc	(??_rgb_2_hsv+7)^0,w,c
  7785   0025C4  6E3F               	movwf	(??_rgb_2_hsv+11)^0,c
  7786   0025C6  5034               	movf	??_rgb_2_hsv^0,w,c
  7787   0025C8  5C3C               	subwf	(??_rgb_2_hsv+8)^0,w,c
  7788   0025CA  6E10               	movwf	___lmul@multiplier^0,c
  7789   0025CC  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  7790   0025CE  583D               	subwfb	(??_rgb_2_hsv+9)^0,w,c
  7791   0025D0  6E11               	movwf	(___lmul@multiplier+1)^0,c
  7792   0025D2  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  7793   0025D4  583E               	subwfb	(??_rgb_2_hsv+10)^0,w,c
  7794   0025D6  6E12               	movwf	(___lmul@multiplier+2)^0,c
  7795   0025D8  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  7796   0025DA  583F               	subwfb	(??_rgb_2_hsv+11)^0,w,c
  7797   0025DC  6E13               	movwf	(___lmul@multiplier+3)^0,c
  7798   0025DE  0E70               	movlw	112
  7799   0025E0  6E14               	movwf	___lmul@multiplicand^0,c
  7800   0025E2  0E17               	movlw	23
  7801   0025E4  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7802   0025E6  0E00               	movlw	0
  7803   0025E8  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7804   0025EA  0E00               	movlw	0
  7805   0025EC  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7806   0025EE  ECFD  F023         	call	___lmul	;wreg free
  7807   0025F2  C010  F01C         	movff	?___lmul,___lldiv@dividend
  7808   0025F6  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  7809   0025FA  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  7810   0025FE  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  7811   002602  C06E  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  7812   002606  C06F  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  7813   00260A  C070  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  7814   00260E  C071  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  7815   002612  ECEF  F022         	call	___lldiv	;wreg free
  7816   002616  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7817   00261A  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7818   00261E  C01C  FFDE         	movff	?___lldiv,postinc2
  7819   002622  C01D  FFDD         	movff	?___lldiv+1,postdec2
  7820   002626  EF74  F013         	goto	l231
  7821   00262A                     l3454:
  7822                           
  7823                           ; BSR set to: 0
  7824   00262A  5174               	movf	rgb_2_hsv@b& (0+255),w,b
  7825   00262C  196C               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  7826   00262E  E107               	bnz	u2341
  7827   002630  5175               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7828   002632  196D               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7829   002634  A4D8               	btfss	status,2,c
  7830   002636  EF1F  F013         	goto	u2341
  7831   00263A  EF21  F013         	goto	u2340
  7832   00263E                     u2341:
  7833   00263E  EF74  F013         	goto	l231
  7834   002642                     u2340:
  7835   002642                     
  7836                           ; BSR set to: 0
  7837   002642  5172               	movf	rgb_2_hsv@g& (0+255),w,b
  7838   002644  6E34               	movwf	??_rgb_2_hsv^0,c
  7839   002646  5173               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7840   002648  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  7841   00264A  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  7842   00264C  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  7843   00264E  C06E  F038         	movff	rgb_2_hsv@diff,??_rgb_2_hsv+4
  7844   002652  C06F  F039         	movff	rgb_2_hsv@diff+1,??_rgb_2_hsv+5
  7845   002656  C070  F03A         	movff	rgb_2_hsv@diff+2,??_rgb_2_hsv+6
  7846   00265A  C071  F03B         	movff	rgb_2_hsv@diff+3,??_rgb_2_hsv+7
  7847   00265E  0E02               	movlw	2
  7848   002660                     u2355:
  7849   002660  90D8               	bcf	status,0,c
  7850   002662  3638               	rlcf	(??_rgb_2_hsv+4)^0,f,c
  7851   002664  3639               	rlcf	(??_rgb_2_hsv+5)^0,f,c
  7852   002666  363A               	rlcf	(??_rgb_2_hsv+6)^0,f,c
  7853   002668  363B               	rlcf	(??_rgb_2_hsv+7)^0,f,c
  7854   00266A  2EE8               	decfsz	wreg,f,c
  7855   00266C  EF30  F013         	goto	u2355
  7856   002670  516A               	movf	rgb_2_hsv@r& (0+255),w,b
  7857   002672  2438               	addwf	(??_rgb_2_hsv+4)^0,w,c
  7858   002674  6E3C               	movwf	(??_rgb_2_hsv+8)^0,c
  7859   002676  516B               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  7860   002678  2039               	addwfc	(??_rgb_2_hsv+5)^0,w,c
  7861   00267A  6E3D               	movwf	(??_rgb_2_hsv+9)^0,c
  7862   00267C  0E00               	movlw	0
  7863   00267E  203A               	addwfc	(??_rgb_2_hsv+6)^0,w,c
  7864   002680  6E3E               	movwf	(??_rgb_2_hsv+10)^0,c
  7865   002682  0E00               	movlw	0
  7866   002684  203B               	addwfc	(??_rgb_2_hsv+7)^0,w,c
  7867   002686  6E3F               	movwf	(??_rgb_2_hsv+11)^0,c
  7868   002688  5034               	movf	??_rgb_2_hsv^0,w,c
  7869   00268A  5C3C               	subwf	(??_rgb_2_hsv+8)^0,w,c
  7870   00268C  6E10               	movwf	___lmul@multiplier^0,c
  7871   00268E  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  7872   002690  583D               	subwfb	(??_rgb_2_hsv+9)^0,w,c
  7873   002692  6E11               	movwf	(___lmul@multiplier+1)^0,c
  7874   002694  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  7875   002696  583E               	subwfb	(??_rgb_2_hsv+10)^0,w,c
  7876   002698  6E12               	movwf	(___lmul@multiplier+2)^0,c
  7877   00269A  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  7878   00269C  583F               	subwfb	(??_rgb_2_hsv+11)^0,w,c
  7879   00269E  6E13               	movwf	(___lmul@multiplier+3)^0,c
  7880   0026A0  0E70               	movlw	112
  7881   0026A2  6E14               	movwf	___lmul@multiplicand^0,c
  7882   0026A4  0E17               	movlw	23
  7883   0026A6  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7884   0026A8  0E00               	movlw	0
  7885   0026AA  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7886   0026AC  0E00               	movlw	0
  7887   0026AE  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7888   0026B0  ECFD  F023         	call	___lmul	;wreg free
  7889   0026B4  C010  F01C         	movff	?___lmul,___lldiv@dividend
  7890   0026B8  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  7891   0026BC  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  7892   0026C0  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  7893   0026C4  C06E  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  7894   0026C8  C06F  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  7895   0026CC  C070  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  7896   0026D0  C071  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  7897   0026D4  ECEF  F022         	call	___lldiv	;wreg free
  7898   0026D8  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7899   0026DC  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7900   0026E0  C01C  FFDE         	movff	?___lldiv,postinc2
  7901   0026E4  C01D  FFDD         	movff	?___lldiv+1,postdec2
  7902   0026E8                     l231:
  7903                           
  7904                           ;color.c: 291:     HSV->S = (unsigned int)((diff * 10000)/cmax);
  7905   0026E8  C06E  F010         	movff	rgb_2_hsv@diff,___lmul@multiplier
  7906   0026EC  C06F  F011         	movff	rgb_2_hsv@diff+1,___lmul@multiplier+1
  7907   0026F0  C070  F012         	movff	rgb_2_hsv@diff+2,___lmul@multiplier+2
  7908   0026F4  C071  F013         	movff	rgb_2_hsv@diff+3,___lmul@multiplier+3
  7909   0026F8  0E10               	movlw	16
  7910   0026FA  6E14               	movwf	___lmul@multiplicand^0,c
  7911   0026FC  0E27               	movlw	39
  7912   0026FE  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  7913   002700  0E00               	movlw	0
  7914   002702  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  7915   002704  0E00               	movlw	0
  7916   002706  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  7917   002708  ECFD  F023         	call	___lmul	;wreg free
  7918   00270C  C010  F01C         	movff	?___lmul,___lldiv@dividend
  7919   002710  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  7920   002714  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  7921   002718  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  7922   00271C  C06C  F020         	movff	rgb_2_hsv@cmax,___lldiv@divisor
  7923   002720  C06D  F021         	movff	rgb_2_hsv@cmax+1,___lldiv@divisor+1
  7924   002724  6A22               	clrf	(___lldiv@divisor+2)^0,c
  7925   002726  6A23               	clrf	(___lldiv@divisor+3)^0,c
  7926   002728  ECEF  F022         	call	___lldiv	;wreg free
  7927   00272C  EE20 F002          	lfsr	2,2
  7928   002730  5032               	movf	rgb_2_hsv@HSV^0,w,c
  7929   002732  26D9               	addwf	fsr2l,f,c
  7930   002734  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  7931   002736  22DA               	addwfc	fsr2h,f,c
  7932   002738  C01C  FFDE         	movff	?___lldiv,postinc2
  7933   00273C  C01D  FFDD         	movff	?___lldiv+1,postdec2
  7934   002740                     
  7935                           ;color.c: 293:     if (HSV->S == 0){HSV->H = 0;}
  7936   002740  EE20 F002          	lfsr	2,2
  7937   002744  5032               	movf	rgb_2_hsv@HSV^0,w,c
  7938   002746  26D9               	addwf	fsr2l,f,c
  7939   002748  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  7940   00274A  22DA               	addwfc	fsr2h,f,c
  7941   00274C  50DE               	movf	postinc2,w,c
  7942   00274E  10DE               	iorwf	postinc2,w,c
  7943   002750  A4D8               	btfss	status,2,c
  7944   002752  EFAD  F013         	goto	u2361
  7945   002756  EFAF  F013         	goto	u2360
  7946   00275A                     u2361:
  7947   00275A  EFB5  F013         	goto	l3462
  7948   00275E                     u2360:
  7949   00275E  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7950   002762  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7951   002766  6ADE               	clrf	postinc2,c
  7952   002768  6ADD               	clrf	postdec2,c
  7953   00276A                     l3462:
  7954                           
  7955                           ;color.c: 296:     HSV->V = cmax;
  7956   00276A  EE20 F004          	lfsr	2,4
  7957   00276E  5032               	movf	rgb_2_hsv@HSV^0,w,c
  7958   002770  26D9               	addwf	fsr2l,f,c
  7959   002772  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  7960   002774  22DA               	addwfc	fsr2h,f,c
  7961   002776  C06C  FFDE         	movff	rgb_2_hsv@cmax,postinc2
  7962   00277A  C06D  FFDD         	movff	rgb_2_hsv@cmax+1,postdec2
  7963   00277E  0012               	return		;funcret
  7964   002780                     __end_of_rgb_2_hsv:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _min *****************
  7968 ;; Defined at:
  7969 ;;		line 260 in file "color.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  a               2   15[COMRAM] unsigned int 
  7972 ;;  b               2   17[COMRAM] unsigned int 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;		None
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  2   15[COMRAM] unsigned int 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;Total ram usage:        4 bytes
  7989 ;; Hardware stack levels used: 1
  7990 ;; Hardware stack levels required when called: 5
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		_color_detect
  7995 ;;		_rgb_2_hsv
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           	psect	text20
  8000   0049BA                     __ptext20:
  8001                           	callstack 0
  8002   0049BA                     _min:
  8003                           	callstack 24
  8004   0049BA                     
  8005                           ;color.c: 261:     if (a < b){return a;}
  8006   0049BA  5012               	movf	min@b^0,w,c
  8007   0049BC  5C10               	subwf	min@a^0,w,c
  8008   0049BE  5013               	movf	(min@b+1)^0,w,c
  8009   0049C0  5811               	subwfb	(min@a+1)^0,w,c
  8010   0049C2  B0D8               	btfsc	status,0,c
  8011   0049C4  EFE6  F024         	goto	u2011
  8012   0049C8  EFE8  F024         	goto	u2010
  8013   0049CC                     u2011:
  8014   0049CC  EFEE  F024         	goto	l222
  8015   0049D0                     u2010:
  8016   0049D0  C010  F010         	movff	min@a,?_min
  8017   0049D4  C011  F011         	movff	min@a+1,?_min+1
  8018   0049D8  EFF2  F024         	goto	l223
  8019   0049DC                     l222:
  8020   0049DC  C012  F010         	movff	min@b,?_min
  8021   0049E0  C013  F011         	movff	min@b+1,?_min+1
  8022   0049E4                     l223:
  8023   0049E4  0012               	return		;funcret
  8024   0049E6                     __end_of_min:
  8025                           	callstack 0
  8026                           
  8027 ;; *************** function _max *****************
  8028 ;; Defined at:
  8029 ;;		line 255 in file "color.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  a               2   15[COMRAM] unsigned int 
  8032 ;;  b               2   17[COMRAM] unsigned int 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  2   15[COMRAM] unsigned int 
  8037 ;; Registers used:
  8038 ;;		wreg, status,2, status,0
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8047 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8048 ;;Total ram usage:        4 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; Hardware stack levels required when called: 5
  8051 ;; This function calls:
  8052 ;;		Nothing
  8053 ;; This function is called by:
  8054 ;;		_color_detect
  8055 ;;		_rgb_2_hsv
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text21
  8060   0049E6                     __ptext21:
  8061                           	callstack 0
  8062   0049E6                     _max:
  8063                           	callstack 24
  8064   0049E6                     
  8065                           ;color.c: 256:     if (a > b){return a;}
  8066   0049E6  5010               	movf	max@a^0,w,c
  8067   0049E8  5C12               	subwf	max@b^0,w,c
  8068   0049EA  5011               	movf	(max@a+1)^0,w,c
  8069   0049EC  5813               	subwfb	(max@b+1)^0,w,c
  8070   0049EE  B0D8               	btfsc	status,0,c
  8071   0049F0  EFFC  F024         	goto	u2021
  8072   0049F4  EFFE  F024         	goto	u2020
  8073   0049F8                     u2021:
  8074   0049F8  EF04  F025         	goto	l217
  8075   0049FC                     u2020:
  8076   0049FC  C010  F010         	movff	max@a,?_max
  8077   004A00  C011  F011         	movff	max@a+1,?_max+1
  8078   004A04  EF08  F025         	goto	l218
  8079   004A08                     l217:
  8080   004A08  C012  F010         	movff	max@b,?_max
  8081   004A0C  C013  F011         	movff	max@b+1,?_max+1
  8082   004A10                     l218:
  8083   004A10  0012               	return		;funcret
  8084   004A12                     __end_of_max:
  8085                           	callstack 0
  8086                           
  8087 ;; *************** function ___lmul *****************
  8088 ;; Defined at:
  8089 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  multiplier      4   15[COMRAM] unsigned long 
  8092 ;;  multiplicand    4   19[COMRAM] unsigned long 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  product         4   23[COMRAM] unsigned long 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  4   15[COMRAM] unsigned long 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8104 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8107 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8108 ;;Total ram usage:       12 bytes
  8109 ;; Hardware stack levels used: 1
  8110 ;; Hardware stack levels required when called: 5
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_rgb_2_hsv
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text22
  8119   0047FA                     __ptext22:
  8120                           	callstack 0
  8121   0047FA                     ___lmul:
  8122                           	callstack 24
  8123   0047FA  0E00               	movlw	0
  8124   0047FC  6E18               	movwf	___lmul@product^0,c
  8125   0047FE  0E00               	movlw	0
  8126   004800  6E19               	movwf	(___lmul@product+1)^0,c
  8127   004802  0E00               	movlw	0
  8128   004804  6E1A               	movwf	(___lmul@product+2)^0,c
  8129   004806  0E00               	movlw	0
  8130   004808  6E1B               	movwf	(___lmul@product+3)^0,c
  8131   00480A                     l3312:
  8132   00480A  A010               	btfss	___lmul@multiplier^0,0,c
  8133   00480C  EF0A  F024         	goto	u2181
  8134   004810  EF0C  F024         	goto	u2180
  8135   004814                     u2181:
  8136   004814  EF14  F024         	goto	l3316
  8137   004818                     u2180:
  8138   004818  5014               	movf	___lmul@multiplicand^0,w,c
  8139   00481A  2618               	addwf	___lmul@product^0,f,c
  8140   00481C  5015               	movf	(___lmul@multiplicand+1)^0,w,c
  8141   00481E  2219               	addwfc	(___lmul@product+1)^0,f,c
  8142   004820  5016               	movf	(___lmul@multiplicand+2)^0,w,c
  8143   004822  221A               	addwfc	(___lmul@product+2)^0,f,c
  8144   004824  5017               	movf	(___lmul@multiplicand+3)^0,w,c
  8145   004826  221B               	addwfc	(___lmul@product+3)^0,f,c
  8146   004828                     l3316:
  8147   004828  90D8               	bcf	status,0,c
  8148   00482A  3614               	rlcf	___lmul@multiplicand^0,f,c
  8149   00482C  3615               	rlcf	(___lmul@multiplicand+1)^0,f,c
  8150   00482E  3616               	rlcf	(___lmul@multiplicand+2)^0,f,c
  8151   004830  3617               	rlcf	(___lmul@multiplicand+3)^0,f,c
  8152   004832  90D8               	bcf	status,0,c
  8153   004834  3213               	rrcf	(___lmul@multiplier+3)^0,f,c
  8154   004836  3212               	rrcf	(___lmul@multiplier+2)^0,f,c
  8155   004838  3211               	rrcf	(___lmul@multiplier+1)^0,f,c
  8156   00483A  3210               	rrcf	___lmul@multiplier^0,f,c
  8157   00483C  5010               	movf	___lmul@multiplier^0,w,c
  8158   00483E  1011               	iorwf	(___lmul@multiplier+1)^0,w,c
  8159   004840  1012               	iorwf	(___lmul@multiplier+2)^0,w,c
  8160   004842  1013               	iorwf	(___lmul@multiplier+3)^0,w,c
  8161   004844  A4D8               	btfss	status,2,c
  8162   004846  EF27  F024         	goto	u2191
  8163   00484A  EF29  F024         	goto	u2190
  8164   00484E                     u2191:
  8165   00484E  EF05  F024         	goto	l3312
  8166   004852                     u2190:
  8167   004852  C018  F010         	movff	___lmul@product,?___lmul
  8168   004856  C019  F011         	movff	___lmul@product+1,?___lmul+1
  8169   00485A  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  8170   00485E  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  8171   004862  0012               	return		;funcret
  8172   004864                     __end_of___lmul:
  8173                           	callstack 0
  8174                           
  8175 ;; *************** function ___lldiv *****************
  8176 ;; Defined at:
  8177 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  dividend        4   27[COMRAM] unsigned long 
  8180 ;;  divisor         4   31[COMRAM] unsigned long 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  quotient        4   35[COMRAM] unsigned long 
  8183 ;;  counter         1   39[COMRAM] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;                  4   27[COMRAM] unsigned long 
  8186 ;; Registers used:
  8187 ;;		wreg, status,2, status,0
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8193 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8194 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8196 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8197 ;;Total ram usage:       13 bytes
  8198 ;; Hardware stack levels used: 1
  8199 ;; Hardware stack levels required when called: 5
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		_rgb_2_hsv
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text23
  8208   0045DE                     __ptext23:
  8209                           	callstack 0
  8210   0045DE                     ___lldiv:
  8211                           	callstack 24
  8212   0045DE  0E00               	movlw	0
  8213   0045E0  6E24               	movwf	___lldiv@quotient^0,c
  8214   0045E2  0E00               	movlw	0
  8215   0045E4  6E25               	movwf	(___lldiv@quotient+1)^0,c
  8216   0045E6  0E00               	movlw	0
  8217   0045E8  6E26               	movwf	(___lldiv@quotient+2)^0,c
  8218   0045EA  0E00               	movlw	0
  8219   0045EC  6E27               	movwf	(___lldiv@quotient+3)^0,c
  8220   0045EE  5020               	movf	___lldiv@divisor^0,w,c
  8221   0045F0  1021               	iorwf	(___lldiv@divisor+1)^0,w,c
  8222   0045F2  1022               	iorwf	(___lldiv@divisor+2)^0,w,c
  8223   0045F4  1023               	iorwf	(___lldiv@divisor+3)^0,w,c
  8224   0045F6  B4D8               	btfsc	status,2,c
  8225   0045F8  EF00  F023         	goto	u2201
  8226   0045FC  EF02  F023         	goto	u2200
  8227   004600                     u2201:
  8228   004600  EF38  F023         	goto	l806
  8229   004604                     u2200:
  8230   004604  0E01               	movlw	1
  8231   004606  6E28               	movwf	___lldiv@counter^0,c
  8232   004608  EF0C  F023         	goto	l3328
  8233   00460C                     l3326:
  8234   00460C  90D8               	bcf	status,0,c
  8235   00460E  3620               	rlcf	___lldiv@divisor^0,f,c
  8236   004610  3621               	rlcf	(___lldiv@divisor+1)^0,f,c
  8237   004612  3622               	rlcf	(___lldiv@divisor+2)^0,f,c
  8238   004614  3623               	rlcf	(___lldiv@divisor+3)^0,f,c
  8239   004616  2A28               	incf	___lldiv@counter^0,f,c
  8240   004618                     l3328:
  8241   004618  AE23               	btfss	(___lldiv@divisor+3)^0,7,c
  8242   00461A  EF11  F023         	goto	u2211
  8243   00461E  EF13  F023         	goto	u2210
  8244   004622                     u2211:
  8245   004622  EF06  F023         	goto	l3326
  8246   004626                     u2210:
  8247   004626                     l3330:
  8248   004626  90D8               	bcf	status,0,c
  8249   004628  3624               	rlcf	___lldiv@quotient^0,f,c
  8250   00462A  3625               	rlcf	(___lldiv@quotient+1)^0,f,c
  8251   00462C  3626               	rlcf	(___lldiv@quotient+2)^0,f,c
  8252   00462E  3627               	rlcf	(___lldiv@quotient+3)^0,f,c
  8253   004630  5020               	movf	___lldiv@divisor^0,w,c
  8254   004632  5C1C               	subwf	___lldiv@dividend^0,w,c
  8255   004634  5021               	movf	(___lldiv@divisor+1)^0,w,c
  8256   004636  581D               	subwfb	(___lldiv@dividend+1)^0,w,c
  8257   004638  5022               	movf	(___lldiv@divisor+2)^0,w,c
  8258   00463A  581E               	subwfb	(___lldiv@dividend+2)^0,w,c
  8259   00463C  5023               	movf	(___lldiv@divisor+3)^0,w,c
  8260   00463E  581F               	subwfb	(___lldiv@dividend+3)^0,w,c
  8261   004640  A0D8               	btfss	status,0,c
  8262   004642  EF25  F023         	goto	u2221
  8263   004646  EF27  F023         	goto	u2220
  8264   00464A                     u2221:
  8265   00464A  EF30  F023         	goto	l3338
  8266   00464E                     u2220:
  8267   00464E  5020               	movf	___lldiv@divisor^0,w,c
  8268   004650  5E1C               	subwf	___lldiv@dividend^0,f,c
  8269   004652  5021               	movf	(___lldiv@divisor+1)^0,w,c
  8270   004654  5A1D               	subwfb	(___lldiv@dividend+1)^0,f,c
  8271   004656  5022               	movf	(___lldiv@divisor+2)^0,w,c
  8272   004658  5A1E               	subwfb	(___lldiv@dividend+2)^0,f,c
  8273   00465A  5023               	movf	(___lldiv@divisor+3)^0,w,c
  8274   00465C  5A1F               	subwfb	(___lldiv@dividend+3)^0,f,c
  8275   00465E  8024               	bsf	___lldiv@quotient^0,0,c
  8276   004660                     l3338:
  8277   004660  90D8               	bcf	status,0,c
  8278   004662  3223               	rrcf	(___lldiv@divisor+3)^0,f,c
  8279   004664  3222               	rrcf	(___lldiv@divisor+2)^0,f,c
  8280   004666  3221               	rrcf	(___lldiv@divisor+1)^0,f,c
  8281   004668  3220               	rrcf	___lldiv@divisor^0,f,c
  8282   00466A  2E28               	decfsz	___lldiv@counter^0,f,c
  8283   00466C  EF13  F023         	goto	l3330
  8284   004670                     l806:
  8285   004670  C024  F01C         	movff	___lldiv@quotient,?___lldiv
  8286   004674  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
  8287   004678  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
  8288   00467C  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
  8289   004680  0012               	return		;funcret
  8290   004682                     __end_of___lldiv:
  8291                           	callstack 0
  8292                           
  8293 ;; *************** function ___aldiv *****************
  8294 ;; Defined at:
  8295 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  dividend        4   27[COMRAM] long 
  8298 ;;  divisor         4   31[COMRAM] long 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  quotient        4   37[COMRAM] long 
  8301 ;;  sign            1   36[COMRAM] unsigned char 
  8302 ;;  counter         1   35[COMRAM] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  4   27[COMRAM] long 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8312 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8313 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8315 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8316 ;;Total ram usage:       14 bytes
  8317 ;; Hardware stack levels used: 1
  8318 ;; Hardware stack levels required when called: 5
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_rgb_2_hsv
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text24
  8327   0040D4                     __ptext24:
  8328                           	callstack 0
  8329   0040D4                     ___aldiv:
  8330                           	callstack 24
  8331   0040D4  0E00               	movlw	0
  8332   0040D6  6E25               	movwf	___aldiv@sign^0,c
  8333   0040D8  BE23               	btfsc	(___aldiv@divisor+3)^0,7,c
  8334   0040DA  EF73  F020         	goto	u2230
  8335   0040DE  EF71  F020         	goto	u2231
  8336   0040E2                     u2231:
  8337   0040E2  EF7D  F020         	goto	l3350
  8338   0040E6                     u2230:
  8339   0040E6  1E23               	comf	(___aldiv@divisor+3)^0,f,c
  8340   0040E8  1E22               	comf	(___aldiv@divisor+2)^0,f,c
  8341   0040EA  1E21               	comf	(___aldiv@divisor+1)^0,f,c
  8342   0040EC  6C20               	negf	___aldiv@divisor^0,c
  8343   0040EE  0E00               	movlw	0
  8344   0040F0  2221               	addwfc	(___aldiv@divisor+1)^0,f,c
  8345   0040F2  2222               	addwfc	(___aldiv@divisor+2)^0,f,c
  8346   0040F4  2223               	addwfc	(___aldiv@divisor+3)^0,f,c
  8347   0040F6  0E01               	movlw	1
  8348   0040F8  6E25               	movwf	___aldiv@sign^0,c
  8349   0040FA                     l3350:
  8350   0040FA  BE1F               	btfsc	(___aldiv@dividend+3)^0,7,c
  8351   0040FC  EF84  F020         	goto	u2240
  8352   004100  EF82  F020         	goto	u2241
  8353   004104                     u2241:
  8354   004104  EF8E  F020         	goto	l3356
  8355   004108                     u2240:
  8356   004108  1E1F               	comf	(___aldiv@dividend+3)^0,f,c
  8357   00410A  1E1E               	comf	(___aldiv@dividend+2)^0,f,c
  8358   00410C  1E1D               	comf	(___aldiv@dividend+1)^0,f,c
  8359   00410E  6C1C               	negf	___aldiv@dividend^0,c
  8360   004110  0E00               	movlw	0
  8361   004112  221D               	addwfc	(___aldiv@dividend+1)^0,f,c
  8362   004114  221E               	addwfc	(___aldiv@dividend+2)^0,f,c
  8363   004116  221F               	addwfc	(___aldiv@dividend+3)^0,f,c
  8364   004118  0E01               	movlw	1
  8365   00411A  1A25               	xorwf	___aldiv@sign^0,f,c
  8366   00411C                     l3356:
  8367   00411C  0E00               	movlw	0
  8368   00411E  6E26               	movwf	___aldiv@quotient^0,c
  8369   004120  0E00               	movlw	0
  8370   004122  6E27               	movwf	(___aldiv@quotient+1)^0,c
  8371   004124  0E00               	movlw	0
  8372   004126  6E28               	movwf	(___aldiv@quotient+2)^0,c
  8373   004128  0E00               	movlw	0
  8374   00412A  6E29               	movwf	(___aldiv@quotient+3)^0,c
  8375   00412C  5020               	movf	___aldiv@divisor^0,w,c
  8376   00412E  1021               	iorwf	(___aldiv@divisor+1)^0,w,c
  8377   004130  1022               	iorwf	(___aldiv@divisor+2)^0,w,c
  8378   004132  1023               	iorwf	(___aldiv@divisor+3)^0,w,c
  8379   004134  B4D8               	btfsc	status,2,c
  8380   004136  EF9F  F020         	goto	u2251
  8381   00413A  EFA1  F020         	goto	u2250
  8382   00413E                     u2251:
  8383   00413E  EFD7  F020         	goto	l3378
  8384   004142                     u2250:
  8385   004142  0E01               	movlw	1
  8386   004144  6E24               	movwf	___aldiv@counter^0,c
  8387   004146  EFAB  F020         	goto	l3364
  8388   00414A                     l3362:
  8389   00414A  90D8               	bcf	status,0,c
  8390   00414C  3620               	rlcf	___aldiv@divisor^0,f,c
  8391   00414E  3621               	rlcf	(___aldiv@divisor+1)^0,f,c
  8392   004150  3622               	rlcf	(___aldiv@divisor+2)^0,f,c
  8393   004152  3623               	rlcf	(___aldiv@divisor+3)^0,f,c
  8394   004154  2A24               	incf	___aldiv@counter^0,f,c
  8395   004156                     l3364:
  8396   004156  AE23               	btfss	(___aldiv@divisor+3)^0,7,c
  8397   004158  EFB0  F020         	goto	u2261
  8398   00415C  EFB2  F020         	goto	u2260
  8399   004160                     u2261:
  8400   004160  EFA5  F020         	goto	l3362
  8401   004164                     u2260:
  8402   004164                     l3366:
  8403   004164  90D8               	bcf	status,0,c
  8404   004166  3626               	rlcf	___aldiv@quotient^0,f,c
  8405   004168  3627               	rlcf	(___aldiv@quotient+1)^0,f,c
  8406   00416A  3628               	rlcf	(___aldiv@quotient+2)^0,f,c
  8407   00416C  3629               	rlcf	(___aldiv@quotient+3)^0,f,c
  8408   00416E  5020               	movf	___aldiv@divisor^0,w,c
  8409   004170  5C1C               	subwf	___aldiv@dividend^0,w,c
  8410   004172  5021               	movf	(___aldiv@divisor+1)^0,w,c
  8411   004174  581D               	subwfb	(___aldiv@dividend+1)^0,w,c
  8412   004176  5022               	movf	(___aldiv@divisor+2)^0,w,c
  8413   004178  581E               	subwfb	(___aldiv@dividend+2)^0,w,c
  8414   00417A  5023               	movf	(___aldiv@divisor+3)^0,w,c
  8415   00417C  581F               	subwfb	(___aldiv@dividend+3)^0,w,c
  8416   00417E  A0D8               	btfss	status,0,c
  8417   004180  EFC4  F020         	goto	u2271
  8418   004184  EFC6  F020         	goto	u2270
  8419   004188                     u2271:
  8420   004188  EFCF  F020         	goto	l3374
  8421   00418C                     u2270:
  8422   00418C  5020               	movf	___aldiv@divisor^0,w,c
  8423   00418E  5E1C               	subwf	___aldiv@dividend^0,f,c
  8424   004190  5021               	movf	(___aldiv@divisor+1)^0,w,c
  8425   004192  5A1D               	subwfb	(___aldiv@dividend+1)^0,f,c
  8426   004194  5022               	movf	(___aldiv@divisor+2)^0,w,c
  8427   004196  5A1E               	subwfb	(___aldiv@dividend+2)^0,f,c
  8428   004198  5023               	movf	(___aldiv@divisor+3)^0,w,c
  8429   00419A  5A1F               	subwfb	(___aldiv@dividend+3)^0,f,c
  8430   00419C  8026               	bsf	___aldiv@quotient^0,0,c
  8431   00419E                     l3374:
  8432   00419E  90D8               	bcf	status,0,c
  8433   0041A0  3223               	rrcf	(___aldiv@divisor+3)^0,f,c
  8434   0041A2  3222               	rrcf	(___aldiv@divisor+2)^0,f,c
  8435   0041A4  3221               	rrcf	(___aldiv@divisor+1)^0,f,c
  8436   0041A6  3220               	rrcf	___aldiv@divisor^0,f,c
  8437   0041A8  2E24               	decfsz	___aldiv@counter^0,f,c
  8438   0041AA  EFB2  F020         	goto	l3366
  8439   0041AE                     l3378:
  8440   0041AE  5025               	movf	___aldiv@sign^0,w,c
  8441   0041B0  B4D8               	btfsc	status,2,c
  8442   0041B2  EFDD  F020         	goto	u2281
  8443   0041B6  EFDF  F020         	goto	u2280
  8444   0041BA                     u2281:
  8445   0041BA  EFE7  F020         	goto	l3382
  8446   0041BE                     u2280:
  8447   0041BE  1E29               	comf	(___aldiv@quotient+3)^0,f,c
  8448   0041C0  1E28               	comf	(___aldiv@quotient+2)^0,f,c
  8449   0041C2  1E27               	comf	(___aldiv@quotient+1)^0,f,c
  8450   0041C4  6C26               	negf	___aldiv@quotient^0,c
  8451   0041C6  0E00               	movlw	0
  8452   0041C8  2227               	addwfc	(___aldiv@quotient+1)^0,f,c
  8453   0041CA  2228               	addwfc	(___aldiv@quotient+2)^0,f,c
  8454   0041CC  2229               	addwfc	(___aldiv@quotient+3)^0,f,c
  8455   0041CE                     l3382:
  8456   0041CE  C026  F01C         	movff	___aldiv@quotient,?___aldiv
  8457   0041D2  C027  F01D         	movff	___aldiv@quotient+1,?___aldiv+1
  8458   0041D6  C028  F01E         	movff	___aldiv@quotient+2,?___aldiv+2
  8459   0041DA  C029  F01F         	movff	___aldiv@quotient+3,?___aldiv+3
  8460   0041DE  0012               	return		;funcret
  8461   0041E0                     __end_of___aldiv:
  8462                           	callstack 0
  8463                           
  8464 ;; *************** function _color_read *****************
  8465 ;; Defined at:
  8466 ;;		line 77 in file "color.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  RGBC            2   19[COMRAM] PTR struct RGBC_val
  8469 ;;		 -> main@RGBC(8), 
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8483 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8484 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8485 ;;Total ram usage:        9 bytes
  8486 ;; Hardware stack levels used: 1
  8487 ;; Hardware stack levels required when called: 7
  8488 ;; This function calls:
  8489 ;;		_I2C_2_Master_Read
  8490 ;;		_I2C_2_Master_RepStart
  8491 ;;		_I2C_2_Master_Start
  8492 ;;		_I2C_2_Master_Stop
  8493 ;;		_I2C_2_Master_Write
  8494 ;; This function is called by:
  8495 ;;		_main
  8496 ;;		_color_calibration
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text25
  8501   0037DA                     __ptext25:
  8502                           	callstack 0
  8503   0037DA                     _color_read:
  8504                           	callstack 23
  8505   0037DA                     
  8506                           ;color.c: 77: void color_read(RGBC_val *RGBC);color.c: 78: {;color.c: 79:  I2C_2_Master_
      +                          Start();
  8507   0037DA  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  8508                           
  8509                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8510   0037DE  0E52               	movlw	82
  8511   0037E0  EC16  F026         	call	_I2C_2_Master_Write
  8512                           
  8513                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x16);
  8514   0037E4  0EB6               	movlw	182
  8515   0037E6  EC16  F026         	call	_I2C_2_Master_Write
  8516                           
  8517                           ;color.c: 82:  I2C_2_Master_RepStart();
  8518   0037EA  EC31  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8519                           
  8520                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8521   0037EE  0E53               	movlw	83
  8522   0037F0  EC16  F026         	call	_I2C_2_Master_Write
  8523   0037F4                     
  8524                           ;color.c: 84:  RGBC->R=I2C_2_Master_Read(1);
  8525   0037F4  0E01               	movlw	1
  8526   0037F6  EC85  F024         	call	_I2C_2_Master_Read
  8527   0037FA  6E16               	movwf	??_color_read^0,c
  8528   0037FC  6A17               	clrf	(??_color_read+1)^0,c
  8529   0037FE  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8530   003802  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8531   003806  C016  FFDE         	movff	??_color_read,postinc2
  8532   00380A  C017  FFDD         	movff	??_color_read+1,postdec2
  8533   00380E                     
  8534                           ;color.c: 85:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  8535   00380E  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8536   003812  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8537   003816  CFDE F016          	movff	postinc2,??_color_read
  8538   00381A  CFDD F017          	movff	postdec2,??_color_read+1
  8539   00381E  0E00               	movlw	0
  8540   003820  EC85  F024         	call	_I2C_2_Master_Read
  8541   003824  6E18               	movwf	(??_color_read+2)^0,c
  8542   003826  5018               	movf	(??_color_read+2)^0,w,c
  8543   003828  6E1A               	movwf	(??_color_read+4)^0,c
  8544   00382A  6A19               	clrf	(??_color_read+3)^0,c
  8545   00382C  5016               	movf	??_color_read^0,w,c
  8546   00382E  1019               	iorwf	(??_color_read+3)^0,w,c
  8547   003830  6E1B               	movwf	(??_color_read+5)^0,c
  8548   003832  5017               	movf	(??_color_read+1)^0,w,c
  8549   003834  101A               	iorwf	(??_color_read+4)^0,w,c
  8550   003836  6E1C               	movwf	(??_color_read+6)^0,c
  8551   003838  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8552   00383C  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8553   003840  C01B  FFDE         	movff	??_color_read+5,postinc2
  8554   003844  C01C  FFDD         	movff	??_color_read+6,postdec2
  8555                           
  8556                           ;color.c: 86:  I2C_2_Master_Stop();
  8557   003848  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  8558                           
  8559                           ;color.c: 88:     I2C_2_Master_Start();
  8560   00384C  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  8561                           
  8562                           ;color.c: 89:  I2C_2_Master_Write(0x52 | 0x00);
  8563   003850  0E52               	movlw	82
  8564   003852  EC16  F026         	call	_I2C_2_Master_Write
  8565                           
  8566                           ;color.c: 90:  I2C_2_Master_Write(0xA0 | 0x18);
  8567   003856  0EB8               	movlw	184
  8568   003858  EC16  F026         	call	_I2C_2_Master_Write
  8569                           
  8570                           ;color.c: 91:  I2C_2_Master_RepStart();
  8571   00385C  EC31  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8572                           
  8573                           ;color.c: 92:  I2C_2_Master_Write(0x52 | 0x01);
  8574   003860  0E53               	movlw	83
  8575   003862  EC16  F026         	call	_I2C_2_Master_Write
  8576   003866                     
  8577                           ;color.c: 93:  RGBC->G=I2C_2_Master_Read(1);
  8578   003866  0E01               	movlw	1
  8579   003868  EC85  F024         	call	_I2C_2_Master_Read
  8580   00386C  6E16               	movwf	??_color_read^0,c
  8581   00386E  6A17               	clrf	(??_color_read+1)^0,c
  8582   003870  EE20 F002          	lfsr	2,2
  8583   003874  5014               	movf	color_read@RGBC^0,w,c
  8584   003876  26D9               	addwf	fsr2l,f,c
  8585   003878  5015               	movf	(color_read@RGBC+1)^0,w,c
  8586   00387A  22DA               	addwfc	fsr2h,f,c
  8587   00387C  C016  FFDE         	movff	??_color_read,postinc2
  8588   003880  C017  FFDD         	movff	??_color_read+1,postdec2
  8589   003884                     
  8590                           ;color.c: 94:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  8591   003884  EE20 F002          	lfsr	2,2
  8592   003888  5014               	movf	color_read@RGBC^0,w,c
  8593   00388A  26D9               	addwf	fsr2l,f,c
  8594   00388C  5015               	movf	(color_read@RGBC+1)^0,w,c
  8595   00388E  22DA               	addwfc	fsr2h,f,c
  8596   003890  CFDE F016          	movff	postinc2,??_color_read
  8597   003894  CFDD F017          	movff	postdec2,??_color_read+1
  8598   003898  0E00               	movlw	0
  8599   00389A  EC85  F024         	call	_I2C_2_Master_Read
  8600   00389E  6E18               	movwf	(??_color_read+2)^0,c
  8601   0038A0  5018               	movf	(??_color_read+2)^0,w,c
  8602   0038A2  6E1A               	movwf	(??_color_read+4)^0,c
  8603   0038A4  6A19               	clrf	(??_color_read+3)^0,c
  8604   0038A6  5016               	movf	??_color_read^0,w,c
  8605   0038A8  1019               	iorwf	(??_color_read+3)^0,w,c
  8606   0038AA  6E1B               	movwf	(??_color_read+5)^0,c
  8607   0038AC  5017               	movf	(??_color_read+1)^0,w,c
  8608   0038AE  101A               	iorwf	(??_color_read+4)^0,w,c
  8609   0038B0  6E1C               	movwf	(??_color_read+6)^0,c
  8610   0038B2  EE20 F002          	lfsr	2,2
  8611   0038B6  5014               	movf	color_read@RGBC^0,w,c
  8612   0038B8  26D9               	addwf	fsr2l,f,c
  8613   0038BA  5015               	movf	(color_read@RGBC+1)^0,w,c
  8614   0038BC  22DA               	addwfc	fsr2h,f,c
  8615   0038BE  C01B  FFDE         	movff	??_color_read+5,postinc2
  8616   0038C2  C01C  FFDD         	movff	??_color_read+6,postdec2
  8617                           
  8618                           ;color.c: 95:  I2C_2_Master_Stop();
  8619   0038C6  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  8620                           
  8621                           ;color.c: 97:     I2C_2_Master_Start();
  8622   0038CA  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  8623                           
  8624                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8625   0038CE  0E52               	movlw	82
  8626   0038D0  EC16  F026         	call	_I2C_2_Master_Write
  8627                           
  8628                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x1A);
  8629   0038D4  0EBA               	movlw	186
  8630   0038D6  EC16  F026         	call	_I2C_2_Master_Write
  8631                           
  8632                           ;color.c: 100:  I2C_2_Master_RepStart();
  8633   0038DA  EC31  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8634                           
  8635                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8636   0038DE  0E53               	movlw	83
  8637   0038E0  EC16  F026         	call	_I2C_2_Master_Write
  8638   0038E4                     
  8639                           ;color.c: 102:  RGBC->B=I2C_2_Master_Read(1);
  8640   0038E4  0E01               	movlw	1
  8641   0038E6  EC85  F024         	call	_I2C_2_Master_Read
  8642   0038EA  6E16               	movwf	??_color_read^0,c
  8643   0038EC  6A17               	clrf	(??_color_read+1)^0,c
  8644   0038EE  EE20 F004          	lfsr	2,4
  8645   0038F2  5014               	movf	color_read@RGBC^0,w,c
  8646   0038F4  26D9               	addwf	fsr2l,f,c
  8647   0038F6  5015               	movf	(color_read@RGBC+1)^0,w,c
  8648   0038F8  22DA               	addwfc	fsr2h,f,c
  8649   0038FA  C016  FFDE         	movff	??_color_read,postinc2
  8650   0038FE  C017  FFDD         	movff	??_color_read+1,postdec2
  8651   003902                     
  8652                           ;color.c: 103:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  8653   003902  EE20 F004          	lfsr	2,4
  8654   003906  5014               	movf	color_read@RGBC^0,w,c
  8655   003908  26D9               	addwf	fsr2l,f,c
  8656   00390A  5015               	movf	(color_read@RGBC+1)^0,w,c
  8657   00390C  22DA               	addwfc	fsr2h,f,c
  8658   00390E  CFDE F016          	movff	postinc2,??_color_read
  8659   003912  CFDD F017          	movff	postdec2,??_color_read+1
  8660   003916  0E00               	movlw	0
  8661   003918  EC85  F024         	call	_I2C_2_Master_Read
  8662   00391C  6E18               	movwf	(??_color_read+2)^0,c
  8663   00391E  5018               	movf	(??_color_read+2)^0,w,c
  8664   003920  6E1A               	movwf	(??_color_read+4)^0,c
  8665   003922  6A19               	clrf	(??_color_read+3)^0,c
  8666   003924  5016               	movf	??_color_read^0,w,c
  8667   003926  1019               	iorwf	(??_color_read+3)^0,w,c
  8668   003928  6E1B               	movwf	(??_color_read+5)^0,c
  8669   00392A  5017               	movf	(??_color_read+1)^0,w,c
  8670   00392C  101A               	iorwf	(??_color_read+4)^0,w,c
  8671   00392E  6E1C               	movwf	(??_color_read+6)^0,c
  8672   003930  EE20 F004          	lfsr	2,4
  8673   003934  5014               	movf	color_read@RGBC^0,w,c
  8674   003936  26D9               	addwf	fsr2l,f,c
  8675   003938  5015               	movf	(color_read@RGBC+1)^0,w,c
  8676   00393A  22DA               	addwfc	fsr2h,f,c
  8677   00393C  C01B  FFDE         	movff	??_color_read+5,postinc2
  8678   003940  C01C  FFDD         	movff	??_color_read+6,postdec2
  8679                           
  8680                           ;color.c: 104:  I2C_2_Master_Stop();
  8681   003944  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  8682                           
  8683                           ;color.c: 106:     I2C_2_Master_Start();
  8684   003948  EC2C  F026         	call	_I2C_2_Master_Start	;wreg free
  8685                           
  8686                           ;color.c: 107:  I2C_2_Master_Write(0x52 | 0x00);
  8687   00394C  0E52               	movlw	82
  8688   00394E  EC16  F026         	call	_I2C_2_Master_Write
  8689                           
  8690                           ;color.c: 108:  I2C_2_Master_Write(0xA0 | 0x14);
  8691   003952  0EB4               	movlw	180
  8692   003954  EC16  F026         	call	_I2C_2_Master_Write
  8693                           
  8694                           ;color.c: 109:  I2C_2_Master_RepStart();
  8695   003958  EC31  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8696                           
  8697                           ;color.c: 110:  I2C_2_Master_Write(0x52 | 0x01);
  8698   00395C  0E53               	movlw	83
  8699   00395E  EC16  F026         	call	_I2C_2_Master_Write
  8700   003962                     
  8701                           ;color.c: 111:  RGBC->C=I2C_2_Master_Read(1);
  8702   003962  0E01               	movlw	1
  8703   003964  EC85  F024         	call	_I2C_2_Master_Read
  8704   003968  6E16               	movwf	??_color_read^0,c
  8705   00396A  6A17               	clrf	(??_color_read+1)^0,c
  8706   00396C  EE20 F006          	lfsr	2,6
  8707   003970  5014               	movf	color_read@RGBC^0,w,c
  8708   003972  26D9               	addwf	fsr2l,f,c
  8709   003974  5015               	movf	(color_read@RGBC+1)^0,w,c
  8710   003976  22DA               	addwfc	fsr2h,f,c
  8711   003978  C016  FFDE         	movff	??_color_read,postinc2
  8712   00397C  C017  FFDD         	movff	??_color_read+1,postdec2
  8713   003980                     
  8714                           ;color.c: 112:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  8715   003980  EE20 F006          	lfsr	2,6
  8716   003984  5014               	movf	color_read@RGBC^0,w,c
  8717   003986  26D9               	addwf	fsr2l,f,c
  8718   003988  5015               	movf	(color_read@RGBC+1)^0,w,c
  8719   00398A  22DA               	addwfc	fsr2h,f,c
  8720   00398C  CFDE F016          	movff	postinc2,??_color_read
  8721   003990  CFDD F017          	movff	postdec2,??_color_read+1
  8722   003994  0E00               	movlw	0
  8723   003996  EC85  F024         	call	_I2C_2_Master_Read
  8724   00399A  6E18               	movwf	(??_color_read+2)^0,c
  8725   00399C  5018               	movf	(??_color_read+2)^0,w,c
  8726   00399E  6E1A               	movwf	(??_color_read+4)^0,c
  8727   0039A0  6A19               	clrf	(??_color_read+3)^0,c
  8728   0039A2  5016               	movf	??_color_read^0,w,c
  8729   0039A4  1019               	iorwf	(??_color_read+3)^0,w,c
  8730   0039A6  6E1B               	movwf	(??_color_read+5)^0,c
  8731   0039A8  5017               	movf	(??_color_read+1)^0,w,c
  8732   0039AA  101A               	iorwf	(??_color_read+4)^0,w,c
  8733   0039AC  6E1C               	movwf	(??_color_read+6)^0,c
  8734   0039AE  EE20 F006          	lfsr	2,6
  8735   0039B2  5014               	movf	color_read@RGBC^0,w,c
  8736   0039B4  26D9               	addwf	fsr2l,f,c
  8737   0039B6  5015               	movf	(color_read@RGBC+1)^0,w,c
  8738   0039B8  22DA               	addwfc	fsr2h,f,c
  8739   0039BA  C01B  FFDE         	movff	??_color_read+5,postinc2
  8740   0039BE  C01C  FFDD         	movff	??_color_read+6,postdec2
  8741                           
  8742                           ;color.c: 113:  I2C_2_Master_Stop();
  8743   0039C2  EC27  F026         	call	_I2C_2_Master_Stop	;wreg free
  8744   0039C6  0012               	return		;funcret
  8745   0039C8                     __end_of_color_read:
  8746                           	callstack 0
  8747                           
  8748 ;; *************** function _I2C_2_Master_Write *****************
  8749 ;; Defined at:
  8750 ;;		line 45 in file "i2c.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  data_byte       1    wreg     unsigned char 
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  data_byte       1   16[COMRAM] unsigned char 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      void 
  8757 ;; Registers used:
  8758 ;;		wreg, status,2, status,0, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;Total ram usage:        1 bytes
  8769 ;; Hardware stack levels used: 1
  8770 ;; Hardware stack levels required when called: 6
  8771 ;; This function calls:
  8772 ;;		_I2C_2_Master_Idle
  8773 ;; This function is called by:
  8774 ;;		_color_clear_init_interrupts
  8775 ;;		_color_writetoaddr
  8776 ;;		_color_read
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text26
  8781   004C2C                     __ptext26:
  8782                           	callstack 0
  8783   004C2C                     _I2C_2_Master_Write:
  8784                           	callstack 23
  8785                           
  8786                           ;incstack = 0
  8787                           ;I2C_2_Master_Write@data_byte stored from wreg
  8788   004C2C  6E11               	movwf	I2C_2_Master_Write@data_byte^0,c
  8789   004C2E                     
  8790                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8791   004C2E  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8792   004C32                     
  8793                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8794   004C32  C011  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8795   004C36  0012               	return		;funcret
  8796   004C38                     __end_of_I2C_2_Master_Write:
  8797                           	callstack 0
  8798                           
  8799 ;; *************** function _I2C_2_Master_Stop *****************
  8800 ;; Defined at:
  8801 ;;		line 39 in file "i2c.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;		None
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  1    wreg      void 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0, cstack
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8819 ;;Total ram usage:        0 bytes
  8820 ;; Hardware stack levels used: 1
  8821 ;; Hardware stack levels required when called: 6
  8822 ;; This function calls:
  8823 ;;		_I2C_2_Master_Idle
  8824 ;; This function is called by:
  8825 ;;		_color_clear_init_interrupts
  8826 ;;		_color_writetoaddr
  8827 ;;		_color_read
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text27
  8832   004C4E                     __ptext27:
  8833                           	callstack 0
  8834   004C4E                     _I2C_2_Master_Stop:
  8835                           	callstack 23
  8836   004C4E                     
  8837                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8838   004C4E  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8839   004C52                     
  8840                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8841   004C52  010E               	movlb	14	; () banked
  8842   004C54  85DA               	bsf	218,2,b	;volatile
  8843   004C56                     
  8844                           ; BSR set to: 14
  8845   004C56  0012               	return		;funcret
  8846   004C58                     __end_of_I2C_2_Master_Stop:
  8847                           	callstack 0
  8848                           
  8849 ;; *************** function _I2C_2_Master_Start *****************
  8850 ;; Defined at:
  8851 ;;		line 27 in file "i2c.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;Total ram usage:        0 bytes
  8870 ;; Hardware stack levels used: 1
  8871 ;; Hardware stack levels required when called: 6
  8872 ;; This function calls:
  8873 ;;		_I2C_2_Master_Idle
  8874 ;; This function is called by:
  8875 ;;		_color_clear_init_interrupts
  8876 ;;		_color_writetoaddr
  8877 ;;		_color_read
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	text28
  8882   004C58                     __ptext28:
  8883                           	callstack 0
  8884   004C58                     _I2C_2_Master_Start:
  8885                           	callstack 23
  8886   004C58                     
  8887                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8888   004C58  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8889   004C5C                     
  8890                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8891   004C5C  010E               	movlb	14	; () banked
  8892   004C5E  81DA               	bsf	218,0,b	;volatile
  8893   004C60                     
  8894                           ; BSR set to: 14
  8895   004C60  0012               	return		;funcret
  8896   004C62                     __end_of_I2C_2_Master_Start:
  8897                           	callstack 0
  8898                           
  8899 ;; *************** function _I2C_2_Master_RepStart *****************
  8900 ;; Defined at:
  8901 ;;		line 33 in file "i2c.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  1    wreg      void 
  8908 ;; Registers used:
  8909 ;;		wreg, status,2, status,0, cstack
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8919 ;;Total ram usage:        0 bytes
  8920 ;; Hardware stack levels used: 1
  8921 ;; Hardware stack levels required when called: 6
  8922 ;; This function calls:
  8923 ;;		_I2C_2_Master_Idle
  8924 ;; This function is called by:
  8925 ;;		_color_read
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text29
  8930   004C62                     __ptext29:
  8931                           	callstack 0
  8932   004C62                     _I2C_2_Master_RepStart:
  8933                           	callstack 23
  8934   004C62                     
  8935                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8936   004C62  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8937   004C66                     
  8938                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8939   004C66  010E               	movlb	14	; () banked
  8940   004C68  83DA               	bsf	218,1,b	;volatile
  8941   004C6A                     
  8942                           ; BSR set to: 14
  8943   004C6A  0012               	return		;funcret
  8944   004C6C                     __end_of_I2C_2_Master_RepStart:
  8945                           	callstack 0
  8946                           
  8947 ;; *************** function _I2C_2_Master_Read *****************
  8948 ;; Defined at:
  8949 ;;		line 51 in file "i2c.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;  ack             1    wreg     unsigned char 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  ack             1   17[COMRAM] unsigned char 
  8954 ;;  tmp             1   18[COMRAM] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      unsigned char 
  8957 ;; Registers used:
  8958 ;;		wreg, status,2, status,0, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8967 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8968 ;;Total ram usage:        3 bytes
  8969 ;; Hardware stack levels used: 1
  8970 ;; Hardware stack levels required when called: 6
  8971 ;; This function calls:
  8972 ;;		_I2C_2_Master_Idle
  8973 ;; This function is called by:
  8974 ;;		_color_read
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           	psect	text30
  8979   00490A                     __ptext30:
  8980                           	callstack 0
  8981   00490A                     _I2C_2_Master_Read:
  8982                           	callstack 23
  8983                           
  8984                           ; BSR set to: 14
  8985                           ;incstack = 0
  8986                           ;I2C_2_Master_Read@ack stored from wreg
  8987   00490A  6E12               	movwf	I2C_2_Master_Read@ack^0,c
  8988   00490C                     
  8989                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8990   00490C  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8991   004910                     
  8992                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8993   004910  010E               	movlb	14	; () banked
  8994   004912  87DA               	bsf	218,3,b	;volatile
  8995                           
  8996                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8997   004914  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  8998   004918                     
  8999                           ;i2c.c: 57:   tmp = SSP2BUF;
  9000   004918  CED5 F013          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9001                           
  9002                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9003   00491C  EC48  F025         	call	_I2C_2_Master_Idle	;wreg free
  9004   004920                     
  9005                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9006   004920  5012               	movf	I2C_2_Master_Read@ack^0,w,c
  9007   004922  B4D8               	btfsc	status,2,c
  9008   004924  EF96  F024         	goto	u1991
  9009   004928  EF9A  F024         	goto	u1990
  9010   00492C                     u1991:
  9011   00492C  6A11               	clrf	??_I2C_2_Master_Read^0,c
  9012   00492E  2A11               	incf	??_I2C_2_Master_Read^0,f,c
  9013   004930  EF9B  F024         	goto	u2008
  9014   004934                     u1990:
  9015   004934  6A11               	clrf	??_I2C_2_Master_Read^0,c
  9016   004936                     u2008:
  9017   004936  3A11               	swapf	??_I2C_2_Master_Read^0,f,c
  9018   004938  4611               	rlncf	??_I2C_2_Master_Read^0,f,c
  9019   00493A  010E               	movlb	14	; () banked
  9020   00493C  51DA               	movf	218,w,b	;volatile
  9021   00493E  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  9022   004940  0BDF               	andlw	-33
  9023   004942  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  9024   004944  6FDA               	movwf	218,b	;volatile
  9025   004946                     
  9026                           ; BSR set to: 14
  9027                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9028   004946  89DA               	bsf	218,4,b	;volatile
  9029   004948                     
  9030                           ; BSR set to: 14
  9031                           ;i2c.c: 61:   return tmp;
  9032   004948  5013               	movf	I2C_2_Master_Read@tmp^0,w,c
  9033   00494A                     
  9034                           ; BSR set to: 14
  9035   00494A  0012               	return		;funcret
  9036   00494C                     __end_of_I2C_2_Master_Read:
  9037                           	callstack 0
  9038                           
  9039 ;; *************** function _I2C_2_Master_Idle *****************
  9040 ;; Defined at:
  9041 ;;		line 22 in file "i2c.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;		None
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9059 ;;Total ram usage:        1 bytes
  9060 ;; Hardware stack levels used: 1
  9061 ;; Hardware stack levels required when called: 5
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_I2C_2_Master_Start
  9066 ;;		_I2C_2_Master_RepStart
  9067 ;;		_I2C_2_Master_Stop
  9068 ;;		_I2C_2_Master_Write
  9069 ;;		_I2C_2_Master_Read
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           	psect	text31
  9074   004A90                     __ptext31:
  9075                           	callstack 0
  9076   004A90                     _I2C_2_Master_Idle:
  9077                           	callstack 23
  9078   004A90                     l266:
  9079   004A90  010E               	movlb	14	; () banked
  9080   004A92  B5D8               	btfsc	216,2,b	;volatile
  9081   004A94  EF4E  F025         	goto	u1861
  9082   004A98  EF50  F025         	goto	u1860
  9083   004A9C                     u1861:
  9084   004A9C  EF48  F025         	goto	l266
  9085   004AA0                     u1860:
  9086   004AA0                     
  9087                           ; BSR set to: 14
  9088   004AA0  CEDA F010          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9089   004AA4  0E1F               	movlw	31
  9090   004AA6  1610               	andwf	??_I2C_2_Master_Idle^0,f,c
  9091   004AA8  A4D8               	btfss	status,2,c
  9092   004AAA  EF59  F025         	goto	u1871
  9093   004AAE  EF5B  F025         	goto	u1870
  9094   004AB2                     u1871:
  9095   004AB2  EF48  F025         	goto	l266
  9096   004AB6                     u1870:
  9097   004AB6                     
  9098                           ; BSR set to: 14
  9099   004AB6  0012               	return		;funcret
  9100   004AB8                     __end_of_I2C_2_Master_Idle:
  9101                           	callstack 0
  9102                           
  9103 ;; *************** function _calibration *****************
  9104 ;; Defined at:
  9105 ;;		line 598 in file "dc_motor.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  9108 ;;		 -> main@motorL(10), 
  9109 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  9110 ;;		 -> main@motorR(10), 
  9111 ;;  turnSpeed       1   52[COMRAM] unsigned char 
  9112 ;;  turnDuration    2   53[COMRAM] PTR unsigned char 
  9113 ;;		 -> main@turnDuration(1), 
  9114 ;;  turnRamp        1   55[COMRAM] unsigned char 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  1    wreg      void 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9126 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9128 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9129 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9130 ;;Total ram usage:       10 bytes
  9131 ;; Hardware stack levels used: 1
  9132 ;; Hardware stack levels required when called: 8
  9133 ;; This function calls:
  9134 ;;		_turnLeft
  9135 ;;		_turnRight
  9136 ;; This function is called by:
  9137 ;;		_main
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text32
  9142   003350                     __ptext32:
  9143                           	callstack 0
  9144   003350                     _calibration:
  9145                           	callstack 22
  9146   003350                     
  9147                           ;dc_motor.c: 598: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 599: {;dc_motor.c: 601:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9148   003350  C031  F023         	movff	calibration@mL,turnLeft@mL
  9149   003354  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9150   003358  C033  F025         	movff	calibration@mR,turnLeft@mR
  9151   00335C  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9152   003360  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9153   003364  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9154   003368  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9155   00336C  50DF               	movf	indf2,w,c
  9156   00336E  6E28               	movwf	turnLeft@turnDuration^0,c
  9157   003370  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9158   003374  ECC7  F01E         	call	_turnLeft	;wreg free
  9159   003378                     
  9160                           ;dc_motor.c: 602:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9161   003378  0E05               	movlw	5
  9162   00337A  6E3A               	movwf	(??_calibration+1)^0,c
  9163   00337C  0E0F               	movlw	15
  9164   00337E  6E39               	movwf	??_calibration^0,c
  9165   003380  0EF1               	movlw	241
  9166   003382                     u4687:
  9167   003382  2EE8               	decfsz	wreg,f,c
  9168   003384  D7FE               	bra	u4687
  9169   003386  2E39               	decfsz	??_calibration^0,f,c
  9170   003388  D7FC               	bra	u4687
  9171   00338A  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9172   00338C  D7FA               	bra	u4687
  9173   00338E  0000               	nop	
  9174   003390                     
  9175                           ;dc_motor.c: 603:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9176   003390  C031  F023         	movff	calibration@mL,turnLeft@mL
  9177   003394  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9178   003398  C033  F025         	movff	calibration@mR,turnLeft@mR
  9179   00339C  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9180   0033A0  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9181   0033A4  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9182   0033A8  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9183   0033AC  50DF               	movf	indf2,w,c
  9184   0033AE  6E28               	movwf	turnLeft@turnDuration^0,c
  9185   0033B0  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9186   0033B4  ECC7  F01E         	call	_turnLeft	;wreg free
  9187                           
  9188                           ;dc_motor.c: 604:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9189   0033B8  0E05               	movlw	5
  9190   0033BA  6E3A               	movwf	(??_calibration+1)^0,c
  9191   0033BC  0E0F               	movlw	15
  9192   0033BE  6E39               	movwf	??_calibration^0,c
  9193   0033C0  0EF1               	movlw	241
  9194   0033C2                     u4697:
  9195   0033C2  2EE8               	decfsz	wreg,f,c
  9196   0033C4  D7FE               	bra	u4697
  9197   0033C6  2E39               	decfsz	??_calibration^0,f,c
  9198   0033C8  D7FC               	bra	u4697
  9199   0033CA  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9200   0033CC  D7FA               	bra	u4697
  9201   0033CE  0000               	nop	
  9202   0033D0                     
  9203                           ;dc_motor.c: 605:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9204   0033D0  C031  F023         	movff	calibration@mL,turnRight@mL
  9205   0033D4  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9206   0033D8  C033  F025         	movff	calibration@mR,turnRight@mR
  9207   0033DC  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9208   0033E0  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9209   0033E4  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9210   0033E8  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9211   0033EC  50DF               	movf	indf2,w,c
  9212   0033EE  6E28               	movwf	turnRight@turnDuration^0,c
  9213   0033F0  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9214   0033F4  ECDA  F01D         	call	_turnRight	;wreg free
  9215   0033F8                     
  9216                           ;dc_motor.c: 606:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9217   0033F8  0E05               	movlw	5
  9218   0033FA  6E3A               	movwf	(??_calibration+1)^0,c
  9219   0033FC  0E0F               	movlw	15
  9220   0033FE  6E39               	movwf	??_calibration^0,c
  9221   003400  0EF1               	movlw	241
  9222   003402                     u4707:
  9223   003402  2EE8               	decfsz	wreg,f,c
  9224   003404  D7FE               	bra	u4707
  9225   003406  2E39               	decfsz	??_calibration^0,f,c
  9226   003408  D7FC               	bra	u4707
  9227   00340A  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9228   00340C  D7FA               	bra	u4707
  9229   00340E  0000               	nop	
  9230                           
  9231                           ;dc_motor.c: 607:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9232   003410  C031  F023         	movff	calibration@mL,turnRight@mL
  9233   003414  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9234   003418  C033  F025         	movff	calibration@mR,turnRight@mR
  9235   00341C  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9236   003420  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9237   003424  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9238   003428  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9239   00342C  50DF               	movf	indf2,w,c
  9240   00342E  6E28               	movwf	turnRight@turnDuration^0,c
  9241   003430  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9242   003434  ECDA  F01D         	call	_turnRight	;wreg free
  9243   003438                     l748:
  9244   003438  A48E               	btfss	142,2,c	;volatile
  9245   00343A  EF21  F01A         	goto	u2801
  9246   00343E  EF23  F01A         	goto	u2800
  9247   003442                     u2801:
  9248   003442  EF2A  F01A         	goto	l752
  9249   003446                     u2800:
  9250   003446  B68E               	btfsc	142,3,c	;volatile
  9251   003448  EF28  F01A         	goto	u2811
  9252   00344C  EF2A  F01A         	goto	u2810
  9253   003450                     u2811:
  9254   003450  EF1C  F01A         	goto	l748
  9255   003454                     u2810:
  9256   003454                     l752:
  9257                           
  9258                           ;dc_motor.c: 612:         if (!PORTFbits.RF2 && *turnDuration>0) {
  9259   003454  B48E               	btfsc	142,2,c	;volatile
  9260   003456  EF2F  F01A         	goto	u2821
  9261   00345A  EF31  F01A         	goto	u2820
  9262   00345E                     u2821:
  9263   00345E  EF45  F01A         	goto	l753
  9264   003462                     u2820:
  9265   003462  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9266   003466  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9267   00346A  50DF               	movf	indf2,w,c
  9268   00346C  B4D8               	btfsc	status,2,c
  9269   00346E  EF3B  F01A         	goto	u2831
  9270   003472  EF3D  F01A         	goto	u2830
  9271   003476                     u2831:
  9272   003476  EF45  F01A         	goto	l753
  9273   00347A                     u2830:
  9274   00347A                     
  9275                           ;dc_motor.c: 613:             (*turnDuration)--;
  9276   00347A  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9277   00347E  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9278   003482  06DF               	decf	indf2,f,c
  9279   003484                     
  9280                           ;dc_motor.c: 614:             LATDbits.LATD7 = 1;
  9281   003484  8E7C               	bsf	124,7,c	;volatile
  9282                           
  9283                           ;dc_motor.c: 615:         }
  9284   003486  EF52  F01A         	goto	l3928
  9285   00348A                     l753:
  9286   00348A  B68E               	btfsc	142,3,c	;volatile
  9287   00348C  EF4A  F01A         	goto	u2841
  9288   003490  EF4C  F01A         	goto	u2840
  9289   003494                     u2841:
  9290   003494  EF52  F01A         	goto	l3928
  9291   003498                     u2840:
  9292   003498                     
  9293                           ;dc_motor.c: 618:             (*turnDuration)++;
  9294   003498  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9295   00349C  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9296   0034A0  2ADF               	incf	indf2,f,c
  9297   0034A2                     
  9298                           ;dc_motor.c: 619:             LATHbits.LATH3 = 1;
  9299   0034A2  8680               	bsf	128,3,c	;volatile
  9300   0034A4                     l3928:
  9301                           
  9302                           ;dc_motor.c: 622:         _delay((unsigned long)((500)*(64000000/4000.0)));
  9303   0034A4  0E29               	movlw	41
  9304   0034A6  6E3A               	movwf	(??_calibration+1)^0,c
  9305   0034A8  0E96               	movlw	150
  9306   0034AA  6E39               	movwf	??_calibration^0,c
  9307   0034AC  0E7F               	movlw	127
  9308   0034AE                     u4717:
  9309   0034AE  2EE8               	decfsz	wreg,f,c
  9310   0034B0  D7FE               	bra	u4717
  9311   0034B2  2E39               	decfsz	??_calibration^0,f,c
  9312   0034B4  D7FC               	bra	u4717
  9313   0034B6  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9314   0034B8  D7FA               	bra	u4717
  9315   0034BA  0000               	nop	
  9316   0034BC                     
  9317                           ;dc_motor.c: 624:         if (!PORTFbits.RF3) {
  9318   0034BC  B68E               	btfsc	142,3,c	;volatile
  9319   0034BE  EF63  F01A         	goto	u2851
  9320   0034C2  EF65  F01A         	goto	u2850
  9321   0034C6                     u2851:
  9322   0034C6  EF6C  F01A         	goto	l756
  9323   0034CA                     u2850:
  9324   0034CA                     
  9325                           ;dc_motor.c: 625:             (*turnDuration)--;
  9326   0034CA  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9327   0034CE  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9328   0034D2  06DF               	decf	indf2,f,c
  9329                           
  9330                           ;dc_motor.c: 626:             break;
  9331   0034D4  EFE4  F01A         	goto	l757
  9332   0034D8                     l756:
  9333                           
  9334                           ;dc_motor.c: 629:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  9335   0034D8  9680               	bcf	128,3,c	;volatile
  9336   0034DA  9E7C               	bcf	124,7,c	;volatile
  9337   0034DC                     
  9338                           ;dc_motor.c: 632:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9339   0034DC  C031  F023         	movff	calibration@mL,turnLeft@mL
  9340   0034E0  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9341   0034E4  C033  F025         	movff	calibration@mR,turnLeft@mR
  9342   0034E8  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9343   0034EC  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9344   0034F0  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9345   0034F4  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9346   0034F8  50DF               	movf	indf2,w,c
  9347   0034FA  6E28               	movwf	turnLeft@turnDuration^0,c
  9348   0034FC  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9349   003500  ECC7  F01E         	call	_turnLeft	;wreg free
  9350   003504                     
  9351                           ;dc_motor.c: 633:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9352   003504  0E05               	movlw	5
  9353   003506  6E3A               	movwf	(??_calibration+1)^0,c
  9354   003508  0E0F               	movlw	15
  9355   00350A  6E39               	movwf	??_calibration^0,c
  9356   00350C  0EF1               	movlw	241
  9357   00350E                     u4727:
  9358   00350E  2EE8               	decfsz	wreg,f,c
  9359   003510  D7FE               	bra	u4727
  9360   003512  2E39               	decfsz	??_calibration^0,f,c
  9361   003514  D7FC               	bra	u4727
  9362   003516  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9363   003518  D7FA               	bra	u4727
  9364   00351A  0000               	nop	
  9365   00351C                     
  9366                           ;dc_motor.c: 634:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9367   00351C  C031  F023         	movff	calibration@mL,turnLeft@mL
  9368   003520  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9369   003524  C033  F025         	movff	calibration@mR,turnLeft@mR
  9370   003528  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9371   00352C  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9372   003530  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9373   003534  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9374   003538  50DF               	movf	indf2,w,c
  9375   00353A  6E28               	movwf	turnLeft@turnDuration^0,c
  9376   00353C  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9377   003540  ECC7  F01E         	call	_turnLeft	;wreg free
  9378                           
  9379                           ;dc_motor.c: 635:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9380   003544  0E05               	movlw	5
  9381   003546  6E3A               	movwf	(??_calibration+1)^0,c
  9382   003548  0E0F               	movlw	15
  9383   00354A  6E39               	movwf	??_calibration^0,c
  9384   00354C  0EF1               	movlw	241
  9385   00354E                     u4737:
  9386   00354E  2EE8               	decfsz	wreg,f,c
  9387   003550  D7FE               	bra	u4737
  9388   003552  2E39               	decfsz	??_calibration^0,f,c
  9389   003554  D7FC               	bra	u4737
  9390   003556  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9391   003558  D7FA               	bra	u4737
  9392   00355A  0000               	nop	
  9393   00355C                     
  9394                           ;dc_motor.c: 636:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9395   00355C  C031  F023         	movff	calibration@mL,turnRight@mL
  9396   003560  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9397   003564  C033  F025         	movff	calibration@mR,turnRight@mR
  9398   003568  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9399   00356C  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9400   003570  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9401   003574  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9402   003578  50DF               	movf	indf2,w,c
  9403   00357A  6E28               	movwf	turnRight@turnDuration^0,c
  9404   00357C  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9405   003580  ECDA  F01D         	call	_turnRight	;wreg free
  9406   003584                     
  9407                           ;dc_motor.c: 637:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9408   003584  0E05               	movlw	5
  9409   003586  6E3A               	movwf	(??_calibration+1)^0,c
  9410   003588  0E0F               	movlw	15
  9411   00358A  6E39               	movwf	??_calibration^0,c
  9412   00358C  0EF1               	movlw	241
  9413   00358E                     u4747:
  9414   00358E  2EE8               	decfsz	wreg,f,c
  9415   003590  D7FE               	bra	u4747
  9416   003592  2E39               	decfsz	??_calibration^0,f,c
  9417   003594  D7FC               	bra	u4747
  9418   003596  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9419   003598  D7FA               	bra	u4747
  9420   00359A  0000               	nop	
  9421                           
  9422                           ;dc_motor.c: 638:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9423   00359C  C031  F023         	movff	calibration@mL,turnRight@mL
  9424   0035A0  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9425   0035A4  C033  F025         	movff	calibration@mR,turnRight@mR
  9426   0035A8  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9427   0035AC  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9428   0035B0  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9429   0035B4  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9430   0035B8  50DF               	movf	indf2,w,c
  9431   0035BA  6E28               	movwf	turnRight@turnDuration^0,c
  9432   0035BC  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9433   0035C0  ECDA  F01D         	call	_turnRight	;wreg free
  9434   0035C4  EF1C  F01A         	goto	l748
  9435   0035C8                     l757:
  9436                           
  9437                           ;dc_motor.c: 643:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  9438   0035C8  8680               	bsf	128,3,c	;volatile
  9439   0035CA  8E7C               	bsf	124,7,c	;volatile
  9440   0035CC                     
  9441                           ;dc_motor.c: 644:     _delay((unsigned long)((100)*(64000000/4000.0)));
  9442   0035CC  0E09               	movlw	9
  9443   0035CE  6E3A               	movwf	(??_calibration+1)^0,c
  9444   0035D0  0E1E               	movlw	30
  9445   0035D2  6E39               	movwf	??_calibration^0,c
  9446   0035D4  0EE4               	movlw	228
  9447   0035D6                     u4757:
  9448   0035D6  2EE8               	decfsz	wreg,f,c
  9449   0035D8  D7FE               	bra	u4757
  9450   0035DA  2E39               	decfsz	??_calibration^0,f,c
  9451   0035DC  D7FC               	bra	u4757
  9452   0035DE  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9453   0035E0  D7FA               	bra	u4757
  9454   0035E2  D000               	nop2	
  9455   0035E4                     
  9456                           ;dc_motor.c: 645:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  9457   0035E4  9680               	bcf	128,3,c	;volatile
  9458   0035E6  9E7C               	bcf	124,7,c	;volatile
  9459   0035E8  0012               	return		;funcret
  9460   0035EA                     __end_of_calibration:
  9461                           	callstack 0
  9462                           
  9463 ;; *************** function _turnRight *****************
  9464 ;; Defined at:
  9465 ;;		line 419 in file "dc_motor.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  9468 ;;		 -> main@motorL(10), 
  9469 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  9470 ;;		 -> main@motorR(10), 
  9471 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  9472 ;;  turnDuration    1   39[COMRAM] unsigned char 
  9473 ;;  turnRamp        1   40[COMRAM] unsigned char 
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  cur_power       2   46[COMRAM] int 
  9476 ;;  i               2   44[COMRAM] int 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  1    wreg      void 
  9479 ;; Registers used:
  9480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9486 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9487 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9488 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9489 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9490 ;;Total ram usage:       14 bytes
  9491 ;; Hardware stack levels used: 1
  9492 ;; Hardware stack levels required when called: 7
  9493 ;; This function calls:
  9494 ;;		_setMotorPWM
  9495 ;; This function is called by:
  9496 ;;		_move
  9497 ;;		_returnHome
  9498 ;;		_calibration
  9499 ;;		_lostReturnHome
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text33
  9504   003BB4                     __ptext33:
  9505                           	callstack 0
  9506   003BB4                     _turnRight:
  9507                           	callstack 22
  9508   003BB4                     
  9509                           ;dc_motor.c: 419: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 420: {;dc_motor.c: 421:     mL->dir
      +                          ection = 1;
  9510   003BB4  EE20 F001          	lfsr	2,1
  9511   003BB8  5023               	movf	turnRight@mL^0,w,c
  9512   003BBA  26D9               	addwf	fsr2l,f,c
  9513   003BBC  5024               	movf	(turnRight@mL+1)^0,w,c
  9514   003BBE  22DA               	addwfc	fsr2h,f,c
  9515   003BC0  0E01               	movlw	1
  9516   003BC2  6EDF               	movwf	indf2,c
  9517                           
  9518                           ;dc_motor.c: 422:     mR->direction = 0;
  9519   003BC4  EE20 F001          	lfsr	2,1
  9520   003BC8  5025               	movf	turnRight@mR^0,w,c
  9521   003BCA  26D9               	addwf	fsr2l,f,c
  9522   003BCC  5026               	movf	(turnRight@mR+1)^0,w,c
  9523   003BCE  22DA               	addwfc	fsr2h,f,c
  9524   003BD0  6ADF               	clrf	indf2,c
  9525   003BD2                     
  9526                           ;dc_motor.c: 423:     int i;;dc_motor.c: 424:     int cur_power;;dc_motor.c: 425:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  9527   003BD2  0E00               	movlw	0
  9528   003BD4  6E30               	movwf	(turnRight@cur_power+1)^0,c
  9529   003BD6  0E01               	movlw	1
  9530   003BD8  6E2F               	movwf	turnRight@cur_power^0,c
  9531   003BDA  EF39  F01E         	goto	l3188
  9532   003BDE                     l3174:
  9533                           
  9534                           ;dc_motor.c: 426:         mL->power = cur_power+mL->compensation;
  9535   003BDE  EE20 F009          	lfsr	2,9
  9536   003BE2  5023               	movf	turnRight@mL^0,w,c
  9537   003BE4  26D9               	addwf	fsr2l,f,c
  9538   003BE6  5024               	movf	(turnRight@mL+1)^0,w,c
  9539   003BE8  22DA               	addwfc	fsr2h,f,c
  9540   003BEA  50DF               	movf	indf2,w,c
  9541   003BEC  242F               	addwf	turnRight@cur_power^0,w,c
  9542   003BEE  C023  FFD9         	movff	turnRight@mL,fsr2l
  9543   003BF2  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  9544   003BF6  6EDF               	movwf	indf2,c
  9545                           
  9546                           ;dc_motor.c: 427:         mR->power = cur_power+mR->compensation;
  9547   003BF8  EE20 F009          	lfsr	2,9
  9548   003BFC  5025               	movf	turnRight@mR^0,w,c
  9549   003BFE  26D9               	addwf	fsr2l,f,c
  9550   003C00  5026               	movf	(turnRight@mR+1)^0,w,c
  9551   003C02  22DA               	addwfc	fsr2h,f,c
  9552   003C04  50DF               	movf	indf2,w,c
  9553   003C06  242F               	addwf	turnRight@cur_power^0,w,c
  9554   003C08  C025  FFD9         	movff	turnRight@mR,fsr2l
  9555   003C0C  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  9556   003C10  6EDF               	movwf	indf2,c
  9557   003C12                     
  9558                           ;dc_motor.c: 428:         setMotorPWM(mL);
  9559   003C12  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  9560   003C16  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  9561   003C1A  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9562   003C1E                     
  9563                           ;dc_motor.c: 429:         setMotorPWM(mR);
  9564   003C1E  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  9565   003C22  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  9566   003C26  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9567   003C2A                     
  9568                           ;dc_motor.c: 430:         for (i=0;i<turnRamp;i++) {
  9569   003C2A  0E00               	movlw	0
  9570   003C2C  6E2E               	movwf	(turnRight@i+1)^0,c
  9571   003C2E  0E00               	movlw	0
  9572   003C30  6E2D               	movwf	turnRight@i^0,c
  9573   003C32  EF25  F01E         	goto	l658
  9574   003C36                     l3182:
  9575                           
  9576                           ;dc_motor.c: 431:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9577   003C36  0E68               	movlw	104
  9578   003C38  6E2A               	movwf	??_turnRight^0,c
  9579   003C3A  0EE4               	movlw	228
  9580   003C3C                     u4767:
  9581   003C3C  2EE8               	decfsz	wreg,f,c
  9582   003C3E  D7FE               	bra	u4767
  9583   003C40  2E2A               	decfsz	??_turnRight^0,f,c
  9584   003C42  D7FC               	bra	u4767
  9585   003C44  D000               	nop2	
  9586   003C46                     
  9587                           ;dc_motor.c: 432:         }
  9588   003C46  4A2D               	infsnz	turnRight@i^0,f,c
  9589   003C48  2A2E               	incf	(turnRight@i+1)^0,f,c
  9590   003C4A                     l658:
  9591   003C4A  5029               	movf	turnRight@turnRamp^0,w,c
  9592   003C4C  6E2A               	movwf	??_turnRight^0,c
  9593   003C4E  6A2B               	clrf	(??_turnRight+1)^0,c
  9594   003C50  502A               	movf	??_turnRight^0,w,c
  9595   003C52  5C2D               	subwf	turnRight@i^0,w,c
  9596   003C54  502E               	movf	(turnRight@i+1)^0,w,c
  9597   003C56  0A80               	xorlw	128
  9598   003C58  6E2C               	movwf	(??_turnRight+2)^0,c
  9599   003C5A  502B               	movf	(??_turnRight+1)^0,w,c
  9600   003C5C  0A80               	xorlw	128
  9601   003C5E  582C               	subwfb	(??_turnRight+2)^0,w,c
  9602   003C60  A0D8               	btfss	status,0,c
  9603   003C62  EF35  F01E         	goto	u2031
  9604   003C66  EF37  F01E         	goto	u2030
  9605   003C6A                     u2031:
  9606   003C6A  EF1B  F01E         	goto	l3182
  9607   003C6E                     u2030:
  9608   003C6E                     
  9609                           ;dc_motor.c: 433:     }
  9610   003C6E  4A2F               	infsnz	turnRight@cur_power^0,f,c
  9611   003C70  2A30               	incf	(turnRight@cur_power+1)^0,f,c
  9612   003C72                     l3188:
  9613   003C72  5027               	movf	turnRight@turnSpeed^0,w,c
  9614   003C74  6E2A               	movwf	??_turnRight^0,c
  9615   003C76  6A2B               	clrf	(??_turnRight+1)^0,c
  9616   003C78  502F               	movf	turnRight@cur_power^0,w,c
  9617   003C7A  5C2A               	subwf	??_turnRight^0,w,c
  9618   003C7C  502B               	movf	(??_turnRight+1)^0,w,c
  9619   003C7E  0A80               	xorlw	128
  9620   003C80  6E2C               	movwf	(??_turnRight+2)^0,c
  9621   003C82  5030               	movf	(turnRight@cur_power+1)^0,w,c
  9622   003C84  0A80               	xorlw	128
  9623   003C86  582C               	subwfb	(??_turnRight+2)^0,w,c
  9624   003C88  B0D8               	btfsc	status,0,c
  9625   003C8A  EF49  F01E         	goto	u2041
  9626   003C8E  EF4B  F01E         	goto	u2040
  9627   003C92                     u2041:
  9628   003C92  EFEF  F01D         	goto	l3174
  9629   003C96                     u2040:
  9630   003C96                     
  9631                           ;dc_motor.c: 435:     for (i=0;i<turnDuration;i++) {
  9632   003C96  0E00               	movlw	0
  9633   003C98  6E2E               	movwf	(turnRight@i+1)^0,c
  9634   003C9A  0E00               	movlw	0
  9635   003C9C  6E2D               	movwf	turnRight@i^0,c
  9636   003C9E  EF5B  F01E         	goto	l662
  9637   003CA2                     l3192:
  9638                           
  9639                           ;dc_motor.c: 436:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9640   003CA2  0E68               	movlw	104
  9641   003CA4  6E2A               	movwf	??_turnRight^0,c
  9642   003CA6  0EE4               	movlw	228
  9643   003CA8                     u4777:
  9644   003CA8  2EE8               	decfsz	wreg,f,c
  9645   003CAA  D7FE               	bra	u4777
  9646   003CAC  2E2A               	decfsz	??_turnRight^0,f,c
  9647   003CAE  D7FC               	bra	u4777
  9648   003CB0  D000               	nop2	
  9649   003CB2                     
  9650                           ;dc_motor.c: 437:         }
  9651   003CB2  4A2D               	infsnz	turnRight@i^0,f,c
  9652   003CB4  2A2E               	incf	(turnRight@i+1)^0,f,c
  9653   003CB6                     l662:
  9654   003CB6  5028               	movf	turnRight@turnDuration^0,w,c
  9655   003CB8  6E2A               	movwf	??_turnRight^0,c
  9656   003CBA  6A2B               	clrf	(??_turnRight+1)^0,c
  9657   003CBC  502A               	movf	??_turnRight^0,w,c
  9658   003CBE  5C2D               	subwf	turnRight@i^0,w,c
  9659   003CC0  502E               	movf	(turnRight@i+1)^0,w,c
  9660   003CC2  0A80               	xorlw	128
  9661   003CC4  6E2C               	movwf	(??_turnRight+2)^0,c
  9662   003CC6  502B               	movf	(??_turnRight+1)^0,w,c
  9663   003CC8  0A80               	xorlw	128
  9664   003CCA  582C               	subwfb	(??_turnRight+2)^0,w,c
  9665   003CCC  A0D8               	btfss	status,0,c
  9666   003CCE  EF6B  F01E         	goto	u2051
  9667   003CD2  EF6D  F01E         	goto	u2050
  9668   003CD6                     u2051:
  9669   003CD6  EF51  F01E         	goto	l3192
  9670   003CDA                     u2050:
  9671   003CDA                     
  9672                           ;dc_motor.c: 439:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  9673   003CDA  C027  F02F         	movff	turnRight@turnSpeed,turnRight@cur_power
  9674   003CDE  6A30               	clrf	(turnRight@cur_power+1)^0,c
  9675   003CE0                     l3196:
  9676   003CE0  BE30               	btfsc	(turnRight@cur_power+1)^0,7,c
  9677   003CE2  EF77  F01E         	goto	u2060
  9678   003CE6  EF75  F01E         	goto	u2061
  9679   003CEA                     u2061:
  9680   003CEA  EF79  F01E         	goto	l3200
  9681   003CEE                     u2060:
  9682   003CEE  EFC6  F01E         	goto	l670
  9683   003CF2                     l3200:
  9684                           
  9685                           ;dc_motor.c: 440:         mL->power = cur_power+mL->compensation;
  9686   003CF2  EE20 F009          	lfsr	2,9
  9687   003CF6  5023               	movf	turnRight@mL^0,w,c
  9688   003CF8  26D9               	addwf	fsr2l,f,c
  9689   003CFA  5024               	movf	(turnRight@mL+1)^0,w,c
  9690   003CFC  22DA               	addwfc	fsr2h,f,c
  9691   003CFE  50DF               	movf	indf2,w,c
  9692   003D00  242F               	addwf	turnRight@cur_power^0,w,c
  9693   003D02  C023  FFD9         	movff	turnRight@mL,fsr2l
  9694   003D06  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  9695   003D0A  6EDF               	movwf	indf2,c
  9696                           
  9697                           ;dc_motor.c: 441:         mR->power = cur_power+mR->compensation;
  9698   003D0C  EE20 F009          	lfsr	2,9
  9699   003D10  5025               	movf	turnRight@mR^0,w,c
  9700   003D12  26D9               	addwf	fsr2l,f,c
  9701   003D14  5026               	movf	(turnRight@mR+1)^0,w,c
  9702   003D16  22DA               	addwfc	fsr2h,f,c
  9703   003D18  50DF               	movf	indf2,w,c
  9704   003D1A  242F               	addwf	turnRight@cur_power^0,w,c
  9705   003D1C  C025  FFD9         	movff	turnRight@mR,fsr2l
  9706   003D20  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  9707   003D24  6EDF               	movwf	indf2,c
  9708   003D26                     
  9709                           ;dc_motor.c: 442:         setMotorPWM(mL);
  9710   003D26  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  9711   003D2A  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  9712   003D2E  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9713   003D32                     
  9714                           ;dc_motor.c: 443:         setMotorPWM(mR);
  9715   003D32  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  9716   003D36  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  9717   003D3A  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9718   003D3E                     
  9719                           ;dc_motor.c: 444:         for (i=0;i<turnRamp;i++) {
  9720   003D3E  0E00               	movlw	0
  9721   003D40  6E2E               	movwf	(turnRight@i+1)^0,c
  9722   003D42  0E00               	movlw	0
  9723   003D44  6E2D               	movwf	turnRight@i^0,c
  9724   003D46  EFAF  F01E         	goto	l667
  9725   003D4A                     l3208:
  9726                           
  9727                           ;dc_motor.c: 445:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9728   003D4A  0E68               	movlw	104
  9729   003D4C  6E2A               	movwf	??_turnRight^0,c
  9730   003D4E  0EE4               	movlw	228
  9731   003D50                     u4787:
  9732   003D50  2EE8               	decfsz	wreg,f,c
  9733   003D52  D7FE               	bra	u4787
  9734   003D54  2E2A               	decfsz	??_turnRight^0,f,c
  9735   003D56  D7FC               	bra	u4787
  9736   003D58  D000               	nop2	
  9737   003D5A                     
  9738                           ;dc_motor.c: 446:         }
  9739   003D5A  4A2D               	infsnz	turnRight@i^0,f,c
  9740   003D5C  2A2E               	incf	(turnRight@i+1)^0,f,c
  9741   003D5E                     l667:
  9742   003D5E  5029               	movf	turnRight@turnRamp^0,w,c
  9743   003D60  6E2A               	movwf	??_turnRight^0,c
  9744   003D62  6A2B               	clrf	(??_turnRight+1)^0,c
  9745   003D64  502A               	movf	??_turnRight^0,w,c
  9746   003D66  5C2D               	subwf	turnRight@i^0,w,c
  9747   003D68  502E               	movf	(turnRight@i+1)^0,w,c
  9748   003D6A  0A80               	xorlw	128
  9749   003D6C  6E2C               	movwf	(??_turnRight+2)^0,c
  9750   003D6E  502B               	movf	(??_turnRight+1)^0,w,c
  9751   003D70  0A80               	xorlw	128
  9752   003D72  582C               	subwfb	(??_turnRight+2)^0,w,c
  9753   003D74  A0D8               	btfss	status,0,c
  9754   003D76  EFBF  F01E         	goto	u2071
  9755   003D7A  EFC1  F01E         	goto	u2070
  9756   003D7E                     u2071:
  9757   003D7E  EFA5  F01E         	goto	l3208
  9758   003D82                     u2070:
  9759   003D82                     
  9760                           ;dc_motor.c: 447:     }
  9761   003D82  062F               	decf	turnRight@cur_power^0,f,c
  9762   003D84  A0D8               	btfss	status,0,c
  9763   003D86  0630               	decf	(turnRight@cur_power+1)^0,f,c
  9764   003D88  EF70  F01E         	goto	l3196
  9765   003D8C                     l670:
  9766   003D8C  0012               	return		;funcret
  9767   003D8E                     __end_of_turnRight:
  9768                           	callstack 0
  9769                           
  9770 ;; *************** function _turnLeft *****************
  9771 ;; Defined at:
  9772 ;;		line 387 in file "dc_motor.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  9775 ;;		 -> main@motorL(10), 
  9776 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  9777 ;;		 -> main@motorR(10), 
  9778 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  9779 ;;  turnDuration    1   39[COMRAM] unsigned char 
  9780 ;;  turnRamp        1   40[COMRAM] unsigned char 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  cur_power       2   46[COMRAM] int 
  9783 ;;  i               2   44[COMRAM] int 
  9784 ;; Return value:  Size  Location     Type
  9785 ;;                  1    wreg      void 
  9786 ;; Registers used:
  9787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9793 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9794 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9795 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9796 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9797 ;;Total ram usage:       14 bytes
  9798 ;; Hardware stack levels used: 1
  9799 ;; Hardware stack levels required when called: 7
  9800 ;; This function calls:
  9801 ;;		_setMotorPWM
  9802 ;; This function is called by:
  9803 ;;		_move
  9804 ;;		_returnHome
  9805 ;;		_calibration
  9806 ;;		_lostReturnHome
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text34
  9811   003D8E                     __ptext34:
  9812                           	callstack 0
  9813   003D8E                     _turnLeft:
  9814                           	callstack 22
  9815   003D8E                     
  9816                           ;dc_motor.c: 387: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 388: {;dc_motor.c: 389:     mL->dire
      +                          ction = 0;
  9817   003D8E  EE20 F001          	lfsr	2,1
  9818   003D92  5023               	movf	turnLeft@mL^0,w,c
  9819   003D94  26D9               	addwf	fsr2l,f,c
  9820   003D96  5024               	movf	(turnLeft@mL+1)^0,w,c
  9821   003D98  22DA               	addwfc	fsr2h,f,c
  9822   003D9A  6ADF               	clrf	indf2,c
  9823                           
  9824                           ;dc_motor.c: 390:     mR->direction = 1;
  9825   003D9C  EE20 F001          	lfsr	2,1
  9826   003DA0  5025               	movf	turnLeft@mR^0,w,c
  9827   003DA2  26D9               	addwf	fsr2l,f,c
  9828   003DA4  5026               	movf	(turnLeft@mR+1)^0,w,c
  9829   003DA6  22DA               	addwfc	fsr2h,f,c
  9830   003DA8  0E01               	movlw	1
  9831   003DAA  6EDF               	movwf	indf2,c
  9832   003DAC                     
  9833                           ;dc_motor.c: 391:     int i;;dc_motor.c: 392:     int cur_power;;dc_motor.c: 393:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  9834   003DAC  0E00               	movlw	0
  9835   003DAE  6E30               	movwf	(turnLeft@cur_power+1)^0,c
  9836   003DB0  0E01               	movlw	1
  9837   003DB2  6E2F               	movwf	turnLeft@cur_power^0,c
  9838   003DB4  EF26  F01F         	goto	l3234
  9839   003DB8                     l3220:
  9840                           
  9841                           ;dc_motor.c: 394:         mL->power = cur_power+mL->compensation;
  9842   003DB8  EE20 F009          	lfsr	2,9
  9843   003DBC  5023               	movf	turnLeft@mL^0,w,c
  9844   003DBE  26D9               	addwf	fsr2l,f,c
  9845   003DC0  5024               	movf	(turnLeft@mL+1)^0,w,c
  9846   003DC2  22DA               	addwfc	fsr2h,f,c
  9847   003DC4  50DF               	movf	indf2,w,c
  9848   003DC6  242F               	addwf	turnLeft@cur_power^0,w,c
  9849   003DC8  C023  FFD9         	movff	turnLeft@mL,fsr2l
  9850   003DCC  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
  9851   003DD0  6EDF               	movwf	indf2,c
  9852                           
  9853                           ;dc_motor.c: 395:         mR->power = cur_power+mR->compensation;
  9854   003DD2  EE20 F009          	lfsr	2,9
  9855   003DD6  5025               	movf	turnLeft@mR^0,w,c
  9856   003DD8  26D9               	addwf	fsr2l,f,c
  9857   003DDA  5026               	movf	(turnLeft@mR+1)^0,w,c
  9858   003DDC  22DA               	addwfc	fsr2h,f,c
  9859   003DDE  50DF               	movf	indf2,w,c
  9860   003DE0  242F               	addwf	turnLeft@cur_power^0,w,c
  9861   003DE2  C025  FFD9         	movff	turnLeft@mR,fsr2l
  9862   003DE6  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
  9863   003DEA  6EDF               	movwf	indf2,c
  9864   003DEC                     
  9865                           ;dc_motor.c: 396:         setMotorPWM(mL);
  9866   003DEC  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
  9867   003DF0  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  9868   003DF4  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9869   003DF8                     
  9870                           ;dc_motor.c: 397:         setMotorPWM(mR);
  9871   003DF8  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
  9872   003DFC  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  9873   003E00  ECB4  F01F         	call	_setMotorPWM	;wreg free
  9874   003E04                     
  9875                           ;dc_motor.c: 398:         for (i=0;i<turnRamp;i++) {
  9876   003E04  0E00               	movlw	0
  9877   003E06  6E2E               	movwf	(turnLeft@i+1)^0,c
  9878   003E08  0E00               	movlw	0
  9879   003E0A  6E2D               	movwf	turnLeft@i^0,c
  9880   003E0C  EF12  F01F         	goto	l641
  9881   003E10                     l3228:
  9882                           
  9883                           ;dc_motor.c: 399:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9884   003E10  0E68               	movlw	104
  9885   003E12  6E2A               	movwf	??_turnLeft^0,c
  9886   003E14  0EE4               	movlw	228
  9887   003E16                     u4797:
  9888   003E16  2EE8               	decfsz	wreg,f,c
  9889   003E18  D7FE               	bra	u4797
  9890   003E1A  2E2A               	decfsz	??_turnLeft^0,f,c
  9891   003E1C  D7FC               	bra	u4797
  9892   003E1E  D000               	nop2	
  9893   003E20                     
  9894                           ;dc_motor.c: 400:         }
  9895   003E20  4A2D               	infsnz	turnLeft@i^0,f,c
  9896   003E22  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9897   003E24                     l641:
  9898   003E24  5029               	movf	turnLeft@turnRamp^0,w,c
  9899   003E26  6E2A               	movwf	??_turnLeft^0,c
  9900   003E28  6A2B               	clrf	(??_turnLeft+1)^0,c
  9901   003E2A  502A               	movf	??_turnLeft^0,w,c
  9902   003E2C  5C2D               	subwf	turnLeft@i^0,w,c
  9903   003E2E  502E               	movf	(turnLeft@i+1)^0,w,c
  9904   003E30  0A80               	xorlw	128
  9905   003E32  6E2C               	movwf	(??_turnLeft+2)^0,c
  9906   003E34  502B               	movf	(??_turnLeft+1)^0,w,c
  9907   003E36  0A80               	xorlw	128
  9908   003E38  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9909   003E3A  A0D8               	btfss	status,0,c
  9910   003E3C  EF22  F01F         	goto	u2081
  9911   003E40  EF24  F01F         	goto	u2080
  9912   003E44                     u2081:
  9913   003E44  EF08  F01F         	goto	l3228
  9914   003E48                     u2080:
  9915   003E48                     
  9916                           ;dc_motor.c: 401:     }
  9917   003E48  4A2F               	infsnz	turnLeft@cur_power^0,f,c
  9918   003E4A  2A30               	incf	(turnLeft@cur_power+1)^0,f,c
  9919   003E4C                     l3234:
  9920   003E4C  5027               	movf	turnLeft@turnSpeed^0,w,c
  9921   003E4E  6E2A               	movwf	??_turnLeft^0,c
  9922   003E50  6A2B               	clrf	(??_turnLeft+1)^0,c
  9923   003E52  502F               	movf	turnLeft@cur_power^0,w,c
  9924   003E54  5C2A               	subwf	??_turnLeft^0,w,c
  9925   003E56  502B               	movf	(??_turnLeft+1)^0,w,c
  9926   003E58  0A80               	xorlw	128
  9927   003E5A  6E2C               	movwf	(??_turnLeft+2)^0,c
  9928   003E5C  5030               	movf	(turnLeft@cur_power+1)^0,w,c
  9929   003E5E  0A80               	xorlw	128
  9930   003E60  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9931   003E62  B0D8               	btfsc	status,0,c
  9932   003E64  EF36  F01F         	goto	u2091
  9933   003E68  EF38  F01F         	goto	u2090
  9934   003E6C                     u2091:
  9935   003E6C  EFDC  F01E         	goto	l3220
  9936   003E70                     u2090:
  9937   003E70                     
  9938                           ;dc_motor.c: 403:     for (i=0;i<turnDuration;i++) {
  9939   003E70  0E00               	movlw	0
  9940   003E72  6E2E               	movwf	(turnLeft@i+1)^0,c
  9941   003E74  0E00               	movlw	0
  9942   003E76  6E2D               	movwf	turnLeft@i^0,c
  9943   003E78  EF48  F01F         	goto	l645
  9944   003E7C                     l3238:
  9945                           
  9946                           ;dc_motor.c: 404:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9947   003E7C  0E68               	movlw	104
  9948   003E7E  6E2A               	movwf	??_turnLeft^0,c
  9949   003E80  0EE4               	movlw	228
  9950   003E82                     u4807:
  9951   003E82  2EE8               	decfsz	wreg,f,c
  9952   003E84  D7FE               	bra	u4807
  9953   003E86  2E2A               	decfsz	??_turnLeft^0,f,c
  9954   003E88  D7FC               	bra	u4807
  9955   003E8A  D000               	nop2	
  9956   003E8C                     
  9957                           ;dc_motor.c: 405:         }
  9958   003E8C  4A2D               	infsnz	turnLeft@i^0,f,c
  9959   003E8E  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9960   003E90                     l645:
  9961   003E90  5028               	movf	turnLeft@turnDuration^0,w,c
  9962   003E92  6E2A               	movwf	??_turnLeft^0,c
  9963   003E94  6A2B               	clrf	(??_turnLeft+1)^0,c
  9964   003E96  502A               	movf	??_turnLeft^0,w,c
  9965   003E98  5C2D               	subwf	turnLeft@i^0,w,c
  9966   003E9A  502E               	movf	(turnLeft@i+1)^0,w,c
  9967   003E9C  0A80               	xorlw	128
  9968   003E9E  6E2C               	movwf	(??_turnLeft+2)^0,c
  9969   003EA0  502B               	movf	(??_turnLeft+1)^0,w,c
  9970   003EA2  0A80               	xorlw	128
  9971   003EA4  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9972   003EA6  A0D8               	btfss	status,0,c
  9973   003EA8  EF58  F01F         	goto	u2101
  9974   003EAC  EF5A  F01F         	goto	u2100
  9975   003EB0                     u2101:
  9976   003EB0  EF3E  F01F         	goto	l3238
  9977   003EB4                     u2100:
  9978   003EB4                     
  9979                           ;dc_motor.c: 407:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  9980   003EB4  C027  F02F         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  9981   003EB8  6A30               	clrf	(turnLeft@cur_power+1)^0,c
  9982   003EBA                     l3242:
  9983   003EBA  BE30               	btfsc	(turnLeft@cur_power+1)^0,7,c
  9984   003EBC  EF64  F01F         	goto	u2110
  9985   003EC0  EF62  F01F         	goto	u2111
  9986   003EC4                     u2111:
  9987   003EC4  EF66  F01F         	goto	l3246
  9988   003EC8                     u2110:
  9989   003EC8  EFB3  F01F         	goto	l653
  9990   003ECC                     l3246:
  9991                           
  9992                           ;dc_motor.c: 408:         mL->power = cur_power+mL->compensation;
  9993   003ECC  EE20 F009          	lfsr	2,9
  9994   003ED0  5023               	movf	turnLeft@mL^0,w,c
  9995   003ED2  26D9               	addwf	fsr2l,f,c
  9996   003ED4  5024               	movf	(turnLeft@mL+1)^0,w,c
  9997   003ED6  22DA               	addwfc	fsr2h,f,c
  9998   003ED8  50DF               	movf	indf2,w,c
  9999   003EDA  242F               	addwf	turnLeft@cur_power^0,w,c
 10000   003EDC  C023  FFD9         	movff	turnLeft@mL,fsr2l
 10001   003EE0  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
 10002   003EE4  6EDF               	movwf	indf2,c
 10003                           
 10004                           ;dc_motor.c: 409:         mR->power = cur_power+mR->compensation;
 10005   003EE6  EE20 F009          	lfsr	2,9
 10006   003EEA  5025               	movf	turnLeft@mR^0,w,c
 10007   003EEC  26D9               	addwf	fsr2l,f,c
 10008   003EEE  5026               	movf	(turnLeft@mR+1)^0,w,c
 10009   003EF0  22DA               	addwfc	fsr2h,f,c
 10010   003EF2  50DF               	movf	indf2,w,c
 10011   003EF4  242F               	addwf	turnLeft@cur_power^0,w,c
 10012   003EF6  C025  FFD9         	movff	turnLeft@mR,fsr2l
 10013   003EFA  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
 10014   003EFE  6EDF               	movwf	indf2,c
 10015   003F00                     
 10016                           ;dc_motor.c: 410:         setMotorPWM(mL);
 10017   003F00  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
 10018   003F04  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
 10019   003F08  ECB4  F01F         	call	_setMotorPWM	;wreg free
 10020   003F0C                     
 10021                           ;dc_motor.c: 411:         setMotorPWM(mR);
 10022   003F0C  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
 10023   003F10  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
 10024   003F14  ECB4  F01F         	call	_setMotorPWM	;wreg free
 10025   003F18                     
 10026                           ;dc_motor.c: 412:         for (i=0;i<turnRamp;i++) {
 10027   003F18  0E00               	movlw	0
 10028   003F1A  6E2E               	movwf	(turnLeft@i+1)^0,c
 10029   003F1C  0E00               	movlw	0
 10030   003F1E  6E2D               	movwf	turnLeft@i^0,c
 10031   003F20  EF9C  F01F         	goto	l650
 10032   003F24                     l3254:
 10033                           
 10034                           ;dc_motor.c: 413:             _delay((unsigned long)((5)*(64000000/4000.0)));
 10035   003F24  0E68               	movlw	104
 10036   003F26  6E2A               	movwf	??_turnLeft^0,c
 10037   003F28  0EE4               	movlw	228
 10038   003F2A                     u4817:
 10039   003F2A  2EE8               	decfsz	wreg,f,c
 10040   003F2C  D7FE               	bra	u4817
 10041   003F2E  2E2A               	decfsz	??_turnLeft^0,f,c
 10042   003F30  D7FC               	bra	u4817
 10043   003F32  D000               	nop2	
 10044   003F34                     
 10045                           ;dc_motor.c: 414:         }
 10046   003F34  4A2D               	infsnz	turnLeft@i^0,f,c
 10047   003F36  2A2E               	incf	(turnLeft@i+1)^0,f,c
 10048   003F38                     l650:
 10049   003F38  5029               	movf	turnLeft@turnRamp^0,w,c
 10050   003F3A  6E2A               	movwf	??_turnLeft^0,c
 10051   003F3C  6A2B               	clrf	(??_turnLeft+1)^0,c
 10052   003F3E  502A               	movf	??_turnLeft^0,w,c
 10053   003F40  5C2D               	subwf	turnLeft@i^0,w,c
 10054   003F42  502E               	movf	(turnLeft@i+1)^0,w,c
 10055   003F44  0A80               	xorlw	128
 10056   003F46  6E2C               	movwf	(??_turnLeft+2)^0,c
 10057   003F48  502B               	movf	(??_turnLeft+1)^0,w,c
 10058   003F4A  0A80               	xorlw	128
 10059   003F4C  582C               	subwfb	(??_turnLeft+2)^0,w,c
 10060   003F4E  A0D8               	btfss	status,0,c
 10061   003F50  EFAC  F01F         	goto	u2121
 10062   003F54  EFAE  F01F         	goto	u2120
 10063   003F58                     u2121:
 10064   003F58  EF92  F01F         	goto	l3254
 10065   003F5C                     u2120:
 10066   003F5C                     
 10067                           ;dc_motor.c: 415:     }
 10068   003F5C  062F               	decf	turnLeft@cur_power^0,f,c
 10069   003F5E  A0D8               	btfss	status,0,c
 10070   003F60  0630               	decf	(turnLeft@cur_power+1)^0,f,c
 10071   003F62  EF5D  F01F         	goto	l3242
 10072   003F66                     l653:
 10073   003F66  0012               	return		;funcret
 10074   003F68                     __end_of_turnLeft:
 10075                           	callstack 0
 10076                           
 10077 ;; *************** function _setMotorPWM *****************
 10078 ;; Defined at:
 10079 ;;		line 68 in file "dc_motor.c"
 10080 ;; Parameters:    Size  Location     Type
 10081 ;;  m               2   28[COMRAM] PTR struct DC_motor
 10082 ;;		 -> main@motorR(10), main@motorL(10), 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;  negDuty         1   33[COMRAM] unsigned char 
 10085 ;;  posDuty         1   32[COMRAM] unsigned char 
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  1    wreg      void 
 10088 ;; Registers used:
 10089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10097 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10098 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10099 ;;Total ram usage:        6 bytes
 10100 ;; Hardware stack levels used: 1
 10101 ;; Hardware stack levels required when called: 6
 10102 ;; This function calls:
 10103 ;;		___lwdiv
 10104 ;;		___wmul
 10105 ;; This function is called by:
 10106 ;;		_stop
 10107 ;;		_turnLeft
 10108 ;;		_turnRight
 10109 ;;		_fullSpeedAhead
 10110 ;;		_reverseOneSquare
 10111 ;;		_wallAdjust
 10112 ;;		_reverseShort
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text35
 10117   003F68                     __ptext35:
 10118                           	callstack 0
 10119   003F68                     _setMotorPWM:
 10120                           	callstack 23
 10121   003F68                     
 10122                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
 10123   003F68  EE20 F002          	lfsr	2,2
 10124   003F6C  501D               	movf	setMotorPWM@m^0,w,c
 10125   003F6E  26D9               	addwf	fsr2l,f,c
 10126   003F70  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10127   003F72  22DA               	addwfc	fsr2h,f,c
 10128   003F74  50DF               	movf	indf2,w,c
 10129   003F76  B4D8               	btfsc	status,2,c
 10130   003F78  EFC0  F01F         	goto	u1911
 10131   003F7C  EFC2  F01F         	goto	u1910
 10132   003F80                     u1911:
 10133   003F80  EFF6  F01F         	goto	l3070
 10134   003F84                     u1910:
 10135   003F84                     
 10136                           ;dc_motor.c: 73:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
 10137   003F84  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
 10138   003F88  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
 10139   003F8C  50DF               	movf	indf2,w,c
 10140   003F8E  6E1F               	movwf	??_setMotorPWM^0,c
 10141   003F90  501F               	movf	??_setMotorPWM^0,w,c
 10142   003F92  6E10               	movwf	___wmul@multiplier^0,c
 10143   003F94  6A11               	clrf	(___wmul@multiplier+1)^0,c
 10144   003F96  EE20 F003          	lfsr	2,3
 10145   003F9A  501D               	movf	setMotorPWM@m^0,w,c
 10146   003F9C  26D9               	addwf	fsr2l,f,c
 10147   003F9E  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10148   003FA0  22DA               	addwfc	fsr2h,f,c
 10149   003FA2  CFDE F012          	movff	postinc2,___wmul@multiplicand
 10150   003FA6  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
 10151   003FAA  EC70  F025         	call	___wmul	;wreg free
 10152   003FAE  C010  F016         	movff	?___wmul,___lwdiv@dividend
 10153   003FB2  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
 10154   003FB6  0E00               	movlw	0
 10155   003FB8  6E19               	movwf	(___lwdiv@divisor+1)^0,c
 10156   003FBA  0E64               	movlw	100
 10157   003FBC  6E18               	movwf	___lwdiv@divisor^0,c
 10158   003FBE  EC89  F023         	call	___lwdiv	;wreg free
 10159   003FC2  EE20 F003          	lfsr	2,3
 10160   003FC6  501D               	movf	setMotorPWM@m^0,w,c
 10161   003FC8  26D9               	addwf	fsr2l,f,c
 10162   003FCA  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10163   003FCC  22DA               	addwfc	fsr2h,f,c
 10164   003FCE  50DF               	movf	indf2,w,c
 10165   003FD0  6E20               	movwf	(??_setMotorPWM+1)^0,c
 10166   003FD2  5016               	movf	?___lwdiv^0,w,c
 10167   003FD4  5C20               	subwf	(??_setMotorPWM+1)^0,w,c
 10168   003FD6  6E21               	movwf	setMotorPWM@posDuty^0,c
 10169   003FD8                     
 10170                           ;dc_motor.c: 74:         negDuty=m->PWMperiod;
 10171   003FD8  EE20 F003          	lfsr	2,3
 10172   003FDC  501D               	movf	setMotorPWM@m^0,w,c
 10173   003FDE  26D9               	addwf	fsr2l,f,c
 10174   003FE0  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10175   003FE2  22DA               	addwfc	fsr2h,f,c
 10176   003FE4  50DF               	movf	indf2,w,c
 10177   003FE6  6E22               	movwf	setMotorPWM@negDuty^0,c
 10178                           
 10179                           ;dc_motor.c: 75:     }
 10180   003FE8  EF19  F020         	goto	l3074
 10181   003FEC                     l3070:
 10182                           
 10183                           ;dc_motor.c: 77:         posDuty=0;
 10184   003FEC  0E00               	movlw	0
 10185   003FEE  6E21               	movwf	setMotorPWM@posDuty^0,c
 10186   003FF0                     
 10187                           ;dc_motor.c: 78:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
 10188   003FF0  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
 10189   003FF4  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
 10190   003FF8  50DF               	movf	indf2,w,c
 10191   003FFA  6E1F               	movwf	??_setMotorPWM^0,c
 10192   003FFC  501F               	movf	??_setMotorPWM^0,w,c
 10193   003FFE  6E10               	movwf	___wmul@multiplier^0,c
 10194   004000  6A11               	clrf	(___wmul@multiplier+1)^0,c
 10195   004002  EE20 F003          	lfsr	2,3
 10196   004006  501D               	movf	setMotorPWM@m^0,w,c
 10197   004008  26D9               	addwf	fsr2l,f,c
 10198   00400A  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10199   00400C  22DA               	addwfc	fsr2h,f,c
 10200   00400E  CFDE F012          	movff	postinc2,___wmul@multiplicand
 10201   004012  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
 10202   004016  EC70  F025         	call	___wmul	;wreg free
 10203   00401A  C010  F016         	movff	?___wmul,___lwdiv@dividend
 10204   00401E  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
 10205   004022  0E00               	movlw	0
 10206   004024  6E19               	movwf	(___lwdiv@divisor+1)^0,c
 10207   004026  0E64               	movlw	100
 10208   004028  6E18               	movwf	___lwdiv@divisor^0,c
 10209   00402A  EC89  F023         	call	___lwdiv	;wreg free
 10210   00402E  5016               	movf	?___lwdiv^0,w,c
 10211   004030  6E22               	movwf	setMotorPWM@negDuty^0,c
 10212   004032                     l3074:
 10213                           
 10214                           ;dc_motor.c: 81:     if (m->direction) {
 10215   004032  EE20 F001          	lfsr	2,1
 10216   004036  501D               	movf	setMotorPWM@m^0,w,c
 10217   004038  26D9               	addwf	fsr2l,f,c
 10218   00403A  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10219   00403C  22DA               	addwfc	fsr2h,f,c
 10220   00403E  50DF               	movf	indf2,w,c
 10221   004040  B4D8               	btfsc	status,2,c
 10222   004042  EF25  F020         	goto	u1921
 10223   004046  EF27  F020         	goto	u1920
 10224   00404A                     u1921:
 10225   00404A  EF49  F020         	goto	l3078
 10226   00404E                     u1920:
 10227   00404E                     
 10228                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
 10229   00404E  EE20 F005          	lfsr	2,5
 10230   004052  501D               	movf	setMotorPWM@m^0,w,c
 10231   004054  26D9               	addwf	fsr2l,f,c
 10232   004056  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10233   004058  22DA               	addwfc	fsr2h,f,c
 10234   00405A  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10235   00405E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10236   004062  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10237   004066  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10238   00406A  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
 10239                           
 10240                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
 10241   00406E  EE20 F007          	lfsr	2,7
 10242   004072  501D               	movf	setMotorPWM@m^0,w,c
 10243   004074  26D9               	addwf	fsr2l,f,c
 10244   004076  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10245   004078  22DA               	addwfc	fsr2h,f,c
 10246   00407A  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10247   00407E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10248   004082  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10249   004086  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10250   00408A  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
 10251                           
 10252                           ;dc_motor.c: 84:     } else {
 10253   00408E  EF69  F020         	goto	l559
 10254   004092                     l3078:
 10255                           
 10256                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
 10257   004092  EE20 F005          	lfsr	2,5
 10258   004096  501D               	movf	setMotorPWM@m^0,w,c
 10259   004098  26D9               	addwf	fsr2l,f,c
 10260   00409A  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10261   00409C  22DA               	addwfc	fsr2h,f,c
 10262   00409E  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10263   0040A2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10264   0040A6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10265   0040AA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10266   0040AE  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
 10267                           
 10268                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
 10269   0040B2  EE20 F007          	lfsr	2,7
 10270   0040B6  501D               	movf	setMotorPWM@m^0,w,c
 10271   0040B8  26D9               	addwf	fsr2l,f,c
 10272   0040BA  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10273   0040BC  22DA               	addwfc	fsr2h,f,c
 10274   0040BE  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10275   0040C2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10276   0040C6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10277   0040CA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10278   0040CE  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
 10279   0040D2                     l559:
 10280   0040D2  0012               	return		;funcret
 10281   0040D4                     __end_of_setMotorPWM:
 10282                           	callstack 0
 10283                           
 10284 ;; *************** function ___wmul *****************
 10285 ;; Defined at:
 10286 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  multiplier      2   15[COMRAM] unsigned int 
 10289 ;;  multiplicand    2   17[COMRAM] unsigned int 
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;  product         2   19[COMRAM] unsigned int 
 10292 ;; Return value:  Size  Location     Type
 10293 ;;                  2   15[COMRAM] unsigned int 
 10294 ;; Registers used:
 10295 ;;		wreg, status,2, status,0, prodl, prodh
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10304 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10305 ;;Total ram usage:        6 bytes
 10306 ;; Hardware stack levels used: 1
 10307 ;; Hardware stack levels required when called: 5
 10308 ;; This function calls:
 10309 ;;		Nothing
 10310 ;; This function is called by:
 10311 ;;		_setMotorPWM
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           	psect	text36
 10316   004AE0                     __ptext36:
 10317                           	callstack 0
 10318   004AE0                     ___wmul:
 10319                           	callstack 23
 10320   004AE0  5010               	movf	___wmul@multiplier^0,w,c
 10321   004AE2  0212               	mulwf	___wmul@multiplicand^0,c
 10322   004AE4  CFF3 F014          	movff	prodl,___wmul@product
 10323   004AE8  CFF4 F015          	movff	prodh,___wmul@product+1
 10324   004AEC  5010               	movf	___wmul@multiplier^0,w,c
 10325   004AEE  0213               	mulwf	(___wmul@multiplicand+1)^0,c
 10326   004AF0  50F3               	movf	243,w,c
 10327   004AF2  2615               	addwf	(___wmul@product+1)^0,f,c
 10328   004AF4  5011               	movf	(___wmul@multiplier+1)^0,w,c
 10329   004AF6  0212               	mulwf	___wmul@multiplicand^0,c
 10330   004AF8  50F3               	movf	243,w,c
 10331   004AFA  2615               	addwf	(___wmul@product+1)^0,f,c
 10332   004AFC  C014  F010         	movff	___wmul@product,?___wmul
 10333   004B00  C015  F011         	movff	___wmul@product+1,?___wmul+1
 10334   004B04  0012               	return		;funcret
 10335   004B06                     __end_of___wmul:
 10336                           	callstack 0
 10337                           
 10338 ;; *************** function ___lwdiv *****************
 10339 ;; Defined at:
 10340 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  dividend        2   21[COMRAM] unsigned int 
 10343 ;;  divisor         2   23[COMRAM] unsigned int 
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;  quotient        2   25[COMRAM] unsigned int 
 10346 ;;  counter         1   27[COMRAM] unsigned char 
 10347 ;; Return value:  Size  Location     Type
 10348 ;;                  2   21[COMRAM] unsigned int 
 10349 ;; Registers used:
 10350 ;;		wreg, status,2, status,0
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10357 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10359 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10360 ;;Total ram usage:        7 bytes
 10361 ;; Hardware stack levels used: 1
 10362 ;; Hardware stack levels required when called: 5
 10363 ;; This function calls:
 10364 ;;		Nothing
 10365 ;; This function is called by:
 10366 ;;		_color_clear_init_interrupts
 10367 ;;		_setMotorPWM
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text37
 10372   004712                     __ptext37:
 10373                           	callstack 0
 10374   004712                     ___lwdiv:
 10375                           	callstack 23
 10376   004712  0E00               	movlw	0
 10377   004714  6E1B               	movwf	(___lwdiv@quotient+1)^0,c
 10378   004716  0E00               	movlw	0
 10379   004718  6E1A               	movwf	___lwdiv@quotient^0,c
 10380   00471A  5018               	movf	___lwdiv@divisor^0,w,c
 10381   00471C  1019               	iorwf	(___lwdiv@divisor+1)^0,w,c
 10382   00471E  B4D8               	btfsc	status,2,c
 10383   004720  EF94  F023         	goto	u1881
 10384   004724  EF96  F023         	goto	u1880
 10385   004728                     u1881:
 10386   004728  EFBE  F023         	goto	l1270
 10387   00472C                     u1880:
 10388   00472C  0E01               	movlw	1
 10389   00472E  6E1C               	movwf	___lwdiv@counter^0,c
 10390   004730  EF9E  F023         	goto	l3038
 10391   004734                     l3036:
 10392   004734  90D8               	bcf	status,0,c
 10393   004736  3618               	rlcf	___lwdiv@divisor^0,f,c
 10394   004738  3619               	rlcf	(___lwdiv@divisor+1)^0,f,c
 10395   00473A  2A1C               	incf	___lwdiv@counter^0,f,c
 10396   00473C                     l3038:
 10397   00473C  AE19               	btfss	(___lwdiv@divisor+1)^0,7,c
 10398   00473E  EFA3  F023         	goto	u1891
 10399   004742  EFA5  F023         	goto	u1890
 10400   004746                     u1891:
 10401   004746  EF9A  F023         	goto	l3036
 10402   00474A                     u1890:
 10403   00474A                     l3040:
 10404   00474A  90D8               	bcf	status,0,c
 10405   00474C  361A               	rlcf	___lwdiv@quotient^0,f,c
 10406   00474E  361B               	rlcf	(___lwdiv@quotient+1)^0,f,c
 10407   004750  5018               	movf	___lwdiv@divisor^0,w,c
 10408   004752  5C16               	subwf	___lwdiv@dividend^0,w,c
 10409   004754  5019               	movf	(___lwdiv@divisor+1)^0,w,c
 10410   004756  5817               	subwfb	(___lwdiv@dividend+1)^0,w,c
 10411   004758  A0D8               	btfss	status,0,c
 10412   00475A  EFB1  F023         	goto	u1901
 10413   00475E  EFB3  F023         	goto	u1900
 10414   004762                     u1901:
 10415   004762  EFB8  F023         	goto	l3048
 10416   004766                     u1900:
 10417   004766  5018               	movf	___lwdiv@divisor^0,w,c
 10418   004768  5E16               	subwf	___lwdiv@dividend^0,f,c
 10419   00476A  5019               	movf	(___lwdiv@divisor+1)^0,w,c
 10420   00476C  5A17               	subwfb	(___lwdiv@dividend+1)^0,f,c
 10421   00476E  801A               	bsf	___lwdiv@quotient^0,0,c
 10422   004770                     l3048:
 10423   004770  90D8               	bcf	status,0,c
 10424   004772  3219               	rrcf	(___lwdiv@divisor+1)^0,f,c
 10425   004774  3218               	rrcf	___lwdiv@divisor^0,f,c
 10426   004776  2E1C               	decfsz	___lwdiv@counter^0,f,c
 10427   004778  EFA5  F023         	goto	l3040
 10428   00477C                     l1270:
 10429   00477C  C01A  F016         	movff	___lwdiv@quotient,?___lwdiv
 10430   004780  C01B  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10431   004784  0012               	return		;funcret
 10432   004786                     __end_of___lwdiv:
 10433                           	callstack 0
 10434                           
 10435 ;; *************** function _batteryLevel *****************
 10436 ;; Defined at:
 10437 ;;		line 6 in file "battery.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;		None
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  batteryQuart    1   24[COMRAM] unsigned char 
 10442 ;;  batteryVolta    1   23[COMRAM] unsigned char 
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10456 ;;Total ram usage:        2 bytes
 10457 ;; Hardware stack levels used: 1
 10458 ;; Hardware stack levels required when called: 6
 10459 ;; This function calls:
 10460 ;;		_ADC_getval
 10461 ;;		_ADC_init
 10462 ;;		___awdiv
 10463 ;; This function is called by:
 10464 ;;		_main
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           	psect	text38
 10469   0048BC                     __ptext38:
 10470                           	callstack 0
 10471   0048BC                     _batteryLevel:
 10472                           	callstack 24
 10473   0048BC                     
 10474                           ;battery.c: 7:     ADC_init();
 10475   0048BC  ECE7  F025         	call	_ADC_init	;wreg free
 10476                           
 10477                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
 10478   0048C0  ECF4  F025         	call	_ADC_getval	;wreg free
 10479   0048C4  6E18               	movwf	batteryLevel@batteryVoltage^0,c
 10480   0048C6                     
 10481                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
 10482   0048C6  C018  F010         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
 10483   0048CA  6A11               	clrf	(___awdiv@dividend+1)^0,c
 10484   0048CC  0E00               	movlw	0
 10485   0048CE  6E13               	movwf	(___awdiv@divisor+1)^0,c
 10486   0048D0  0E18               	movlw	24
 10487   0048D2  6E12               	movwf	___awdiv@divisor^0,c
 10488   0048D4  ECE7  F021         	call	___awdiv	;wreg free
 10489   0048D8  5010               	movf	?___awdiv^0,w,c
 10490   0048DA  6E19               	movwf	batteryLevel@batteryQuarter^0,c
 10491   0048DC                     
 10492                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
 10493   0048DC  A219               	btfss	batteryLevel@batteryQuarter^0,1,c
 10494   0048DE  EF73  F024         	goto	u2621
 10495   0048E2  EF75  F024         	goto	u2620
 10496   0048E6                     u2621:
 10497   0048E6  EF78  F024         	goto	l471
 10498   0048EA                     u2620:
 10499   0048EA  8E7C               	bsf	124,7,c	;volatile
 10500   0048EC  EF79  F024         	goto	l472
 10501   0048F0                     l471:
 10502   0048F0  9E7C               	bcf	124,7,c	;volatile
 10503   0048F2                     l472:
 10504                           
 10505                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
 10506   0048F2  A019               	btfss	batteryLevel@batteryQuarter^0,0,c
 10507   0048F4  EF7E  F024         	goto	u2631
 10508   0048F8  EF80  F024         	goto	u2630
 10509   0048FC                     u2631:
 10510   0048FC  EF83  F024         	goto	l473
 10511   004900                     u2630:
 10512   004900  8680               	bsf	128,3,c	;volatile
 10513   004902  EF84  F024         	goto	l475
 10514   004906                     l473:
 10515   004906  9680               	bcf	128,3,c	;volatile
 10516   004908                     l475:
 10517   004908  0012               	return		;funcret
 10518   00490A                     __end_of_batteryLevel:
 10519                           	callstack 0
 10520                           
 10521 ;; *************** function ___awdiv *****************
 10522 ;; Defined at:
 10523 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;  dividend        2   15[COMRAM] int 
 10526 ;;  divisor         2   17[COMRAM] int 
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  quotient        2   21[COMRAM] int 
 10529 ;;  sign            1   20[COMRAM] unsigned char 
 10530 ;;  counter         1   19[COMRAM] unsigned char 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  2   15[COMRAM] int 
 10533 ;; Registers used:
 10534 ;;		wreg, status,2, status,0
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10541 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10543 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10544 ;;Total ram usage:        8 bytes
 10545 ;; Hardware stack levels used: 1
 10546 ;; Hardware stack levels required when called: 5
 10547 ;; This function calls:
 10548 ;;		Nothing
 10549 ;; This function is called by:
 10550 ;;		_batteryLevel
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	text39
 10555   0043CE                     __ptext39:
 10556                           	callstack 0
 10557   0043CE                     ___awdiv:
 10558                           	callstack 24
 10559   0043CE  0E00               	movlw	0
 10560   0043D0  6E15               	movwf	___awdiv@sign^0,c
 10561   0043D2  BE13               	btfsc	(___awdiv@divisor+1)^0,7,c
 10562   0043D4  EFF0  F021         	goto	u2530
 10563   0043D8  EFEE  F021         	goto	u2531
 10564   0043DC                     u2531:
 10565   0043DC  EFF6  F021         	goto	l3660
 10566   0043E0                     u2530:
 10567   0043E0  6C12               	negf	___awdiv@divisor^0,c
 10568   0043E2  1E13               	comf	(___awdiv@divisor+1)^0,f,c
 10569   0043E4  B0D8               	btfsc	status,0,c
 10570   0043E6  2A13               	incf	(___awdiv@divisor+1)^0,f,c
 10571   0043E8  0E01               	movlw	1
 10572   0043EA  6E15               	movwf	___awdiv@sign^0,c
 10573   0043EC                     l3660:
 10574   0043EC  BE11               	btfsc	(___awdiv@dividend+1)^0,7,c
 10575   0043EE  EFFD  F021         	goto	u2540
 10576   0043F2  EFFB  F021         	goto	u2541
 10577   0043F6                     u2541:
 10578   0043F6  EF03  F022         	goto	l3666
 10579   0043FA                     u2540:
 10580   0043FA  6C10               	negf	___awdiv@dividend^0,c
 10581   0043FC  1E11               	comf	(___awdiv@dividend+1)^0,f,c
 10582   0043FE  B0D8               	btfsc	status,0,c
 10583   004400  2A11               	incf	(___awdiv@dividend+1)^0,f,c
 10584   004402  0E01               	movlw	1
 10585   004404  1A15               	xorwf	___awdiv@sign^0,f,c
 10586   004406                     l3666:
 10587   004406  0E00               	movlw	0
 10588   004408  6E17               	movwf	(___awdiv@quotient+1)^0,c
 10589   00440A  0E00               	movlw	0
 10590   00440C  6E16               	movwf	___awdiv@quotient^0,c
 10591   00440E  5012               	movf	___awdiv@divisor^0,w,c
 10592   004410  1013               	iorwf	(___awdiv@divisor+1)^0,w,c
 10593   004412  B4D8               	btfsc	status,2,c
 10594   004414  EF0E  F022         	goto	u2551
 10595   004418  EF10  F022         	goto	u2550
 10596   00441C                     u2551:
 10597   00441C  EF38  F022         	goto	l3688
 10598   004420                     u2550:
 10599   004420  0E01               	movlw	1
 10600   004422  6E14               	movwf	___awdiv@counter^0,c
 10601   004424  EF18  F022         	goto	l3674
 10602   004428                     l3672:
 10603   004428  90D8               	bcf	status,0,c
 10604   00442A  3612               	rlcf	___awdiv@divisor^0,f,c
 10605   00442C  3613               	rlcf	(___awdiv@divisor+1)^0,f,c
 10606   00442E  2A14               	incf	___awdiv@counter^0,f,c
 10607   004430                     l3674:
 10608   004430  AE13               	btfss	(___awdiv@divisor+1)^0,7,c
 10609   004432  EF1D  F022         	goto	u2561
 10610   004436  EF1F  F022         	goto	u2560
 10611   00443A                     u2561:
 10612   00443A  EF14  F022         	goto	l3672
 10613   00443E                     u2560:
 10614   00443E                     l3676:
 10615   00443E  90D8               	bcf	status,0,c
 10616   004440  3616               	rlcf	___awdiv@quotient^0,f,c
 10617   004442  3617               	rlcf	(___awdiv@quotient+1)^0,f,c
 10618   004444  5012               	movf	___awdiv@divisor^0,w,c
 10619   004446  5C10               	subwf	___awdiv@dividend^0,w,c
 10620   004448  5013               	movf	(___awdiv@divisor+1)^0,w,c
 10621   00444A  5811               	subwfb	(___awdiv@dividend+1)^0,w,c
 10622   00444C  A0D8               	btfss	status,0,c
 10623   00444E  EF2B  F022         	goto	u2571
 10624   004452  EF2D  F022         	goto	u2570
 10625   004456                     u2571:
 10626   004456  EF32  F022         	goto	l3684
 10627   00445A                     u2570:
 10628   00445A  5012               	movf	___awdiv@divisor^0,w,c
 10629   00445C  5E10               	subwf	___awdiv@dividend^0,f,c
 10630   00445E  5013               	movf	(___awdiv@divisor+1)^0,w,c
 10631   004460  5A11               	subwfb	(___awdiv@dividend+1)^0,f,c
 10632   004462  8016               	bsf	___awdiv@quotient^0,0,c
 10633   004464                     l3684:
 10634   004464  90D8               	bcf	status,0,c
 10635   004466  3213               	rrcf	(___awdiv@divisor+1)^0,f,c
 10636   004468  3212               	rrcf	___awdiv@divisor^0,f,c
 10637   00446A  2E14               	decfsz	___awdiv@counter^0,f,c
 10638   00446C  EF1F  F022         	goto	l3676
 10639   004470                     l3688:
 10640   004470  5015               	movf	___awdiv@sign^0,w,c
 10641   004472  B4D8               	btfsc	status,2,c
 10642   004474  EF3E  F022         	goto	u2581
 10643   004478  EF40  F022         	goto	u2580
 10644   00447C                     u2581:
 10645   00447C  EF44  F022         	goto	l3692
 10646   004480                     u2580:
 10647   004480  6C16               	negf	___awdiv@quotient^0,c
 10648   004482  1E17               	comf	(___awdiv@quotient+1)^0,f,c
 10649   004484  B0D8               	btfsc	status,0,c
 10650   004486  2A17               	incf	(___awdiv@quotient+1)^0,f,c
 10651   004488                     l3692:
 10652   004488  C016  F010         	movff	___awdiv@quotient,?___awdiv
 10653   00448C  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
 10654   004490  0012               	return		;funcret
 10655   004492                     __end_of___awdiv:
 10656                           	callstack 0
 10657                           
 10658 ;; *************** function _ADC_init *****************
 10659 ;; Defined at:
 10660 ;;		line 9 in file "ADC.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;		None
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, status,2
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10678 ;;Total ram usage:        0 bytes
 10679 ;; Hardware stack levels used: 1
 10680 ;; Hardware stack levels required when called: 5
 10681 ;; This function calls:
 10682 ;;		Nothing
 10683 ;; This function is called by:
 10684 ;;		_batteryLevel
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text40
 10689   004BCE                     __ptext40:
 10690                           	callstack 0
 10691   004BCE                     _ADC_init:
 10692                           	callstack 24
 10693   004BCE                     
 10694                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 10695   004BCE  8C86               	bsf	134,6,c	;volatile
 10696                           
 10697                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 10698   004BD0  010E               	movlb	14	; () banked
 10699   004BD2  8DB4               	bsf	180,6,b	;volatile
 10700                           
 10701                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 10702   004BD4  010F               	movlb	15	; () banked
 10703   004BD6  9958               	bcf	88,4,b	;volatile
 10704   004BD8                     
 10705                           ; BSR set to: 15
 10706                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 10707   004BD8  0EFC               	movlw	-4
 10708   004BDA  1758               	andwf	88,f,b	;volatile
 10709                           
 10710                           ;ADC.c: 17:     ADPCH=0b101110;
 10711   004BDC  0E2E               	movlw	46
 10712   004BDE  6F5F               	movwf	95,b	;volatile
 10713   004BE0                     
 10714                           ; BSR set to: 15
 10715                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 10716   004BE0  9460               	bcf	96,2,c	;volatile
 10717   004BE2                     
 10718                           ; BSR set to: 15
 10719                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 10720   004BE2  8860               	bsf	96,4,c	;volatile
 10721   004BE4                     
 10722                           ; BSR set to: 15
 10723                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 10724   004BE4  8E60               	bsf	96,7,c	;volatile
 10725   004BE6                     
 10726                           ; BSR set to: 15
 10727   004BE6  0012               	return		;funcret
 10728   004BE8                     __end_of_ADC_init:
 10729                           	callstack 0
 10730                           
 10731 ;; *************** function _ADC_getval *****************
 10732 ;; Defined at:
 10733 ;;		line 23 in file "ADC.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;		None
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;  tmpval          1   15[COMRAM] unsigned char 
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  1    wreg      unsigned char 
 10740 ;; Registers used:
 10741 ;;		wreg, status,2
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10751 ;;Total ram usage:        1 bytes
 10752 ;; Hardware stack levels used: 1
 10753 ;; Hardware stack levels required when called: 5
 10754 ;; This function calls:
 10755 ;;		Nothing
 10756 ;; This function is called by:
 10757 ;;		_batteryLevel
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           	psect	text41
 10762   004BE8                     __ptext41:
 10763                           	callstack 0
 10764   004BE8                     _ADC_getval:
 10765                           	callstack 24
 10766   004BE8                     
 10767                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
 10768   004BE8  8060               	bsf	96,0,c	;volatile
 10769   004BEA                     l457:
 10770   004BEA  B060               	btfsc	96,0,c	;volatile
 10771   004BEC  EFFA  F025         	goto	u2371
 10772   004BF0  EFFC  F025         	goto	u2370
 10773   004BF4                     u2371:
 10774   004BF4  EFF5  F025         	goto	l457
 10775   004BF8                     u2370:
 10776   004BF8                     
 10777                           ;ADC.c: 31:     tmpval = ADRESH;
 10778   004BF8  CF64 F010          	movff	3940,ADC_getval@tmpval	;volatile
 10779   004BFC                     
 10780                           ;ADC.c: 35:     return tmpval;
 10781   004BFC  5010               	movf	ADC_getval@tmpval^0,w,c
 10782   004BFE  0012               	return		;funcret
 10783   004C00                     __end_of_ADC_getval:
 10784                           	callstack 0
 10785                           
 10786 ;; *************** function _Timer0_init *****************
 10787 ;; Defined at:
 10788 ;;		line 7 in file "timers.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;		None
 10793 ;; Return value:  Size  Location     Type
 10794 ;;                  1    wreg      void 
 10795 ;; Registers used:
 10796 ;;		wreg, status,2
 10797 ;; Tracked objects:
 10798 ;;		On entry : 0/0
 10799 ;;		On exit  : 0/0
 10800 ;;		Unchanged: 0/0
 10801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10806 ;;Total ram usage:        0 bytes
 10807 ;; Hardware stack levels used: 1
 10808 ;; Hardware stack levels required when called: 5
 10809 ;; This function calls:
 10810 ;;		Nothing
 10811 ;; This function is called by:
 10812 ;;		_main
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text42
 10817   004B70                     __ptext42:
 10818                           	callstack 0
 10819   004B70                     _Timer0_init:
 10820                           	callstack 25
 10821   004B70                     
 10822                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 10823   004B70  50D6               	movf	214,w,c	;volatile
 10824   004B72  0B1F               	andlw	-225
 10825   004B74  0940               	iorlw	64
 10826   004B76  6ED6               	movwf	214,c	;volatile
 10827   004B78                     
 10828                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 10829   004B78  88D6               	bsf	214,4,c	;volatile
 10830                           
 10831                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1011;
 10832   004B7A  50D6               	movf	214,w,c	;volatile
 10833   004B7C  0BF0               	andlw	-16
 10834   004B7E  090B               	iorlw	11
 10835   004B80  6ED6               	movwf	214,c	;volatile
 10836   004B82                     
 10837                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 10838   004B82  88D5               	bsf	213,4,c	;volatile
 10839                           
 10840                           ;timers.c: 15:     TMR0H=0;
 10841   004B84  0E00               	movlw	0
 10842   004B86  6ED4               	movwf	212,c	;volatile
 10843                           
 10844                           ;timers.c: 16:     TMR0L=0;
 10845   004B88  0E00               	movlw	0
 10846   004B8A  6ED3               	movwf	211,c	;volatile
 10847   004B8C                     
 10848                           ;timers.c: 17:     T0CON0bits.T0EN=1;
 10849   004B8C  8ED5               	bsf	213,7,c	;volatile
 10850   004B8E  0012               	return		;funcret
 10851   004B90                     __end_of_Timer0_init:
 10852                           	callstack 0
 10853                           
 10854 ;; *************** function _Interrupts_init *****************
 10855 ;; Defined at:
 10856 ;;		line 11 in file "interrupts.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;		None
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      void 
 10863 ;; Registers used:
 10864 ;;		None
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10874 ;;Total ram usage:        0 bytes
 10875 ;; Hardware stack levels used: 1
 10876 ;; Hardware stack levels required when called: 5
 10877 ;; This function calls:
 10878 ;;		Nothing
 10879 ;; This function is called by:
 10880 ;;		_main
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           	psect	text43
 10885   004C18                     __ptext43:
 10886                           	callstack 0
 10887   004C18                     _Interrupts_init:
 10888                           	callstack 25
 10889   004C18                     
 10890                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
 10891   004C18  8082               	bsf	130,0,c	;volatile
 10892                           
 10893                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
 10894   004C1A  010E               	movlb	14	; () banked
 10895   004C1C  919A               	bcf	154,0,b	;volatile
 10896                           
 10897                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
 10898   004C1E  8129               	bsf	41,0,b	;volatile
 10899                           
 10900                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
 10901   004C20  811F               	bsf	31,0,b	;volatile
 10902                           
 10903                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
 10904   004C22  90F2               	bcf	242,0,c	;volatile
 10905                           
 10906                           ;interrupts.c: 23:     PIE4bits.RC4IE=1;
 10907   004C24  872D               	bsf	45,3,b	;volatile
 10908                           
 10909                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
 10910   004C26  8CF2               	bsf	242,6,c	;volatile
 10911                           
 10912                           ;interrupts.c: 25:     INTCONbits.GIE=1;
 10913   004C28  8EF2               	bsf	242,7,c	;volatile
 10914   004C2A                     
 10915                           ; BSR set to: 14
 10916   004C2A  0012               	return		;funcret
 10917   004C2C                     __end_of_Interrupts_init:
 10918                           	callstack 0
 10919                           
 10920 ;; *************** function _Buggy_init *****************
 10921 ;; Defined at:
 10922 ;;		line 7 in file "buggysetup.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;		None
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;		None
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      void 
 10929 ;; Registers used:
 10930 ;;		None
 10931 ;; Tracked objects:
 10932 ;;		On entry : 0/0
 10933 ;;		On exit  : 0/0
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10940 ;;Total ram usage:        0 bytes
 10941 ;; Hardware stack levels used: 1
 10942 ;; Hardware stack levels required when called: 5
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		_main
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text44
 10951   004984                     __ptext44:
 10952                           	callstack 0
 10953   004984                     _Buggy_init:
 10954                           	callstack 25
 10955   004984                     
 10956                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
 10957   004984  9E7C               	bcf	124,7,c	;volatile
 10958                           
 10959                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
 10960   004986  9E84               	bcf	132,7,c	;volatile
 10961                           
 10962                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
 10963   004988  9680               	bcf	128,3,c	;volatile
 10964                           
 10965                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
 10966   00498A  9688               	bcf	136,3,c	;volatile
 10967                           
 10968                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
 10969   00498C  8486               	bsf	134,2,c	;volatile
 10970                           
 10971                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
 10972   00498E  010E               	movlb	14	; () banked
 10973   004990  95B4               	bcf	180,2,b	;volatile
 10974                           
 10975                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
 10976   004992  8686               	bsf	134,3,c	;volatile
 10977                           
 10978                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
 10979   004994  97B4               	bcf	180,3,b	;volatile
 10980                           
 10981                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
 10982   004996  9280               	bcf	128,1,c	;volatile
 10983                           
 10984                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
 10985   004998  9288               	bcf	136,1,c	;volatile
 10986                           
 10987                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
 10988   00499A  987C               	bcf	124,4,c	;volatile
 10989                           
 10990                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
 10991   00499C  9884               	bcf	132,4,c	;volatile
 10992                           
 10993                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
 10994   00499E  967C               	bcf	124,3,c	;volatile
 10995                           
 10996                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
 10997   0049A0  9684               	bcf	132,3,c	;volatile
 10998                           
 10999                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
 11000   0049A2  97A7               	bcf	167,3,b	;volatile
 11001                           
 11002                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
 11003   0049A4  9080               	bcf	128,0,c	;volatile
 11004                           
 11005                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
 11006   0049A6  9088               	bcf	136,0,c	;volatile
 11007                           
 11008                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
 11009   0049A8  907E               	bcf	126,0,c	;volatile
 11010                           
 11011                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
 11012   0049AA  9086               	bcf	134,0,c	;volatile
 11013                           
 11014                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
 11015   0049AC  907F               	bcf	127,0,c	;volatile
 11016                           
 11017                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
 11018   0049AE  9087               	bcf	135,0,c	;volatile
 11019                           
 11020                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
 11021   0049B0  9E7D               	bcf	125,7,c	;volatile
 11022                           
 11023                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
 11024   0049B2  9E85               	bcf	133,7,c	;volatile
 11025                           
 11026                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
 11027   0049B4  9679               	bcf	121,3,c	;volatile
 11028                           
 11029                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
 11030   0049B6  9681               	bcf	129,3,c	;volatile
 11031   0049B8                     
 11032                           ; BSR set to: 14
 11033   0049B8  0012               	return		;funcret
 11034   0049BA                     __end_of_Buggy_init:
 11035                           	callstack 0
 11036                           
 11037 ;; *************** function _HighISR *****************
 11038 ;; Defined at:
 11039 ;;		line 33 in file "interrupts.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;		None
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;		None
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11055 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11056 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11057 ;;Total ram usage:        3 bytes
 11058 ;; Hardware stack levels used: 1
 11059 ;; Hardware stack levels required when called: 4
 11060 ;; This function calls:
 11061 ;;		_getCharFromTxBuf
 11062 ;;		_isDataInTxBuf
 11063 ;;		_putCharToRxBuf
 11064 ;;		i2_color_clear_init_interrupts
 11065 ;; This function is called by:
 11066 ;;		Interrupt level 2
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           	psect	intcode
 11071   000008                     __pintcode:
 11072                           	callstack 0
 11073   000008                     _HighISR:
 11074                           	callstack 21
 11075                           
 11076                           ; BSR set to: 14
 11077                           ;incstack = 0
 11078   000008  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11079   00000A  CFD9 F00E          	movff	fsr2l,??_HighISR+1
 11080   00000E  CFDA F00F          	movff	fsr2h,??_HighISR+2
 11081   000012                     
 11082                           ;interrupts.c: 37:     if(PIR0bits.INT0IF){
 11083   000012  010E               	movlb	14	; () banked
 11084   000014  A133               	btfss	51,0,b	;volatile
 11085   000016  EF0F  F000         	goto	i2u351_41
 11086   00001A  EF11  F000         	goto	i2u351_40
 11087   00001E                     i2u351_41:
 11088   00001E  EF2A  F000         	goto	i2l4432
 11089   000022                     i2u351_40:
 11090   000022                     
 11091                           ; BSR set to: 14
 11092                           ;interrupts.c: 38:         brightnessChange = 1;
 11093   000022  0E01               	movlw	1
 11094   000024  0100               	movlb	0	; () banked
 11095   000026  6FF4               	movwf	_brightnessChange& (0+255),b
 11096   000028                     
 11097                           ; BSR set to: 0
 11098                           ;interrupts.c: 39:         color_clear_init_interrupts();
 11099   000028  EC9C  F022         	call	i2_color_clear_init_interrupts	;wreg free
 11100   00002C                     
 11101                           ;interrupts.c: 40:         PIR0bits.INT0IF = 0;
 11102   00002C  010E               	movlb	14	; () banked
 11103   00002E  9133               	bcf	51,0,b	;volatile
 11104   000030                     
 11105                           ; BSR set to: 14
 11106                           ;interrupts.c: 42:         LATHbits.LATH3 = !LATHbits.LATH3;
 11107   000030  A680               	btfss	128,3,c	;volatile
 11108   000032  EF1D  F000         	goto	i2u352_41
 11109   000036  EF21  F000         	goto	i2u352_40
 11110   00003A                     i2u352_41:
 11111   00003A  6A0D               	clrf	??_HighISR^0,c
 11112   00003C  2A0D               	incf	??_HighISR^0,f,c
 11113   00003E  EF22  F000         	goto	i2u353_48
 11114   000042                     i2u352_40:
 11115   000042  6A0D               	clrf	??_HighISR^0,c
 11116   000044                     i2u353_48:
 11117   000044  460D               	rlncf	??_HighISR^0,f,c
 11118   000046  460D               	rlncf	??_HighISR^0,f,c
 11119   000048  460D               	rlncf	??_HighISR^0,f,c
 11120   00004A  5080               	movf	128,w,c	;volatile
 11121   00004C  180D               	xorwf	??_HighISR^0,w,c
 11122   00004E  0BF7               	andlw	-9
 11123   000050  180D               	xorwf	??_HighISR^0,w,c
 11124   000052  6E80               	movwf	128,c	;volatile
 11125   000054                     i2l4432:
 11126                           
 11127                           ;interrupts.c: 47:     if(TMR0IF){
 11128   000054  010E               	movlb	14	; () banked
 11129   000056  AB33               	btfss	51,5,b	;volatile
 11130   000058  EF30  F000         	goto	i2u354_41
 11131   00005C  EF32  F000         	goto	i2u354_40
 11132   000060                     i2u354_41:
 11133   000060  EF35  F000         	goto	i2l4438
 11134   000064                     i2u354_40:
 11135   000064                     
 11136                           ; BSR set to: 14
 11137                           ;interrupts.c: 48:         lost = 1;
 11138   000064  0E01               	movlw	1
 11139   000066  6E4B               	movwf	_lost^0,c
 11140   000068                     
 11141                           ; BSR set to: 14
 11142                           ;interrupts.c: 49:         TMR0IF=0;
 11143   000068  9B33               	bcf	51,5,b	;volatile
 11144   00006A                     i2l4438:
 11145                           
 11146                           ; BSR set to: 14
 11147                           ;interrupts.c: 56:     if(PIR4bits.RC4IF){
 11148   00006A  A737               	btfss	55,3,b	;volatile
 11149   00006C  EF3A  F000         	goto	i2u355_41
 11150   000070  EF3C  F000         	goto	i2u355_40
 11151   000074                     i2u355_41:
 11152   000074  EF3F  F000         	goto	i2l4442
 11153   000078                     i2u355_40:
 11154   000078                     
 11155                           ; BSR set to: 14
 11156                           ;interrupts.c: 58:         putCharToRxBuf(RC4REG);
 11157   000078  51E3               	movf	227,w,b	;volatile
 11158   00007A  EC83  F025         	call	_putCharToRxBuf
 11159   00007E                     i2l4442:
 11160                           
 11161                           ;interrupts.c: 62:     if(PIR4bits.TX4IF){
 11162   00007E  010E               	movlb	14	; () banked
 11163   000080  A537               	btfss	55,2,b	;volatile
 11164   000082  EF45  F000         	goto	i2u356_41
 11165   000086  EF47  F000         	goto	i2u356_40
 11166   00008A                     i2u356_41:
 11167   00008A  EF57  F000         	goto	i2l376
 11168   00008E                     i2u356_40:
 11169   00008E                     
 11170                           ; BSR set to: 14
 11171                           ;interrupts.c: 64:         TX4REG = getCharFromTxBuf();
 11172   00008E  EC09  F025         	call	_getCharFromTxBuf	;wreg free
 11173   000092  010E               	movlb	14	; () banked
 11174   000094  6FE4               	movwf	228,b	;volatile
 11175   000096                     
 11176                           ; BSR set to: 14
 11177                           ;interrupts.c: 65:         if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
 11178   000096  EC00  F026         	call	_isDataInTxBuf	;wreg free
 11179   00009A  0900               	iorlw	0
 11180   00009C  A4D8               	btfss	status,2,c
 11181   00009E  EF53  F000         	goto	i2u357_41
 11182   0000A2  EF55  F000         	goto	i2u357_40
 11183   0000A6                     i2u357_41:
 11184   0000A6  EF57  F000         	goto	i2l376
 11185   0000AA                     i2u357_40:
 11186   0000AA  010E               	movlb	14	; () banked
 11187   0000AC  952D               	bcf	45,2,b	;volatile
 11188   0000AE                     i2l376:
 11189   0000AE  C00F  FFDA         	movff	??_HighISR+2,fsr2h
 11190   0000B2  C00E  FFD9         	movff	??_HighISR+1,fsr2l
 11191   0000B6  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11192   0000B8  0011               	retfie		f
 11193   0000BA                     __end_of_HighISR:
 11194                           	callstack 0
 11195                           
 11196 ;; *************** function i2_color_clear_init_interrupts *****************
 11197 ;; Defined at:
 11198 ;;		line 27 in file "color.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;		None
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  low_threshol    2   10[COMRAM] unsigned int 
 11203 ;;  high_thresho    2    8[COMRAM] unsigned int 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11214 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11216 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11217 ;;Total ram usage:        5 bytes
 11218 ;; Hardware stack levels used: 1
 11219 ;; Hardware stack levels required when called: 3
 11220 ;; This function calls:
 11221 ;;		i2_I2C_2_Master_Start
 11222 ;;		i2_I2C_2_Master_Stop
 11223 ;;		i2_I2C_2_Master_Write
 11224 ;;		i2___lwdiv
 11225 ;;		i2_color_writetoaddr
 11226 ;; This function is called by:
 11227 ;;		_HighISR
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           	psect	text46
 11232   004538                     __ptext46:
 11233                           	callstack 0
 11234   004538                     i2_color_clear_init_interrupts:
 11235                           	callstack 21
 11236   004538                     
 11237                           ;color.c: 29:     I2C_2_Master_Start();
 11238   004538  EC3B  F026         	call	i2_I2C_2_Master_Start	;wreg free
 11239                           
 11240                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
 11241   00453C  0E52               	movlw	82
 11242   00453E  EC1C  F026         	call	i2_I2C_2_Master_Write
 11243                           
 11244                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
 11245   004542  0EE6               	movlw	230
 11246   004544  EC1C  F026         	call	i2_I2C_2_Master_Write
 11247                           
 11248                           ;color.c: 32:     I2C_2_Master_Stop();
 11249   004548  EC36  F026         	call	i2_I2C_2_Master_Stop	;wreg free
 11250                           
 11251                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/3);
 11252   00454C  C0F9  F001         	movff	_ambient,i2___lwdiv@dividend
 11253   004550  C0FA  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 11254   004554  0E00               	movlw	0
 11255   004556  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 11256   004558  0E03               	movlw	3
 11257   00455A  6E03               	movwf	i2___lwdiv@divisor^0,c
 11258   00455C  ECC3  F023         	call	i2___lwdiv	;wreg free
 11259   004560  0100               	movlb	0	; () banked
 11260   004562  51F9               	movf	_ambient& (0+255),w,b
 11261   004564  2401               	addwf	?i2___lwdiv^0,w,c
 11262   004566  6E09               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
 11263   004568  51FA               	movf	(_ambient+1)& (0+255),w,b
 11264   00456A  2002               	addwfc	(?i2___lwdiv+1)^0,w,c
 11265   00456C  6E0A               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
 11266                           
 11267                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
 11268   00456E  C0F9  F001         	movff	_ambient,i2___lwdiv@dividend
 11269   004572  C0FA  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 11270   004576  0E00               	movlw	0
 11271   004578  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 11272   00457A  0E14               	movlw	20
 11273   00457C  6E03               	movwf	i2___lwdiv@divisor^0,c
 11274   00457E  ECC3  F023         	call	i2___lwdiv	;wreg free
 11275   004582  5001               	movf	?i2___lwdiv^0,w,c
 11276   004584  0100               	movlb	0	; () banked
 11277   004586  5DF9               	subwf	_ambient& (0+255),w,b
 11278   004588  6E0B               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
 11279   00458A  5002               	movf	(?i2___lwdiv+1)^0,w,c
 11280   00458C  59FA               	subwfb	(_ambient+1)& (0+255),w,b
 11281   00458E  6E0C               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
 11282                           
 11283                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
 11284   004590  0E13               	movlw	19
 11285   004592  6E03               	movwf	i2color_writetoaddr@value^0,c
 11286   004594  0E00               	movlw	0
 11287   004596  ECC8  F025         	call	i2_color_writetoaddr
 11288   00459A                     
 11289                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
 11290   00459A  0E3F               	movlw	63
 11291   00459C  6E08               	movwf	??i2_color_clear_init_interrupts^0,c
 11292   00459E  0E55               	movlw	85
 11293   0045A0                     i2u482_47:
 11294   0045A0  2EE8               	decfsz	wreg,f,c
 11295   0045A2  D7FE               	bra	i2u482_47
 11296   0045A4  2E08               	decfsz	??i2_color_clear_init_interrupts^0,f,c
 11297   0045A6  D7FC               	bra	i2u482_47
 11298   0045A8  0000               	nop	
 11299   0045AA                     
 11300                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
 11301   0045AA  500A               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
 11302   0045AC  6E03               	movwf	i2color_writetoaddr@value^0,c
 11303   0045AE  0E07               	movlw	7
 11304   0045B0  ECC8  F025         	call	i2_color_writetoaddr
 11305   0045B4                     
 11306                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
 11307   0045B4  C009  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
 11308   0045B8  0E06               	movlw	6
 11309   0045BA  ECC8  F025         	call	i2_color_writetoaddr
 11310   0045BE                     
 11311                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
 11312   0045BE  500C               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
 11313   0045C0  6E03               	movwf	i2color_writetoaddr@value^0,c
 11314   0045C2  0E05               	movlw	5
 11315   0045C4  ECC8  F025         	call	i2_color_writetoaddr
 11316   0045C8                     
 11317                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
 11318   0045C8  C00B  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
 11319   0045CC  0E04               	movlw	4
 11320   0045CE  ECC8  F025         	call	i2_color_writetoaddr
 11321   0045D2                     
 11322                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
 11323   0045D2  0E03               	movlw	3
 11324   0045D4  6E03               	movwf	i2color_writetoaddr@value^0,c
 11325   0045D6  0E0C               	movlw	12
 11326   0045D8  ECC8  F025         	call	i2_color_writetoaddr
 11327   0045DC  0012               	return		;funcret
 11328   0045DE                     __end_ofi2_color_clear_init_interrupts:
 11329                           	callstack 0
 11330                           
 11331 ;; *************** function i2_color_writetoaddr *****************
 11332 ;; Defined at:
 11333 ;;		line 53 in file "color.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;  address         1    wreg     unsigned char 
 11336 ;;  value           1    2[COMRAM] unsigned char 
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;  address         1    3[COMRAM] unsigned char 
 11339 ;; Return value:  Size  Location     Type
 11340 ;;                  1    wreg      void 
 11341 ;; Registers used:
 11342 ;;		wreg, status,2, status,0, cstack
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11348 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11352 ;;Total ram usage:        2 bytes
 11353 ;; Hardware stack levels used: 1
 11354 ;; Hardware stack levels required when called: 2
 11355 ;; This function calls:
 11356 ;;		i2_I2C_2_Master_Start
 11357 ;;		i2_I2C_2_Master_Stop
 11358 ;;		i2_I2C_2_Master_Write
 11359 ;; This function is called by:
 11360 ;;		i2_color_clear_init_interrupts
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           	psect	text47
 11365   004B90                     __ptext47:
 11366                           	callstack 0
 11367   004B90                     i2_color_writetoaddr:
 11368                           	callstack 21
 11369                           
 11370                           ;incstack = 0
 11371                           ;i2color_writetoaddr@address stored from wreg
 11372   004B90  6E04               	movwf	i2color_writetoaddr@address^0,c
 11373   004B92                     
 11374                           ;color.c: 54:     I2C_2_Master_Start();
 11375   004B92  EC3B  F026         	call	i2_I2C_2_Master_Start	;wreg free
 11376                           
 11377                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
 11378   004B96  0E52               	movlw	82
 11379   004B98  EC1C  F026         	call	i2_I2C_2_Master_Write
 11380                           
 11381                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
 11382   004B9C  5004               	movf	i2color_writetoaddr@address^0,w,c
 11383   004B9E  0980               	iorlw	128
 11384   004BA0  EC1C  F026         	call	i2_I2C_2_Master_Write
 11385                           
 11386                           ;color.c: 57:     I2C_2_Master_Write(value);
 11387   004BA4  5003               	movf	i2color_writetoaddr@value^0,w,c
 11388   004BA6  EC1C  F026         	call	i2_I2C_2_Master_Write
 11389                           
 11390                           ;color.c: 58:     I2C_2_Master_Stop();
 11391   004BAA  EC36  F026         	call	i2_I2C_2_Master_Stop	;wreg free
 11392   004BAE  0012               	return		;funcret
 11393   004BB0                     __end_ofi2_color_writetoaddr:
 11394                           	callstack 0
 11395                           
 11396 ;; *************** function i2_I2C_2_Master_Write *****************
 11397 ;; Defined at:
 11398 ;;		line 45 in file "i2c.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;  data_byte       1    wreg     unsigned char 
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;  data_byte       1    1[COMRAM] unsigned char 
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      void 
 11405 ;; Registers used:
 11406 ;;		wreg, status,2, status,0, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11416 ;;Total ram usage:        1 bytes
 11417 ;; Hardware stack levels used: 1
 11418 ;; Hardware stack levels required when called: 1
 11419 ;; This function calls:
 11420 ;;		i2_I2C_2_Master_Idle
 11421 ;; This function is called by:
 11422 ;;		i2_color_clear_init_interrupts
 11423 ;;		i2_color_writetoaddr
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	text48
 11428   004C38                     __ptext48:
 11429                           	callstack 0
 11430   004C38                     i2_I2C_2_Master_Write:
 11431                           	callstack 21
 11432                           
 11433                           ;incstack = 0
 11434                           ;i2I2C_2_Master_Write@data_byte stored from wreg
 11435   004C38  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
 11436   004C3A                     
 11437                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11438   004C3A  EC5C  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11439   004C3E                     
 11440                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11441   004C3E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
 11442   004C42  0012               	return		;funcret
 11443   004C44                     __end_ofi2_I2C_2_Master_Write:
 11444                           	callstack 0
 11445                           
 11446 ;; *************** function i2_I2C_2_Master_Stop *****************
 11447 ;; Defined at:
 11448 ;;		line 39 in file "i2c.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;		None
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;		None
 11453 ;; Return value:  Size  Location     Type
 11454 ;;                  1    wreg      void 
 11455 ;; Registers used:
 11456 ;;		wreg, status,2, status,0, cstack
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11466 ;;Total ram usage:        0 bytes
 11467 ;; Hardware stack levels used: 1
 11468 ;; Hardware stack levels required when called: 1
 11469 ;; This function calls:
 11470 ;;		i2_I2C_2_Master_Idle
 11471 ;; This function is called by:
 11472 ;;		i2_color_clear_init_interrupts
 11473 ;;		i2_color_writetoaddr
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text49
 11478   004C6C                     __ptext49:
 11479                           	callstack 0
 11480   004C6C                     i2_I2C_2_Master_Stop:
 11481                           	callstack 21
 11482   004C6C                     
 11483                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11484   004C6C  EC5C  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11485   004C70                     
 11486                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11487   004C70  010E               	movlb	14	; () banked
 11488   004C72  85DA               	bsf	218,2,b	;volatile
 11489   004C74                     
 11490                           ; BSR set to: 14
 11491   004C74  0012               	return		;funcret
 11492   004C76                     __end_ofi2_I2C_2_Master_Stop:
 11493                           	callstack 0
 11494                           
 11495 ;; *************** function i2_I2C_2_Master_Start *****************
 11496 ;; Defined at:
 11497 ;;		line 27 in file "i2c.c"
 11498 ;; Parameters:    Size  Location     Type
 11499 ;;		None
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;		None
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  1    wreg      void 
 11504 ;; Registers used:
 11505 ;;		wreg, status,2, status,0, cstack
 11506 ;; Tracked objects:
 11507 ;;		On entry : 0/0
 11508 ;;		On exit  : 0/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11515 ;;Total ram usage:        0 bytes
 11516 ;; Hardware stack levels used: 1
 11517 ;; Hardware stack levels required when called: 1
 11518 ;; This function calls:
 11519 ;;		i2_I2C_2_Master_Idle
 11520 ;; This function is called by:
 11521 ;;		i2_color_clear_init_interrupts
 11522 ;;		i2_color_writetoaddr
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text50
 11527   004C76                     __ptext50:
 11528                           	callstack 0
 11529   004C76                     i2_I2C_2_Master_Start:
 11530                           	callstack 21
 11531   004C76                     
 11532                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11533   004C76  EC5C  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11534   004C7A                     
 11535                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11536   004C7A  010E               	movlb	14	; () banked
 11537   004C7C  81DA               	bsf	218,0,b	;volatile
 11538   004C7E                     
 11539                           ; BSR set to: 14
 11540   004C7E  0012               	return		;funcret
 11541   004C80                     __end_ofi2_I2C_2_Master_Start:
 11542                           	callstack 0
 11543                           
 11544 ;; *************** function i2_I2C_2_Master_Idle *****************
 11545 ;; Defined at:
 11546 ;;		line 22 in file "i2c.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;		None
 11549 ;; Auto vars:     Size  Location     Type
 11550 ;;		None
 11551 ;; Return value:  Size  Location     Type
 11552 ;;                  1    wreg      void 
 11553 ;; Registers used:
 11554 ;;		wreg, status,2, status,0
 11555 ;; Tracked objects:
 11556 ;;		On entry : 0/0
 11557 ;;		On exit  : 0/0
 11558 ;;		Unchanged: 0/0
 11559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11564 ;;Total ram usage:        1 bytes
 11565 ;; Hardware stack levels used: 1
 11566 ;; This function calls:
 11567 ;;		Nothing
 11568 ;; This function is called by:
 11569 ;;		i2_I2C_2_Master_Start
 11570 ;;		i2_I2C_2_Master_Stop
 11571 ;;		i2_I2C_2_Master_Write
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           	psect	text51
 11576   004AB8                     __ptext51:
 11577                           	callstack 0
 11578   004AB8                     i2_I2C_2_Master_Idle:
 11579                           	callstack 21
 11580   004AB8                     i2l266:
 11581   004AB8  010E               	movlb	14	; () banked
 11582   004ABA  B5D8               	btfsc	216,2,b	;volatile
 11583   004ABC  EF62  F025         	goto	i2u193_41
 11584   004AC0  EF64  F025         	goto	i2u193_40
 11585   004AC4                     i2u193_41:
 11586   004AC4  EF5C  F025         	goto	i2l266
 11587   004AC8                     i2u193_40:
 11588   004AC8                     
 11589                           ; BSR set to: 14
 11590   004AC8  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
 11591   004ACC  0E1F               	movlw	31
 11592   004ACE  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
 11593   004AD0  A4D8               	btfss	status,2,c
 11594   004AD2  EF6D  F025         	goto	i2u194_41
 11595   004AD6  EF6F  F025         	goto	i2u194_40
 11596   004ADA                     i2u194_41:
 11597   004ADA  EF5C  F025         	goto	i2l266
 11598   004ADE                     i2u194_40:
 11599   004ADE                     
 11600                           ; BSR set to: 14
 11601   004ADE  0012               	return		;funcret
 11602   004AE0                     __end_ofi2_I2C_2_Master_Idle:
 11603                           	callstack 0
 11604                           
 11605 ;; *************** function i2___lwdiv *****************
 11606 ;; Defined at:
 11607 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 11608 ;; Parameters:    Size  Location     Type
 11609 ;;  dividend        2    0[COMRAM] unsigned int 
 11610 ;;  divisor         2    2[COMRAM] unsigned int 
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;  quotient        2    4[COMRAM] unsigned int 
 11613 ;;  counter         1    6[COMRAM] unsigned char 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;                  2    0[COMRAM] unsigned int 
 11616 ;; Registers used:
 11617 ;;		wreg, status,2, status,0
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11624 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11626 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11627 ;;Total ram usage:        7 bytes
 11628 ;; Hardware stack levels used: 1
 11629 ;; This function calls:
 11630 ;;		Nothing
 11631 ;; This function is called by:
 11632 ;;		i2_color_clear_init_interrupts
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           	psect	text52
 11637   004786                     __ptext52:
 11638                           	callstack 0
 11639   004786                     i2___lwdiv:
 11640                           	callstack 23
 11641   004786  0E00               	movlw	0
 11642   004788  6E06               	movwf	(i2___lwdiv@quotient+1)^0,c
 11643   00478A  0E00               	movlw	0
 11644   00478C  6E05               	movwf	i2___lwdiv@quotient^0,c
 11645   00478E  5003               	movf	i2___lwdiv@divisor^0,w,c
 11646   004790  1004               	iorwf	(i2___lwdiv@divisor+1)^0,w,c
 11647   004792  B4D8               	btfsc	status,2,c
 11648   004794  EFCE  F023         	goto	i2u259_41
 11649   004798  EFD0  F023         	goto	i2u259_40
 11650   00479C                     i2u259_41:
 11651   00479C  EFF8  F023         	goto	i2l1270
 11652   0047A0                     i2u259_40:
 11653   0047A0  0E01               	movlw	1
 11654   0047A2  6E07               	movwf	i2___lwdiv@counter^0,c
 11655   0047A4  EFD8  F023         	goto	i2l3706
 11656   0047A8                     i2l3704:
 11657   0047A8  90D8               	bcf	status,0,c
 11658   0047AA  3603               	rlcf	i2___lwdiv@divisor^0,f,c
 11659   0047AC  3604               	rlcf	(i2___lwdiv@divisor+1)^0,f,c
 11660   0047AE  2A07               	incf	i2___lwdiv@counter^0,f,c
 11661   0047B0                     i2l3706:
 11662   0047B0  AE04               	btfss	(i2___lwdiv@divisor+1)^0,7,c
 11663   0047B2  EFDD  F023         	goto	i2u260_41
 11664   0047B6  EFDF  F023         	goto	i2u260_40
 11665   0047BA                     i2u260_41:
 11666   0047BA  EFD4  F023         	goto	i2l3704
 11667   0047BE                     i2u260_40:
 11668   0047BE                     i2l3708:
 11669   0047BE  90D8               	bcf	status,0,c
 11670   0047C0  3605               	rlcf	i2___lwdiv@quotient^0,f,c
 11671   0047C2  3606               	rlcf	(i2___lwdiv@quotient+1)^0,f,c
 11672   0047C4  5003               	movf	i2___lwdiv@divisor^0,w,c
 11673   0047C6  5C01               	subwf	i2___lwdiv@dividend^0,w,c
 11674   0047C8  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11675   0047CA  5802               	subwfb	(i2___lwdiv@dividend+1)^0,w,c
 11676   0047CC  A0D8               	btfss	status,0,c
 11677   0047CE  EFEB  F023         	goto	i2u261_41
 11678   0047D2  EFED  F023         	goto	i2u261_40
 11679   0047D6                     i2u261_41:
 11680   0047D6  EFF2  F023         	goto	i2l3716
 11681   0047DA                     i2u261_40:
 11682   0047DA  5003               	movf	i2___lwdiv@divisor^0,w,c
 11683   0047DC  5E01               	subwf	i2___lwdiv@dividend^0,f,c
 11684   0047DE  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11685   0047E0  5A02               	subwfb	(i2___lwdiv@dividend+1)^0,f,c
 11686   0047E2  8005               	bsf	i2___lwdiv@quotient^0,0,c
 11687   0047E4                     i2l3716:
 11688   0047E4  90D8               	bcf	status,0,c
 11689   0047E6  3204               	rrcf	(i2___lwdiv@divisor+1)^0,f,c
 11690   0047E8  3203               	rrcf	i2___lwdiv@divisor^0,f,c
 11691   0047EA  2E07               	decfsz	i2___lwdiv@counter^0,f,c
 11692   0047EC  EFDF  F023         	goto	i2l3708
 11693   0047F0                     i2l1270:
 11694   0047F0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11695   0047F4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11696   0047F8  0012               	return		;funcret
 11697   0047FA                     __end_ofi2___lwdiv:
 11698                           	callstack 0
 11699                           
 11700 ;; *************** function _putCharToRxBuf *****************
 11701 ;; Defined at:
 11702 ;;		line 33 in file "serial.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;  byte            1    wreg     unsigned char 
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;  byte            1    0[COMRAM] unsigned char 
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1    wreg      void 
 11709 ;; Registers used:
 11710 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11720 ;;Total ram usage:        1 bytes
 11721 ;; Hardware stack levels used: 1
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_HighISR
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           	psect	text53
 11730   004B06                     __ptext53:
 11731                           	callstack 0
 11732   004B06                     _putCharToRxBuf:
 11733                           	callstack 24
 11734                           
 11735                           ;incstack = 0
 11736                           ;putCharToRxBuf@byte stored from wreg
 11737   004B06  6E01               	movwf	putCharToRxBuf@byte^0,c
 11738   004B08                     
 11739                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11740   004B08  0E13               	movlw	19
 11741   004B0A  644F               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11742   004B0C  EF8A  F025         	goto	i2u326_41
 11743   004B10  EF8C  F025         	goto	i2u326_40
 11744   004B14                     i2u326_41:
 11745   004B14  EF8E  F025         	goto	i2l4234
 11746   004B18                     i2u326_40:
 11747   004B18  0E00               	movlw	0
 11748   004B1A  6E4F               	movwf	_RxBufWriteCnt^0,c	;volatile
 11749   004B1C                     i2l4234:
 11750                           
 11751                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11752   004B1C  504F               	movf	_RxBufWriteCnt^0,w,c
 11753   004B1E  0FE0               	addlw	low _EUSART4RXbuf
 11754   004B20  6ED9               	movwf	fsr2l,c
 11755   004B22  6ADA               	clrf	fsr2h,c
 11756   004B24  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11757   004B28  2A4F               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11758   004B2A  0012               	return		;funcret
 11759   004B2C                     __end_of_putCharToRxBuf:
 11760                           	callstack 0
 11761                           
 11762 ;; *************** function _isDataInTxBuf *****************
 11763 ;; Defined at:
 11764 ;;		line 61 in file "serial.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;		None
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      unsigned char 
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, status,0
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11782 ;;Total ram usage:        0 bytes
 11783 ;; Hardware stack levels used: 1
 11784 ;; This function calls:
 11785 ;;		Nothing
 11786 ;; This function is called by:
 11787 ;;		_HighISR
 11788 ;;		_sendTxBuf
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           	psect	text54
 11793   004C00                     __ptext54:
 11794                           	callstack 0
 11795   004C00                     _isDataInTxBuf:
 11796                           	callstack 24
 11797   004C00                     
 11798                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
 11799   004C00  504C               	movf	_TxBufReadCnt^0,w,c	;volatile
 11800   004C02  184D               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11801   004C04  A4D8               	btfss	status,2,c
 11802   004C06  EF07  F026         	goto	i2u328_41
 11803   004C0A  EF0A  F026         	goto	i2u328_40
 11804   004C0E                     i2u328_41:
 11805   004C0E  0E01               	movlw	1
 11806   004C10  EF0B  F026         	goto	i2u329_40
 11807   004C14                     i2u328_40:
 11808   004C14  0E00               	movlw	0
 11809   004C16                     i2u329_40:
 11810   004C16  0012               	return		;funcret
 11811   004C18                     __end_of_isDataInTxBuf:
 11812                           	callstack 0
 11813                           
 11814 ;; *************** function _getCharFromTxBuf *****************
 11815 ;; Defined at:
 11816 ;;		line 47 in file "serial.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;		None
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  1    wreg      unsigned char 
 11823 ;; Registers used:
 11824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11834 ;;Total ram usage:        2 bytes
 11835 ;; Hardware stack levels used: 1
 11836 ;; This function calls:
 11837 ;;		Nothing
 11838 ;; This function is called by:
 11839 ;;		_HighISR
 11840 ;; This function uses a non-reentrant model
 11841 ;;
 11842                           
 11843                           	psect	text55
 11844   004A12                     __ptext55:
 11845                           	callstack 0
 11846   004A12                     _getCharFromTxBuf:
 11847                           	callstack 24
 11848   004A12                     
 11849                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11850   004A12  0E3B               	movlw	59
 11851   004A14  644C               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11852   004A16  EF0F  F025         	goto	i2u327_41
 11853   004A1A  EF11  F025         	goto	i2u327_40
 11854   004A1E                     i2u327_41:
 11855   004A1E  EF13  F025         	goto	i2l4242
 11856   004A22                     i2u327_40:
 11857   004A22  0E00               	movlw	0
 11858   004A24  6E4C               	movwf	_TxBufReadCnt^0,c	;volatile
 11859   004A26                     i2l4242:
 11860                           
 11861                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
 11862   004A26  2A4C               	incf	_TxBufReadCnt^0,f,c	;volatile
 11863   004A28  044C               	decf	_TxBufReadCnt^0,w,c	;volatile
 11864   004A2A  6E01               	movwf	??_getCharFromTxBuf^0,c
 11865   004A2C  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 11866   004A2E  0E52               	movlw	low _EUSART4TXbuf
 11867   004A30  2401               	addwf	??_getCharFromTxBuf^0,w,c
 11868   004A32  6ED9               	movwf	fsr2l,c
 11869   004A34  0E02               	movlw	high _EUSART4TXbuf
 11870   004A36  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11871   004A38  6EDA               	movwf	fsr2h,c
 11872   004A3A  50DF               	movf	indf2,w,c
 11873   004A3C  0012               	return		;funcret
 11874   004A3E                     __end_of_getCharFromTxBuf:
 11875                           	callstack 0
 11876                           
 11877                           	psect	smallconst
 11878   000E00                     __psmallconst:
 11879                           	callstack 0
 11880   000E00  00                 	db	0
 11881   000E01  00                 	db	0	; dummy byte at the end
 11882   000000                     
 11883                           	psect	rparam
 11884   000000                     
 11885                           	psect	temp
 11886   000050                     btemp:
 11887                           	callstack 0
 11888   000050                     	ds	1
 11889   000000                     int$flags	set	btemp
 11890   000000                     wtemp8	set	btemp+1
 11891   000000                     ttemp5	set	btemp+1
 11892   000000                     ttemp6	set	btemp+4
 11893   000000                     ttemp7	set	btemp+8
 11894                           
 11895                           	psect	config
 11896                           
 11897                           ;Config register CONFIG1L @ 0x300000
 11898                           ;	External Oscillator mode Selection bits
 11899                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11900                           ;	Power-up default value for COSC bits
 11901                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11902   300000                     	org	3145728
 11903   300000  AA                 	db	170
 11904                           
 11905                           ;Config register CONFIG1H @ 0x300001
 11906                           ;	unspecified, using default values
 11907                           ;	Clock Out Enable bit
 11908                           ;	CLKOUTEN = 0x1, unprogrammed default
 11909                           ;	Clock Switch Enable bit
 11910                           ;	CSWEN = 0x1, unprogrammed default
 11911                           ;	Fail-Safe Clock Monitor Enable bit
 11912                           ;	FCMEN = 0x1, unprogrammed default
 11913   300001                     	org	3145729
 11914   300001  FF                 	db	255
 11915                           
 11916                           ;Config register CONFIG3L @ 0x300004
 11917                           ;	WDT Period Select bits
 11918                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11919                           ;	WDT operating mode
 11920                           ;	WDTE = OFF, WDT Disabled
 11921   300004                     	org	3145732
 11922   300004  9F                 	db	159
 11923                           
 11924                           ;Config register CONFIG3H @ 0x300005
 11925                           ;	unspecified, using default values
 11926                           ;	WDT Window Select bits
 11927                           ;	WDTCWS = 0x7, unprogrammed default
 11928                           ;	WDT input clock selector
 11929                           ;	WDTCCS = 0x7, unprogrammed default
 11930   300005                     	org	3145733
 11931   300005  FF                 	db	255
 11932                           tosu	equ	0xFFF
 11933                           tosh	equ	0xFFE
 11934                           tosl	equ	0xFFD
 11935                           stkptr	equ	0xFFC
 11936                           pclatu	equ	0xFFB
 11937                           pclath	equ	0xFFA
 11938                           pcl	equ	0xFF9
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           indf0	equ	0xFEF
 11946                           postinc0	equ	0xFEE
 11947                           postdec0	equ	0xFED
 11948                           preinc0	equ	0xFEC
 11949                           plusw0	equ	0xFEB
 11950                           fsr0h	equ	0xFEA
 11951                           fsr0l	equ	0xFE9
 11952                           wreg	equ	0xFE8
 11953                           indf1	equ	0xFE7
 11954                           postinc1	equ	0xFE6
 11955                           postdec1	equ	0xFE5
 11956                           preinc1	equ	0xFE4
 11957                           plusw1	equ	0xFE3
 11958                           fsr1h	equ	0xFE2
 11959                           fsr1l	equ	0xFE1
 11960                           bsr	equ	0xFE0
 11961                           indf2	equ	0xFDF
 11962                           postinc2	equ	0xFDE
 11963                           postdec2	equ	0xFDD
 11964                           preinc2	equ	0xFDC
 11965                           plusw2	equ	0xFDB
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         248
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      79
    BANK0           160     88     155
    BANK1           256    215     255
    BANK2           256      0     142
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    calibration@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    calibration@turnDuration	PTR unsigned char  size(2) Largest target is 1
		 -> main@turnDuration(BANK1[1]), 

    color_calibration@blue	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@blue(BANK1[6]), 

    color_calibration@green	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@green(BANK1[6]), 

    color_calibration@HSV	PTR struct HSV_val size(2) Largest target is 6
		 -> main@HSV(BANK1[6]), 

    color_calibration@lightblue	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@lightblue(BANK1[6]), 

    color_calibration@orange	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@orange(BANK1[6]), 

    color_calibration@pink	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@pink(BANK1[6]), 

    color_calibration@red	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@red(BANK1[6]), 

    color_calibration@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    color_calibration@white	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@white(BANK1[6]), 

    color_calibration@yellow	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@yellow(BANK1[6]), 

    color_read@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    move@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    move@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    returnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    returnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseShort@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseShort@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    rgb_2_hsv@HSV	PTR struct HSV_val size(2) Largest target is 6
		 -> main@HSV(BANK1[6]), 

    S33DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S33DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), main@motorR(BANK1[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    wallAdjust@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    wallAdjust@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_color_detect
    _wallAdjust->_setMotorPWM
    _move->_returnHome
    _reverseShort->_setMotorPWM
    _returnHome->_reverseOneSquare
    _returnHome->_turnLeft
    _returnHome->_turnRight
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _color_detect->_max
    _color_detect->_min
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->___lwdiv
    _color_writetoaddr->_I2C_2_Master_Write
    _color_calibration->_rgb_2_hsv
    _rgb_2_hsv->___aldiv
    ___lldiv->___lmul
    ___aldiv->___lmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2___lwdiv
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_color_calibration
    _color_calibration->_rgb_2_hsv

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               271   271      0  204087
                                             42 BANK0     46    46      0
                                              0 BANK1    215   215      0
                         _Buggy_init
                    _Interrupts_init
                        _Timer0_init
                       _batteryLevel
                        _calibration
                  _color_calibration
        _color_clear_init_interrupts
                   _color_click_init
                       _color_detect
                         _color_read
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                         _resetTimer
                          _rgb_2_hsv
                               _stop
                         _wallAdjust
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _wallAdjust                                          15     9      6    5147
                                             34 COMRAM    15     9      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _move                                                18     2     16  119946
                                             68 COMRAM     2     2      0
                                              0 BANK0     16     0     16
                     _fullSpeedAhead
                         _returnHome
                   _reverseOneSquare
                       _reverseShort
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseShort                                        14     8      6    6930
                                             34 COMRAM    14     8      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          20     5     15   59004
                                             48 COMRAM    20     5     15
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _stop                                                12     7      5    5041
                                             34 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    14     7      7    6473
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _get16bitTMR0val                                     10     8      2      69
                                             15 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                      13     7      6    7461
                                             34 COMRAM    13     7      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_detect                                        68    14     54    3036
                                             19 COMRAM    55     1     54
                                              0 BANK0     13    13      0
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    2274
                                             33 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0    1524
                                             28 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                            ___lwdiv
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             17 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_calibration                                   22     2     20   10744
                                             63 COMRAM     2     2      0
                                             22 BANK0     20     0     20
                         _color_read
                          _rgb_2_hsv
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rgb_2_hsv                                           44    34     10    7135
                                             41 COMRAM    22    12     10
                                              0 BANK0     22    22      0
                            ___aldiv
                            ___lldiv
                             ___lmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  4     0      4     696
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  4     0      4     696
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1586
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     922
                                             27 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             27 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           9     7      2    1243
                                             19 COMRAM     9     7      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             16 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             16 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibration                                         10     2      8   36246
                                             48 COMRAM    10     2      8
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     7      7   13649
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     7      7   21249
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3501
                                             28 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             23 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              3     3      0     622
                                             12 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        5     5      0     600
                                              7 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                          i2___lwdiv
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _Timer0_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _color_calibration
     _color_read
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _rgb_2_hsv
       ___aldiv
         ___lmul (ARG)
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _max
       _min
     _white_Light
   _color_clear_init_interrupts
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
     ___lwdiv
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
     _color_writetoaddr
   _color_detect
     _max
     _min
   _color_read
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _returnHome
       _fullSpeedAhead
       _get16bitTMR0val
       _resetTimer
       _reverseOneSquare
         _setMotorPWM
       _stop
         _setMotorPWM
       _turnLeft
       _turnRight
     _reverseOneSquare
     _reverseShort
       _setMotorPWM
     _turnLeft
     _turnRight
   _resetTimer
   _rgb_2_hsv
   _stop
   _wallAdjust
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2___lwdiv
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      8E       9       55.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D7      FF       7       99.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      9B       5       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      4F       1       84.0%
BITBIGSFRllllhh     37      0       0      46        0.0%
BITBIGSFRllhlll     31      0       0      44        0.0%
BITBIGSFRllllhl     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRllllhl     20      0       0      49        0.0%
BITBIGSFRhlhh       1B      0       0      33        0.0%
BITBIGSFRllhh       17      0       0      38        0.0%
BITBIGSFRllhlll     14      0       0      41        0.0%
BITBIGSFRhlhl       13      0       0      34        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRllllhl     11      0       0      53        0.0%
BITBIGSFRhllh        E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      51        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRlllllh      9      0       0      62        0.0%
BITBIGSFRllllhh      8      0       0      47        0.0%
BITBIGSFRllhlll      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllhl      6      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      60        0.0%
BITBIGSFRllhlhh      5      0       0      39        0.0%
BITBIGSFRllhlll      3      0       0      42        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRllllhl      3      0       0      55        0.0%
BITBIGSFRllllhl      3      0       0      61        0.0%
BITBIGSFRlllh        2      0       0      45        0.0%
BITBIGSFRlh          2      0       0      37        0.0%
BITBIGSFRllllhl      1      0       0      54        0.0%
BITBIGSFRlllllh      1      0       0      63        0.0%
BITBIGSFRllllhl      1      0       0      48        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRhlll        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     277      66        0.0%
DATA                 0      0     277       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 17:44:29 2024

                                _white_Light 4B2C                                           l91 2850  
                                         l93 285E                                 ___awdiv@sign 0015  
                        ___wmul@multiplicand 0012                           i2___lwdiv@dividend 0001  
              wallAdjust@wallReverseDuration 002D                             main@turnDuration 01B4  
                          ??_Interrupts_init 0010                                          l104 2BD6  
                                        l201 1F22                                          l210 2144  
                                        l202 1FCA                                          l211 21EC  
                                        l204 1FD8                                          l213 21FA  
                                        l205 2080                                          l222 49DC  
                                        l214 22A2                                          l223 49E4  
                                        l231 26E8                                          l207 208E  
                                        l151 4B6E                                          l208 2136  
                                        l217 4A08                                          l145 4982  
                                        l218 4A10                                          l154 4B48  
                                        l315 49B8                                          l236 277E  
                                        l156 4B4E                                          l148 4536  
                                        l164 304E                                          l181 334C  
                                        l190 1CF2                                          l159 39C6  
                                        l263 4A66                                          l407 4BCC  
                                        l272 4C60                                          l192 1D00  
                                        l281 4C36                                          l193 1DA8  
                                        l266 4A90                                          l275 4C6A  
                                        l195 1DB6                                          l187 334E  
                                        l603 1CE6                                          l460 4BFE  
                                        l284 494A                                          l196 1E5E  
                                        l269 4AB6                                          l701 2C7A  
                                        l366 4C2A                                          l454 4BE6  
                                        l278 4C56                                          l198 1E6C  
                                        l710 2D8E                                          l471 48F0  
                                        l199 1F14                                          l472 48F2  
                                        l552 4710                                          l457 4BEA  
                                        l473 4906                                          l641 3E24  
                                        l633 42A4                                          l721 2EE0  
                                        l705 2CE6                                          l650 3F38  
                                        l459 4BF8                                          l475 4908  
                                        l715 2E50                                          l707 2D0A  
                                        l636 42E6                                          l732 3682  
                                        l724 2F64                                          l653 3F66  
                                        l645 3E90                                          l813 4680  
                                        l741 3796                                          l670 3D8C  
                                        l662 3CB6                                          l806 4670  
                                        l559 40D2                                          l647 3EB4  
                                        l727 2FA6                                          l719 2EBC  
                                        l664 3CDA                                          l752 3454  
                                        l744 37D8                                          l736 36EE  
                                        l753 348A                                          l593 1C6C  
                                        l770 4B8E                                          l658 3C4A  
                                        l690 3AEC                                          l738 3712  
                                        l578 162A                                          l667 3D5E  
                                        l675 4380                                          l587 1C6C  
                                        l756 34D8                                          l748 3438  
                                        l684 3A5C                                          l757 35C8  
                                        l773 4C4C                                          l693 3B70  
                                        l790 4852                                          l759 35E8  
                                        l791 4862                                          l679 43CC  
                                        l776 4A8E                                          l696 3BB2  
                                        l688 3AC8                                          l858 41DE  
                                        l779 4B04                                          _max 49E6  
                                        _min 49BA                              color_detect@HSV 0014  
                              ?_color_detect 0014                                          prod 0FF3  
                        i2_color_writetoaddr 4B90                                          wreg 0FE8  
                            color_detect@red 001A    color_clear_init_interrupts@high_threshold 001E  
i2color_clear_init_interrupts@high_threshold 0009                                         l1010 4490  
                                       l3020 4A90                                         l3100 43A4  
                                       l1270 477C                                         l3030 4712  
                                       l3022 4AA0                                         l3102 43A8  
                                       l3110 4A86                                         l3040 474A  
                                       l3032 471A                                         l3024 4AE0  
                                       l3200 3CF2                                         l3104 4C44  
                                       l3120 423A                                         l4000 2DE4  
                                       l3050 4776                                         l3042 4750  
                                       l3034 472C                                         l3026 4AFC  
                                       l3210 3D5A                                         l3202 3D26  
                                       l3106 4A68                                         l3130 42A0  
                                       l3122 426E                                         l3114 41E0  
                                       l4010 2E4C                                         l4002 2E18  
                                       l3044 4766                                         l3036 4734  
                                       l3220 3DB8                                         l3212 3D82  
                                       l3204 3D32                                         l3140 4C62  
                                       l3052 4C58                                         l3060 4C4E  
                                       l4100 32FE                                         l3108 4A74  
                                       l3300 3B5C                                         l3132 42C8  
                                       l3124 427A                                         l3116 4228  
                                       l4020 2EB8                                         l4012 2E74  
                                       l4004 2E24                                         l1277 4784  
                                       l3046 476E                                         l3038 473C  
                                       l3070 3FEC                                         l3230 3E20  
                                       l3222 3DEC                                         l3206 3D3E  
                                       l3150 4920                                         l3142 4C66  
                                       l3054 4C5C                                         l3062 4C52  
                                       l3310 47FA                                         l4102 3314  
                                       l3302 3B6C                                         l3126 4286  
                                       l4110 0E02                                         l4030 2F38  
                                       l4022 2EE6                                         l4006 2E30  
                                       l4014 2E78                                         l3048 4770  
                                       l3072 3FF0                                         l3064 3F68  
                                       l3240 3E8C                                         l3232 3E48  
                                       l3224 3DF8                                         l3216 3D8E  
                                       l3208 3D4A                                         l3152 4946  
                                       l3144 490C                                         l3056 4C2E  
                                       l3320 45DE                                         l3312 480A  
                                       l3160 49D0                                         l3400 4B3E  
                                       l4104 3326                                         l3304 3B94  
                                       l3128 4292                                         l3136 42D2  
                                       l4200 141E                                         l4120 0EA0  
                                       l4112 0E14                                         l4032 2F44  
                                       l4016 2E9C                                         l4008 2E3C  
                                       l3074 4032                                         l3066 3F84  
                                       l3250 3F0C                                         l3242 3EBA  
                                       l3226 3E04                                         l3234 3E4C  
                                       l3218 3DAC                                         l3170 3BB4  
                                       l3154 4948                                         l3146 4910  
                                       l3058 4C32                                         l3410 3884  
                                       l3402 37DA                                         l3330 4626  
                                       l3322 45EE                                         l3314 4818  
                                       l3138 4B52                                         l4106 3348  
                                       l4050 301C                                         l3090 4348  
                                       l4210 14BC                                         l4202 1430  
                                       l4130 0F56                                         l4114 0E30  
                                       l4122 0ED8                                         l4034 2F50  
                                       l4042 2F92                                         l4026 2EF8  
                                       l4018 2EA8                                         l3076 404E  
                                       l3068 3FD8                                         l3252 3F18  
                                       l3236 3E70                                         l3228 3E10  
                                       l3180 3C2A                                         l3172 3BD2  
                                       l3148 4918                                         l3412 38E4  
                                       l3404 37F4                                         l3340 466A  
                                       l3332 4630                                         l3324 4604  
                                       l3316 4828                                         l3164 49E6  
                                       l3420 4492                                         l4060 3096  
                                       l4052 303E                                         l4044 2FA8  
                                       l3092 4354                                         l3084 42E8  
                                       l3308 3B9E                                         l3500 364A  
                                       l4220 155A                                         l4212 14F4  
                                       l4204 144C                                         l4140 0FF4  
                                       l4132 0F76                                         l4124 0EEA  
                                       l4116 0E48                                         l4036 2F60  
                                       l4028 2F2C                                         l3078 4092  
                                       l3254 3F24                                         l3246 3ECC  
                                       l3238 3E7C                                         l3190 3C96  
                                       l3182 3C36                                         l3174 3BDE  
                                       l3414 3902                                         l3406 380E  
                                       l3350 40FA                                         l3342 40D4  
                                       l3334 464E                                         l3326 460C  
                                       l3318 4832                                         l3166 49FC  
                                       l3158 49BA                                         l3430 4522  
                                       l3422 44F4                                         l4070 3138  
                                       l4062 309E                                         l4054 3046  
                                       l4046 2FAC                                         l3094 4360  
                                       l3086 4308                                         l3270 3A30  
                                       l3262 39C8                                         l3510 36A6  
                                       l3502 3656                                         l4222 1572  
                                       l4214 150C                                         l4206 1464  
                                       l4150 10D4                                         l4142 102C  
                                       l4126 0F06                                         l4134 0FAE  
                                       l4118 0E80                                         l4038 2F88  
                                       l3256 3F34                                         l3248 3F00  
                                       l3192 3CA2                                         l3184 3C46  
                                       l3176 3C12                                         l3416 3962  
                                       l3408 3866                                         l3360 4142  
                                       l3352 4108                                         l3344 40D8  
                                       l3336 465E                                         l3328 4618  
                                       l3440 242A                                         l3432 452C  
                                       l3424 4504                                         l4080 31AE  
                                       l4064 30D6                                         l4072 3140  
                                       l4048 2FE4                                         l4056 3052  
                                       l3096 436C                                         l3088 4314  
                                       l3272 3A3C                                         l3280 3A84  
                                       l3264 39E4                                         l3600 19E2  
                                       l3520 3718                                         l3504 3662  
                                       l3512 36AA                                         l4224 15B6  
                                       l4208 149C                                         l4216 152C  
                                       l4160 1172                                         l4144 104C  
                                       l4136 0FC0                                         l4152 10F4  
                                       l4128 0F1E                                         l3258 3F5C  
                                       l3194 3CB2                                         l3186 3C6E  
                                       l3178 3C1E                                         l3418 3980  
                                       l3370 418C                                         l3362 414A  
                                       l3354 4118                                         l3346 40E6  
                                       l3338 4660                                         l3442 2440  
                                       l3450 2578                                         l3434 22A4  
                                       l3426 450E                                         l4090 3222  
                                       l4082 31D0                                         l4074 3162  
                                       l4066 310E                                         l4058 3074  
                                       l3098 437C                                         l3282 3AA8  
                                       l3274 3A48                                         l3266 39F0  
                                       l3610 1A74                                         l3602 19FA  
                                       l3530 3776                                         l3514 36CE  
                                       l3506 366E                                         l4226 15D2  
                                       l4218 153E                                         l4170 1214  
                                       l4162 1192                                         l4154 1106  
                                       l4146 1084                                         l4138 0FDC  
                                       l3196 3CE0                                         l3188 3C72  
                                       l3380 41BE                                         l3372 419C  
                                       l3364 4156                                         l3356 411C  
                                       l3348 40F6                                         l3460 275E  
                                       l3452 2590                                         l3444 24A4  
                                       l3436 23F8                                         l3428 4518  
                                       l4092 3234                                         l4076 3184  
                                       l4068 3130                                         l4084 31D4  
                                       l3292 3B04                                         l3284 3AB4  
                                       l3276 3A58                                         l3268 3A24  
                                       l3612 1A94                                         l3620 1B08  
                                       l3604 1A32                                         l3532 3782  
                                       l3540 37C4                                         l3524 372A  
                                       l3516 36DA                                         l3508 367E  
                                       l4228 15EA                                         l4180 12D8  
                                       l4172 1230                                         l4164 11CA  
                                       l4156 1122                                         l4148 109C  
                                       l3382 41CE                                         l3374 419E  
                                       l3366 4164                                         l3358 412C  
                                       l3462 276A                                         l3454 262A  
                                       l3446 24BA                                         l3438 2412  
                                       l3470 4A50                                         l4094 328E  
                                       l4086 31EA                                         l4078 318C  
                                       l3294 3B38                                         l3286 3AC4  
                                       l3278 3A80                                         l3622 1B26  
                                       l3614 1AAC                                         l3550 16BC  
                                       l3542 162C                                         l3534 3792  
                                       l3526 375E                                         l3518 36EA  
                                       l4190 1356                                         l4182 12F0  
                                       l4174 1248                                         l4166 11E2  
                                       l4158 113A                                         l3720 4984  
                                       l3480 4BE0                                         l3376 41A8  
                                       l3368 416E                                         l3456 2642  
                                       l3448 251C                                         l3800 1D4A  
                                       l3472 4A52                                         l3464 4A3E  
                                       l4088 320C                                         l4096 3292  
                                       l3296 3B44                                         l3288 3AF2  
                                       l3640 1C48                                         l3624 1B46  
                                       l3632 1BBA                                         l3616 1AE4  
                                       l3608 1A56                                         l3560 175E  
                                       l3552 16F4                                         l3544 164C  
                                       l3536 37BA                                         l3528 376A  
                                       l4192 138E                                         l4176 1280  
                                       l4184 1310                                         l4168 1202  
                                       l4600 27B2                                         l3482 4BE2  
                                       l3378 41AE                                         l3458 2740  
                                       l3810 1DC6                                         l3802 1D6C  
                                       l3474 4A54                                         l3466 4A48  
                                       l3730 4974                                         l3722 494C  
                                       l4098 32A8                                         l3298 3B50  
                                       l3634 1BD8                                         l3626 1B5E  
                                       l3570 17BC                                         l3650 1CD6  
                                       l3562 1776                                         l3554 170C  
                                       l3546 1664                                         l4194 13AE  
                                       l4186 1322                                         l4178 12A0  
                                       l4610 27D2                                         l4602 27C2  
                                       l3740 4B8C                                         l3484 4BE4  
                                       l3476 4BCE                                         l3660 43EC  
                                       l3652 43CE                                         l3900 2266  
                                       l3820 1E5A                                         l3812 1DE8  
                                       l3804 1D8C                                         l3468 4A4E  
                                       l3732 497E                                         l3724 4950  
                                       l3644 1C88                                         l3636 1BF8  
                                       l3628 1B96                                         l3580 1866  
                                       l3572 17D4                                         l3564 177E  
                                       l3556 1728                                         l3548 169C  
                                       l3492 35EA                                         l4196 13E6  
                                       l4188 133E                                         l4700 29E4  
                                       l4620 27F0                                         l4612 27D6  
                                       l4604 27C6                                         l3742 4C18  
                                       l3734 4B70                                         l3486 4BE8  
                                       l3478 4BD8                                         l3670 4420  
                                       l3662 43FA                                         l3654 43D2  
                                       l3910 3390                                         l3398 4B2E  
                                       l3902 2286                                         l3830 1ED8  
                                       l3822 1E70                                         l3814 1E00  
                                       l3806 1DA4                                         l3726 495A  
                                       l3750 4BC6                                         l3646 1C8C  
                                       l3638 1C10                                         l3590 1930  
                                       l3582 18A2                                         l3574 1810  
                                       l3566 1780                                         l3558 172C  
                                       l3494 35EE                                         l4198 13FE  
                                       l4710 2A82                                         l4702 29F6  
                                       l4630 2810                                         l4622 27F8  
                                       l4614 27E2                                         l4606 27CA  
                                       l3736 4B78                                         l3488 4BFC  
                                       l3680 445A                                         l3672 4428  
                                       l3664 4402                                         l3656 43E0  
                                       l3920 347A                                         l3912 33D0  
                                       l3904 229E                                         l3840 1F54  
                                       l3832 1EF8                                         l3824 1E7C  
                                       l3816 1E22                                         l3808 1DBA  
                                       l3728 496A                                         l3760 46B8  
                                       l3752 4BC8                                         l3744 4BB0  
                                       l3648 1CBE                                         l3592 1950  
                                       l3584 18C0                                         l3576 182E  
                                       l3568 179C                                         l3496 35FC  
                                       l4720 2B96                                         l4712 2B2C  
                                       l4704 2A06                                         l4640 2830  
                                       l4632 2814                                         l4624 2800  
                                       l4616 27E8                                         l4608 27CE  
                                       l3738 4B82                                         l3690 4480  
                                       l3682 4462                                         l3674 4430  
                                       l3666 4406                                         l3658 43E8  
                                       l3930 34BC                                         l3922 3484  
                                       l3914 33F8                                         l3906 3350  
                                       l3850 1FDC                                         l3842 1F6C  
                                       l3834 1F10                                         l3826 1E9E  
                                       l3818 1E42                                         l3770 46F6  
                                       l3762 46BC                                         l3754 4BCA  
                                       l3746 4BBA                                         l3594 1988  
                                       l3586 18E0                                         l3578 184E  
                                       l3498 3616                                         l4730 2BAC  
                                       l4722 2B9A                                         l4714 2B3C  
                                       l4706 2A58                                         l4650 2844  
                                       l4642 2834                                         l4634 2818  
                                       l4626 2808                                         l4618 27EC  
                                       l3692 4488                                         l3684 4464  
                                       l3676 443E                                         l3668 440E  
                                       l3780 48BC                                         l3940 355C  
                                       l3932 34CA                                         l3924 3498  
                                       l3916 3446                                         l3908 3378  
                                       l3860 2064                                         l3852 1FE8  
                                       l3844 1F8E                                         l3836 1F26  
                                       l3828 1EB6                                         l3772 46F8  
                                       l3764 46E0                                         l3756 4682  
                                       l3748 4BBC                                         l3588 18F8  
                                       l3596 19A4                                         l4724 2BA0  
                                       l4716 2B82                                         l4708 2A64  
                                       l4732 2BB2                                         l4660 28D4  
                                       l4652 2848                                         l4644 2838  
                                       l4636 2820                                         l4628 280C  
                                       l3686 446A                                         l3678 4444  
                                       l3782 48C6                                         l3942 3584  
                                       l3934 34DC                                         l3926 34A2  
                                       l3918 3462                                         l3870 20D8  
                                       l3862 207C                                         l3854 200A  
                                       l3846 1FAE                                         l3838 1F32  
                                       l3790 1CE8                                         l3774 4702  
                                       l3766 46EA                                         l3758 4692  
                                       l3598 19C2                                         l3950 2BE2  
                                       l4734 2BC4                                         l4726 2BA4  
                                       l4718 2B8E                                         l4670 292C  
                                       l4662 28F8                                         l4654 284C  
                                       l4646 283C                                         l4638 2828  
                                       l4590 278C                                         ?_max 0010  
                                       l3688 4470                                         l3784 48DC  
                                       l3944 35CC                                         l3936 3504  
                                       l3928 34A4                                         l3880 2154  
                                       l3872 20FA                                         l3864 2092  
                                       l3856 2022                                         l3848 1FC6  
                                       l3792 1CEE                                         l3776 4704  
                                       l3768 46EC                                         l3960 2C5A  
                                       l3952 2BF2                                         l4728 2BA8  
                                       l4680 2968                                         l4672 2930  
                                       l4664 28FE                                         l4656 2866  
                                       l4648 2840                                         l4592 2792  
                                       l3786 48EA                                         l3946 35E4  
                                       l3938 351C                                         l3890 21E8  
                                       l3882 2176                                         l3874 211A  
                                       l3866 209E                                         l3858 2044  
                                       l3794 1D04                                         l3778 470E  
                                       l3970 2CC6                                         l3962 2C66  
                                       l3954 2C0E                                         l4690 29B0  
                                       l4682 296C                                         l4674 2942  
                                       l4666 2918                                         l4658 287E  
                                       l4594 2796                                         l4586 2780  
                                main@curMove 01B1                                         l3788 4900  
                                       l3892 21FE                                         l3884 218E  
                                       l3876 2132                                         l3868 20C0  
                                       l3796 1D10                                         l3980 2D22  
                                       l3972 2CD2                                         l3964 2C76  
                                       l3956 2C42                                         l3948 2BDA  
                                       l4692 29B8                                         l4684 297E  
                                       l4676 295E                                         l4668 2924  
                                       l4596 27A2                                         l4588 278C  
                                       ?_min 0010                                         l3894 220A  
                                       l3886 21B0                                         l3878 2148  
                                       l3798 1D32                                         l3990 2D8A  
                                       l3982 2D56                                         l3974 2CE2  
                                       l3966 2C9E                                         l3958 2C4E  
                                       l4694 29BC                                         l4686 298A  
                                       l4678 2962                                         l4598 27AE  
                                       l3896 222C                                         l3888 21D0  
                                       l3992 2DB2                                         l3984 2D62  
                                       l3976 2D10                                         l3968 2CA2  
                                       l4696 29CE                                         l4688 2992  
                                       l3898 2244                                         l3986 2D6E  
                                       l4698 29D8                                         l3988 2D7A  
                                       l3996 2DBC                                         l3998 2DD8  
                                       u2010 49D0                                         u2011 49CC  
                                       u2100 3EB4                                         u2020 49FC  
                                       u2101 3EB0                                         u2021 49F8  
                                       u2110 3EC8                                         u2030 3C6E  
                                       u2111 3EC4                                         u2031 3C6A  
                                       u2120 3F5C                                         u2040 3C96  
                                       u2008 4936                                         u2200 4604  
                                       u3000 3096                                         u2121 3F58  
                                       u2041 3C92                                         u2201 4600  
                                       u3001 3092                                         u2050 3CDA  
                                       u2210 4626                                         u3010 30D6  
                                       u2130 3A80                                         u2051 3CD6  
                                       u2211 4622                                         u3011 30D2  
                                       u2131 3A7C                                         u2060 3CEE  
                                       u2220 464E                                         u2300 242A  
                                       u3100 3222                                         u3020 310E  
                                       u2140 3AA8                                         u2061 3CEA  
                                       u2221 464A                                         u2301 2426  
                                       u3101 321E                                         u3021 310A  
                                       u2141 3AA4                                         u2070 3D82  
                                       u2230 40E6                                         u2310 2440  
                                       u3110 3234                                         u3030 3130  
                                       u2150 3AEC                                         u2071 3D7E  
                                       u2231 40E2                                         u2311 243C  
                                       u3111 3230                                         u3031 312C  
                                       u2151 3AE8                                         u2080 3E48  
                                       u2240 4108                                         u2320 24BA  
                                       u3120 328E                                         u3040 3162  
                                       u2160 3B00                                         u2400 3712  
                                       u3200 0FC0                      color_calibration@orange 0084  
                               _BAUD4CONbits 0EE9                                         u2081 3E44  
                                       u2241 4104                                         u2321 24B6  
                                       u3121 328A                                         u3041 315E  
                                       u2161 3AFC                                         u2401 370E  
                                       u3201 0FBC                                         u2090 3E70  
                                       u2250 4142                                         u2330 2590  
                                       u3130 32A8                                         u3050 3184  
                                       u2170 3B94                                         u2410 3726  
                                       u3210 1106                                         u2091 3E6C  
                                       u2251 413E                                         u2331 258C  
                                       u3131 32A4                                         u3051 3180  
                                       u2171 3B90                                         u2411 3722  
                                       u3211 1102                                         u2260 4164  
                                       u2180 4818                                         u2340 2642  
                                       u3140 32FE                                         u3060 31AE  
                                       u2500 1BD8                                         u2420 37BA  
                                       u3220 1214                                         u2261 4160  
                                       u2181 4814                                         u2341 263E  
                                       u3141 32FA                                         u3061 31AA  
                                       u2501 1BD4                                         u2421 37B6  
                                       u3221 1210                                         u2270 418C  
                                       u2190 4852                                         u3150 3314  
                                       u3070 31D0                                         u2510 1CBE  
                                       u2430 175E                                         u3230 1322  
                                       u2271 4188                                         u2191 484E  
                                       u3151 3310                                         u3071 31CC  
                                       u2511 1CBA                                         u2431 175A  
                                       u3231 131E                                         u4007 2F56  
                                       u2280 41BE                                         u2360 275E  
                                       u3160 3326                                         u3080 31EA  
                                       u2520 1CE6                                         u2440 179C  
                                       u3240 1430                                         u2281 41BA  
                                       u2361 275A                                         u3161 3322  
                                       u3081 31E6                                         u2521 1CE2  
                                       u2441 1798                                         u3241 142C  
                                       u4017 0E3A                                         u2370 4BF8  
                                       u2530 43E0                                         u2290 4B3E  
                                       u3170 3348                                         u3090 320C  
                                       u2450 182E                                         u3250 153E  
                                       _T2PR 0FBC                                         u2371 4BF4  
                                       u2531 43DC                                         u2355 2660  
                                       u2291 4B3A                                         u3171 3344  
                                       u3091 3208                                         u2451 182A  
                                       u3251 153A                                         u4107 108E  
                                       u4027 0E72                                         u2540 43FA  
                                       u2620 48EA                                         u1900 4766  
                                       u2700 1F22                                         u2460 18C0  
                                       u2380 36A6                                         u3180 0E14  
                                       u2541 43F6                                         u2621 48E6  
                                       u1901 4762                                         u2701 1F1E  
                                       u2461 18BC                                         u2381 36A2  
                                       u4117 10C6                                         u4037 0EAA  
                                       u3181 0E10                                         u2550 4420  
                                       u2630 4900                                         u1910 3F84  
                                       u2470 19C2                                         u2390 36CE  
                                       u3190 0EEA                                         u2551 441C  
                                       u2631 48FC                                         u1911 3F80  
                                       u2711 1F40                                         u2471 19BE  
                                       u2391 36CA                                         u4207 1348  
                                       u4127 112C                                         u4047 0F10  
                                       u3191 0EE6                                         u2560 443E  
                                       u1920 404E                                         u2800 3446  
                                       u2720 1FD8                                         u2640 1D00  
                                       u2480 1A74                                         u2561 443A  
                                       u1921 404A                                         u2801 3442  
                                       u2721 1FD4                                         u2641 1CFC  
                                       u2481 1A70                                         u4217 1380  
                                       u4137 1164                                         u4057 0F48  
                                       u2570 445A                                         u2810 3454  
                                       u2490 1B26                                         u2571 4456  
                                       u2811 3450                                         u2731 1FF6  
                                       u2651 1D1E                                         u2491 1B22  
                                       u4307 3674                                         u4227 13B8  
                                       u4147 119C                                         u4067 0F80  
                                       u2580 4480                                         u2820 3462  
                                       u1860 4AA0                                         u2740 208E  
                                       u2660 1DB6                                         u2900 2DB2  
                                       u2581 447C                                         u2821 345E  
                                       u1861 4A9C                                         u2741 208A  
                                       u2661 1DB2                                         u4317 36E0  
                                       u4237 13F0                                         u4157 11D4  
                                       u4077 0FE6                                         u2901 2DAE  
                                       u2830 347A                                         u1870 4AB6  
                                       u1950 43A4                                         u2910 2E74  
                                       u2831 3476                                         u1871 4AB2  
                                       u2751 20AC                                         u2671 1DD4  
                                       u1951 43A0                                         u4407 1890  
                                       u4327 3788                                         u4247 1456  
                                       u4167 123A                                         u4087 101E  
                                       u2911 2E70                                         u3711 2786  
                                       u1880 472C                                         u2840 3498  
                                       u2760 2144                                         u2680 1E6C  
                                       u1960 43CC                                         u2920 2E9C  
                                       u1881 4728                                         u2841 3494  
                                       u2761 2140                                         u2681 1E68  
                                       u1961 43C8                                         u4417 18EA  
                                       u4337 1656                                         u4257 148E  
                                       u4177 1272                                         u4097 1056  
                                       u2921 2E98                                         u3801 2A8C  
                                       u3721 279C                                         u1890 474A  
                                       u2850 34CA                                         u1970 4236  
                                       u2930 2EE0                                         u1891 4746  
                                       u2851 34C6                                         u2771 2162  
                                       u2691 1E8A                                         u1971 4232  
                                       u4507 1B88                                         u4427 1922  
                                       u4347 168E                                         u4267 14C6  
                                       u4187 12AA                                         u2931 2EDC  
                                       u3811 2A9E                                         u3731 27A8  
                                       u2780 21FA                                         u1980 42C8  
                                       u2940 2EF4                                         u2860 2C9E  
                                       u3900 2BD6                                         u3740 285E  
                                       u2781 21F6                                         u1981 42C4  
                                       u4517 1C02                                         u4437 195A  
                                       u4357 16C6                                         u4277 14FE  
                                       u4197 12E2                                         u2941 2EF0  
                                       u2861 2C9A                                         u3901 2BD2  
                                       u3821 2AB0                                         u3741 285A  
                                       u1990 4934                                         u2950 2F88  
                                       u2870 2CC6                                         u3750 297E  
                                       u1991 492C                                         u2791 2218  
                                       u4607 1D96                                         u4527 1C3A  
                                       u4447 1992                                         u4367 16FE  
                                       u4287 1564                                         u2951 2F84  
                                       u2871 2CC2                                         u3831 2AC2  
                                       u3751 297A                                         u2960 2FE4  
                                       u2880 2D0A                                         u3760 29B0  
                                       u4617 1E4C                                         u2961 2FE0  
                                       u4537 4298                                         u4457 19EC  
                                       u4377 17C6                                         u4297 15DC  
                                       u2881 2D06                                         u3841 2AD4  
                                       u3761 29AC                                         u2970 301C  
                                       u2890 2D1E                                         u3770 29F6  
                                       u4707 3402                                         u4627 1F02  
                                       u2971 3018                                         u4547 3A4E  
                                       u4467 1A24                                         u4387 17FE  
                                       u2891 2D1A                                         u3851 2AE6  
                                       u3771 29F2                                         u2980 303E  
                                       u4717 34AE                                         u4637 1FB8  
                                       u2981 303A                                         u4557 3ABA  
                                       u4477 1A9E                                         u4397 1858  
                                       u3861 2AF8                                         u3917 2872  
                                       u2990 3074                                         u4807 3E82  
                                       u4727 350E                                         u4647 206E  
                                       u2991 3070                                         u4567 3B62  
                                       u4487 1AD6                                         u3871 2B0A  
                                       u3791 2A6E                                         u3927 290A  
                                       u4817 3F2A                                         u4737 354E  
                                       u4657 2124                                         u4577 4372  
                                       u4497 1B50                                         u3881 2B1C  
                                       u3785 2A02                                         u3937 2938  
                                       u3890 2BC4                                         u4747 358E  
                                       u4667 21DA                                         u4587 4960  
                                       u3891 2BC0                                         u3787 2A06  
                                       u3947 29C4                                         u4757 35D6  
                                       u4677 2290                                         u4597 44FA  
                                       u3957 2C6C                                         u4767 3C3C  
                                       u4687 3382                                         u3967 2CD8  
                                       u4777 3CA8                                         u4697 33C2  
                                       u3977 2D80                                         u4787 3D50  
                                       u3987 2E42                                         u4797 3E16  
                                       u3997 2EAE                      color_calibration@yellow 0080  
                                       _main 2780                                         _move 0E02  
                                       _lost 004B                                         fsr1h 0FE2  
                         i2___lwdiv@quotient 0005                                         fsr2h 0FDA  
                                       indf2 0FDF                                         fsr1l 0FE1  
                                       fsr2l 0FD9                                         max@a 0010  
                                       max@b 0012                                         btemp 0050  
                                       _stop 41E0                                         min@a 0010  
                                       min@b 0012                                         prodh 0FF4  
                                       prodl 0FF3                                         start 00BA  
                           color_detect@blue 0026                          main@reverseDuration 017A  
                           __end_of_ADC_init 4BE8                         ?i2_color_writetoaddr 0003  
                           color_detect@pink 0032                              __end_of_HighISR 00BA  
                               ___param_bank 0000                         __end_of_batteryLevel 490A  
                                      ??_max 0014                                        ??_min 0014  
                            __end_of___aldiv 41E0                                        ?_main 0001  
                                      _ADPCH 0F5F                              __end_of___awdiv 4492  
                                      ?_move 0060                              __end_of___lldiv 4682  
                                      ?_stop 0023                              ___awdiv@divisor 0012  
                            __end_of___lwdiv 4786                                        i2l151 4BAE  
                                      i2l148 45DC                                        i2l422 4A3C  
                                      i2l415 4B2A                                        i2l272 4C7E  
                                      i2l281 4C42                                        i2l266 4AB8  
                                      i2l429 4C16                                        i2l269 4ADE  
                                      i2l278 4C74                                        i2l376 00AE  
                            ___awdiv@counter 0014                               ??_color_detect 0060  
                                      _TMR0H 0FD4                                        _TMR0L 0FD3  
                        ___lmul@multiplicand 0014                   __end_of_I2C_2_Master_Start 4C62  
                 __end_of_I2C_2_Master_Write 4C38                                   _Buggy_init 4984  
                 color_calibration@lightblue 0086                       returnHome@straightRamp 003C  
                     returnHome@straightTime 0037                                        tablat 0FF5  
                                      plusw0 0FEB                                        plusw2 0FDB  
                                      ttemp5 0051                                        ttemp6 0054  
                                      ttemp7 0058                                        stop@i 002B  
                                      status 0FD8                                        wtemp8 0051  
                          color_detect@color 004A                            color_detect@green 0020  
                          color_detect@white 0044                        ??i2_color_writetoaddr 0004  
                               main@turnRamp 017F                        _I2C_2_Master_RepStart 4C62  
                         putCharToRxBuf@byte 0001                              __initialization 4864  
                  get16bitTMR0val@timer_high 0016                                 __end_of_main 2BDA  
                               __end_of_move 162C                                 __end_of_stop 42E8  
                        move@reverseDuration 006B                              _get16bitTMR0val 4A68  
                                     ??_main 008A                                       ??_move 0045  
                                     ??_stop 0028                                __activetblptr 0000  
                              calibration@mL 0031                                calibration@mR 0033  
                     returnHome@turnDuration 003E                                 ?_setMotorPWM 001D  
                                     _ADRESH 0F64                                       _CCPR1H 0FAA  
                                     _CCPR2H 0FA6                                       _CCPR3H 0F25  
                                     _CCPR4H 0F21                             ___awdiv@dividend 0010  
                                     _RC0PPS 0E62                                       _RC4REG 0EE3  
                     wallAdjust@straightRamp 0028                                       _RE2PPS 0E74  
                                     _RC7PPS 0E69                                       _RD5PPS 0E6F  
                                     _RE4PPS 0E76                                       _RD6PPS 0E70  
                                     i2l1270 47F0                                       i2l1277 47F8  
                                     i2l3080 4AB8                                       i2l3082 4AC8  
                                     i2l4230 4B08                                       i2l4240 4A22  
                                     i2l4232 4B18                                       i2l4242 4A26  
                                     i2l4234 4B1C                                       i2l4236 4B28  
                                     i2l3700 478E                                       i2l4260 459A  
                                     i2l4238 4A12                                       i2l4246 4C00  
                                     i2l3710 47C4                                       i2l3702 47A0  
                                     i2l3390 4C6C                                       i2l4270 45D2  
                                     i2l4262 45AA                                       i2l4430 0030  
                                     i2l4422 0012                                       i2l3712 47DA  
                                     i2l3704 47A8                                       i2l3392 4C70  
                                     i2l4264 45B4                                       i2l4440 0078  
                                     i2l4424 0022                                       i2l4432 0054  
                                     i2l3714 47E2                                       i2l3706 47B0  
                                     i2l3386 4C76                                       i2l3394 4C3A  
                                     i2l4266 45BE                                       i2l4258 4538  
                                     i2l4442 007E                                       i2l4434 0064  
                                     i2l4426 0028                                       i2l3716 47E4  
                                     i2l3708 47BE                                       i2l3388 4C7A  
                                     i2l3396 4C3E                                       i2l4268 45C8  
                                     i2l4444 008E                                       i2l4436 0068  
                                     i2l4428 002C                                       i2l3718 47EA  
                                     i2l4446 0096                                       i2l4438 006A  
                                     i2l4448 00AA                                       _RG6PPS 0E88  
                                     i2l3696 4B92                                       i2l3698 4786  
                                  ??_HighISR 000D                     __end_of_color_click_init 4984  
                                     _TMR0IE 714D                                       _TMR0IF 719D  
                                     _RX4PPS 0E15                                       _TX4REG 0EE4  
                              main@lightblue 01A4                                 ??_ADC_getval 0010  
                              ??_Timer0_init 0010                          calibration@turnRamp 0038  
                    calibration@turnDuration 0036                                 _CCPTMRS0bits 0FAD  
                           _getCharFromTxBuf 4A12                                       ___lmul 47FA  
                                  ??___aldiv 0024                                       ___wmul 4AE0  
                                  ??___awdiv 0014                                    ??___lldiv 0024  
                                  ??___lwdiv 001A                                       clear_0 488A  
                                     clear_1 4896                                       clear_2 48A2  
                           ___awdiv@quotient 0016                                       isa$std 0001  
                    returnHome@straightSpeed 003A                                       move@mL 0060  
                                     move@mR 0062                            __end_ofi2___lwdiv 47FA  
                               __mediumconst 0000                                       tblptrh 0FF7  
                                     tblptrl 0FF6                                       tblptru 0FF8  
                                  ?_ADC_init 0001                                       stop@mL 0023  
                                     stop@mR 0025                                  ?_Buggy_init 0001  
                          ??_initDCmotorsPWM 0012                           __end_of_ADC_getval 4C00  
                 i2color_writetoaddr@address 0004                             __end_of_turnLeft 3F68  
                         color_detect@orange 0038                        __end_of_isDataInTxBuf 4C18  
                                 __accesstop 0060                      __end_of__initialization 48B2  
                         color_detect@yellow 002C                              fullSpeedAhead@i 002C  
                              main@turnSpeed 017E                       ?_I2C_2_Master_RepStart 0001  
                              ___rparam_used 0001                         __end_of_color_detect 3350  
                  reverseShort@straightSpeed 0027                              _Interrupts_init 4C18  
                             __pcstackCOMRAM 0001                      __end_of_get16bitTMR0val 4A90  
                               ?_white_Light 0001                                 __pidataBANK0 4C80  
                   get16bitTMR0val@timer_low 0014                     get16bitTMR0val@timer_val 0018  
               ?_color_clear_init_interrupts 0001                             _reverseOneSquare 39C8  
                        __end_of_Timer0_init 4B90                               main@ambientNew 017C  
                                 ??_ADC_init 0010                                 rgb_2_hsv@HSV 0032  
                               _batteryLevel 48BC                                   __pbssBANK0 00B8  
                                 __pbssBANK1 01D7                                   __pbssBANK2 0200  
                             _rgb_2_hsv$3604 0066                               _rgb_2_hsv$3605 0068  
                             _rgb_2_hsv$3606 0060                            _color_writetoaddr 4B50  
                               _T2CLKCONbits 0FBF                     reverseShort@straightRamp 0028  
                         ?_color_writetoaddr 0012                                      ?___lmul 0010  
                                    ?___wmul 0010                     wallAdjust@adjustDuration 002C  
                             ___lmul@product 0018                ??_color_clear_init_interrupts 001D  
                                move@curMove 0069                          ??_color_writetoaddr 0013  
                    wallAdjust@straightSpeed 0027                                      _SP4BRGH 0EE6  
                                    _SP4BRGL 0EE5                   fullSpeedAhead@straightRamp 0028  
                      turnRight@turnDuration 0028                                      _SSP2ADD 0ED6  
                                    _SSP2BUF 0ED5                             _brightnessChange 00F4  
                                 _color_read 37DA                      __end_of_Interrupts_init 4C2C  
                     color_writetoaddr@value 0012                                      _HighISR 0008  
                  __end_of_color_writetoaddr 4B70                                    _ADREFbits 0F58  
                         _I2C_2_Master_Start 4C58                                   _initUSART4 4BB0  
                        i2_I2C_2_Master_Idle 4AB8                           _I2C_2_Master_Write 4C2C  
                                    __Hparam 0000                          i2_I2C_2_Master_Stop 4C6C  
                                    __Lparam 0000                                  wallAdjust@i 002E  
                                _Timer0_init 4B70                         calibration@turnSpeed 0035  
                           ?_get16bitTMR0val 0010                                      ___aldiv 40D4  
                                    ___awdiv 43CE                                      ___lldiv 45DE  
                              ??_calibration 0039                          ?_I2C_2_Master_Start 0001  
                                    ___lwdiv 4712                          ?_I2C_2_Master_Write 0001  
                               __psmallconst 0E00                                      _ambient 00F9  
                                    __pcinit 4864                                      __ramtop 0E00  
                                  ?_turnLeft 0023                            __end_of_rgb_2_hsv 2780  
                                    __ptext0 2780                                      __ptext1 2BDA  
                                    __ptext2 0E02                                      __ptext3 35EA  
                                    __ptext4 162C                                      __ptext5 41E0  
                                    __ptext6 39C8                                      __ptext7 4C44  
                                    __ptext8 4A68                                      __ptext9 42E8  
                       ?i2_I2C_2_Master_Idle 0001                                    _T2CONbits 0FBD  
                              ?_reverseShort 0023                         ?i2_I2C_2_Master_Stop 0001  
                           ___aldiv@dividend 001C                                    _T2HLTbits 0FBE  
                              _RxBufWriteCnt 004F                                      main@HSV 01B5  
                   __end_of_getCharFromTxBuf 4A3E                                      main@buf 008C  
                                    main@red 0180                         ??_I2C_2_Master_Start 0011  
                       ??_I2C_2_Master_Write 0011                         end_of_initialization 48B2  
            ??i2_color_clear_init_interrupts 0008                  __end_ofi2_color_writetoaddr 4BB0  
                           ADC_getval@tmpval 0010                            reverseOneSquare@i 002D  
                          ?_color_click_init 0001                                   _wallAdjust 2BDA  
                            ___lldiv@divisor 0020                                   _resetTimer 4C44  
                         ??_color_click_init 0022                              ___lldiv@counter 0028  
                           ___aldiv@quotient 0026                   batteryLevel@batteryQuarter 0019  
                                    postdec1 0FE5                                      postdec2 0FDD  
                                    postinc0 0FEE                                      postinc1 0FE6  
                                    postinc2 0FDE                   batteryLevel@batteryVoltage 0018  
                                 main@F14650 00B8                                   main@F14661 00F5  
                                 main@F14656 01D7                                   main@F14658 0200  
                                 _returnHome 162C                              _initDCmotorsPWM 4682  
                                 ??_turnLeft 002A                                    _PORTFbits 0F8E  
                         setMotorPWM@negDuty 0022                               ??_reverseShort 0029  
                      ??i2_I2C_2_Master_Idle 0001                                move@turnSpeed 006D  
                          __end_of_turnRight 3D8E                        ??i2_I2C_2_Master_Stop 0002  
                        __end_of_calibration 35EA                                 _color_detect 2FA8  
                                returnHome@i 0044                                    _TRISAbits 0F81  
                         setMotorPWM@posDuty 0021                                    _TRISBbits 0F82  
                                  _TRISCbits 0F83                                    _TRISDbits 0F84  
                                  _TRISEbits 0F85                                    _TRISFbits 0F86  
                                  _TRISGbits 0F87                                    _TRISHbits 0F88  
                           white_Light@state 0010                                 ??_Buggy_init 0010  
                           fullSpeedAhead@mL 0023                             fullSpeedAhead@mR 0025  
                                ?_color_read 0014                            i2___lwdiv@divisor 0003  
                   color_writetoaddr@address 0013                                    i2___lwdiv 4786  
                    ??_I2C_2_Master_RepStart 0011                            i2___lwdiv@counter 0007  
                   __end_of_reverseOneSquare 3BB4                             ?_Interrupts_init 0001  
                reverseShort@reverseDuration 002C                                stop@cur_power 002D  
                                _CCP1CONbits 0FAB                       color_calibration@green 007C  
                               _EUSART4RXbuf 00E0                          returnHome@turnSpeed 003D  
                               _EUSART4TXbuf 0252                                  _CCP2CONbits 0FA7  
                     color_calibration@white 0088                                  _CCP3CONbits 0F26  
                                ?_initUSART4 0001                                   main@orange 019E  
                                _CCP4CONbits 0F22                                   main@motorL 01CD  
                                 main@motorR 01C3                                   main@yellow 0192  
                             color_read@RGBC 0014                               _fullSpeedAhead 42E8  
                             __end_of___lmul 4864                         turnLeft@turnDuration 0028  
                             __end_of___wmul 4B06                           __end_of_Buggy_init 49BA  
                        start_initialization 4864                                  __end_of_max 4A12  
                                __end_of_min 49E6                                _TxBufWriteCnt 004D  
                                 rgb_2_hsv@b 0074                                   rgb_2_hsv@g 0072  
                                 ?i2___lwdiv 0001                                   rgb_2_hsv@r 006A  
                           move@moveSequence 0065                          wallAdjust@cur_power 0030  
      __end_ofi2_color_clear_init_interrupts 45DE                i2_color_clear_init_interrupts 4538  
                                ?_wallAdjust 0023                                  ?_resetTimer 0001  
                    __end_of_initDCmotorsPWM 4712                       __end_of_fullSpeedAhead 43CE  
                         turnRight@cur_power 002F                                     ??___lmul 0018  
                              rgb_2_hsv@RGBC 002A                                     ??___wmul 0014  
                             _putCharToRxBuf 4B06                                  __pdataBANK0 00F5  
                              rgb_2_hsv@diff 006E                i2I2C_2_Master_Write@data_byte 0002  
                                _calibration 3350                                rgb_2_hsv@cmax 006C  
                              rgb_2_hsv@cmin 0064                                  ?_returnHome 0031  
               reverseOneSquare@straightRamp 0029                 __end_ofi2_I2C_2_Master_Start 4C80  
               __end_ofi2_I2C_2_Master_Write 4C44                            turnLeft@cur_power 002F  
                                __pbssCOMRAM 004B                                __pcstackBANK0 0060  
                              __pcstackBANK1 0100                                     ?_HighISR 0001  
                       __end_of_reverseShort 37DA                             stop@straightRamp 0027  
                           ___lwdiv@dividend 0016                                 ?_Timer0_init 0001  
                     __end_of_putCharToRxBuf 4B2C                              ?_fullSpeedAhead 0023  
                                  __pintcode 0008                                     ?___aldiv 001C  
                         turnRight@turnSpeed 0027                                     ?___awdiv 0010  
                                   ?___lldiv 001C                                     ?___lwdiv 0016  
                       I2C_2_Master_Read@ack 0012                         I2C_2_Master_Read@tmp 0013  
                                __smallconst 0E00                               reverseShort@mL 0023  
                             reverseShort@mR 0025                             main@moveSequence 0152  
                          _I2C_2_Master_Idle 4A90                            _I2C_2_Master_Init 4A3E  
                          _I2C_2_Master_Read 490A                            turnLeft@turnSpeed 0027  
                          _I2C_2_Master_Stop 4C4E                                    _rgb_2_hsv 22A4  
                               _RxBufReadCnt 004E                                     _ADC_init 4BCE  
                         ?_I2C_2_Master_Idle 0001                           ?_I2C_2_Master_Init 0001  
                         ?_I2C_2_Master_Read 0001                                ??_setMotorPWM 001F  
                         ?_I2C_2_Master_Stop 0001                             ___lwdiv@quotient 001A  
                   initDCmotorsPWM@PWMperiod 0010                            ?_getCharFromTxBuf 0001  
                                ??i2___lwdiv 0005                           ??_getCharFromTxBuf 0001  
                          move@straightSpeed 006A                              ___aldiv@divisor 0020  
                        ??_I2C_2_Master_Idle 0010                              ___aldiv@counter 0024  
                        ??_I2C_2_Master_Init 0010                          ??_I2C_2_Master_Read 0011  
                             ___wmul@product 0014                                     _LATAbits 0F79  
                        ??_I2C_2_Master_Stop 0011                                     _LATCbits 0F7B  
                              _isDataInTxBuf 4C00                                     _LATDbits 0F7C  
                                   _LATEbits 0F7D                                     _LATFbits 0F7E  
                                   _LATGbits 0F7F                                     _LATHbits 0F80  
                                   _IPR0bits 0E1F                                     _PIE0bits 0E29  
                                   _PIE4bits 0E2D                                  turnRight@mL 0023  
                                turnRight@mR 0025                                     i2u260_40 47BE  
                                   i2u260_41 47BA                                     i2u261_40 47DA  
                                   i2u261_41 47D6                                     i2u326_40 4B18  
                                   i2u326_41 4B14                                     i2u327_40 4A22  
                                   i2u351_40 0022                                     i2u327_41 4A1E  
                                   i2u351_41 001E                                     _PIR0bits 0E33  
                                   i2u328_40 4C14                                     i2u352_40 0042  
                                   i2u328_41 4C0E                                     i2u352_41 003A  
                                   i2u329_40 4C16                                     i2u193_40 4AC8  
                                   i2u193_41 4AC4                                     i2u194_40 4ADE  
                                   i2u354_40 0064                                     i2u353_48 0044  
                                   i2u194_41 4ADA                                     i2u354_41 0060  
                                   i2u259_40 47A0                                     i2u355_40 0078  
                                   i2u259_41 479C                                     i2u355_41 0074  
                                   i2u356_40 008E                                     i2u356_41 008A  
                                   i2u357_40 00AA                                     i2u357_41 00A6  
                                   _PIR4bits 0E37                                     i2u482_47 45A0  
                            ?_putCharToRxBuf 0001                             ?_initDCmotorsPWM 0010  
                fullSpeedAhead@straightSpeed 0027          __end_of_color_clear_init_interrupts 4538  
             ?i2_color_clear_init_interrupts 0001                  _color_clear_init_interrupts 4492  
                                   _SSP2CON2 0EDA                                     _SSP2STAT 0ED8  
                               move@turnRamp 006F                                   _ADCON0bits 0F60  
                  __end_of_I2C_2_Master_Idle 4AB8                        color_calibration@RGBC 0076  
                  __end_of_I2C_2_Master_Init 4A68                    __end_of_I2C_2_Master_Read 494C  
                          ___wmul@multiplier 0010                    __end_of_I2C_2_Master_Stop 4C58  
   color_clear_init_interrupts@low_threshold 0020   i2color_clear_init_interrupts@low_threshold 000B  
                               setMotorPWM@m 001D                  I2C_2_Master_Write@data_byte 0011  
                      color_calibration@blue 007E                           returnHome@turnRamp 003F  
                                  main@color 01B3                        color_calibration@pink 0082  
                                  main@green 0186                                    main@white 01AA  
                                 ?_rgb_2_hsv 002A                                 _TxBufReadCnt 004C  
                   i2color_writetoaddr@value 0003                                    _turnRight 3BB4  
                  returnHome@reverseDuration 003B                                 ??_color_read 0016  
                          ___lmul@multiplier 0010                                    copy_data0 4878  
                             ?_isDataInTxBuf 0001                __end_of_I2C_2_Master_RepStart 4C6C  
                          ?_reverseOneSquare 0023                          __end_of_setMotorPWM 40D4  
                               ??_initUSART4 0010                         i2_I2C_2_Master_Start 4C76  
            reverseOneSquare@reverseDuration 0028                         i2_I2C_2_Master_Write 4C38  
                         ??_reverseOneSquare 002A                                     __Hrparam 0000  
                                 _ADC_getval 4BE8                             main@testSequence 00B4  
                                   __Lrparam 0000                                 wallAdjust@mL 0023  
                               wallAdjust@mR 0025                                ??_white_Light 0010  
                __end_ofi2_I2C_2_Master_Idle 4AE0                  __end_ofi2_I2C_2_Master_Stop 4C76  
                         __end_of_color_read 39C8                                   _ANSELBbits 0E9A  
                                 _ANSELDbits 0EA7                                   _ANSELFbits 0EB4  
                                 _T0CON0bits 0FD5                                   _T0CON1bits 0FD6  
                          _color_calibration 1CE8                reverseOneSquare@straightSpeed 0027  
                            ___lwdiv@divisor 0018                       returnHome@moveSequence 0035  
                         __end_of_initUSART4 4BCE                              ___lwdiv@counter 001C  
                          turnRight@turnRamp 0029                                   ?_turnRight 0023  
                                   __ptext10 4BB0                                     __ptext11 4682  
                                   __ptext20 49BA                                     __ptext12 2FA8  
                                   __ptext21 49E6                                     __ptext13 494C  
                                   __ptext30 490A                                     __ptext22 47FA  
                                   __ptext14 4492                                     __ptext31 4A90  
                                   __ptext23 45DE                                     __ptext15 4B50  
                                   __ptext40 4BCE                                     __ptext32 3350  
                                   __ptext24 40D4                                     __ptext16 4A3E  
                                   __ptext41 4BE8                                     __ptext33 3BB4  
                                   __ptext25 37DA                                     __ptext17 1CE8  
                                   __ptext50 4C76                                     __ptext42 4B70  
                                   __ptext34 3D8E                                     __ptext26 4C2C  
                                   __ptext18 4B2C                                     __ptext51 4AB8  
                                   __ptext43 4C18                                     __ptext35 3F68  
                                   __ptext27 4C4E                                     __ptext19 22A4  
                                   __ptext52 4786                                     __ptext44 4984  
                                   __ptext36 4AE0                                     __ptext28 4C58  
                                   __ptext53 4B06                                     __ptext37 4712  
                                   __ptext29 4C62                                     __ptext54 4C00  
                                   __ptext46 4538                                     __ptext38 48BC  
                                   __ptext55 4A12                                     __ptext47 4B90  
                                   __ptext39 43CE                                     __ptext48 4C38  
                                   __ptext49 4C6C                                    move@color 0064  
                         ?_color_calibration 0076                                ?_batteryLevel 0001  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                              reverseShort@i 002D                             turnLeft@turnRamp 0029  
                      reverseShort@cur_power 002F                                   turnLeft@mL 0023  
                                 turnLeft@mR 0025                          ??_color_calibration 0040  
                      ?i2_I2C_2_Master_Start 0001                                 ??_wallAdjust 0029  
                           move@straightRamp 006C                        ?i2_I2C_2_Master_Write 0001  
                           move@straightTime 0067                            returnHome@curMove 0039  
                               ??_resetTimer 0010                                   turnRight@i 002D  
                                   isa$xinst 0000                                   _RC4STAbits 0EE7  
                                   main@RGBC 01BB                                     int$flags 0050  
                       color_calibration@HSV 0078                                 ?_calibration 0031  
                                   main@blue 018C                         color_calibration@red 007A  
                               ??_returnHome 0040                                     main@pink 0198  
                                   main@wall 017B                                     _turnLeft 3D8E  
                    fullSpeedAhead@cur_power 002E                          __end_of_white_Light 4B50  
                  __end_of_color_calibration 22A4                                   _INTCONbits 0FF2  
                               _reverseShort 35EA                    reverseOneSquare@cur_power 002F  
                                ??_rgb_2_hsv 0034                           __end_of_wallAdjust 2FA8  
                         reverseOneSquare@mL 0023                           reverseOneSquare@mR 0025  
                         __end_of_resetTimer 4C4E                             move@turnDuration 006E  
                             ??_batteryLevel 0018                                  _setMotorPWM 3F68  
                          ??_get16bitTMR0val 0012                              ??_isDataInTxBuf 0001  
                                   intlevel2 0000                             ___lldiv@dividend 001C  
                           ??_fullSpeedAhead 0029                           __end_of_returnHome 1CE8  
                                  turnLeft@i 002D                                  ?_ADC_getval 0001  
                          main@straightSpeed 01B0                             _color_click_init 494C  
                      color_detect@lightblue 003E                                   _SSP2DATPPS 0E1D  
                           ___lldiv@quotient 0024                                   _SSP2CLKPPS 0E1C  
                               ___aldiv@sign 0025                                  ??_turnRight 002A  
                           main@straightRamp 01B2                             main@straightTime 0100  
                                 _TX4STAbits 0EE8                       ??i2_I2C_2_Master_Start 0002  
                     ??i2_I2C_2_Master_Write 0002                             ??_putCharToRxBuf 0001  
                               returnHome@mL 0031                                 returnHome@mR 0033  
