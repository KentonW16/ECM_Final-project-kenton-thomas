

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 15:30:03 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Generated 21/07/2023 GMT
    70                           ; 
    71                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TRISCbits	set	3971
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _SP4BRGL	set	3813
   107   000000                     _TX4STAbits	set	3816
   108   000000                     _BAUD4CONbits	set	3817
   109   000000                     _TX4REG	set	3812
   110   000000                     _TRISBbits	set	3970
   111   000000                     _TRISAbits	set	3969
   112   000000                     _TRISEbits	set	3973
   113   000000                     _TRISGbits	set	3975
   114   000000                     _LATFbits	set	3966
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISHbits	set	3976
   117   000000                     _TRISDbits	set	3972
   118   000000                     _LATEbits	set	3965
   119   000000                     _LATGbits	set	3967
   120   000000                     _LATHbits	set	3968
   121   000000                     _SSP2CON2bits	set	3802
   122   000000                     _RX4PPS	set	3605
   123   000000                     _SSP2CLKPPS	set	3612
   124   000000                     _SSP2DATPPS	set	3613
   125   000000                     _ANSELDbits	set	3751
   126   000000                     _SSP2ADD	set	3798
   127   000000                     _SSP2CON1bits	set	3801
   128   000000                     _CCPR4H	set	3873
   129   000000                     _CCPR3H	set	3877
   130   000000                     _CCPR2H	set	4006
   131   000000                     _CCPR1H	set	4010
   132   000000                     _CCP1CONbits	set	4011
   133   000000                     _CCPTMRS0bits	set	4013
   134   000000                     _T2PR	set	4028
   135   000000                     _T2CONbits	set	4029
   136   000000                     _INTCONbits	set	4082
   137   000000                     _CCP2CONbits	set	4007
   138   000000                     _CCP3CONbits	set	3878
   139   000000                     _ADREFbits	set	3928
   140   000000                     _LATAbits	set	3961
   141   000000                     _LATDbits	set	3964
   142   000000                     _PORTFbits	set	3982
   143   000000                     _CCP4CONbits	set	3874
   144   000000                     _LATCbits	set	3963
   145   000000                     _RC4REG	set	3811
   146   000000                     _SSP2CON2	set	3802
   147   000000                     _SSP2STAT	set	3800
   148   000000                     _ANSELFbits	set	3764
   149   000000                     _SSP2BUF	set	3797
   150   000000                     _IPR0bits	set	3615
   151   000000                     _PIE0bits	set	3625
   152   000000                     _RD5PPS	set	3695
   153   000000                     _RE2PPS	set	3700
   154   000000                     _ANSELBbits	set	3738
   155   000000                     _RD6PPS	set	3696
   156   000000                     _PIE4bits	set	3629
   157   000000                     _PIR0bits	set	3635
   158   000000                     _PIR4bits	set	3639
   159   000000                     _RC0PPS	set	3682
   160   000000                     _RC7PPS	set	3689
   161   000000                     _ADPCH	set	3935
   162   000000                     _ADRESH	set	3940
   163   000000                     _ADCON0bits	set	3936
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _T2CLKCONbits	set	4031
   167   000000                     _T2HLTbits	set	4030
   168                           
   169                           	psect	smallconst
   170   000E00                     __psmallconst:
   171                           	callstack 0
   172   000E00  00                 	db	0
   173   000E01                     STR_1:
   174   000E01  72                 	db	114	;'r'
   175   000E02  3D                 	db	61	;'='
   176   000E03  25                 	db	37
   177   000E04  64                 	db	100	;'d'
   178   000E05  20                 	db	32
   179   000E06  67                 	db	103	;'g'
   180   000E07  3D                 	db	61	;'='
   181   000E08  25                 	db	37
   182   000E09  64                 	db	100	;'d'
   183   000E0A  20                 	db	32
   184   000E0B  62                 	db	98	;'b'
   185   000E0C  3D                 	db	61	;'='
   186   000E0D  25                 	db	37
   187   000E0E  64                 	db	100	;'d'
   188   000E0F  20                 	db	32
   189   000E10  63                 	db	99	;'c'
   190   000E11  3D                 	db	61	;'='
   191   000E12  25                 	db	37
   192   000E13  64                 	db	100	;'d'
   193   000E14  20                 	db	32
   194   000E15  20                 	db	32
   195   000E16  20                 	db	32
   196   000E17  6E                 	db	110	;'n'
   197   000E18  3A                 	db	58	;':'
   198   000E19  20                 	db	32
   199   000E1A  72                 	db	114	;'r'
   200   000E1B  3D                 	db	61	;'='
   201   000E1C  25                 	db	37
   202   000E1D  64                 	db	100	;'d'
   203   000E1E  20                 	db	32
   204   000E1F  67                 	db	103	;'g'
   205   000E20  3D                 	db	61	;'='
   206   000E21  25                 	db	37
   207   000E22  64                 	db	100	;'d'
   208   000E23  20                 	db	32
   209   000E24  62                 	db	98	;'b'
   210   000E25  3D                 	db	61	;'='
   211   000E26  25                 	db	37
   212   000E27  64                 	db	100	;'d'
   213   000E28  20                 	db	32
   214   000E29  20                 	db	32
   215   000E2A  63                 	db	99	;'c'
   216   000E2B  6F                 	db	111	;'o'
   217   000E2C  6C                 	db	108	;'l'
   218   000E2D  6F                 	db	111	;'o'
   219   000E2E  72                 	db	114	;'r'
   220   000E2F  3A                 	db	58	;':'
   221   000E30  20                 	db	32
   222   000E31  25                 	db	37
   223   000E32  64                 	db	100	;'d'
   224   000E33  20                 	db	32
   225   000E34  0D                 	db	13
   226   000E35  0A                 	db	10
   227   000E36  00                 	db	0
   228   000E37  00                 	db	0	; dummy byte at the end
   229   000000                     
   230                           ; #config settings
   231                           
   232                           	psect	cinit
   233   0028A6                     __pcinit:
   234                           	callstack 0
   235   0028A6                     start_initialization:
   236                           	callstack 0
   237   0028A6                     __initialization:
   238                           	callstack 0
   239                           
   240                           ; Clear objects allocated to BANK1 (100 bytes)
   241   0028A6  EE01  F000         	lfsr	0,__pbssBANK1
   242   0028AA  0E64               	movlw	100
   243   0028AC                     clear_0:
   244   0028AC  6AEE               	clrf	postinc0,c
   245   0028AE  06E8               	decf	wreg,f,c
   246   0028B0  E1FD               	bnz	clear_0
   247                           
   248                           ; Clear objects allocated to BANK0 (52 bytes)
   249   0028B2  EE00  F0B5         	lfsr	0,__pbssBANK0
   250   0028B6  0E34               	movlw	52
   251   0028B8                     clear_1:
   252   0028B8  6AEE               	clrf	postinc0,c
   253   0028BA  06E8               	decf	wreg,f,c
   254   0028BC  E1FD               	bnz	clear_1
   255                           
   256                           ; Clear objects allocated to COMRAM (9 bytes)
   257   0028BE  EE00  F043         	lfsr	0,__pbssCOMRAM
   258   0028C2  0E09               	movlw	9
   259   0028C4                     clear_2:
   260   0028C4  6AEE               	clrf	postinc0,c
   261   0028C6  06E8               	decf	wreg,f,c
   262   0028C8  E1FD               	bnz	clear_2
   263   0028CA                     end_of_initialization:
   264                           	callstack 0
   265   0028CA                     __end_of__initialization:
   266                           	callstack 0
   267   0028CA  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   268   0028CC  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   269   0028CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   270   0028D0  6EF8               	movwf	tblptru,c
   271   0028D2  0100               	movlb	0
   272   0028D4  EFD9  F008         	goto	_main	;jump to C main() function
   273                           
   274                           	psect	bssCOMRAM
   275   000043                     __pbssCOMRAM:
   276                           	callstack 0
   277   000043                     _width:
   278                           	callstack 0
   279   000043                     	ds	2
   280   000045                     _prec:
   281                           	callstack 0
   282   000045                     	ds	2
   283   000047                     _flags:
   284                           	callstack 0
   285   000047                     	ds	1
   286   000048                     _TxBufReadCnt:
   287                           	callstack 0
   288   000048                     	ds	1
   289   000049                     _TxBufWriteCnt:
   290                           	callstack 0
   291   000049                     	ds	1
   292   00004A                     _RxBufReadCnt:
   293                           	callstack 0
   294   00004A                     	ds	1
   295   00004B                     _RxBufWriteCnt:
   296                           	callstack 0
   297   00004B                     	ds	1
   298                           
   299                           	psect	bssBANK0
   300   0000B5                     __pbssBANK0:
   301                           	callstack 0
   302   0000B5                     _dbuf:
   303                           	callstack 0
   304   0000B5                     	ds	32
   305   0000D5                     _EUSART4RXbuf:
   306                           	callstack 0
   307   0000D5                     	ds	20
   308                           
   309                           	psect	bssBANK1
   310   000100                     __pbssBANK1:
   311                           	callstack 0
   312   000100                     _EUSART4TXbuf:
   313                           	callstack 0
   314   000100                     	ds	60
   315   00013C                     	ds	40
   316                           
   317                           	psect	cstackBANK0
   318   000060                     __pcstackBANK0:
   319                           	callstack 0
   320   000060                     main@buf:
   321                           	callstack 0
   322                           
   323                           ; 40 bytes @ 0x0
   324   000060                     	ds	40
   325   000088                     main@reverseDuration:
   326                           	callstack 0
   327                           
   328                           ; 1 bytes @ 0x28
   329   000088                     	ds	1
   330   000089                     main@turnSpeed:
   331                           	callstack 0
   332                           
   333                           ; 1 bytes @ 0x29
   334   000089                     	ds	1
   335   00008A                     main@turnDuration:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x2A
   339   00008A                     	ds	1
   340   00008B                     main@turnRamp:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x2B
   344   00008B                     	ds	1
   345   00008C                     main@ambient:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x2C
   349   00008C                     	ds	2
   350   00008E                     main@color:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x2E
   354   00008E                     	ds	1
   355   00008F                     main@straightSpeed:
   356                           	callstack 0
   357                           
   358                           ; 1 bytes @ 0x2F
   359   00008F                     	ds	1
   360   000090                     main@straightRamp:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x30
   364   000090                     	ds	1
   365   000091                     main@RGBC_n:
   366                           	callstack 0
   367                           
   368                           ; 8 bytes @ 0x31
   369   000091                     	ds	8
   370   000099                     main@RGBC:
   371                           	callstack 0
   372                           
   373                           ; 8 bytes @ 0x39
   374   000099                     	ds	8
   375   0000A1                     main@motorR:
   376                           	callstack 0
   377                           
   378                           ; 10 bytes @ 0x41
   379   0000A1                     	ds	10
   380   0000AB                     main@motorL:
   381                           	callstack 0
   382                           
   383                           ; 10 bytes @ 0x4B
   384   0000AB                     	ds	10
   385                           
   386                           	psect	cstackCOMRAM
   387   000001                     __pcstackCOMRAM:
   388                           	callstack 0
   389   000001                     ??_getCharFromTxBuf:
   390   000001                     ??i2_I2C_2_Master_Idle:
   391   000001                     putCharToRxBuf@byte:
   392                           	callstack 0
   393   000001                     
   394                           ; 1 bytes @ 0x0
   395   000001                     	ds	1
   396   000002                     i2I2C_2_Master_Write@data_byte:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x1
   400   000002                     	ds	1
   401   000003                     ??_HighISR:
   402                           
   403                           ; 1 bytes @ 0x2
   404   000003                     	ds	2
   405   000005                     ??_I2C_2_Master_Idle:
   406   000005                     ?___wmul:
   407                           	callstack 0
   408   000005                     ?___awdiv:
   409                           	callstack 0
   410   000005                     ?___awmod:
   411                           	callstack 0
   412   000005                     ?___lmul:
   413                           	callstack 0
   414   000005                     white_Light@state:
   415                           	callstack 0
   416   000005                     putCharToTxBuf@byte:
   417                           	callstack 0
   418   000005                     ADC_getval@tmpval:
   419                           	callstack 0
   420   000005                     initDCmotorsPWM@PWMperiod:
   421                           	callstack 0
   422   000005                     ___wmul@multiplier:
   423                           	callstack 0
   424   000005                     ___awdiv@dividend:
   425                           	callstack 0
   426   000005                     ___awmod@dividend:
   427                           	callstack 0
   428   000005                     fputc@c:
   429                           	callstack 0
   430   000005                     ___lmul@multiplier:
   431                           	callstack 0
   432   000005                     color_detect@RGBC_n:
   433                           	callstack 0
   434                           
   435                           ; 8 bytes @ 0x4
   436   000005                     	ds	1
   437   000006                     ??_I2C_2_Master_Read:
   438   000006                     I2C_2_Master_Write@data_byte:
   439                           	callstack 0
   440   000006                     TxBufferedString@string:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x5
   444   000006                     	ds	1
   445   000007                     color_writetoaddr@value:
   446                           	callstack 0
   447   000007                     I2C_2_Master_Read@ack:
   448                           	callstack 0
   449   000007                     fputc@fp:
   450                           	callstack 0
   451   000007                     ___wmul@multiplicand:
   452                           	callstack 0
   453   000007                     ___awdiv@divisor:
   454                           	callstack 0
   455   000007                     ___awmod@divisor:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459   000007                     	ds	1
   460   000008                     ??_fputc:
   461   000008                     color_writetoaddr@address:
   462                           	callstack 0
   463   000008                     I2C_2_Master_Read@tmp:
   464                           	callstack 0
   465                           
   466                           ; 1 bytes @ 0x7
   467   000008                     	ds	1
   468   000009                     ??_color_click_init:
   469   000009                     color_read@RGBC:
   470                           	callstack 0
   471   000009                     ___awdiv@counter:
   472                           	callstack 0
   473   000009                     ___awmod@counter:
   474                           	callstack 0
   475   000009                     ___wmul@product:
   476                           	callstack 0
   477   000009                     ___lmul@multiplicand:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0x8
   481   000009                     	ds	1
   482   00000A                     ??_color_read:
   483   00000A                     ___awdiv@sign:
   484                           	callstack 0
   485   00000A                     ___awmod@sign:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0x9
   489   00000A                     	ds	1
   490   00000B                     ?_abs:
   491                           	callstack 0
   492   00000B                     ?___lwdiv:
   493                           	callstack 0
   494   00000B                     ___awdiv@quotient:
   495                           	callstack 0
   496   00000B                     ___lwdiv@dividend:
   497                           	callstack 0
   498   00000B                     abs@a:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0xA
   502   00000B                     	ds	2
   503   00000D                     ??_abs:
   504   00000D                     color_detect@color:
   505                           	callstack 0
   506   00000D                     batteryLevel@batteryVoltage:
   507                           	callstack 0
   508   00000D                     ___lwdiv@divisor:
   509                           	callstack 0
   510   00000D                     ___lmul@product:
   511                           	callstack 0
   512                           
   513                           ; 4 bytes @ 0xC
   514   00000D                     	ds	1
   515   00000E                     batteryLevel@batteryQuarter:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0xD
   519   00000E                     	ds	1
   520   00000F                     vfpfcnvrt@fp:
   521                           	callstack 0
   522   00000F                     ___lwdiv@quotient:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0xE
   526   00000F                     	ds	1
   527   000010                     vfpfcnvrt@fmt:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0xF
   531   000010                     	ds	1
   532   000011                     ?___aldiv:
   533                           	callstack 0
   534   000011                     ___lwdiv@counter:
   535                           	callstack 0
   536   000011                     vfpfcnvrt@ap:
   537                           	callstack 0
   538   000011                     ___aldiv@dividend:
   539                           	callstack 0
   540                           
   541                           ; 4 bytes @ 0x10
   542   000011                     	ds	1
   543   000012                     ??_vfpfcnvrt:
   544   000012                     setMotorPWM@m:
   545                           	callstack 0
   546                           
   547                           ; 1 bytes @ 0x11
   548   000012                     	ds	1
   549   000013                     ??_setMotorPWM:
   550   000013                     vfpfcnvrt@done:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0x12
   554   000013                     	ds	1
   555   000014                     vfpfcnvrt@cp:
   556                           	callstack 0
   557                           
   558                           ; 1 bytes @ 0x13
   559   000014                     	ds	1
   560   000015                     setMotorPWM@posDuty:
   561                           	callstack 0
   562   000015                     ___aldiv@divisor:
   563                           	callstack 0
   564   000015                     vfpfcnvrt@convarg:
   565                           	callstack 0
   566                           
   567                           ; 4 bytes @ 0x14
   568   000015                     	ds	1
   569   000016                     setMotorPWM@negDuty:
   570                           	callstack 0
   571                           
   572                           ; 1 bytes @ 0x15
   573   000016                     	ds	1
   574   000017                     stop@mL:
   575                           	callstack 0
   576   000017                     turnLeft@mL:
   577                           	callstack 0
   578   000017                     turnRight@mL:
   579                           	callstack 0
   580   000017                     fullSpeedAhead@mL:
   581                           	callstack 0
   582   000017                     reverseOneSquare@mL:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0x16
   586   000017                     	ds	1
   587   000018                     stop@mR:
   588                           	callstack 0
   589   000018                     turnLeft@mR:
   590                           	callstack 0
   591   000018                     turnRight@mR:
   592                           	callstack 0
   593   000018                     fullSpeedAhead@mR:
   594                           	callstack 0
   595   000018                     reverseOneSquare@mR:
   596                           	callstack 0
   597                           
   598                           ; 1 bytes @ 0x17
   599   000018                     	ds	1
   600   000019                     stop@straightRamp:
   601                           	callstack 0
   602   000019                     turnLeft@turnSpeed:
   603                           	callstack 0
   604   000019                     turnRight@turnSpeed:
   605                           	callstack 0
   606   000019                     fullSpeedAhead@straightSpeed:
   607                           	callstack 0
   608   000019                     reverseOneSquare@straightSpeed:
   609                           	callstack 0
   610   000019                     ___aldiv@counter:
   611                           	callstack 0
   612   000019                     vfpfcnvrt@c:
   613                           	callstack 0
   614                           
   615                           ; 1 bytes @ 0x18
   616   000019                     	ds	1
   617   00001A                     ??_stop:
   618   00001A                     ?_vfprintf:
   619                           	callstack 0
   620   00001A                     turnLeft@turnDuration:
   621                           	callstack 0
   622   00001A                     turnRight@turnDuration:
   623                           	callstack 0
   624   00001A                     fullSpeedAhead@straightRamp:
   625                           	callstack 0
   626   00001A                     reverseOneSquare@reverseDuration:
   627                           	callstack 0
   628   00001A                     ___aldiv@sign:
   629                           	callstack 0
   630   00001A                     vfprintf@fp:
   631                           	callstack 0
   632                           
   633                           ; 1 bytes @ 0x19
   634   00001A                     	ds	1
   635   00001B                     ??_fullSpeedAhead:
   636   00001B                     turnLeft@turnRamp:
   637                           	callstack 0
   638   00001B                     turnRight@turnRamp:
   639                           	callstack 0
   640   00001B                     reverseOneSquare@straightRamp:
   641                           	callstack 0
   642   00001B                     vfprintf@fmt:
   643                           	callstack 0
   644   00001B                     ___aldiv@quotient:
   645                           	callstack 0
   646                           
   647                           ; 4 bytes @ 0x1A
   648   00001B                     	ds	1
   649   00001C                     ??_turnRight:
   650   00001C                     ??_turnLeft:
   651   00001C                     ??_reverseOneSquare:
   652   00001C                     vfprintf@ap:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0x1B
   656   00001C                     	ds	1
   657   00001D                     vfprintf@cfmt:
   658                           	callstack 0
   659   00001D                     stop@i:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x1C
   663   00001D                     	ds	1
   664   00001E                     ?_sprintf:
   665                           	callstack 0
   666   00001E                     sprintf@s:
   667                           	callstack 0
   668   00001E                     fullSpeedAhead@i:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x1D
   672   00001E                     	ds	1
   673   00001F                     sprintf@fmt:
   674                           	callstack 0
   675   00001F                     stop@cur_power:
   676                           	callstack 0
   677   00001F                     turnLeft@i:
   678                           	callstack 0
   679   00001F                     turnRight@i:
   680                           	callstack 0
   681   00001F                     reverseOneSquare@i:
   682                           	callstack 0
   683   00001F                     color_normalise@RGBC:
   684                           	callstack 0
   685                           
   686                           ; 8 bytes @ 0x1E
   687   00001F                     	ds	1
   688   000020                     fullSpeedAhead@cur_power:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x1F
   692   000020                     	ds	1
   693   000021                     turnLeft@cur_power:
   694                           	callstack 0
   695   000021                     turnRight@cur_power:
   696                           	callstack 0
   697   000021                     reverseOneSquare@cur_power:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x20
   701   000021                     	ds	2
   702   000023                     move@mL:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x22
   706   000023                     	ds	1
   707   000024                     move@mR:
   708                           	callstack 0
   709                           
   710                           ; 1 bytes @ 0x23
   711   000024                     	ds	1
   712   000025                     move@color:
   713                           	callstack 0
   714                           
   715                           ; 1 bytes @ 0x24
   716   000025                     	ds	1
   717   000026                     move@straightSpeed:
   718                           	callstack 0
   719                           
   720                           ; 1 bytes @ 0x25
   721   000026                     	ds	1
   722   000027                     color_normalise@RGBC_n:
   723                           	callstack 0
   724   000027                     move@reverseDuration:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x26
   728   000027                     	ds	1
   729   000028                     ??_color_normalise:
   730   000028                     move@straightRamp:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x27
   734   000028                     	ds	1
   735   000029                     move@turnSpeed:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0x28
   739   000029                     	ds	1
   740   00002A                     move@turnDuration:
   741                           	callstack 0
   742                           
   743                           ; 1 bytes @ 0x29
   744   00002A                     	ds	1
   745   00002B                     move@turnRamp:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x2A
   749   00002B                     	ds	1
   750   00002C                     ??_move:
   751                           
   752                           ; 1 bytes @ 0x2B
   753   00002C                     	ds	4
   754   000030                     sprintf@ap:
   755                           	callstack 0
   756                           
   757                           ; 1 bytes @ 0x2F
   758   000030                     	ds	1
   759   000031                     sprintf@f:
   760                           	callstack 0
   761                           
   762                           ; 12 bytes @ 0x30
   763   000031                     	ds	12
   764   00003D                     ??_main:
   765                           
   766                           ; 1 bytes @ 0x3C
   767   00003D                     	ds	6
   768                           
   769 ;;
   770 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   771 ;;
   772 ;; *************** function _main *****************
   773 ;; Defined at:
   774 ;;		line 23 in file "main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  buf            40    0[BANK0 ] unsigned char [40]
   779 ;;  motorL         10   75[BANK0 ] struct DC_motor
   780 ;;  motorR         10   65[BANK0 ] struct DC_motor
   781 ;;  RGBC            8   57[BANK0 ] struct RGBC_val
   782 ;;  RGBC_n          8   49[BANK0 ] struct RGBC_val
   783 ;;  PWMcycle        2    0        unsigned int 
   784 ;;  ambient         2   44[BANK0 ] unsigned int 
   785 ;;  straightRamp    1   48[BANK0 ] unsigned char 
   786 ;;  straightSpee    1   47[BANK0 ] unsigned char 
   787 ;;  color           1   46[BANK0 ] unsigned char 
   788 ;;  turnRamp        1   43[BANK0 ] unsigned char 
   789 ;;  turnDuration    1   42[BANK0 ] unsigned char 
   790 ;;  turnSpeed       1   41[BANK0 ] unsigned char 
   791 ;;  reverseDurat    1   40[BANK0 ] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   802 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   803 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   804 ;;      Totals:         6      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   805 ;;Total ram usage:       91 bytes
   806 ;; Hardware stack levels required when called: 8
   807 ;; This function calls:
   808 ;;		_Buggy_init
   809 ;;		_Interrupts_init
   810 ;;		_TxBufferedString
   811 ;;		_batteryLevel
   812 ;;		_color_click_init
   813 ;;		_color_detect
   814 ;;		_color_normalise
   815 ;;		_color_read
   816 ;;		_fullSpeedAhead
   817 ;;		_initDCmotorsPWM
   818 ;;		_initUSART4
   819 ;;		_move
   820 ;;		_sendTxBuf
   821 ;;		_sprintf
   822 ;;		_stop
   823 ;;		_white_Light
   824 ;; This function is called by:
   825 ;;		Startup code after reset
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text0
   830   0011B2                     __ptext0:
   831                           	callstack 0
   832   0011B2                     _main:
   833                           	callstack 23
   834   0011B2                     
   835                           ;main.c: 24:     Buggy_init();
   836   0011B2  EC04  F014         	call	_Buggy_init	;wreg free
   837   0011B6                     
   838                           ;main.c: 25:     color_click_init();
   839   0011B6  EC39  F013         	call	_color_click_init	;wreg free
   840   0011BA                     
   841                           ;main.c: 26:     Interrupts_init();
   842   0011BA  EC69  F015         	call	_Interrupts_init	;wreg free
   843   0011BE                     
   844                           ;main.c: 27:     initUSART4();
   845   0011BE  EC1C  F015         	call	_initUSART4	;wreg free
   846   0011C2                     
   847                           ;main.c: 28:     char buf[40] = {0};
   848   0011C2  EE20  F060         	lfsr	2,main@buf
   849   0011C6  0E27               	movlw	39
   850   0011C8                     u2031:
   851   0011C8  6ADE               	clrf	postinc2,c
   852   0011CA  06E8               	decf	wreg,f,c
   853   0011CC  E2FD               	bc	u2031
   854   0011CE                     
   855                           ;main.c: 30:     initDCmotorsPWM(PWMcycle);
   856   0011CE  0E00               	movlw	0
   857   0011D0  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   858   0011D2  0EC7               	movlw	199
   859   0011D4  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   860   0011D6  EC48  F012         	call	_initDCmotorsPWM	;wreg free
   861   0011DA                     
   862                           ;main.c: 31:     struct RGBC_val RGBC, RGBC_n;;main.c: 32:     unsigned char color;;main
      +                          .c: 35:     struct DC_motor motorL, motorR;;main.c: 37:     motorL.power=0;
   863   0011DA  0E00               	movlw	0
   864   0011DC  0100               	movlb	0	; () banked
   865   0011DE  6FAB               	movwf	main@motorL& (0+255),b
   866   0011E0                     
   867                           ; BSR set to: 0
   868                           ;main.c: 38:     motorL.direction=1;
   869   0011E0  0E01               	movlw	1
   870   0011E2  6FAC               	movwf	(main@motorL+1)& (0+255),b
   871   0011E4                     
   872                           ; BSR set to: 0
   873                           ;main.c: 39:     motorL.brakemode=1;
   874   0011E4  0E01               	movlw	1
   875   0011E6  6FAD               	movwf	(main@motorL+2)& (0+255),b
   876   0011E8                     
   877                           ; BSR set to: 0
   878                           ;main.c: 40:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   879   0011E8  0EAA               	movlw	170
   880   0011EA  6FB0               	movwf	(main@motorL+5)& (0+255),b
   881   0011EC  0E0F               	movlw	15
   882   0011EE  6FB1               	movwf	(main@motorL+6)& (0+255),b
   883   0011F0                     
   884                           ; BSR set to: 0
   885                           ;main.c: 41:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   886   0011F0  0EA6               	movlw	166
   887   0011F2  6FB2               	movwf	(main@motorL+7)& (0+255),b
   888   0011F4  0E0F               	movlw	15
   889   0011F6  6FB3               	movwf	(main@motorL+8)& (0+255),b
   890   0011F8                     
   891                           ; BSR set to: 0
   892                           ;main.c: 42:     motorL.PWMperiod=PWMcycle;
   893   0011F8  0E00               	movlw	0
   894   0011FA  6FAF               	movwf	(main@motorL+4)& (0+255),b
   895   0011FC  0EC7               	movlw	199
   896   0011FE  6FAE               	movwf	(main@motorL+3)& (0+255),b
   897   001200                     
   898                           ; BSR set to: 0
   899                           ;main.c: 43:     motorL.compensation=3;
   900   001200  0E03               	movlw	3
   901   001202  6FB4               	movwf	(main@motorL+9)& (0+255),b
   902   001204                     
   903                           ; BSR set to: 0
   904                           ;main.c: 45:     motorR.power=0;
   905   001204  0E00               	movlw	0
   906   001206  6FA1               	movwf	main@motorR& (0+255),b
   907   001208                     
   908                           ; BSR set to: 0
   909                           ;main.c: 46:     motorR.direction=1;
   910   001208  0E01               	movlw	1
   911   00120A  6FA2               	movwf	(main@motorR+1)& (0+255),b
   912   00120C                     
   913                           ; BSR set to: 0
   914                           ;main.c: 47:     motorR.brakemode=1;
   915   00120C  0E01               	movlw	1
   916   00120E  6FA3               	movwf	(main@motorR+2)& (0+255),b
   917   001210                     
   918                           ; BSR set to: 0
   919                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   920   001210  0E25               	movlw	37
   921   001212  6FA6               	movwf	(main@motorR+5)& (0+255),b
   922   001214  0E0F               	movlw	15
   923   001216  6FA7               	movwf	(main@motorR+6)& (0+255),b
   924   001218                     
   925                           ; BSR set to: 0
   926                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   927   001218  0E21               	movlw	33
   928   00121A  6FA8               	movwf	(main@motorR+7)& (0+255),b
   929   00121C  0E0F               	movlw	15
   930   00121E  6FA9               	movwf	(main@motorR+8)& (0+255),b
   931   001220                     
   932                           ; BSR set to: 0
   933                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
   934   001220  0E00               	movlw	0
   935   001222  6FA5               	movwf	(main@motorR+4)& (0+255),b
   936   001224  0EC7               	movlw	199
   937   001226  6FA4               	movwf	(main@motorR+3)& (0+255),b
   938   001228                     
   939                           ; BSR set to: 0
   940                           ;main.c: 51:     motorR.compensation=0;
   941   001228  0E00               	movlw	0
   942   00122A  6FAA               	movwf	(main@motorR+9)& (0+255),b
   943   00122C                     
   944                           ; BSR set to: 0
   945                           ;main.c: 54:     char straightSpeed=50;
   946   00122C  0E32               	movlw	50
   947   00122E  6F8F               	movwf	main@straightSpeed& (0+255),b
   948   001230                     
   949                           ; BSR set to: 0
   950                           ;main.c: 55:     unsigned char straightRamp=2;
   951   001230  0E02               	movlw	2
   952   001232  6F90               	movwf	main@straightRamp& (0+255),b
   953   001234                     
   954                           ; BSR set to: 0
   955                           ;main.c: 57:     unsigned char reverseDuration=10;
   956   001234  0E0A               	movlw	10
   957   001236  6F88               	movwf	main@reverseDuration& (0+255),b
   958   001238                     
   959                           ; BSR set to: 0
   960                           ;main.c: 59:     char turnSpeed=21;
   961   001238  0E15               	movlw	21
   962   00123A  6F89               	movwf	main@turnSpeed& (0+255),b
   963   00123C                     
   964                           ; BSR set to: 0
   965                           ;main.c: 60:     unsigned char turnDuration=10;
   966   00123C  0E0A               	movlw	10
   967   00123E  6F8A               	movwf	main@turnDuration& (0+255),b
   968   001240                     
   969                           ; BSR set to: 0
   970                           ;main.c: 61:     unsigned char turnRamp=4;
   971   001240  0E04               	movlw	4
   972   001242  6F8B               	movwf	main@turnRamp& (0+255),b
   973   001244                     
   974                           ; BSR set to: 0
   975                           ;main.c: 64:     batteryLevel();
   976   001244  EC9D  F013         	call	_batteryLevel	;wreg free
   977   001248                     l67:
   978   001248  B48E               	btfsc	142,2,c	;volatile
   979   00124A  EF29  F009         	goto	u2041
   980   00124E  EF2B  F009         	goto	u2040
   981   001252                     u2041:
   982   001252  EF24  F009         	goto	l67
   983   001256                     u2040:
   984   001256                     
   985                           ;main.c: 68:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   986   001256  9680               	bcf	128,3,c	;volatile
   987   001258  9E7C               	bcf	124,7,c	;volatile
   988                           
   989                           ;main.c: 90:     LATHbits.LATH1=LATDbits.LATD3=1;
   990   00125A  867C               	bsf	124,3,c	;volatile
   991   00125C  8280               	bsf	128,1,c	;volatile
   992   00125E                     
   993                           ;main.c: 91:     _delay((unsigned long)((500)*(64000000/4000.0)));
   994   00125E  0E29               	movlw	41
   995   001260  6E3E               	movwf	(??_main+1)^0,c
   996   001262  0E96               	movlw	150
   997   001264  6E3D               	movwf	??_main^0,c
   998   001266  0E7F               	movlw	127
   999   001268                     u2237:
  1000   001268  2EE8               	decfsz	wreg,f,c
  1001   00126A  D7FE               	bra	u2237
  1002   00126C  2E3D               	decfsz	??_main^0,f,c
  1003   00126E  D7FC               	bra	u2237
  1004   001270  2E3E               	decfsz	(??_main+1)^0,f,c
  1005   001272  D7FA               	bra	u2237
  1006   001274  0000               	nop	
  1007   001276                     
  1008                           ;main.c: 96:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1009   001276  8680               	bsf	128,3,c	;volatile
  1010   001278  8E7C               	bsf	124,7,c	;volatile
  1011                           
  1012                           ;main.c: 97:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1013   00127A  0E29               	movlw	41
  1014   00127C  6E3E               	movwf	(??_main+1)^0,c
  1015   00127E  0E96               	movlw	150
  1016   001280  6E3D               	movwf	??_main^0,c
  1017   001282  0E7F               	movlw	127
  1018   001284                     u2247:
  1019   001284  2EE8               	decfsz	wreg,f,c
  1020   001286  D7FE               	bra	u2247
  1021   001288  2E3D               	decfsz	??_main^0,f,c
  1022   00128A  D7FC               	bra	u2247
  1023   00128C  2E3E               	decfsz	(??_main+1)^0,f,c
  1024   00128E  D7FA               	bra	u2247
  1025   001290  0000               	nop	
  1026   001292                     
  1027                           ;main.c: 98:     unsigned int ambient;;main.c: 99:     color_read(&RGBC);
  1028   001292  0E99               	movlw	low main@RGBC
  1029   001294  6E09               	movwf	color_read@RGBC^0,c
  1030   001296  EC29  F00A         	call	_color_read	;wreg free
  1031   00129A                     
  1032                           ;main.c: 100:     ambient=RGBC.C;
  1033   00129A  C09F  F08C         	movff	main@RGBC+6,main@ambient
  1034   00129E  C0A0  F08D         	movff	main@RGBC+7,main@ambient+1
  1035   0012A2                     
  1036                           ;main.c: 101:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1037   0012A2  9680               	bcf	128,3,c	;volatile
  1038   0012A4  9E7C               	bcf	124,7,c	;volatile
  1039   0012A6                     
  1040                           ;main.c: 104:     white_Light(1);
  1041   0012A6  0E01               	movlw	1
  1042   0012A8  ECFA  F014         	call	_white_Light
  1043   0012AC                     
  1044                           ;main.c: 106:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1045   0012AC  0EAB               	movlw	low main@motorL
  1046   0012AE  6E17               	movwf	fullSpeedAhead@mL^0,c
  1047   0012B0  0EA1               	movlw	low main@motorR
  1048   0012B2  6E18               	movwf	fullSpeedAhead@mR^0,c
  1049   0012B4  0E32               	movlw	50
  1050   0012B6  6E19               	movwf	fullSpeedAhead@straightSpeed^0,c
  1051   0012B8  0E02               	movlw	2
  1052   0012BA  6E1A               	movwf	fullSpeedAhead@straightRamp^0,c
  1053   0012BC  ECD0  F010         	call	_fullSpeedAhead	;wreg free
  1054   0012C0  EF82  F009         	goto	l3095
  1055   0012C4                     l3089:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main.c: 110:             color_read(&RGBC);
  1059   0012C4  0E99               	movlw	low main@RGBC
  1060   0012C6  6E09               	movwf	color_read@RGBC^0,c
  1061   0012C8  EC29  F00A         	call	_color_read	;wreg free
  1062   0012CC                     
  1063                           ;main.c: 111:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1064   0012CC  0E19               	movlw	25
  1065   0012CE  6E3E               	movwf	(??_main+1)^0,c
  1066   0012D0  0E5A               	movlw	90
  1067   0012D2  6E3D               	movwf	??_main^0,c
  1068   0012D4  0EB2               	movlw	178
  1069   0012D6                     u2257:
  1070   0012D6  2EE8               	decfsz	wreg,f,c
  1071   0012D8  D7FE               	bra	u2257
  1072   0012DA  2E3D               	decfsz	??_main^0,f,c
  1073   0012DC  D7FC               	bra	u2257
  1074   0012DE  2E3E               	decfsz	(??_main+1)^0,f,c
  1075   0012E0  D7FA               	bra	u2257
  1076   0012E2                     
  1077                           ;main.c: 112:             LATDbits.LATD7 = !LATDbits.LATD7;
  1078   0012E2  AE7C               	btfss	124,7,c	;volatile
  1079   0012E4  EF76  F009         	goto	u2051
  1080   0012E8  EF7A  F009         	goto	u2050
  1081   0012EC                     u2051:
  1082   0012EC  6A3D               	clrf	??_main^0,c
  1083   0012EE  2A3D               	incf	??_main^0,f,c
  1084   0012F0  EF7B  F009         	goto	u2068
  1085   0012F4                     u2050:
  1086   0012F4  6A3D               	clrf	??_main^0,c
  1087   0012F6                     u2068:
  1088   0012F6  323D               	rrcf	??_main^0,f,c
  1089   0012F8  323D               	rrcf	??_main^0,f,c
  1090   0012FA  507C               	movf	124,w,c	;volatile
  1091   0012FC  183D               	xorwf	??_main^0,w,c
  1092   0012FE  0B7F               	andlw	-129
  1093   001300  183D               	xorwf	??_main^0,w,c
  1094   001302  6E7C               	movwf	124,c	;volatile
  1095   001304                     l3095:
  1096                           
  1097                           ;main.c: 109:         while (ambient-1< RGBC.C < ambient+1 ){
  1098   001304  0E01               	movlw	1
  1099   001306  0100               	movlb	0	; () banked
  1100   001308  258C               	addwf	main@ambient& (0+255),w,b
  1101   00130A  6E3D               	movwf	??_main^0,c
  1102   00130C  0E00               	movlw	0
  1103   00130E  218D               	addwfc	(main@ambient+1)& (0+255),w,b
  1104   001310  6E3E               	movwf	(??_main+1)^0,c
  1105   001312  0EFF               	movlw	255
  1106   001314  258C               	addwf	main@ambient& (0+255),w,b
  1107   001316  6E3F               	movwf	(??_main+2)^0,c
  1108   001318  0EFF               	movlw	255
  1109   00131A  218D               	addwfc	(main@ambient+1)& (0+255),w,b
  1110   00131C  6E40               	movwf	(??_main+3)^0,c
  1111   00131E  519F               	movf	(main@RGBC+6)& (0+255),w,b
  1112   001320  5C3F               	subwf	(??_main+2)^0,w,c
  1113   001322  51A0               	movf	(main@RGBC+7)& (0+255),w,b
  1114   001324  5840               	subwfb	(??_main+3)^0,w,c
  1115   001326  A0D8               	btfss	status,0,c
  1116   001328  EF98  F009         	goto	u2071
  1117   00132C  EF9B  F009         	goto	u2070
  1118   001330                     u2071:
  1119   001330  0E01               	movlw	1
  1120   001332  EF9C  F009         	goto	u2080
  1121   001336                     u2070:
  1122   001336  0E00               	movlw	0
  1123   001338                     u2080:
  1124   001338  6E41               	movwf	(??_main+4)^0,c
  1125   00133A  6A42               	clrf	(??_main+5)^0,c
  1126   00133C  503D               	movf	??_main^0,w,c
  1127   00133E  5C41               	subwf	(??_main+4)^0,w,c
  1128   001340  503E               	movf	(??_main+1)^0,w,c
  1129   001342  5842               	subwfb	(??_main+5)^0,w,c
  1130   001344  A0D8               	btfss	status,0,c
  1131   001346  EFA7  F009         	goto	u2091
  1132   00134A  EFA9  F009         	goto	u2090
  1133   00134E                     u2091:
  1134   00134E  EF62  F009         	goto	l3089
  1135   001352                     u2090:
  1136   001352                     
  1137                           ; BSR set to: 0
  1138                           ;main.c: 114:         LATHbits.LATH3 = 1;
  1139   001352  8680               	bsf	128,3,c	;volatile
  1140   001354                     
  1141                           ; BSR set to: 0
  1142                           ;main.c: 115:         stop(&motorL, &motorR, straightRamp);
  1143   001354  0EAB               	movlw	low main@motorL
  1144   001356  6E17               	movwf	stop@mL^0,c
  1145   001358  0EA1               	movlw	low main@motorR
  1146   00135A  6E18               	movwf	stop@mR^0,c
  1147   00135C  C090  F019         	movff	main@straightRamp,stop@straightRamp
  1148   001360  EC59  F010         	call	_stop	;wreg free
  1149   001364                     
  1150                           ;main.c: 116:         color_read(&RGBC);
  1151   001364  0E99               	movlw	low main@RGBC
  1152   001366  6E09               	movwf	color_read@RGBC^0,c
  1153   001368  EC29  F00A         	call	_color_read	;wreg free
  1154   00136C                     
  1155                           ;main.c: 117:         color_normalise(RGBC, &RGBC_n);
  1156   00136C  EE20  F099         	lfsr	2,main@RGBC
  1157   001370  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1158   001374  0E07               	movlw	7
  1159   001376                     u2101:
  1160   001376  CFDB FFEB          	movff	plusw2,plusw0
  1161   00137A  06E8               	decf	wreg,f,c
  1162   00137C  E2FC               	bc	u2101
  1163   00137E  0E91               	movlw	low main@RGBC_n
  1164   001380  6E27               	movwf	color_normalise@RGBC_n^0,c
  1165   001382  EC32  F00F         	call	_color_normalise	;wreg free
  1166   001386                     
  1167                           ;main.c: 118:         color = color_detect(RGBC_n);
  1168   001386  EE20  F091         	lfsr	2,main@RGBC_n
  1169   00138A  EE00  F005         	lfsr	0,color_detect@RGBC_n
  1170   00138E  0E07               	movlw	7
  1171   001390                     u2111:
  1172   001390  CFDB FFEB          	movff	plusw2,plusw0
  1173   001394  06E8               	decf	wreg,f,c
  1174   001396  E2FC               	bc	u2111
  1175   001398  ECCA  F012         	call	_color_detect	;wreg free
  1176   00139C  0100               	movlb	0	; () banked
  1177   00139E  6F8E               	movwf	main@color& (0+255),b
  1178   0013A0                     
  1179                           ; BSR set to: 0
  1180                           ;main.c: 119:         move(&motorL, &motorR, color, straightSpeed, reverseDuration, stra
      +                          ightRamp, turnSpeed, turnDuration, turnRamp);
  1181   0013A0  0EAB               	movlw	low main@motorL
  1182   0013A2  6E23               	movwf	move@mL^0,c
  1183   0013A4  0EA1               	movlw	low main@motorR
  1184   0013A6  6E24               	movwf	move@mR^0,c
  1185   0013A8  C08E  F025         	movff	main@color,move@color
  1186   0013AC  C08F  F026         	movff	main@straightSpeed,move@straightSpeed
  1187   0013B0  C088  F027         	movff	main@reverseDuration,move@reverseDuration
  1188   0013B4  C090  F028         	movff	main@straightRamp,move@straightRamp
  1189   0013B8  C089  F029         	movff	main@turnSpeed,move@turnSpeed
  1190   0013BC  C08A  F02A         	movff	main@turnDuration,move@turnDuration
  1191   0013C0  C08B  F02B         	movff	main@turnRamp,move@turnRamp
  1192   0013C4  EC1C  F007         	call	_move	;wreg free
  1193   0013C8                     
  1194                           ;main.c: 121:         sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d  color: %d \r
      +                          \n",RGBC.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B,color);
  1195   0013C8  0E60               	movlw	low main@buf
  1196   0013CA  6E1E               	movwf	sprintf@s^0,c
  1197   0013CC  0E01               	movlw	low STR_1
  1198   0013CE  6E1F               	movwf	sprintf@fmt^0,c
  1199   0013D0  C099  F020         	movff	main@RGBC,?_sprintf+2
  1200   0013D4  C09A  F021         	movff	main@RGBC+1,?_sprintf+3
  1201   0013D8  C09B  F022         	movff	main@RGBC+2,?_sprintf+4
  1202   0013DC  C09C  F023         	movff	main@RGBC+3,?_sprintf+5
  1203   0013E0  C09D  F024         	movff	main@RGBC+4,?_sprintf+6
  1204   0013E4  C09E  F025         	movff	main@RGBC+5,?_sprintf+7
  1205   0013E8  C09F  F026         	movff	main@RGBC+6,?_sprintf+8
  1206   0013EC  C0A0  F027         	movff	main@RGBC+7,?_sprintf+9
  1207   0013F0  C091  F028         	movff	main@RGBC_n,?_sprintf+10
  1208   0013F4  C092  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1209   0013F8  C093  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1210   0013FC  C094  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1211   001400  C095  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1212   001404  C096  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1213   001408  C08E  F02E         	movff	main@color,?_sprintf+16
  1214   00140C  6A2F               	clrf	(?_sprintf+17)^0,c
  1215   00140E  EC1F  F014         	call	_sprintf	;wreg free
  1216   001412                     
  1217                           ;main.c: 122:         sendTxBuf();
  1218   001412  EC2B  F015         	call	_sendTxBuf	;wreg free
  1219   001416                     
  1220                           ;main.c: 123:         TxBufferedString(buf);
  1221   001416  0E60               	movlw	low main@buf
  1222   001418  6E06               	movwf	TxBufferedString@string^0,c
  1223   00141A  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1224   00141C  EC6C  F013         	call	_TxBufferedString	;wreg free
  1225   001420                     
  1226                           ;main.c: 124:         sendTxBuf();
  1227   001420  EC2B  F015         	call	_sendTxBuf	;wreg free
  1228   001424                     
  1229                           ;main.c: 125:         TxBufferedString("");
  1230   001424  0E36               	movlw	low (STR_1+53)
  1231   001426  6E06               	movwf	TxBufferedString@string^0,c
  1232   001428  5006               	movf	TxBufferedString@string^0,w,c
  1233   00142A  A4D8               	btfss	status,2,c
  1234   00142C  0E0E               	movlw	high __smallconst
  1235   00142E  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1236   001430  EC6C  F013         	call	_TxBufferedString	;wreg free
  1237   001434                     
  1238                           ;main.c: 126:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1239   001434  0E19               	movlw	25
  1240   001436  6E3E               	movwf	(??_main+1)^0,c
  1241   001438  0E5A               	movlw	90
  1242   00143A  6E3D               	movwf	??_main^0,c
  1243   00143C  0EB2               	movlw	178
  1244   00143E                     u2267:
  1245   00143E  2EE8               	decfsz	wreg,f,c
  1246   001440  D7FE               	bra	u2267
  1247   001442  2E3D               	decfsz	??_main^0,f,c
  1248   001444  D7FC               	bra	u2267
  1249   001446  2E3E               	decfsz	(??_main+1)^0,f,c
  1250   001448  D7FA               	bra	u2267
  1251   00144A  EF82  F009         	goto	l3095
  1252   00144E  EF46  F000         	goto	start
  1253   001452                     __end_of_main:
  1254                           	callstack 0
  1255                           
  1256 ;; *************** function _white_Light *****************
  1257 ;; Defined at:
  1258 ;;		line 40 in file "color.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  state           1    wreg     unsigned char 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  state           1    4[COMRAM] unsigned char 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1276 ;;Total ram usage:        1 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 3
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text1
  1287   0029F4                     __ptext1:
  1288                           	callstack 0
  1289   0029F4                     _white_Light:
  1290                           	callstack 27
  1291                           
  1292                           ;incstack = 0
  1293                           ;white_Light@state stored from wreg
  1294   0029F4  6E05               	movwf	white_Light@state^0,c
  1295   0029F6                     
  1296                           ;color.c: 40: void white_Light(char state);color.c: 41: {;color.c: 42:     if (state){
  1297   0029F6  5005               	movf	white_Light@state^0,w,c
  1298   0029F8  B4D8               	btfsc	status,2,c
  1299   0029FA  EF01  F015         	goto	u1831
  1300   0029FE  EF03  F015         	goto	u1830
  1301   002A02                     u1831:
  1302   002A02  EF08  F015         	goto	l107
  1303   002A06                     u1830:
  1304   002A06                     
  1305                           ;color.c: 43:         LATGbits.LATG0 = 1;
  1306   002A06  807F               	bsf	127,0,c	;volatile
  1307                           
  1308                           ;color.c: 44:         LATEbits.LATE7 = 1;
  1309   002A08  8E7D               	bsf	125,7,c	;volatile
  1310                           
  1311                           ;color.c: 45:         LATAbits.LATA3 = 1;
  1312   002A0A  8679               	bsf	121,3,c	;volatile
  1313                           
  1314                           ;color.c: 46:     }
  1315   002A0C  EF0B  F015         	goto	l109
  1316   002A10                     l107:
  1317                           
  1318                           ;color.c: 48:         LATGbits.LATG0 = 0;
  1319   002A10  907F               	bcf	127,0,c	;volatile
  1320                           
  1321                           ;color.c: 49:         LATEbits.LATE7 = 0;
  1322   002A12  9E7D               	bcf	125,7,c	;volatile
  1323                           
  1324                           ;color.c: 50:         LATAbits.LATA3 = 0;
  1325   002A14  9679               	bcf	121,3,c	;volatile
  1326   002A16                     l109:
  1327   002A16  0012               	return		;funcret
  1328   002A18                     __end_of_white_Light:
  1329                           	callstack 0
  1330                           
  1331 ;; *************** function _stop *****************
  1332 ;; Defined at:
  1333 ;;		line 162 in file "dc_motor.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  1336 ;;		 -> main@motorL(10), 
  1337 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  1338 ;;		 -> main@motorR(10), 
  1339 ;;  straightRamp    1   24[COMRAM] unsigned char 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  cur_power       2   30[COMRAM] int 
  1342 ;;  i               2   28[COMRAM] int 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;Total ram usage:       10 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 5
  1359 ;; This function calls:
  1360 ;;		_setMotorPWM
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text2
  1367   0020B2                     __ptext2:
  1368                           	callstack 0
  1369   0020B2                     _stop:
  1370                           	callstack 25
  1371   0020B2                     
  1372                           ;dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 163: {;dc_motor.c: 164:     mL->direction = 1;
  1373   0020B2  5017               	movf	stop@mL^0,w,c
  1374   0020B4  6ED9               	movwf	fsr2l,c
  1375   0020B6  6ADA               	clrf	fsr2h,c
  1376   0020B8  0E01               	movlw	1
  1377   0020BA  26D9               	addwf	fsr2l,f,c
  1378   0020BC  0E01               	movlw	1
  1379   0020BE  6EDF               	movwf	indf2,c
  1380                           
  1381                           ;dc_motor.c: 165:     mR->direction = 1;
  1382   0020C0  5018               	movf	stop@mR^0,w,c
  1383   0020C2  6ED9               	movwf	fsr2l,c
  1384   0020C4  6ADA               	clrf	fsr2h,c
  1385   0020C6  0E01               	movlw	1
  1386   0020C8  26D9               	addwf	fsr2l,f,c
  1387   0020CA  0E01               	movlw	1
  1388   0020CC  6EDF               	movwf	indf2,c
  1389                           
  1390                           ;dc_motor.c: 166:     int i;;dc_motor.c: 167:     int cur_power;;dc_motor.c: 168:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  1391   0020CE  5017               	movf	stop@mL^0,w,c
  1392   0020D0  6ED9               	movwf	fsr2l,c
  1393   0020D2  6ADA               	clrf	fsr2h,c
  1394   0020D4  50DF               	movf	indf2,w,c
  1395   0020D6  6E1A               	movwf	??_stop^0,c
  1396   0020D8  5017               	movf	stop@mL^0,w,c
  1397   0020DA  6ED9               	movwf	fsr2l,c
  1398   0020DC  6ADA               	clrf	fsr2h,c
  1399   0020DE  0E09               	movlw	9
  1400   0020E0  26D9               	addwf	fsr2l,f,c
  1401   0020E2  50DF               	movf	indf2,w,c
  1402   0020E4  6E1B               	movwf	(??_stop+1)^0,c
  1403   0020E6  501B               	movf	(??_stop+1)^0,w,c
  1404   0020E8  5C1A               	subwf	??_stop^0,w,c
  1405   0020EA  6E1F               	movwf	stop@cur_power^0,c
  1406   0020EC  6A20               	clrf	(stop@cur_power+1)^0,c
  1407   0020EE  A0D8               	btfss	status,0,c
  1408   0020F0  0620               	decf	(stop@cur_power+1)^0,f,c
  1409   0020F2                     l2833:
  1410   0020F2  BE20               	btfsc	(stop@cur_power+1)^0,7,c
  1411   0020F4  EF80  F010         	goto	u1840
  1412   0020F8  EF7E  F010         	goto	u1841
  1413   0020FC                     u1841:
  1414   0020FC  EF82  F010         	goto	l2837
  1415   002100                     u1840:
  1416   002100  EFC7  F010         	goto	l2853
  1417   002104                     l2837:
  1418                           
  1419                           ;dc_motor.c: 169:         mL->power = cur_power+mL->compensation;
  1420   002104  5017               	movf	stop@mL^0,w,c
  1421   002106  6ED9               	movwf	fsr2l,c
  1422   002108  6ADA               	clrf	fsr2h,c
  1423   00210A  5017               	movf	stop@mL^0,w,c
  1424   00210C  6EE1               	movwf	fsr1l,c
  1425   00210E  6AE2               	clrf	fsr1h,c
  1426   002110  0E09               	movlw	9
  1427   002112  26E1               	addwf	fsr1l,f,c
  1428   002114  50E7               	movf	indf1,w,c
  1429   002116  241F               	addwf	stop@cur_power^0,w,c
  1430   002118  6EDF               	movwf	indf2,c
  1431                           
  1432                           ;dc_motor.c: 170:         mR->power = cur_power+mR->compensation;
  1433   00211A  5018               	movf	stop@mR^0,w,c
  1434   00211C  6ED9               	movwf	fsr2l,c
  1435   00211E  6ADA               	clrf	fsr2h,c
  1436   002120  5018               	movf	stop@mR^0,w,c
  1437   002122  6EE1               	movwf	fsr1l,c
  1438   002124  6AE2               	clrf	fsr1h,c
  1439   002126  0E09               	movlw	9
  1440   002128  26E1               	addwf	fsr1l,f,c
  1441   00212A  50E7               	movf	indf1,w,c
  1442   00212C  241F               	addwf	stop@cur_power^0,w,c
  1443   00212E  6EDF               	movwf	indf2,c
  1444   002130                     
  1445                           ;dc_motor.c: 171:         setMotorPWM(mL);
  1446   002130  C017  F012         	movff	stop@mL,setMotorPWM@m
  1447   002134  EC88  F00E         	call	_setMotorPWM	;wreg free
  1448   002138                     
  1449                           ;dc_motor.c: 172:         setMotorPWM(mR);
  1450   002138  C018  F012         	movff	stop@mR,setMotorPWM@m
  1451   00213C  EC88  F00E         	call	_setMotorPWM	;wreg free
  1452   002140                     
  1453                           ;dc_motor.c: 173:         for (i=0;i<straightRamp;i++) {
  1454   002140  0E00               	movlw	0
  1455   002142  6E1E               	movwf	(stop@i+1)^0,c
  1456   002144  0E00               	movlw	0
  1457   002146  6E1D               	movwf	stop@i^0,c
  1458   002148  EFB0  F010         	goto	l454
  1459   00214C                     l2845:
  1460                           
  1461                           ;dc_motor.c: 174:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1462   00214C  0E68               	movlw	104
  1463   00214E  6E1A               	movwf	??_stop^0,c
  1464   002150  0EE4               	movlw	228
  1465   002152                     u2277:
  1466   002152  2EE8               	decfsz	wreg,f,c
  1467   002154  D7FE               	bra	u2277
  1468   002156  2E1A               	decfsz	??_stop^0,f,c
  1469   002158  D7FC               	bra	u2277
  1470   00215A  D000               	nop2	
  1471   00215C                     
  1472                           ;dc_motor.c: 175:         }
  1473   00215C  4A1D               	infsnz	stop@i^0,f,c
  1474   00215E  2A1E               	incf	(stop@i+1)^0,f,c
  1475   002160                     l454:
  1476   002160  5019               	movf	stop@straightRamp^0,w,c
  1477   002162  6E1A               	movwf	??_stop^0,c
  1478   002164  6A1B               	clrf	(??_stop+1)^0,c
  1479   002166  501A               	movf	??_stop^0,w,c
  1480   002168  5C1D               	subwf	stop@i^0,w,c
  1481   00216A  501E               	movf	(stop@i+1)^0,w,c
  1482   00216C  0A80               	xorlw	128
  1483   00216E  6E1C               	movwf	(??_stop+2)^0,c
  1484   002170  501B               	movf	(??_stop+1)^0,w,c
  1485   002172  0A80               	xorlw	128
  1486   002174  581C               	subwfb	(??_stop+2)^0,w,c
  1487   002176  A0D8               	btfss	status,0,c
  1488   002178  EFC0  F010         	goto	u1851
  1489   00217C  EFC2  F010         	goto	u1850
  1490   002180                     u1851:
  1491   002180  EFA6  F010         	goto	l2845
  1492   002184                     u1850:
  1493   002184                     
  1494                           ;dc_motor.c: 176:     }
  1495   002184  061F               	decf	stop@cur_power^0,f,c
  1496   002186  A0D8               	btfss	status,0,c
  1497   002188  0620               	decf	(stop@cur_power+1)^0,f,c
  1498   00218A  EF79  F010         	goto	l2833
  1499   00218E                     l2853:
  1500                           
  1501                           ;dc_motor.c: 177:     mL->power = 0;
  1502   00218E  5017               	movf	stop@mL^0,w,c
  1503   002190  6ED9               	movwf	fsr2l,c
  1504   002192  6ADA               	clrf	fsr2h,c
  1505   002194  6ADF               	clrf	indf2,c
  1506                           
  1507                           ;dc_motor.c: 178:     mR->power = 0;
  1508   002196  5018               	movf	stop@mR^0,w,c
  1509   002198  6ED9               	movwf	fsr2l,c
  1510   00219A  6ADA               	clrf	fsr2h,c
  1511   00219C  6ADF               	clrf	indf2,c
  1512   00219E  0012               	return		;funcret
  1513   0021A0                     __end_of_stop:
  1514                           	callstack 0
  1515                           
  1516 ;; *************** function _sprintf *****************
  1517 ;; Defined at:
  1518 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  s               1   29[COMRAM] PTR unsigned char 
  1521 ;;		 -> main@buf(40), 
  1522 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1523 ;;		 -> STR_1(54), 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  f              12   48[COMRAM] struct _IO_FILE
  1526 ;;  ret             2    0        int 
  1527 ;;  ap              1   47[COMRAM] PTR void [1]
  1528 ;;		 -> ?_sprintf(2), 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  2   29[COMRAM] int 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1538 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1541 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1542 ;;Total ram usage:       31 bytes
  1543 ;; Hardware stack levels used: 1
  1544 ;; Hardware stack levels required when called: 7
  1545 ;; This function calls:
  1546 ;;		_vfprintf
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text3
  1553   00283E                     __ptext3:
  1554                           	callstack 0
  1555   00283E                     _sprintf:
  1556                           	callstack 23
  1557   00283E  0E20               	movlw	low (?_sprintf+2)
  1558   002840  6E30               	movwf	sprintf@ap^0,c
  1559   002842  C01E  F031         	movff	sprintf@s,sprintf@f
  1560   002846  0E00               	movlw	0
  1561   002848  6E35               	movwf	(sprintf@f+4)^0,c
  1562   00284A  0E00               	movlw	0
  1563   00284C  6E34               	movwf	(sprintf@f+3)^0,c
  1564   00284E  0E00               	movlw	0
  1565   002850  6E3C               	movwf	(sprintf@f+11)^0,c
  1566   002852  0E00               	movlw	0
  1567   002854  6E3B               	movwf	(sprintf@f+10)^0,c
  1568   002856  0E31               	movlw	low sprintf@f
  1569   002858  6E1A               	movwf	vfprintf@fp^0,c
  1570   00285A  C01F  F01B         	movff	sprintf@fmt,vfprintf@fmt
  1571   00285E  0E30               	movlw	low sprintf@ap
  1572   002860  6E1C               	movwf	vfprintf@ap^0,c
  1573   002862  ECE5  F013         	call	_vfprintf	;wreg free
  1574   002866  501E               	movf	sprintf@s^0,w,c
  1575   002868  2434               	addwf	(sprintf@f+3)^0,w,c
  1576   00286A  6ED9               	movwf	fsr2l,c
  1577   00286C  6ADA               	clrf	fsr2h,c
  1578   00286E  6ADF               	clrf	indf2,c
  1579   002870  0012               	return		;funcret
  1580   002872                     __end_of_sprintf:
  1581                           	callstack 0
  1582                           
  1583 ;; *************** function _vfprintf *****************
  1584 ;; Defined at:
  1585 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  1588 ;;		 -> sprintf@f(12), 
  1589 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1590 ;;		 -> STR_1(54), 
  1591 ;;  ap              1   27[COMRAM] PTR PTR void 
  1592 ;;		 -> sprintf@ap(1), 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  cfmt            1   28[COMRAM] PTR unsigned char 
  1595 ;;		 -> STR_1(54), 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2   25[COMRAM] int 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1605 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1609 ;;Total ram usage:        4 bytes
  1610 ;; Hardware stack levels used: 1
  1611 ;; Hardware stack levels required when called: 6
  1612 ;; This function calls:
  1613 ;;		_vfpfcnvrt
  1614 ;; This function is called by:
  1615 ;;		_sprintf
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text4
  1620   0027CA                     __ptext4:
  1621                           	callstack 0
  1622   0027CA                     _vfprintf:
  1623                           	callstack 23
  1624   0027CA                     
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1626   0027CA  C01B  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  1627                           
  1628                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1629   0027CE  EFF1  F013         	goto	l2729
  1630   0027D2                     l2727:
  1631                           
  1632                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1633   0027D2  C01A  F00F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1634   0027D6  0E1D               	movlw	low vfprintf@cfmt
  1635   0027D8  6E10               	movwf	vfpfcnvrt@fmt^0,c
  1636   0027DA  C01C  F011         	movff	vfprintf@ap,vfpfcnvrt@ap
  1637   0027DE  ECF6  F00B         	call	_vfpfcnvrt	;wreg free
  1638   0027E2                     l2729:
  1639                           
  1640                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1641   0027E2  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1642   0027E6                     	if	1	;There is more than 1 active tblptr byte
  1643   0027E6  0E0E               	movlw	high __smallconst
  1644   0027E8  6EF7               	movwf	tblptrh,c
  1645   0027EA                     	endif
  1646   0027EA                     	if	0	;tblptru may be non-zero
  1647   0027EA                     	endif
  1648   0027EA                     	if	0	;tblptru may be non-zero
  1649   0027EA                     	endif
  1650   0027EA  0008               	tblrd		*
  1651   0027EC  50F5               	movf	tablat,w,c
  1652   0027EE  0900               	iorlw	0
  1653   0027F0  A4D8               	btfss	status,2,c
  1654   0027F2  EFFD  F013         	goto	u1781
  1655   0027F6  EFFF  F013         	goto	u1780
  1656   0027FA                     u1781:
  1657   0027FA  EFE9  F013         	goto	l2727
  1658   0027FE                     u1780:
  1659   0027FE                     
  1660                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1661   0027FE  0E00               	movlw	0
  1662   002800  6E1B               	movwf	(?_vfprintf+1)^0,c
  1663   002802  0E00               	movlw	0
  1664   002804  6E1A               	movwf	?_vfprintf^0,c
  1665   002806  0012               	return		;funcret
  1666   002808                     __end_of_vfprintf:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _vfpfcnvrt *****************
  1670 ;; Defined at:
  1671 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1674 ;;		 -> sprintf@f(12), 
  1675 ;;  fmt             1   15[COMRAM] PTR PTR unsigned char 
  1676 ;;		 -> vfprintf@cfmt(1), 
  1677 ;;  ap              1   16[COMRAM] PTR PTR void 
  1678 ;;		 -> sprintf@ap(1), 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  convarg         4   20[COMRAM] struct .
  1681 ;;  c               1   24[COMRAM] unsigned char 
  1682 ;;  cp              1   19[COMRAM] PTR unsigned char 
  1683 ;;		 -> STR_1(54), 
  1684 ;;  done            1   18[COMRAM] _Bool 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1694 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;Total ram usage:       11 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 5
  1701 ;; This function calls:
  1702 ;;		___awdiv
  1703 ;;		___awmod
  1704 ;;		_abs
  1705 ;;		_fputc
  1706 ;; This function is called by:
  1707 ;;		_vfprintf
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text5
  1712   0017EC                     __ptext5:
  1713                           	callstack 0
  1714   0017EC                     _vfpfcnvrt:
  1715                           	callstack 23
  1716   0017EC                     
  1717                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1718   0017EC  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1719   0017EE  6ED9               	movwf	fsr2l,c
  1720   0017F0  6ADA               	clrf	fsr2h,c
  1721   0017F2  CFDF FFF6          	movff	indf2,tblptrl
  1722   0017F6                     	if	1	;There is more than 1 active tblptr byte
  1723   0017F6  0E0E               	movlw	high __smallconst
  1724   0017F8  6EF7               	movwf	tblptrh,c
  1725   0017FA                     	endif
  1726   0017FA                     	if	0	;tblptru may be non-zero
  1727   0017FA                     	endif
  1728   0017FA                     	if	0	;tblptru may be non-zero
  1729   0017FA                     	endif
  1730   0017FA  0008               	tblrd		*
  1731   0017FC  50F5               	movf	tablat,w,c
  1732   0017FE  0A25               	xorlw	37
  1733   001800  A4D8               	btfss	status,2,c
  1734   001802  EF05  F00C         	goto	u1371
  1735   001806  EF07  F00C         	goto	u1370
  1736   00180A                     u1371:
  1737   00180A  EFC0  F00C         	goto	l2445
  1738   00180E                     u1370:
  1739   00180E                     
  1740                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1741   00180E  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1742   001810  6ED9               	movwf	fsr2l,c
  1743   001812  6ADA               	clrf	fsr2h,c
  1744   001814  2ADF               	incf	indf2,f,c
  1745   001816                     
  1746                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1747   001816  0E00               	movlw	0
  1748   001818  6E44               	movwf	(_width+1)^0,c
  1749   00181A  0E00               	movlw	0
  1750   00181C  6E43               	movwf	_width^0,c
  1751   00181E  C043  F047         	movff	_width,_flags
  1752   001822                     
  1753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1754   001822  6845               	setf	_prec^0,c
  1755   001824  6846               	setf	(_prec+1)^0,c
  1756   001826                     
  1757                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1758   001826  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1759   001828  6ED9               	movwf	fsr2l,c
  1760   00182A  6ADA               	clrf	fsr2h,c
  1761   00182C  50DF               	movf	indf2,w,c
  1762   00182E  6E14               	movwf	vfpfcnvrt@cp^0,c
  1763   001830                     
  1764                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1765   001830  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1766   001834                     	if	1	;There is more than 1 active tblptr byte
  1767   001834  0E0E               	movlw	high __smallconst
  1768   001836  6EF7               	movwf	tblptrh,c
  1769   001838                     	endif
  1770   001838                     	if	0	;tblptru may be non-zero
  1771   001838                     	endif
  1772   001838                     	if	0	;tblptru may be non-zero
  1773   001838                     	endif
  1774   001838  0008               	tblrd		*
  1775   00183A  50F5               	movf	tablat,w,c
  1776   00183C  0A64               	xorlw	100
  1777   00183E  B4D8               	btfsc	status,2,c
  1778   001840  EF24  F00C         	goto	u1381
  1779   001844  EF26  F00C         	goto	u1380
  1780   001848                     u1381:
  1781   001848  EF34  F00C         	goto	l2415
  1782   00184C                     u1380:
  1783   00184C  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1784   001850                     	if	1	;There is more than 1 active tblptr byte
  1785   001850  0E0E               	movlw	high __smallconst
  1786   001852  6EF7               	movwf	tblptrh,c
  1787   001854                     	endif
  1788   001854                     	if	0	;tblptru may be non-zero
  1789   001854                     	endif
  1790   001854                     	if	0	;tblptru may be non-zero
  1791   001854                     	endif
  1792   001854  0008               	tblrd		*
  1793   001856  50F5               	movf	tablat,w,c
  1794   001858  0A69               	xorlw	105
  1795   00185A  A4D8               	btfss	status,2,c
  1796   00185C  EF32  F00C         	goto	u1391
  1797   001860  EF34  F00C         	goto	u1390
  1798   001864                     u1391:
  1799   001864  EFBA  F00C         	goto	l2441
  1800   001868                     u1390:
  1801   001868                     l2415:
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1804   001868  5011               	movf	vfpfcnvrt@ap^0,w,c
  1805   00186A  6ED9               	movwf	fsr2l,c
  1806   00186C  6ADA               	clrf	fsr2h,c
  1807   00186E  0E02               	movlw	2
  1808   001870  26DF               	addwf	indf2,f,c
  1809   001872  5CDF               	subwf	indf2,w,c
  1810   001874  6ED9               	movwf	fsr2l,c
  1811   001876  6ADA               	clrf	fsr2h,c
  1812   001878  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg
  1813   00187C  CFDE F016          	movff	postinc2,vfpfcnvrt@convarg+1
  1814   001880                     
  1815                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1816   001880  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1817   001882  6ED9               	movwf	fsr2l,c
  1818   001884  6ADA               	clrf	fsr2h,c
  1819   001886  2814               	incf	vfpfcnvrt@cp^0,w,c
  1820   001888  6EDF               	movwf	indf2,c
  1821   00188A                     
  1822                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1823   00188A  0E20               	movlw	32
  1824   00188C  6E19               	movwf	vfpfcnvrt@c^0,c
  1825                           
  1826                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1827   00188E  BE16               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1828   001890  EF4C  F00C         	goto	u1401
  1829   001894  EF4F  F00C         	goto	u1400
  1830   001898                     u1401:
  1831   001898  0E01               	movlw	1
  1832   00189A  EF50  F00C         	goto	u1410
  1833   00189E                     u1400:
  1834   00189E  0E00               	movlw	0
  1835   0018A0                     u1410:
  1836   0018A0  6E13               	movwf	vfpfcnvrt@done^0,c
  1837   0018A2                     l2421:
  1838                           
  1839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1840   0018A2  0619               	decf	vfpfcnvrt@c^0,f,c
  1841   0018A4  5019               	movf	vfpfcnvrt@c^0,w,c
  1842   0018A6  0FB5               	addlw	low _dbuf
  1843   0018A8  6ED9               	movwf	fsr2l,c
  1844   0018AA  6ADA               	clrf	fsr2h,c
  1845   0018AC  C015  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1846   0018B0  C016  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1847   0018B4  0E00               	movlw	0
  1848   0018B6  6E08               	movwf	(___awmod@divisor+1)^0,c
  1849   0018B8  0E0A               	movlw	10
  1850   0018BA  6E07               	movwf	___awmod@divisor^0,c
  1851   0018BC  EC9B  F011         	call	___awmod	;wreg free
  1852   0018C0  C005  F00B         	movff	?___awmod,abs@a
  1853   0018C4  C006  F00C         	movff	?___awmod+1,abs@a+1
  1854   0018C8  EC39  F014         	call	_abs	;wreg free
  1855   0018CC  500B               	movf	?_abs^0,w,c
  1856   0018CE  0F30               	addlw	48
  1857   0018D0  6EDF               	movwf	indf2,c
  1858   0018D2                     
  1859                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1860   0018D2  C015  F005         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1861   0018D6  C016  F006         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1862   0018DA  0E00               	movlw	0
  1863   0018DC  6E08               	movwf	(___awdiv@divisor+1)^0,c
  1864   0018DE  0E0A               	movlw	10
  1865   0018E0  6E07               	movwf	___awdiv@divisor^0,c
  1866   0018E2  EC39  F011         	call	___awdiv	;wreg free
  1867   0018E6  C005  F015         	movff	?___awdiv,vfpfcnvrt@convarg
  1868   0018EA  C006  F016         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1869   0018EE                     
  1870                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1871   0018EE  5015               	movf	vfpfcnvrt@convarg^0,w,c
  1872   0018F0  1016               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1873   0018F2  B4D8               	btfsc	status,2,c
  1874   0018F4  EF7E  F00C         	goto	u1421
  1875   0018F8  EF80  F00C         	goto	u1420
  1876   0018FC                     u1421:
  1877   0018FC  EF88  F00C         	goto	l2429
  1878   001900                     u1420:
  1879   001900  5019               	movf	vfpfcnvrt@c^0,w,c
  1880   001902  A4D8               	btfss	status,2,c
  1881   001904  EF86  F00C         	goto	u1431
  1882   001908  EF88  F00C         	goto	u1430
  1883   00190C                     u1431:
  1884   00190C  EF51  F00C         	goto	l2421
  1885   001910                     u1430:
  1886   001910                     l2429:
  1887                           
  1888                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1889   001910  5019               	movf	vfpfcnvrt@c^0,w,c
  1890   001912  B4D8               	btfsc	status,2,c
  1891   001914  EF8E  F00C         	goto	u1441
  1892   001918  EF90  F00C         	goto	u1440
  1893   00191C                     u1441:
  1894   00191C  EFAF  F00C         	goto	l2439
  1895   001920                     u1440:
  1896   001920  5013               	movf	vfpfcnvrt@done^0,w,c
  1897   001922  B4D8               	btfsc	status,2,c
  1898   001924  EF96  F00C         	goto	u1451
  1899   001928  EF98  F00C         	goto	u1450
  1900   00192C                     u1451:
  1901   00192C  EFAF  F00C         	goto	l2439
  1902   001930                     u1450:
  1903   001930                     
  1904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1905   001930  0619               	decf	vfpfcnvrt@c^0,f,c
  1906   001932  5019               	movf	vfpfcnvrt@c^0,w,c
  1907   001934  0FB5               	addlw	low _dbuf
  1908   001936  6ED9               	movwf	fsr2l,c
  1909   001938  6ADA               	clrf	fsr2h,c
  1910   00193A  0E2D               	movlw	45
  1911   00193C  6EDF               	movwf	indf2,c
  1912   00193E  EFAF  F00C         	goto	l2439
  1913   001942                     l2435:
  1914                           
  1915                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1916   001942  5019               	movf	vfpfcnvrt@c^0,w,c
  1917   001944  0FB5               	addlw	low _dbuf
  1918   001946  6ED9               	movwf	fsr2l,c
  1919   001948  6ADA               	clrf	fsr2h,c
  1920   00194A  50DF               	movf	indf2,w,c
  1921   00194C  6E12               	movwf	??_vfpfcnvrt^0,c
  1922   00194E  5012               	movf	??_vfpfcnvrt^0,w,c
  1923   001950  6E05               	movwf	fputc@c^0,c
  1924   001952  6A06               	clrf	(fputc@c+1)^0,c
  1925   001954  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1926   001958  ECF3  F011         	call	_fputc	;wreg free
  1927   00195C  2A19               	incf	vfpfcnvrt@c^0,f,c
  1928   00195E                     l2439:
  1929                           
  1930                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1931   00195E  0E20               	movlw	32
  1932   001960  1819               	xorwf	vfpfcnvrt@c^0,w,c
  1933   001962  A4D8               	btfss	status,2,c
  1934   001964  EFB6  F00C         	goto	u1461
  1935   001968  EFB8  F00C         	goto	u1460
  1936   00196C                     u1461:
  1937   00196C  EFA1  F00C         	goto	l2435
  1938   001970                     u1460:
  1939   001970  EFD1  F00C         	goto	l1251
  1940   001974                     l2441:
  1941                           
  1942                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1943   001974  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1944   001976  6ED9               	movwf	fsr2l,c
  1945   001978  6ADA               	clrf	fsr2h,c
  1946   00197A  2ADF               	incf	indf2,f,c
  1947   00197C  EFD1  F00C         	goto	l1251
  1948   001980                     l2445:
  1949                           
  1950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1951   001980  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1952   001982  6ED9               	movwf	fsr2l,c
  1953   001984  6ADA               	clrf	fsr2h,c
  1954   001986  CFDF FFF6          	movff	indf2,tblptrl
  1955   00198A                     	if	1	;There is more than 1 active tblptr byte
  1956   00198A  0E0E               	movlw	high __smallconst
  1957   00198C  6EF7               	movwf	tblptrh,c
  1958   00198E                     	endif
  1959   00198E                     	if	0	;tblptru may be non-zero
  1960   00198E                     	endif
  1961   00198E                     	if	0	;tblptru may be non-zero
  1962   00198E                     	endif
  1963   00198E  0008               	tblrd		*
  1964   001990  50F5               	movf	tablat,w,c
  1965   001992  6E05               	movwf	fputc@c^0,c
  1966   001994  6A06               	clrf	(fputc@c+1)^0,c
  1967   001996  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1968   00199A  ECF3  F011         	call	_fputc	;wreg free
  1969   00199E  EFBA  F00C         	goto	l2441
  1970   0019A2                     l1251:
  1971   0019A2  0012               	return		;funcret
  1972   0019A4                     __end_of_vfpfcnvrt:
  1973                           	callstack 0
  1974                           
  1975 ;; *************** function _fputc *****************
  1976 ;; Defined at:
  1977 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  c               2    4[COMRAM] int 
  1980 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  1981 ;;		 -> sprintf@f(12), 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  2    4[COMRAM] int 
  1986 ;; Registers used:
  1987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1993 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1995 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1996 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1997 ;;Total ram usage:        8 bytes
  1998 ;; Hardware stack levels used: 1
  1999 ;; Hardware stack levels required when called: 4
  2000 ;; This function calls:
  2001 ;;		_putch
  2002 ;; This function is called by:
  2003 ;;		_vfpfcnvrt
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text6
  2008   0023E6                     __ptext6:
  2009                           	callstack 0
  2010   0023E6                     _fputc:
  2011                           	callstack 23
  2012   0023E6  5007               	movf	fputc@fp^0,w,c
  2013   0023E8  B4D8               	btfsc	status,2,c
  2014   0023EA  EFF9  F011         	goto	u1301
  2015   0023EE  EFFB  F011         	goto	u1300
  2016   0023F2                     u1301:
  2017   0023F2  EF03  F012         	goto	l2359
  2018   0023F6                     u1300:
  2019   0023F6  5007               	movf	fputc@fp^0,w,c
  2020   0023F8  A4D8               	btfss	status,2,c
  2021   0023FA  EF01  F012         	goto	u1311
  2022   0023FE  EF03  F012         	goto	u1310
  2023   002402                     u1311:
  2024   002402  EF08  F012         	goto	l2361
  2025   002406                     u1310:
  2026   002406                     l2359:
  2027   002406  5005               	movf	fputc@c^0,w,c
  2028   002408  EC97  F015         	call	_putch
  2029   00240C  EF47  F012         	goto	l1276
  2030   002410                     l2361:
  2031   002410  5007               	movf	fputc@fp^0,w,c
  2032   002412  6ED9               	movwf	fsr2l,c
  2033   002414  6ADA               	clrf	fsr2h,c
  2034   002416  0E0A               	movlw	10
  2035   002418  26D9               	addwf	fsr2l,f,c
  2036   00241A  50DE               	movf	postinc2,w,c
  2037   00241C  10DE               	iorwf	postinc2,w,c
  2038   00241E  B4D8               	btfsc	status,2,c
  2039   002420  EF14  F012         	goto	u1321
  2040   002424  EF16  F012         	goto	u1320
  2041   002428                     u1321:
  2042   002428  EF2F  F012         	goto	l2365
  2043   00242C                     u1320:
  2044   00242C  5007               	movf	fputc@fp^0,w,c
  2045   00242E  6ED9               	movwf	fsr2l,c
  2046   002430  6ADA               	clrf	fsr2h,c
  2047   002432  0E0A               	movlw	10
  2048   002434  26D9               	addwf	fsr2l,f,c
  2049   002436  5007               	movf	fputc@fp^0,w,c
  2050   002438  6EE1               	movwf	fsr1l,c
  2051   00243A  6AE2               	clrf	fsr1h,c
  2052   00243C  0E03               	movlw	3
  2053   00243E  26E1               	addwf	fsr1l,f,c
  2054   002440  50DE               	movf	postinc2,w,c
  2055   002442  5CE6               	subwf	postinc1,w,c
  2056   002444  50E6               	movf	postinc1,w,c
  2057   002446  0A80               	xorlw	128
  2058   002448  6E0C               	movwf	(??_fputc+4)^0,c
  2059   00244A  50DE               	movf	postinc2,w,c
  2060   00244C  0A80               	xorlw	128
  2061   00244E  580C               	subwfb	(??_fputc+4)^0,w,c
  2062   002450  B0D8               	btfsc	status,0,c
  2063   002452  EF2D  F012         	goto	u1331
  2064   002456  EF2F  F012         	goto	u1330
  2065   00245A                     u1331:
  2066   00245A  EF47  F012         	goto	l1276
  2067   00245E                     u1330:
  2068   00245E                     l2365:
  2069   00245E  5007               	movf	fputc@fp^0,w,c
  2070   002460  6ED9               	movwf	fsr2l,c
  2071   002462  6ADA               	clrf	fsr2h,c
  2072   002464  0E03               	movlw	3
  2073   002466  26D9               	addwf	fsr2l,f,c
  2074   002468  50DF               	movf	indf2,w,c
  2075   00246A  6E08               	movwf	??_fputc^0,c
  2076   00246C  5007               	movf	fputc@fp^0,w,c
  2077   00246E  6ED9               	movwf	fsr2l,c
  2078   002470  6ADA               	clrf	fsr2h,c
  2079   002472  50DF               	movf	indf2,w,c
  2080   002474  2408               	addwf	??_fputc^0,w,c
  2081   002476  6ED9               	movwf	fsr2l,c
  2082   002478  6ADA               	clrf	fsr2h,c
  2083   00247A  C005  FFDF         	movff	fputc@c,indf2
  2084   00247E  5007               	movf	fputc@fp^0,w,c
  2085   002480  6ED9               	movwf	fsr2l,c
  2086   002482  6ADA               	clrf	fsr2h,c
  2087   002484  0E03               	movlw	3
  2088   002486  26D9               	addwf	fsr2l,f,c
  2089   002488  2ADE               	incf	postinc2,f,c
  2090   00248A  0E00               	movlw	0
  2091   00248C  22DD               	addwfc	postdec2,f,c
  2092   00248E                     l1276:
  2093   00248E  0012               	return		;funcret
  2094   002490                     __end_of_fputc:
  2095                           	callstack 0
  2096                           
  2097 ;; *************** function _putch *****************
  2098 ;; Defined at:
  2099 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  c               1    wreg     unsigned char 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  c               1    0[COMRAM] unsigned char 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used: 1
  2119 ;; Hardware stack levels required when called: 3
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_fputc
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text7
  2128   002B2E                     __ptext7:
  2129                           	callstack 0
  2130   002B2E                     _putch:
  2131                           	callstack 23
  2132   002B2E  0012               	return		;funcret
  2133   002B30                     __end_of_putch:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _abs *****************
  2137 ;; Defined at:
  2138 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  a               2   10[COMRAM] int 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  2   10[COMRAM] int 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2155 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2156 ;;Total ram usage:        4 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 3
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_vfpfcnvrt
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text8
  2167   002872                     __ptext8:
  2168                           	callstack 0
  2169   002872                     _abs:
  2170                           	callstack 24
  2171   002872  BE0C               	btfsc	(abs@a+1)^0,7,c
  2172   002874  EF3E  F014         	goto	u1341
  2173   002878  EF40  F014         	goto	u1340
  2174   00287C                     u1341:
  2175   00287C  EF46  F014         	goto	l1261
  2176   002880                     u1340:
  2177   002880  C00B  F00B         	movff	abs@a,?_abs
  2178   002884  C00C  F00C         	movff	abs@a+1,?_abs+1
  2179   002888  EF52  F014         	goto	l1264
  2180   00288C                     l1261:
  2181   00288C  C00B  F00D         	movff	abs@a,??_abs
  2182   002890  C00C  F00E         	movff	abs@a+1,??_abs+1
  2183   002894  1E0D               	comf	??_abs^0,f,c
  2184   002896  1E0E               	comf	(??_abs+1)^0,f,c
  2185   002898  4A0D               	infsnz	??_abs^0,f,c
  2186   00289A  2A0E               	incf	(??_abs+1)^0,f,c
  2187   00289C  C00D  F00B         	movff	??_abs,?_abs
  2188   0028A0  C00E  F00C         	movff	??_abs+1,?_abs+1
  2189   0028A4                     l1264:
  2190   0028A4  0012               	return		;funcret
  2191   0028A6                     __end_of_abs:
  2192                           	callstack 0
  2193                           
  2194 ;; *************** function ___awmod *****************
  2195 ;; Defined at:
  2196 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  dividend        2    4[COMRAM] int 
  2199 ;;  divisor         2    6[COMRAM] int 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  sign            1    9[COMRAM] unsigned char 
  2202 ;;  counter         1    8[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  2    4[COMRAM] int 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;Total ram usage:        6 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 3
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_vfpfcnvrt
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text9
  2227   002336                     __ptext9:
  2228                           	callstack 0
  2229   002336                     ___awmod:
  2230                           	callstack 24
  2231   002336  0E00               	movlw	0
  2232   002338  6E0A               	movwf	___awmod@sign^0,c
  2233   00233A  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  2234   00233C  EFA4  F011         	goto	u1210
  2235   002340  EFA2  F011         	goto	u1211
  2236   002344                     u1211:
  2237   002344  EFAA  F011         	goto	l2305
  2238   002348                     u1210:
  2239   002348  6C05               	negf	___awmod@dividend^0,c
  2240   00234A  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2241   00234C  B0D8               	btfsc	status,0,c
  2242   00234E  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2243   002350  0E01               	movlw	1
  2244   002352  6E0A               	movwf	___awmod@sign^0,c
  2245   002354                     l2305:
  2246   002354  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  2247   002356  EFB1  F011         	goto	u1220
  2248   00235A  EFAF  F011         	goto	u1221
  2249   00235E                     u1221:
  2250   00235E  EFB5  F011         	goto	l2309
  2251   002362                     u1220:
  2252   002362  6C07               	negf	___awmod@divisor^0,c
  2253   002364  1E08               	comf	(___awmod@divisor+1)^0,f,c
  2254   002366  B0D8               	btfsc	status,0,c
  2255   002368  2A08               	incf	(___awmod@divisor+1)^0,f,c
  2256   00236A                     l2309:
  2257   00236A  5007               	movf	___awmod@divisor^0,w,c
  2258   00236C  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  2259   00236E  B4D8               	btfsc	status,2,c
  2260   002370  EFBC  F011         	goto	u1231
  2261   002374  EFBE  F011         	goto	u1230
  2262   002378                     u1231:
  2263   002378  EFE2  F011         	goto	l2325
  2264   00237C                     u1230:
  2265   00237C  0E01               	movlw	1
  2266   00237E  6E09               	movwf	___awmod@counter^0,c
  2267   002380  EFC6  F011         	goto	l2315
  2268   002384                     l2313:
  2269   002384  90D8               	bcf	status,0,c
  2270   002386  3607               	rlcf	___awmod@divisor^0,f,c
  2271   002388  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  2272   00238A  2A09               	incf	___awmod@counter^0,f,c
  2273   00238C                     l2315:
  2274   00238C  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  2275   00238E  EFCB  F011         	goto	u1241
  2276   002392  EFCD  F011         	goto	u1240
  2277   002396                     u1241:
  2278   002396  EFC2  F011         	goto	l2313
  2279   00239A                     u1240:
  2280   00239A                     l2317:
  2281   00239A  5007               	movf	___awmod@divisor^0,w,c
  2282   00239C  5C05               	subwf	___awmod@dividend^0,w,c
  2283   00239E  5008               	movf	(___awmod@divisor+1)^0,w,c
  2284   0023A0  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  2285   0023A2  A0D8               	btfss	status,0,c
  2286   0023A4  EFD6  F011         	goto	u1251
  2287   0023A8  EFD8  F011         	goto	u1250
  2288   0023AC                     u1251:
  2289   0023AC  EFDC  F011         	goto	l2321
  2290   0023B0                     u1250:
  2291   0023B0  5007               	movf	___awmod@divisor^0,w,c
  2292   0023B2  5E05               	subwf	___awmod@dividend^0,f,c
  2293   0023B4  5008               	movf	(___awmod@divisor+1)^0,w,c
  2294   0023B6  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  2295   0023B8                     l2321:
  2296   0023B8  90D8               	bcf	status,0,c
  2297   0023BA  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  2298   0023BC  3207               	rrcf	___awmod@divisor^0,f,c
  2299   0023BE  2E09               	decfsz	___awmod@counter^0,f,c
  2300   0023C0  EFCD  F011         	goto	l2317
  2301   0023C4                     l2325:
  2302   0023C4  500A               	movf	___awmod@sign^0,w,c
  2303   0023C6  B4D8               	btfsc	status,2,c
  2304   0023C8  EFE8  F011         	goto	u1261
  2305   0023CC  EFEA  F011         	goto	u1260
  2306   0023D0                     u1261:
  2307   0023D0  EFEE  F011         	goto	l2329
  2308   0023D4                     u1260:
  2309   0023D4  6C05               	negf	___awmod@dividend^0,c
  2310   0023D6  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2311   0023D8  B0D8               	btfsc	status,0,c
  2312   0023DA  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2313   0023DC                     l2329:
  2314   0023DC  C005  F005         	movff	___awmod@dividend,?___awmod
  2315   0023E0  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2316   0023E4  0012               	return		;funcret
  2317   0023E6                     __end_of___awmod:
  2318                           	callstack 0
  2319                           
  2320 ;; *************** function _sendTxBuf *****************
  2321 ;; Defined at:
  2322 ;;		line 74 in file "serial.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;		None
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;Total ram usage:        0 bytes
  2341 ;; Hardware stack levels used: 1
  2342 ;; Hardware stack levels required when called: 4
  2343 ;; This function calls:
  2344 ;;		_isDataInTxBuf
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text10
  2351   002A56                     __ptext10:
  2352                           	callstack 0
  2353   002A56                     _sendTxBuf:
  2354                           	callstack 26
  2355   002A56                     
  2356                           ;serial.c: 75:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2357   002A56  EC45  F015         	call	_isDataInTxBuf	;wreg free
  2358   002A5A  0900               	iorlw	0
  2359   002A5C  B4D8               	btfsc	status,2,c
  2360   002A5E  EF33  F015         	goto	u1971
  2361   002A62  EF35  F015         	goto	u1970
  2362   002A66                     u1971:
  2363   002A66  EF37  F015         	goto	l323
  2364   002A6A                     u1970:
  2365   002A6A  010E               	movlb	14	; () banked
  2366   002A6C  852D               	bsf	45,2,b	;volatile
  2367   002A6E                     l323:
  2368   002A6E  0012               	return		;funcret
  2369   002A70                     __end_of_sendTxBuf:
  2370                           	callstack 0
  2371                           
  2372 ;; *************** function _isDataInTxBuf *****************
  2373 ;; Defined at:
  2374 ;;		line 61 in file "serial.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      unsigned char 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2392 ;;Total ram usage:        0 bytes
  2393 ;; Hardware stack levels used: 1
  2394 ;; Hardware stack levels required when called: 3
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_sendTxBuf
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text11
  2403   002A8A                     __ptext11:
  2404                           	callstack 0
  2405   002A8A                     _isDataInTxBuf:
  2406                           	callstack 26
  2407   002A8A                     
  2408                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  2409   002A8A  5048               	movf	_TxBufReadCnt^0,w,c	;volatile
  2410   002A8C  1849               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2411   002A8E  A4D8               	btfss	status,2,c
  2412   002A90  EF4C  F015         	goto	u1511
  2413   002A94  EF4F  F015         	goto	u1510
  2414   002A98                     u1511:
  2415   002A98  0E01               	movlw	1
  2416   002A9A  EF50  F015         	goto	u1520
  2417   002A9E                     u1510:
  2418   002A9E  0E00               	movlw	0
  2419   002AA0                     u1520:
  2420   002AA0  0012               	return		;funcret
  2421   002AA2                     __end_of_isDataInTxBuf:
  2422                           	callstack 0
  2423                           
  2424 ;; *************** function _move *****************
  2425 ;; Defined at:
  2426 ;;		line 87 in file "dc_motor.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  2429 ;;		 -> main@motorL(10), 
  2430 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  2431 ;;		 -> main@motorR(10), 
  2432 ;;  color           1   36[COMRAM] unsigned char 
  2433 ;;  straightSpee    1   37[COMRAM] unsigned char 
  2434 ;;  reverseDurat    1   38[COMRAM] unsigned char 
  2435 ;;  straightRamp    1   39[COMRAM] unsigned char 
  2436 ;;  turnSpeed       1   40[COMRAM] unsigned char 
  2437 ;;  turnDuration    1   41[COMRAM] unsigned char 
  2438 ;;  turnRamp        1   42[COMRAM] unsigned char 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2450 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;Total ram usage:       11 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 6
  2457 ;; This function calls:
  2458 ;;		_fullSpeedAhead
  2459 ;;		_reverseOneSquare
  2460 ;;		_turnLeft
  2461 ;;		_turnRight
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text12
  2468   000E38                     __ptext12:
  2469                           	callstack 0
  2470   000E38                     _move:
  2471                           	callstack 24
  2472   000E38                     
  2473                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  2474   000E38  0425               	decf	move@color^0,w,c
  2475   000E3A  A4D8               	btfss	status,2,c
  2476   000E3C  EF22  F007         	goto	u1901
  2477   000E40  EF24  F007         	goto	u1900
  2478   000E44                     u1901:
  2479   000E44  EF60  F007         	goto	l2891
  2480   000E48                     u1900:
  2481   000E48                     
  2482                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2483   000E48  C023  F017         	movff	move@mL,turnRight@mL
  2484   000E4C  C024  F018         	movff	move@mR,turnRight@mR
  2485   000E50  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2486   000E54  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2487   000E58  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2488   000E5C  ECD2  F00C         	call	_turnRight	;wreg free
  2489   000E60                     
  2490                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2491   000E60  0E05               	movlw	5
  2492   000E62  6E2D               	movwf	(??_move+1)^0,c
  2493   000E64  0E0F               	movlw	15
  2494   000E66  6E2C               	movwf	??_move^0,c
  2495   000E68  0EF1               	movlw	241
  2496   000E6A                     u2287:
  2497   000E6A  2EE8               	decfsz	wreg,f,c
  2498   000E6C  D7FE               	bra	u2287
  2499   000E6E  2E2C               	decfsz	??_move^0,f,c
  2500   000E70  D7FC               	bra	u2287
  2501   000E72  2E2D               	decfsz	(??_move+1)^0,f,c
  2502   000E74  D7FA               	bra	u2287
  2503   000E76  0000               	nop	
  2504   000E78                     
  2505                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2506   000E78  C023  F017         	movff	move@mL,turnRight@mL
  2507   000E7C  C024  F018         	movff	move@mR,turnRight@mR
  2508   000E80  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2509   000E84  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2510   000E88  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2511   000E8C  ECD2  F00C         	call	_turnRight	;wreg free
  2512                           
  2513                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2514   000E90  0E05               	movlw	5
  2515   000E92  6E2D               	movwf	(??_move+1)^0,c
  2516   000E94  0E0F               	movlw	15
  2517   000E96  6E2C               	movwf	??_move^0,c
  2518   000E98  0EF1               	movlw	241
  2519   000E9A                     u2297:
  2520   000E9A  2EE8               	decfsz	wreg,f,c
  2521   000E9C  D7FE               	bra	u2297
  2522   000E9E  2E2C               	decfsz	??_move^0,f,c
  2523   000EA0  D7FC               	bra	u2297
  2524   000EA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2525   000EA4  D7FA               	bra	u2297
  2526   000EA6  0000               	nop	
  2527   000EA8                     l2889:
  2528                           
  2529                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2530   000EA8  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2531   000EAC  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2532   000EB0  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2533   000EB4  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2534   000EB8  ECD0  F010         	call	_fullSpeedAhead	;wreg free
  2535                           
  2536                           ;dc_motor.c: 95:     }
  2537   000EBC  EFD8  F008         	goto	l449
  2538   000EC0                     l2891:
  2539   000EC0  0E02               	movlw	2
  2540   000EC2  1825               	xorwf	move@color^0,w,c
  2541   000EC4  A4D8               	btfss	status,2,c
  2542   000EC6  EF67  F007         	goto	u1911
  2543   000ECA  EF69  F007         	goto	u1910
  2544   000ECE                     u1911:
  2545   000ECE  EF9B  F007         	goto	l2901
  2546   000ED2                     u1910:
  2547   000ED2                     
  2548                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2549   000ED2  C023  F017         	movff	move@mL,turnLeft@mL
  2550   000ED6  C024  F018         	movff	move@mR,turnLeft@mR
  2551   000EDA  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2552   000EDE  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2553   000EE2  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2554   000EE6  ECAD  F00D         	call	_turnLeft	;wreg free
  2555   000EEA                     
  2556                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2557   000EEA  0E05               	movlw	5
  2558   000EEC  6E2D               	movwf	(??_move+1)^0,c
  2559   000EEE  0E0F               	movlw	15
  2560   000EF0  6E2C               	movwf	??_move^0,c
  2561   000EF2  0EF1               	movlw	241
  2562   000EF4                     u2307:
  2563   000EF4  2EE8               	decfsz	wreg,f,c
  2564   000EF6  D7FE               	bra	u2307
  2565   000EF8  2E2C               	decfsz	??_move^0,f,c
  2566   000EFA  D7FC               	bra	u2307
  2567   000EFC  2E2D               	decfsz	(??_move+1)^0,f,c
  2568   000EFE  D7FA               	bra	u2307
  2569   000F00  0000               	nop	
  2570   000F02                     
  2571                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2572   000F02  C023  F017         	movff	move@mL,turnLeft@mL
  2573   000F06  C024  F018         	movff	move@mR,turnLeft@mR
  2574   000F0A  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2575   000F0E  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2576   000F12  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2577   000F16  ECAD  F00D         	call	_turnLeft	;wreg free
  2578                           
  2579                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2580   000F1A  0E05               	movlw	5
  2581   000F1C  6E2D               	movwf	(??_move+1)^0,c
  2582   000F1E  0E0F               	movlw	15
  2583   000F20  6E2C               	movwf	??_move^0,c
  2584   000F22  0EF1               	movlw	241
  2585   000F24                     u2317:
  2586   000F24  2EE8               	decfsz	wreg,f,c
  2587   000F26  D7FE               	bra	u2317
  2588   000F28  2E2C               	decfsz	??_move^0,f,c
  2589   000F2A  D7FC               	bra	u2317
  2590   000F2C  2E2D               	decfsz	(??_move+1)^0,f,c
  2591   000F2E  D7FA               	bra	u2317
  2592   000F30  0000               	nop	
  2593   000F32  EF54  F007         	goto	l2889
  2594   000F36                     l2901:
  2595   000F36  0E03               	movlw	3
  2596   000F38  1825               	xorwf	move@color^0,w,c
  2597   000F3A  A4D8               	btfss	status,2,c
  2598   000F3C  EFA2  F007         	goto	u1921
  2599   000F40  EFA4  F007         	goto	u1920
  2600   000F44                     u1921:
  2601   000F44  EF06  F008         	goto	l2917
  2602   000F48                     u1920:
  2603   000F48                     
  2604                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2605   000F48  C023  F017         	movff	move@mL,turnLeft@mL
  2606   000F4C  C024  F018         	movff	move@mR,turnLeft@mR
  2607   000F50  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2608   000F54  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2609   000F58  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2610   000F5C  ECAD  F00D         	call	_turnLeft	;wreg free
  2611   000F60                     
  2612                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2613   000F60  0E05               	movlw	5
  2614   000F62  6E2D               	movwf	(??_move+1)^0,c
  2615   000F64  0E0F               	movlw	15
  2616   000F66  6E2C               	movwf	??_move^0,c
  2617   000F68  0EF1               	movlw	241
  2618   000F6A                     u2327:
  2619   000F6A  2EE8               	decfsz	wreg,f,c
  2620   000F6C  D7FE               	bra	u2327
  2621   000F6E  2E2C               	decfsz	??_move^0,f,c
  2622   000F70  D7FC               	bra	u2327
  2623   000F72  2E2D               	decfsz	(??_move+1)^0,f,c
  2624   000F74  D7FA               	bra	u2327
  2625   000F76  0000               	nop	
  2626   000F78                     
  2627                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2628   000F78  C023  F017         	movff	move@mL,turnLeft@mL
  2629   000F7C  C024  F018         	movff	move@mR,turnLeft@mR
  2630   000F80  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2631   000F84  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2632   000F88  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2633   000F8C  ECAD  F00D         	call	_turnLeft	;wreg free
  2634                           
  2635                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2636   000F90  0E05               	movlw	5
  2637   000F92  6E2D               	movwf	(??_move+1)^0,c
  2638   000F94  0E0F               	movlw	15
  2639   000F96  6E2C               	movwf	??_move^0,c
  2640   000F98  0EF1               	movlw	241
  2641   000F9A                     u2337:
  2642   000F9A  2EE8               	decfsz	wreg,f,c
  2643   000F9C  D7FE               	bra	u2337
  2644   000F9E  2E2C               	decfsz	??_move^0,f,c
  2645   000FA0  D7FC               	bra	u2337
  2646   000FA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2647   000FA4  D7FA               	bra	u2337
  2648   000FA6  0000               	nop	
  2649   000FA8                     
  2650                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2651   000FA8  C023  F017         	movff	move@mL,turnLeft@mL
  2652   000FAC  C024  F018         	movff	move@mR,turnLeft@mR
  2653   000FB0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2654   000FB4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2655   000FB8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2656   000FBC  ECAD  F00D         	call	_turnLeft	;wreg free
  2657   000FC0                     
  2658                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2659   000FC0  0E05               	movlw	5
  2660   000FC2  6E2D               	movwf	(??_move+1)^0,c
  2661   000FC4  0E0F               	movlw	15
  2662   000FC6  6E2C               	movwf	??_move^0,c
  2663   000FC8  0EF1               	movlw	241
  2664   000FCA                     u2347:
  2665   000FCA  2EE8               	decfsz	wreg,f,c
  2666   000FCC  D7FE               	bra	u2347
  2667   000FCE  2E2C               	decfsz	??_move^0,f,c
  2668   000FD0  D7FC               	bra	u2347
  2669   000FD2  2E2D               	decfsz	(??_move+1)^0,f,c
  2670   000FD4  D7FA               	bra	u2347
  2671   000FD6  0000               	nop	
  2672                           
  2673                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2674   000FD8  C023  F017         	movff	move@mL,turnLeft@mL
  2675   000FDC  C024  F018         	movff	move@mR,turnLeft@mR
  2676   000FE0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2677   000FE4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2678   000FE8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2679   000FEC  ECAD  F00D         	call	_turnLeft	;wreg free
  2680   000FF0                     
  2681                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2682   000FF0  0E05               	movlw	5
  2683   000FF2  6E2D               	movwf	(??_move+1)^0,c
  2684   000FF4  0E0F               	movlw	15
  2685   000FF6  6E2C               	movwf	??_move^0,c
  2686   000FF8  0EF1               	movlw	241
  2687   000FFA                     u2357:
  2688   000FFA  2EE8               	decfsz	wreg,f,c
  2689   000FFC  D7FE               	bra	u2357
  2690   000FFE  2E2C               	decfsz	??_move^0,f,c
  2691   001000  D7FC               	bra	u2357
  2692   001002  2E2D               	decfsz	(??_move+1)^0,f,c
  2693   001004  D7FA               	bra	u2357
  2694   001006  0000               	nop	
  2695   001008  EF54  F007         	goto	l2889
  2696   00100C                     l2917:
  2697   00100C  0E04               	movlw	4
  2698   00100E  1825               	xorwf	move@color^0,w,c
  2699   001010  A4D8               	btfss	status,2,c
  2700   001012  EF0D  F008         	goto	u1931
  2701   001016  EF0F  F008         	goto	u1930
  2702   00101A                     u1931:
  2703   00101A  EF63  F008         	goto	l2929
  2704   00101E                     u1930:
  2705   00101E                     
  2706                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2707   00101E  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2708   001022  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2709   001026  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2710   00102A  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2711   00102E  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2712   001032  EC14  F00B         	call	_reverseOneSquare	;wreg free
  2713   001036                     l2921:
  2714                           
  2715                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2716   001036  0E05               	movlw	5
  2717   001038  6E2D               	movwf	(??_move+1)^0,c
  2718   00103A  0E0F               	movlw	15
  2719   00103C  6E2C               	movwf	??_move^0,c
  2720   00103E  0EF1               	movlw	241
  2721   001040                     u2367:
  2722   001040  2EE8               	decfsz	wreg,f,c
  2723   001042  D7FE               	bra	u2367
  2724   001044  2E2C               	decfsz	??_move^0,f,c
  2725   001046  D7FC               	bra	u2367
  2726   001048  2E2D               	decfsz	(??_move+1)^0,f,c
  2727   00104A  D7FA               	bra	u2367
  2728   00104C  0000               	nop	
  2729   00104E                     
  2730                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2731   00104E  C023  F017         	movff	move@mL,turnRight@mL
  2732   001052  C024  F018         	movff	move@mR,turnRight@mR
  2733   001056  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2734   00105A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2735   00105E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2736   001062  ECD2  F00C         	call	_turnRight	;wreg free
  2737                           
  2738                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2739   001066  0E05               	movlw	5
  2740   001068  6E2D               	movwf	(??_move+1)^0,c
  2741   00106A  0E0F               	movlw	15
  2742   00106C  6E2C               	movwf	??_move^0,c
  2743   00106E  0EF1               	movlw	241
  2744   001070                     u2377:
  2745   001070  2EE8               	decfsz	wreg,f,c
  2746   001072  D7FE               	bra	u2377
  2747   001074  2E2C               	decfsz	??_move^0,f,c
  2748   001076  D7FC               	bra	u2377
  2749   001078  2E2D               	decfsz	(??_move+1)^0,f,c
  2750   00107A  D7FA               	bra	u2377
  2751   00107C  0000               	nop	
  2752   00107E                     
  2753                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2754   00107E  C023  F017         	movff	move@mL,turnRight@mL
  2755   001082  C024  F018         	movff	move@mR,turnRight@mR
  2756   001086  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2757   00108A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2758   00108E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2759   001092  ECD2  F00C         	call	_turnRight	;wreg free
  2760   001096                     l2927:
  2761                           
  2762                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2763   001096  0E05               	movlw	5
  2764   001098  6E2D               	movwf	(??_move+1)^0,c
  2765   00109A  0E0F               	movlw	15
  2766   00109C  6E2C               	movwf	??_move^0,c
  2767   00109E  0EF1               	movlw	241
  2768   0010A0                     u2387:
  2769   0010A0  2EE8               	decfsz	wreg,f,c
  2770   0010A2  D7FE               	bra	u2387
  2771   0010A4  2E2C               	decfsz	??_move^0,f,c
  2772   0010A6  D7FC               	bra	u2387
  2773   0010A8  2E2D               	decfsz	(??_move+1)^0,f,c
  2774   0010AA  D7FA               	bra	u2387
  2775   0010AC  0000               	nop	
  2776                           
  2777                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2778   0010AE  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2779   0010B2  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2780   0010B6  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2781   0010BA  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2782   0010BE  ECD0  F010         	call	_fullSpeedAhead	;wreg free
  2783                           
  2784                           ;dc_motor.c: 125:     }
  2785   0010C2  EFD8  F008         	goto	l449
  2786   0010C6                     l2929:
  2787   0010C6  0E05               	movlw	5
  2788   0010C8  1825               	xorwf	move@color^0,w,c
  2789   0010CA  A4D8               	btfss	status,2,c
  2790   0010CC  EF6A  F008         	goto	u1941
  2791   0010D0  EF6C  F008         	goto	u1940
  2792   0010D4                     u1941:
  2793   0010D4  EFAA  F008         	goto	l2941
  2794   0010D8                     u1940:
  2795   0010D8                     
  2796                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2797   0010D8  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2798   0010DC  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2799   0010E0  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2800   0010E4  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2801   0010E8  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2802   0010EC  EC14  F00B         	call	_reverseOneSquare	;wreg free
  2803   0010F0                     l2933:
  2804                           
  2805                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2806   0010F0  0E05               	movlw	5
  2807   0010F2  6E2D               	movwf	(??_move+1)^0,c
  2808   0010F4  0E0F               	movlw	15
  2809   0010F6  6E2C               	movwf	??_move^0,c
  2810   0010F8  0EF1               	movlw	241
  2811   0010FA                     u2397:
  2812   0010FA  2EE8               	decfsz	wreg,f,c
  2813   0010FC  D7FE               	bra	u2397
  2814   0010FE  2E2C               	decfsz	??_move^0,f,c
  2815   001100  D7FC               	bra	u2397
  2816   001102  2E2D               	decfsz	(??_move+1)^0,f,c
  2817   001104  D7FA               	bra	u2397
  2818   001106  0000               	nop	
  2819   001108                     
  2820                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2821   001108  C023  F017         	movff	move@mL,turnLeft@mL
  2822   00110C  C024  F018         	movff	move@mR,turnLeft@mR
  2823   001110  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2824   001114  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2825   001118  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2826   00111C  ECAD  F00D         	call	_turnLeft	;wreg free
  2827                           
  2828                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2829   001120  0E05               	movlw	5
  2830   001122  6E2D               	movwf	(??_move+1)^0,c
  2831   001124  0E0F               	movlw	15
  2832   001126  6E2C               	movwf	??_move^0,c
  2833   001128  0EF1               	movlw	241
  2834   00112A                     u2407:
  2835   00112A  2EE8               	decfsz	wreg,f,c
  2836   00112C  D7FE               	bra	u2407
  2837   00112E  2E2C               	decfsz	??_move^0,f,c
  2838   001130  D7FC               	bra	u2407
  2839   001132  2E2D               	decfsz	(??_move+1)^0,f,c
  2840   001134  D7FA               	bra	u2407
  2841   001136  0000               	nop	
  2842   001138                     
  2843                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2844   001138  C023  F017         	movff	move@mL,turnLeft@mL
  2845   00113C  C024  F018         	movff	move@mR,turnLeft@mR
  2846   001140  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2847   001144  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2848   001148  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2849   00114C  ECAD  F00D         	call	_turnLeft	;wreg free
  2850   001150  EF4B  F008         	goto	l2927
  2851   001154                     l2941:
  2852   001154  0E06               	movlw	6
  2853   001156  1825               	xorwf	move@color^0,w,c
  2854   001158  A4D8               	btfss	status,2,c
  2855   00115A  EFB1  F008         	goto	u1951
  2856   00115E  EFB3  F008         	goto	u1950
  2857   001162                     u1951:
  2858   001162  EFC1  F008         	goto	l2953
  2859   001166                     u1950:
  2860   001166                     
  2861                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2862   001166  C023  F017         	movff	move@mL,turnRight@mL
  2863   00116A  C024  F018         	movff	move@mR,turnRight@mR
  2864   00116E  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2865   001172  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2866   001176  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2867   00117A  ECD2  F00C         	call	_turnRight	;wreg free
  2868   00117E  EF1B  F008         	goto	l2921
  2869   001182                     l2953:
  2870   001182  0E07               	movlw	7
  2871   001184  1825               	xorwf	move@color^0,w,c
  2872   001186  A4D8               	btfss	status,2,c
  2873   001188  EFC8  F008         	goto	u1961
  2874   00118C  EFCA  F008         	goto	u1960
  2875   001190                     u1961:
  2876   001190  EFD8  F008         	goto	l447
  2877   001194                     u1960:
  2878   001194                     
  2879                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2880   001194  C023  F017         	movff	move@mL,turnLeft@mL
  2881   001198  C024  F018         	movff	move@mR,turnLeft@mR
  2882   00119C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2883   0011A0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2884   0011A4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2885   0011A8  ECAD  F00D         	call	_turnLeft	;wreg free
  2886   0011AC  EF78  F008         	goto	l2933
  2887   0011B0                     l447:
  2888   0011B0                     l449:
  2889   0011B0  0012               	return		;funcret
  2890   0011B2                     __end_of_move:
  2891                           	callstack 0
  2892                           
  2893 ;; *************** function _turnRight *****************
  2894 ;; Defined at:
  2895 ;;		line 214 in file "dc_motor.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2898 ;;		 -> main@motorL(10), 
  2899 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2900 ;;		 -> main@motorR(10), 
  2901 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  2902 ;;  turnDuration    1   25[COMRAM] unsigned char 
  2903 ;;  turnRamp        1   26[COMRAM] unsigned char 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  cur_power       2   32[COMRAM] int 
  2906 ;;  i               2   30[COMRAM] int 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2916 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2917 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2918 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2919 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;Total ram usage:       12 bytes
  2921 ;; Hardware stack levels used: 1
  2922 ;; Hardware stack levels required when called: 5
  2923 ;; This function calls:
  2924 ;;		_setMotorPWM
  2925 ;; This function is called by:
  2926 ;;		_move
  2927 ;;		_calibration
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text13
  2932   0019A4                     __ptext13:
  2933                           	callstack 0
  2934   0019A4                     _turnRight:
  2935                           	callstack 24
  2936   0019A4                     
  2937                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  2938   0019A4  5017               	movf	turnRight@mL^0,w,c
  2939   0019A6  6ED9               	movwf	fsr2l,c
  2940   0019A8  6ADA               	clrf	fsr2h,c
  2941   0019AA  0E01               	movlw	1
  2942   0019AC  26D9               	addwf	fsr2l,f,c
  2943   0019AE  0E01               	movlw	1
  2944   0019B0  6EDF               	movwf	indf2,c
  2945                           
  2946                           ;dc_motor.c: 217:     mR->direction = 0;
  2947   0019B2  5018               	movf	turnRight@mR^0,w,c
  2948   0019B4  6ED9               	movwf	fsr2l,c
  2949   0019B6  6ADA               	clrf	fsr2h,c
  2950   0019B8  0E01               	movlw	1
  2951   0019BA  26D9               	addwf	fsr2l,f,c
  2952   0019BC  6ADF               	clrf	indf2,c
  2953   0019BE                     
  2954                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2955   0019BE  0E00               	movlw	0
  2956   0019C0  6E22               	movwf	(turnRight@cur_power+1)^0,c
  2957   0019C2  0E01               	movlw	1
  2958   0019C4  6E21               	movwf	turnRight@cur_power^0,c
  2959   0019C6  EF27  F00D         	goto	l2549
  2960   0019CA                     l2535:
  2961                           
  2962                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  2963   0019CA  5017               	movf	turnRight@mL^0,w,c
  2964   0019CC  6ED9               	movwf	fsr2l,c
  2965   0019CE  6ADA               	clrf	fsr2h,c
  2966   0019D0  5017               	movf	turnRight@mL^0,w,c
  2967   0019D2  6EE1               	movwf	fsr1l,c
  2968   0019D4  6AE2               	clrf	fsr1h,c
  2969   0019D6  0E09               	movlw	9
  2970   0019D8  26E1               	addwf	fsr1l,f,c
  2971   0019DA  50E7               	movf	indf1,w,c
  2972   0019DC  2421               	addwf	turnRight@cur_power^0,w,c
  2973   0019DE  6EDF               	movwf	indf2,c
  2974                           
  2975                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  2976   0019E0  5018               	movf	turnRight@mR^0,w,c
  2977   0019E2  6ED9               	movwf	fsr2l,c
  2978   0019E4  6ADA               	clrf	fsr2h,c
  2979   0019E6  5018               	movf	turnRight@mR^0,w,c
  2980   0019E8  6EE1               	movwf	fsr1l,c
  2981   0019EA  6AE2               	clrf	fsr1h,c
  2982   0019EC  0E09               	movlw	9
  2983   0019EE  26E1               	addwf	fsr1l,f,c
  2984   0019F0  50E7               	movf	indf1,w,c
  2985   0019F2  2421               	addwf	turnRight@cur_power^0,w,c
  2986   0019F4  6EDF               	movwf	indf2,c
  2987   0019F6                     
  2988                           ;dc_motor.c: 223:         setMotorPWM(mL);
  2989   0019F6  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  2990   0019FA  EC88  F00E         	call	_setMotorPWM	;wreg free
  2991   0019FE                     
  2992                           ;dc_motor.c: 224:         setMotorPWM(mR);
  2993   0019FE  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  2994   001A02  EC88  F00E         	call	_setMotorPWM	;wreg free
  2995   001A06                     
  2996                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  2997   001A06  0E00               	movlw	0
  2998   001A08  6E20               	movwf	(turnRight@i+1)^0,c
  2999   001A0A  0E00               	movlw	0
  3000   001A0C  6E1F               	movwf	turnRight@i^0,c
  3001   001A0E  EF13  F00D         	goto	l479
  3002   001A12                     l2543:
  3003                           
  3004                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3005   001A12  0E68               	movlw	104
  3006   001A14  6E1C               	movwf	??_turnRight^0,c
  3007   001A16  0EE4               	movlw	228
  3008   001A18                     u2417:
  3009   001A18  2EE8               	decfsz	wreg,f,c
  3010   001A1A  D7FE               	bra	u2417
  3011   001A1C  2E1C               	decfsz	??_turnRight^0,f,c
  3012   001A1E  D7FC               	bra	u2417
  3013   001A20  D000               	nop2	
  3014   001A22                     
  3015                           ;dc_motor.c: 227:         }
  3016   001A22  4A1F               	infsnz	turnRight@i^0,f,c
  3017   001A24  2A20               	incf	(turnRight@i+1)^0,f,c
  3018   001A26                     l479:
  3019   001A26  501B               	movf	turnRight@turnRamp^0,w,c
  3020   001A28  6E1C               	movwf	??_turnRight^0,c
  3021   001A2A  6A1D               	clrf	(??_turnRight+1)^0,c
  3022   001A2C  501C               	movf	??_turnRight^0,w,c
  3023   001A2E  5C1F               	subwf	turnRight@i^0,w,c
  3024   001A30  5020               	movf	(turnRight@i+1)^0,w,c
  3025   001A32  0A80               	xorlw	128
  3026   001A34  6E1E               	movwf	(??_turnRight+2)^0,c
  3027   001A36  501D               	movf	(??_turnRight+1)^0,w,c
  3028   001A38  0A80               	xorlw	128
  3029   001A3A  581E               	subwfb	(??_turnRight+2)^0,w,c
  3030   001A3C  A0D8               	btfss	status,0,c
  3031   001A3E  EF23  F00D         	goto	u1551
  3032   001A42  EF25  F00D         	goto	u1550
  3033   001A46                     u1551:
  3034   001A46  EF09  F00D         	goto	l2543
  3035   001A4A                     u1550:
  3036   001A4A                     
  3037                           ;dc_motor.c: 228:     }
  3038   001A4A  4A21               	infsnz	turnRight@cur_power^0,f,c
  3039   001A4C  2A22               	incf	(turnRight@cur_power+1)^0,f,c
  3040   001A4E                     l2549:
  3041   001A4E  5019               	movf	turnRight@turnSpeed^0,w,c
  3042   001A50  6E1C               	movwf	??_turnRight^0,c
  3043   001A52  6A1D               	clrf	(??_turnRight+1)^0,c
  3044   001A54  5021               	movf	turnRight@cur_power^0,w,c
  3045   001A56  5C1C               	subwf	??_turnRight^0,w,c
  3046   001A58  501D               	movf	(??_turnRight+1)^0,w,c
  3047   001A5A  0A80               	xorlw	128
  3048   001A5C  6E1E               	movwf	(??_turnRight+2)^0,c
  3049   001A5E  5022               	movf	(turnRight@cur_power+1)^0,w,c
  3050   001A60  0A80               	xorlw	128
  3051   001A62  581E               	subwfb	(??_turnRight+2)^0,w,c
  3052   001A64  B0D8               	btfsc	status,0,c
  3053   001A66  EF37  F00D         	goto	u1561
  3054   001A6A  EF39  F00D         	goto	u1560
  3055   001A6E                     u1561:
  3056   001A6E  EFE5  F00C         	goto	l2535
  3057   001A72                     u1560:
  3058   001A72                     
  3059                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  3060   001A72  0E00               	movlw	0
  3061   001A74  6E20               	movwf	(turnRight@i+1)^0,c
  3062   001A76  0E00               	movlw	0
  3063   001A78  6E1F               	movwf	turnRight@i^0,c
  3064   001A7A  EF49  F00D         	goto	l483
  3065   001A7E                     l2553:
  3066                           
  3067                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3068   001A7E  0E68               	movlw	104
  3069   001A80  6E1C               	movwf	??_turnRight^0,c
  3070   001A82  0EE4               	movlw	228
  3071   001A84                     u2427:
  3072   001A84  2EE8               	decfsz	wreg,f,c
  3073   001A86  D7FE               	bra	u2427
  3074   001A88  2E1C               	decfsz	??_turnRight^0,f,c
  3075   001A8A  D7FC               	bra	u2427
  3076   001A8C  D000               	nop2	
  3077   001A8E                     
  3078                           ;dc_motor.c: 232:         }
  3079   001A8E  4A1F               	infsnz	turnRight@i^0,f,c
  3080   001A90  2A20               	incf	(turnRight@i+1)^0,f,c
  3081   001A92                     l483:
  3082   001A92  501A               	movf	turnRight@turnDuration^0,w,c
  3083   001A94  6E1C               	movwf	??_turnRight^0,c
  3084   001A96  6A1D               	clrf	(??_turnRight+1)^0,c
  3085   001A98  501C               	movf	??_turnRight^0,w,c
  3086   001A9A  5C1F               	subwf	turnRight@i^0,w,c
  3087   001A9C  5020               	movf	(turnRight@i+1)^0,w,c
  3088   001A9E  0A80               	xorlw	128
  3089   001AA0  6E1E               	movwf	(??_turnRight+2)^0,c
  3090   001AA2  501D               	movf	(??_turnRight+1)^0,w,c
  3091   001AA4  0A80               	xorlw	128
  3092   001AA6  581E               	subwfb	(??_turnRight+2)^0,w,c
  3093   001AA8  A0D8               	btfss	status,0,c
  3094   001AAA  EF59  F00D         	goto	u1571
  3095   001AAE  EF5B  F00D         	goto	u1570
  3096   001AB2                     u1571:
  3097   001AB2  EF3F  F00D         	goto	l2553
  3098   001AB6                     u1570:
  3099   001AB6                     
  3100                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3101   001AB6  C019  F021         	movff	turnRight@turnSpeed,turnRight@cur_power
  3102   001ABA  6A22               	clrf	(turnRight@cur_power+1)^0,c
  3103   001ABC                     l2557:
  3104   001ABC  BE22               	btfsc	(turnRight@cur_power+1)^0,7,c
  3105   001ABE  EF65  F00D         	goto	u1580
  3106   001AC2  EF63  F00D         	goto	u1581
  3107   001AC6                     u1581:
  3108   001AC6  EF67  F00D         	goto	l2561
  3109   001ACA                     u1580:
  3110   001ACA  EFAC  F00D         	goto	l491
  3111   001ACE                     l2561:
  3112                           
  3113                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  3114   001ACE  5017               	movf	turnRight@mL^0,w,c
  3115   001AD0  6ED9               	movwf	fsr2l,c
  3116   001AD2  6ADA               	clrf	fsr2h,c
  3117   001AD4  5017               	movf	turnRight@mL^0,w,c
  3118   001AD6  6EE1               	movwf	fsr1l,c
  3119   001AD8  6AE2               	clrf	fsr1h,c
  3120   001ADA  0E09               	movlw	9
  3121   001ADC  26E1               	addwf	fsr1l,f,c
  3122   001ADE  50E7               	movf	indf1,w,c
  3123   001AE0  2421               	addwf	turnRight@cur_power^0,w,c
  3124   001AE2  6EDF               	movwf	indf2,c
  3125                           
  3126                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  3127   001AE4  5018               	movf	turnRight@mR^0,w,c
  3128   001AE6  6ED9               	movwf	fsr2l,c
  3129   001AE8  6ADA               	clrf	fsr2h,c
  3130   001AEA  5018               	movf	turnRight@mR^0,w,c
  3131   001AEC  6EE1               	movwf	fsr1l,c
  3132   001AEE  6AE2               	clrf	fsr1h,c
  3133   001AF0  0E09               	movlw	9
  3134   001AF2  26E1               	addwf	fsr1l,f,c
  3135   001AF4  50E7               	movf	indf1,w,c
  3136   001AF6  2421               	addwf	turnRight@cur_power^0,w,c
  3137   001AF8  6EDF               	movwf	indf2,c
  3138   001AFA                     
  3139                           ;dc_motor.c: 237:         setMotorPWM(mL);
  3140   001AFA  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  3141   001AFE  EC88  F00E         	call	_setMotorPWM	;wreg free
  3142   001B02                     
  3143                           ;dc_motor.c: 238:         setMotorPWM(mR);
  3144   001B02  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  3145   001B06  EC88  F00E         	call	_setMotorPWM	;wreg free
  3146   001B0A                     
  3147                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  3148   001B0A  0E00               	movlw	0
  3149   001B0C  6E20               	movwf	(turnRight@i+1)^0,c
  3150   001B0E  0E00               	movlw	0
  3151   001B10  6E1F               	movwf	turnRight@i^0,c
  3152   001B12  EF95  F00D         	goto	l488
  3153   001B16                     l2569:
  3154                           
  3155                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3156   001B16  0E68               	movlw	104
  3157   001B18  6E1C               	movwf	??_turnRight^0,c
  3158   001B1A  0EE4               	movlw	228
  3159   001B1C                     u2437:
  3160   001B1C  2EE8               	decfsz	wreg,f,c
  3161   001B1E  D7FE               	bra	u2437
  3162   001B20  2E1C               	decfsz	??_turnRight^0,f,c
  3163   001B22  D7FC               	bra	u2437
  3164   001B24  D000               	nop2	
  3165   001B26                     
  3166                           ;dc_motor.c: 241:         }
  3167   001B26  4A1F               	infsnz	turnRight@i^0,f,c
  3168   001B28  2A20               	incf	(turnRight@i+1)^0,f,c
  3169   001B2A                     l488:
  3170   001B2A  501B               	movf	turnRight@turnRamp^0,w,c
  3171   001B2C  6E1C               	movwf	??_turnRight^0,c
  3172   001B2E  6A1D               	clrf	(??_turnRight+1)^0,c
  3173   001B30  501C               	movf	??_turnRight^0,w,c
  3174   001B32  5C1F               	subwf	turnRight@i^0,w,c
  3175   001B34  5020               	movf	(turnRight@i+1)^0,w,c
  3176   001B36  0A80               	xorlw	128
  3177   001B38  6E1E               	movwf	(??_turnRight+2)^0,c
  3178   001B3A  501D               	movf	(??_turnRight+1)^0,w,c
  3179   001B3C  0A80               	xorlw	128
  3180   001B3E  581E               	subwfb	(??_turnRight+2)^0,w,c
  3181   001B40  A0D8               	btfss	status,0,c
  3182   001B42  EFA5  F00D         	goto	u1591
  3183   001B46  EFA7  F00D         	goto	u1590
  3184   001B4A                     u1591:
  3185   001B4A  EF8B  F00D         	goto	l2569
  3186   001B4E                     u1590:
  3187   001B4E                     
  3188                           ;dc_motor.c: 242:     }
  3189   001B4E  0621               	decf	turnRight@cur_power^0,f,c
  3190   001B50  A0D8               	btfss	status,0,c
  3191   001B52  0622               	decf	(turnRight@cur_power+1)^0,f,c
  3192   001B54  EF5E  F00D         	goto	l2557
  3193   001B58                     l491:
  3194   001B58  0012               	return		;funcret
  3195   001B5A                     __end_of_turnRight:
  3196                           	callstack 0
  3197                           
  3198 ;; *************** function _turnLeft *****************
  3199 ;; Defined at:
  3200 ;;		line 182 in file "dc_motor.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3203 ;;		 -> main@motorL(10), 
  3204 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3205 ;;		 -> main@motorR(10), 
  3206 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  3207 ;;  turnDuration    1   25[COMRAM] unsigned char 
  3208 ;;  turnRamp        1   26[COMRAM] unsigned char 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  cur_power       2   32[COMRAM] int 
  3211 ;;  i               2   30[COMRAM] int 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3221 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3223 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3224 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;Total ram usage:       12 bytes
  3226 ;; Hardware stack levels used: 1
  3227 ;; Hardware stack levels required when called: 5
  3228 ;; This function calls:
  3229 ;;		_setMotorPWM
  3230 ;; This function is called by:
  3231 ;;		_move
  3232 ;;		_calibration
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text14
  3237   001B5A                     __ptext14:
  3238                           	callstack 0
  3239   001B5A                     _turnLeft:
  3240                           	callstack 24
  3241   001B5A                     
  3242                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  3243   001B5A  5017               	movf	turnLeft@mL^0,w,c
  3244   001B5C  6ED9               	movwf	fsr2l,c
  3245   001B5E  6ADA               	clrf	fsr2h,c
  3246   001B60  0E01               	movlw	1
  3247   001B62  26D9               	addwf	fsr2l,f,c
  3248   001B64  6ADF               	clrf	indf2,c
  3249                           
  3250                           ;dc_motor.c: 185:     mR->direction = 1;
  3251   001B66  5018               	movf	turnLeft@mR^0,w,c
  3252   001B68  6ED9               	movwf	fsr2l,c
  3253   001B6A  6ADA               	clrf	fsr2h,c
  3254   001B6C  0E01               	movlw	1
  3255   001B6E  26D9               	addwf	fsr2l,f,c
  3256   001B70  0E01               	movlw	1
  3257   001B72  6EDF               	movwf	indf2,c
  3258   001B74                     
  3259                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3260   001B74  0E00               	movlw	0
  3261   001B76  6E22               	movwf	(turnLeft@cur_power+1)^0,c
  3262   001B78  0E01               	movlw	1
  3263   001B7A  6E21               	movwf	turnLeft@cur_power^0,c
  3264   001B7C  EF02  F00E         	goto	l2595
  3265   001B80                     l2581:
  3266                           
  3267                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  3268   001B80  5017               	movf	turnLeft@mL^0,w,c
  3269   001B82  6ED9               	movwf	fsr2l,c
  3270   001B84  6ADA               	clrf	fsr2h,c
  3271   001B86  5017               	movf	turnLeft@mL^0,w,c
  3272   001B88  6EE1               	movwf	fsr1l,c
  3273   001B8A  6AE2               	clrf	fsr1h,c
  3274   001B8C  0E09               	movlw	9
  3275   001B8E  26E1               	addwf	fsr1l,f,c
  3276   001B90  50E7               	movf	indf1,w,c
  3277   001B92  2421               	addwf	turnLeft@cur_power^0,w,c
  3278   001B94  6EDF               	movwf	indf2,c
  3279                           
  3280                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  3281   001B96  5018               	movf	turnLeft@mR^0,w,c
  3282   001B98  6ED9               	movwf	fsr2l,c
  3283   001B9A  6ADA               	clrf	fsr2h,c
  3284   001B9C  5018               	movf	turnLeft@mR^0,w,c
  3285   001B9E  6EE1               	movwf	fsr1l,c
  3286   001BA0  6AE2               	clrf	fsr1h,c
  3287   001BA2  0E09               	movlw	9
  3288   001BA4  26E1               	addwf	fsr1l,f,c
  3289   001BA6  50E7               	movf	indf1,w,c
  3290   001BA8  2421               	addwf	turnLeft@cur_power^0,w,c
  3291   001BAA  6EDF               	movwf	indf2,c
  3292   001BAC                     
  3293                           ;dc_motor.c: 191:         setMotorPWM(mL);
  3294   001BAC  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  3295   001BB0  EC88  F00E         	call	_setMotorPWM	;wreg free
  3296   001BB4                     
  3297                           ;dc_motor.c: 192:         setMotorPWM(mR);
  3298   001BB4  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  3299   001BB8  EC88  F00E         	call	_setMotorPWM	;wreg free
  3300   001BBC                     
  3301                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  3302   001BBC  0E00               	movlw	0
  3303   001BBE  6E20               	movwf	(turnLeft@i+1)^0,c
  3304   001BC0  0E00               	movlw	0
  3305   001BC2  6E1F               	movwf	turnLeft@i^0,c
  3306   001BC4  EFEE  F00D         	goto	l462
  3307   001BC8                     l2589:
  3308                           
  3309                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3310   001BC8  0E68               	movlw	104
  3311   001BCA  6E1C               	movwf	??_turnLeft^0,c
  3312   001BCC  0EE4               	movlw	228
  3313   001BCE                     u2447:
  3314   001BCE  2EE8               	decfsz	wreg,f,c
  3315   001BD0  D7FE               	bra	u2447
  3316   001BD2  2E1C               	decfsz	??_turnLeft^0,f,c
  3317   001BD4  D7FC               	bra	u2447
  3318   001BD6  D000               	nop2	
  3319   001BD8                     
  3320                           ;dc_motor.c: 195:         }
  3321   001BD8  4A1F               	infsnz	turnLeft@i^0,f,c
  3322   001BDA  2A20               	incf	(turnLeft@i+1)^0,f,c
  3323   001BDC                     l462:
  3324   001BDC  501B               	movf	turnLeft@turnRamp^0,w,c
  3325   001BDE  6E1C               	movwf	??_turnLeft^0,c
  3326   001BE0  6A1D               	clrf	(??_turnLeft+1)^0,c
  3327   001BE2  501C               	movf	??_turnLeft^0,w,c
  3328   001BE4  5C1F               	subwf	turnLeft@i^0,w,c
  3329   001BE6  5020               	movf	(turnLeft@i+1)^0,w,c
  3330   001BE8  0A80               	xorlw	128
  3331   001BEA  6E1E               	movwf	(??_turnLeft+2)^0,c
  3332   001BEC  501D               	movf	(??_turnLeft+1)^0,w,c
  3333   001BEE  0A80               	xorlw	128
  3334   001BF0  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3335   001BF2  A0D8               	btfss	status,0,c
  3336   001BF4  EFFE  F00D         	goto	u1601
  3337   001BF8  EF00  F00E         	goto	u1600
  3338   001BFC                     u1601:
  3339   001BFC  EFE4  F00D         	goto	l2589
  3340   001C00                     u1600:
  3341   001C00                     
  3342                           ;dc_motor.c: 196:     }
  3343   001C00  4A21               	infsnz	turnLeft@cur_power^0,f,c
  3344   001C02  2A22               	incf	(turnLeft@cur_power+1)^0,f,c
  3345   001C04                     l2595:
  3346   001C04  5019               	movf	turnLeft@turnSpeed^0,w,c
  3347   001C06  6E1C               	movwf	??_turnLeft^0,c
  3348   001C08  6A1D               	clrf	(??_turnLeft+1)^0,c
  3349   001C0A  5021               	movf	turnLeft@cur_power^0,w,c
  3350   001C0C  5C1C               	subwf	??_turnLeft^0,w,c
  3351   001C0E  501D               	movf	(??_turnLeft+1)^0,w,c
  3352   001C10  0A80               	xorlw	128
  3353   001C12  6E1E               	movwf	(??_turnLeft+2)^0,c
  3354   001C14  5022               	movf	(turnLeft@cur_power+1)^0,w,c
  3355   001C16  0A80               	xorlw	128
  3356   001C18  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3357   001C1A  B0D8               	btfsc	status,0,c
  3358   001C1C  EF12  F00E         	goto	u1611
  3359   001C20  EF14  F00E         	goto	u1610
  3360   001C24                     u1611:
  3361   001C24  EFC0  F00D         	goto	l2581
  3362   001C28                     u1610:
  3363   001C28                     
  3364                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  3365   001C28  0E00               	movlw	0
  3366   001C2A  6E20               	movwf	(turnLeft@i+1)^0,c
  3367   001C2C  0E00               	movlw	0
  3368   001C2E  6E1F               	movwf	turnLeft@i^0,c
  3369   001C30  EF24  F00E         	goto	l466
  3370   001C34                     l2599:
  3371                           
  3372                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3373   001C34  0E68               	movlw	104
  3374   001C36  6E1C               	movwf	??_turnLeft^0,c
  3375   001C38  0EE4               	movlw	228
  3376   001C3A                     u2457:
  3377   001C3A  2EE8               	decfsz	wreg,f,c
  3378   001C3C  D7FE               	bra	u2457
  3379   001C3E  2E1C               	decfsz	??_turnLeft^0,f,c
  3380   001C40  D7FC               	bra	u2457
  3381   001C42  D000               	nop2	
  3382   001C44                     
  3383                           ;dc_motor.c: 200:         }
  3384   001C44  4A1F               	infsnz	turnLeft@i^0,f,c
  3385   001C46  2A20               	incf	(turnLeft@i+1)^0,f,c
  3386   001C48                     l466:
  3387   001C48  501A               	movf	turnLeft@turnDuration^0,w,c
  3388   001C4A  6E1C               	movwf	??_turnLeft^0,c
  3389   001C4C  6A1D               	clrf	(??_turnLeft+1)^0,c
  3390   001C4E  501C               	movf	??_turnLeft^0,w,c
  3391   001C50  5C1F               	subwf	turnLeft@i^0,w,c
  3392   001C52  5020               	movf	(turnLeft@i+1)^0,w,c
  3393   001C54  0A80               	xorlw	128
  3394   001C56  6E1E               	movwf	(??_turnLeft+2)^0,c
  3395   001C58  501D               	movf	(??_turnLeft+1)^0,w,c
  3396   001C5A  0A80               	xorlw	128
  3397   001C5C  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3398   001C5E  A0D8               	btfss	status,0,c
  3399   001C60  EF34  F00E         	goto	u1621
  3400   001C64  EF36  F00E         	goto	u1620
  3401   001C68                     u1621:
  3402   001C68  EF1A  F00E         	goto	l2599
  3403   001C6C                     u1620:
  3404   001C6C                     
  3405                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3406   001C6C  C019  F021         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  3407   001C70  6A22               	clrf	(turnLeft@cur_power+1)^0,c
  3408   001C72                     l2603:
  3409   001C72  BE22               	btfsc	(turnLeft@cur_power+1)^0,7,c
  3410   001C74  EF40  F00E         	goto	u1630
  3411   001C78  EF3E  F00E         	goto	u1631
  3412   001C7C                     u1631:
  3413   001C7C  EF42  F00E         	goto	l2607
  3414   001C80                     u1630:
  3415   001C80  EF87  F00E         	goto	l474
  3416   001C84                     l2607:
  3417                           
  3418                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  3419   001C84  5017               	movf	turnLeft@mL^0,w,c
  3420   001C86  6ED9               	movwf	fsr2l,c
  3421   001C88  6ADA               	clrf	fsr2h,c
  3422   001C8A  5017               	movf	turnLeft@mL^0,w,c
  3423   001C8C  6EE1               	movwf	fsr1l,c
  3424   001C8E  6AE2               	clrf	fsr1h,c
  3425   001C90  0E09               	movlw	9
  3426   001C92  26E1               	addwf	fsr1l,f,c
  3427   001C94  50E7               	movf	indf1,w,c
  3428   001C96  2421               	addwf	turnLeft@cur_power^0,w,c
  3429   001C98  6EDF               	movwf	indf2,c
  3430                           
  3431                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  3432   001C9A  5018               	movf	turnLeft@mR^0,w,c
  3433   001C9C  6ED9               	movwf	fsr2l,c
  3434   001C9E  6ADA               	clrf	fsr2h,c
  3435   001CA0  5018               	movf	turnLeft@mR^0,w,c
  3436   001CA2  6EE1               	movwf	fsr1l,c
  3437   001CA4  6AE2               	clrf	fsr1h,c
  3438   001CA6  0E09               	movlw	9
  3439   001CA8  26E1               	addwf	fsr1l,f,c
  3440   001CAA  50E7               	movf	indf1,w,c
  3441   001CAC  2421               	addwf	turnLeft@cur_power^0,w,c
  3442   001CAE  6EDF               	movwf	indf2,c
  3443   001CB0                     
  3444                           ;dc_motor.c: 205:         setMotorPWM(mL);
  3445   001CB0  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  3446   001CB4  EC88  F00E         	call	_setMotorPWM	;wreg free
  3447   001CB8                     
  3448                           ;dc_motor.c: 206:         setMotorPWM(mR);
  3449   001CB8  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  3450   001CBC  EC88  F00E         	call	_setMotorPWM	;wreg free
  3451   001CC0                     
  3452                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  3453   001CC0  0E00               	movlw	0
  3454   001CC2  6E20               	movwf	(turnLeft@i+1)^0,c
  3455   001CC4  0E00               	movlw	0
  3456   001CC6  6E1F               	movwf	turnLeft@i^0,c
  3457   001CC8  EF70  F00E         	goto	l471
  3458   001CCC                     l2615:
  3459                           
  3460                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3461   001CCC  0E68               	movlw	104
  3462   001CCE  6E1C               	movwf	??_turnLeft^0,c
  3463   001CD0  0EE4               	movlw	228
  3464   001CD2                     u2467:
  3465   001CD2  2EE8               	decfsz	wreg,f,c
  3466   001CD4  D7FE               	bra	u2467
  3467   001CD6  2E1C               	decfsz	??_turnLeft^0,f,c
  3468   001CD8  D7FC               	bra	u2467
  3469   001CDA  D000               	nop2	
  3470   001CDC                     
  3471                           ;dc_motor.c: 209:         }
  3472   001CDC  4A1F               	infsnz	turnLeft@i^0,f,c
  3473   001CDE  2A20               	incf	(turnLeft@i+1)^0,f,c
  3474   001CE0                     l471:
  3475   001CE0  501B               	movf	turnLeft@turnRamp^0,w,c
  3476   001CE2  6E1C               	movwf	??_turnLeft^0,c
  3477   001CE4  6A1D               	clrf	(??_turnLeft+1)^0,c
  3478   001CE6  501C               	movf	??_turnLeft^0,w,c
  3479   001CE8  5C1F               	subwf	turnLeft@i^0,w,c
  3480   001CEA  5020               	movf	(turnLeft@i+1)^0,w,c
  3481   001CEC  0A80               	xorlw	128
  3482   001CEE  6E1E               	movwf	(??_turnLeft+2)^0,c
  3483   001CF0  501D               	movf	(??_turnLeft+1)^0,w,c
  3484   001CF2  0A80               	xorlw	128
  3485   001CF4  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3486   001CF6  A0D8               	btfss	status,0,c
  3487   001CF8  EF80  F00E         	goto	u1641
  3488   001CFC  EF82  F00E         	goto	u1640
  3489   001D00                     u1641:
  3490   001D00  EF66  F00E         	goto	l2615
  3491   001D04                     u1640:
  3492   001D04                     
  3493                           ;dc_motor.c: 210:     }
  3494   001D04  0621               	decf	turnLeft@cur_power^0,f,c
  3495   001D06  A0D8               	btfss	status,0,c
  3496   001D08  0622               	decf	(turnLeft@cur_power+1)^0,f,c
  3497   001D0A  EF39  F00E         	goto	l2603
  3498   001D0E                     l474:
  3499   001D0E  0012               	return		;funcret
  3500   001D10                     __end_of_turnLeft:
  3501                           	callstack 0
  3502                           
  3503 ;; *************** function _reverseOneSquare *****************
  3504 ;; Defined at:
  3505 ;;		line 263 in file "dc_motor.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3508 ;;		 -> main@motorL(10), 
  3509 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3510 ;;		 -> main@motorR(10), 
  3511 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3512 ;;  reverseDurat    1   25[COMRAM] unsigned char 
  3513 ;;  straightRamp    1   26[COMRAM] unsigned char 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;  cur_power       2   32[COMRAM] int 
  3516 ;;  i               2   30[COMRAM] int 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3526 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3527 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3528 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3529 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3530 ;;Total ram usage:       12 bytes
  3531 ;; Hardware stack levels used: 1
  3532 ;; Hardware stack levels required when called: 5
  3533 ;; This function calls:
  3534 ;;		_setMotorPWM
  3535 ;; This function is called by:
  3536 ;;		_move
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text15
  3541   001628                     __ptext15:
  3542                           	callstack 0
  3543   001628                     _reverseOneSquare:
  3544                           	callstack 24
  3545   001628                     
  3546                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  3547   001628  5017               	movf	reverseOneSquare@mL^0,w,c
  3548   00162A  6ED9               	movwf	fsr2l,c
  3549   00162C  6ADA               	clrf	fsr2h,c
  3550   00162E  0E01               	movlw	1
  3551   001630  26D9               	addwf	fsr2l,f,c
  3552   001632  6ADF               	clrf	indf2,c
  3553                           
  3554                           ;dc_motor.c: 266:     mR->direction = 0;
  3555   001634  5018               	movf	reverseOneSquare@mR^0,w,c
  3556   001636  6ED9               	movwf	fsr2l,c
  3557   001638  6ADA               	clrf	fsr2h,c
  3558   00163A  0E01               	movlw	1
  3559   00163C  26D9               	addwf	fsr2l,f,c
  3560   00163E  6ADF               	clrf	indf2,c
  3561   001640                     
  3562                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3563   001640  0E00               	movlw	0
  3564   001642  6E22               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3565   001644  0E01               	movlw	1
  3566   001646  6E21               	movwf	reverseOneSquare@cur_power^0,c
  3567   001648  EF68  F00B         	goto	l2641
  3568   00164C                     l2627:
  3569                           
  3570                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  3571   00164C  5017               	movf	reverseOneSquare@mL^0,w,c
  3572   00164E  6ED9               	movwf	fsr2l,c
  3573   001650  6ADA               	clrf	fsr2h,c
  3574   001652  5017               	movf	reverseOneSquare@mL^0,w,c
  3575   001654  6EE1               	movwf	fsr1l,c
  3576   001656  6AE2               	clrf	fsr1h,c
  3577   001658  0E09               	movlw	9
  3578   00165A  26E1               	addwf	fsr1l,f,c
  3579   00165C  50E7               	movf	indf1,w,c
  3580   00165E  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3581   001660  6EDF               	movwf	indf2,c
  3582                           
  3583                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  3584   001662  5018               	movf	reverseOneSquare@mR^0,w,c
  3585   001664  6ED9               	movwf	fsr2l,c
  3586   001666  6ADA               	clrf	fsr2h,c
  3587   001668  5018               	movf	reverseOneSquare@mR^0,w,c
  3588   00166A  6EE1               	movwf	fsr1l,c
  3589   00166C  6AE2               	clrf	fsr1h,c
  3590   00166E  0E09               	movlw	9
  3591   001670  26E1               	addwf	fsr1l,f,c
  3592   001672  50E7               	movf	indf1,w,c
  3593   001674  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3594   001676  6EDF               	movwf	indf2,c
  3595   001678                     
  3596                           ;dc_motor.c: 272:         setMotorPWM(mL);
  3597   001678  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3598   00167C  EC88  F00E         	call	_setMotorPWM	;wreg free
  3599   001680                     
  3600                           ;dc_motor.c: 273:         setMotorPWM(mR);
  3601   001680  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3602   001684  EC88  F00E         	call	_setMotorPWM	;wreg free
  3603   001688                     
  3604                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  3605   001688  0E00               	movlw	0
  3606   00168A  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3607   00168C  0E00               	movlw	0
  3608   00168E  6E1F               	movwf	reverseOneSquare@i^0,c
  3609   001690  EF54  F00B         	goto	l505
  3610   001694                     l2635:
  3611                           
  3612                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3613   001694  0E68               	movlw	104
  3614   001696  6E1C               	movwf	??_reverseOneSquare^0,c
  3615   001698  0EE4               	movlw	228
  3616   00169A                     u2477:
  3617   00169A  2EE8               	decfsz	wreg,f,c
  3618   00169C  D7FE               	bra	u2477
  3619   00169E  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3620   0016A0  D7FC               	bra	u2477
  3621   0016A2  D000               	nop2	
  3622   0016A4                     
  3623                           ;dc_motor.c: 276:         }
  3624   0016A4  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3625   0016A6  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3626   0016A8                     l505:
  3627   0016A8  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3628   0016AA  6E1C               	movwf	??_reverseOneSquare^0,c
  3629   0016AC  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3630   0016AE  501C               	movf	??_reverseOneSquare^0,w,c
  3631   0016B0  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3632   0016B2  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3633   0016B4  0A80               	xorlw	128
  3634   0016B6  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3635   0016B8  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3636   0016BA  0A80               	xorlw	128
  3637   0016BC  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3638   0016BE  A0D8               	btfss	status,0,c
  3639   0016C0  EF64  F00B         	goto	u1651
  3640   0016C4  EF66  F00B         	goto	u1650
  3641   0016C8                     u1651:
  3642   0016C8  EF4A  F00B         	goto	l2635
  3643   0016CC                     u1650:
  3644   0016CC                     
  3645                           ;dc_motor.c: 277:     }
  3646   0016CC  4A21               	infsnz	reverseOneSquare@cur_power^0,f,c
  3647   0016CE  2A22               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3648   0016D0                     l2641:
  3649   0016D0  5019               	movf	reverseOneSquare@straightSpeed^0,w,c
  3650   0016D2  6E1C               	movwf	??_reverseOneSquare^0,c
  3651   0016D4  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3652   0016D6  5021               	movf	reverseOneSquare@cur_power^0,w,c
  3653   0016D8  5C1C               	subwf	??_reverseOneSquare^0,w,c
  3654   0016DA  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3655   0016DC  0A80               	xorlw	128
  3656   0016DE  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3657   0016E0  5022               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3658   0016E2  0A80               	xorlw	128
  3659   0016E4  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3660   0016E6  B0D8               	btfsc	status,0,c
  3661   0016E8  EF78  F00B         	goto	u1661
  3662   0016EC  EF7A  F00B         	goto	u1660
  3663   0016F0                     u1661:
  3664   0016F0  EF26  F00B         	goto	l2627
  3665   0016F4                     u1660:
  3666   0016F4                     
  3667                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  3668   0016F4  0E00               	movlw	0
  3669   0016F6  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3670   0016F8  0E00               	movlw	0
  3671   0016FA  6E1F               	movwf	reverseOneSquare@i^0,c
  3672   0016FC  EF8A  F00B         	goto	l509
  3673   001700                     l2645:
  3674                           
  3675                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3676   001700  0E68               	movlw	104
  3677   001702  6E1C               	movwf	??_reverseOneSquare^0,c
  3678   001704  0EE4               	movlw	228
  3679   001706                     u2487:
  3680   001706  2EE8               	decfsz	wreg,f,c
  3681   001708  D7FE               	bra	u2487
  3682   00170A  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3683   00170C  D7FC               	bra	u2487
  3684   00170E  D000               	nop2	
  3685   001710                     
  3686                           ;dc_motor.c: 281:         }
  3687   001710  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3688   001712  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3689   001714                     l509:
  3690   001714  501A               	movf	reverseOneSquare@reverseDuration^0,w,c
  3691   001716  6E1C               	movwf	??_reverseOneSquare^0,c
  3692   001718  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3693   00171A  501C               	movf	??_reverseOneSquare^0,w,c
  3694   00171C  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3695   00171E  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3696   001720  0A80               	xorlw	128
  3697   001722  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3698   001724  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3699   001726  0A80               	xorlw	128
  3700   001728  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3701   00172A  A0D8               	btfss	status,0,c
  3702   00172C  EF9A  F00B         	goto	u1671
  3703   001730  EF9C  F00B         	goto	u1670
  3704   001734                     u1671:
  3705   001734  EF80  F00B         	goto	l2645
  3706   001738                     u1670:
  3707   001738                     
  3708                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3709   001738  C019  F021         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  3710   00173C  6A22               	clrf	(reverseOneSquare@cur_power+1)^0,c
  3711   00173E                     l2649:
  3712   00173E  BE22               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  3713   001740  EFA6  F00B         	goto	u1680
  3714   001744  EFA4  F00B         	goto	u1681
  3715   001748                     u1681:
  3716   001748  EFA8  F00B         	goto	l2653
  3717   00174C                     u1680:
  3718   00174C  EFED  F00B         	goto	l2669
  3719   001750                     l2653:
  3720                           
  3721                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  3722   001750  5017               	movf	reverseOneSquare@mL^0,w,c
  3723   001752  6ED9               	movwf	fsr2l,c
  3724   001754  6ADA               	clrf	fsr2h,c
  3725   001756  5017               	movf	reverseOneSquare@mL^0,w,c
  3726   001758  6EE1               	movwf	fsr1l,c
  3727   00175A  6AE2               	clrf	fsr1h,c
  3728   00175C  0E09               	movlw	9
  3729   00175E  26E1               	addwf	fsr1l,f,c
  3730   001760  50E7               	movf	indf1,w,c
  3731   001762  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3732   001764  6EDF               	movwf	indf2,c
  3733                           
  3734                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  3735   001766  5018               	movf	reverseOneSquare@mR^0,w,c
  3736   001768  6ED9               	movwf	fsr2l,c
  3737   00176A  6ADA               	clrf	fsr2h,c
  3738   00176C  5018               	movf	reverseOneSquare@mR^0,w,c
  3739   00176E  6EE1               	movwf	fsr1l,c
  3740   001770  6AE2               	clrf	fsr1h,c
  3741   001772  0E09               	movlw	9
  3742   001774  26E1               	addwf	fsr1l,f,c
  3743   001776  50E7               	movf	indf1,w,c
  3744   001778  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3745   00177A  6EDF               	movwf	indf2,c
  3746   00177C                     
  3747                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3748   00177C  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3749   001780  EC88  F00E         	call	_setMotorPWM	;wreg free
  3750   001784                     
  3751                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3752   001784  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3753   001788  EC88  F00E         	call	_setMotorPWM	;wreg free
  3754   00178C                     
  3755                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  3756   00178C  0E00               	movlw	0
  3757   00178E  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3758   001790  0E00               	movlw	0
  3759   001792  6E1F               	movwf	reverseOneSquare@i^0,c
  3760   001794  EFD6  F00B         	goto	l514
  3761   001798                     l2661:
  3762                           
  3763                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3764   001798  0E68               	movlw	104
  3765   00179A  6E1C               	movwf	??_reverseOneSquare^0,c
  3766   00179C  0EE4               	movlw	228
  3767   00179E                     u2497:
  3768   00179E  2EE8               	decfsz	wreg,f,c
  3769   0017A0  D7FE               	bra	u2497
  3770   0017A2  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3771   0017A4  D7FC               	bra	u2497
  3772   0017A6  D000               	nop2	
  3773   0017A8                     
  3774                           ;dc_motor.c: 290:         }
  3775   0017A8  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3776   0017AA  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3777   0017AC                     l514:
  3778   0017AC  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3779   0017AE  6E1C               	movwf	??_reverseOneSquare^0,c
  3780   0017B0  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3781   0017B2  501C               	movf	??_reverseOneSquare^0,w,c
  3782   0017B4  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3783   0017B6  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3784   0017B8  0A80               	xorlw	128
  3785   0017BA  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3786   0017BC  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3787   0017BE  0A80               	xorlw	128
  3788   0017C0  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3789   0017C2  A0D8               	btfss	status,0,c
  3790   0017C4  EFE6  F00B         	goto	u1691
  3791   0017C8  EFE8  F00B         	goto	u1690
  3792   0017CC                     u1691:
  3793   0017CC  EFCC  F00B         	goto	l2661
  3794   0017D0                     u1690:
  3795   0017D0                     
  3796                           ;dc_motor.c: 291:     }
  3797   0017D0  0621               	decf	reverseOneSquare@cur_power^0,f,c
  3798   0017D2  A0D8               	btfss	status,0,c
  3799   0017D4  0622               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  3800   0017D6  EF9F  F00B         	goto	l2649
  3801   0017DA                     l2669:
  3802                           
  3803                           ;dc_motor.c: 292:     mL->power = 0;
  3804   0017DA  5017               	movf	reverseOneSquare@mL^0,w,c
  3805   0017DC  6ED9               	movwf	fsr2l,c
  3806   0017DE  6ADA               	clrf	fsr2h,c
  3807   0017E0  6ADF               	clrf	indf2,c
  3808                           
  3809                           ;dc_motor.c: 293:     mR->power = 0;
  3810   0017E2  5018               	movf	reverseOneSquare@mR^0,w,c
  3811   0017E4  6ED9               	movwf	fsr2l,c
  3812   0017E6  6ADA               	clrf	fsr2h,c
  3813   0017E8  6ADF               	clrf	indf2,c
  3814   0017EA  0012               	return		;funcret
  3815   0017EC                     __end_of_reverseOneSquare:
  3816                           	callstack 0
  3817                           
  3818 ;; *************** function _fullSpeedAhead *****************
  3819 ;; Defined at:
  3820 ;;		line 246 in file "dc_motor.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3823 ;;		 -> main@motorL(10), 
  3824 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3825 ;;		 -> main@motorR(10), 
  3826 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3827 ;;  straightRamp    1   25[COMRAM] unsigned char 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  cur_power       2   31[COMRAM] int 
  3830 ;;  i               2   29[COMRAM] int 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3841 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;Total ram usage:       11 bytes
  3845 ;; Hardware stack levels used: 1
  3846 ;; Hardware stack levels required when called: 5
  3847 ;; This function calls:
  3848 ;;		_setMotorPWM
  3849 ;; This function is called by:
  3850 ;;		_main
  3851 ;;		_move
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text16
  3856   0021A0                     __ptext16:
  3857                           	callstack 0
  3858   0021A0                     _fullSpeedAhead:
  3859                           	callstack 24
  3860   0021A0                     
  3861                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  3862   0021A0  5017               	movf	fullSpeedAhead@mL^0,w,c
  3863   0021A2  6ED9               	movwf	fsr2l,c
  3864   0021A4  6ADA               	clrf	fsr2h,c
  3865   0021A6  0E01               	movlw	1
  3866   0021A8  26D9               	addwf	fsr2l,f,c
  3867   0021AA  0E01               	movlw	1
  3868   0021AC  6EDF               	movwf	indf2,c
  3869                           
  3870                           ;dc_motor.c: 249:     mR->direction = 1;
  3871   0021AE  5018               	movf	fullSpeedAhead@mR^0,w,c
  3872   0021B0  6ED9               	movwf	fsr2l,c
  3873   0021B2  6ADA               	clrf	fsr2h,c
  3874   0021B4  0E01               	movlw	1
  3875   0021B6  26D9               	addwf	fsr2l,f,c
  3876   0021B8  0E01               	movlw	1
  3877   0021BA  6EDF               	movwf	indf2,c
  3878   0021BC                     
  3879                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3880   0021BC  0E00               	movlw	0
  3881   0021BE  6E21               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  3882   0021C0  0E01               	movlw	1
  3883   0021C2  6E20               	movwf	fullSpeedAhead@cur_power^0,c
  3884   0021C4  EF26  F011         	goto	l2469
  3885   0021C8                     l2455:
  3886                           
  3887                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  3888   0021C8  5017               	movf	fullSpeedAhead@mL^0,w,c
  3889   0021CA  6ED9               	movwf	fsr2l,c
  3890   0021CC  6ADA               	clrf	fsr2h,c
  3891   0021CE  5017               	movf	fullSpeedAhead@mL^0,w,c
  3892   0021D0  6EE1               	movwf	fsr1l,c
  3893   0021D2  6AE2               	clrf	fsr1h,c
  3894   0021D4  0E09               	movlw	9
  3895   0021D6  26E1               	addwf	fsr1l,f,c
  3896   0021D8  50E7               	movf	indf1,w,c
  3897   0021DA  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3898   0021DC  6EDF               	movwf	indf2,c
  3899                           
  3900                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  3901   0021DE  5018               	movf	fullSpeedAhead@mR^0,w,c
  3902   0021E0  6ED9               	movwf	fsr2l,c
  3903   0021E2  6ADA               	clrf	fsr2h,c
  3904   0021E4  5018               	movf	fullSpeedAhead@mR^0,w,c
  3905   0021E6  6EE1               	movwf	fsr1l,c
  3906   0021E8  6AE2               	clrf	fsr1h,c
  3907   0021EA  0E09               	movlw	9
  3908   0021EC  26E1               	addwf	fsr1l,f,c
  3909   0021EE  50E7               	movf	indf1,w,c
  3910   0021F0  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3911   0021F2  6EDF               	movwf	indf2,c
  3912   0021F4                     
  3913                           ;dc_motor.c: 255:         setMotorPWM(mL);
  3914   0021F4  C017  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3915   0021F8  EC88  F00E         	call	_setMotorPWM	;wreg free
  3916   0021FC                     
  3917                           ;dc_motor.c: 256:         setMotorPWM(mR);
  3918   0021FC  C018  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3919   002200  EC88  F00E         	call	_setMotorPWM	;wreg free
  3920   002204                     
  3921                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  3922   002204  0E00               	movlw	0
  3923   002206  6E1F               	movwf	(fullSpeedAhead@i+1)^0,c
  3924   002208  0E00               	movlw	0
  3925   00220A  6E1E               	movwf	fullSpeedAhead@i^0,c
  3926   00220C  EF12  F011         	goto	l496
  3927   002210                     l2463:
  3928                           
  3929                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3930   002210  0E68               	movlw	104
  3931   002212  6E1B               	movwf	??_fullSpeedAhead^0,c
  3932   002214  0EE4               	movlw	228
  3933   002216                     u2507:
  3934   002216  2EE8               	decfsz	wreg,f,c
  3935   002218  D7FE               	bra	u2507
  3936   00221A  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  3937   00221C  D7FC               	bra	u2507
  3938   00221E  D000               	nop2	
  3939   002220                     
  3940                           ;dc_motor.c: 259:         }
  3941   002220  4A1E               	infsnz	fullSpeedAhead@i^0,f,c
  3942   002222  2A1F               	incf	(fullSpeedAhead@i+1)^0,f,c
  3943   002224                     l496:
  3944   002224  501A               	movf	fullSpeedAhead@straightRamp^0,w,c
  3945   002226  6E1B               	movwf	??_fullSpeedAhead^0,c
  3946   002228  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3947   00222A  501B               	movf	??_fullSpeedAhead^0,w,c
  3948   00222C  5C1E               	subwf	fullSpeedAhead@i^0,w,c
  3949   00222E  501F               	movf	(fullSpeedAhead@i+1)^0,w,c
  3950   002230  0A80               	xorlw	128
  3951   002232  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3952   002234  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3953   002236  0A80               	xorlw	128
  3954   002238  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3955   00223A  A0D8               	btfss	status,0,c
  3956   00223C  EF22  F011         	goto	u1471
  3957   002240  EF24  F011         	goto	u1470
  3958   002244                     u1471:
  3959   002244  EF08  F011         	goto	l2463
  3960   002248                     u1470:
  3961   002248                     
  3962                           ;dc_motor.c: 260:     }
  3963   002248  4A20               	infsnz	fullSpeedAhead@cur_power^0,f,c
  3964   00224A  2A21               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  3965   00224C                     l2469:
  3966   00224C  5019               	movf	fullSpeedAhead@straightSpeed^0,w,c
  3967   00224E  6E1B               	movwf	??_fullSpeedAhead^0,c
  3968   002250  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3969   002252  5020               	movf	fullSpeedAhead@cur_power^0,w,c
  3970   002254  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  3971   002256  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3972   002258  0A80               	xorlw	128
  3973   00225A  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3974   00225C  5021               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  3975   00225E  0A80               	xorlw	128
  3976   002260  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3977   002262  B0D8               	btfsc	status,0,c
  3978   002264  EF36  F011         	goto	u1481
  3979   002268  EF38  F011         	goto	u1480
  3980   00226C                     u1481:
  3981   00226C  EFE4  F010         	goto	l2455
  3982   002270                     u1480:
  3983   002270  0012               	return		;funcret
  3984   002272                     __end_of_fullSpeedAhead:
  3985                           	callstack 0
  3986                           
  3987 ;; *************** function _setMotorPWM *****************
  3988 ;; Defined at:
  3989 ;;		line 65 in file "dc_motor.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  m               1   17[COMRAM] PTR struct DC_motor
  3992 ;;		 -> main@motorR(10), main@motorL(10), 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  negDuty         1   21[COMRAM] unsigned char 
  3995 ;;  posDuty         1   20[COMRAM] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4005 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4009 ;;Total ram usage:        5 bytes
  4010 ;; Hardware stack levels used: 1
  4011 ;; Hardware stack levels required when called: 4
  4012 ;; This function calls:
  4013 ;;		___lwdiv
  4014 ;;		___wmul
  4015 ;; This function is called by:
  4016 ;;		_stop
  4017 ;;		_turnLeft
  4018 ;;		_turnRight
  4019 ;;		_fullSpeedAhead
  4020 ;;		_reverseOneSquare
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text17
  4025   001D10                     __ptext17:
  4026                           	callstack 0
  4027   001D10                     _setMotorPWM:
  4028                           	callstack 25
  4029   001D10                     
  4030                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  4031   001D10  5012               	movf	setMotorPWM@m^0,w,c
  4032   001D12  6ED9               	movwf	fsr2l,c
  4033   001D14  6ADA               	clrf	fsr2h,c
  4034   001D16  0E02               	movlw	2
  4035   001D18  26D9               	addwf	fsr2l,f,c
  4036   001D1A  50DF               	movf	indf2,w,c
  4037   001D1C  B4D8               	btfsc	status,2,c
  4038   001D1E  EF93  F00E         	goto	u1351
  4039   001D22  EF95  F00E         	goto	u1350
  4040   001D26                     u1351:
  4041   001D26  EFC5  F00E         	goto	l2391
  4042   001D2A                     u1350:
  4043   001D2A                     
  4044                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  4045   001D2A  5012               	movf	setMotorPWM@m^0,w,c
  4046   001D2C  6ED9               	movwf	fsr2l,c
  4047   001D2E  6ADA               	clrf	fsr2h,c
  4048   001D30  50DF               	movf	indf2,w,c
  4049   001D32  6E13               	movwf	??_setMotorPWM^0,c
  4050   001D34  5013               	movf	??_setMotorPWM^0,w,c
  4051   001D36  6E05               	movwf	___wmul@multiplier^0,c
  4052   001D38  6A06               	clrf	(___wmul@multiplier+1)^0,c
  4053   001D3A  5012               	movf	setMotorPWM@m^0,w,c
  4054   001D3C  6ED9               	movwf	fsr2l,c
  4055   001D3E  6ADA               	clrf	fsr2h,c
  4056   001D40  0E03               	movlw	3
  4057   001D42  26D9               	addwf	fsr2l,f,c
  4058   001D44  CFDE F007          	movff	postinc2,___wmul@multiplicand
  4059   001D48  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  4060   001D4C  ECD4  F014         	call	___wmul	;wreg free
  4061   001D50  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4062   001D54  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4063   001D58  0E00               	movlw	0
  4064   001D5A  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  4065   001D5C  0E64               	movlw	100
  4066   001D5E  6E0D               	movwf	___lwdiv@divisor^0,c
  4067   001D60  EC90  F012         	call	___lwdiv	;wreg free
  4068   001D64  5012               	movf	setMotorPWM@m^0,w,c
  4069   001D66  6ED9               	movwf	fsr2l,c
  4070   001D68  6ADA               	clrf	fsr2h,c
  4071   001D6A  0E03               	movlw	3
  4072   001D6C  26D9               	addwf	fsr2l,f,c
  4073   001D6E  50DF               	movf	indf2,w,c
  4074   001D70  6E14               	movwf	(??_setMotorPWM+1)^0,c
  4075   001D72  500B               	movf	?___lwdiv^0,w,c
  4076   001D74  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  4077   001D76  6E15               	movwf	setMotorPWM@posDuty^0,c
  4078   001D78                     
  4079                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  4080   001D78  5012               	movf	setMotorPWM@m^0,w,c
  4081   001D7A  6ED9               	movwf	fsr2l,c
  4082   001D7C  6ADA               	clrf	fsr2h,c
  4083   001D7E  0E03               	movlw	3
  4084   001D80  26D9               	addwf	fsr2l,f,c
  4085   001D82  50DF               	movf	indf2,w,c
  4086   001D84  6E16               	movwf	setMotorPWM@negDuty^0,c
  4087                           
  4088                           ;dc_motor.c: 72:     }
  4089   001D86  EFE6  F00E         	goto	l2395
  4090   001D8A                     l2391:
  4091                           
  4092                           ;dc_motor.c: 74:         posDuty=0;
  4093   001D8A  0E00               	movlw	0
  4094   001D8C  6E15               	movwf	setMotorPWM@posDuty^0,c
  4095   001D8E                     
  4096                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4097   001D8E  5012               	movf	setMotorPWM@m^0,w,c
  4098   001D90  6ED9               	movwf	fsr2l,c
  4099   001D92  6ADA               	clrf	fsr2h,c
  4100   001D94  50DF               	movf	indf2,w,c
  4101   001D96  6E13               	movwf	??_setMotorPWM^0,c
  4102   001D98  5013               	movf	??_setMotorPWM^0,w,c
  4103   001D9A  6E05               	movwf	___wmul@multiplier^0,c
  4104   001D9C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  4105   001D9E  5012               	movf	setMotorPWM@m^0,w,c
  4106   001DA0  6ED9               	movwf	fsr2l,c
  4107   001DA2  6ADA               	clrf	fsr2h,c
  4108   001DA4  0E03               	movlw	3
  4109   001DA6  26D9               	addwf	fsr2l,f,c
  4110   001DA8  CFDE F007          	movff	postinc2,___wmul@multiplicand
  4111   001DAC  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  4112   001DB0  ECD4  F014         	call	___wmul	;wreg free
  4113   001DB4  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4114   001DB8  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4115   001DBC  0E00               	movlw	0
  4116   001DBE  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  4117   001DC0  0E64               	movlw	100
  4118   001DC2  6E0D               	movwf	___lwdiv@divisor^0,c
  4119   001DC4  EC90  F012         	call	___lwdiv	;wreg free
  4120   001DC8  500B               	movf	?___lwdiv^0,w,c
  4121   001DCA  6E16               	movwf	setMotorPWM@negDuty^0,c
  4122   001DCC                     l2395:
  4123                           
  4124                           ;dc_motor.c: 78:     if (m->direction) {
  4125   001DCC  5012               	movf	setMotorPWM@m^0,w,c
  4126   001DCE  6ED9               	movwf	fsr2l,c
  4127   001DD0  6ADA               	clrf	fsr2h,c
  4128   001DD2  0E01               	movlw	1
  4129   001DD4  26D9               	addwf	fsr2l,f,c
  4130   001DD6  50DF               	movf	indf2,w,c
  4131   001DD8  B4D8               	btfsc	status,2,c
  4132   001DDA  EFF1  F00E         	goto	u1361
  4133   001DDE  EFF3  F00E         	goto	u1360
  4134   001DE2                     u1361:
  4135   001DE2  EF13  F00F         	goto	l2399
  4136   001DE6                     u1360:
  4137   001DE6                     
  4138                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  4139   001DE6  5012               	movf	setMotorPWM@m^0,w,c
  4140   001DE8  6ED9               	movwf	fsr2l,c
  4141   001DEA  6ADA               	clrf	fsr2h,c
  4142   001DEC  0E05               	movlw	5
  4143   001DEE  26D9               	addwf	fsr2l,f,c
  4144   001DF0  CFDE F013          	movff	postinc2,??_setMotorPWM
  4145   001DF4  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4146   001DF8  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4147   001DFC  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4148   001E00  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  4149                           
  4150                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  4151   001E04  5012               	movf	setMotorPWM@m^0,w,c
  4152   001E06  6ED9               	movwf	fsr2l,c
  4153   001E08  6ADA               	clrf	fsr2h,c
  4154   001E0A  0E07               	movlw	7
  4155   001E0C  26D9               	addwf	fsr2l,f,c
  4156   001E0E  CFDE F013          	movff	postinc2,??_setMotorPWM
  4157   001E12  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4158   001E16  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4159   001E1A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4160   001E1E  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  4161                           
  4162                           ;dc_motor.c: 81:     } else {
  4163   001E22  EF31  F00F         	goto	l431
  4164   001E26                     l2399:
  4165                           
  4166                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  4167   001E26  5012               	movf	setMotorPWM@m^0,w,c
  4168   001E28  6ED9               	movwf	fsr2l,c
  4169   001E2A  6ADA               	clrf	fsr2h,c
  4170   001E2C  0E05               	movlw	5
  4171   001E2E  26D9               	addwf	fsr2l,f,c
  4172   001E30  CFDE F013          	movff	postinc2,??_setMotorPWM
  4173   001E34  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4174   001E38  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4175   001E3C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4176   001E40  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  4177                           
  4178                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  4179   001E44  5012               	movf	setMotorPWM@m^0,w,c
  4180   001E46  6ED9               	movwf	fsr2l,c
  4181   001E48  6ADA               	clrf	fsr2h,c
  4182   001E4A  0E07               	movlw	7
  4183   001E4C  26D9               	addwf	fsr2l,f,c
  4184   001E4E  CFDE F013          	movff	postinc2,??_setMotorPWM
  4185   001E52  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4186   001E56  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4187   001E5A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4188   001E5E  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  4189   001E62                     l431:
  4190   001E62  0012               	return		;funcret
  4191   001E64                     __end_of_setMotorPWM:
  4192                           	callstack 0
  4193                           
  4194 ;; *************** function ___wmul *****************
  4195 ;; Defined at:
  4196 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  multiplier      2    4[COMRAM] unsigned int 
  4199 ;;  multiplicand    2    6[COMRAM] unsigned int 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  product         2    8[COMRAM] unsigned int 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  2    4[COMRAM] unsigned int 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0, prodl, prodh
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4214 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4215 ;;Total ram usage:        6 bytes
  4216 ;; Hardware stack levels used: 1
  4217 ;; Hardware stack levels required when called: 3
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_setMotorPWM
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text18
  4226   0029A8                     __ptext18:
  4227                           	callstack 0
  4228   0029A8                     ___wmul:
  4229                           	callstack 25
  4230   0029A8  5005               	movf	___wmul@multiplier^0,w,c
  4231   0029AA  0207               	mulwf	___wmul@multiplicand^0,c
  4232   0029AC  CFF3 F009          	movff	prodl,___wmul@product
  4233   0029B0  CFF4 F00A          	movff	prodh,___wmul@product+1
  4234   0029B4  5005               	movf	___wmul@multiplier^0,w,c
  4235   0029B6  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  4236   0029B8  50F3               	movf	243,w,c
  4237   0029BA  260A               	addwf	(___wmul@product+1)^0,f,c
  4238   0029BC  5006               	movf	(___wmul@multiplier+1)^0,w,c
  4239   0029BE  0207               	mulwf	___wmul@multiplicand^0,c
  4240   0029C0  50F3               	movf	243,w,c
  4241   0029C2  260A               	addwf	(___wmul@product+1)^0,f,c
  4242   0029C4  C009  F005         	movff	___wmul@product,?___wmul
  4243   0029C8  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  4244   0029CC  0012               	return		;funcret
  4245   0029CE                     __end_of___wmul:
  4246                           	callstack 0
  4247                           
  4248 ;; *************** function ___lwdiv *****************
  4249 ;; Defined at:
  4250 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  dividend        2   10[COMRAM] unsigned int 
  4253 ;;  divisor         2   12[COMRAM] unsigned int 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  quotient        2   14[COMRAM] unsigned int 
  4256 ;;  counter         1   16[COMRAM] unsigned char 
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  2   10[COMRAM] unsigned int 
  4259 ;; Registers used:
  4260 ;;		wreg, status,2, status,0
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4267 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4269 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4270 ;;Total ram usage:        7 bytes
  4271 ;; Hardware stack levels used: 1
  4272 ;; Hardware stack levels required when called: 3
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_setMotorPWM
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text19
  4281   002520                     __ptext19:
  4282                           	callstack 0
  4283   002520                     ___lwdiv:
  4284                           	callstack 25
  4285   002520  0E00               	movlw	0
  4286   002522  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  4287   002524  0E00               	movlw	0
  4288   002526  6E0F               	movwf	___lwdiv@quotient^0,c
  4289   002528  500D               	movf	___lwdiv@divisor^0,w,c
  4290   00252A  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4291   00252C  B4D8               	btfsc	status,2,c
  4292   00252E  EF9B  F012         	goto	u1271
  4293   002532  EF9D  F012         	goto	u1270
  4294   002536                     u1271:
  4295   002536  EFC5  F012         	goto	l1026
  4296   00253A                     u1270:
  4297   00253A  0E01               	movlw	1
  4298   00253C  6E11               	movwf	___lwdiv@counter^0,c
  4299   00253E  EFA5  F012         	goto	l2341
  4300   002542                     l2339:
  4301   002542  90D8               	bcf	status,0,c
  4302   002544  360D               	rlcf	___lwdiv@divisor^0,f,c
  4303   002546  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4304   002548  2A11               	incf	___lwdiv@counter^0,f,c
  4305   00254A                     l2341:
  4306   00254A  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  4307   00254C  EFAA  F012         	goto	u1281
  4308   002550  EFAC  F012         	goto	u1280
  4309   002554                     u1281:
  4310   002554  EFA1  F012         	goto	l2339
  4311   002558                     u1280:
  4312   002558                     l2343:
  4313   002558  90D8               	bcf	status,0,c
  4314   00255A  360F               	rlcf	___lwdiv@quotient^0,f,c
  4315   00255C  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4316   00255E  500D               	movf	___lwdiv@divisor^0,w,c
  4317   002560  5C0B               	subwf	___lwdiv@dividend^0,w,c
  4318   002562  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  4319   002564  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4320   002566  A0D8               	btfss	status,0,c
  4321   002568  EFB8  F012         	goto	u1291
  4322   00256C  EFBA  F012         	goto	u1290
  4323   002570                     u1291:
  4324   002570  EFBF  F012         	goto	l2351
  4325   002574                     u1290:
  4326   002574  500D               	movf	___lwdiv@divisor^0,w,c
  4327   002576  5E0B               	subwf	___lwdiv@dividend^0,f,c
  4328   002578  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  4329   00257A  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4330   00257C  800F               	bsf	___lwdiv@quotient^0,0,c
  4331   00257E                     l2351:
  4332   00257E  90D8               	bcf	status,0,c
  4333   002580  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4334   002582  320D               	rrcf	___lwdiv@divisor^0,f,c
  4335   002584  2E11               	decfsz	___lwdiv@counter^0,f,c
  4336   002586  EFAC  F012         	goto	l2343
  4337   00258A                     l1026:
  4338   00258A  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4339   00258E  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4340   002592  0012               	return		;funcret
  4341   002594                     __end_of___lwdiv:
  4342                           	callstack 0
  4343                           
  4344 ;; *************** function _initUSART4 *****************
  4345 ;; Defined at:
  4346 ;;		line 4 in file "serial.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels used: 1
  4366 ;; Hardware stack levels required when called: 3
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_main
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text20
  4375   002A38                     __ptext20:
  4376                           	callstack 0
  4377   002A38                     _initUSART4:
  4378                           	callstack 27
  4379   002A38                     
  4380                           ;serial.c: 7:     RC0PPS = 0x12;
  4381   002A38  0E12               	movlw	18
  4382   002A3A  010E               	movlb	14	; () banked
  4383   002A3C  6F62               	movwf	98,b	;volatile
  4384                           
  4385                           ;serial.c: 8:     RX4PPS = 0x11;
  4386   002A3E  0E11               	movlw	17
  4387   002A40  6F15               	movwf	21,b	;volatile
  4388   002A42                     
  4389                           ; BSR set to: 14
  4390                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  4391   002A42  97E9               	bcf	233,3,b	;volatile
  4392   002A44                     
  4393                           ; BSR set to: 14
  4394                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  4395   002A44  95E8               	bcf	232,2,b	;volatile
  4396                           
  4397                           ;serial.c: 13:     SP4BRGL = 51;
  4398   002A46  0E33               	movlw	51
  4399   002A48  6FE5               	movwf	229,b	;volatile
  4400                           
  4401                           ;serial.c: 14:     SP4BRGH = 0;
  4402   002A4A  0E00               	movlw	0
  4403   002A4C  6FE6               	movwf	230,b	;volatile
  4404   002A4E                     
  4405                           ; BSR set to: 14
  4406                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  4407   002A4E  89E7               	bsf	231,4,b	;volatile
  4408   002A50                     
  4409                           ; BSR set to: 14
  4410                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  4411   002A50  8BE8               	bsf	232,5,b	;volatile
  4412   002A52                     
  4413                           ; BSR set to: 14
  4414                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  4415   002A52  8FE7               	bsf	231,7,b	;volatile
  4416   002A54                     
  4417                           ; BSR set to: 14
  4418   002A54  0012               	return		;funcret
  4419   002A56                     __end_of_initUSART4:
  4420                           	callstack 0
  4421                           
  4422 ;; *************** function _initDCmotorsPWM *****************
  4423 ;; Defined at:
  4424 ;;		line 5 in file "dc_motor.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4442 ;;Total ram usage:        2 bytes
  4443 ;; Hardware stack levels used: 1
  4444 ;; Hardware stack levels required when called: 3
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_main
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text21
  4453   002490                     __ptext21:
  4454                           	callstack 0
  4455   002490                     _initDCmotorsPWM:
  4456                           	callstack 27
  4457   002490                     
  4458                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  4459   002490  947D               	bcf	125,2,c	;volatile
  4460                           
  4461                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  4462   002492  9485               	bcf	133,2,c	;volatile
  4463                           
  4464                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  4465   002494  987D               	bcf	125,4,c	;volatile
  4466                           
  4467                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  4468   002496  9885               	bcf	133,4,c	;volatile
  4469                           
  4470                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  4471   002498  9E7B               	bcf	123,7,c	;volatile
  4472                           
  4473                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  4474   00249A  9E83               	bcf	131,7,c	;volatile
  4475                           
  4476                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  4477   00249C  9C7F               	bcf	127,6,c	;volatile
  4478                           
  4479                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  4480   00249E  9C87               	bcf	135,6,c	;volatile
  4481   0024A0                     
  4482                           ;dc_motor.c: 18:     RE2PPS=0x05;
  4483   0024A0  0E05               	movlw	5
  4484   0024A2  010E               	movlb	14	; () banked
  4485   0024A4  6F74               	movwf	116,b	;volatile
  4486                           
  4487                           ;dc_motor.c: 19:     RE4PPS=0x06;
  4488   0024A6  0E06               	movlw	6
  4489   0024A8  6F76               	movwf	118,b	;volatile
  4490                           
  4491                           ;dc_motor.c: 20:     RC7PPS=0x07;
  4492   0024AA  0E07               	movlw	7
  4493   0024AC  6F69               	movwf	105,b	;volatile
  4494                           
  4495                           ;dc_motor.c: 21:     RG6PPS=0x08;
  4496   0024AE  0E08               	movlw	8
  4497   0024B0  6F88               	movwf	136,b	;volatile
  4498                           
  4499                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  4500   0024B2  50BD               	movf	189,w,c	;volatile
  4501   0024B4  0B8F               	andlw	-113
  4502   0024B6  0930               	iorlw	48
  4503   0024B8  6EBD               	movwf	189,c	;volatile
  4504                           
  4505                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  4506   0024BA  0EE0               	movlw	-32
  4507   0024BC  16BE               	andwf	190,f,c	;volatile
  4508                           
  4509                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  4510   0024BE  50BF               	movf	191,w,c	;volatile
  4511   0024C0  0BF0               	andlw	-16
  4512   0024C2  0901               	iorlw	1
  4513   0024C4  6EBF               	movwf	191,c	;volatile
  4514   0024C6                     
  4515                           ; BSR set to: 14
  4516                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  4517   0024C6  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4518   0024CA                     
  4519                           ; BSR set to: 14
  4520                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  4521   0024CA  8EBD               	bsf	189,7,c	;volatile
  4522                           
  4523                           ;dc_motor.c: 35:     CCPR1H=0;
  4524   0024CC  0E00               	movlw	0
  4525   0024CE  6EAA               	movwf	170,c	;volatile
  4526                           
  4527                           ;dc_motor.c: 36:     CCPR2H=0;
  4528   0024D0  0E00               	movlw	0
  4529   0024D2  6EA6               	movwf	166,c	;volatile
  4530                           
  4531                           ;dc_motor.c: 37:     CCPR3H=0;
  4532   0024D4  0E00               	movlw	0
  4533   0024D6  010F               	movlb	15	; () banked
  4534   0024D8  6F25               	movwf	37,b	;volatile
  4535                           
  4536                           ;dc_motor.c: 38:     CCPR4H=0;
  4537   0024DA  0E00               	movlw	0
  4538   0024DC  6F21               	movwf	33,b	;volatile
  4539                           
  4540                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  4541   0024DE  0EFC               	movlw	-4
  4542   0024E0  16AD               	andwf	173,f,c	;volatile
  4543                           
  4544                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  4545   0024E2  0EF3               	movlw	-13
  4546   0024E4  16AD               	andwf	173,f,c	;volatile
  4547                           
  4548                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  4549   0024E6  0ECF               	movlw	-49
  4550   0024E8  16AD               	andwf	173,f,c	;volatile
  4551                           
  4552                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  4553   0024EA  0E3F               	movlw	-193
  4554   0024EC  16AD               	andwf	173,f,c	;volatile
  4555   0024EE                     
  4556                           ; BSR set to: 15
  4557                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  4558   0024EE  88AB               	bsf	171,4,c	;volatile
  4559                           
  4560                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  4561   0024F0  50AB               	movf	171,w,c	;volatile
  4562   0024F2  0BF0               	andlw	-16
  4563   0024F4  090C               	iorlw	12
  4564   0024F6  6EAB               	movwf	171,c	;volatile
  4565   0024F8                     
  4566                           ; BSR set to: 15
  4567                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  4568   0024F8  8EAB               	bsf	171,7,c	;volatile
  4569   0024FA                     
  4570                           ; BSR set to: 15
  4571                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  4572   0024FA  88A7               	bsf	167,4,c	;volatile
  4573                           
  4574                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  4575   0024FC  50A7               	movf	167,w,c	;volatile
  4576   0024FE  0BF0               	andlw	-16
  4577   002500  090C               	iorlw	12
  4578   002502  6EA7               	movwf	167,c	;volatile
  4579   002504                     
  4580                           ; BSR set to: 15
  4581                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  4582   002504  8EA7               	bsf	167,7,c	;volatile
  4583   002506                     
  4584                           ; BSR set to: 15
  4585                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  4586   002506  8926               	bsf	38,4,b	;volatile
  4587                           
  4588                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  4589   002508  5126               	movf	38,w,b	;volatile
  4590   00250A  0BF0               	andlw	-16
  4591   00250C  090C               	iorlw	12
  4592   00250E  6F26               	movwf	38,b	;volatile
  4593   002510                     
  4594                           ; BSR set to: 15
  4595                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  4596   002510  8F26               	bsf	38,7,b	;volatile
  4597   002512                     
  4598                           ; BSR set to: 15
  4599                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  4600   002512  8922               	bsf	34,4,b	;volatile
  4601                           
  4602                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  4603   002514  5122               	movf	34,w,b	;volatile
  4604   002516  0BF0               	andlw	-16
  4605   002518  090C               	iorlw	12
  4606   00251A  6F22               	movwf	34,b	;volatile
  4607   00251C                     
  4608                           ; BSR set to: 15
  4609                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  4610   00251C  8F22               	bsf	34,7,b	;volatile
  4611   00251E                     
  4612                           ; BSR set to: 15
  4613   00251E  0012               	return		;funcret
  4614   002520                     __end_of_initDCmotorsPWM:
  4615                           	callstack 0
  4616                           
  4617 ;; *************** function _color_read *****************
  4618 ;; Defined at:
  4619 ;;		line 55 in file "color.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  RGBC            1    8[COMRAM] PTR struct RGBC_val
  4622 ;;		 -> main@RGBC(8), 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4634 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4638 ;;Total ram usage:        8 bytes
  4639 ;; Hardware stack levels used: 1
  4640 ;; Hardware stack levels required when called: 5
  4641 ;; This function calls:
  4642 ;;		_I2C_2_Master_Read
  4643 ;;		_I2C_2_Master_RepStart
  4644 ;;		_I2C_2_Master_Start
  4645 ;;		_I2C_2_Master_Stop
  4646 ;;		_I2C_2_Master_Write
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text22
  4653   001452                     __ptext22:
  4654                           	callstack 0
  4655   001452                     _color_read:
  4656                           	callstack 25
  4657   001452                     
  4658                           ;color.c: 55: void color_read(RGBC_val *RGBC);color.c: 56: {;color.c: 57:  I2C_2_Master_
      +                          Start();
  4659   001452  EC88  F015         	call	_I2C_2_Master_Start	;wreg free
  4660                           
  4661                           ;color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  4662   001456  0E52               	movlw	82
  4663   001458  EC72  F015         	call	_I2C_2_Master_Write
  4664                           
  4665                           ;color.c: 59:  I2C_2_Master_Write(0xA0 | 0x16);
  4666   00145C  0EB6               	movlw	182
  4667   00145E  EC72  F015         	call	_I2C_2_Master_Write
  4668                           
  4669                           ;color.c: 60:  I2C_2_Master_RepStart();
  4670   001462  EC7E  F015         	call	_I2C_2_Master_RepStart	;wreg free
  4671                           
  4672                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  4673   001466  0E53               	movlw	83
  4674   001468  EC72  F015         	call	_I2C_2_Master_Write
  4675   00146C                     
  4676                           ;color.c: 62:  RGBC->R=I2C_2_Master_Read(1);
  4677   00146C  0E01               	movlw	1
  4678   00146E  ECC4  F013         	call	_I2C_2_Master_Read
  4679   001472  6E0A               	movwf	??_color_read^0,c
  4680   001474  6A0B               	clrf	(??_color_read+1)^0,c
  4681   001476  5009               	movf	color_read@RGBC^0,w,c
  4682   001478  6ED9               	movwf	fsr2l,c
  4683   00147A  6ADA               	clrf	fsr2h,c
  4684   00147C  C00A  FFDE         	movff	??_color_read,postinc2
  4685   001480  C00B  FFDD         	movff	??_color_read+1,postdec2
  4686   001484                     
  4687                           ;color.c: 63:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  4688   001484  5009               	movf	color_read@RGBC^0,w,c
  4689   001486  6ED9               	movwf	fsr2l,c
  4690   001488  6ADA               	clrf	fsr2h,c
  4691   00148A  CFDE F00A          	movff	postinc2,??_color_read
  4692   00148E  CFDD F00B          	movff	postdec2,??_color_read+1
  4693   001492  0E00               	movlw	0
  4694   001494  ECC4  F013         	call	_I2C_2_Master_Read
  4695   001498  6E0C               	movwf	(??_color_read+2)^0,c
  4696   00149A  500C               	movf	(??_color_read+2)^0,w,c
  4697   00149C  6E0E               	movwf	(??_color_read+4)^0,c
  4698   00149E  6A0D               	clrf	(??_color_read+3)^0,c
  4699   0014A0  500A               	movf	??_color_read^0,w,c
  4700   0014A2  100D               	iorwf	(??_color_read+3)^0,w,c
  4701   0014A4  6E0F               	movwf	(??_color_read+5)^0,c
  4702   0014A6  500B               	movf	(??_color_read+1)^0,w,c
  4703   0014A8  100E               	iorwf	(??_color_read+4)^0,w,c
  4704   0014AA  6E10               	movwf	(??_color_read+6)^0,c
  4705   0014AC  5009               	movf	color_read@RGBC^0,w,c
  4706   0014AE  6ED9               	movwf	fsr2l,c
  4707   0014B0  6ADA               	clrf	fsr2h,c
  4708   0014B2  C00F  FFDE         	movff	??_color_read+5,postinc2
  4709   0014B6  C010  FFDD         	movff	??_color_read+6,postdec2
  4710                           
  4711                           ;color.c: 64:  I2C_2_Master_Stop();
  4712   0014BA  EC83  F015         	call	_I2C_2_Master_Stop	;wreg free
  4713                           
  4714                           ;color.c: 66:     I2C_2_Master_Start();
  4715   0014BE  EC88  F015         	call	_I2C_2_Master_Start	;wreg free
  4716                           
  4717                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  4718   0014C2  0E52               	movlw	82
  4719   0014C4  EC72  F015         	call	_I2C_2_Master_Write
  4720                           
  4721                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x18);
  4722   0014C8  0EB8               	movlw	184
  4723   0014CA  EC72  F015         	call	_I2C_2_Master_Write
  4724                           
  4725                           ;color.c: 69:  I2C_2_Master_RepStart();
  4726   0014CE  EC7E  F015         	call	_I2C_2_Master_RepStart	;wreg free
  4727                           
  4728                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  4729   0014D2  0E53               	movlw	83
  4730   0014D4  EC72  F015         	call	_I2C_2_Master_Write
  4731   0014D8                     
  4732                           ;color.c: 71:  RGBC->G=I2C_2_Master_Read(1);
  4733   0014D8  0E01               	movlw	1
  4734   0014DA  ECC4  F013         	call	_I2C_2_Master_Read
  4735   0014DE  6E0A               	movwf	??_color_read^0,c
  4736   0014E0  6A0B               	clrf	(??_color_read+1)^0,c
  4737   0014E2  5009               	movf	color_read@RGBC^0,w,c
  4738   0014E4  6ED9               	movwf	fsr2l,c
  4739   0014E6  6ADA               	clrf	fsr2h,c
  4740   0014E8  0E02               	movlw	2
  4741   0014EA  26D9               	addwf	fsr2l,f,c
  4742   0014EC  C00A  FFDE         	movff	??_color_read,postinc2
  4743   0014F0  C00B  FFDD         	movff	??_color_read+1,postdec2
  4744   0014F4                     
  4745                           ;color.c: 72:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  4746   0014F4  5009               	movf	color_read@RGBC^0,w,c
  4747   0014F6  6ED9               	movwf	fsr2l,c
  4748   0014F8  6ADA               	clrf	fsr2h,c
  4749   0014FA  0E02               	movlw	2
  4750   0014FC  26D9               	addwf	fsr2l,f,c
  4751   0014FE  CFDE F00A          	movff	postinc2,??_color_read
  4752   001502  CFDD F00B          	movff	postdec2,??_color_read+1
  4753   001506  0E00               	movlw	0
  4754   001508  ECC4  F013         	call	_I2C_2_Master_Read
  4755   00150C  6E0C               	movwf	(??_color_read+2)^0,c
  4756   00150E  500C               	movf	(??_color_read+2)^0,w,c
  4757   001510  6E0E               	movwf	(??_color_read+4)^0,c
  4758   001512  6A0D               	clrf	(??_color_read+3)^0,c
  4759   001514  500A               	movf	??_color_read^0,w,c
  4760   001516  100D               	iorwf	(??_color_read+3)^0,w,c
  4761   001518  6E0F               	movwf	(??_color_read+5)^0,c
  4762   00151A  500B               	movf	(??_color_read+1)^0,w,c
  4763   00151C  100E               	iorwf	(??_color_read+4)^0,w,c
  4764   00151E  6E10               	movwf	(??_color_read+6)^0,c
  4765   001520  5009               	movf	color_read@RGBC^0,w,c
  4766   001522  6ED9               	movwf	fsr2l,c
  4767   001524  6ADA               	clrf	fsr2h,c
  4768   001526  0E02               	movlw	2
  4769   001528  26D9               	addwf	fsr2l,f,c
  4770   00152A  C00F  FFDE         	movff	??_color_read+5,postinc2
  4771   00152E  C010  FFDD         	movff	??_color_read+6,postdec2
  4772                           
  4773                           ;color.c: 73:  I2C_2_Master_Stop();
  4774   001532  EC83  F015         	call	_I2C_2_Master_Stop	;wreg free
  4775                           
  4776                           ;color.c: 75:     I2C_2_Master_Start();
  4777   001536  EC88  F015         	call	_I2C_2_Master_Start	;wreg free
  4778                           
  4779                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  4780   00153A  0E52               	movlw	82
  4781   00153C  EC72  F015         	call	_I2C_2_Master_Write
  4782                           
  4783                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x1A);
  4784   001540  0EBA               	movlw	186
  4785   001542  EC72  F015         	call	_I2C_2_Master_Write
  4786                           
  4787                           ;color.c: 78:  I2C_2_Master_RepStart();
  4788   001546  EC7E  F015         	call	_I2C_2_Master_RepStart	;wreg free
  4789                           
  4790                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  4791   00154A  0E53               	movlw	83
  4792   00154C  EC72  F015         	call	_I2C_2_Master_Write
  4793   001550                     
  4794                           ;color.c: 80:  RGBC->B=I2C_2_Master_Read(1);
  4795   001550  0E01               	movlw	1
  4796   001552  ECC4  F013         	call	_I2C_2_Master_Read
  4797   001556  6E0A               	movwf	??_color_read^0,c
  4798   001558  6A0B               	clrf	(??_color_read+1)^0,c
  4799   00155A  5009               	movf	color_read@RGBC^0,w,c
  4800   00155C  6ED9               	movwf	fsr2l,c
  4801   00155E  6ADA               	clrf	fsr2h,c
  4802   001560  0E04               	movlw	4
  4803   001562  26D9               	addwf	fsr2l,f,c
  4804   001564  C00A  FFDE         	movff	??_color_read,postinc2
  4805   001568  C00B  FFDD         	movff	??_color_read+1,postdec2
  4806   00156C                     
  4807                           ;color.c: 81:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  4808   00156C  5009               	movf	color_read@RGBC^0,w,c
  4809   00156E  6ED9               	movwf	fsr2l,c
  4810   001570  6ADA               	clrf	fsr2h,c
  4811   001572  0E04               	movlw	4
  4812   001574  26D9               	addwf	fsr2l,f,c
  4813   001576  CFDE F00A          	movff	postinc2,??_color_read
  4814   00157A  CFDD F00B          	movff	postdec2,??_color_read+1
  4815   00157E  0E00               	movlw	0
  4816   001580  ECC4  F013         	call	_I2C_2_Master_Read
  4817   001584  6E0C               	movwf	(??_color_read+2)^0,c
  4818   001586  500C               	movf	(??_color_read+2)^0,w,c
  4819   001588  6E0E               	movwf	(??_color_read+4)^0,c
  4820   00158A  6A0D               	clrf	(??_color_read+3)^0,c
  4821   00158C  500A               	movf	??_color_read^0,w,c
  4822   00158E  100D               	iorwf	(??_color_read+3)^0,w,c
  4823   001590  6E0F               	movwf	(??_color_read+5)^0,c
  4824   001592  500B               	movf	(??_color_read+1)^0,w,c
  4825   001594  100E               	iorwf	(??_color_read+4)^0,w,c
  4826   001596  6E10               	movwf	(??_color_read+6)^0,c
  4827   001598  5009               	movf	color_read@RGBC^0,w,c
  4828   00159A  6ED9               	movwf	fsr2l,c
  4829   00159C  6ADA               	clrf	fsr2h,c
  4830   00159E  0E04               	movlw	4
  4831   0015A0  26D9               	addwf	fsr2l,f,c
  4832   0015A2  C00F  FFDE         	movff	??_color_read+5,postinc2
  4833   0015A6  C010  FFDD         	movff	??_color_read+6,postdec2
  4834                           
  4835                           ;color.c: 82:  I2C_2_Master_Stop();
  4836   0015AA  EC83  F015         	call	_I2C_2_Master_Stop	;wreg free
  4837                           
  4838                           ;color.c: 84:     I2C_2_Master_Start();
  4839   0015AE  EC88  F015         	call	_I2C_2_Master_Start	;wreg free
  4840                           
  4841                           ;color.c: 85:  I2C_2_Master_Write(0x52 | 0x00);
  4842   0015B2  0E52               	movlw	82
  4843   0015B4  EC72  F015         	call	_I2C_2_Master_Write
  4844                           
  4845                           ;color.c: 86:  I2C_2_Master_Write(0xA0 | 0x14);
  4846   0015B8  0EB4               	movlw	180
  4847   0015BA  EC72  F015         	call	_I2C_2_Master_Write
  4848                           
  4849                           ;color.c: 87:  I2C_2_Master_RepStart();
  4850   0015BE  EC7E  F015         	call	_I2C_2_Master_RepStart	;wreg free
  4851                           
  4852                           ;color.c: 88:  I2C_2_Master_Write(0x52 | 0x01);
  4853   0015C2  0E53               	movlw	83
  4854   0015C4  EC72  F015         	call	_I2C_2_Master_Write
  4855   0015C8                     
  4856                           ;color.c: 89:  RGBC->C=I2C_2_Master_Read(1);
  4857   0015C8  0E01               	movlw	1
  4858   0015CA  ECC4  F013         	call	_I2C_2_Master_Read
  4859   0015CE  6E0A               	movwf	??_color_read^0,c
  4860   0015D0  6A0B               	clrf	(??_color_read+1)^0,c
  4861   0015D2  5009               	movf	color_read@RGBC^0,w,c
  4862   0015D4  6ED9               	movwf	fsr2l,c
  4863   0015D6  6ADA               	clrf	fsr2h,c
  4864   0015D8  0E06               	movlw	6
  4865   0015DA  26D9               	addwf	fsr2l,f,c
  4866   0015DC  C00A  FFDE         	movff	??_color_read,postinc2
  4867   0015E0  C00B  FFDD         	movff	??_color_read+1,postdec2
  4868   0015E4                     
  4869                           ;color.c: 90:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  4870   0015E4  5009               	movf	color_read@RGBC^0,w,c
  4871   0015E6  6ED9               	movwf	fsr2l,c
  4872   0015E8  6ADA               	clrf	fsr2h,c
  4873   0015EA  0E06               	movlw	6
  4874   0015EC  26D9               	addwf	fsr2l,f,c
  4875   0015EE  CFDE F00A          	movff	postinc2,??_color_read
  4876   0015F2  CFDD F00B          	movff	postdec2,??_color_read+1
  4877   0015F6  0E00               	movlw	0
  4878   0015F8  ECC4  F013         	call	_I2C_2_Master_Read
  4879   0015FC  6E0C               	movwf	(??_color_read+2)^0,c
  4880   0015FE  500C               	movf	(??_color_read+2)^0,w,c
  4881   001600  6E0E               	movwf	(??_color_read+4)^0,c
  4882   001602  6A0D               	clrf	(??_color_read+3)^0,c
  4883   001604  500A               	movf	??_color_read^0,w,c
  4884   001606  100D               	iorwf	(??_color_read+3)^0,w,c
  4885   001608  6E0F               	movwf	(??_color_read+5)^0,c
  4886   00160A  500B               	movf	(??_color_read+1)^0,w,c
  4887   00160C  100E               	iorwf	(??_color_read+4)^0,w,c
  4888   00160E  6E10               	movwf	(??_color_read+6)^0,c
  4889   001610  5009               	movf	color_read@RGBC^0,w,c
  4890   001612  6ED9               	movwf	fsr2l,c
  4891   001614  6ADA               	clrf	fsr2h,c
  4892   001616  0E06               	movlw	6
  4893   001618  26D9               	addwf	fsr2l,f,c
  4894   00161A  C00F  FFDE         	movff	??_color_read+5,postinc2
  4895   00161E  C010  FFDD         	movff	??_color_read+6,postdec2
  4896                           
  4897                           ;color.c: 91:  I2C_2_Master_Stop();
  4898   001622  EC83  F015         	call	_I2C_2_Master_Stop	;wreg free
  4899   001626  0012               	return		;funcret
  4900   001628                     __end_of_color_read:
  4901                           	callstack 0
  4902                           
  4903 ;; *************** function _I2C_2_Master_RepStart *****************
  4904 ;; Defined at:
  4905 ;;		line 33 in file "i2c.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  1    wreg      void 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used: 1
  4925 ;; Hardware stack levels required when called: 4
  4926 ;; This function calls:
  4927 ;;		_I2C_2_Master_Idle
  4928 ;; This function is called by:
  4929 ;;		_color_read
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text23
  4934   002AFC                     __ptext23:
  4935                           	callstack 0
  4936   002AFC                     _I2C_2_Master_RepStart:
  4937                           	callstack 25
  4938   002AFC                     
  4939                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4940   002AFC  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  4941   002B00                     
  4942                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4943   002B00  010E               	movlb	14	; () banked
  4944   002B02  83DA               	bsf	218,1,b	;volatile
  4945   002B04                     
  4946                           ; BSR set to: 14
  4947   002B04  0012               	return		;funcret
  4948   002B06                     __end_of_I2C_2_Master_RepStart:
  4949                           	callstack 0
  4950                           
  4951 ;; *************** function _I2C_2_Master_Read *****************
  4952 ;; Defined at:
  4953 ;;		line 51 in file "i2c.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  ack             1    wreg     unsigned char 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  ack             1    6[COMRAM] unsigned char 
  4958 ;;  tmp             1    7[COMRAM] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      unsigned char 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4972 ;;Total ram usage:        3 bytes
  4973 ;; Hardware stack levels used: 1
  4974 ;; Hardware stack levels required when called: 4
  4975 ;; This function calls:
  4976 ;;		_I2C_2_Master_Idle
  4977 ;; This function is called by:
  4978 ;;		_color_read
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text24
  4983   002788                     __ptext24:
  4984                           	callstack 0
  4985   002788                     _I2C_2_Master_Read:
  4986                           	callstack 25
  4987                           
  4988                           ; BSR set to: 14
  4989                           ;incstack = 0
  4990                           ;I2C_2_Master_Read@ack stored from wreg
  4991   002788  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  4992   00278A                     
  4993                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4994   00278A  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  4995   00278E                     
  4996                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4997   00278E  010E               	movlb	14	; () banked
  4998   002790  87DA               	bsf	218,3,b	;volatile
  4999                           
  5000                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5001   002792  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  5002   002796                     
  5003                           ;i2c.c: 57:   tmp = SSP2BUF;
  5004   002796  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5005                           
  5006                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5007   00279A  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  5008   00279E                     
  5009                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5010   00279E  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  5011   0027A0  B4D8               	btfsc	status,2,c
  5012   0027A2  EFD5  F013         	goto	u1491
  5013   0027A6  EFD9  F013         	goto	u1490
  5014   0027AA                     u1491:
  5015   0027AA  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5016   0027AC  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  5017   0027AE  EFDA  F013         	goto	u1508
  5018   0027B2                     u1490:
  5019   0027B2  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5020   0027B4                     u1508:
  5021   0027B4  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  5022   0027B6  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  5023   0027B8  010E               	movlb	14	; () banked
  5024   0027BA  51DA               	movf	218,w,b	;volatile
  5025   0027BC  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5026   0027BE  0BDF               	andlw	-33
  5027   0027C0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5028   0027C2  6FDA               	movwf	218,b	;volatile
  5029   0027C4                     
  5030                           ; BSR set to: 14
  5031                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5032   0027C4  89DA               	bsf	218,4,b	;volatile
  5033   0027C6                     
  5034                           ; BSR set to: 14
  5035                           ;i2c.c: 61:   return tmp;
  5036   0027C6  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  5037   0027C8                     
  5038                           ; BSR set to: 14
  5039   0027C8  0012               	return		;funcret
  5040   0027CA                     __end_of_I2C_2_Master_Read:
  5041                           	callstack 0
  5042                           
  5043 ;; *************** function _color_normalise *****************
  5044 ;; Defined at:
  5045 ;;		line 95 in file "color.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  RGBC            8   30[COMRAM] struct RGBC_val
  5048 ;;  RGBC_n          1   38[COMRAM] PTR struct RGBC_val
  5049 ;;		 -> main@RGBC_n(8), 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5061 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;Total ram usage:       11 bytes
  5066 ;; Hardware stack levels used: 1
  5067 ;; Hardware stack levels required when called: 4
  5068 ;; This function calls:
  5069 ;;		___aldiv
  5070 ;;		___lmul
  5071 ;; This function is called by:
  5072 ;;		_main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text25
  5077   001E64                     __ptext25:
  5078                           	callstack 0
  5079   001E64                     _color_normalise:
  5080                           	callstack 26
  5081   001E64                     
  5082                           ;color.c: 113:     RGBC_n->C = RGBC.C;
  5083   001E64  5027               	movf	color_normalise@RGBC_n^0,w,c
  5084   001E66  6ED9               	movwf	fsr2l,c
  5085   001E68  6ADA               	clrf	fsr2h,c
  5086   001E6A  0E06               	movlw	6
  5087   001E6C  26D9               	addwf	fsr2l,f,c
  5088   001E6E  C025  FFDE         	movff	color_normalise@RGBC+6,postinc2
  5089   001E72  C026  FFDD         	movff	color_normalise@RGBC+7,postdec2
  5090   001E76                     
  5091                           ;color.c: 114:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  5092   001E76  C01F  F005         	movff	color_normalise@RGBC,___lmul@multiplier
  5093   001E7A  C020  F006         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  5094   001E7E  6A07               	clrf	(___lmul@multiplier+2)^0,c
  5095   001E80  6A08               	clrf	(___lmul@multiplier+3)^0,c
  5096   001E82  0EE8               	movlw	232
  5097   001E84  6E09               	movwf	___lmul@multiplicand^0,c
  5098   001E86  0E03               	movlw	3
  5099   001E88  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  5100   001E8A  0E00               	movlw	0
  5101   001E8C  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  5102   001E8E  0E00               	movlw	0
  5103   001E90  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  5104   001E92  EC04  F013         	call	___lmul	;wreg free
  5105   001E96  C005  F011         	movff	?___lmul,___aldiv@dividend
  5106   001E9A  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  5107   001E9E  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  5108   001EA2  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  5109   001EA6  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  5110   001EA8  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  5111   001EAA  6E28               	movwf	??_color_normalise^0,c
  5112   001EAC  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  5113   001EAE  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5114   001EB0  6E29               	movwf	(??_color_normalise+1)^0,c
  5115   001EB2  501F               	movf	color_normalise@RGBC^0,w,c
  5116   001EB4  2628               	addwf	??_color_normalise^0,f,c
  5117   001EB6  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  5118   001EB8  2229               	addwfc	(??_color_normalise+1)^0,f,c
  5119   001EBA  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  5120   001EBE  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  5121   001EC2  6A17               	clrf	(___aldiv@divisor+2)^0,c
  5122   001EC4  6A18               	clrf	(___aldiv@divisor+3)^0,c
  5123   001EC6  ECD3  F00F         	call	___aldiv	;wreg free
  5124   001ECA  5027               	movf	color_normalise@RGBC_n^0,w,c
  5125   001ECC  6ED9               	movwf	fsr2l,c
  5126   001ECE  6ADA               	clrf	fsr2h,c
  5127   001ED0  C011  FFDE         	movff	?___aldiv,postinc2
  5128   001ED4  C012  FFDD         	movff	?___aldiv+1,postdec2
  5129   001ED8                     
  5130                           ;color.c: 115:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  5131   001ED8  C021  F005         	movff	color_normalise@RGBC+2,___lmul@multiplier
  5132   001EDC  C022  F006         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  5133   001EE0  6A07               	clrf	(___lmul@multiplier+2)^0,c
  5134   001EE2  6A08               	clrf	(___lmul@multiplier+3)^0,c
  5135   001EE4  0EE8               	movlw	232
  5136   001EE6  6E09               	movwf	___lmul@multiplicand^0,c
  5137   001EE8  0E03               	movlw	3
  5138   001EEA  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  5139   001EEC  0E00               	movlw	0
  5140   001EEE  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  5141   001EF0  0E00               	movlw	0
  5142   001EF2  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  5143   001EF4  EC04  F013         	call	___lmul	;wreg free
  5144   001EF8  C005  F011         	movff	?___lmul,___aldiv@dividend
  5145   001EFC  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  5146   001F00  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  5147   001F04  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  5148   001F08  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  5149   001F0A  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  5150   001F0C  6E28               	movwf	??_color_normalise^0,c
  5151   001F0E  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  5152   001F10  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5153   001F12  6E29               	movwf	(??_color_normalise+1)^0,c
  5154   001F14  501F               	movf	color_normalise@RGBC^0,w,c
  5155   001F16  2628               	addwf	??_color_normalise^0,f,c
  5156   001F18  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  5157   001F1A  2229               	addwfc	(??_color_normalise+1)^0,f,c
  5158   001F1C  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  5159   001F20  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  5160   001F24  6A17               	clrf	(___aldiv@divisor+2)^0,c
  5161   001F26  6A18               	clrf	(___aldiv@divisor+3)^0,c
  5162   001F28  ECD3  F00F         	call	___aldiv	;wreg free
  5163   001F2C  5027               	movf	color_normalise@RGBC_n^0,w,c
  5164   001F2E  6ED9               	movwf	fsr2l,c
  5165   001F30  6ADA               	clrf	fsr2h,c
  5166   001F32  0E02               	movlw	2
  5167   001F34  26D9               	addwf	fsr2l,f,c
  5168   001F36  C011  FFDE         	movff	?___aldiv,postinc2
  5169   001F3A  C012  FFDD         	movff	?___aldiv+1,postdec2
  5170   001F3E                     
  5171                           ;color.c: 116:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  5172   001F3E  C023  F005         	movff	color_normalise@RGBC+4,___lmul@multiplier
  5173   001F42  C024  F006         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  5174   001F46  6A07               	clrf	(___lmul@multiplier+2)^0,c
  5175   001F48  6A08               	clrf	(___lmul@multiplier+3)^0,c
  5176   001F4A  0EE8               	movlw	232
  5177   001F4C  6E09               	movwf	___lmul@multiplicand^0,c
  5178   001F4E  0E03               	movlw	3
  5179   001F50  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  5180   001F52  0E00               	movlw	0
  5181   001F54  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  5182   001F56  0E00               	movlw	0
  5183   001F58  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  5184   001F5A  EC04  F013         	call	___lmul	;wreg free
  5185   001F5E  C005  F011         	movff	?___lmul,___aldiv@dividend
  5186   001F62  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  5187   001F66  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  5188   001F6A  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  5189   001F6E  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  5190   001F70  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  5191   001F72  6E28               	movwf	??_color_normalise^0,c
  5192   001F74  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  5193   001F76  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5194   001F78  6E29               	movwf	(??_color_normalise+1)^0,c
  5195   001F7A  501F               	movf	color_normalise@RGBC^0,w,c
  5196   001F7C  2628               	addwf	??_color_normalise^0,f,c
  5197   001F7E  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  5198   001F80  2229               	addwfc	(??_color_normalise+1)^0,f,c
  5199   001F82  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  5200   001F86  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  5201   001F8A  6A17               	clrf	(___aldiv@divisor+2)^0,c
  5202   001F8C  6A18               	clrf	(___aldiv@divisor+3)^0,c
  5203   001F8E  ECD3  F00F         	call	___aldiv	;wreg free
  5204   001F92  5027               	movf	color_normalise@RGBC_n^0,w,c
  5205   001F94  6ED9               	movwf	fsr2l,c
  5206   001F96  6ADA               	clrf	fsr2h,c
  5207   001F98  0E04               	movlw	4
  5208   001F9A  26D9               	addwf	fsr2l,f,c
  5209   001F9C  C011  FFDE         	movff	?___aldiv,postinc2
  5210   001FA0  C012  FFDD         	movff	?___aldiv+1,postdec2
  5211   001FA4  0012               	return		;funcret
  5212   001FA6                     __end_of_color_normalise:
  5213                           	callstack 0
  5214                           
  5215 ;; *************** function ___lmul *****************
  5216 ;; Defined at:
  5217 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  multiplier      4    4[COMRAM] unsigned long 
  5220 ;;  multiplicand    4    8[COMRAM] unsigned long 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  product         4   12[COMRAM] unsigned long 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  4    4[COMRAM] unsigned long 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5232 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5233 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5235 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5236 ;;Total ram usage:       12 bytes
  5237 ;; Hardware stack levels used: 1
  5238 ;; Hardware stack levels required when called: 3
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_color_normalise
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text26
  5247   002608                     __ptext26:
  5248                           	callstack 0
  5249   002608                     ___lmul:
  5250                           	callstack 26
  5251   002608  0E00               	movlw	0
  5252   00260A  6E0D               	movwf	___lmul@product^0,c
  5253   00260C  0E00               	movlw	0
  5254   00260E  6E0E               	movwf	(___lmul@product+1)^0,c
  5255   002610  0E00               	movlw	0
  5256   002612  6E0F               	movwf	(___lmul@product+2)^0,c
  5257   002614  0E00               	movlw	0
  5258   002616  6E10               	movwf	(___lmul@product+3)^0,c
  5259   002618                     l2673:
  5260   002618  A005               	btfss	___lmul@multiplier^0,0,c
  5261   00261A  EF11  F013         	goto	u1701
  5262   00261E  EF13  F013         	goto	u1700
  5263   002622                     u1701:
  5264   002622  EF1B  F013         	goto	l2677
  5265   002626                     u1700:
  5266   002626  5009               	movf	___lmul@multiplicand^0,w,c
  5267   002628  260D               	addwf	___lmul@product^0,f,c
  5268   00262A  500A               	movf	(___lmul@multiplicand+1)^0,w,c
  5269   00262C  220E               	addwfc	(___lmul@product+1)^0,f,c
  5270   00262E  500B               	movf	(___lmul@multiplicand+2)^0,w,c
  5271   002630  220F               	addwfc	(___lmul@product+2)^0,f,c
  5272   002632  500C               	movf	(___lmul@multiplicand+3)^0,w,c
  5273   002634  2210               	addwfc	(___lmul@product+3)^0,f,c
  5274   002636                     l2677:
  5275   002636  90D8               	bcf	status,0,c
  5276   002638  3609               	rlcf	___lmul@multiplicand^0,f,c
  5277   00263A  360A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5278   00263C  360B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5279   00263E  360C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5280   002640  90D8               	bcf	status,0,c
  5281   002642  3208               	rrcf	(___lmul@multiplier+3)^0,f,c
  5282   002644  3207               	rrcf	(___lmul@multiplier+2)^0,f,c
  5283   002646  3206               	rrcf	(___lmul@multiplier+1)^0,f,c
  5284   002648  3205               	rrcf	___lmul@multiplier^0,f,c
  5285   00264A  5005               	movf	___lmul@multiplier^0,w,c
  5286   00264C  1006               	iorwf	(___lmul@multiplier+1)^0,w,c
  5287   00264E  1007               	iorwf	(___lmul@multiplier+2)^0,w,c
  5288   002650  1008               	iorwf	(___lmul@multiplier+3)^0,w,c
  5289   002652  A4D8               	btfss	status,2,c
  5290   002654  EF2E  F013         	goto	u1711
  5291   002658  EF30  F013         	goto	u1710
  5292   00265C                     u1711:
  5293   00265C  EF0C  F013         	goto	l2673
  5294   002660                     u1710:
  5295   002660  C00D  F005         	movff	___lmul@product,?___lmul
  5296   002664  C00E  F006         	movff	___lmul@product+1,?___lmul+1
  5297   002668  C00F  F007         	movff	___lmul@product+2,?___lmul+2
  5298   00266C  C010  F008         	movff	___lmul@product+3,?___lmul+3
  5299   002670  0012               	return		;funcret
  5300   002672                     __end_of___lmul:
  5301                           	callstack 0
  5302                           
  5303 ;; *************** function ___aldiv *****************
  5304 ;; Defined at:
  5305 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  dividend        4   16[COMRAM] long 
  5308 ;;  divisor         4   20[COMRAM] long 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  quotient        4   26[COMRAM] long 
  5311 ;;  sign            1   25[COMRAM] unsigned char 
  5312 ;;  counter         1   24[COMRAM] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  4   16[COMRAM] long 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5322 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5323 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5325 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5326 ;;Total ram usage:       14 bytes
  5327 ;; Hardware stack levels used: 1
  5328 ;; Hardware stack levels required when called: 3
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_color_normalise
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text27
  5337   001FA6                     __ptext27:
  5338                           	callstack 0
  5339   001FA6                     ___aldiv:
  5340                           	callstack 26
  5341   001FA6  0E00               	movlw	0
  5342   001FA8  6E1A               	movwf	___aldiv@sign^0,c
  5343   001FAA  BE18               	btfsc	(___aldiv@divisor+3)^0,7,c
  5344   001FAC  EFDC  F00F         	goto	u1720
  5345   001FB0  EFDA  F00F         	goto	u1721
  5346   001FB4                     u1721:
  5347   001FB4  EFE6  F00F         	goto	l2689
  5348   001FB8                     u1720:
  5349   001FB8  1E18               	comf	(___aldiv@divisor+3)^0,f,c
  5350   001FBA  1E17               	comf	(___aldiv@divisor+2)^0,f,c
  5351   001FBC  1E16               	comf	(___aldiv@divisor+1)^0,f,c
  5352   001FBE  6C15               	negf	___aldiv@divisor^0,c
  5353   001FC0  0E00               	movlw	0
  5354   001FC2  2216               	addwfc	(___aldiv@divisor+1)^0,f,c
  5355   001FC4  2217               	addwfc	(___aldiv@divisor+2)^0,f,c
  5356   001FC6  2218               	addwfc	(___aldiv@divisor+3)^0,f,c
  5357   001FC8  0E01               	movlw	1
  5358   001FCA  6E1A               	movwf	___aldiv@sign^0,c
  5359   001FCC                     l2689:
  5360   001FCC  BE14               	btfsc	(___aldiv@dividend+3)^0,7,c
  5361   001FCE  EFED  F00F         	goto	u1730
  5362   001FD2  EFEB  F00F         	goto	u1731
  5363   001FD6                     u1731:
  5364   001FD6  EFF7  F00F         	goto	l2695
  5365   001FDA                     u1730:
  5366   001FDA  1E14               	comf	(___aldiv@dividend+3)^0,f,c
  5367   001FDC  1E13               	comf	(___aldiv@dividend+2)^0,f,c
  5368   001FDE  1E12               	comf	(___aldiv@dividend+1)^0,f,c
  5369   001FE0  6C11               	negf	___aldiv@dividend^0,c
  5370   001FE2  0E00               	movlw	0
  5371   001FE4  2212               	addwfc	(___aldiv@dividend+1)^0,f,c
  5372   001FE6  2213               	addwfc	(___aldiv@dividend+2)^0,f,c
  5373   001FE8  2214               	addwfc	(___aldiv@dividend+3)^0,f,c
  5374   001FEA  0E01               	movlw	1
  5375   001FEC  1A1A               	xorwf	___aldiv@sign^0,f,c
  5376   001FEE                     l2695:
  5377   001FEE  0E00               	movlw	0
  5378   001FF0  6E1B               	movwf	___aldiv@quotient^0,c
  5379   001FF2  0E00               	movlw	0
  5380   001FF4  6E1C               	movwf	(___aldiv@quotient+1)^0,c
  5381   001FF6  0E00               	movlw	0
  5382   001FF8  6E1D               	movwf	(___aldiv@quotient+2)^0,c
  5383   001FFA  0E00               	movlw	0
  5384   001FFC  6E1E               	movwf	(___aldiv@quotient+3)^0,c
  5385   001FFE  5015               	movf	___aldiv@divisor^0,w,c
  5386   002000  1016               	iorwf	(___aldiv@divisor+1)^0,w,c
  5387   002002  1017               	iorwf	(___aldiv@divisor+2)^0,w,c
  5388   002004  1018               	iorwf	(___aldiv@divisor+3)^0,w,c
  5389   002006  B4D8               	btfsc	status,2,c
  5390   002008  EF08  F010         	goto	u1741
  5391   00200C  EF0A  F010         	goto	u1740
  5392   002010                     u1741:
  5393   002010  EF40  F010         	goto	l2717
  5394   002014                     u1740:
  5395   002014  0E01               	movlw	1
  5396   002016  6E19               	movwf	___aldiv@counter^0,c
  5397   002018  EF14  F010         	goto	l2703
  5398   00201C                     l2701:
  5399   00201C  90D8               	bcf	status,0,c
  5400   00201E  3615               	rlcf	___aldiv@divisor^0,f,c
  5401   002020  3616               	rlcf	(___aldiv@divisor+1)^0,f,c
  5402   002022  3617               	rlcf	(___aldiv@divisor+2)^0,f,c
  5403   002024  3618               	rlcf	(___aldiv@divisor+3)^0,f,c
  5404   002026  2A19               	incf	___aldiv@counter^0,f,c
  5405   002028                     l2703:
  5406   002028  AE18               	btfss	(___aldiv@divisor+3)^0,7,c
  5407   00202A  EF19  F010         	goto	u1751
  5408   00202E  EF1B  F010         	goto	u1750
  5409   002032                     u1751:
  5410   002032  EF0E  F010         	goto	l2701
  5411   002036                     u1750:
  5412   002036                     l2705:
  5413   002036  90D8               	bcf	status,0,c
  5414   002038  361B               	rlcf	___aldiv@quotient^0,f,c
  5415   00203A  361C               	rlcf	(___aldiv@quotient+1)^0,f,c
  5416   00203C  361D               	rlcf	(___aldiv@quotient+2)^0,f,c
  5417   00203E  361E               	rlcf	(___aldiv@quotient+3)^0,f,c
  5418   002040  5015               	movf	___aldiv@divisor^0,w,c
  5419   002042  5C11               	subwf	___aldiv@dividend^0,w,c
  5420   002044  5016               	movf	(___aldiv@divisor+1)^0,w,c
  5421   002046  5812               	subwfb	(___aldiv@dividend+1)^0,w,c
  5422   002048  5017               	movf	(___aldiv@divisor+2)^0,w,c
  5423   00204A  5813               	subwfb	(___aldiv@dividend+2)^0,w,c
  5424   00204C  5018               	movf	(___aldiv@divisor+3)^0,w,c
  5425   00204E  5814               	subwfb	(___aldiv@dividend+3)^0,w,c
  5426   002050  A0D8               	btfss	status,0,c
  5427   002052  EF2D  F010         	goto	u1761
  5428   002056  EF2F  F010         	goto	u1760
  5429   00205A                     u1761:
  5430   00205A  EF38  F010         	goto	l2713
  5431   00205E                     u1760:
  5432   00205E  5015               	movf	___aldiv@divisor^0,w,c
  5433   002060  5E11               	subwf	___aldiv@dividend^0,f,c
  5434   002062  5016               	movf	(___aldiv@divisor+1)^0,w,c
  5435   002064  5A12               	subwfb	(___aldiv@dividend+1)^0,f,c
  5436   002066  5017               	movf	(___aldiv@divisor+2)^0,w,c
  5437   002068  5A13               	subwfb	(___aldiv@dividend+2)^0,f,c
  5438   00206A  5018               	movf	(___aldiv@divisor+3)^0,w,c
  5439   00206C  5A14               	subwfb	(___aldiv@dividend+3)^0,f,c
  5440   00206E  801B               	bsf	___aldiv@quotient^0,0,c
  5441   002070                     l2713:
  5442   002070  90D8               	bcf	status,0,c
  5443   002072  3218               	rrcf	(___aldiv@divisor+3)^0,f,c
  5444   002074  3217               	rrcf	(___aldiv@divisor+2)^0,f,c
  5445   002076  3216               	rrcf	(___aldiv@divisor+1)^0,f,c
  5446   002078  3215               	rrcf	___aldiv@divisor^0,f,c
  5447   00207A  2E19               	decfsz	___aldiv@counter^0,f,c
  5448   00207C  EF1B  F010         	goto	l2705
  5449   002080                     l2717:
  5450   002080  501A               	movf	___aldiv@sign^0,w,c
  5451   002082  B4D8               	btfsc	status,2,c
  5452   002084  EF46  F010         	goto	u1771
  5453   002088  EF48  F010         	goto	u1770
  5454   00208C                     u1771:
  5455   00208C  EF50  F010         	goto	l2721
  5456   002090                     u1770:
  5457   002090  1E1E               	comf	(___aldiv@quotient+3)^0,f,c
  5458   002092  1E1D               	comf	(___aldiv@quotient+2)^0,f,c
  5459   002094  1E1C               	comf	(___aldiv@quotient+1)^0,f,c
  5460   002096  6C1B               	negf	___aldiv@quotient^0,c
  5461   002098  0E00               	movlw	0
  5462   00209A  221C               	addwfc	(___aldiv@quotient+1)^0,f,c
  5463   00209C  221D               	addwfc	(___aldiv@quotient+2)^0,f,c
  5464   00209E  221E               	addwfc	(___aldiv@quotient+3)^0,f,c
  5465   0020A0                     l2721:
  5466   0020A0  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  5467   0020A4  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  5468   0020A8  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  5469   0020AC  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  5470   0020B0  0012               	return		;funcret
  5471   0020B2                     __end_of___aldiv:
  5472                           	callstack 0
  5473                           
  5474 ;; *************** function _color_detect *****************
  5475 ;; Defined at:
  5476 ;;		line 119 in file "color.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  RGBC_n          8    4[COMRAM] struct RGBC_val
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  color           1   12[COMRAM] unsigned char 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      unsigned char 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5490 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5493 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5494 ;;Total ram usage:        9 bytes
  5495 ;; Hardware stack levels used: 1
  5496 ;; Hardware stack levels required when called: 3
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_main
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text28
  5505   002594                     __ptext28:
  5506                           	callstack 0
  5507   002594                     _color_detect:
  5508                           	callstack 27
  5509   002594                     
  5510                           ;color.c: 119: unsigned char color_detect(RGBC_val RGBC_n);color.c: 120: {;color.c: 121:
      +                               unsigned char color=0;
  5511   002594  0E00               	movlw	0
  5512   002596  6E0D               	movwf	color_detect@color^0,c
  5513   002598                     
  5514                           ;color.c: 122:     if (RGBC_n.R > 550) {
  5515   002598  0E27               	movlw	39
  5516   00259A  5C05               	subwf	color_detect@RGBC_n^0,w,c
  5517   00259C  0E02               	movlw	2
  5518   00259E  5806               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  5519   0025A0  A0D8               	btfss	status,0,c
  5520   0025A2  EFD5  F012         	goto	u1861
  5521   0025A6  EFD7  F012         	goto	u1860
  5522   0025AA                     u1861:
  5523   0025AA  EFDB  F012         	goto	l2869
  5524   0025AE                     u1860:
  5525   0025AE                     
  5526                           ;color.c: 123:         color = 1;
  5527   0025AE  0E01               	movlw	1
  5528   0025B0  6E0D               	movwf	color_detect@color^0,c
  5529                           
  5530                           ;color.c: 124:     }
  5531   0025B2  EF02  F013         	goto	l119
  5532   0025B6                     l2869:
  5533   0025B6  0E23               	movlw	35
  5534   0025B8  5C07               	subwf	(color_detect@RGBC_n+2)^0,w,c
  5535   0025BA  0E01               	movlw	1
  5536   0025BC  5808               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  5537   0025BE  A0D8               	btfss	status,0,c
  5538   0025C0  EFE4  F012         	goto	u1871
  5539   0025C4  EFE6  F012         	goto	u1870
  5540   0025C8                     u1871:
  5541   0025C8  EFEA  F012         	goto	l2873
  5542   0025CC                     u1870:
  5543   0025CC                     
  5544                           ;color.c: 126:         color = 2;
  5545   0025CC  0E02               	movlw	2
  5546   0025CE  6E0D               	movwf	color_detect@color^0,c
  5547                           
  5548                           ;color.c: 127:     }
  5549   0025D0  EF02  F013         	goto	l119
  5550   0025D4                     l2873:
  5551   0025D4  500A               	movf	(color_detect@RGBC_n+5)^0,w,c
  5552   0025D6  E109               	bnz	u1880
  5553   0025D8  0EDD               	movlw	221
  5554   0025DA  5C09               	subwf	(color_detect@RGBC_n+4)^0,w,c
  5555   0025DC  A0D8               	btfss	status,0,c
  5556   0025DE  EFF3  F012         	goto	u1881
  5557   0025E2  EFF5  F012         	goto	u1880
  5558   0025E6                     u1881:
  5559   0025E6  EF02  F013         	goto	l119
  5560   0025EA                     u1880:
  5561   0025EA  0E20               	movlw	32
  5562   0025EC  5C0B               	subwf	(color_detect@RGBC_n+6)^0,w,c
  5563   0025EE  0E03               	movlw	3
  5564   0025F0  580C               	subwfb	(color_detect@RGBC_n+7)^0,w,c
  5565   0025F2  B0D8               	btfsc	status,0,c
  5566   0025F4  EFFE  F012         	goto	u1891
  5567   0025F8  EF00  F013         	goto	u1890
  5568   0025FC                     u1891:
  5569   0025FC  EF02  F013         	goto	l119
  5570   002600                     u1890:
  5571   002600                     
  5572                           ;color.c: 129:         color = 3;
  5573   002600  0E03               	movlw	3
  5574   002602  6E0D               	movwf	color_detect@color^0,c
  5575   002604                     l119:
  5576                           
  5577                           ;color.c: 149:     return color;
  5578   002604  500D               	movf	color_detect@color^0,w,c
  5579   002606  0012               	return		;funcret
  5580   002608                     __end_of_color_detect:
  5581                           	callstack 0
  5582                           
  5583 ;; *************** function _color_click_init *****************
  5584 ;; Defined at:
  5585 ;;		line 5 in file "color.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5603 ;;Total ram usage:        1 bytes
  5604 ;; Hardware stack levels used: 1
  5605 ;; Hardware stack levels required when called: 6
  5606 ;; This function calls:
  5607 ;;		_I2C_2_Master_Init
  5608 ;;		_color_writetoaddr
  5609 ;; This function is called by:
  5610 ;;		_main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text29
  5615   002672                     __ptext29:
  5616                           	callstack 0
  5617   002672                     _color_click_init:
  5618                           	callstack 24
  5619   002672                     
  5620                           ;color.c: 8:     I2C_2_Master_Init();
  5621   002672  EC82  F014         	call	_I2C_2_Master_Init	;wreg free
  5622   002676                     
  5623                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  5624   002676  0E01               	movlw	1
  5625   002678  6E07               	movwf	color_writetoaddr@value^0,c
  5626   00267A  0E00               	movlw	0
  5627   00267C  EC0C  F015         	call	_color_writetoaddr
  5628   002680                     
  5629                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5630   002680  0E3F               	movlw	63
  5631   002682  6E09               	movwf	??_color_click_init^0,c
  5632   002684  0E55               	movlw	85
  5633   002686                     u2517:
  5634   002686  2EE8               	decfsz	wreg,f,c
  5635   002688  D7FE               	bra	u2517
  5636   00268A  2E09               	decfsz	??_color_click_init^0,f,c
  5637   00268C  D7FC               	bra	u2517
  5638   00268E  0000               	nop	
  5639   002690                     
  5640                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  5641   002690  0E03               	movlw	3
  5642   002692  6E07               	movwf	color_writetoaddr@value^0,c
  5643   002694  0E00               	movlw	0
  5644   002696  EC0C  F015         	call	_color_writetoaddr
  5645   00269A                     
  5646                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5647   00269A  0ED5               	movlw	213
  5648   00269C  6E07               	movwf	color_writetoaddr@value^0,c
  5649   00269E  0E01               	movlw	1
  5650   0026A0  EC0C  F015         	call	_color_writetoaddr
  5651   0026A4                     
  5652                           ;color.c: 21:  color_writetoaddr(0x00, 0x13);
  5653   0026A4  0E13               	movlw	19
  5654   0026A6  6E07               	movwf	color_writetoaddr@value^0,c
  5655   0026A8  0E00               	movlw	0
  5656   0026AA  EC0C  F015         	call	_color_writetoaddr
  5657   0026AE                     
  5658                           ;color.c: 22:     color_writetoaddr(0x07, 0x07);
  5659   0026AE  0E07               	movlw	7
  5660   0026B0  6E07               	movwf	color_writetoaddr@value^0,c
  5661   0026B2  0E07               	movlw	7
  5662   0026B4  EC0C  F015         	call	_color_writetoaddr
  5663   0026B8                     
  5664                           ;color.c: 23:     color_writetoaddr(0x06, 0xD0);
  5665   0026B8  0ED0               	movlw	208
  5666   0026BA  6E07               	movwf	color_writetoaddr@value^0,c
  5667   0026BC  0E06               	movlw	6
  5668   0026BE  EC0C  F015         	call	_color_writetoaddr
  5669   0026C2                     
  5670                           ;color.c: 24:     color_writetoaddr(0x05, 0x00);
  5671   0026C2  0E00               	movlw	0
  5672   0026C4  6E07               	movwf	color_writetoaddr@value^0,c
  5673   0026C6  0E05               	movlw	5
  5674   0026C8  EC0C  F015         	call	_color_writetoaddr
  5675   0026CC                     
  5676                           ;color.c: 25:     color_writetoaddr(0x04, 0x00);
  5677   0026CC  0E00               	movlw	0
  5678   0026CE  6E07               	movwf	color_writetoaddr@value^0,c
  5679   0026D0  0E04               	movlw	4
  5680   0026D2  EC0C  F015         	call	_color_writetoaddr
  5681   0026D6  0012               	return		;funcret
  5682   0026D8                     __end_of_color_click_init:
  5683                           	callstack 0
  5684                           
  5685 ;; *************** function _color_writetoaddr *****************
  5686 ;; Defined at:
  5687 ;;		line 31 in file "color.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  address         1    wreg     unsigned char 
  5690 ;;  value           1    6[COMRAM] unsigned char 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  address         1    7[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5702 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5706 ;;Total ram usage:        2 bytes
  5707 ;; Hardware stack levels used: 1
  5708 ;; Hardware stack levels required when called: 5
  5709 ;; This function calls:
  5710 ;;		_I2C_2_Master_Start
  5711 ;;		_I2C_2_Master_Stop
  5712 ;;		_I2C_2_Master_Write
  5713 ;; This function is called by:
  5714 ;;		_color_click_init
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text30
  5719   002A18                     __ptext30:
  5720                           	callstack 0
  5721   002A18                     _color_writetoaddr:
  5722                           	callstack 24
  5723                           
  5724                           ;incstack = 0
  5725                           ;color_writetoaddr@address stored from wreg
  5726   002A18  6E08               	movwf	color_writetoaddr@address^0,c
  5727   002A1A                     
  5728                           ;color.c: 32:     I2C_2_Master_Start();
  5729   002A1A  EC88  F015         	call	_I2C_2_Master_Start	;wreg free
  5730                           
  5731                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  5732   002A1E  0E52               	movlw	82
  5733   002A20  EC72  F015         	call	_I2C_2_Master_Write
  5734                           
  5735                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  5736   002A24  5008               	movf	color_writetoaddr@address^0,w,c
  5737   002A26  0980               	iorlw	128
  5738   002A28  EC72  F015         	call	_I2C_2_Master_Write
  5739                           
  5740                           ;color.c: 35:     I2C_2_Master_Write(value);
  5741   002A2C  5007               	movf	color_writetoaddr@value^0,w,c
  5742   002A2E  EC72  F015         	call	_I2C_2_Master_Write
  5743                           
  5744                           ;color.c: 36:     I2C_2_Master_Stop();
  5745   002A32  EC83  F015         	call	_I2C_2_Master_Stop	;wreg free
  5746   002A36  0012               	return		;funcret
  5747   002A38                     __end_of_color_writetoaddr:
  5748                           	callstack 0
  5749                           
  5750 ;; *************** function _I2C_2_Master_Write *****************
  5751 ;; Defined at:
  5752 ;;		line 45 in file "i2c.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  data_byte       1    wreg     unsigned char 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  data_byte       1    5[COMRAM] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5770 ;;Total ram usage:        1 bytes
  5771 ;; Hardware stack levels used: 1
  5772 ;; Hardware stack levels required when called: 4
  5773 ;; This function calls:
  5774 ;;		_I2C_2_Master_Idle
  5775 ;; This function is called by:
  5776 ;;		_color_writetoaddr
  5777 ;;		_color_read
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text31
  5782   002AE4                     __ptext31:
  5783                           	callstack 0
  5784   002AE4                     _I2C_2_Master_Write:
  5785                           	callstack 25
  5786                           
  5787                           ;incstack = 0
  5788                           ;I2C_2_Master_Write@data_byte stored from wreg
  5789   002AE4  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  5790   002AE6                     
  5791                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5792   002AE6  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  5793   002AEA                     
  5794                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5795   002AEA  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5796   002AEE  0012               	return		;funcret
  5797   002AF0                     __end_of_I2C_2_Master_Write:
  5798                           	callstack 0
  5799                           
  5800 ;; *************** function _I2C_2_Master_Stop *****************
  5801 ;; Defined at:
  5802 ;;		line 39 in file "i2c.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5820 ;;Total ram usage:        0 bytes
  5821 ;; Hardware stack levels used: 1
  5822 ;; Hardware stack levels required when called: 4
  5823 ;; This function calls:
  5824 ;;		_I2C_2_Master_Idle
  5825 ;; This function is called by:
  5826 ;;		_color_writetoaddr
  5827 ;;		_color_read
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text32
  5832   002B06                     __ptext32:
  5833                           	callstack 0
  5834   002B06                     _I2C_2_Master_Stop:
  5835                           	callstack 25
  5836   002B06                     
  5837                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5838   002B06  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  5839   002B0A                     
  5840                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5841   002B0A  010E               	movlb	14	; () banked
  5842   002B0C  85DA               	bsf	218,2,b	;volatile
  5843   002B0E                     
  5844                           ; BSR set to: 14
  5845   002B0E  0012               	return		;funcret
  5846   002B10                     __end_of_I2C_2_Master_Stop:
  5847                           	callstack 0
  5848                           
  5849 ;; *************** function _I2C_2_Master_Start *****************
  5850 ;; Defined at:
  5851 ;;		line 27 in file "i2c.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;		None
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5869 ;;Total ram usage:        0 bytes
  5870 ;; Hardware stack levels used: 1
  5871 ;; Hardware stack levels required when called: 4
  5872 ;; This function calls:
  5873 ;;		_I2C_2_Master_Idle
  5874 ;; This function is called by:
  5875 ;;		_color_writetoaddr
  5876 ;;		_color_read
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text33
  5881   002B10                     __ptext33:
  5882                           	callstack 0
  5883   002B10                     _I2C_2_Master_Start:
  5884                           	callstack 25
  5885   002B10                     
  5886                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5887   002B10  ECAC  F014         	call	_I2C_2_Master_Idle	;wreg free
  5888   002B14                     
  5889                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5890   002B14  010E               	movlb	14	; () banked
  5891   002B16  81DA               	bsf	218,0,b	;volatile
  5892   002B18                     
  5893                           ; BSR set to: 14
  5894   002B18  0012               	return		;funcret
  5895   002B1A                     __end_of_I2C_2_Master_Start:
  5896                           	callstack 0
  5897                           
  5898 ;; *************** function _I2C_2_Master_Idle *****************
  5899 ;; Defined at:
  5900 ;;		line 22 in file "i2c.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;Total ram usage:        1 bytes
  5919 ;; Hardware stack levels used: 1
  5920 ;; Hardware stack levels required when called: 3
  5921 ;; This function calls:
  5922 ;;		Nothing
  5923 ;; This function is called by:
  5924 ;;		_I2C_2_Master_Start
  5925 ;;		_I2C_2_Master_RepStart
  5926 ;;		_I2C_2_Master_Stop
  5927 ;;		_I2C_2_Master_Write
  5928 ;;		_I2C_2_Master_Read
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text34
  5933   002958                     __ptext34:
  5934                           	callstack 0
  5935   002958                     _I2C_2_Master_Idle:
  5936                           	callstack 25
  5937   002958                     l153:
  5938   002958  010E               	movlb	14	; () banked
  5939   00295A  B5D8               	btfsc	216,2,b	;volatile
  5940   00295C  EFB2  F014         	goto	u1131
  5941   002960  EFB4  F014         	goto	u1130
  5942   002964                     u1131:
  5943   002964  EFAC  F014         	goto	l153
  5944   002968                     u1130:
  5945   002968                     
  5946                           ; BSR set to: 14
  5947   002968  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5948   00296C  0E1F               	movlw	31
  5949   00296E  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  5950   002970  A4D8               	btfss	status,2,c
  5951   002972  EFBD  F014         	goto	u1141
  5952   002976  EFBF  F014         	goto	u1140
  5953   00297A                     u1141:
  5954   00297A  EFAC  F014         	goto	l153
  5955   00297E                     u1140:
  5956   00297E                     
  5957                           ; BSR set to: 14
  5958   00297E  0012               	return		;funcret
  5959   002980                     __end_of_I2C_2_Master_Idle:
  5960                           	callstack 0
  5961                           
  5962 ;; *************** function _I2C_2_Master_Init *****************
  5963 ;; Defined at:
  5964 ;;		line 4 in file "i2c.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used: 1
  5984 ;; Hardware stack levels required when called: 3
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_color_click_init
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text35
  5993   002904                     __ptext35:
  5994                           	callstack 0
  5995   002904                     _I2C_2_Master_Init:
  5996                           	callstack 26
  5997   002904                     
  5998                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5999   002904  010E               	movlb	14	; () banked
  6000   002906  51D9               	movf	217,w,b	;volatile
  6001   002908  0BF0               	andlw	-16
  6002   00290A  0908               	iorlw	8
  6003   00290C  6FD9               	movwf	217,b	;volatile
  6004   00290E                     
  6005                           ; BSR set to: 14
  6006                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6007   00290E  8BD9               	bsf	217,5,b	;volatile
  6008                           
  6009                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6010   002910  0E9F               	movlw	159
  6011   002912  6FD6               	movwf	214,b	;volatile
  6012   002914                     
  6013                           ; BSR set to: 14
  6014                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6015   002914  8A84               	bsf	132,5,c	;volatile
  6016   002916                     
  6017                           ; BSR set to: 14
  6018                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6019   002916  8C84               	bsf	132,6,c	;volatile
  6020   002918                     
  6021                           ; BSR set to: 14
  6022                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6023   002918  9BA7               	bcf	167,5,b	;volatile
  6024   00291A                     
  6025                           ; BSR set to: 14
  6026                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6027   00291A  9DA7               	bcf	167,6,b	;volatile
  6028                           
  6029                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6030   00291C  0E1D               	movlw	29
  6031   00291E  6F1D               	movwf	29,b	;volatile
  6032                           
  6033                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6034   002920  0E1E               	movlw	30
  6035   002922  6F1C               	movwf	28,b	;volatile
  6036                           
  6037                           ;i2c.c: 18:   RD5PPS=0x1C;
  6038   002924  0E1C               	movlw	28
  6039   002926  6F6F               	movwf	111,b	;volatile
  6040                           
  6041                           ;i2c.c: 19:   RD6PPS=0x1B;
  6042   002928  0E1B               	movlw	27
  6043   00292A  6F70               	movwf	112,b	;volatile
  6044   00292C                     
  6045                           ; BSR set to: 14
  6046   00292C  0012               	return		;funcret
  6047   00292E                     __end_of_I2C_2_Master_Init:
  6048                           	callstack 0
  6049                           
  6050 ;; *************** function _batteryLevel *****************
  6051 ;; Defined at:
  6052 ;;		line 6 in file "battery.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;		None
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  batteryQuart    1   13[COMRAM] unsigned char 
  6057 ;;  batteryVolta    1   12[COMRAM] unsigned char 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, status,0, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6071 ;;Total ram usage:        2 bytes
  6072 ;; Hardware stack levels used: 1
  6073 ;; Hardware stack levels required when called: 4
  6074 ;; This function calls:
  6075 ;;		_ADC_getval
  6076 ;;		_ADC_init
  6077 ;;		___awdiv
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text36
  6084   00273A                     __ptext36:
  6085                           	callstack 0
  6086   00273A                     _batteryLevel:
  6087                           	callstack 26
  6088   00273A                     
  6089                           ;battery.c: 7:     ADC_init();
  6090   00273A  EC38  F015         	call	_ADC_init	;wreg free
  6091                           
  6092                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6093   00273E  EC51  F015         	call	_ADC_getval	;wreg free
  6094   002742  6E0D               	movwf	batteryLevel@batteryVoltage^0,c
  6095   002744                     
  6096                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6097   002744  C00D  F005         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6098   002748  6A06               	clrf	(___awdiv@dividend+1)^0,c
  6099   00274A  0E00               	movlw	0
  6100   00274C  6E08               	movwf	(___awdiv@divisor+1)^0,c
  6101   00274E  0E18               	movlw	24
  6102   002750  6E07               	movwf	___awdiv@divisor^0,c
  6103   002752  EC39  F011         	call	___awdiv	;wreg free
  6104   002756  5005               	movf	?___awdiv^0,w,c
  6105   002758  6E0E               	movwf	batteryLevel@batteryQuarter^0,c
  6106   00275A                     
  6107                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  6108   00275A  A20E               	btfss	batteryLevel@batteryQuarter^0,1,c
  6109   00275C  EFB2  F013         	goto	u1811
  6110   002760  EFB4  F013         	goto	u1810
  6111   002764                     u1811:
  6112   002764  EFB7  F013         	goto	l355
  6113   002768                     u1810:
  6114   002768  8E7C               	bsf	124,7,c	;volatile
  6115   00276A  EFB8  F013         	goto	l356
  6116   00276E                     l355:
  6117   00276E  9E7C               	bcf	124,7,c	;volatile
  6118   002770                     l356:
  6119                           
  6120                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  6121   002770  A00E               	btfss	batteryLevel@batteryQuarter^0,0,c
  6122   002772  EFBD  F013         	goto	u1821
  6123   002776  EFBF  F013         	goto	u1820
  6124   00277A                     u1821:
  6125   00277A  EFC2  F013         	goto	l357
  6126   00277E                     u1820:
  6127   00277E  8680               	bsf	128,3,c	;volatile
  6128   002780  EFC3  F013         	goto	l359
  6129   002784                     l357:
  6130   002784  9680               	bcf	128,3,c	;volatile
  6131   002786                     l359:
  6132   002786  0012               	return		;funcret
  6133   002788                     __end_of_batteryLevel:
  6134                           	callstack 0
  6135                           
  6136 ;; *************** function ___awdiv *****************
  6137 ;; Defined at:
  6138 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  dividend        2    4[COMRAM] int 
  6141 ;;  divisor         2    6[COMRAM] int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  quotient        2   10[COMRAM] int 
  6144 ;;  sign            1    9[COMRAM] unsigned char 
  6145 ;;  counter         1    8[COMRAM] unsigned char 
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  2    4[COMRAM] int 
  6148 ;; Registers used:
  6149 ;;		wreg, status,2, status,0
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6156 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;Total ram usage:        8 bytes
  6160 ;; Hardware stack levels used: 1
  6161 ;; Hardware stack levels required when called: 3
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_batteryLevel
  6166 ;;		_vfpfcnvrt
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text37
  6171   002272                     __ptext37:
  6172                           	callstack 0
  6173   002272                     ___awdiv:
  6174                           	callstack 24
  6175   002272  0E00               	movlw	0
  6176   002274  6E0A               	movwf	___awdiv@sign^0,c
  6177   002276  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  6178   002278  EF42  F011         	goto	u1150
  6179   00227C  EF40  F011         	goto	u1151
  6180   002280                     u1151:
  6181   002280  EF48  F011         	goto	l2261
  6182   002284                     u1150:
  6183   002284  6C07               	negf	___awdiv@divisor^0,c
  6184   002286  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6185   002288  B0D8               	btfsc	status,0,c
  6186   00228A  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6187   00228C  0E01               	movlw	1
  6188   00228E  6E0A               	movwf	___awdiv@sign^0,c
  6189   002290                     l2261:
  6190   002290  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  6191   002292  EF4F  F011         	goto	u1160
  6192   002296  EF4D  F011         	goto	u1161
  6193   00229A                     u1161:
  6194   00229A  EF55  F011         	goto	l2267
  6195   00229E                     u1160:
  6196   00229E  6C05               	negf	___awdiv@dividend^0,c
  6197   0022A0  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6198   0022A2  B0D8               	btfsc	status,0,c
  6199   0022A4  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6200   0022A6  0E01               	movlw	1
  6201   0022A8  1A0A               	xorwf	___awdiv@sign^0,f,c
  6202   0022AA                     l2267:
  6203   0022AA  0E00               	movlw	0
  6204   0022AC  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6205   0022AE  0E00               	movlw	0
  6206   0022B0  6E0B               	movwf	___awdiv@quotient^0,c
  6207   0022B2  5007               	movf	___awdiv@divisor^0,w,c
  6208   0022B4  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6209   0022B6  B4D8               	btfsc	status,2,c
  6210   0022B8  EF60  F011         	goto	u1171
  6211   0022BC  EF62  F011         	goto	u1170
  6212   0022C0                     u1171:
  6213   0022C0  EF8A  F011         	goto	l2289
  6214   0022C4                     u1170:
  6215   0022C4  0E01               	movlw	1
  6216   0022C6  6E09               	movwf	___awdiv@counter^0,c
  6217   0022C8  EF6A  F011         	goto	l2275
  6218   0022CC                     l2273:
  6219   0022CC  90D8               	bcf	status,0,c
  6220   0022CE  3607               	rlcf	___awdiv@divisor^0,f,c
  6221   0022D0  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6222   0022D2  2A09               	incf	___awdiv@counter^0,f,c
  6223   0022D4                     l2275:
  6224   0022D4  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6225   0022D6  EF6F  F011         	goto	u1181
  6226   0022DA  EF71  F011         	goto	u1180
  6227   0022DE                     u1181:
  6228   0022DE  EF66  F011         	goto	l2273
  6229   0022E2                     u1180:
  6230   0022E2                     l2277:
  6231   0022E2  90D8               	bcf	status,0,c
  6232   0022E4  360B               	rlcf	___awdiv@quotient^0,f,c
  6233   0022E6  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6234   0022E8  5007               	movf	___awdiv@divisor^0,w,c
  6235   0022EA  5C05               	subwf	___awdiv@dividend^0,w,c
  6236   0022EC  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6237   0022EE  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6238   0022F0  A0D8               	btfss	status,0,c
  6239   0022F2  EF7D  F011         	goto	u1191
  6240   0022F6  EF7F  F011         	goto	u1190
  6241   0022FA                     u1191:
  6242   0022FA  EF84  F011         	goto	l2285
  6243   0022FE                     u1190:
  6244   0022FE  5007               	movf	___awdiv@divisor^0,w,c
  6245   002300  5E05               	subwf	___awdiv@dividend^0,f,c
  6246   002302  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6247   002304  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6248   002306  800B               	bsf	___awdiv@quotient^0,0,c
  6249   002308                     l2285:
  6250   002308  90D8               	bcf	status,0,c
  6251   00230A  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6252   00230C  3207               	rrcf	___awdiv@divisor^0,f,c
  6253   00230E  2E09               	decfsz	___awdiv@counter^0,f,c
  6254   002310  EF71  F011         	goto	l2277
  6255   002314                     l2289:
  6256   002314  500A               	movf	___awdiv@sign^0,w,c
  6257   002316  B4D8               	btfsc	status,2,c
  6258   002318  EF90  F011         	goto	u1201
  6259   00231C  EF92  F011         	goto	u1200
  6260   002320                     u1201:
  6261   002320  EF96  F011         	goto	l2293
  6262   002324                     u1200:
  6263   002324  6C0B               	negf	___awdiv@quotient^0,c
  6264   002326  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6265   002328  B0D8               	btfsc	status,0,c
  6266   00232A  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6267   00232C                     l2293:
  6268   00232C  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6269   002330  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6270   002334  0012               	return		;funcret
  6271   002336                     __end_of___awdiv:
  6272                           	callstack 0
  6273                           
  6274 ;; *************** function _ADC_init *****************
  6275 ;; Defined at:
  6276 ;;		line 9 in file "ADC.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, status,2
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6294 ;;Total ram usage:        0 bytes
  6295 ;; Hardware stack levels used: 1
  6296 ;; Hardware stack levels required when called: 3
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_batteryLevel
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text38
  6305   002A70                     __ptext38:
  6306                           	callstack 0
  6307   002A70                     _ADC_init:
  6308                           	callstack 26
  6309   002A70                     
  6310                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6311   002A70  8C86               	bsf	134,6,c	;volatile
  6312                           
  6313                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6314   002A72  010E               	movlb	14	; () banked
  6315   002A74  8DB4               	bsf	180,6,b	;volatile
  6316                           
  6317                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6318   002A76  010F               	movlb	15	; () banked
  6319   002A78  9958               	bcf	88,4,b	;volatile
  6320   002A7A                     
  6321                           ; BSR set to: 15
  6322                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6323   002A7A  0EFC               	movlw	-4
  6324   002A7C  1758               	andwf	88,f,b	;volatile
  6325                           
  6326                           ;ADC.c: 17:     ADPCH=0b101110;
  6327   002A7E  0E2E               	movlw	46
  6328   002A80  6F5F               	movwf	95,b	;volatile
  6329   002A82                     
  6330                           ; BSR set to: 15
  6331                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6332   002A82  9460               	bcf	96,2,c	;volatile
  6333   002A84                     
  6334                           ; BSR set to: 15
  6335                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6336   002A84  8860               	bsf	96,4,c	;volatile
  6337   002A86                     
  6338                           ; BSR set to: 15
  6339                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6340   002A86  8E60               	bsf	96,7,c	;volatile
  6341   002A88                     
  6342                           ; BSR set to: 15
  6343   002A88  0012               	return		;funcret
  6344   002A8A                     __end_of_ADC_init:
  6345                           	callstack 0
  6346                           
  6347 ;; *************** function _ADC_getval *****************
  6348 ;; Defined at:
  6349 ;;		line 23 in file "ADC.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  tmpval          1    4[COMRAM] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      unsigned char 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6367 ;;Total ram usage:        1 bytes
  6368 ;; Hardware stack levels used: 1
  6369 ;; Hardware stack levels required when called: 3
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_batteryLevel
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text39
  6378   002AA2                     __ptext39:
  6379                           	callstack 0
  6380   002AA2                     _ADC_getval:
  6381                           	callstack 26
  6382   002AA2                     
  6383                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6384   002AA2  8060               	bsf	96,0,c	;volatile
  6385   002AA4                     l341:
  6386   002AA4  B060               	btfsc	96,0,c	;volatile
  6387   002AA6  EF57  F015         	goto	u1541
  6388   002AAA  EF59  F015         	goto	u1540
  6389   002AAE                     u1541:
  6390   002AAE  EF52  F015         	goto	l341
  6391   002AB2                     u1540:
  6392   002AB2                     
  6393                           ;ADC.c: 31:     tmpval = ADRESH;
  6394   002AB2  CF64 F005          	movff	3940,ADC_getval@tmpval	;volatile
  6395   002AB6                     
  6396                           ;ADC.c: 35:     return tmpval;
  6397   002AB6  5005               	movf	ADC_getval@tmpval^0,w,c
  6398   002AB8  0012               	return		;funcret
  6399   002ABA                     __end_of_ADC_getval:
  6400                           	callstack 0
  6401                           
  6402 ;; *************** function _TxBufferedString *****************
  6403 ;; Defined at:
  6404 ;;		line 66 in file "serial.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  string          2    5[COMRAM] PTR unsigned char 
  6407 ;;		 -> STR_2(1), main@buf(40), 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;		None
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6419 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6422 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6423 ;;Total ram usage:        2 bytes
  6424 ;; Hardware stack levels used: 1
  6425 ;; Hardware stack levels required when called: 4
  6426 ;; This function calls:
  6427 ;;		_putCharToTxBuf
  6428 ;; This function is called by:
  6429 ;;		_main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text40
  6434   0026D8                     __ptext40:
  6435                           	callstack 0
  6436   0026D8                     _TxBufferedString:
  6437                           	callstack 26
  6438   0026D8                     
  6439                           ;serial.c: 67:     while(*string != 0){
  6440   0026D8  EF83  F013         	goto	l2989
  6441   0026DC                     l2985:
  6442                           
  6443                           ;serial.c: 68:   putCharToTxBuf(*string++);
  6444   0026DC  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6445   0026E0  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6446   0026E4  0E00               	movlw	low (__smallconst shr (0+16))
  6447   0026E6  6EF8               	movwf	tblptru,c
  6448   0026E8  0E0D               	movlw	(high __ramtop+-1)
  6449   0026EA  64F7               	cpfsgt	tblptrh,c
  6450   0026EC  D003               	bra	u1987
  6451   0026EE  0008               	tblrd		*
  6452   0026F0  50F5               	movf	tablat,w,c
  6453   0026F2  D005               	bra	u1980
  6454   0026F4                     u1987:
  6455   0026F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6456   0026F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6457   0026FC  50EF               	movf	indf0,w,c
  6458   0026FE                     u1980:
  6459   0026FE  EC97  F014         	call	_putCharToTxBuf
  6460   002702  4A06               	infsnz	TxBufferedString@string^0,f,c
  6461   002704  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  6462   002706                     l2989:
  6463                           
  6464                           ;serial.c: 67:     while(*string != 0){
  6465   002706  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6466   00270A  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6467   00270E  0E00               	movlw	low (__smallconst shr (0+16))
  6468   002710  6EF8               	movwf	tblptru,c
  6469   002712  0E0D               	movlw	(high __ramtop+-1)
  6470   002714  64F7               	cpfsgt	tblptrh,c
  6471   002716  D003               	bra	u1997
  6472   002718  0008               	tblrd		*
  6473   00271A  50F5               	movf	tablat,w,c
  6474   00271C  D005               	bra	u1990
  6475   00271E                     u1997:
  6476   00271E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6477   002722  CFF7 FFEA          	movff	tblptrh,fsr0h
  6478   002726  50EF               	movf	indf0,w,c
  6479   002728                     u1990:
  6480   002728  0900               	iorlw	0
  6481   00272A  A4D8               	btfss	status,2,c
  6482   00272C  EF9A  F013         	goto	u2001
  6483   002730  EF9C  F013         	goto	u2000
  6484   002734                     u2001:
  6485   002734  EF6E  F013         	goto	l2985
  6486   002738                     u2000:
  6487   002738  0012               	return		;funcret
  6488   00273A                     __end_of_TxBufferedString:
  6489                           	callstack 0
  6490                           
  6491 ;; *************** function _putCharToTxBuf *****************
  6492 ;; Defined at:
  6493 ;;		line 53 in file "serial.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  byte            1    wreg     unsigned char 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  byte            1    4[COMRAM] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6510 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6511 ;;Total ram usage:        1 bytes
  6512 ;; Hardware stack levels used: 1
  6513 ;; Hardware stack levels required when called: 3
  6514 ;; This function calls:
  6515 ;;		Nothing
  6516 ;; This function is called by:
  6517 ;;		_TxBufferedString
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text41
  6522   00292E                     __ptext41:
  6523                           	callstack 0
  6524   00292E                     _putCharToTxBuf:
  6525                           	callstack 26
  6526                           
  6527                           ;incstack = 0
  6528                           ;putCharToTxBuf@byte stored from wreg
  6529   00292E  6E05               	movwf	putCharToTxBuf@byte^0,c
  6530   002930                     
  6531                           ;serial.c: 54:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  6532   002930  0E3B               	movlw	59
  6533   002932  6449               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  6534   002934  EF9E  F014         	goto	u1531
  6535   002938  EFA0  F014         	goto	u1530
  6536   00293C                     u1531:
  6537   00293C  EFA2  F014         	goto	l2511
  6538   002940                     u1530:
  6539   002940  0E00               	movlw	0
  6540   002942  6E49               	movwf	_TxBufWriteCnt^0,c	;volatile
  6541   002944                     l2511:
  6542                           
  6543                           ;serial.c: 55:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  6544   002944  0E00               	movlw	low _EUSART4TXbuf
  6545   002946  2449               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  6546   002948  6ED9               	movwf	fsr2l,c
  6547   00294A  6ADA               	clrf	fsr2h,c
  6548   00294C  0E01               	movlw	high _EUSART4TXbuf
  6549   00294E  22DA               	addwfc	fsr2h,f,c
  6550   002950  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  6551   002954  2A49               	incf	_TxBufWriteCnt^0,f,c	;volatile
  6552   002956  0012               	return		;funcret
  6553   002958                     __end_of_putCharToTxBuf:
  6554                           	callstack 0
  6555                           
  6556 ;; *************** function _Interrupts_init *****************
  6557 ;; Defined at:
  6558 ;;		line 10 in file "interrupts.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		None
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used: 1
  6578 ;; Hardware stack levels required when called: 3
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text42
  6587   002AD2                     __ptext42:
  6588                           	callstack 0
  6589   002AD2                     _Interrupts_init:
  6590                           	callstack 27
  6591   002AD2                     
  6592                           ;interrupts.c: 12:  TRISBbits.TRISB0=1;
  6593   002AD2  8082               	bsf	130,0,c	;volatile
  6594                           
  6595                           ;interrupts.c: 13:     ANSELBbits.ANSELB0=0;
  6596   002AD4  010E               	movlb	14	; () banked
  6597   002AD6  919A               	bcf	154,0,b	;volatile
  6598                           
  6599                           ;interrupts.c: 14:     PIE0bits.INT0IE=1;
  6600   002AD8  8129               	bsf	41,0,b	;volatile
  6601                           
  6602                           ;interrupts.c: 15:     IPR0bits.INT0IP=1;
  6603   002ADA  811F               	bsf	31,0,b	;volatile
  6604                           
  6605                           ;interrupts.c: 19:     PIE4bits.RC4IE=1;
  6606   002ADC  872D               	bsf	45,3,b	;volatile
  6607                           
  6608                           ;interrupts.c: 20:     INTCONbits.PEIE=1;
  6609   002ADE  8CF2               	bsf	242,6,c	;volatile
  6610                           
  6611                           ;interrupts.c: 21:     INTCONbits.GIE=1;
  6612   002AE0  8EF2               	bsf	242,7,c	;volatile
  6613   002AE2                     
  6614                           ; BSR set to: 14
  6615   002AE2  0012               	return		;funcret
  6616   002AE4                     __end_of_Interrupts_init:
  6617                           	callstack 0
  6618                           
  6619 ;; *************** function _Buggy_init *****************
  6620 ;; Defined at:
  6621 ;;		line 7 in file "buggysetup.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		None
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6639 ;;Total ram usage:        0 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 3
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text43
  6650   002808                     __ptext43:
  6651                           	callstack 0
  6652   002808                     _Buggy_init:
  6653                           	callstack 27
  6654   002808                     
  6655                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  6656   002808  9E7C               	bcf	124,7,c	;volatile
  6657                           
  6658                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  6659   00280A  9E84               	bcf	132,7,c	;volatile
  6660                           
  6661                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  6662   00280C  9680               	bcf	128,3,c	;volatile
  6663                           
  6664                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  6665   00280E  9688               	bcf	136,3,c	;volatile
  6666                           
  6667                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  6668   002810  8486               	bsf	134,2,c	;volatile
  6669                           
  6670                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  6671   002812  010E               	movlb	14	; () banked
  6672   002814  95B4               	bcf	180,2,b	;volatile
  6673                           
  6674                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  6675   002816  8686               	bsf	134,3,c	;volatile
  6676                           
  6677                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  6678   002818  97B4               	bcf	180,3,b	;volatile
  6679                           
  6680                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  6681   00281A  9280               	bcf	128,1,c	;volatile
  6682                           
  6683                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  6684   00281C  9288               	bcf	136,1,c	;volatile
  6685                           
  6686                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  6687   00281E  987C               	bcf	124,4,c	;volatile
  6688                           
  6689                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  6690   002820  9884               	bcf	132,4,c	;volatile
  6691                           
  6692                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  6693   002822  967C               	bcf	124,3,c	;volatile
  6694                           
  6695                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  6696   002824  9684               	bcf	132,3,c	;volatile
  6697                           
  6698                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  6699   002826  97A7               	bcf	167,3,b	;volatile
  6700                           
  6701                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  6702   002828  9080               	bcf	128,0,c	;volatile
  6703                           
  6704                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  6705   00282A  9088               	bcf	136,0,c	;volatile
  6706                           
  6707                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  6708   00282C  907E               	bcf	126,0,c	;volatile
  6709                           
  6710                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  6711   00282E  9086               	bcf	134,0,c	;volatile
  6712                           
  6713                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  6714   002830  907F               	bcf	127,0,c	;volatile
  6715                           
  6716                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  6717   002832  9087               	bcf	135,0,c	;volatile
  6718                           
  6719                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  6720   002834  9E7D               	bcf	125,7,c	;volatile
  6721                           
  6722                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  6723   002836  9E85               	bcf	133,7,c	;volatile
  6724                           
  6725                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  6726   002838  9679               	bcf	121,3,c	;volatile
  6727                           
  6728                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  6729   00283A  9681               	bcf	129,3,c	;volatile
  6730   00283C                     
  6731                           ; BSR set to: 14
  6732   00283C  0012               	return		;funcret
  6733   00283E                     __end_of_Buggy_init:
  6734                           	callstack 0
  6735                           
  6736 ;; *************** function _HighISR *****************
  6737 ;; Defined at:
  6738 ;;		line 29 in file "interrupts.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;		None
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;Total ram usage:        2 bytes
  6757 ;; Hardware stack levels used: 1
  6758 ;; Hardware stack levels required when called: 2
  6759 ;; This function calls:
  6760 ;;		_getCharFromTxBuf
  6761 ;;		_putCharToRxBuf
  6762 ;;		i2_I2C_2_Master_Start
  6763 ;;		i2_I2C_2_Master_Stop
  6764 ;;		i2_I2C_2_Master_Write
  6765 ;;		i2_isDataInTxBuf
  6766 ;; This function is called by:
  6767 ;;		Interrupt level 2
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	intcode
  6772   000008                     __pintcode:
  6773                           	callstack 0
  6774   000008                     _HighISR:
  6775                           	callstack 23
  6776                           
  6777                           ; BSR set to: 14
  6778                           ;incstack = 0
  6779   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6780   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  6781   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  6782   000012                     
  6783                           ;interrupts.c: 33:     if(PIR0bits.INT0IF){
  6784   000012  010E               	movlb	14	; () banked
  6785   000014  A133               	btfss	51,0,b	;volatile
  6786   000016  EF0F  F000         	goto	i2u212_41
  6787   00001A  EF11  F000         	goto	i2u212_40
  6788   00001E                     i2u212_41:
  6789   00001E  EF1E  F000         	goto	i2l3127
  6790   000022                     i2u212_40:
  6791   000022                     
  6792                           ; BSR set to: 14
  6793                           ;interrupts.c: 34:  LATHbits.LATH3 = 1;
  6794   000022  8680               	bsf	128,3,c	;volatile
  6795   000024                     
  6796                           ; BSR set to: 14
  6797                           ;interrupts.c: 36:     I2C_2_Master_Start();
  6798   000024  EC92  F015         	call	i2_I2C_2_Master_Start	;wreg free
  6799                           
  6800                           ;interrupts.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  6801   000028  0E52               	movlw	82
  6802   00002A  EC78  F015         	call	i2_I2C_2_Master_Write
  6803                           
  6804                           ;interrupts.c: 38:  I2C_2_Master_Write(0b11100110);
  6805   00002E  0EE6               	movlw	230
  6806   000030  EC78  F015         	call	i2_I2C_2_Master_Write
  6807                           
  6808                           ;interrupts.c: 39:  I2C_2_Master_Stop();
  6809   000034  EC8D  F015         	call	i2_I2C_2_Master_Stop	;wreg free
  6810   000038                     
  6811                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  6812   000038  010E               	movlb	14	; () banked
  6813   00003A  9133               	bcf	51,0,b	;volatile
  6814   00003C                     i2l3127:
  6815                           
  6816                           ; BSR set to: 14
  6817                           ;interrupts.c: 44:     if(PIR4bits.RC4IF){
  6818   00003C  A737               	btfss	55,3,b	;volatile
  6819   00003E  EF23  F000         	goto	i2u213_41
  6820   000042  EF25  F000         	goto	i2u213_40
  6821   000046                     i2u213_41:
  6822   000046  EF28  F000         	goto	i2l3131
  6823   00004A                     i2u213_40:
  6824   00004A                     
  6825                           ; BSR set to: 14
  6826                           ;interrupts.c: 46:     putCharToRxBuf(RC4REG);
  6827   00004A  51E3               	movf	227,w,b	;volatile
  6828   00004C  ECE7  F014         	call	_putCharToRxBuf
  6829   000050                     i2l3131:
  6830                           
  6831                           ;interrupts.c: 50:     if(PIR4bits.TX4IF){
  6832   000050  010E               	movlb	14	; () banked
  6833   000052  A537               	btfss	55,2,b	;volatile
  6834   000054  EF2E  F000         	goto	i2u214_41
  6835   000058  EF30  F000         	goto	i2u214_40
  6836   00005C                     i2u214_41:
  6837   00005C  EF40  F000         	goto	i2l260
  6838   000060                     i2u214_40:
  6839   000060                     
  6840                           ; BSR set to: 14
  6841                           ;interrupts.c: 52:     TX4REG = getCharFromTxBuf();
  6842   000060  EC6C  F014         	call	_getCharFromTxBuf	;wreg free
  6843   000064  010E               	movlb	14	; () banked
  6844   000066  6FE4               	movwf	228,b	;volatile
  6845   000068                     
  6846                           ; BSR set to: 14
  6847                           ;interrupts.c: 53:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  6848   000068  EC5D  F015         	call	i2_isDataInTxBuf	;wreg free
  6849   00006C  0900               	iorlw	0
  6850   00006E  A4D8               	btfss	status,2,c
  6851   000070  EF3C  F000         	goto	i2u215_41
  6852   000074  EF3E  F000         	goto	i2u215_40
  6853   000078                     i2u215_41:
  6854   000078  EF40  F000         	goto	i2l260
  6855   00007C                     i2u215_40:
  6856   00007C  010E               	movlb	14	; () banked
  6857   00007E  952D               	bcf	45,2,b	;volatile
  6858   000080                     i2l260:
  6859   000080  C004  FFDA         	movff	??_HighISR+1,fsr2h
  6860   000084  C003  FFD9         	movff	??_HighISR,fsr2l
  6861   000088  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6862   00008A  0011               	retfie		f
  6863   00008C                     __end_of_HighISR:
  6864                           	callstack 0
  6865                           
  6866 ;; *************** function i2_isDataInTxBuf *****************
  6867 ;; Defined at:
  6868 ;;		line 61 in file "serial.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      unsigned char 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6886 ;;Total ram usage:        0 bytes
  6887 ;; Hardware stack levels used: 1
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_HighISR
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text45
  6896   002ABA                     __ptext45:
  6897                           	callstack 0
  6898   002ABA                     i2_isDataInTxBuf:
  6899                           	callstack 24
  6900   002ABA                     
  6901                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  6902   002ABA  5048               	movf	_TxBufReadCnt^0,w,c	;volatile
  6903   002ABC  1849               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6904   002ABE  A4D8               	btfss	status,2,c
  6905   002AC0  EF64  F015         	goto	i2u91_41
  6906   002AC4  EF67  F015         	goto	i2u91_40
  6907   002AC8                     i2u91_41:
  6908   002AC8  0E01               	movlw	1
  6909   002ACA  EF68  F015         	goto	i2u92_40
  6910   002ACE                     i2u91_40:
  6911   002ACE  0E00               	movlw	0
  6912   002AD0                     i2u92_40:
  6913   002AD0  0012               	return		;funcret
  6914   002AD2                     __end_ofi2_isDataInTxBuf:
  6915                           	callstack 0
  6916                           
  6917 ;; *************** function i2_I2C_2_Master_Write *****************
  6918 ;; Defined at:
  6919 ;;		line 45 in file "i2c.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;  data_byte       1    wreg     unsigned char 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  data_byte       1    1[COMRAM] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6937 ;;Total ram usage:        1 bytes
  6938 ;; Hardware stack levels used: 1
  6939 ;; Hardware stack levels required when called: 1
  6940 ;; This function calls:
  6941 ;;		i2_I2C_2_Master_Idle
  6942 ;; This function is called by:
  6943 ;;		_HighISR
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text46
  6948   002AF0                     __ptext46:
  6949                           	callstack 0
  6950   002AF0                     i2_I2C_2_Master_Write:
  6951                           	callstack 23
  6952                           
  6953                           ;incstack = 0
  6954                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  6955   002AF0  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  6956   002AF2                     
  6957                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6958   002AF2  ECC0  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  6959   002AF6                     
  6960                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6961   002AF6  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  6962   002AFA  0012               	return		;funcret
  6963   002AFC                     __end_ofi2_I2C_2_Master_Write:
  6964                           	callstack 0
  6965                           
  6966 ;; *************** function i2_I2C_2_Master_Stop *****************
  6967 ;; Defined at:
  6968 ;;		line 39 in file "i2c.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;		None
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6986 ;;Total ram usage:        0 bytes
  6987 ;; Hardware stack levels used: 1
  6988 ;; Hardware stack levels required when called: 1
  6989 ;; This function calls:
  6990 ;;		i2_I2C_2_Master_Idle
  6991 ;; This function is called by:
  6992 ;;		_HighISR
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text47
  6997   002B1A                     __ptext47:
  6998                           	callstack 0
  6999   002B1A                     i2_I2C_2_Master_Stop:
  7000                           	callstack 23
  7001   002B1A                     
  7002                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7003   002B1A  ECC0  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7004   002B1E                     
  7005                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7006   002B1E  010E               	movlb	14	; () banked
  7007   002B20  85DA               	bsf	218,2,b	;volatile
  7008   002B22                     
  7009                           ; BSR set to: 14
  7010   002B22  0012               	return		;funcret
  7011   002B24                     __end_ofi2_I2C_2_Master_Stop:
  7012                           	callstack 0
  7013                           
  7014 ;; *************** function i2_I2C_2_Master_Start *****************
  7015 ;; Defined at:
  7016 ;;		line 27 in file "i2c.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;		None
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;		None
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, status,2, status,0, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7034 ;;Total ram usage:        0 bytes
  7035 ;; Hardware stack levels used: 1
  7036 ;; Hardware stack levels required when called: 1
  7037 ;; This function calls:
  7038 ;;		i2_I2C_2_Master_Idle
  7039 ;; This function is called by:
  7040 ;;		_HighISR
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text48
  7045   002B24                     __ptext48:
  7046                           	callstack 0
  7047   002B24                     i2_I2C_2_Master_Start:
  7048                           	callstack 23
  7049   002B24                     
  7050                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7051   002B24  ECC0  F014         	call	i2_I2C_2_Master_Idle	;wreg free
  7052   002B28                     
  7053                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7054   002B28  010E               	movlb	14	; () banked
  7055   002B2A  81DA               	bsf	218,0,b	;volatile
  7056   002B2C                     
  7057                           ; BSR set to: 14
  7058   002B2C  0012               	return		;funcret
  7059   002B2E                     __end_ofi2_I2C_2_Master_Start:
  7060                           	callstack 0
  7061                           
  7062 ;; *************** function i2_I2C_2_Master_Idle *****************
  7063 ;; Defined at:
  7064 ;;		line 22 in file "i2c.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;                  1    wreg      void 
  7071 ;; Registers used:
  7072 ;;		wreg, status,2, status,0
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7082 ;;Total ram usage:        1 bytes
  7083 ;; Hardware stack levels used: 1
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		i2_I2C_2_Master_Start
  7088 ;;		i2_I2C_2_Master_Stop
  7089 ;;		i2_I2C_2_Master_Write
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text49
  7094   002980                     __ptext49:
  7095                           	callstack 0
  7096   002980                     i2_I2C_2_Master_Idle:
  7097                           	callstack 23
  7098   002980                     i2l153:
  7099   002980  010E               	movlb	14	; () banked
  7100   002982  B5D8               	btfsc	216,2,b	;volatile
  7101   002984  EFC6  F014         	goto	i2u179_41
  7102   002988  EFC8  F014         	goto	i2u179_40
  7103   00298C                     i2u179_41:
  7104   00298C  EFC0  F014         	goto	i2l153
  7105   002990                     i2u179_40:
  7106   002990                     
  7107                           ; BSR set to: 14
  7108   002990  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7109   002994  0E1F               	movlw	31
  7110   002996  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7111   002998  A4D8               	btfss	status,2,c
  7112   00299A  EFD1  F014         	goto	i2u180_41
  7113   00299E  EFD3  F014         	goto	i2u180_40
  7114   0029A2                     i2u180_41:
  7115   0029A2  EFC0  F014         	goto	i2l153
  7116   0029A6                     i2u180_40:
  7117   0029A6                     
  7118                           ; BSR set to: 14
  7119   0029A6  0012               	return		;funcret
  7120   0029A8                     __end_ofi2_I2C_2_Master_Idle:
  7121                           	callstack 0
  7122                           
  7123 ;; *************** function _putCharToRxBuf *****************
  7124 ;; Defined at:
  7125 ;;		line 33 in file "serial.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  byte            1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  byte            1    0[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7143 ;;Total ram usage:        1 bytes
  7144 ;; Hardware stack levels used: 1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_HighISR
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text50
  7153   0029CE                     __ptext50:
  7154                           	callstack 0
  7155   0029CE                     _putCharToRxBuf:
  7156                           	callstack 24
  7157                           
  7158                           ; BSR set to: 14
  7159                           ;incstack = 0
  7160                           ;putCharToRxBuf@byte stored from wreg
  7161   0029CE  6E01               	movwf	putCharToRxBuf@byte^0,c
  7162   0029D0                     
  7163                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  7164   0029D0  0E13               	movlw	19
  7165   0029D2  644B               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  7166   0029D4  EFEE  F014         	goto	i2u201_41
  7167   0029D8  EFF0  F014         	goto	i2u201_40
  7168   0029DC                     i2u201_41:
  7169   0029DC  EFF2  F014         	goto	i2l2995
  7170   0029E0                     i2u201_40:
  7171   0029E0  0E00               	movlw	0
  7172   0029E2  6E4B               	movwf	_RxBufWriteCnt^0,c	;volatile
  7173   0029E4                     i2l2995:
  7174                           
  7175                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  7176   0029E4  504B               	movf	_RxBufWriteCnt^0,w,c
  7177   0029E6  0FD5               	addlw	low _EUSART4RXbuf
  7178   0029E8  6ED9               	movwf	fsr2l,c
  7179   0029EA  6ADA               	clrf	fsr2h,c
  7180   0029EC  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  7181   0029F0  2A4B               	incf	_RxBufWriteCnt^0,f,c	;volatile
  7182   0029F2  0012               	return		;funcret
  7183   0029F4                     __end_of_putCharToRxBuf:
  7184                           	callstack 0
  7185                           
  7186 ;; *************** function _getCharFromTxBuf *****************
  7187 ;; Defined at:
  7188 ;;		line 47 in file "serial.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;		None
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      unsigned char 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used: 1
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_HighISR
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text51
  7216   0028D8                     __ptext51:
  7217                           	callstack 0
  7218   0028D8                     _getCharFromTxBuf:
  7219                           	callstack 24
  7220   0028D8                     
  7221                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7222   0028D8  0E3B               	movlw	59
  7223   0028DA  6448               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7224   0028DC  EF72  F014         	goto	i2u202_41
  7225   0028E0  EF74  F014         	goto	i2u202_40
  7226   0028E4                     i2u202_41:
  7227   0028E4  EF76  F014         	goto	i2l3003
  7228   0028E8                     i2u202_40:
  7229   0028E8  0E00               	movlw	0
  7230   0028EA  6E48               	movwf	_TxBufReadCnt^0,c	;volatile
  7231   0028EC                     i2l3003:
  7232                           
  7233                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  7234   0028EC  2A48               	incf	_TxBufReadCnt^0,f,c	;volatile
  7235   0028EE  0448               	decf	_TxBufReadCnt^0,w,c	;volatile
  7236   0028F0  6E01               	movwf	??_getCharFromTxBuf^0,c
  7237   0028F2  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  7238   0028F4  0E00               	movlw	low _EUSART4TXbuf
  7239   0028F6  2401               	addwf	??_getCharFromTxBuf^0,w,c
  7240   0028F8  6ED9               	movwf	fsr2l,c
  7241   0028FA  0E01               	movlw	high _EUSART4TXbuf
  7242   0028FC  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  7243   0028FE  6EDA               	movwf	fsr2h,c
  7244   002900  50DF               	movf	indf2,w,c
  7245   002902  0012               	return		;funcret
  7246   002904                     __end_of_getCharFromTxBuf:
  7247                           	callstack 0
  7248                           
  7249                           	psect	rparam
  7250   000000                     
  7251                           	psect	temp
  7252   00004C                     btemp:
  7253                           	callstack 0
  7254   00004C                     	ds	1
  7255   000000                     int$flags	set	btemp
  7256   000000                     wtemp8	set	btemp+1
  7257   000000                     ttemp5	set	btemp+1
  7258   000000                     ttemp6	set	btemp+4
  7259   000000                     ttemp7	set	btemp+8
  7260                           
  7261                           	psect	config
  7262                           
  7263                           ;Config register CONFIG1L @ 0x300000
  7264                           ;	External Oscillator mode Selection bits
  7265                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7266                           ;	Power-up default value for COSC bits
  7267                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7268   300000                     	org	3145728
  7269   300000  AA                 	db	170
  7270                           
  7271                           ;Config register CONFIG1H @ 0x300001
  7272                           ;	unspecified, using default values
  7273                           ;	Clock Out Enable bit
  7274                           ;	CLKOUTEN = 0x1, unprogrammed default
  7275                           ;	Clock Switch Enable bit
  7276                           ;	CSWEN = 0x1, unprogrammed default
  7277                           ;	Fail-Safe Clock Monitor Enable bit
  7278                           ;	FCMEN = 0x1, unprogrammed default
  7279   300001                     	org	3145729
  7280   300001  FF                 	db	255
  7281                           
  7282                           ;Config register CONFIG3L @ 0x300004
  7283                           ;	WDT Period Select bits
  7284                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7285                           ;	WDT operating mode
  7286                           ;	WDTE = OFF, WDT Disabled
  7287   300004                     	org	3145732
  7288   300004  9F                 	db	159
  7289                           
  7290                           ;Config register CONFIG3H @ 0x300005
  7291                           ;	unspecified, using default values
  7292                           ;	WDT Window Select bits
  7293                           ;	WDTCWS = 0x7, unprogrammed default
  7294                           ;	WDT input clock selector
  7295                           ;	WDTCCS = 0x7, unprogrammed default
  7296   300005                     	org	3145733
  7297   300005  FF                 	db	255
  7298                           tosu	equ	0xFFF
  7299                           tosh	equ	0xFFE
  7300                           tosl	equ	0xFFD
  7301                           stkptr	equ	0xFFC
  7302                           pclatu	equ	0xFFB
  7303                           pclath	equ	0xFFA
  7304                           pcl	equ	0xFF9
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           indf0	equ	0xFEF
  7312                           postinc0	equ	0xFEE
  7313                           postdec0	equ	0xFED
  7314                           preinc0	equ	0xFEC
  7315                           plusw0	equ	0xFEB
  7316                           fsr0h	equ	0xFEA
  7317                           fsr0l	equ	0xFE9
  7318                           wreg	equ	0xFE8
  7319                           indf1	equ	0xFE7
  7320                           postinc1	equ	0xFE6
  7321                           postdec1	equ	0xFE5
  7322                           preinc1	equ	0xFE4
  7323                           plusw1	equ	0xFE3
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           bsr	equ	0xFE0
  7327                           indf2	equ	0xFDF
  7328                           postinc2	equ	0xFDE
  7329                           postdec2	equ	0xFDD
  7330                           preinc2	equ	0xFDC
  7331                           plusw2	equ	0xFDB
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      75
    BANK0           160     85     137
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    S2927$buffer	PTR unsigned char  size(2) Largest target is 0

    S2927$source	PTR const unsigned char  size(2) Largest target is 0

    S50DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S50DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 40
		 -> main@buf(BANK0[40]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), STR_2(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _batteryLevel->___awdiv
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf
    _HighISR->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                93    93      0   45295
                                             60 COMRAM     6     6      0
                                              0 BANK0     85    85      0
                         _Buggy_init
                    _Interrupts_init
                   _TxBufferedString
                       _batteryLevel
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                          _sendTxBuf
                            _sprintf
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             22 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             33    15     18    3439
                                             29 COMRAM    31    13     18
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    3088
                                             25 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2738
                                             14 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   28188
                                             34 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    5029
                                             22 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             17 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     559
                                              8 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    1965
                                             30 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     193
                                              4 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     674
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     695
                                             12 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     219
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      44
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _TxBufferedString
     _putCharToTxBuf
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _stop
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_I2C_2_Master_Start
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Write
     i2_I2C_2_Master_Idle
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     55      89       5       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      4B       1       79.8%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllll     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      50        0.0%
BITBIGSFRllllll      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      61        0.0%
BITBIGSFRllllhl      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllll      3      0       0      60        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRllllll      1      0       0      62        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      65        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 15:30:03 2024

                    _white_Light 29F4                               l73 1352                               l67 1248  
                             l69 1256                     ___awdiv@sign 000A              ___wmul@multiplicand 0007  
               main@turnDuration 008A                ??_Interrupts_init 0005                              l101 26D6  
                            l104 2A36                              l112 1626                              l202 283C  
                            l123 2606                              l115 1FA4                              l107 2A10  
                            l109 2A16                              l310 2956                              l150 292C  
                            l119 2604                              l153 2958                              l313 2AA0  
                            l162 2B04                              l251 2AE2                              l171 27C8  
                            l323 2A6E                              l156 297E                              l500 2270  
                            l341 2AA4                              l165 2B0E                              l319 2738  
                            l343 2AB2                              l159 2B18                              l431 1E62  
                            l511 1738                              l344 2AB8                              l168 2AEE  
                            l424 251E                              l505 16A8                              l338 2A88  
                            l514 17AC                              l355 276E                              l291 2A54  
                            l356 2770                              l357 2784                              l517 17EA  
                            l509 1714                              l614 20B0                              l462 1BDC  
                            l454 2160                              l359 2786                              l535 29CC  
                            l471 1CE0                              l447 11B0                              l449 11B0  
                            l457 219E                              l546 2660                              l474 1D0E  
                            l466 1C48                              l547 2670                              l491 1B58  
                            l483 1A92                              l468 1C6C                              l485 1AB6  
                            l479 1A26                              l496 2224                              l488 1B2A  
                            l766 2334                              l779 23E4                              _abs 2872  
                   ___awmod@sign 000A                    ?_color_detect 0005                              wreg 0FE8  
                    main@ambient 008C                  _color_normalise 1E64                             l1033 2592  
                           l1026 258A                             ?_abs 000B                             l1213 2870  
                           l1251 19A2                             l2301 2348                             l1261 288C  
                           l3101 136C                             l3021 11B6                             l2311 237C  
                           l2303 2350                             l3111 1416                             l3103 1386  
                           l3031 11CE                             l3023 11BA                             l1264 28A4  
                           l2321 23B8                             l2313 2384                             l2305 2354  
                           l2401 17EC                             l1257 2806                             l3113 1420  
                           l3105 13A0                             l3041 11F0                             l3033 11DA  
                           l3025 11BE                             l2243 2958                             l2323 23BE  
                           l2315 238C                             l2307 2362                             l2411 1830  
                           l2403 180E                             l3115 1424                             l3107 13C8  
                           l3051 120C                             l3043 11F8                             l3035 11E0  
                           l3027 11C2                             l3019 11B2                             l1276 248E  
                           l2261 2290                             l2253 2272                             l2245 2968  
                           l2341 254A                             l2333 2520                             l2317 239A  
                           l2325 23C4                             l2309 236A                             l2421 18A2  
                           l2413 184C                             l2405 1816                             l3117 1434  
                           l3109 1412                             l3061 122C                             l3053 1210  
                           l3045 1200                             l3037 11E4                             l3029 11CE  
                           l2511 2944                             l2271 22C4                             l2263 229E  
                           l2255 2276                             l2351 257E                             l2343 2558  
                           l2335 2528                             l2247 29A8                             l2503 2A8A  
                           l2327 23D4                             l2319 23B0                             l1287 2B2E  
                           l2431 1920                             l2423 18D2                             l2415 1868  
                           l2407 1822                             l3071 1240                             l3063 1230  
                           l3055 1218                             l3047 1204                             l3039 11E8  
                           l2513 2954                             l2521 2A84                             l2281 22FE  
                           l2273 22CC                             l2265 22A6                             l2257 2284  
                           l2353 2584                             l2345 255E                             l2337 253A  
                           l2249 29C4                             l2601 1C44                             l2329 23DC  
                           l2361 2410                             l2433 1930                             l2425 18EE  
                           l2417 1880                             l2441 1974                             l2409 1826  
                           l3081 129A                             l3073 1244                             l3065 1234  
                           l3057 1220                             l3049 1208                             l2507 2930  
                           l2523 2A86                             l2515 2A70                             l2291 2324  
                           l2283 2306                             l2275 22D4                             l2267 22AA  
                           l2259 228C                             l2347 2574                             l2339 2542  
                           l2451 21A0                             l2611 1CB8                             l2603 1C72  
                           l2531 19A4                             l2371 2880                             l2363 242C  
                           l2355 23E6                             l2435 1942                             l2427 1900  
                           l2419 188A                             l3091 12CC                             l3083 12A2  
                           l3075 125E                             l3067 1238                             l3059 1228  
                           l2509 2940                             l2525 2AA2                             l2517 2A7A  
                           l2293 232C                             l2285 2308                             l2277 22E2  
                           l2269 22B2                             l2373 2B10                             l2381 2B06  
                           l2701 201C                             l2349 257C                             l2461 2204  
                           l2453 21BC                             l2613 1CC0                             l2541 1A06  
                           l2533 19BE                             l2365 245E                             l2357 23F6  
                           l2437 195C                             l2429 1910                             l2445 1980  
                           l3093 12E2                             l3085 12A6                             l3077 1276  
                           l3069 123C                             l2527 2AB6                             l2519 2A82  
                           l2287 230E                             l2279 22E8                             l2471 2904  
                           l2375 2B14                             l2383 2B0A                             l2711 206E  
                           l2703 2028                             l2391 1D8A                             l2463 2210  
                           l2455 21C8                             l2631 1680                             l2623 1628  
                           l2615 1CCC                             l2607 1C84                             l2551 1A72  
                           l2543 1A12                             l2535 19CA                             l2359 2406  
                           l2439 195E                             l3095 1304                             l3087 12AC  
                           l3079 1292                             l2289 2314                             l2801 2744  
                           l2481 291A                             l2473 290E                             l2377 2AE6  
                           l2721 20A0                             l2713 2070                             l2705 2036  
                           l2393 1D8E                             l2385 1D10                             l2465 2220  
                           l2457 21F4                             l2633 1688                             l2641 16D0  
                           l2625 1640                             l2617 1CDC                             l2609 1CB0  
                           l2561 1ACE                             l2553 1A7E                             l2545 1A22  
                           l2537 19F6                             l2297 2336                             l2369 2872  
                           l3097 1354                             l3089 12C4                             l2803 275A  
                           l2475 2914                             l2379 2AEA                             l2483 2A1A  
                           l2715 207A                             l2707 2040                             l2491 278E  
                           l2811 146C                             l2395 1DCC                             l2387 1D2A  
                           l2467 2248                             l2459 21FC                             l2643 16F4  
                           l2635 1694                             l2627 164C                             l2619 1D04  
                           l2571 1B26                             l2563 1AFA                             l2555 1A8E  
                           l2547 1A4A                             l2539 19FE                             l2299 233A  
                           l2731 27FE                             l3099 1364                             l2805 2768  
                           l2477 2916                             l2741 2672                             l2709 205E  
                           l2717 2080                             l2493 2796                             l2485 2AFC  
                           l2821 156C                             l2813 1484                             l2397 1DE6  
                           l2389 1D78                             l2469 224C                             l2661 1798  
                           l2653 1750                             l2645 1700                             l2637 16A4  
                           l2629 1678                             l2581 1B80                             l2573 1B4E  
                           l2565 1B02                             l2557 1ABC                             l2549 1A4E  
                           l2901 0F36                             l2725 27CA                             l2807 277E  
                           l2479 2918                             l2751 26A4                             l2743 2676  
                           l2719 2090                             l2671 2608                             l2495 279E  
                           l2487 2B00                             l2823 15C8                             l2815 14D8  
                           l2399 1E26                             l2663 17A8                             l2655 177C  
                           l2647 1710                             l2639 16CC                             l2591 1BD8  
                           l2583 1BAC                             l2567 1B0A                             l2911 0FC0  
                           l2903 0F48                             l2727 27D2                             l2831 20B2  
                           l2761 2AD2                             l2753 26AE                             l2745 2680  
                           l2681 1FA6                             l2673 2618                             l2497 27C4  
                           l2489 278A                             l2825 15E4                             l2817 14F4  
                           l2809 1452                             l2665 17D0                             l2657 1784  
                           l2649 173E                             l2593 1C00                             l2585 1BB4  
                           l2577 1B5A                             l2569 1B16                             l2921 1036  
                           l2913 0FF0                             l2905 0F60                             l2729 27E2  
                           l2841 2138                             l2833 20F2                             l2739 2808  
                           l2755 26B8                             l2747 2690                             l2691 1FDA  
                           l2683 1FAA                             l2675 2626                             l2499 27C6  
                           l2819 1550                             l2771 2A50                             l2763 2A38  
                           l2659 178C                             l2587 1BBC                             l2595 1C04  
                           l2579 1B74                             l2931 10D8                             l2923 104E  
                           l2907 0F78                             l2843 2140                             l2827 29F6  
                           l2757 26C2                             l2749 269A                             l2693 1FEA  
                           l2685 1FB8                             l2677 2636                             l2861 1F3E  
                           l2781 24CA                             l2773 2A52                             l2765 2A42  
                           l2669 17DA                             l2597 1C28                             l2589 1BC8  
                           l2933 10F0                             l2941 1154                             l2925 107E  
                           l2909 0FA8                             l2917 100C                             l2845 214C  
                           l2853 218E                             l2837 2104                             l2829 2A06  
                           l2759 26CC                             l2871 25CC                             l2863 2594  
                           l2695 1FEE                             l2687 1FC8                             l2679 2640  
                           l2855 1E64                             l2791 2506                             l2783 24EE  
                           l2775 2490                             l2767 2A44                             l2599 1C34  
                           l2943 1166                             l2935 1108                             l2927 1096  
                           l2919 101E                             l2847 215C                             l2839 2130  
                           l2873 25D4                             l2865 2598                             l2697 1FFE  
                           l2689 1FCC                             l2857 1E76                             l2793 2510  
                           l2785 24F8                             l2777 24A0                             l2769 2A4E  
                           l2953 1182                             l2937 1138                             l2929 10C6  
                           l2881 0E38                             l2849 2184                             l2875 25EA  
                           l2867 25AE                             l2699 2014                             l2859 1ED8  
                           l2795 2512                             l2787 24FA                             l2779 24C6  
                           l2955 1194                             l2883 0E48                             l2891 0EC0  
                           l2971 284E                             l2877 2600                             l2869 25B6  
                           l2797 251C                             l2789 2504                             l2893 0ED2  
                           l2885 0E60                             l2981 2A6A                             l2973 2856  
                           l2983 26D8                             l2799 273A                             l2895 0EEA  
                           l2887 0E78                             l2975 2866                             l2967 283E  
                           l2985 26DC                             l2897 0F02                             l2889 0EA8  
                           l2969 2846                             l2987 2702                             l2979 2A56  
                           l2989 2706                             STR_1 0E01                             STR_2 0E36  
                           u2000 2738                             u1200 2324                             u2001 2734  
                           u1201 2320                             u1130 2968                             u1210 2348  
                           u1131 2964                             u1211 2344                             u1140 297E  
                           u1220 2362                             u1300 23F6                             u1141 297A  
                           u1221 235E                             u1301 23F2                             u2101 1376  
                           u1150 2284                             u1230 237C                             u1310 2406  
                           u1151 2280                             u1231 2378                             u1311 2402  
                           u2111 1390                             u2031 11C8                             u1160 229E  
                           u1240 239A                             u1320 242C                             u1400 189E  
                           u2040 1256                             u1161 229A                             u1241 2396  
                           u1321 2428                             u1401 1898                             u2041 1252  
                           u1170 22C4                             u1250 23B0                             u1330 245E  
                           u1410 18A0                             u2050 12F4                             u1171 22C0  
                           u1251 23AC                             u1331 245A                             u2051 12EC  
                           u1180 22E2                             u1260 23D4                             u1340 2880  
                           u1420 1900                             u1181 22DE                             u1261 23D0  
                           u1341 287C                             u1421 18FC                             u1190 22FE  
                           u1270 253A                             u1350 1D2A                             u1510 2A9E  
                           u1430 1910                             u2070 1336                             u1191 22FA  
                           u1271 2536                             u1351 1D26                             u1511 2A98  
                           u1431 190C                             u2071 1330                             u1280 2558  
                           u1360 1DE6                             u1600 1C00                             u1520 2AA0  
                           u1440 1920                             u2080 1338                     _BAUD4CONbits 0EE9  
                           u1281 2554                             u1361 1DE2                             u1601 1BFC  
                           u1441 191C                             u1530 2940                             u1290 2574  
                           u1610 1C28                             u1450 1930                             u1370 180E  
                           u2090 1352                             u1531 293C                             u1291 2570  
                           u1611 1C24                             u2307 0EF4                             u1451 192C  
                           u1371 180A                             u2091 134E                             u1540 2AB2  
                           u1700 2626                             u1508 27B4                             u1620 1C6C  
                           u1460 1970                             u1380 184C                             u2068 12F6  
                           u1541 2AAE                             u1701 2622                             u1621 1C68  
                           u2317 0F24                             u1461 196C                             u1381 1848  
                           u2237 1268                             u1710 2660                             u1470 2248  
                           u1630 1C80                             u1550 1A4A                             u1390 1868  
                           u1711 265C                             u1471 2244                             u1631 1C7C  
                           u1551 1A46                             u2407 112A                             u2327 0F6A  
                           u1391 1864                             u2247 1284                             u1720 1FB8  
                           u1480 2270                             u1640 1D04                             u1560 1A72  
                           u1721 1FB4                             u1481 226C                             u1641 1D00  
                           u1561 1A6E                             u2417 1A18                             u2337 0F9A  
                           u2257 12D6                             u1810 2768                             u1730 1FDA  
                           u1490 27B2                             u1650 16CC                             u1570 1AB6  
                           _T2PR 0FBC                             u1811 2764                             u1731 1FD6  
                           u1491 27AA                             u2507 2216                             u1651 16C8  
                           u1571 1AB2                             u2427 1A84                             u2347 0FCA  
                           u2267 143E                             u1820 277E                             u1740 2014  
                           u1660 16F4                             u1580 1ACA                             u1900 0E48  
                           u1821 277A                             u2517 2686                             u1741 2010  
                           u1661 16F0                             u2437 1B1C                             u1581 1AC6  
                           u2357 0FFA                             u1901 0E44                             u2277 2152  
                           u1750 2036                             u1670 1738                             u1590 1B4E  
                           u1910 0ED2                             u1830 2A06                             u1751 2032  
                           u1671 1734                             u2447 1BCE                             u1591 1B4A  
                           u2367 1040                             u1911 0ECE                             u2287 0E6A  
                           u1831 2A02                             u1760 205E                             u1680 174C  
                           u1920 0F48                             u1840 2100                             u1761 205A  
                           u1681 1748                             u2457 1C3A                             u2377 1070  
                           u1921 0F44                             u2297 0E9A                             u1841 20FC  
                           u1770 2090                             u1690 17D0                             u1930 101E  
                           u1850 2184                             u1771 208C                             u1691 17CC  
                           u2467 1CD2                             u2387 10A0                             u1931 101A  
                           u1851 2180                             u1860 25AE                             u1940 10D8  
                           u1780 27FE                             u1861 25AA                             u2477 169A  
                           u2397 10FA                             u1941 10D4                             u1781 27FA  
                           u1870 25CC                             u1950 1166                             u1871 25C8  
                           u2487 1706                             u1951 1162                             u1880 25EA  
                           u1960 1194                             u1881 25E6                             u2497 179E  
                           u1961 1190                             u1890 2600                             u1970 2A6A  
                           u1891 25FC                             u1971 2A66                             u1980 26FE  
                           u1990 2728                             u1987 26F4                             u1997 271E  
                           abs@a 000B                             _dbuf 00B5                             _main 11B2  
                           _prec 0045                             _move 0E38                             fsr0h 0FEA  
                           fsr1h 0FE2                             indf0 0FEF                             fsr2h 0FDA  
                           fsr0l 0FE9                             indf1 0FE7                             indf2 0FDF  
                           fsr1l 0FE1                             fsr2l 0FD9                             btemp 004C  
                           _stop 20B2                             prodh 0FF4                             prodl 0FF3  
                           start 008C              main@reverseDuration 0088                 __end_of_ADC_init 2A8A  
                __end_of_HighISR 008C                     ___param_bank 0000                            ??_abs 000D  
           __end_of_batteryLevel 2788                  __end_of___aldiv 20B2                            ?_main 0001  
                          _ADPCH 0F5F                  __end_of___awdiv 2336                            ?_move 0023  
                __end_of___awmod 23E6                            ?_stop 0017                  ___awdiv@divisor 0007  
                __end_of___lwdiv 2594                            i2l153 2980                            i2l313 2AD0  
                          i2l306 2902                            i2l156 29A6                            i2l260 0080  
                          i2l165 2B22                            i2l159 2B2C                            i2l168 2AFA  
                          i2l299 29F2                  ___awdiv@counter 0009                   ??_color_detect 000D  
                   vfpfcnvrt@fmt 0010              ___lmul@multiplicand 0009       __end_of_I2C_2_Master_Start 2B1A  
     __end_of_I2C_2_Master_Write 2AF0                            _flags 0047                       _Buggy_init 2808  
                          _fputc 23E6                            _width 0043                            _putch 2B2E  
                          tablat 0FF5                            plusw0 0FEB                            plusw2 0FDB  
                          ttemp5 004D                            ttemp6 0050                            ttemp7 0054  
                          stop@i 001D                            status 0FD8                            wtemp8 004D  
                __end_of_sprintf 2872                color_detect@color 000D                     main@turnRamp 008B  
          _I2C_2_Master_RepStart 2AFC               putCharToRxBuf@byte 0001                  __initialization 28A6  
                   __end_of_main 1452                     __end_of_move 11B2                  i2_isDataInTxBuf 2ABA  
                   __end_of_stop 21A0               putCharToTxBuf@byte 0005              move@reverseDuration 0027  
                         ??_main 003D                           ??_move 002C                           ??_stop 001A  
                  __activetblptr 0002          __end_of_color_normalise 1FA6                     ?_setMotorPWM 0012  
                         ?_fputc 0005                           _ADRESH 0F64                           _CCPR1H 0FAA  
                         _CCPR2H 0FA6                           _CCPR3H 0F25                           _CCPR4H 0F21  
               ___awdiv@dividend 0005                           ?_putch 0001                           _RC0PPS 0E62  
                         _RC4REG 0EE3                           _RE2PPS 0E74                           _RC7PPS 0E69  
                         _RD5PPS 0E6F                           _RE4PPS 0E76                           _RD6PPS 0E70  
                         i2l3001 28E8                           i2l3003 28EC                           i2l3011 2B1A  
                         i2l3013 2B1E                           i2l3007 2B24                           i2l3015 2AF2  
                         i2l3009 2B28                           i2l3017 2AF6                           i2l2065 2ABA  
                         i2l3121 0022                           i2l3131 0050                           i2l3123 0024  
                         i2l3133 0060                           i2l3125 0038                           i2l3135 0068  
                         i2l3127 003C                           i2l3119 0012                           i2l3137 007C  
                         i2l3129 004A                           i2l2735 2980                           i2l2737 2990  
                         _RG6PPS 0E88                           i2l2991 29D0                           i2l2993 29E0  
                         i2l2995 29E4                           i2l2997 29F0                           i2l2999 28D8  
                  vfpfcnvrt@done 0013                        ??_HighISR 0003         __end_of_color_click_init 26D8  
                         _RX4PPS 0E15                           _TX4REG 0EE4                     ??_ADC_getval 0005  
                   _CCPTMRS0bits 0FAD                     vfprintf@cfmt 001D                 _getCharFromTxBuf 28D8  
                         ___lmul 2608                        ??___aldiv 0019                           ___wmul 29A8  
                      ??___awdiv 0009                        ??___awmod 0009                        ??___lwdiv 000F  
             color_detect@RGBC_n 0005                           clear_0 28AC                           clear_1 28B8  
                         clear_2 28C4                 ___awdiv@quotient 000B                  ___awmod@divisor 0007  
                         isa$std 0001                  ___awmod@counter 0009                           fputc@c 0005  
              ?_TxBufferedString 0006                           move@mL 0023                           move@mR 0024  
                   __mediumconst 0000                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                        ?_ADC_init 0001               ??_TxBufferedString 0008  
                         putch@c 0001                 __end_of_vfprintf 2808                           stop@mL 0017  
                         stop@mR 0018                      ?_Buggy_init 0001                ??_initDCmotorsPWM 0007  
                      ??_sprintf 0030               __end_of_ADC_getval 2ABA                 __end_of_turnLeft 1D10  
          __end_of_isDataInTxBuf 2AA2                       __accesstop 0060          __end_of__initialization 28CA  
                fullSpeedAhead@i 001E                    main@turnSpeed 0089           ?_I2C_2_Master_RepStart 0001  
        __end_ofi2_isDataInTxBuf 2AD2                    ___rparam_used 0001             __end_of_color_detect 2608  
                _Interrupts_init 2AD2                   __pcstackCOMRAM 0001                     ?_white_Light 0001  
                  __end_of_fputc 2490                    __end_of_putch 2B30                 _reverseOneSquare 1628  
               ?_color_normalise 001F                       ??_ADC_init 0005                          ??_fputc 0008  
                        ??_putch 0005                     _batteryLevel 273A                       __pbssBANK0 00B5  
                     __pbssBANK1 0100                _color_writetoaddr 2A18                     _T2CLKCONbits 0FBF  
             ?_color_writetoaddr 0007                          ?___lmul 0005                          ?___wmul 0005  
                 ___lmul@product 000D              ??_color_writetoaddr 0008                          _SP4BRGH 0EE6  
                        _SP4BRGL 0EE5       fullSpeedAhead@straightRamp 001A                          i2u91_40 2ACE  
                        i2u91_41 2AC8                          i2u92_40 2AD0            turnRight@turnDuration 001A  
                        _SSP2ADD 0ED6                          _SSP2BUF 0ED5                       _color_read 1452  
        __end_of_Interrupts_init 2AE4           color_writetoaddr@value 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2A38                 ?i2_isDataInTxBuf 0001                        _ADREFbits 0F58  
             _I2C_2_Master_Start 2B10                       _initUSART4 2A38              i2_I2C_2_Master_Idle 2980  
             _I2C_2_Master_Write 2AE4                          __Hparam 0000              i2_I2C_2_Master_Stop 2B1A  
                        __Lparam 0000                          ___aldiv 1FA6                          ___awdiv 2272  
                        ___awmod 2336              ?_I2C_2_Master_Start 0001                          ___lwdiv 2520  
            ?_I2C_2_Master_Write 0001                        ?_vfprintf 001A                     __psmallconst 0E00  
                        __pcinit 28A6                          __ramtop 0E00                        ?_turnLeft 0017  
                        __ptext0 11B2                          __ptext1 29F4                          __ptext2 20B2  
                        __ptext3 283E                          __ptext4 27CA                          __ptext5 17EC  
                        __ptext6 23E6                          __ptext7 2B2E                          __ptext8 2872  
                        __ptext9 2336             ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 0FBD  
           ?i2_I2C_2_Master_Stop 0001                 ___awmod@dividend 0005                 ___aldiv@dividend 0011  
                      _T2HLTbits 0FBE                    _RxBufWriteCnt 004B         __end_of_getCharFromTxBuf 2904  
                        main@buf 0060                          _sprintf 283E             ??_I2C_2_Master_Start 0006  
           ??_I2C_2_Master_Write 0006            color_normalise@RGBC_n 0027             end_of_initialization 28CA  
              __end_of_sendTxBuf 2A70                 ADC_getval@tmpval 0005                reverseOneSquare@i 001F  
                        fputc@fp 0007                    __Lmediumconst 0000                ?_color_click_init 0001  
             ??_color_click_init 0009                __end_of_vfpfcnvrt 19A4                 ___aldiv@quotient 001B  
     batteryLevel@batteryQuarter 000E                          postdec2 0FDD                          postinc0 0FEE  
                        postinc1 0FE6                          postinc2 0FDE                 vfpfcnvrt@convarg 0015  
     batteryLevel@batteryVoltage 000D                       main@F14564 013C                       ??_vfprintf 001D  
                _initDCmotorsPWM 2490                       ??_turnLeft 001C                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0016            ??i2_I2C_2_Master_Idle 0001                    move@turnSpeed 0029  
              __end_of_turnRight 1B5A            ??i2_I2C_2_Master_Stop 0002                       main@RGBC_n 0091  
                   _color_detect 2594                        _TRISAbits 0F81               setMotorPWM@posDuty 0015  
                      _TRISBbits 0F82                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 white_Light@state 0005                     ??_Buggy_init 0005  
               fullSpeedAhead@mL 0017                 fullSpeedAhead@mR 0018                      ?_color_read 0009  
       color_writetoaddr@address 0008          ??_I2C_2_Master_RepStart 0006         __end_of_reverseOneSquare 17EC  
               ?_Interrupts_init 0001                    stop@cur_power 001F                      _CCP1CONbits 0FAB  
                   _EUSART4RXbuf 00D5                     _EUSART4TXbuf 0100                      _CCP2CONbits 0FA7  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
                     main@motorL 00AB                       main@motorR 00A1                   color_read@RGBC 0009  
                 _fullSpeedAhead 21A0                   __end_of___lmul 2672             turnLeft@turnDuration 001A  
                    vfpfcnvrt@ap 0011                      vfpfcnvrt@cp 0014                      vfpfcnvrt@fp 000F  
                 __end_of___wmul 29CE               __end_of_Buggy_init 283E              start_initialization 28A6  
                    __end_of_abs 28A6                    _TxBufWriteCnt 0049          __end_of_initDCmotorsPWM 2520  
                    vfprintf@fmt 001B           __end_of_fullSpeedAhead 2272               turnRight@cur_power 0021  
                       ??___lmul 000D                         ??___wmul 0009                   _putCharToRxBuf 29CE  
                 _putCharToTxBuf 292E              color_normalise@RGBC 001F    i2I2C_2_Master_Write@data_byte 0002  
   reverseOneSquare@straightRamp 001B     __end_ofi2_I2C_2_Master_Start 2B2E     __end_ofi2_I2C_2_Master_Write 2AFC  
              turnLeft@cur_power 0021                      __pbssCOMRAM 0043                    __pcstackBANK0 0060  
                       ?_HighISR 0001                 stop@straightRamp 0019                 ___lwdiv@dividend 000B  
         __end_of_putCharToRxBuf 29F4           __end_of_putCharToTxBuf 2958                  ?_fullSpeedAhead 0017  
                      __pintcode 0008                         ?___aldiv 0011               turnRight@turnSpeed 0019  
                       ?___awdiv 0005                         ?___awmod 0005                         ?___lwdiv 000B  
         TxBufferedString@string 0006             I2C_2_Master_Read@ack 0007             I2C_2_Master_Read@tmp 0008  
                    __smallconst 0E00                _I2C_2_Master_Idle 2958                _I2C_2_Master_Init 2904  
              _I2C_2_Master_Read 2788                turnLeft@turnSpeed 0019                _I2C_2_Master_Stop 2B06  
                   _RxBufReadCnt 004A                         _ADC_init 2A70               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0013  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000F         initDCmotorsPWM@PWMperiod 0005  
                       ?_sprintf 001E                ?_getCharFromTxBuf 0001               ??_getCharFromTxBuf 0001  
              move@straightSpeed 0026                  ___aldiv@divisor 0015              ??_I2C_2_Master_Idle 0005  
                ___aldiv@counter 0019              ??_I2C_2_Master_Init 0005              ??_I2C_2_Master_Read 0006  
                 ___wmul@product 0009                         _LATAbits 0F79              ??_I2C_2_Master_Stop 0006  
                       _LATCbits 0F7B                    _isDataInTxBuf 2A8A                         _LATDbits 0F7C  
                       _LATEbits 0F7D                         _LATFbits 0F7E                 _TxBufferedString 26D8  
                       _LATGbits 0F7F                         _LATHbits 0F80                        _sendTxBuf 2A56  
                       _IPR0bits 0E1F                         _PIE0bits 0E29                         _PIE4bits 0E2D  
                       i2u201_40 29E0                         i2u201_41 29DC                         i2u202_40 28E8  
                       i2u202_41 28E4                         i2u212_40 0022                         i2u212_41 001E  
                       i2u213_40 004A                         i2u213_41 0046                         i2u214_40 0060  
                       i2u214_41 005C                      turnRight@mL 0017                         i2u215_40 007C  
                       i2u215_41 0078                      turnRight@mR 0018                         i2u180_40 29A6  
                       i2u180_41 29A2                         _PIR0bits 0E33                         i2u179_40 2990  
                       i2u179_41 298C                         _PIR4bits 0E37                  ?_putCharToRxBuf 0001  
               ?_initDCmotorsPWM 0005                  ?_putCharToTxBuf 0001      fullSpeedAhead@straightSpeed 0019  
                       _SSP2CON2 0EDA                         _SSP2STAT 0ED8                     move@turnRamp 002B  
                      _vfpfcnvrt 17EC                       _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 2980  
      __end_of_I2C_2_Master_Init 292E        __end_of_I2C_2_Master_Read 27CA                ___wmul@multiplier 0005  
      __end_of_I2C_2_Master_Stop 2B10                     setMotorPWM@m 0012      I2C_2_Master_Write@data_byte 0006  
                      main@color 008E                     _TxBufReadCnt 0048                        _turnRight 19A4  
                     vfpfcnvrt@c 0019                     ??_color_read 000A                ___lmul@multiplier 0005  
                 ?_isDataInTxBuf 0001    __end_of_I2C_2_Master_RepStart 2B06                ?_reverseOneSquare 0017  
            __end_of_setMotorPWM 1E64                       ?_sendTxBuf 0001                     ??_initUSART4 0005  
           i2_I2C_2_Master_Start 2B24  reverseOneSquare@reverseDuration 001A             i2_I2C_2_Master_Write 2AF0  
             ??_reverseOneSquare 001C                         __Hrparam 0000                ??_color_normalise 0028  
                     _ADC_getval 2AA2                       vfprintf@ap 001C                         __Lrparam 0000  
                     vfprintf@fp 001A                    ??_white_Light 0005      __end_ofi2_I2C_2_Master_Idle 29A8  
    __end_ofi2_I2C_2_Master_Stop 2B24                       ?_vfpfcnvrt 000F               __end_of_color_read 1628  
                     _ANSELBbits 0E9A                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                     sprintf@fmt 001F    reverseOneSquare@straightSpeed 0019                  ___lwdiv@divisor 000D  
             __end_of_initUSART4 2A56                  ___lwdiv@counter 0011                turnRight@turnRamp 001B  
                     ?_turnRight 0017                         __ptext10 2A56                         __ptext11 2A8A  
                       __ptext20 2A38                         __ptext12 0E38                         __ptext21 2490  
                       __ptext13 19A4                         __ptext30 2A18                         __ptext22 1452  
                       __ptext14 1B5A                         __ptext31 2AE4                         __ptext23 2AFC  
                       __ptext15 1628                         __ptext40 26D8                         __ptext32 2B06  
                       __ptext24 2788                         __ptext16 21A0                         __ptext41 292E  
                       __ptext33 2B10                         __ptext25 1E64                         __ptext17 1D10  
                       __ptext50 29CE                         __ptext42 2AD2                         __ptext34 2958  
                       __ptext26 2608                         __ptext18 29A8                         __ptext51 28D8  
                       __ptext43 2808                         __ptext35 2904                         __ptext27 1FA6  
                       __ptext19 2520                         __ptext36 273A                         __ptext28 2594  
                       __ptext45 2ABA                         __ptext37 2272                         __ptext29 2672  
                       __ptext46 2AF0                         __ptext38 2A70                         __ptext47 2B1A  
                       __ptext39 2AA2                         __ptext48 2B24                         __ptext49 2980  
                      move@color 0025                    ?_batteryLevel 0001                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                 turnLeft@turnRamp 001B                       turnLeft@mL 0017  
                     turnLeft@mR 0018            ?i2_I2C_2_Master_Start 0001                 move@straightRamp 0028  
          ?i2_I2C_2_Master_Write 0001                       turnRight@i 001F                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         main@RGBC 0099                         int$flags 004C  
                       _vfprintf 27CA                         _turnLeft 1B5A          fullSpeedAhead@cur_power 0020  
            __end_of_white_Light 2A18                       _INTCONbits 0FF2                ??i2_isDataInTxBuf 0001  
      reverseOneSquare@cur_power 0021               reverseOneSquare@mL 0017               reverseOneSquare@mR 0018  
               move@turnDuration 002A                   ??_batteryLevel 000D                      _setMotorPWM 1D10  
                ??_isDataInTxBuf 0005                         intlevel2 0000                        sprintf@ap 0030  
               ??_fullSpeedAhead 001B                      ??_sendTxBuf 0005                        turnLeft@i 001F  
                    ?_ADC_getval 0001                main@straightSpeed 008F                      ??_vfpfcnvrt 0012  
               _color_click_init 2672         __end_of_TxBufferedString 273A                         sprintf@f 0031  
                       sprintf@s 001E                       _SSP2DATPPS 0E1D                       _SSP2CLKPPS 0E1C  
                   ___aldiv@sign 001A                      ??_turnRight 001C                 main@straightRamp 0090  
                     _TX4STAbits 0EE8           ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002  
               ??_putCharToRxBuf 0001                 ??_putCharToTxBuf 0005  
