

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Mar 03 15:00:48 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     _TRISGbits	set	3975
    62   000000                     _TRISEbits	set	3973
    63   000000                     _TRISFbits	set	3974
    64   000000                     _TRISHbits	set	3976
    65   000000                     _RC7PPS	set	3689
    66   000000                     _RE2PPS	set	3700
    67   000000                     _ANSELFbits	set	3764
    68   000000                     _CCPR4H	set	3873
    69   000000                     _CCPR3H	set	3877
    70   000000                     _CCPR2H	set	4006
    71   000000                     _CCPR1H	set	4010
    72   000000                     _CCP1CONbits	set	4011
    73   000000                     _CCPTMRS0bits	set	4013
    74   000000                     _T2PR	set	4028
    75   000000                     _T2CONbits	set	4029
    76   000000                     _CCP2CONbits	set	4007
    77   000000                     _ADREFbits	set	3928
    78   000000                     _CCP3CONbits	set	3878
    79   000000                     _LATCbits	set	3963
    80   000000                     _LATDbits	set	3964
    81   000000                     _CCP4CONbits	set	3874
    82   000000                     _LATGbits	set	3967
    83   000000                     _LATEbits	set	3965
    84   000000                     _LATHbits	set	3968
    85   000000                     _TRISDbits	set	3972
    86   000000                     _TRISCbits	set	3971
    87   000000                     _PORTFbits	set	3982
    88   000000                     _RE4PPS	set	3702
    89   000000                     _RG6PPS	set	3720
    90   000000                     _T2CLKCONbits	set	4031
    91   000000                     _T2HLTbits	set	4030
    92   000000                     _ADPCH	set	3935
    93   000000                     _ADRESH	set	3940
    94   000000                     _ADCON0bits	set	3936
    95                           
    96                           ; #config settings
    97                           
    98                           	psect	cinit
    99   001BDC                     __pcinit:
   100                           	callstack 0
   101   001BDC                     start_initialization:
   102                           	callstack 0
   103   001BDC                     __initialization:
   104                           	callstack 0
   105   001BDC                     end_of_initialization:
   106                           	callstack 0
   107   001BDC                     __end_of__initialization:
   108                           	callstack 0
   109   001BDC  0100               	movlb	0
   110   001BDE  EFE3  F007         	goto	_main	;jump to C main() function
   111                           
   112                           	psect	cstackCOMRAM
   113   000001                     __pcstackCOMRAM:
   114                           	callstack 0
   115   000001                     ?___wmul:
   116                           	callstack 0
   117   000001                     ?___awdiv:
   118                           	callstack 0
   119   000001                     ADC_getval@tmpval:
   120                           	callstack 0
   121   000001                     initDCmotorsPWM@PWMperiod:
   122                           	callstack 0
   123   000001                     ___wmul@multiplier:
   124                           	callstack 0
   125   000001                     ___awdiv@dividend:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x0
   129   000001                     	ds	2
   130   000003                     ___wmul@multiplicand:
   131                           	callstack 0
   132   000003                     ___awdiv@divisor:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x2
   136   000003                     	ds	2
   137   000005                     ___awdiv@counter:
   138                           	callstack 0
   139   000005                     ___wmul@product:
   140                           	callstack 0
   141                           
   142                           ; 2 bytes @ 0x4
   143   000005                     	ds	1
   144   000006                     ___awdiv@sign:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x5
   148   000006                     	ds	1
   149   000007                     ?___lwdiv:
   150                           	callstack 0
   151   000007                     ___awdiv@quotient:
   152                           	callstack 0
   153   000007                     ___lwdiv@dividend:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x6
   157   000007                     	ds	2
   158   000009                     batteryLevel@batteryVoltage:
   159                           	callstack 0
   160   000009                     ___lwdiv@divisor:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x8
   164   000009                     	ds	1
   165   00000A                     batteryLevel@batteryQuarter:
   166                           	callstack 0
   167                           
   168                           ; 1 bytes @ 0x9
   169   00000A                     	ds	1
   170   00000B                     ___lwdiv@quotient:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0xA
   174   00000B                     	ds	2
   175   00000D                     ___lwdiv@counter:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0xC
   179   00000D                     	ds	1
   180   00000E                     setMotorPWM@m:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xD
   184   00000E                     	ds	1
   185   00000F                     ??_setMotorPWM:
   186                           
   187                           ; 1 bytes @ 0xE
   188   00000F                     	ds	2
   189   000011                     setMotorPWM@posDuty:
   190                           	callstack 0
   191                           
   192                           ; 1 bytes @ 0x10
   193   000011                     	ds	1
   194   000012                     setMotorPWM@negDuty:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x11
   198   000012                     	ds	1
   199   000013                     stop@mL:
   200                           	callstack 0
   201   000013                     turnLeft@mL:
   202                           	callstack 0
   203   000013                     turnRight@mL:
   204                           	callstack 0
   205   000013                     fullSpeedAhead@mL:
   206                           	callstack 0
   207   000013                     reverseOneSquare@mL:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x12
   211   000013                     	ds	1
   212   000014                     stop@mR:
   213                           	callstack 0
   214   000014                     turnLeft@mR:
   215                           	callstack 0
   216   000014                     turnRight@mR:
   217                           	callstack 0
   218   000014                     fullSpeedAhead@mR:
   219                           	callstack 0
   220   000014                     reverseOneSquare@mR:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x13
   224   000014                     	ds	1
   225   000015                     stop@straightRamp:
   226                           	callstack 0
   227   000015                     turnLeft@turnSpeed:
   228                           	callstack 0
   229   000015                     turnRight@turnSpeed:
   230                           	callstack 0
   231   000015                     fullSpeedAhead@straightSpeed:
   232                           	callstack 0
   233   000015                     reverseOneSquare@straightSpeed:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x14
   237   000015                     	ds	1
   238   000016                     ??_stop:
   239   000016                     turnLeft@turnDuration:
   240                           	callstack 0
   241   000016                     turnRight@turnDuration:
   242                           	callstack 0
   243   000016                     fullSpeedAhead@straightRamp:
   244                           	callstack 0
   245   000016                     reverseOneSquare@reverseDuration:
   246                           	callstack 0
   247                           
   248                           ; 1 bytes @ 0x15
   249   000016                     	ds	1
   250   000017                     ??_fullSpeedAhead:
   251   000017                     turnLeft@turnRamp:
   252                           	callstack 0
   253   000017                     turnRight@turnRamp:
   254                           	callstack 0
   255   000017                     reverseOneSquare@straightRamp:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0x16
   259   000017                     	ds	1
   260   000018                     ??_turnLeft:
   261   000018                     ??_turnRight:
   262   000018                     ??_reverseOneSquare:
   263                           
   264                           ; 1 bytes @ 0x17
   265   000018                     	ds	1
   266   000019                     stop@i:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x18
   270   000019                     	ds	1
   271   00001A                     fullSpeedAhead@i:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0x19
   275   00001A                     	ds	1
   276   00001B                     stop@cur_power:
   277                           	callstack 0
   278   00001B                     turnLeft@i:
   279                           	callstack 0
   280   00001B                     turnRight@i:
   281                           	callstack 0
   282   00001B                     reverseOneSquare@i:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x1A
   286   00001B                     	ds	1
   287   00001C                     fullSpeedAhead@cur_power:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x1B
   291   00001C                     	ds	1
   292   00001D                     turnLeft@cur_power:
   293                           	callstack 0
   294   00001D                     turnRight@cur_power:
   295                           	callstack 0
   296   00001D                     reverseOneSquare@cur_power:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x1C
   300   00001D                     	ds	2
   301   00001F                     calibration@mL:
   302                           	callstack 0
   303                           
   304                           ; 1 bytes @ 0x1E
   305   00001F                     	ds	1
   306   000020                     calibration@mR:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0x1F
   310   000020                     	ds	1
   311   000021                     calibration@turnSpeed:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x20
   315   000021                     	ds	1
   316   000022                     calibration@turnDuration:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x21
   320   000022                     	ds	1
   321   000023                     calibration@turnRamp:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x22
   325   000023                     	ds	1
   326   000024                     ??_calibration:
   327                           
   328                           ; 1 bytes @ 0x23
   329   000024                     	ds	2
   330   000026                     ??_main:
   331                           
   332                           ; 1 bytes @ 0x25
   333   000026                     	ds	2
   334   000028                     main@reverseDuration:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0x27
   338   000028                     	ds	1
   339   000029                     main@straightSpeed:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0x28
   343   000029                     	ds	1
   344   00002A                     main@straightRamp:
   345                           	callstack 0
   346                           
   347                           ; 1 bytes @ 0x29
   348   00002A                     	ds	1
   349   00002B                     main@turnSpeed:
   350                           	callstack 0
   351                           
   352                           ; 1 bytes @ 0x2A
   353   00002B                     	ds	1
   354   00002C                     main@turnRamp:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x2B
   358   00002C                     	ds	1
   359   00002D                     main@turnDuration:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x2C
   363   00002D                     	ds	1
   364   00002E                     main@motorR:
   365                           	callstack 0
   366                           
   367                           ; 10 bytes @ 0x2D
   368   00002E                     	ds	10
   369   000038                     main@motorL:
   370                           	callstack 0
   371                           
   372                           ; 10 bytes @ 0x37
   373   000038                     	ds	10
   374                           
   375 ;;
   376 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   377 ;;
   378 ;; *************** function _main *****************
   379 ;; Defined at:
   380 ;;		line 14 in file "main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;		None
   383 ;; Auto vars:     Size  Location     Type
   384 ;;  motorL         10   55[COMRAM] struct DC_motor
   385 ;;  motorR         10   45[COMRAM] struct DC_motor
   386 ;;  PWMcycle        2    0        unsigned int 
   387 ;;  turnDuration    1   44[COMRAM] unsigned char 
   388 ;;  turnRamp        1   43[COMRAM] unsigned char 
   389 ;;  turnSpeed       1   42[COMRAM] unsigned char 
   390 ;;  straightRamp    1   41[COMRAM] unsigned char 
   391 ;;  straightSpee    1   40[COMRAM] unsigned char 
   392 ;;  reverseDurat    1   39[COMRAM] unsigned char 
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   403 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   405 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   406 ;;Total ram usage:       28 bytes
   407 ;; Hardware stack levels required when called: 4
   408 ;; This function calls:
   409 ;;		_batteryLevel
   410 ;;		_calibration
   411 ;;		_fullSpeedAhead
   412 ;;		_initDCmotorsPWM
   413 ;;		_reverseOneSquare
   414 ;;		_stop
   415 ;;		_turnLeft
   416 ;;		_turnRight
   417 ;; This function is called by:
   418 ;;		Startup code after reset
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text0
   423   000FC6                     __ptext0:
   424                           	callstack 0
   425   000FC6                     _main:
   426                           	callstack 27
   427   000FC6                     
   428                           ;main.c: 16:     initDCmotorsPWM(PWMcycle);
   429   000FC6  0E00               	movlw	0
   430   000FC8  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   431   000FCA  0EC7               	movlw	199
   432   000FCC  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   433   000FCE  EC19  F00D         	call	_initDCmotorsPWM	;wreg free
   434   000FD2                     
   435                           ;main.c: 18:     struct DC_motor motorL, motorR;;main.c: 20:     motorL.power=0;
   436   000FD2  0E00               	movlw	0
   437   000FD4  6E38               	movwf	main@motorL^0,c
   438   000FD6                     
   439                           ;main.c: 21:     motorL.direction=1;
   440   000FD6  0E01               	movlw	1
   441   000FD8  6E39               	movwf	(main@motorL+1)^0,c
   442   000FDA                     
   443                           ;main.c: 22:     motorL.brakemode=1;
   444   000FDA  0E01               	movlw	1
   445   000FDC  6E3A               	movwf	(main@motorL+2)^0,c
   446   000FDE                     
   447                           ;main.c: 23:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   448   000FDE  0EAA               	movlw	170
   449   000FE0  6E3D               	movwf	(main@motorL+5)^0,c
   450   000FE2  0E0F               	movlw	15
   451   000FE4  6E3E               	movwf	(main@motorL+6)^0,c
   452   000FE6                     
   453                           ;main.c: 24:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   454   000FE6  0EA6               	movlw	166
   455   000FE8  6E3F               	movwf	(main@motorL+7)^0,c
   456   000FEA  0E0F               	movlw	15
   457   000FEC  6E40               	movwf	(main@motorL+8)^0,c
   458   000FEE                     
   459                           ;main.c: 25:     motorL.PWMperiod=PWMcycle;
   460   000FEE  0E00               	movlw	0
   461   000FF0  6E3C               	movwf	(main@motorL+4)^0,c
   462   000FF2  0EC7               	movlw	199
   463   000FF4  6E3B               	movwf	(main@motorL+3)^0,c
   464   000FF6                     
   465                           ;main.c: 26:     motorL.compensation=3;
   466   000FF6  0E03               	movlw	3
   467   000FF8  6E41               	movwf	(main@motorL+9)^0,c
   468   000FFA                     
   469                           ;main.c: 28:     motorR.power=0;
   470   000FFA  0E00               	movlw	0
   471   000FFC  6E2E               	movwf	main@motorR^0,c
   472   000FFE                     
   473                           ;main.c: 29:     motorR.direction=1;
   474   000FFE  0E01               	movlw	1
   475   001000  6E2F               	movwf	(main@motorR+1)^0,c
   476   001002                     
   477                           ;main.c: 30:     motorR.brakemode=1;
   478   001002  0E01               	movlw	1
   479   001004  6E30               	movwf	(main@motorR+2)^0,c
   480   001006                     
   481                           ;main.c: 31:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   482   001006  0E25               	movlw	37
   483   001008  6E33               	movwf	(main@motorR+5)^0,c
   484   00100A  0E0F               	movlw	15
   485   00100C  6E34               	movwf	(main@motorR+6)^0,c
   486   00100E                     
   487                           ;main.c: 32:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   488   00100E  0E21               	movlw	33
   489   001010  6E35               	movwf	(main@motorR+7)^0,c
   490   001012  0E0F               	movlw	15
   491   001014  6E36               	movwf	(main@motorR+8)^0,c
   492   001016                     
   493                           ;main.c: 33:     motorR.PWMperiod=PWMcycle;
   494   001016  0E00               	movlw	0
   495   001018  6E32               	movwf	(main@motorR+4)^0,c
   496   00101A  0EC7               	movlw	199
   497   00101C  6E31               	movwf	(main@motorR+3)^0,c
   498   00101E                     
   499                           ;main.c: 34:     motorR.compensation=0;
   500   00101E  0E00               	movlw	0
   501   001020  6E37               	movwf	(main@motorR+9)^0,c
   502   001022                     
   503                           ;main.c: 37:     char straightSpeed=60;
   504   001022  0E3C               	movlw	60
   505   001024  6E29               	movwf	main@straightSpeed^0,c
   506   001026                     
   507                           ;main.c: 38:     unsigned char straightRamp=2;
   508   001026  0E02               	movlw	2
   509   001028  6E2A               	movwf	main@straightRamp^0,c
   510   00102A                     
   511                           ;main.c: 40:     unsigned char reverseDuration=10;
   512   00102A  0E0A               	movlw	10
   513   00102C  6E28               	movwf	main@reverseDuration^0,c
   514   00102E                     
   515                           ;main.c: 42:     char turnSpeed=21;
   516   00102E  0E15               	movlw	21
   517   001030  6E2B               	movwf	main@turnSpeed^0,c
   518   001032                     
   519                           ;main.c: 43:     unsigned char turnDuration=10;
   520   001032  0E0A               	movlw	10
   521   001034  6E2D               	movwf	main@turnDuration^0,c
   522   001036                     
   523                           ;main.c: 44:     unsigned char turnRamp=4;
   524   001036  0E04               	movlw	4
   525   001038  6E2C               	movwf	main@turnRamp^0,c
   526   00103A                     
   527                           ;main.c: 47:     LATDbits.LATD7=0;
   528   00103A  9E7C               	bcf	124,7,c	;volatile
   529   00103C                     
   530                           ;main.c: 48:     TRISDbits.TRISD7=0;
   531   00103C  9E84               	bcf	132,7,c	;volatile
   532   00103E                     
   533                           ;main.c: 49:     LATHbits.LATH3=0;
   534   00103E  9680               	bcf	128,3,c	;volatile
   535   001040                     
   536                           ;main.c: 50:     TRISHbits.TRISH3=0;
   537   001040  9688               	bcf	136,3,c	;volatile
   538   001042                     
   539                           ;main.c: 53:     TRISFbits.TRISF2=1;
   540   001042  8486               	bsf	134,2,c	;volatile
   541   001044                     
   542                           ;main.c: 54:     ANSELFbits.ANSELF2=0;
   543   001044  010E               	movlb	14	; () banked
   544   001046  95B4               	bcf	180,2,b	;volatile
   545   001048                     
   546                           ; BSR set to: 14
   547                           ;main.c: 55:     TRISFbits.TRISF3=1;
   548   001048  8686               	bsf	134,3,c	;volatile
   549   00104A                     
   550                           ; BSR set to: 14
   551                           ;main.c: 56:     ANSELFbits.ANSELF3=0;
   552   00104A  97B4               	bcf	180,3,b	;volatile
   553   00104C                     
   554                           ; BSR set to: 14
   555                           ;main.c: 59:     batteryLevel();
   556   00104C  EC9B  F00D         	call	_batteryLevel	;wreg free
   557   001050                     l45:
   558   001050  B48E               	btfsc	142,2,c	;volatile
   559   001052  EF2D  F008         	goto	u791
   560   001056  EF2F  F008         	goto	u790
   561   00105A                     u791:
   562   00105A  EF28  F008         	goto	l45
   563   00105E                     u790:
   564   00105E                     
   565                           ;main.c: 63:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   566   00105E  9680               	bcf	128,3,c	;volatile
   567   001060  9E7C               	bcf	124,7,c	;volatile
   568   001062                     
   569                           ;main.c: 64:     _delay((unsigned long)((500)*(64000000/4000.0)));
   570   001062  0E29               	movlw	41
   571   001064  6E27               	movwf	(??_main+1)^0,c
   572   001066  0E96               	movlw	150
   573   001068  6E26               	movwf	??_main^0,c
   574   00106A  0E7F               	movlw	127
   575   00106C                     u807:
   576   00106C  2EE8               	decfsz	wreg,f,c
   577   00106E  D7FE               	bra	u807
   578   001070  2E26               	decfsz	??_main^0,f,c
   579   001072  D7FC               	bra	u807
   580   001074  2E27               	decfsz	(??_main+1)^0,f,c
   581   001076  D7FA               	bra	u807
   582   001078  0000               	nop	
   583   00107A                     
   584                           ;main.c: 66:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
   585   00107A  0E38               	movlw	low main@motorL
   586   00107C  6E1F               	movwf	calibration@mL^0,c
   587   00107E  0E2E               	movlw	low main@motorR
   588   001080  6E20               	movwf	calibration@mR^0,c
   589   001082  0E15               	movlw	21
   590   001084  6E21               	movwf	calibration@turnSpeed^0,c
   591   001086  0E2D               	movlw	low main@turnDuration
   592   001088  6E22               	movwf	calibration@turnDuration^0,c
   593   00108A  0E04               	movlw	4
   594   00108C  6E23               	movwf	calibration@turnRamp^0,c
   595   00108E  EC75  F00A         	call	_calibration	;wreg free
   596   001092                     l1768:
   597                           
   598                           ;main.c: 70:         turnLeft(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   599   001092  0E38               	movlw	low main@motorL
   600   001094  6E13               	movwf	turnLeft@mL^0,c
   601   001096  0E2E               	movlw	low main@motorR
   602   001098  6E14               	movwf	turnLeft@mR^0,c
   603   00109A  C02B  F015         	movff	main@turnSpeed,turnLeft@turnSpeed
   604   00109E  C02D  F016         	movff	main@turnDuration,turnLeft@turnDuration
   605   0010A2  C02C  F017         	movff	main@turnRamp,turnLeft@turnRamp
   606   0010A6  EC9A  F009         	call	_turnLeft	;wreg free
   607                           
   608                           ;main.c: 71:         _delay((unsigned long)((50)*(64000000/4000.0)));
   609   0010AA  0E05               	movlw	5
   610   0010AC  6E27               	movwf	(??_main+1)^0,c
   611   0010AE  0E0F               	movlw	15
   612   0010B0  6E26               	movwf	??_main^0,c
   613   0010B2  0EF1               	movlw	241
   614   0010B4                     u817:
   615   0010B4  2EE8               	decfsz	wreg,f,c
   616   0010B6  D7FE               	bra	u817
   617   0010B8  2E26               	decfsz	??_main^0,f,c
   618   0010BA  D7FC               	bra	u817
   619   0010BC  2E27               	decfsz	(??_main+1)^0,f,c
   620   0010BE  D7FA               	bra	u817
   621   0010C0  0000               	nop	
   622   0010C2                     
   623                           ;main.c: 72:         turnRight(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   624   0010C2  0E38               	movlw	low main@motorL
   625   0010C4  6E13               	movwf	turnRight@mL^0,c
   626   0010C6  0E2E               	movlw	low main@motorR
   627   0010C8  6E14               	movwf	turnRight@mR^0,c
   628   0010CA  C02B  F015         	movff	main@turnSpeed,turnRight@turnSpeed
   629   0010CE  C02D  F016         	movff	main@turnDuration,turnRight@turnDuration
   630   0010D2  C02C  F017         	movff	main@turnRamp,turnRight@turnRamp
   631   0010D6  ECBF  F008         	call	_turnRight	;wreg free
   632   0010DA                     
   633                           ;main.c: 73:         _delay((unsigned long)((50)*(64000000/4000.0)));
   634   0010DA  0E05               	movlw	5
   635   0010DC  6E27               	movwf	(??_main+1)^0,c
   636   0010DE  0E0F               	movlw	15
   637   0010E0  6E26               	movwf	??_main^0,c
   638   0010E2  0EF1               	movlw	241
   639   0010E4                     u827:
   640   0010E4  2EE8               	decfsz	wreg,f,c
   641   0010E6  D7FE               	bra	u827
   642   0010E8  2E26               	decfsz	??_main^0,f,c
   643   0010EA  D7FC               	bra	u827
   644   0010EC  2E27               	decfsz	(??_main+1)^0,f,c
   645   0010EE  D7FA               	bra	u827
   646   0010F0  0000               	nop	
   647                           
   648                           ;main.c: 74:         fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
   649   0010F2  0E38               	movlw	low main@motorL
   650   0010F4  6E13               	movwf	fullSpeedAhead@mL^0,c
   651   0010F6  0E2E               	movlw	low main@motorR
   652   0010F8  6E14               	movwf	fullSpeedAhead@mR^0,c
   653   0010FA  C029  F015         	movff	main@straightSpeed,fullSpeedAhead@straightSpeed
   654   0010FE  C02A  F016         	movff	main@straightRamp,fullSpeedAhead@straightRamp
   655   001102  EC4E  F00C         	call	_fullSpeedAhead	;wreg free
   656   001106                     
   657                           ;main.c: 75:         _delay((unsigned long)((50)*(64000000/4000.0)));
   658   001106  0E05               	movlw	5
   659   001108  6E27               	movwf	(??_main+1)^0,c
   660   00110A  0E0F               	movlw	15
   661   00110C  6E26               	movwf	??_main^0,c
   662   00110E  0EF1               	movlw	241
   663   001110                     u837:
   664   001110  2EE8               	decfsz	wreg,f,c
   665   001112  D7FE               	bra	u837
   666   001114  2E26               	decfsz	??_main^0,f,c
   667   001116  D7FC               	bra	u837
   668   001118  2E27               	decfsz	(??_main+1)^0,f,c
   669   00111A  D7FA               	bra	u837
   670   00111C  0000               	nop	
   671   00111E                     
   672                           ;main.c: 76:         stop(&motorL, &motorR, straightRamp);
   673   00111E  0E38               	movlw	low main@motorL
   674   001120  6E13               	movwf	stop@mL^0,c
   675   001122  0E2E               	movlw	low main@motorR
   676   001124  6E14               	movwf	stop@mR^0,c
   677   001126  C02A  F015         	movff	main@straightRamp,stop@straightRamp
   678   00112A  ECD7  F00B         	call	_stop	;wreg free
   679                           
   680                           ;main.c: 77:         _delay((unsigned long)((50)*(64000000/4000.0)));
   681   00112E  0E05               	movlw	5
   682   001130  6E27               	movwf	(??_main+1)^0,c
   683   001132  0E0F               	movlw	15
   684   001134  6E26               	movwf	??_main^0,c
   685   001136  0EF1               	movlw	241
   686   001138                     u847:
   687   001138  2EE8               	decfsz	wreg,f,c
   688   00113A  D7FE               	bra	u847
   689   00113C  2E26               	decfsz	??_main^0,f,c
   690   00113E  D7FC               	bra	u847
   691   001140  2E27               	decfsz	(??_main+1)^0,f,c
   692   001142  D7FA               	bra	u847
   693   001144  0000               	nop	
   694   001146                     
   695                           ;main.c: 78:         reverseOneSquare(&motorL, &motorR, straightSpeed, reverseDuration, 
      +                          straightRamp);
   696   001146  0E38               	movlw	low main@motorL
   697   001148  6E13               	movwf	reverseOneSquare@mL^0,c
   698   00114A  0E2E               	movlw	low main@motorR
   699   00114C  6E14               	movwf	reverseOneSquare@mR^0,c
   700   00114E  C029  F015         	movff	main@straightSpeed,reverseOneSquare@straightSpeed
   701   001152  C028  F016         	movff	main@reverseDuration,reverseOneSquare@reverseDuration
   702   001156  C02A  F017         	movff	main@straightRamp,reverseOneSquare@straightRamp
   703   00115A  EC01  F007         	call	_reverseOneSquare	;wreg free
   704   00115E                     
   705                           ;main.c: 79:         _delay((unsigned long)((50)*(64000000/4000.0)));
   706   00115E  0E05               	movlw	5
   707   001160  6E27               	movwf	(??_main+1)^0,c
   708   001162  0E0F               	movlw	15
   709   001164  6E26               	movwf	??_main^0,c
   710   001166  0EF1               	movlw	241
   711   001168                     u857:
   712   001168  2EE8               	decfsz	wreg,f,c
   713   00116A  D7FE               	bra	u857
   714   00116C  2E26               	decfsz	??_main^0,f,c
   715   00116E  D7FC               	bra	u857
   716   001170  2E27               	decfsz	(??_main+1)^0,f,c
   717   001172  D7FA               	bra	u857
   718   001174  0000               	nop	
   719   001176  EF49  F008         	goto	l1768
   720   00117A  EF00  F000         	goto	start
   721   00117E                     __end_of_main:
   722                           	callstack 0
   723                           
   724 ;; *************** function _stop *****************
   725 ;; Defined at:
   726 ;;		line 88 in file "dc_motor.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   729 ;;		 -> main@motorL(10), 
   730 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   731 ;;		 -> main@motorR(10), 
   732 ;;  straightRamp    1   20[COMRAM] unsigned char 
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  cur_power       2   26[COMRAM] int 
   735 ;;  i               2   24[COMRAM] int 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   745 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   746 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   747 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   748 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   749 ;;Total ram usage:       10 bytes
   750 ;; Hardware stack levels used: 1
   751 ;; Hardware stack levels required when called: 2
   752 ;; This function calls:
   753 ;;		_setMotorPWM
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text1
   760   0017AE                     __ptext1:
   761                           	callstack 0
   762   0017AE                     _stop:
   763                           	callstack 28
   764   0017AE                     
   765                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_mo
      +                          tor.c: 89: {;dc_motor.c: 90:     mL->direction = 1;
   766   0017AE  5013               	movf	stop@mL^0,w,c
   767   0017B0  6ED9               	movwf	fsr2l,c
   768   0017B2  6ADA               	clrf	fsr2h,c
   769   0017B4  0E01               	movlw	1
   770   0017B6  26D9               	addwf	fsr2l,f,c
   771   0017B8  0E01               	movlw	1
   772   0017BA  6EDF               	movwf	indf2,c
   773                           
   774                           ;dc_motor.c: 91:     mR->direction = 1;
   775   0017BC  5014               	movf	stop@mR^0,w,c
   776   0017BE  6ED9               	movwf	fsr2l,c
   777   0017C0  6ADA               	clrf	fsr2h,c
   778   0017C2  0E01               	movlw	1
   779   0017C4  26D9               	addwf	fsr2l,f,c
   780   0017C6  0E01               	movlw	1
   781   0017C8  6EDF               	movwf	indf2,c
   782                           
   783                           ;dc_motor.c: 92:     int i;;dc_motor.c: 93:     int cur_power;;dc_motor.c: 94:     for (
      +                          cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
   784   0017CA  5013               	movf	stop@mL^0,w,c
   785   0017CC  6ED9               	movwf	fsr2l,c
   786   0017CE  6ADA               	clrf	fsr2h,c
   787   0017D0  50DF               	movf	indf2,w,c
   788   0017D2  6E16               	movwf	??_stop^0,c
   789   0017D4  5013               	movf	stop@mL^0,w,c
   790   0017D6  6ED9               	movwf	fsr2l,c
   791   0017D8  6ADA               	clrf	fsr2h,c
   792   0017DA  0E09               	movlw	9
   793   0017DC  26D9               	addwf	fsr2l,f,c
   794   0017DE  50DF               	movf	indf2,w,c
   795   0017E0  6E17               	movwf	(??_stop+1)^0,c
   796   0017E2  5017               	movf	(??_stop+1)^0,w,c
   797   0017E4  5C16               	subwf	??_stop^0,w,c
   798   0017E6  6E1B               	movwf	stop@cur_power^0,c
   799   0017E8  6A1C               	clrf	(stop@cur_power+1)^0,c
   800   0017EA  A0D8               	btfss	status,0,c
   801   0017EC  061C               	decf	(stop@cur_power+1)^0,f,c
   802   0017EE                     l1632:
   803   0017EE  BE1C               	btfsc	(stop@cur_power+1)^0,7,c
   804   0017F0  EFFE  F00B         	goto	u720
   805   0017F4  EFFC  F00B         	goto	u721
   806   0017F8                     u721:
   807   0017F8  EF00  F00C         	goto	l1636
   808   0017FC                     u720:
   809   0017FC  EF45  F00C         	goto	l1652
   810   001800                     l1636:
   811                           
   812                           ;dc_motor.c: 95:         mL->power = cur_power+mL->compensation;
   813   001800  5013               	movf	stop@mL^0,w,c
   814   001802  6ED9               	movwf	fsr2l,c
   815   001804  6ADA               	clrf	fsr2h,c
   816   001806  5013               	movf	stop@mL^0,w,c
   817   001808  6EE1               	movwf	fsr1l,c
   818   00180A  6AE2               	clrf	fsr1h,c
   819   00180C  0E09               	movlw	9
   820   00180E  26E1               	addwf	fsr1l,f,c
   821   001810  50E7               	movf	indf1,w,c
   822   001812  241B               	addwf	stop@cur_power^0,w,c
   823   001814  6EDF               	movwf	indf2,c
   824                           
   825                           ;dc_motor.c: 96:         mR->power = cur_power+mR->compensation;
   826   001816  5014               	movf	stop@mR^0,w,c
   827   001818  6ED9               	movwf	fsr2l,c
   828   00181A  6ADA               	clrf	fsr2h,c
   829   00181C  5014               	movf	stop@mR^0,w,c
   830   00181E  6EE1               	movwf	fsr1l,c
   831   001820  6AE2               	clrf	fsr1h,c
   832   001822  0E09               	movlw	9
   833   001824  26E1               	addwf	fsr1l,f,c
   834   001826  50E7               	movf	indf1,w,c
   835   001828  241B               	addwf	stop@cur_power^0,w,c
   836   00182A  6EDF               	movwf	indf2,c
   837   00182C                     
   838                           ;dc_motor.c: 97:         setMotorPWM(mL);
   839   00182C  C013  F00E         	movff	stop@mL,setMotorPWM@m
   840   001830  EC2D  F00B         	call	_setMotorPWM	;wreg free
   841   001834                     
   842                           ;dc_motor.c: 98:         setMotorPWM(mR);
   843   001834  C014  F00E         	movff	stop@mR,setMotorPWM@m
   844   001838  EC2D  F00B         	call	_setMotorPWM	;wreg free
   845   00183C                     
   846                           ;dc_motor.c: 99:         for (i=0;i<straightRamp;i++) {
   847   00183C  0E00               	movlw	0
   848   00183E  6E1A               	movwf	(stop@i+1)^0,c
   849   001840  0E00               	movlw	0
   850   001842  6E19               	movwf	stop@i^0,c
   851   001844  EF2E  F00C         	goto	l120
   852   001848                     l1644:
   853                           
   854                           ;dc_motor.c: 100:             _delay((unsigned long)((5)*(64000000/4000.0)));
   855   001848  0E68               	movlw	104
   856   00184A  6E16               	movwf	??_stop^0,c
   857   00184C  0EE4               	movlw	228
   858   00184E                     u867:
   859   00184E  2EE8               	decfsz	wreg,f,c
   860   001850  D7FE               	bra	u867
   861   001852  2E16               	decfsz	??_stop^0,f,c
   862   001854  D7FC               	bra	u867
   863   001856  D000               	nop2	
   864   001858                     
   865                           ;dc_motor.c: 101:         }
   866   001858  4A19               	infsnz	stop@i^0,f,c
   867   00185A  2A1A               	incf	(stop@i+1)^0,f,c
   868   00185C                     l120:
   869   00185C  5015               	movf	stop@straightRamp^0,w,c
   870   00185E  6E16               	movwf	??_stop^0,c
   871   001860  6A17               	clrf	(??_stop+1)^0,c
   872   001862  5016               	movf	??_stop^0,w,c
   873   001864  5C19               	subwf	stop@i^0,w,c
   874   001866  501A               	movf	(stop@i+1)^0,w,c
   875   001868  0A80               	xorlw	128
   876   00186A  6E18               	movwf	(??_stop+2)^0,c
   877   00186C  5017               	movf	(??_stop+1)^0,w,c
   878   00186E  0A80               	xorlw	128
   879   001870  5818               	subwfb	(??_stop+2)^0,w,c
   880   001872  A0D8               	btfss	status,0,c
   881   001874  EF3E  F00C         	goto	u731
   882   001878  EF40  F00C         	goto	u730
   883   00187C                     u731:
   884   00187C  EF24  F00C         	goto	l1644
   885   001880                     u730:
   886   001880                     
   887                           ;dc_motor.c: 102:     }
   888   001880  061B               	decf	stop@cur_power^0,f,c
   889   001882  A0D8               	btfss	status,0,c
   890   001884  061C               	decf	(stop@cur_power+1)^0,f,c
   891   001886  EFF7  F00B         	goto	l1632
   892   00188A                     l1652:
   893                           
   894                           ;dc_motor.c: 103:     mL->power = 0;
   895   00188A  5013               	movf	stop@mL^0,w,c
   896   00188C  6ED9               	movwf	fsr2l,c
   897   00188E  6ADA               	clrf	fsr2h,c
   898   001890  6ADF               	clrf	indf2,c
   899                           
   900                           ;dc_motor.c: 104:     mR->power = 0;
   901   001892  5014               	movf	stop@mR^0,w,c
   902   001894  6ED9               	movwf	fsr2l,c
   903   001896  6ADA               	clrf	fsr2h,c
   904   001898  6ADF               	clrf	indf2,c
   905   00189A  0012               	return		;funcret
   906   00189C                     __end_of_stop:
   907                           	callstack 0
   908                           
   909 ;; *************** function _reverseOneSquare *****************
   910 ;; Defined at:
   911 ;;		line 189 in file "dc_motor.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   914 ;;		 -> main@motorL(10), 
   915 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   916 ;;		 -> main@motorR(10), 
   917 ;;  straightSpee    1   20[COMRAM] unsigned char 
   918 ;;  reverseDurat    1   21[COMRAM] unsigned char 
   919 ;;  straightRamp    1   22[COMRAM] unsigned char 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  cur_power       2   28[COMRAM] int 
   922 ;;  i               2   26[COMRAM] int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:       12 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 2
   939 ;; This function calls:
   940 ;;		_setMotorPWM
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947   000E02                     __ptext2:
   948                           	callstack 0
   949   000E02                     _reverseOneSquare:
   950                           	callstack 28
   951   000E02                     
   952                           ;dc_motor.c: 189: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 190: {;dc_motor.c
      +                          : 191:     mL->direction = 0;
   953   000E02  5013               	movf	reverseOneSquare@mL^0,w,c
   954   000E04  6ED9               	movwf	fsr2l,c
   955   000E06  6ADA               	clrf	fsr2h,c
   956   000E08  0E01               	movlw	1
   957   000E0A  26D9               	addwf	fsr2l,f,c
   958   000E0C  6ADF               	clrf	indf2,c
   959                           
   960                           ;dc_motor.c: 192:     mR->direction = 0;
   961   000E0E  5014               	movf	reverseOneSquare@mR^0,w,c
   962   000E10  6ED9               	movwf	fsr2l,c
   963   000E12  6ADA               	clrf	fsr2h,c
   964   000E14  0E01               	movlw	1
   965   000E16  26D9               	addwf	fsr2l,f,c
   966   000E18  6ADF               	clrf	indf2,c
   967   000E1A                     
   968                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     int cur_power;;dc_motor.c: 195:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
   969   000E1A  0E00               	movlw	0
   970   000E1C  6E1E               	movwf	(reverseOneSquare@cur_power+1)^0,c
   971   000E1E  0E01               	movlw	1
   972   000E20  6E1D               	movwf	reverseOneSquare@cur_power^0,c
   973   000E22  EF55  F007         	goto	l1672
   974   000E26                     l1658:
   975                           
   976                           ;dc_motor.c: 196:         mL->power = cur_power+mL->compensation;
   977   000E26  5013               	movf	reverseOneSquare@mL^0,w,c
   978   000E28  6ED9               	movwf	fsr2l,c
   979   000E2A  6ADA               	clrf	fsr2h,c
   980   000E2C  5013               	movf	reverseOneSquare@mL^0,w,c
   981   000E2E  6EE1               	movwf	fsr1l,c
   982   000E30  6AE2               	clrf	fsr1h,c
   983   000E32  0E09               	movlw	9
   984   000E34  26E1               	addwf	fsr1l,f,c
   985   000E36  50E7               	movf	indf1,w,c
   986   000E38  241D               	addwf	reverseOneSquare@cur_power^0,w,c
   987   000E3A  6EDF               	movwf	indf2,c
   988                           
   989                           ;dc_motor.c: 197:         mR->power = cur_power+mR->compensation;
   990   000E3C  5014               	movf	reverseOneSquare@mR^0,w,c
   991   000E3E  6ED9               	movwf	fsr2l,c
   992   000E40  6ADA               	clrf	fsr2h,c
   993   000E42  5014               	movf	reverseOneSquare@mR^0,w,c
   994   000E44  6EE1               	movwf	fsr1l,c
   995   000E46  6AE2               	clrf	fsr1h,c
   996   000E48  0E09               	movlw	9
   997   000E4A  26E1               	addwf	fsr1l,f,c
   998   000E4C  50E7               	movf	indf1,w,c
   999   000E4E  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1000   000E50  6EDF               	movwf	indf2,c
  1001   000E52                     
  1002                           ;dc_motor.c: 198:         setMotorPWM(mL);
  1003   000E52  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1004   000E56  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1005   000E5A                     
  1006                           ;dc_motor.c: 199:         setMotorPWM(mR);
  1007   000E5A  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1008   000E5E  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1009   000E62                     
  1010                           ;dc_motor.c: 200:         for (i=0;i<straightRamp;i++) {
  1011   000E62  0E00               	movlw	0
  1012   000E64  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1013   000E66  0E00               	movlw	0
  1014   000E68  6E1B               	movwf	reverseOneSquare@i^0,c
  1015   000E6A  EF41  F007         	goto	l171
  1016   000E6E                     l1666:
  1017                           
  1018                           ;dc_motor.c: 201:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1019   000E6E  0E68               	movlw	104
  1020   000E70  6E18               	movwf	??_reverseOneSquare^0,c
  1021   000E72  0EE4               	movlw	228
  1022   000E74                     u877:
  1023   000E74  2EE8               	decfsz	wreg,f,c
  1024   000E76  D7FE               	bra	u877
  1025   000E78  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1026   000E7A  D7FC               	bra	u877
  1027   000E7C  D000               	nop2	
  1028   000E7E                     
  1029                           ;dc_motor.c: 202:         }
  1030   000E7E  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1031   000E80  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1032   000E82                     l171:
  1033   000E82  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1034   000E84  6E18               	movwf	??_reverseOneSquare^0,c
  1035   000E86  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1036   000E88  5018               	movf	??_reverseOneSquare^0,w,c
  1037   000E8A  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1038   000E8C  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1039   000E8E  0A80               	xorlw	128
  1040   000E90  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1041   000E92  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1042   000E94  0A80               	xorlw	128
  1043   000E96  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1044   000E98  A0D8               	btfss	status,0,c
  1045   000E9A  EF51  F007         	goto	u741
  1046   000E9E  EF53  F007         	goto	u740
  1047   000EA2                     u741:
  1048   000EA2  EF37  F007         	goto	l1666
  1049   000EA6                     u740:
  1050   000EA6                     
  1051                           ;dc_motor.c: 203:     }
  1052   000EA6  4A1D               	infsnz	reverseOneSquare@cur_power^0,f,c
  1053   000EA8  2A1E               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  1054   000EAA                     l1672:
  1055   000EAA  5015               	movf	reverseOneSquare@straightSpeed^0,w,c
  1056   000EAC  6E18               	movwf	??_reverseOneSquare^0,c
  1057   000EAE  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1058   000EB0  501D               	movf	reverseOneSquare@cur_power^0,w,c
  1059   000EB2  5C18               	subwf	??_reverseOneSquare^0,w,c
  1060   000EB4  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1061   000EB6  0A80               	xorlw	128
  1062   000EB8  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1063   000EBA  501E               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  1064   000EBC  0A80               	xorlw	128
  1065   000EBE  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1066   000EC0  B0D8               	btfsc	status,0,c
  1067   000EC2  EF65  F007         	goto	u751
  1068   000EC6  EF67  F007         	goto	u750
  1069   000ECA                     u751:
  1070   000ECA  EF13  F007         	goto	l1658
  1071   000ECE                     u750:
  1072   000ECE                     
  1073                           ;dc_motor.c: 205:     for (i=0;i<reverseDuration;i++) {
  1074   000ECE  0E00               	movlw	0
  1075   000ED0  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1076   000ED2  0E00               	movlw	0
  1077   000ED4  6E1B               	movwf	reverseOneSquare@i^0,c
  1078   000ED6  EF77  F007         	goto	l175
  1079   000EDA                     l1676:
  1080                           
  1081                           ;dc_motor.c: 206:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1082   000EDA  0E68               	movlw	104
  1083   000EDC  6E18               	movwf	??_reverseOneSquare^0,c
  1084   000EDE  0EE4               	movlw	228
  1085   000EE0                     u887:
  1086   000EE0  2EE8               	decfsz	wreg,f,c
  1087   000EE2  D7FE               	bra	u887
  1088   000EE4  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1089   000EE6  D7FC               	bra	u887
  1090   000EE8  D000               	nop2	
  1091   000EEA                     
  1092                           ;dc_motor.c: 207:         }
  1093   000EEA  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1094   000EEC  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1095   000EEE                     l175:
  1096   000EEE  5016               	movf	reverseOneSquare@reverseDuration^0,w,c
  1097   000EF0  6E18               	movwf	??_reverseOneSquare^0,c
  1098   000EF2  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1099   000EF4  5018               	movf	??_reverseOneSquare^0,w,c
  1100   000EF6  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1101   000EF8  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1102   000EFA  0A80               	xorlw	128
  1103   000EFC  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1104   000EFE  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1105   000F00  0A80               	xorlw	128
  1106   000F02  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1107   000F04  A0D8               	btfss	status,0,c
  1108   000F06  EF87  F007         	goto	u761
  1109   000F0A  EF89  F007         	goto	u760
  1110   000F0E                     u761:
  1111   000F0E  EF6D  F007         	goto	l1676
  1112   000F12                     u760:
  1113   000F12                     
  1114                           ;dc_motor.c: 209:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  1115   000F12  C015  F01D         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  1116   000F16  6A1E               	clrf	(reverseOneSquare@cur_power+1)^0,c
  1117   000F18                     l1680:
  1118   000F18  BE1E               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  1119   000F1A  EF93  F007         	goto	u770
  1120   000F1E  EF91  F007         	goto	u771
  1121   000F22                     u771:
  1122   000F22  EF95  F007         	goto	l1684
  1123   000F26                     u770:
  1124   000F26  EFDA  F007         	goto	l1700
  1125   000F2A                     l1684:
  1126                           
  1127                           ;dc_motor.c: 210:         mL->power = cur_power+mL->compensation;
  1128   000F2A  5013               	movf	reverseOneSquare@mL^0,w,c
  1129   000F2C  6ED9               	movwf	fsr2l,c
  1130   000F2E  6ADA               	clrf	fsr2h,c
  1131   000F30  5013               	movf	reverseOneSquare@mL^0,w,c
  1132   000F32  6EE1               	movwf	fsr1l,c
  1133   000F34  6AE2               	clrf	fsr1h,c
  1134   000F36  0E09               	movlw	9
  1135   000F38  26E1               	addwf	fsr1l,f,c
  1136   000F3A  50E7               	movf	indf1,w,c
  1137   000F3C  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1138   000F3E  6EDF               	movwf	indf2,c
  1139                           
  1140                           ;dc_motor.c: 211:         mR->power = cur_power+mR->compensation;
  1141   000F40  5014               	movf	reverseOneSquare@mR^0,w,c
  1142   000F42  6ED9               	movwf	fsr2l,c
  1143   000F44  6ADA               	clrf	fsr2h,c
  1144   000F46  5014               	movf	reverseOneSquare@mR^0,w,c
  1145   000F48  6EE1               	movwf	fsr1l,c
  1146   000F4A  6AE2               	clrf	fsr1h,c
  1147   000F4C  0E09               	movlw	9
  1148   000F4E  26E1               	addwf	fsr1l,f,c
  1149   000F50  50E7               	movf	indf1,w,c
  1150   000F52  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1151   000F54  6EDF               	movwf	indf2,c
  1152   000F56                     
  1153                           ;dc_motor.c: 212:         setMotorPWM(mL);
  1154   000F56  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1155   000F5A  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1156   000F5E                     
  1157                           ;dc_motor.c: 213:         setMotorPWM(mR);
  1158   000F5E  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1159   000F62  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1160   000F66                     
  1161                           ;dc_motor.c: 214:         for (i=0;i<straightRamp;i++) {
  1162   000F66  0E00               	movlw	0
  1163   000F68  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1164   000F6A  0E00               	movlw	0
  1165   000F6C  6E1B               	movwf	reverseOneSquare@i^0,c
  1166   000F6E  EFC3  F007         	goto	l180
  1167   000F72                     l1692:
  1168                           
  1169                           ;dc_motor.c: 215:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1170   000F72  0E68               	movlw	104
  1171   000F74  6E18               	movwf	??_reverseOneSquare^0,c
  1172   000F76  0EE4               	movlw	228
  1173   000F78                     u897:
  1174   000F78  2EE8               	decfsz	wreg,f,c
  1175   000F7A  D7FE               	bra	u897
  1176   000F7C  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1177   000F7E  D7FC               	bra	u897
  1178   000F80  D000               	nop2	
  1179   000F82                     
  1180                           ;dc_motor.c: 216:         }
  1181   000F82  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1182   000F84  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1183   000F86                     l180:
  1184   000F86  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1185   000F88  6E18               	movwf	??_reverseOneSquare^0,c
  1186   000F8A  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1187   000F8C  5018               	movf	??_reverseOneSquare^0,w,c
  1188   000F8E  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1189   000F90  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1190   000F92  0A80               	xorlw	128
  1191   000F94  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1192   000F96  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1193   000F98  0A80               	xorlw	128
  1194   000F9A  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1195   000F9C  A0D8               	btfss	status,0,c
  1196   000F9E  EFD3  F007         	goto	u781
  1197   000FA2  EFD5  F007         	goto	u780
  1198   000FA6                     u781:
  1199   000FA6  EFB9  F007         	goto	l1692
  1200   000FAA                     u780:
  1201   000FAA                     
  1202                           ;dc_motor.c: 217:     }
  1203   000FAA  061D               	decf	reverseOneSquare@cur_power^0,f,c
  1204   000FAC  A0D8               	btfss	status,0,c
  1205   000FAE  061E               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  1206   000FB0  EF8C  F007         	goto	l1680
  1207   000FB4                     l1700:
  1208                           
  1209                           ;dc_motor.c: 218:     mL->power = 0;
  1210   000FB4  5013               	movf	reverseOneSquare@mL^0,w,c
  1211   000FB6  6ED9               	movwf	fsr2l,c
  1212   000FB8  6ADA               	clrf	fsr2h,c
  1213   000FBA  6ADF               	clrf	indf2,c
  1214                           
  1215                           ;dc_motor.c: 219:     mR->power = 0;
  1216   000FBC  5014               	movf	reverseOneSquare@mR^0,w,c
  1217   000FBE  6ED9               	movwf	fsr2l,c
  1218   000FC0  6ADA               	clrf	fsr2h,c
  1219   000FC2  6ADF               	clrf	indf2,c
  1220   000FC4  0012               	return		;funcret
  1221   000FC6                     __end_of_reverseOneSquare:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _initDCmotorsPWM *****************
  1225 ;; Defined at:
  1226 ;;		line 5 in file "dc_motor.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;Total ram usage:        2 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text3
  1254   001A32                     __ptext3:
  1255                           	callstack 0
  1256   001A32                     _initDCmotorsPWM:
  1257                           	callstack 30
  1258   001A32                     
  1259                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  1260   001A32  947D               	bcf	125,2,c	;volatile
  1261                           
  1262                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  1263   001A34  9485               	bcf	133,2,c	;volatile
  1264                           
  1265                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  1266   001A36  987D               	bcf	125,4,c	;volatile
  1267                           
  1268                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  1269   001A38  9885               	bcf	133,4,c	;volatile
  1270                           
  1271                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  1272   001A3A  9E7B               	bcf	123,7,c	;volatile
  1273                           
  1274                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  1275   001A3C  9E83               	bcf	131,7,c	;volatile
  1276                           
  1277                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  1278   001A3E  9C7F               	bcf	127,6,c	;volatile
  1279                           
  1280                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  1281   001A40  9C87               	bcf	135,6,c	;volatile
  1282   001A42                     
  1283                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1284   001A42  0E05               	movlw	5
  1285   001A44  010E               	movlb	14	; () banked
  1286   001A46  6F74               	movwf	116,b	;volatile
  1287                           
  1288                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1289   001A48  0E06               	movlw	6
  1290   001A4A  6F76               	movwf	118,b	;volatile
  1291                           
  1292                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1293   001A4C  0E07               	movlw	7
  1294   001A4E  6F69               	movwf	105,b	;volatile
  1295                           
  1296                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1297   001A50  0E08               	movlw	8
  1298   001A52  6F88               	movwf	136,b	;volatile
  1299                           
  1300                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  1301   001A54  50BD               	movf	189,w,c	;volatile
  1302   001A56  0B8F               	andlw	-113
  1303   001A58  0930               	iorlw	48
  1304   001A5A  6EBD               	movwf	189,c	;volatile
  1305                           
  1306                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1307   001A5C  0EE0               	movlw	-32
  1308   001A5E  16BE               	andwf	190,f,c	;volatile
  1309                           
  1310                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1311   001A60  50BF               	movf	191,w,c	;volatile
  1312   001A62  0BF0               	andlw	-16
  1313   001A64  0901               	iorlw	1
  1314   001A66  6EBF               	movwf	191,c	;volatile
  1315   001A68                     
  1316                           ; BSR set to: 14
  1317                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1318   001A68  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1319   001A6C                     
  1320                           ; BSR set to: 14
  1321                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1322   001A6C  8EBD               	bsf	189,7,c	;volatile
  1323                           
  1324                           ;dc_motor.c: 35:     CCPR1H=0;
  1325   001A6E  0E00               	movlw	0
  1326   001A70  6EAA               	movwf	170,c	;volatile
  1327                           
  1328                           ;dc_motor.c: 36:     CCPR2H=0;
  1329   001A72  0E00               	movlw	0
  1330   001A74  6EA6               	movwf	166,c	;volatile
  1331                           
  1332                           ;dc_motor.c: 37:     CCPR3H=0;
  1333   001A76  0E00               	movlw	0
  1334   001A78  010F               	movlb	15	; () banked
  1335   001A7A  6F25               	movwf	37,b	;volatile
  1336                           
  1337                           ;dc_motor.c: 38:     CCPR4H=0;
  1338   001A7C  0E00               	movlw	0
  1339   001A7E  6F21               	movwf	33,b	;volatile
  1340                           
  1341                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1342   001A80  0EFC               	movlw	-4
  1343   001A82  16AD               	andwf	173,f,c	;volatile
  1344                           
  1345                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1346   001A84  0EF3               	movlw	-13
  1347   001A86  16AD               	andwf	173,f,c	;volatile
  1348                           
  1349                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1350   001A88  0ECF               	movlw	-49
  1351   001A8A  16AD               	andwf	173,f,c	;volatile
  1352                           
  1353                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1354   001A8C  0E3F               	movlw	-193
  1355   001A8E  16AD               	andwf	173,f,c	;volatile
  1356   001A90                     
  1357                           ; BSR set to: 15
  1358                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1359   001A90  88AB               	bsf	171,4,c	;volatile
  1360                           
  1361                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1362   001A92  50AB               	movf	171,w,c	;volatile
  1363   001A94  0BF0               	andlw	-16
  1364   001A96  090C               	iorlw	12
  1365   001A98  6EAB               	movwf	171,c	;volatile
  1366   001A9A                     
  1367                           ; BSR set to: 15
  1368                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1369   001A9A  8EAB               	bsf	171,7,c	;volatile
  1370   001A9C                     
  1371                           ; BSR set to: 15
  1372                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1373   001A9C  88A7               	bsf	167,4,c	;volatile
  1374                           
  1375                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1376   001A9E  50A7               	movf	167,w,c	;volatile
  1377   001AA0  0BF0               	andlw	-16
  1378   001AA2  090C               	iorlw	12
  1379   001AA4  6EA7               	movwf	167,c	;volatile
  1380   001AA6                     
  1381                           ; BSR set to: 15
  1382                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1383   001AA6  8EA7               	bsf	167,7,c	;volatile
  1384   001AA8                     
  1385                           ; BSR set to: 15
  1386                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1387   001AA8  8926               	bsf	38,4,b	;volatile
  1388                           
  1389                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1390   001AAA  5126               	movf	38,w,b	;volatile
  1391   001AAC  0BF0               	andlw	-16
  1392   001AAE  090C               	iorlw	12
  1393   001AB0  6F26               	movwf	38,b	;volatile
  1394   001AB2                     
  1395                           ; BSR set to: 15
  1396                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1397   001AB2  8F26               	bsf	38,7,b	;volatile
  1398   001AB4                     
  1399                           ; BSR set to: 15
  1400                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1401   001AB4  8922               	bsf	34,4,b	;volatile
  1402                           
  1403                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1404   001AB6  5122               	movf	34,w,b	;volatile
  1405   001AB8  0BF0               	andlw	-16
  1406   001ABA  090C               	iorlw	12
  1407   001ABC  6F22               	movwf	34,b	;volatile
  1408   001ABE                     
  1409                           ; BSR set to: 15
  1410                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1411   001ABE  8F22               	bsf	34,7,b	;volatile
  1412   001AC0                     
  1413                           ; BSR set to: 15
  1414   001AC0  0012               	return		;funcret
  1415   001AC2                     __end_of_initDCmotorsPWM:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _fullSpeedAhead *****************
  1419 ;; Defined at:
  1420 ;;		line 172 in file "dc_motor.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1423 ;;		 -> main@motorL(10), 
  1424 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1425 ;;		 -> main@motorR(10), 
  1426 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1427 ;;  straightRamp    1   21[COMRAM] unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  cur_power       2   27[COMRAM] int 
  1430 ;;  i               2   25[COMRAM] int 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1440 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1441 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1442 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1443 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1444 ;;Total ram usage:       11 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; Hardware stack levels required when called: 2
  1447 ;; This function calls:
  1448 ;;		_setMotorPWM
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text4
  1455   00189C                     __ptext4:
  1456                           	callstack 0
  1457   00189C                     _fullSpeedAhead:
  1458                           	callstack 28
  1459   00189C                     
  1460                           ;dc_motor.c: 172: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 173: {;dc_motor.c: 174:     mL->direction = 1;
  1461   00189C  5013               	movf	fullSpeedAhead@mL^0,w,c
  1462   00189E  6ED9               	movwf	fsr2l,c
  1463   0018A0  6ADA               	clrf	fsr2h,c
  1464   0018A2  0E01               	movlw	1
  1465   0018A4  26D9               	addwf	fsr2l,f,c
  1466   0018A6  0E01               	movlw	1
  1467   0018A8  6EDF               	movwf	indf2,c
  1468                           
  1469                           ;dc_motor.c: 175:     mR->direction = 1;
  1470   0018AA  5014               	movf	fullSpeedAhead@mR^0,w,c
  1471   0018AC  6ED9               	movwf	fsr2l,c
  1472   0018AE  6ADA               	clrf	fsr2h,c
  1473   0018B0  0E01               	movlw	1
  1474   0018B2  26D9               	addwf	fsr2l,f,c
  1475   0018B4  0E01               	movlw	1
  1476   0018B6  6EDF               	movwf	indf2,c
  1477   0018B8                     
  1478                           ;dc_motor.c: 176:     int i;;dc_motor.c: 177:     int cur_power;;dc_motor.c: 178:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1479   0018B8  0E00               	movlw	0
  1480   0018BA  6E1D               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  1481   0018BC  0E01               	movlw	1
  1482   0018BE  6E1C               	movwf	fullSpeedAhead@cur_power^0,c
  1483   0018C0  EFA4  F00C         	goto	l1628
  1484   0018C4                     l1614:
  1485                           
  1486                           ;dc_motor.c: 179:         mL->power = cur_power+mL->compensation;
  1487   0018C4  5013               	movf	fullSpeedAhead@mL^0,w,c
  1488   0018C6  6ED9               	movwf	fsr2l,c
  1489   0018C8  6ADA               	clrf	fsr2h,c
  1490   0018CA  5013               	movf	fullSpeedAhead@mL^0,w,c
  1491   0018CC  6EE1               	movwf	fsr1l,c
  1492   0018CE  6AE2               	clrf	fsr1h,c
  1493   0018D0  0E09               	movlw	9
  1494   0018D2  26E1               	addwf	fsr1l,f,c
  1495   0018D4  50E7               	movf	indf1,w,c
  1496   0018D6  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1497   0018D8  6EDF               	movwf	indf2,c
  1498                           
  1499                           ;dc_motor.c: 180:         mR->power = cur_power+mR->compensation;
  1500   0018DA  5014               	movf	fullSpeedAhead@mR^0,w,c
  1501   0018DC  6ED9               	movwf	fsr2l,c
  1502   0018DE  6ADA               	clrf	fsr2h,c
  1503   0018E0  5014               	movf	fullSpeedAhead@mR^0,w,c
  1504   0018E2  6EE1               	movwf	fsr1l,c
  1505   0018E4  6AE2               	clrf	fsr1h,c
  1506   0018E6  0E09               	movlw	9
  1507   0018E8  26E1               	addwf	fsr1l,f,c
  1508   0018EA  50E7               	movf	indf1,w,c
  1509   0018EC  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1510   0018EE  6EDF               	movwf	indf2,c
  1511   0018F0                     
  1512                           ;dc_motor.c: 181:         setMotorPWM(mL);
  1513   0018F0  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1514   0018F4  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1515   0018F8                     
  1516                           ;dc_motor.c: 182:         setMotorPWM(mR);
  1517   0018F8  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1518   0018FC  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1519   001900                     
  1520                           ;dc_motor.c: 183:         for (i=0;i<straightRamp;i++) {
  1521   001900  0E00               	movlw	0
  1522   001902  6E1B               	movwf	(fullSpeedAhead@i+1)^0,c
  1523   001904  0E00               	movlw	0
  1524   001906  6E1A               	movwf	fullSpeedAhead@i^0,c
  1525   001908  EF90  F00C         	goto	l162
  1526   00190C                     l1622:
  1527                           
  1528                           ;dc_motor.c: 184:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1529   00190C  0E68               	movlw	104
  1530   00190E  6E17               	movwf	??_fullSpeedAhead^0,c
  1531   001910  0EE4               	movlw	228
  1532   001912                     u907:
  1533   001912  2EE8               	decfsz	wreg,f,c
  1534   001914  D7FE               	bra	u907
  1535   001916  2E17               	decfsz	??_fullSpeedAhead^0,f,c
  1536   001918  D7FC               	bra	u907
  1537   00191A  D000               	nop2	
  1538   00191C                     
  1539                           ;dc_motor.c: 185:         }
  1540   00191C  4A1A               	infsnz	fullSpeedAhead@i^0,f,c
  1541   00191E  2A1B               	incf	(fullSpeedAhead@i+1)^0,f,c
  1542   001920                     l162:
  1543   001920  5016               	movf	fullSpeedAhead@straightRamp^0,w,c
  1544   001922  6E17               	movwf	??_fullSpeedAhead^0,c
  1545   001924  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1546   001926  5017               	movf	??_fullSpeedAhead^0,w,c
  1547   001928  5C1A               	subwf	fullSpeedAhead@i^0,w,c
  1548   00192A  501B               	movf	(fullSpeedAhead@i+1)^0,w,c
  1549   00192C  0A80               	xorlw	128
  1550   00192E  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1551   001930  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1552   001932  0A80               	xorlw	128
  1553   001934  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1554   001936  A0D8               	btfss	status,0,c
  1555   001938  EFA0  F00C         	goto	u701
  1556   00193C  EFA2  F00C         	goto	u700
  1557   001940                     u701:
  1558   001940  EF86  F00C         	goto	l1622
  1559   001944                     u700:
  1560   001944                     
  1561                           ;dc_motor.c: 186:     }
  1562   001944  4A1C               	infsnz	fullSpeedAhead@cur_power^0,f,c
  1563   001946  2A1D               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  1564   001948                     l1628:
  1565   001948  5015               	movf	fullSpeedAhead@straightSpeed^0,w,c
  1566   00194A  6E17               	movwf	??_fullSpeedAhead^0,c
  1567   00194C  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1568   00194E  501C               	movf	fullSpeedAhead@cur_power^0,w,c
  1569   001950  5C17               	subwf	??_fullSpeedAhead^0,w,c
  1570   001952  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1571   001954  0A80               	xorlw	128
  1572   001956  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1573   001958  501D               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  1574   00195A  0A80               	xorlw	128
  1575   00195C  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1576   00195E  B0D8               	btfsc	status,0,c
  1577   001960  EFB4  F00C         	goto	u711
  1578   001964  EFB6  F00C         	goto	u710
  1579   001968                     u711:
  1580   001968  EF62  F00C         	goto	l1614
  1581   00196C                     u710:
  1582   00196C  0012               	return		;funcret
  1583   00196E                     __end_of_fullSpeedAhead:
  1584                           	callstack 0
  1585                           
  1586 ;; *************** function _calibration *****************
  1587 ;; Defined at:
  1588 ;;		line 222 in file "dc_motor.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  1591 ;;		 -> main@motorL(10), 
  1592 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  1593 ;;		 -> main@motorR(10), 
  1594 ;;  turnSpeed       1   32[COMRAM] unsigned char 
  1595 ;;  turnDuration    1   33[COMRAM] PTR unsigned char 
  1596 ;;		 -> main@turnDuration(1), 
  1597 ;;  turnRamp        1   34[COMRAM] unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1609 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1611 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;Total ram usage:        7 bytes
  1614 ;; Hardware stack levels used: 1
  1615 ;; Hardware stack levels required when called: 3
  1616 ;; This function calls:
  1617 ;;		_turnLeft
  1618 ;;		_turnRight
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text5
  1625   0014EA                     __ptext5:
  1626                           	callstack 0
  1627   0014EA                     _calibration:
  1628                           	callstack 27
  1629   0014EA                     l1568:
  1630                           
  1631                           ;dc_motor.c: 222: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 223: {;dc_motor.c: 225:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1632   0014EA  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1633   0014EE  C020  F014         	movff	calibration@mR,turnLeft@mR
  1634   0014F2  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1635   0014F6  5022               	movf	calibration@turnDuration^0,w,c
  1636   0014F8  6ED9               	movwf	fsr2l,c
  1637   0014FA  6ADA               	clrf	fsr2h,c
  1638   0014FC  50DF               	movf	indf2,w,c
  1639   0014FE  6E16               	movwf	turnLeft@turnDuration^0,c
  1640   001500  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1641   001504  EC9A  F009         	call	_turnLeft	;wreg free
  1642   001508                     
  1643                           ;dc_motor.c: 226:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1644   001508  0E05               	movlw	5
  1645   00150A  6E25               	movwf	(??_calibration+1)^0,c
  1646   00150C  0E0F               	movlw	15
  1647   00150E  6E24               	movwf	??_calibration^0,c
  1648   001510  0EF1               	movlw	241
  1649   001512                     u917:
  1650   001512  2EE8               	decfsz	wreg,f,c
  1651   001514  D7FE               	bra	u917
  1652   001516  2E24               	decfsz	??_calibration^0,f,c
  1653   001518  D7FC               	bra	u917
  1654   00151A  2E25               	decfsz	(??_calibration+1)^0,f,c
  1655   00151C  D7FA               	bra	u917
  1656   00151E  0000               	nop	
  1657   001520                     
  1658                           ;dc_motor.c: 227:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1659   001520  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1660   001524  C020  F014         	movff	calibration@mR,turnLeft@mR
  1661   001528  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1662   00152C  5022               	movf	calibration@turnDuration^0,w,c
  1663   00152E  6ED9               	movwf	fsr2l,c
  1664   001530  6ADA               	clrf	fsr2h,c
  1665   001532  50DF               	movf	indf2,w,c
  1666   001534  6E16               	movwf	turnLeft@turnDuration^0,c
  1667   001536  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1668   00153A  EC9A  F009         	call	_turnLeft	;wreg free
  1669                           
  1670                           ;dc_motor.c: 228:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1671   00153E  0E05               	movlw	5
  1672   001540  6E25               	movwf	(??_calibration+1)^0,c
  1673   001542  0E0F               	movlw	15
  1674   001544  6E24               	movwf	??_calibration^0,c
  1675   001546  0EF1               	movlw	241
  1676   001548                     u927:
  1677   001548  2EE8               	decfsz	wreg,f,c
  1678   00154A  D7FE               	bra	u927
  1679   00154C  2E24               	decfsz	??_calibration^0,f,c
  1680   00154E  D7FC               	bra	u927
  1681   001550  2E25               	decfsz	(??_calibration+1)^0,f,c
  1682   001552  D7FA               	bra	u927
  1683   001554  0000               	nop	
  1684   001556                     
  1685                           ;dc_motor.c: 229:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1686   001556  C01F  F013         	movff	calibration@mL,turnRight@mL
  1687   00155A  C020  F014         	movff	calibration@mR,turnRight@mR
  1688   00155E  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1689   001562  5022               	movf	calibration@turnDuration^0,w,c
  1690   001564  6ED9               	movwf	fsr2l,c
  1691   001566  6ADA               	clrf	fsr2h,c
  1692   001568  50DF               	movf	indf2,w,c
  1693   00156A  6E16               	movwf	turnRight@turnDuration^0,c
  1694   00156C  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1695   001570  ECBF  F008         	call	_turnRight	;wreg free
  1696   001574                     
  1697                           ;dc_motor.c: 230:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1698   001574  0E05               	movlw	5
  1699   001576  6E25               	movwf	(??_calibration+1)^0,c
  1700   001578  0E0F               	movlw	15
  1701   00157A  6E24               	movwf	??_calibration^0,c
  1702   00157C  0EF1               	movlw	241
  1703   00157E                     u937:
  1704   00157E  2EE8               	decfsz	wreg,f,c
  1705   001580  D7FE               	bra	u937
  1706   001582  2E24               	decfsz	??_calibration^0,f,c
  1707   001584  D7FC               	bra	u937
  1708   001586  2E25               	decfsz	(??_calibration+1)^0,f,c
  1709   001588  D7FA               	bra	u937
  1710   00158A  0000               	nop	
  1711                           
  1712                           ;dc_motor.c: 231:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1713   00158C  C01F  F013         	movff	calibration@mL,turnRight@mL
  1714   001590  C020  F014         	movff	calibration@mR,turnRight@mR
  1715   001594  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1716   001598  5022               	movf	calibration@turnDuration^0,w,c
  1717   00159A  6ED9               	movwf	fsr2l,c
  1718   00159C  6ADA               	clrf	fsr2h,c
  1719   00159E  50DF               	movf	indf2,w,c
  1720   0015A0  6E16               	movwf	turnRight@turnDuration^0,c
  1721   0015A2  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1722   0015A6  ECBF  F008         	call	_turnRight	;wreg free
  1723   0015AA                     l187:
  1724   0015AA  A48E               	btfss	142,2,c	;volatile
  1725   0015AC  EFDA  F00A         	goto	u641
  1726   0015B0  EFDC  F00A         	goto	u640
  1727   0015B4                     u641:
  1728   0015B4  EFE3  F00A         	goto	l191
  1729   0015B8                     u640:
  1730   0015B8  B68E               	btfsc	142,3,c	;volatile
  1731   0015BA  EFE1  F00A         	goto	u651
  1732   0015BE  EFE3  F00A         	goto	u650
  1733   0015C2                     u651:
  1734   0015C2  EFD5  F00A         	goto	l187
  1735   0015C6                     u650:
  1736   0015C6                     l191:
  1737                           
  1738                           ;dc_motor.c: 236:         if (!PORTFbits.RF2 && *turnDuration>0) {
  1739   0015C6  B48E               	btfsc	142,2,c	;volatile
  1740   0015C8  EFE8  F00A         	goto	u661
  1741   0015CC  EFEA  F00A         	goto	u660
  1742   0015D0                     u661:
  1743   0015D0  EFF9  F00A         	goto	l192
  1744   0015D4                     u660:
  1745   0015D4  5022               	movf	calibration@turnDuration^0,w,c
  1746   0015D6  6ED9               	movwf	fsr2l,c
  1747   0015D8  6ADA               	clrf	fsr2h,c
  1748   0015DA  50DF               	movf	indf2,w,c
  1749   0015DC  B4D8               	btfsc	status,2,c
  1750   0015DE  EFF3  F00A         	goto	u671
  1751   0015E2  EFF5  F00A         	goto	u670
  1752   0015E6                     u671:
  1753   0015E6  EFF9  F00A         	goto	l192
  1754   0015EA                     u670:
  1755   0015EA                     
  1756                           ;dc_motor.c: 237:             *turnDuration--;
  1757   0015EA  0622               	decf	calibration@turnDuration^0,f,c
  1758   0015EC                     
  1759                           ;dc_motor.c: 238:             LATDbits.LATD7 = 1;
  1760   0015EC  8E7C               	bsf	124,7,c	;volatile
  1761                           
  1762                           ;dc_motor.c: 239:         }
  1763   0015EE  EF02  F00B         	goto	l1590
  1764   0015F2                     l192:
  1765   0015F2  B68E               	btfsc	142,3,c	;volatile
  1766   0015F4  EFFE  F00A         	goto	u681
  1767   0015F8  EF00  F00B         	goto	u680
  1768   0015FC                     u681:
  1769   0015FC  EF02  F00B         	goto	l1590
  1770   001600                     u680:
  1771   001600                     
  1772                           ;dc_motor.c: 242:             *turnDuration++;
  1773   001600  2A22               	incf	calibration@turnDuration^0,f,c
  1774   001602                     
  1775                           ;dc_motor.c: 243:             LATHbits.LATH3 = 1;
  1776   001602  8680               	bsf	128,3,c	;volatile
  1777   001604                     l1590:
  1778                           
  1779                           ;dc_motor.c: 246:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1780   001604  0E29               	movlw	41
  1781   001606  6E25               	movwf	(??_calibration+1)^0,c
  1782   001608  0E96               	movlw	150
  1783   00160A  6E24               	movwf	??_calibration^0,c
  1784   00160C  0E7F               	movlw	127
  1785   00160E                     u947:
  1786   00160E  2EE8               	decfsz	wreg,f,c
  1787   001610  D7FE               	bra	u947
  1788   001612  2E24               	decfsz	??_calibration^0,f,c
  1789   001614  D7FC               	bra	u947
  1790   001616  2E25               	decfsz	(??_calibration+1)^0,f,c
  1791   001618  D7FA               	bra	u947
  1792   00161A  0000               	nop	
  1793   00161C                     
  1794                           ;dc_motor.c: 248:         if (!PORTFbits.RF3) {
  1795   00161C  B68E               	btfsc	142,3,c	;volatile
  1796   00161E  EF13  F00B         	goto	u691
  1797   001622  EF15  F00B         	goto	u690
  1798   001626                     u691:
  1799   001626  EF18  F00B         	goto	l195
  1800   00162A                     u690:
  1801   00162A                     
  1802                           ;dc_motor.c: 249:             *turnDuration--;
  1803   00162A  0622               	decf	calibration@turnDuration^0,f,c
  1804                           
  1805                           ;dc_motor.c: 250:             break;
  1806   00162C  EF1C  F00B         	goto	l196
  1807   001630                     l195:
  1808                           
  1809                           ;dc_motor.c: 253:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1810   001630  9680               	bcf	128,3,c	;volatile
  1811   001632  9E7C               	bcf	124,7,c	;volatile
  1812   001634  EF75  F00A         	goto	l1568
  1813   001638                     l196:
  1814                           
  1815                           ;dc_motor.c: 267:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1816   001638  8680               	bsf	128,3,c	;volatile
  1817   00163A  8E7C               	bsf	124,7,c	;volatile
  1818   00163C                     
  1819                           ;dc_motor.c: 268:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1820   00163C  0E09               	movlw	9
  1821   00163E  6E25               	movwf	(??_calibration+1)^0,c
  1822   001640  0E1E               	movlw	30
  1823   001642  6E24               	movwf	??_calibration^0,c
  1824   001644  0EE4               	movlw	228
  1825   001646                     u957:
  1826   001646  2EE8               	decfsz	wreg,f,c
  1827   001648  D7FE               	bra	u957
  1828   00164A  2E24               	decfsz	??_calibration^0,f,c
  1829   00164C  D7FC               	bra	u957
  1830   00164E  2E25               	decfsz	(??_calibration+1)^0,f,c
  1831   001650  D7FA               	bra	u957
  1832   001652  D000               	nop2	
  1833   001654                     
  1834                           ;dc_motor.c: 269:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1835   001654  9680               	bcf	128,3,c	;volatile
  1836   001656  9E7C               	bcf	124,7,c	;volatile
  1837   001658  0012               	return		;funcret
  1838   00165A                     __end_of_calibration:
  1839                           	callstack 0
  1840                           
  1841 ;; *************** function _turnRight *****************
  1842 ;; Defined at:
  1843 ;;		line 140 in file "dc_motor.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1846 ;;		 -> main@motorL(10), 
  1847 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1848 ;;		 -> main@motorR(10), 
  1849 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  1850 ;;  turnDuration    1   21[COMRAM] unsigned char 
  1851 ;;  turnRamp        1   22[COMRAM] unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  cur_power       2   28[COMRAM] int 
  1854 ;;  i               2   26[COMRAM] int 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1864 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1865 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1866 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1867 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;Total ram usage:       12 bytes
  1869 ;; Hardware stack levels used: 1
  1870 ;; Hardware stack levels required when called: 2
  1871 ;; This function calls:
  1872 ;;		_setMotorPWM
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;;		_calibration
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text6
  1880   00117E                     __ptext6:
  1881                           	callstack 0
  1882   00117E                     _turnRight:
  1883                           	callstack 28
  1884   00117E                     
  1885                           ;dc_motor.c: 140: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 141: {;dc_motor.c: 142:     mL->dir
      +                          ection = 1;
  1886   00117E  5013               	movf	turnRight@mL^0,w,c
  1887   001180  6ED9               	movwf	fsr2l,c
  1888   001182  6ADA               	clrf	fsr2h,c
  1889   001184  0E01               	movlw	1
  1890   001186  26D9               	addwf	fsr2l,f,c
  1891   001188  0E01               	movlw	1
  1892   00118A  6EDF               	movwf	indf2,c
  1893                           
  1894                           ;dc_motor.c: 143:     mR->direction = 0;
  1895   00118C  5014               	movf	turnRight@mR^0,w,c
  1896   00118E  6ED9               	movwf	fsr2l,c
  1897   001190  6ADA               	clrf	fsr2h,c
  1898   001192  0E01               	movlw	1
  1899   001194  26D9               	addwf	fsr2l,f,c
  1900   001196  6ADF               	clrf	indf2,c
  1901   001198                     
  1902                           ;dc_motor.c: 144:     int i;;dc_motor.c: 145:     int cur_power;;dc_motor.c: 146:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1903   001198  0E00               	movlw	0
  1904   00119A  6E1E               	movwf	(turnRight@cur_power+1)^0,c
  1905   00119C  0E01               	movlw	1
  1906   00119E  6E1D               	movwf	turnRight@cur_power^0,c
  1907   0011A0  EF14  F009         	goto	l1462
  1908   0011A4                     l1448:
  1909                           
  1910                           ;dc_motor.c: 147:         mL->power = cur_power+mL->compensation;
  1911   0011A4  5013               	movf	turnRight@mL^0,w,c
  1912   0011A6  6ED9               	movwf	fsr2l,c
  1913   0011A8  6ADA               	clrf	fsr2h,c
  1914   0011AA  5013               	movf	turnRight@mL^0,w,c
  1915   0011AC  6EE1               	movwf	fsr1l,c
  1916   0011AE  6AE2               	clrf	fsr1h,c
  1917   0011B0  0E09               	movlw	9
  1918   0011B2  26E1               	addwf	fsr1l,f,c
  1919   0011B4  50E7               	movf	indf1,w,c
  1920   0011B6  241D               	addwf	turnRight@cur_power^0,w,c
  1921   0011B8  6EDF               	movwf	indf2,c
  1922                           
  1923                           ;dc_motor.c: 148:         mR->power = cur_power+mR->compensation;
  1924   0011BA  5014               	movf	turnRight@mR^0,w,c
  1925   0011BC  6ED9               	movwf	fsr2l,c
  1926   0011BE  6ADA               	clrf	fsr2h,c
  1927   0011C0  5014               	movf	turnRight@mR^0,w,c
  1928   0011C2  6EE1               	movwf	fsr1l,c
  1929   0011C4  6AE2               	clrf	fsr1h,c
  1930   0011C6  0E09               	movlw	9
  1931   0011C8  26E1               	addwf	fsr1l,f,c
  1932   0011CA  50E7               	movf	indf1,w,c
  1933   0011CC  241D               	addwf	turnRight@cur_power^0,w,c
  1934   0011CE  6EDF               	movwf	indf2,c
  1935   0011D0                     
  1936                           ;dc_motor.c: 149:         setMotorPWM(mL);
  1937   0011D0  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  1938   0011D4  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1939   0011D8                     
  1940                           ;dc_motor.c: 150:         setMotorPWM(mR);
  1941   0011D8  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  1942   0011DC  EC2D  F00B         	call	_setMotorPWM	;wreg free
  1943   0011E0                     
  1944                           ;dc_motor.c: 151:         for (i=0;i<turnRamp;i++) {
  1945   0011E0  0E00               	movlw	0
  1946   0011E2  6E1C               	movwf	(turnRight@i+1)^0,c
  1947   0011E4  0E00               	movlw	0
  1948   0011E6  6E1B               	movwf	turnRight@i^0,c
  1949   0011E8  EF00  F009         	goto	l145
  1950   0011EC                     l1456:
  1951                           
  1952                           ;dc_motor.c: 152:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1953   0011EC  0E68               	movlw	104
  1954   0011EE  6E18               	movwf	??_turnRight^0,c
  1955   0011F0  0EE4               	movlw	228
  1956   0011F2                     u967:
  1957   0011F2  2EE8               	decfsz	wreg,f,c
  1958   0011F4  D7FE               	bra	u967
  1959   0011F6  2E18               	decfsz	??_turnRight^0,f,c
  1960   0011F8  D7FC               	bra	u967
  1961   0011FA  D000               	nop2	
  1962   0011FC                     
  1963                           ;dc_motor.c: 153:         }
  1964   0011FC  4A1B               	infsnz	turnRight@i^0,f,c
  1965   0011FE  2A1C               	incf	(turnRight@i+1)^0,f,c
  1966   001200                     l145:
  1967   001200  5017               	movf	turnRight@turnRamp^0,w,c
  1968   001202  6E18               	movwf	??_turnRight^0,c
  1969   001204  6A19               	clrf	(??_turnRight+1)^0,c
  1970   001206  5018               	movf	??_turnRight^0,w,c
  1971   001208  5C1B               	subwf	turnRight@i^0,w,c
  1972   00120A  501C               	movf	(turnRight@i+1)^0,w,c
  1973   00120C  0A80               	xorlw	128
  1974   00120E  6E1A               	movwf	(??_turnRight+2)^0,c
  1975   001210  5019               	movf	(??_turnRight+1)^0,w,c
  1976   001212  0A80               	xorlw	128
  1977   001214  581A               	subwfb	(??_turnRight+2)^0,w,c
  1978   001216  A0D8               	btfss	status,0,c
  1979   001218  EF10  F009         	goto	u511
  1980   00121C  EF12  F009         	goto	u510
  1981   001220                     u511:
  1982   001220  EFF6  F008         	goto	l1456
  1983   001224                     u510:
  1984   001224                     
  1985                           ;dc_motor.c: 154:     }
  1986   001224  4A1D               	infsnz	turnRight@cur_power^0,f,c
  1987   001226  2A1E               	incf	(turnRight@cur_power+1)^0,f,c
  1988   001228                     l1462:
  1989   001228  5015               	movf	turnRight@turnSpeed^0,w,c
  1990   00122A  6E18               	movwf	??_turnRight^0,c
  1991   00122C  6A19               	clrf	(??_turnRight+1)^0,c
  1992   00122E  501D               	movf	turnRight@cur_power^0,w,c
  1993   001230  5C18               	subwf	??_turnRight^0,w,c
  1994   001232  5019               	movf	(??_turnRight+1)^0,w,c
  1995   001234  0A80               	xorlw	128
  1996   001236  6E1A               	movwf	(??_turnRight+2)^0,c
  1997   001238  501E               	movf	(turnRight@cur_power+1)^0,w,c
  1998   00123A  0A80               	xorlw	128
  1999   00123C  581A               	subwfb	(??_turnRight+2)^0,w,c
  2000   00123E  B0D8               	btfsc	status,0,c
  2001   001240  EF24  F009         	goto	u521
  2002   001244  EF26  F009         	goto	u520
  2003   001248                     u521:
  2004   001248  EFD2  F008         	goto	l1448
  2005   00124C                     u520:
  2006   00124C                     
  2007                           ;dc_motor.c: 156:     for (i=0;i<turnDuration;i++) {
  2008   00124C  0E00               	movlw	0
  2009   00124E  6E1C               	movwf	(turnRight@i+1)^0,c
  2010   001250  0E00               	movlw	0
  2011   001252  6E1B               	movwf	turnRight@i^0,c
  2012   001254  EF36  F009         	goto	l149
  2013   001258                     l1466:
  2014                           
  2015                           ;dc_motor.c: 157:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2016   001258  0E68               	movlw	104
  2017   00125A  6E18               	movwf	??_turnRight^0,c
  2018   00125C  0EE4               	movlw	228
  2019   00125E                     u977:
  2020   00125E  2EE8               	decfsz	wreg,f,c
  2021   001260  D7FE               	bra	u977
  2022   001262  2E18               	decfsz	??_turnRight^0,f,c
  2023   001264  D7FC               	bra	u977
  2024   001266  D000               	nop2	
  2025   001268                     
  2026                           ;dc_motor.c: 158:         }
  2027   001268  4A1B               	infsnz	turnRight@i^0,f,c
  2028   00126A  2A1C               	incf	(turnRight@i+1)^0,f,c
  2029   00126C                     l149:
  2030   00126C  5016               	movf	turnRight@turnDuration^0,w,c
  2031   00126E  6E18               	movwf	??_turnRight^0,c
  2032   001270  6A19               	clrf	(??_turnRight+1)^0,c
  2033   001272  5018               	movf	??_turnRight^0,w,c
  2034   001274  5C1B               	subwf	turnRight@i^0,w,c
  2035   001276  501C               	movf	(turnRight@i+1)^0,w,c
  2036   001278  0A80               	xorlw	128
  2037   00127A  6E1A               	movwf	(??_turnRight+2)^0,c
  2038   00127C  5019               	movf	(??_turnRight+1)^0,w,c
  2039   00127E  0A80               	xorlw	128
  2040   001280  581A               	subwfb	(??_turnRight+2)^0,w,c
  2041   001282  A0D8               	btfss	status,0,c
  2042   001284  EF46  F009         	goto	u531
  2043   001288  EF48  F009         	goto	u530
  2044   00128C                     u531:
  2045   00128C  EF2C  F009         	goto	l1466
  2046   001290                     u530:
  2047   001290                     
  2048                           ;dc_motor.c: 160:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2049   001290  C015  F01D         	movff	turnRight@turnSpeed,turnRight@cur_power
  2050   001294  6A1E               	clrf	(turnRight@cur_power+1)^0,c
  2051   001296                     l1470:
  2052   001296  BE1E               	btfsc	(turnRight@cur_power+1)^0,7,c
  2053   001298  EF52  F009         	goto	u540
  2054   00129C  EF50  F009         	goto	u541
  2055   0012A0                     u541:
  2056   0012A0  EF54  F009         	goto	l1474
  2057   0012A4                     u540:
  2058   0012A4  EF99  F009         	goto	l157
  2059   0012A8                     l1474:
  2060                           
  2061                           ;dc_motor.c: 161:         mL->power = cur_power+mL->compensation;
  2062   0012A8  5013               	movf	turnRight@mL^0,w,c
  2063   0012AA  6ED9               	movwf	fsr2l,c
  2064   0012AC  6ADA               	clrf	fsr2h,c
  2065   0012AE  5013               	movf	turnRight@mL^0,w,c
  2066   0012B0  6EE1               	movwf	fsr1l,c
  2067   0012B2  6AE2               	clrf	fsr1h,c
  2068   0012B4  0E09               	movlw	9
  2069   0012B6  26E1               	addwf	fsr1l,f,c
  2070   0012B8  50E7               	movf	indf1,w,c
  2071   0012BA  241D               	addwf	turnRight@cur_power^0,w,c
  2072   0012BC  6EDF               	movwf	indf2,c
  2073                           
  2074                           ;dc_motor.c: 162:         mR->power = cur_power+mR->compensation;
  2075   0012BE  5014               	movf	turnRight@mR^0,w,c
  2076   0012C0  6ED9               	movwf	fsr2l,c
  2077   0012C2  6ADA               	clrf	fsr2h,c
  2078   0012C4  5014               	movf	turnRight@mR^0,w,c
  2079   0012C6  6EE1               	movwf	fsr1l,c
  2080   0012C8  6AE2               	clrf	fsr1h,c
  2081   0012CA  0E09               	movlw	9
  2082   0012CC  26E1               	addwf	fsr1l,f,c
  2083   0012CE  50E7               	movf	indf1,w,c
  2084   0012D0  241D               	addwf	turnRight@cur_power^0,w,c
  2085   0012D2  6EDF               	movwf	indf2,c
  2086   0012D4                     
  2087                           ;dc_motor.c: 163:         setMotorPWM(mL);
  2088   0012D4  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  2089   0012D8  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2090   0012DC                     
  2091                           ;dc_motor.c: 164:         setMotorPWM(mR);
  2092   0012DC  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  2093   0012E0  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2094   0012E4                     
  2095                           ;dc_motor.c: 165:         for (i=0;i<turnRamp;i++) {
  2096   0012E4  0E00               	movlw	0
  2097   0012E6  6E1C               	movwf	(turnRight@i+1)^0,c
  2098   0012E8  0E00               	movlw	0
  2099   0012EA  6E1B               	movwf	turnRight@i^0,c
  2100   0012EC  EF82  F009         	goto	l154
  2101   0012F0                     l1482:
  2102                           
  2103                           ;dc_motor.c: 166:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2104   0012F0  0E68               	movlw	104
  2105   0012F2  6E18               	movwf	??_turnRight^0,c
  2106   0012F4  0EE4               	movlw	228
  2107   0012F6                     u987:
  2108   0012F6  2EE8               	decfsz	wreg,f,c
  2109   0012F8  D7FE               	bra	u987
  2110   0012FA  2E18               	decfsz	??_turnRight^0,f,c
  2111   0012FC  D7FC               	bra	u987
  2112   0012FE  D000               	nop2	
  2113   001300                     
  2114                           ;dc_motor.c: 167:         }
  2115   001300  4A1B               	infsnz	turnRight@i^0,f,c
  2116   001302  2A1C               	incf	(turnRight@i+1)^0,f,c
  2117   001304                     l154:
  2118   001304  5017               	movf	turnRight@turnRamp^0,w,c
  2119   001306  6E18               	movwf	??_turnRight^0,c
  2120   001308  6A19               	clrf	(??_turnRight+1)^0,c
  2121   00130A  5018               	movf	??_turnRight^0,w,c
  2122   00130C  5C1B               	subwf	turnRight@i^0,w,c
  2123   00130E  501C               	movf	(turnRight@i+1)^0,w,c
  2124   001310  0A80               	xorlw	128
  2125   001312  6E1A               	movwf	(??_turnRight+2)^0,c
  2126   001314  5019               	movf	(??_turnRight+1)^0,w,c
  2127   001316  0A80               	xorlw	128
  2128   001318  581A               	subwfb	(??_turnRight+2)^0,w,c
  2129   00131A  A0D8               	btfss	status,0,c
  2130   00131C  EF92  F009         	goto	u551
  2131   001320  EF94  F009         	goto	u550
  2132   001324                     u551:
  2133   001324  EF78  F009         	goto	l1482
  2134   001328                     u550:
  2135   001328                     
  2136                           ;dc_motor.c: 168:     }
  2137   001328  061D               	decf	turnRight@cur_power^0,f,c
  2138   00132A  A0D8               	btfss	status,0,c
  2139   00132C  061E               	decf	(turnRight@cur_power+1)^0,f,c
  2140   00132E  EF4B  F009         	goto	l1470
  2141   001332                     l157:
  2142   001332  0012               	return		;funcret
  2143   001334                     __end_of_turnRight:
  2144                           	callstack 0
  2145                           
  2146 ;; *************** function _turnLeft *****************
  2147 ;; Defined at:
  2148 ;;		line 108 in file "dc_motor.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2151 ;;		 -> main@motorL(10), 
  2152 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2153 ;;		 -> main@motorR(10), 
  2154 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  2155 ;;  turnDuration    1   21[COMRAM] unsigned char 
  2156 ;;  turnRamp        1   22[COMRAM] unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  cur_power       2   28[COMRAM] int 
  2159 ;;  i               2   26[COMRAM] int 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2169 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;Total ram usage:       12 bytes
  2174 ;; Hardware stack levels used: 1
  2175 ;; Hardware stack levels required when called: 2
  2176 ;; This function calls:
  2177 ;;		_setMotorPWM
  2178 ;; This function is called by:
  2179 ;;		_main
  2180 ;;		_calibration
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text7
  2185   001334                     __ptext7:
  2186                           	callstack 0
  2187   001334                     _turnLeft:
  2188                           	callstack 28
  2189   001334                     
  2190                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 109: {;dc_motor.c: 110:     mL->dire
      +                          ction = 0;
  2191   001334  5013               	movf	turnLeft@mL^0,w,c
  2192   001336  6ED9               	movwf	fsr2l,c
  2193   001338  6ADA               	clrf	fsr2h,c
  2194   00133A  0E01               	movlw	1
  2195   00133C  26D9               	addwf	fsr2l,f,c
  2196   00133E  6ADF               	clrf	indf2,c
  2197                           
  2198                           ;dc_motor.c: 111:     mR->direction = 1;
  2199   001340  5014               	movf	turnLeft@mR^0,w,c
  2200   001342  6ED9               	movwf	fsr2l,c
  2201   001344  6ADA               	clrf	fsr2h,c
  2202   001346  0E01               	movlw	1
  2203   001348  26D9               	addwf	fsr2l,f,c
  2204   00134A  0E01               	movlw	1
  2205   00134C  6EDF               	movwf	indf2,c
  2206   00134E                     
  2207                           ;dc_motor.c: 112:     int i;;dc_motor.c: 113:     int cur_power;;dc_motor.c: 114:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2208   00134E  0E00               	movlw	0
  2209   001350  6E1E               	movwf	(turnLeft@cur_power+1)^0,c
  2210   001352  0E01               	movlw	1
  2211   001354  6E1D               	movwf	turnLeft@cur_power^0,c
  2212   001356  EFEF  F009         	goto	l1416
  2213   00135A                     l1402:
  2214                           
  2215                           ;dc_motor.c: 115:         mL->power = cur_power+mL->compensation;
  2216   00135A  5013               	movf	turnLeft@mL^0,w,c
  2217   00135C  6ED9               	movwf	fsr2l,c
  2218   00135E  6ADA               	clrf	fsr2h,c
  2219   001360  5013               	movf	turnLeft@mL^0,w,c
  2220   001362  6EE1               	movwf	fsr1l,c
  2221   001364  6AE2               	clrf	fsr1h,c
  2222   001366  0E09               	movlw	9
  2223   001368  26E1               	addwf	fsr1l,f,c
  2224   00136A  50E7               	movf	indf1,w,c
  2225   00136C  241D               	addwf	turnLeft@cur_power^0,w,c
  2226   00136E  6EDF               	movwf	indf2,c
  2227                           
  2228                           ;dc_motor.c: 116:         mR->power = cur_power+mR->compensation;
  2229   001370  5014               	movf	turnLeft@mR^0,w,c
  2230   001372  6ED9               	movwf	fsr2l,c
  2231   001374  6ADA               	clrf	fsr2h,c
  2232   001376  5014               	movf	turnLeft@mR^0,w,c
  2233   001378  6EE1               	movwf	fsr1l,c
  2234   00137A  6AE2               	clrf	fsr1h,c
  2235   00137C  0E09               	movlw	9
  2236   00137E  26E1               	addwf	fsr1l,f,c
  2237   001380  50E7               	movf	indf1,w,c
  2238   001382  241D               	addwf	turnLeft@cur_power^0,w,c
  2239   001384  6EDF               	movwf	indf2,c
  2240   001386                     
  2241                           ;dc_motor.c: 117:         setMotorPWM(mL);
  2242   001386  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2243   00138A  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2244   00138E                     
  2245                           ;dc_motor.c: 118:         setMotorPWM(mR);
  2246   00138E  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2247   001392  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2248   001396                     
  2249                           ;dc_motor.c: 119:         for (i=0;i<turnRamp;i++) {
  2250   001396  0E00               	movlw	0
  2251   001398  6E1C               	movwf	(turnLeft@i+1)^0,c
  2252   00139A  0E00               	movlw	0
  2253   00139C  6E1B               	movwf	turnLeft@i^0,c
  2254   00139E  EFDB  F009         	goto	l128
  2255   0013A2                     l1410:
  2256                           
  2257                           ;dc_motor.c: 120:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2258   0013A2  0E68               	movlw	104
  2259   0013A4  6E18               	movwf	??_turnLeft^0,c
  2260   0013A6  0EE4               	movlw	228
  2261   0013A8                     u997:
  2262   0013A8  2EE8               	decfsz	wreg,f,c
  2263   0013AA  D7FE               	bra	u997
  2264   0013AC  2E18               	decfsz	??_turnLeft^0,f,c
  2265   0013AE  D7FC               	bra	u997
  2266   0013B0  D000               	nop2	
  2267   0013B2                     
  2268                           ;dc_motor.c: 121:         }
  2269   0013B2  4A1B               	infsnz	turnLeft@i^0,f,c
  2270   0013B4  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2271   0013B6                     l128:
  2272   0013B6  5017               	movf	turnLeft@turnRamp^0,w,c
  2273   0013B8  6E18               	movwf	??_turnLeft^0,c
  2274   0013BA  6A19               	clrf	(??_turnLeft+1)^0,c
  2275   0013BC  5018               	movf	??_turnLeft^0,w,c
  2276   0013BE  5C1B               	subwf	turnLeft@i^0,w,c
  2277   0013C0  501C               	movf	(turnLeft@i+1)^0,w,c
  2278   0013C2  0A80               	xorlw	128
  2279   0013C4  6E1A               	movwf	(??_turnLeft+2)^0,c
  2280   0013C6  5019               	movf	(??_turnLeft+1)^0,w,c
  2281   0013C8  0A80               	xorlw	128
  2282   0013CA  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2283   0013CC  A0D8               	btfss	status,0,c
  2284   0013CE  EFEB  F009         	goto	u461
  2285   0013D2  EFED  F009         	goto	u460
  2286   0013D6                     u461:
  2287   0013D6  EFD1  F009         	goto	l1410
  2288   0013DA                     u460:
  2289   0013DA                     
  2290                           ;dc_motor.c: 122:     }
  2291   0013DA  4A1D               	infsnz	turnLeft@cur_power^0,f,c
  2292   0013DC  2A1E               	incf	(turnLeft@cur_power+1)^0,f,c
  2293   0013DE                     l1416:
  2294   0013DE  5015               	movf	turnLeft@turnSpeed^0,w,c
  2295   0013E0  6E18               	movwf	??_turnLeft^0,c
  2296   0013E2  6A19               	clrf	(??_turnLeft+1)^0,c
  2297   0013E4  501D               	movf	turnLeft@cur_power^0,w,c
  2298   0013E6  5C18               	subwf	??_turnLeft^0,w,c
  2299   0013E8  5019               	movf	(??_turnLeft+1)^0,w,c
  2300   0013EA  0A80               	xorlw	128
  2301   0013EC  6E1A               	movwf	(??_turnLeft+2)^0,c
  2302   0013EE  501E               	movf	(turnLeft@cur_power+1)^0,w,c
  2303   0013F0  0A80               	xorlw	128
  2304   0013F2  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2305   0013F4  B0D8               	btfsc	status,0,c
  2306   0013F6  EFFF  F009         	goto	u471
  2307   0013FA  EF01  F00A         	goto	u470
  2308   0013FE                     u471:
  2309   0013FE  EFAD  F009         	goto	l1402
  2310   001402                     u470:
  2311   001402                     
  2312                           ;dc_motor.c: 124:     for (i=0;i<turnDuration;i++) {
  2313   001402  0E00               	movlw	0
  2314   001404  6E1C               	movwf	(turnLeft@i+1)^0,c
  2315   001406  0E00               	movlw	0
  2316   001408  6E1B               	movwf	turnLeft@i^0,c
  2317   00140A  EF11  F00A         	goto	l132
  2318   00140E                     l1420:
  2319                           
  2320                           ;dc_motor.c: 125:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2321   00140E  0E68               	movlw	104
  2322   001410  6E18               	movwf	??_turnLeft^0,c
  2323   001412  0EE4               	movlw	228
  2324   001414                     u1007:
  2325   001414  2EE8               	decfsz	wreg,f,c
  2326   001416  D7FE               	bra	u1007
  2327   001418  2E18               	decfsz	??_turnLeft^0,f,c
  2328   00141A  D7FC               	bra	u1007
  2329   00141C  D000               	nop2	
  2330   00141E                     
  2331                           ;dc_motor.c: 126:         }
  2332   00141E  4A1B               	infsnz	turnLeft@i^0,f,c
  2333   001420  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2334   001422                     l132:
  2335   001422  5016               	movf	turnLeft@turnDuration^0,w,c
  2336   001424  6E18               	movwf	??_turnLeft^0,c
  2337   001426  6A19               	clrf	(??_turnLeft+1)^0,c
  2338   001428  5018               	movf	??_turnLeft^0,w,c
  2339   00142A  5C1B               	subwf	turnLeft@i^0,w,c
  2340   00142C  501C               	movf	(turnLeft@i+1)^0,w,c
  2341   00142E  0A80               	xorlw	128
  2342   001430  6E1A               	movwf	(??_turnLeft+2)^0,c
  2343   001432  5019               	movf	(??_turnLeft+1)^0,w,c
  2344   001434  0A80               	xorlw	128
  2345   001436  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2346   001438  A0D8               	btfss	status,0,c
  2347   00143A  EF21  F00A         	goto	u481
  2348   00143E  EF23  F00A         	goto	u480
  2349   001442                     u481:
  2350   001442  EF07  F00A         	goto	l1420
  2351   001446                     u480:
  2352   001446                     
  2353                           ;dc_motor.c: 128:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2354   001446  C015  F01D         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  2355   00144A  6A1E               	clrf	(turnLeft@cur_power+1)^0,c
  2356   00144C                     l1424:
  2357   00144C  BE1E               	btfsc	(turnLeft@cur_power+1)^0,7,c
  2358   00144E  EF2D  F00A         	goto	u490
  2359   001452  EF2B  F00A         	goto	u491
  2360   001456                     u491:
  2361   001456  EF2F  F00A         	goto	l1428
  2362   00145A                     u490:
  2363   00145A  EF74  F00A         	goto	l140
  2364   00145E                     l1428:
  2365                           
  2366                           ;dc_motor.c: 129:         mL->power = cur_power+mL->compensation;
  2367   00145E  5013               	movf	turnLeft@mL^0,w,c
  2368   001460  6ED9               	movwf	fsr2l,c
  2369   001462  6ADA               	clrf	fsr2h,c
  2370   001464  5013               	movf	turnLeft@mL^0,w,c
  2371   001466  6EE1               	movwf	fsr1l,c
  2372   001468  6AE2               	clrf	fsr1h,c
  2373   00146A  0E09               	movlw	9
  2374   00146C  26E1               	addwf	fsr1l,f,c
  2375   00146E  50E7               	movf	indf1,w,c
  2376   001470  241D               	addwf	turnLeft@cur_power^0,w,c
  2377   001472  6EDF               	movwf	indf2,c
  2378                           
  2379                           ;dc_motor.c: 130:         mR->power = cur_power+mR->compensation;
  2380   001474  5014               	movf	turnLeft@mR^0,w,c
  2381   001476  6ED9               	movwf	fsr2l,c
  2382   001478  6ADA               	clrf	fsr2h,c
  2383   00147A  5014               	movf	turnLeft@mR^0,w,c
  2384   00147C  6EE1               	movwf	fsr1l,c
  2385   00147E  6AE2               	clrf	fsr1h,c
  2386   001480  0E09               	movlw	9
  2387   001482  26E1               	addwf	fsr1l,f,c
  2388   001484  50E7               	movf	indf1,w,c
  2389   001486  241D               	addwf	turnLeft@cur_power^0,w,c
  2390   001488  6EDF               	movwf	indf2,c
  2391   00148A                     
  2392                           ;dc_motor.c: 131:         setMotorPWM(mL);
  2393   00148A  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2394   00148E  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2395   001492                     
  2396                           ;dc_motor.c: 132:         setMotorPWM(mR);
  2397   001492  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2398   001496  EC2D  F00B         	call	_setMotorPWM	;wreg free
  2399   00149A                     
  2400                           ;dc_motor.c: 133:         for (i=0;i<turnRamp;i++) {
  2401   00149A  0E00               	movlw	0
  2402   00149C  6E1C               	movwf	(turnLeft@i+1)^0,c
  2403   00149E  0E00               	movlw	0
  2404   0014A0  6E1B               	movwf	turnLeft@i^0,c
  2405   0014A2  EF5D  F00A         	goto	l137
  2406   0014A6                     l1436:
  2407                           
  2408                           ;dc_motor.c: 134:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2409   0014A6  0E68               	movlw	104
  2410   0014A8  6E18               	movwf	??_turnLeft^0,c
  2411   0014AA  0EE4               	movlw	228
  2412   0014AC                     u1017:
  2413   0014AC  2EE8               	decfsz	wreg,f,c
  2414   0014AE  D7FE               	bra	u1017
  2415   0014B0  2E18               	decfsz	??_turnLeft^0,f,c
  2416   0014B2  D7FC               	bra	u1017
  2417   0014B4  D000               	nop2	
  2418   0014B6                     
  2419                           ;dc_motor.c: 135:         }
  2420   0014B6  4A1B               	infsnz	turnLeft@i^0,f,c
  2421   0014B8  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2422   0014BA                     l137:
  2423   0014BA  5017               	movf	turnLeft@turnRamp^0,w,c
  2424   0014BC  6E18               	movwf	??_turnLeft^0,c
  2425   0014BE  6A19               	clrf	(??_turnLeft+1)^0,c
  2426   0014C0  5018               	movf	??_turnLeft^0,w,c
  2427   0014C2  5C1B               	subwf	turnLeft@i^0,w,c
  2428   0014C4  501C               	movf	(turnLeft@i+1)^0,w,c
  2429   0014C6  0A80               	xorlw	128
  2430   0014C8  6E1A               	movwf	(??_turnLeft+2)^0,c
  2431   0014CA  5019               	movf	(??_turnLeft+1)^0,w,c
  2432   0014CC  0A80               	xorlw	128
  2433   0014CE  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2434   0014D0  A0D8               	btfss	status,0,c
  2435   0014D2  EF6D  F00A         	goto	u501
  2436   0014D6  EF6F  F00A         	goto	u500
  2437   0014DA                     u501:
  2438   0014DA  EF53  F00A         	goto	l1436
  2439   0014DE                     u500:
  2440   0014DE                     
  2441                           ;dc_motor.c: 136:     }
  2442   0014DE  061D               	decf	turnLeft@cur_power^0,f,c
  2443   0014E0  A0D8               	btfss	status,0,c
  2444   0014E2  061E               	decf	(turnLeft@cur_power+1)^0,f,c
  2445   0014E4  EF26  F00A         	goto	l1424
  2446   0014E8                     l140:
  2447   0014E8  0012               	return		;funcret
  2448   0014EA                     __end_of_turnLeft:
  2449                           	callstack 0
  2450                           
  2451 ;; *************** function _setMotorPWM *****************
  2452 ;; Defined at:
  2453 ;;		line 65 in file "dc_motor.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2456 ;;		 -> main@motorR(10), main@motorL(10), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  negDuty         1   17[COMRAM] unsigned char 
  2459 ;;  posDuty         1   16[COMRAM] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2469 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;Total ram usage:        5 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 1
  2476 ;; This function calls:
  2477 ;;		___lwdiv
  2478 ;;		___wmul
  2479 ;; This function is called by:
  2480 ;;		_stop
  2481 ;;		_turnLeft
  2482 ;;		_turnRight
  2483 ;;		_fullSpeedAhead
  2484 ;;		_reverseOneSquare
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text8
  2489   00165A                     __ptext8:
  2490                           	callstack 0
  2491   00165A                     _setMotorPWM:
  2492                           	callstack 28
  2493   00165A                     
  2494                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2495   00165A  500E               	movf	setMotorPWM@m^0,w,c
  2496   00165C  6ED9               	movwf	fsr2l,c
  2497   00165E  6ADA               	clrf	fsr2h,c
  2498   001660  0E02               	movlw	2
  2499   001662  26D9               	addwf	fsr2l,f,c
  2500   001664  50DF               	movf	indf2,w,c
  2501   001666  B4D8               	btfsc	status,2,c
  2502   001668  EF38  F00B         	goto	u441
  2503   00166C  EF3A  F00B         	goto	u440
  2504   001670                     u441:
  2505   001670  EF6A  F00B         	goto	l1388
  2506   001674                     u440:
  2507   001674                     
  2508                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2509   001674  500E               	movf	setMotorPWM@m^0,w,c
  2510   001676  6ED9               	movwf	fsr2l,c
  2511   001678  6ADA               	clrf	fsr2h,c
  2512   00167A  50DF               	movf	indf2,w,c
  2513   00167C  6E0F               	movwf	??_setMotorPWM^0,c
  2514   00167E  500F               	movf	??_setMotorPWM^0,w,c
  2515   001680  6E01               	movwf	___wmul@multiplier^0,c
  2516   001682  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2517   001684  500E               	movf	setMotorPWM@m^0,w,c
  2518   001686  6ED9               	movwf	fsr2l,c
  2519   001688  6ADA               	clrf	fsr2h,c
  2520   00168A  0E03               	movlw	3
  2521   00168C  26D9               	addwf	fsr2l,f,c
  2522   00168E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2523   001692  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2524   001696  ECC2  F00D         	call	___wmul	;wreg free
  2525   00169A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2526   00169E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2527   0016A2  0E00               	movlw	0
  2528   0016A4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2529   0016A6  0E64               	movlw	100
  2530   0016A8  6E09               	movwf	___lwdiv@divisor^0,c
  2531   0016AA  EC61  F00D         	call	___lwdiv	;wreg free
  2532   0016AE  500E               	movf	setMotorPWM@m^0,w,c
  2533   0016B0  6ED9               	movwf	fsr2l,c
  2534   0016B2  6ADA               	clrf	fsr2h,c
  2535   0016B4  0E03               	movlw	3
  2536   0016B6  26D9               	addwf	fsr2l,f,c
  2537   0016B8  50DF               	movf	indf2,w,c
  2538   0016BA  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2539   0016BC  5007               	movf	?___lwdiv^0,w,c
  2540   0016BE  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2541   0016C0  6E11               	movwf	setMotorPWM@posDuty^0,c
  2542   0016C2                     
  2543                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2544   0016C2  500E               	movf	setMotorPWM@m^0,w,c
  2545   0016C4  6ED9               	movwf	fsr2l,c
  2546   0016C6  6ADA               	clrf	fsr2h,c
  2547   0016C8  0E03               	movlw	3
  2548   0016CA  26D9               	addwf	fsr2l,f,c
  2549   0016CC  50DF               	movf	indf2,w,c
  2550   0016CE  6E12               	movwf	setMotorPWM@negDuty^0,c
  2551                           
  2552                           ;dc_motor.c: 72:     }
  2553   0016D0  EF8B  F00B         	goto	l1392
  2554   0016D4                     l1388:
  2555                           
  2556                           ;dc_motor.c: 74:         posDuty=0;
  2557   0016D4  0E00               	movlw	0
  2558   0016D6  6E11               	movwf	setMotorPWM@posDuty^0,c
  2559   0016D8                     
  2560                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2561   0016D8  500E               	movf	setMotorPWM@m^0,w,c
  2562   0016DA  6ED9               	movwf	fsr2l,c
  2563   0016DC  6ADA               	clrf	fsr2h,c
  2564   0016DE  50DF               	movf	indf2,w,c
  2565   0016E0  6E0F               	movwf	??_setMotorPWM^0,c
  2566   0016E2  500F               	movf	??_setMotorPWM^0,w,c
  2567   0016E4  6E01               	movwf	___wmul@multiplier^0,c
  2568   0016E6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2569   0016E8  500E               	movf	setMotorPWM@m^0,w,c
  2570   0016EA  6ED9               	movwf	fsr2l,c
  2571   0016EC  6ADA               	clrf	fsr2h,c
  2572   0016EE  0E03               	movlw	3
  2573   0016F0  26D9               	addwf	fsr2l,f,c
  2574   0016F2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2575   0016F6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2576   0016FA  ECC2  F00D         	call	___wmul	;wreg free
  2577   0016FE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2578   001702  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2579   001706  0E00               	movlw	0
  2580   001708  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2581   00170A  0E64               	movlw	100
  2582   00170C  6E09               	movwf	___lwdiv@divisor^0,c
  2583   00170E  EC61  F00D         	call	___lwdiv	;wreg free
  2584   001712  5007               	movf	?___lwdiv^0,w,c
  2585   001714  6E12               	movwf	setMotorPWM@negDuty^0,c
  2586   001716                     l1392:
  2587                           
  2588                           ;dc_motor.c: 78:     if (m->direction) {
  2589   001716  500E               	movf	setMotorPWM@m^0,w,c
  2590   001718  6ED9               	movwf	fsr2l,c
  2591   00171A  6ADA               	clrf	fsr2h,c
  2592   00171C  0E01               	movlw	1
  2593   00171E  26D9               	addwf	fsr2l,f,c
  2594   001720  50DF               	movf	indf2,w,c
  2595   001722  B4D8               	btfsc	status,2,c
  2596   001724  EF96  F00B         	goto	u451
  2597   001728  EF98  F00B         	goto	u450
  2598   00172C                     u451:
  2599   00172C  EFB8  F00B         	goto	l1396
  2600   001730                     u450:
  2601   001730                     
  2602                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  2603   001730  500E               	movf	setMotorPWM@m^0,w,c
  2604   001732  6ED9               	movwf	fsr2l,c
  2605   001734  6ADA               	clrf	fsr2h,c
  2606   001736  0E05               	movlw	5
  2607   001738  26D9               	addwf	fsr2l,f,c
  2608   00173A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2609   00173E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2610   001742  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2611   001746  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2612   00174A  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2613                           
  2614                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  2615   00174E  500E               	movf	setMotorPWM@m^0,w,c
  2616   001750  6ED9               	movwf	fsr2l,c
  2617   001752  6ADA               	clrf	fsr2h,c
  2618   001754  0E07               	movlw	7
  2619   001756  26D9               	addwf	fsr2l,f,c
  2620   001758  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2621   00175C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2622   001760  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2623   001764  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2624   001768  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2625                           
  2626                           ;dc_motor.c: 81:     } else {
  2627   00176C  EFD6  F00B         	goto	l115
  2628   001770                     l1396:
  2629                           
  2630                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  2631   001770  500E               	movf	setMotorPWM@m^0,w,c
  2632   001772  6ED9               	movwf	fsr2l,c
  2633   001774  6ADA               	clrf	fsr2h,c
  2634   001776  0E05               	movlw	5
  2635   001778  26D9               	addwf	fsr2l,f,c
  2636   00177A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2637   00177E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2638   001782  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2639   001786  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2640   00178A  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2641                           
  2642                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  2643   00178E  500E               	movf	setMotorPWM@m^0,w,c
  2644   001790  6ED9               	movwf	fsr2l,c
  2645   001792  6ADA               	clrf	fsr2h,c
  2646   001794  0E07               	movlw	7
  2647   001796  26D9               	addwf	fsr2l,f,c
  2648   001798  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2649   00179C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2650   0017A0  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2651   0017A4  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2652   0017A8  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2653   0017AC                     l115:
  2654   0017AC  0012               	return		;funcret
  2655   0017AE                     __end_of_setMotorPWM:
  2656                           	callstack 0
  2657                           
  2658 ;; *************** function ___wmul *****************
  2659 ;; Defined at:
  2660 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  multiplier      2    0[COMRAM] unsigned int 
  2663 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  product         2    4[COMRAM] unsigned int 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  2    0[COMRAM] unsigned int 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, prodl, prodh
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;Total ram usage:        6 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_setMotorPWM
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text9
  2689   001B84                     __ptext9:
  2690                           	callstack 0
  2691   001B84                     ___wmul:
  2692                           	callstack 28
  2693   001B84  5001               	movf	___wmul@multiplier^0,w,c
  2694   001B86  0203               	mulwf	___wmul@multiplicand^0,c
  2695   001B88  CFF3 F005          	movff	prodl,___wmul@product
  2696   001B8C  CFF4 F006          	movff	prodh,___wmul@product+1
  2697   001B90  5001               	movf	___wmul@multiplier^0,w,c
  2698   001B92  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2699   001B94  50F3               	movf	243,w,c
  2700   001B96  2606               	addwf	(___wmul@product+1)^0,f,c
  2701   001B98  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2702   001B9A  0203               	mulwf	___wmul@multiplicand^0,c
  2703   001B9C  50F3               	movf	243,w,c
  2704   001B9E  2606               	addwf	(___wmul@product+1)^0,f,c
  2705   001BA0  C005  F001         	movff	___wmul@product,?___wmul
  2706   001BA4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2707   001BA8  0012               	return		;funcret
  2708   001BAA                     __end_of___wmul:
  2709                           	callstack 0
  2710                           
  2711 ;; *************** function ___lwdiv *****************
  2712 ;; Defined at:
  2713 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  dividend        2    6[COMRAM] unsigned int 
  2716 ;;  divisor         2    8[COMRAM] unsigned int 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  quotient        2   10[COMRAM] unsigned int 
  2719 ;;  counter         1   12[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  2    6[COMRAM] unsigned int 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2730 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2733 ;;Total ram usage:        7 bytes
  2734 ;; Hardware stack levels used: 1
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_setMotorPWM
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text10
  2743   001AC2                     __ptext10:
  2744                           	callstack 0
  2745   001AC2                     ___lwdiv:
  2746                           	callstack 28
  2747   001AC2  0E00               	movlw	0
  2748   001AC4  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2749   001AC6  0E00               	movlw	0
  2750   001AC8  6E0B               	movwf	___lwdiv@quotient^0,c
  2751   001ACA  5009               	movf	___lwdiv@divisor^0,w,c
  2752   001ACC  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2753   001ACE  B4D8               	btfsc	status,2,c
  2754   001AD0  EF6C  F00D         	goto	u411
  2755   001AD4  EF6E  F00D         	goto	u410
  2756   001AD8                     u411:
  2757   001AD8  EF96  F00D         	goto	l728
  2758   001ADC                     u410:
  2759   001ADC  0E01               	movlw	1
  2760   001ADE  6E0D               	movwf	___lwdiv@counter^0,c
  2761   001AE0  EF76  F00D         	goto	l1368
  2762   001AE4                     l1366:
  2763   001AE4  90D8               	bcf	status,0,c
  2764   001AE6  3609               	rlcf	___lwdiv@divisor^0,f,c
  2765   001AE8  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2766   001AEA  2A0D               	incf	___lwdiv@counter^0,f,c
  2767   001AEC                     l1368:
  2768   001AEC  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2769   001AEE  EF7B  F00D         	goto	u421
  2770   001AF2  EF7D  F00D         	goto	u420
  2771   001AF6                     u421:
  2772   001AF6  EF72  F00D         	goto	l1366
  2773   001AFA                     u420:
  2774   001AFA                     l1370:
  2775   001AFA  90D8               	bcf	status,0,c
  2776   001AFC  360B               	rlcf	___lwdiv@quotient^0,f,c
  2777   001AFE  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2778   001B00  5009               	movf	___lwdiv@divisor^0,w,c
  2779   001B02  5C07               	subwf	___lwdiv@dividend^0,w,c
  2780   001B04  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2781   001B06  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2782   001B08  A0D8               	btfss	status,0,c
  2783   001B0A  EF89  F00D         	goto	u431
  2784   001B0E  EF8B  F00D         	goto	u430
  2785   001B12                     u431:
  2786   001B12  EF90  F00D         	goto	l1378
  2787   001B16                     u430:
  2788   001B16  5009               	movf	___lwdiv@divisor^0,w,c
  2789   001B18  5E07               	subwf	___lwdiv@dividend^0,f,c
  2790   001B1A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2791   001B1C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2792   001B1E  800B               	bsf	___lwdiv@quotient^0,0,c
  2793   001B20                     l1378:
  2794   001B20  90D8               	bcf	status,0,c
  2795   001B22  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2796   001B24  3209               	rrcf	___lwdiv@divisor^0,f,c
  2797   001B26  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2798   001B28  EF7D  F00D         	goto	l1370
  2799   001B2C                     l728:
  2800   001B2C  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2801   001B30  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2802   001B34  0012               	return		;funcret
  2803   001B36                     __end_of___lwdiv:
  2804                           	callstack 0
  2805                           
  2806 ;; *************** function _batteryLevel *****************
  2807 ;; Defined at:
  2808 ;;		line 6 in file "battery.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  batteryQuart    1    9[COMRAM] unsigned char 
  2813 ;;  batteryVolta    1    8[COMRAM] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2827 ;;Total ram usage:        2 bytes
  2828 ;; Hardware stack levels used: 1
  2829 ;; Hardware stack levels required when called: 1
  2830 ;; This function calls:
  2831 ;;		_ADC_getval
  2832 ;;		_ADC_init
  2833 ;;		___awdiv
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text11
  2840   001B36                     __ptext11:
  2841                           	callstack 0
  2842   001B36                     _batteryLevel:
  2843                           	callstack 29
  2844   001B36                     
  2845                           ;battery.c: 7:     ADC_init();
  2846   001B36  ECD5  F00D         	call	_ADC_init	;wreg free
  2847                           
  2848                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  2849   001B3A  ECE2  F00D         	call	_ADC_getval	;wreg free
  2850   001B3E  6E09               	movwf	batteryLevel@batteryVoltage^0,c
  2851   001B40                     
  2852                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  2853   001B40  C009  F001         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  2854   001B44  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2855   001B46  0E00               	movlw	0
  2856   001B48  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2857   001B4A  0E18               	movlw	24
  2858   001B4C  6E03               	movwf	___awdiv@divisor^0,c
  2859   001B4E  ECB7  F00C         	call	___awdiv	;wreg free
  2860   001B52  5001               	movf	?___awdiv^0,w,c
  2861   001B54  6E0A               	movwf	batteryLevel@batteryQuarter^0,c
  2862   001B56                     
  2863                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  2864   001B56  A20A               	btfss	batteryLevel@batteryQuarter^0,1,c
  2865   001B58  EFB0  F00D         	goto	u621
  2866   001B5C  EFB2  F00D         	goto	u620
  2867   001B60                     u621:
  2868   001B60  EFB5  F00D         	goto	l209
  2869   001B64                     u620:
  2870   001B64  8E7C               	bsf	124,7,c	;volatile
  2871   001B66  EFB6  F00D         	goto	l210
  2872   001B6A                     l209:
  2873   001B6A  9E7C               	bcf	124,7,c	;volatile
  2874   001B6C                     l210:
  2875                           
  2876                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  2877   001B6C  A00A               	btfss	batteryLevel@batteryQuarter^0,0,c
  2878   001B6E  EFBB  F00D         	goto	u631
  2879   001B72  EFBD  F00D         	goto	u630
  2880   001B76                     u631:
  2881   001B76  EFC0  F00D         	goto	l211
  2882   001B7A                     u630:
  2883   001B7A  8680               	bsf	128,3,c	;volatile
  2884   001B7C  EFC1  F00D         	goto	l213
  2885   001B80                     l211:
  2886   001B80  9680               	bcf	128,3,c	;volatile
  2887   001B82                     l213:
  2888   001B82  0012               	return		;funcret
  2889   001B84                     __end_of_batteryLevel:
  2890                           	callstack 0
  2891                           
  2892 ;; *************** function ___awdiv *****************
  2893 ;; Defined at:
  2894 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  dividend        2    0[COMRAM] int 
  2897 ;;  divisor         2    2[COMRAM] int 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  quotient        2    6[COMRAM] int 
  2900 ;;  sign            1    5[COMRAM] unsigned char 
  2901 ;;  counter         1    4[COMRAM] unsigned char 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  2    0[COMRAM] int 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2914 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2915 ;;Total ram usage:        8 bytes
  2916 ;; Hardware stack levels used: 1
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_batteryLevel
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text12
  2925   00196E                     __ptext12:
  2926                           	callstack 0
  2927   00196E                     ___awdiv:
  2928                           	callstack 29
  2929   00196E  0E00               	movlw	0
  2930   001970  6E06               	movwf	___awdiv@sign^0,c
  2931   001972  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2932   001974  EFC0  F00C         	goto	u560
  2933   001978  EFBE  F00C         	goto	u561
  2934   00197C                     u561:
  2935   00197C  EFC6  F00C         	goto	l1498
  2936   001980                     u560:
  2937   001980  6C03               	negf	___awdiv@divisor^0,c
  2938   001982  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2939   001984  B0D8               	btfsc	status,0,c
  2940   001986  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2941   001988  0E01               	movlw	1
  2942   00198A  6E06               	movwf	___awdiv@sign^0,c
  2943   00198C                     l1498:
  2944   00198C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2945   00198E  EFCD  F00C         	goto	u570
  2946   001992  EFCB  F00C         	goto	u571
  2947   001996                     u571:
  2948   001996  EFD3  F00C         	goto	l1504
  2949   00199A                     u570:
  2950   00199A  6C01               	negf	___awdiv@dividend^0,c
  2951   00199C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2952   00199E  B0D8               	btfsc	status,0,c
  2953   0019A0  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2954   0019A2  0E01               	movlw	1
  2955   0019A4  1A06               	xorwf	___awdiv@sign^0,f,c
  2956   0019A6                     l1504:
  2957   0019A6  0E00               	movlw	0
  2958   0019A8  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2959   0019AA  0E00               	movlw	0
  2960   0019AC  6E07               	movwf	___awdiv@quotient^0,c
  2961   0019AE  5003               	movf	___awdiv@divisor^0,w,c
  2962   0019B0  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2963   0019B2  B4D8               	btfsc	status,2,c
  2964   0019B4  EFDE  F00C         	goto	u581
  2965   0019B8  EFE0  F00C         	goto	u580
  2966   0019BC                     u581:
  2967   0019BC  EF08  F00D         	goto	l1526
  2968   0019C0                     u580:
  2969   0019C0  0E01               	movlw	1
  2970   0019C2  6E05               	movwf	___awdiv@counter^0,c
  2971   0019C4  EFE8  F00C         	goto	l1512
  2972   0019C8                     l1510:
  2973   0019C8  90D8               	bcf	status,0,c
  2974   0019CA  3603               	rlcf	___awdiv@divisor^0,f,c
  2975   0019CC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2976   0019CE  2A05               	incf	___awdiv@counter^0,f,c
  2977   0019D0                     l1512:
  2978   0019D0  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2979   0019D2  EFED  F00C         	goto	u591
  2980   0019D6  EFEF  F00C         	goto	u590
  2981   0019DA                     u591:
  2982   0019DA  EFE4  F00C         	goto	l1510
  2983   0019DE                     u590:
  2984   0019DE                     l1514:
  2985   0019DE  90D8               	bcf	status,0,c
  2986   0019E0  3607               	rlcf	___awdiv@quotient^0,f,c
  2987   0019E2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2988   0019E4  5003               	movf	___awdiv@divisor^0,w,c
  2989   0019E6  5C01               	subwf	___awdiv@dividend^0,w,c
  2990   0019E8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2991   0019EA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2992   0019EC  A0D8               	btfss	status,0,c
  2993   0019EE  EFFB  F00C         	goto	u601
  2994   0019F2  EFFD  F00C         	goto	u600
  2995   0019F6                     u601:
  2996   0019F6  EF02  F00D         	goto	l1522
  2997   0019FA                     u600:
  2998   0019FA  5003               	movf	___awdiv@divisor^0,w,c
  2999   0019FC  5E01               	subwf	___awdiv@dividend^0,f,c
  3000   0019FE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3001   001A00  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3002   001A02  8007               	bsf	___awdiv@quotient^0,0,c
  3003   001A04                     l1522:
  3004   001A04  90D8               	bcf	status,0,c
  3005   001A06  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3006   001A08  3203               	rrcf	___awdiv@divisor^0,f,c
  3007   001A0A  2E05               	decfsz	___awdiv@counter^0,f,c
  3008   001A0C  EFEF  F00C         	goto	l1514
  3009   001A10                     l1526:
  3010   001A10  5006               	movf	___awdiv@sign^0,w,c
  3011   001A12  B4D8               	btfsc	status,2,c
  3012   001A14  EF0E  F00D         	goto	u611
  3013   001A18  EF10  F00D         	goto	u610
  3014   001A1C                     u611:
  3015   001A1C  EF14  F00D         	goto	l1530
  3016   001A20                     u610:
  3017   001A20  6C07               	negf	___awdiv@quotient^0,c
  3018   001A22  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3019   001A24  B0D8               	btfsc	status,0,c
  3020   001A26  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3021   001A28                     l1530:
  3022   001A28  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3023   001A2C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3024   001A30  0012               	return		;funcret
  3025   001A32                     __end_of___awdiv:
  3026                           	callstack 0
  3027                           
  3028 ;; *************** function _ADC_init *****************
  3029 ;; Defined at:
  3030 ;;		line 9 in file "ADC.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;		None
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;Total ram usage:        0 bytes
  3049 ;; Hardware stack levels used: 1
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_batteryLevel
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text13
  3058   001BAA                     __ptext13:
  3059                           	callstack 0
  3060   001BAA                     _ADC_init:
  3061                           	callstack 29
  3062   001BAA                     
  3063                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  3064   001BAA  8C86               	bsf	134,6,c	;volatile
  3065                           
  3066                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  3067   001BAC  010E               	movlb	14	; () banked
  3068   001BAE  8DB4               	bsf	180,6,b	;volatile
  3069                           
  3070                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  3071   001BB0  010F               	movlb	15	; () banked
  3072   001BB2  9958               	bcf	88,4,b	;volatile
  3073   001BB4                     
  3074                           ; BSR set to: 15
  3075                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  3076   001BB4  0EFC               	movlw	-4
  3077   001BB6  1758               	andwf	88,f,b	;volatile
  3078                           
  3079                           ;ADC.c: 17:     ADPCH=0b101110;
  3080   001BB8  0E2E               	movlw	46
  3081   001BBA  6F5F               	movwf	95,b	;volatile
  3082   001BBC                     
  3083                           ; BSR set to: 15
  3084                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  3085   001BBC  9460               	bcf	96,2,c	;volatile
  3086   001BBE                     
  3087                           ; BSR set to: 15
  3088                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  3089   001BBE  8860               	bsf	96,4,c	;volatile
  3090   001BC0                     
  3091                           ; BSR set to: 15
  3092                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  3093   001BC0  8E60               	bsf	96,7,c	;volatile
  3094   001BC2                     
  3095                           ; BSR set to: 15
  3096   001BC2  0012               	return		;funcret
  3097   001BC4                     __end_of_ADC_init:
  3098                           	callstack 0
  3099                           
  3100 ;; *************** function _ADC_getval *****************
  3101 ;; Defined at:
  3102 ;;		line 23 in file "ADC.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  tmpval          1    0[COMRAM] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      unsigned char 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3120 ;;Total ram usage:        1 bytes
  3121 ;; Hardware stack levels used: 1
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_batteryLevel
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text14
  3130   001BC4                     __ptext14:
  3131                           	callstack 0
  3132   001BC4                     _ADC_getval:
  3133                           	callstack 29
  3134   001BC4                     
  3135                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  3136   001BC4  8060               	bsf	96,0,c	;volatile
  3137   001BC6                     l231:
  3138   001BC6  B060               	btfsc	96,0,c	;volatile
  3139   001BC8  EFE8  F00D         	goto	u161
  3140   001BCC  EFEA  F00D         	goto	u160
  3141   001BD0                     u161:
  3142   001BD0  EFE3  F00D         	goto	l231
  3143   001BD4                     u160:
  3144   001BD4                     
  3145                           ;ADC.c: 31:     tmpval = ADRESH;
  3146   001BD4  CF64 F001          	movff	3940,ADC_getval@tmpval	;volatile
  3147   001BD8                     
  3148                           ;ADC.c: 35:     return tmpval;
  3149   001BD8  5001               	movf	ADC_getval@tmpval^0,w,c
  3150   001BDA  0012               	return		;funcret
  3151   001BDC                     __end_of_ADC_getval:
  3152                           	callstack 0
  3153                           
  3154                           	psect	smallconst
  3155   000E00                     __psmallconst:
  3156                           	callstack 0
  3157   000E00  00                 	db	0
  3158   000E01  00                 	db	0	; dummy byte at the end
  3159   000000                     
  3160                           	psect	rparam
  3161   000000                     
  3162                           	psect	config
  3163                           
  3164                           ;Config register CONFIG1L @ 0x300000
  3165                           ;	External Oscillator mode Selection bits
  3166                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3167                           ;	Power-up default value for COSC bits
  3168                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3169   300000                     	org	3145728
  3170   300000  AA                 	db	170
  3171                           
  3172                           ;Config register CONFIG1H @ 0x300001
  3173                           ;	unspecified, using default values
  3174                           ;	Clock Out Enable bit
  3175                           ;	CLKOUTEN = 0x1, unprogrammed default
  3176                           ;	Clock Switch Enable bit
  3177                           ;	CSWEN = 0x1, unprogrammed default
  3178                           ;	Fail-Safe Clock Monitor Enable bit
  3179                           ;	FCMEN = 0x1, unprogrammed default
  3180   300001                     	org	3145729
  3181   300001  FF                 	db	255
  3182                           
  3183                           ;Config register CONFIG3L @ 0x300004
  3184                           ;	WDT Period Select bits
  3185                           ;	WDTCPS = 0x1F, unprogrammed default
  3186                           ;	WDT operating mode
  3187                           ;	WDTE = OFF, WDT Disabled
  3188   300004                     	org	3145732
  3189   300004  9F                 	db	159
  3190                           
  3191                           ;Config register CONFIG3H @ 0x300005
  3192                           ;	unspecified, using default values
  3193                           ;	WDT Window Select bits
  3194                           ;	WDTCWS = 0x7, unprogrammed default
  3195                           ;	WDT input clock selector
  3196                           ;	WDTCCS = 0x7, unprogrammed default
  3197   300005                     	org	3145733
  3198   300005  FF                 	db	255
  3199                           tosu	equ	0xFFF
  3200                           tosh	equ	0xFFE
  3201                           tosl	equ	0xFFD
  3202                           stkptr	equ	0xFFC
  3203                           pclatu	equ	0xFFB
  3204                           pclath	equ	0xFFA
  3205                           pcl	equ	0xFF9
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           indf0	equ	0xFEF
  3213                           postinc0	equ	0xFEE
  3214                           postdec0	equ	0xFED
  3215                           preinc0	equ	0xFEC
  3216                           plusw0	equ	0xFEB
  3217                           fsr0h	equ	0xFEA
  3218                           fsr0l	equ	0xFE9
  3219                           wreg	equ	0xFE8
  3220                           indf1	equ	0xFE7
  3221                           postinc1	equ	0xFE6
  3222                           postdec1	equ	0xFE5
  3223                           preinc1	equ	0xFE4
  3224                           plusw1	equ	0xFE3
  3225                           fsr1h	equ	0xFE2
  3226                           fsr1l	equ	0xFE1
  3227                           bsr	equ	0xFE0
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           preinc2	equ	0xFDC
  3232                           plusw2	equ	0xFDB
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      65
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(COMRAM[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), main@motorR(COMRAM[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_calibration
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   31489
                                             37 COMRAM    28    28      0
                       _batteryLevel
                        _calibration
                     _fullSpeedAhead
                    _initDCmotorsPWM
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             18 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseOneSquare                                    12     7      5    3357
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                      11     7      4    2901
                                             18 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   10951
                                             30 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                           12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                            12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     535
                                              8 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _reverseOneSquare
     _setMotorPWM
   _stop
     _setMotorPWM
   _turnLeft
   _turnRight

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     41      41       1       68.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhhhh     17      0       0      36        0.0%
BITBIGSFRllhhhh      5      0       0      37        0.0%
BITBIGSFRllhhlh      2      0       0      38        0.0%
BITBIGSFRllhhll      1      0       0      39        0.0%
BITBIGSFRllhlhh     16      0       0      40        0.0%
BITBIGSFRllhlhh      3      0       0      41        0.0%
BITBIGSFRllhlhl      6      0       0      42        0.0%
BITBIGSFRllhll      31      0       0      43        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRllllh      6C      0       0      45        0.0%
BITBIGSFRlllllh     2B      0       0      46        0.0%
BITBIGSFRlllllh     11      0       0      47        0.0%
BITBIGSFRlllllh      1      0       0      48        0.0%
BITBIGSFRllllll      A      0       0      49        0.0%
BITBIGSFRllllll     7A      0       0      50        0.0%
ABS                  0      0       0      51        0.0%
BIGRAM             DE9      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Mar 03 15:00:48 2024

                             l45 1050                               l47 105E                     ___awdiv@sign 0006  
            ___wmul@multiplicand 0003                 main@turnDuration 002D                              l120 185C  
                            l210 1B6C                              l211 1B80                              l115 17AC  
                            l123 189A                              l140 14E8                              l132 1422  
                            l108 1AC0                              l213 1B82                              l134 1446  
                            l231 1BC6                              l151 1290                              l128 13B6  
                            l233 1BD4                              l209 1B6A                              l137 14BA  
                            l145 1200                              l234 1BDA                              l154 1304  
                            l162 1920                              l171 0E82                              l228 1BC2  
                            l180 0F86                              l237 1BA8                              l157 1332  
                            l149 126C                              l166 196C                              l191 15C6  
                            l183 0FC4                              l175 0EEE                              l192 15F2  
                            l177 0F12                              l195 1630                              l187 15AA  
                            l196 1638                              l198 1658                              l468 1A30  
                            l735 1B34                              l728 1B2C                              u160 1BD4  
                            u161 1BD0                              u410 1ADC                              u411 1AD8  
                            u420 1AFA                              u500 14DE                              u421 1AF6  
                            u501 14DA                              u430 1B16                              u510 1224  
                            u431 1B12                              u511 1220                              u600 19FA  
                            u440 1674                              u520 124C                              u601 19F6  
                            u441 1670                              u521 1248                              u610 1A20  
                            u450 1730                              u530 1290                              u611 1A1C  
                            u451 172C                              u531 128C                              u620 1B64  
                            u460 13DA                              u540 12A4                              u700 1944  
                            u621 1B60                              u461 13D6                              u541 12A0  
                            u701 1940                              u630 1B7A                              u470 1402  
                            u550 1328                              u710 196C                              u631 1B76  
                            u471 13FE                              u551 1324                              u711 1968  
                            u560 1980                              u480 1446                              u640 15B8  
                            u720 17FC                              u561 197C                              u481 1442  
                            u641 15B4                              u721 17F8                              u570 199A  
                            u490 145A                              u650 15C6                              u730 1880  
                            u571 1996                              u491 1456                              u651 15C2  
                            u731 187C                              u580 19C0                              u660 15D4  
                            u740 0EA6                              u581 19BC                              u661 15D0  
                            u741 0EA2                              u590 19DE                              u670 15EA  
                            u750 0ECE                              u591 19DA                              u671 15E6  
                            u751 0ECA                              u807 106C                              u680 1600  
                            u760 0F12                              u681 15FC                              u761 0F0E  
                            u817 10B4                              u690 162A                              u770 0F26  
                            u691 1626                              u907 1912                              u771 0F22  
                            u827 10E4                              u780 0FAA                              u917 1512  
                            u781 0FA6                              u837 1110                              u790 105E  
                            u927 1548                              u847 1138                              u791 105A  
                            u937 157E                              u857 1168                              u947 160E  
                            u867 184E                              u957 1646                              u877 0E74  
                            u967 11F2                              u887 0EE0                              u977 125E  
                            u897 0F78                              u987 12F6                              u997 13A8  
                            wreg 0FE8                             l1050 1BBC                             l1052 1BBE  
                           l1054 1BC0                             l1046 1BAA                             l1056 1BC4  
                           l1048 1BB4                             l1400 134E                             l1058 1BD8  
                           l1410 13A2                             l1402 135A                             l1500 199A  
                           l1420 140E                             l1412 13B2                             l1404 1386  
                           l1510 19C8                             l1502 19A2                             l1430 148A  
                           l1422 141E                             l1414 13DA                             l1406 138E  
                           l1520 1A02                             l1512 19D0                             l1504 19A6  
                           l1360 1AC2                             l1440 14DE                             l1432 1492  
                           l1424 144C                             l1408 1396                             l1416 13DE  
                           l1530 1A28                             l1522 1A04                             l1514 19DE  
                           l1506 19AE                             l1370 1AFA                             l1362 1ACA  
                           l1354 1B84                             l1434 149A                             l1418 1402  
                           l1450 11D0                             l1610 189C                             l1524 1A0A  
                           l1516 19E4                             l1508 19C0                             l1380 1B26  
                           l1372 1B00                             l1364 1ADC                             l1356 1BA0  
                           l1436 14A6                             l1428 145E                             l1460 1224  
                           l1452 11D8                             l1444 117E                             l1620 1900  
                           l1612 18B8                             l1540 1A6C                             l1700 0FB4  
                           l1518 19FA                             l1526 1A10                             l1374 1B16  
                           l1366 1AE4                             l1390 16D8                             l1382 165A  
                           l1438 14B6                             l1470 1296                             l1454 11E0  
                           l1462 1228                             l1446 1198                             l1606 163C  
                           l1622 190C                             l1614 18C4                             l1550 1AA8  
                           l1542 1A90                             l1534 1A32                             l1630 17AE  
                           l1710 0FDA                             l1702 0FC6                             l1528 1A20  
                           l1560 1B40                             l1376 1B1E                             l1368 1AEC  
                           l1392 1716                             l1384 1674                             l1480 12E4  
                           l1464 124C                             l1456 11EC                             l1448 11A4  
                           l1608 1654                             l1624 191C                             l1616 18F0  
                           l1552 1AB2                             l1544 1A9A                             l1536 1A42  
                           l1640 1834                             l1632 17EE                             l1720 0FFA  
                           l1712 0FDE                             l1704 0FC6                             l1490 196E  
                           l1562 1B56                             l1378 1B20                             l1394 1730  
                           l1386 16C2                             l1482 12F0                             l1474 12A8  
                           l1466 1258                             l1458 11FC                             l1570 1508  
                           l1626 1944                             l1618 18F8                             l1554 1AB4  
                           l1546 1A9C                             l1538 1A68                             l1642 183C  
                           l1730 1016                             l1722 0FFE                             l1714 0FE6  
                           l1706 0FD2                             l1492 1972                             l1564 1B64  
                           l1396 1770                             l1388 16D4                             l1484 1300  
                           l1476 12D4                             l1468 1268                             l1580 15D4  
                           l1572 1520                             l1628 1948                             l1556 1ABE  
                           l1548 1AA6                             l1660 0E52                             l1644 1848  
                           l1652 188A                             l1636 1800                             l1740 102E  
                           l1732 101E                             l1724 1002                             l1716 0FEE  
                           l1708 0FD6                             l1494 1980                             l1566 1B7A  
                           l1558 1B36                             l1398 1334                             l1486 1328  
                           l1478 12DC                             l1590 1604                             l1582 15EA  
                           l1574 1556                             l1670 0EA6                             l1662 0E5A  
                           l1654 0E02                             l1646 1858                             l1638 182C  
                           l1750 103E                             l1742 1032                             l1734 1022  
                           l1726 1006                             l1718 0FF6                             l1496 1988  
                           l1592 161C                             l1584 15EC                             l1576 1574  
                           l1568 14EA                             l1680 0F18                             l1664 0E62  
                           l1672 0EAA                             l1656 0E1A                             l1648 1880  
                           l1760 104A                             l1752 1040                             l1744 1036  
                           l1736 1026                             l1728 100E                             l1498 198C  
                           l1594 162A                             l1586 1600                             l1578 15B8  
                           l1690 0F66                             l1674 0ECE                             l1666 0E6E  
                           l1658 0E26                             l1770 10C2                             l1762 104C  
                           l1754 1042                             l1746 103A                             l1738 102A  
                           l1588 1602                             l1692 0F72                             l1684 0F2A  
                           l1676 0EDA                             l1668 0E7E                             l1780 115E  
                           l1772 10DA                             l1764 1062                             l1756 1044  
                           l1748 103C                             l1694 0F82                             l1686 0F56  
                           l1678 0EEA                             l1774 1106                             l1766 107A  
                           l1758 1048                             l1696 0FAA                             l1688 0F5E  
                           l1776 111E                             l1768 1092                             l1778 1146  
                           u1007 1414                             u1017 14AC                             _T2PR 0FBC  
                           _main 0FC6                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             _stop 17AE                             prodh 0FF4  
                           prodl 0FF3                             start 0000              main@reverseDuration 0028  
               __end_of_ADC_init 1BC4                     ___param_bank 0000             __end_of_batteryLevel 1B84  
                          ?_main 0001                            _ADPCH 0F5F                  __end_of___awdiv 1A32  
                          ?_stop 0013                  ___awdiv@divisor 0003                  __end_of___lwdiv 1B36  
                ___awdiv@counter 0005                            stop@i 0019                            status 0FD8  
                   main@turnRamp 002C                  __initialization 1BDC                     __end_of_main 117E  
                   __end_of_stop 189C                           ??_main 0026                           ??_stop 0016  
                  __activetblptr 0000                    calibration@mL 001F                    calibration@mR 0020  
                   ?_setMotorPWM 000E                           _ADRESH 0F64                           _CCPR1H 0FAA  
                         _CCPR2H 0FA6                           _CCPR3H 0F25                           _CCPR4H 0F21  
               ___awdiv@dividend 0001                           _RE2PPS 0E74                           _RC7PPS 0E69  
                         _RE4PPS 0E76                           _RG6PPS 0E88                     ??_ADC_getval 0001  
            calibration@turnRamp 0023          calibration@turnDuration 0022                     _CCPTMRS0bits 0FAD  
                         ___wmul 1B84                        ??___awdiv 0005                        ??___lwdiv 000B  
               ___awdiv@quotient 0007                           isa$std 0001                     __mediumconst 0000  
                      ?_ADC_init 0001                           stop@mL 0013                           stop@mR 0014  
              ??_initDCmotorsPWM 0003               __end_of_ADC_getval 1BDC                 __end_of_turnLeft 14EA  
                     __accesstop 0060          __end_of__initialization 1BDC                  fullSpeedAhead@i 001A  
                  main@turnSpeed 002B                    ___rparam_used 0001                   __pcstackCOMRAM 0001  
               _reverseOneSquare 0E02                       ??_ADC_init 0001                     _batteryLevel 1B36  
                   _T2CLKCONbits 0FBF                          ?___wmul 0001       fullSpeedAhead@straightRamp 0016  
          turnRight@turnDuration 0016                        _ADREFbits 0F58                          __Hparam 0000  
                        __Lparam 0000             calibration@turnSpeed 0021                          ___awdiv 196E  
                  ??_calibration 0024                          ___lwdiv 1AC2                     __psmallconst 0E00  
                        __pcinit 1BDC                          __ramtop 0E00                        ?_turnLeft 0013  
                        __ptext0 0FC6                          __ptext1 17AE                          __ptext2 0E02  
                        __ptext3 1A32                          __ptext4 189C                          __ptext5 14EA  
                        __ptext6 117E                          __ptext7 1334                          __ptext8 165A  
                        __ptext9 1B84                        _T2CONbits 0FBD                        _T2HLTbits 0FBE  
           end_of_initialization 1BDC                 ADC_getval@tmpval 0001                reverseOneSquare@i 001B  
     batteryLevel@batteryQuarter 000A                          postdec2 0FDD                          postinc2 0FDE  
     batteryLevel@batteryVoltage 0009                  _initDCmotorsPWM 1A32                       ??_turnLeft 0018  
                      _PORTFbits 0F8E               setMotorPWM@negDuty 0012                __end_of_turnRight 1334  
            __end_of_calibration 165A               setMotorPWM@posDuty 0011                        _TRISCbits 0F83  
                      _TRISDbits 0F84                        _TRISEbits 0F85                        _TRISFbits 0F86  
                      _TRISGbits 0F87                        _TRISHbits 0F88                 fullSpeedAhead@mL 0013  
               fullSpeedAhead@mR 0014         __end_of_reverseOneSquare 0FC6                    stop@cur_power 001B  
                    _CCP1CONbits 0FAB                      _CCP2CONbits 0FA7                      _CCP3CONbits 0F26  
                    _CCP4CONbits 0F22                       main@motorL 0038                       main@motorR 002E  
                 _fullSpeedAhead 189C             turnLeft@turnDuration 0016                   __end_of___wmul 1BAA  
            start_initialization 1BDC          __end_of_initDCmotorsPWM 1AC2           __end_of_fullSpeedAhead 196E  
             turnRight@cur_power 001D                         ??___wmul 0005                      _calibration 14EA  
   reverseOneSquare@straightRamp 0017                turnLeft@cur_power 001D                 stop@straightRamp 0015  
               ___lwdiv@dividend 0007                  ?_fullSpeedAhead 0013               turnRight@turnSpeed 0015  
                       ?___awdiv 0001                         ?___lwdiv 0007                      __smallconst 0E00  
              turnLeft@turnSpeed 0015                         _ADC_init 1BAA                    ??_setMotorPWM 000F  
               ___lwdiv@quotient 000B         initDCmotorsPWM@PWMperiod 0001                   ___wmul@product 0005  
                       _LATCbits 0F7B                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATGbits 0F7F                         _LATHbits 0F80                      turnRight@mL 0013  
                    turnRight@mR 0014                 ?_initDCmotorsPWM 0001      fullSpeedAhead@straightSpeed 0015  
                     _ADCON0bits 0F60                ___wmul@multiplier 0001                     setMotorPWM@m 000E  
                      _turnRight 117E                ?_reverseOneSquare 0013              __end_of_setMotorPWM 17AE  
reverseOneSquare@reverseDuration 0016               ??_reverseOneSquare 0018                         __Hrparam 0000  
                     _ADC_getval 1BC4                         __Lrparam 0000                       _ANSELFbits 0EB4  
  reverseOneSquare@straightSpeed 0015                  ___lwdiv@divisor 0009                  ___lwdiv@counter 000D  
              turnRight@turnRamp 0017                       ?_turnRight 0013                         __ptext10 1AC2  
                       __ptext11 1B36                         __ptext12 196E                         __ptext13 1BAA  
                       __ptext14 1BC4                    ?_batteryLevel 0001                 turnLeft@turnRamp 0017  
                     turnLeft@mL 0013                       turnLeft@mR 0014                       turnRight@i 001B  
                       isa$xinst 0000                     ?_calibration 001F                         _turnLeft 1334  
        fullSpeedAhead@cur_power 001C        reverseOneSquare@cur_power 001D               reverseOneSquare@mL 0013  
             reverseOneSquare@mR 0014                   ??_batteryLevel 0009                      _setMotorPWM 165A  
               ??_fullSpeedAhead 0017                        turnLeft@i 001B                      ?_ADC_getval 0001  
              main@straightSpeed 0029                      ??_turnRight 0018                 main@straightRamp 002A  
