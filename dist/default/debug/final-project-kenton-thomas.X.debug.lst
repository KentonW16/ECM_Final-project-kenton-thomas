

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 11:34:20 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74   000000                     
    75                           ; Generated 21/07/2023 GMT
    76                           ; 
    77                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F67K40 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000000                     
   110                           	psect	idataBANK1
   111   004D28                     __pidataBANK1:
   112                           	callstack 0
   113                           
   114                           ;initializer for _ambient
   115   004D28  01F4               	dw	500
   116   000000                     _T0CON0bits	set	4053
   117   000000                     _T0CON1bits	set	4054
   118   000000                     _TRISCbits	set	3971
   119   000000                     _RC4STAbits	set	3815
   120   000000                     _SP4BRGH	set	3814
   121   000000                     _TRISBbits	set	3970
   122   000000                     _TRISAbits	set	3969
   123   000000                     _TRISEbits	set	3973
   124   000000                     _TRISGbits	set	3975
   125   000000                     _LATFbits	set	3966
   126   000000                     _TRISFbits	set	3974
   127   000000                     _TRISHbits	set	3976
   128   000000                     _TRISDbits	set	3972
   129   000000                     _LATEbits	set	3965
   130   000000                     _LATGbits	set	3967
   131   000000                     _LATHbits	set	3968
   132   000000                     _SSP2CON2bits	set	3802
   133   000000                     _RX4PPS	set	3605
   134   000000                     _SSP2CLKPPS	set	3612
   135   000000                     _SSP2DATPPS	set	3613
   136   000000                     _PIE0bits	set	3625
   137   000000                     _CCPR4H	set	3873
   138   000000                     _CCPR3H	set	3877
   139   000000                     _CCPR2H	set	4006
   140   000000                     _CCPR1H	set	4010
   141   000000                     _CCP1CONbits	set	4011
   142   000000                     _CCPTMRS0bits	set	4013
   143   000000                     _T2PR	set	4028
   144   000000                     _T2CONbits	set	4029
   145   000000                     _TMR0L	set	4051
   146   000000                     _TMR0H	set	4052
   147   000000                     _INTCONbits	set	4082
   148   000000                     _CCP2CONbits	set	4007
   149   000000                     _CCP3CONbits	set	3878
   150   000000                     _ADREFbits	set	3928
   151   000000                     _LATAbits	set	3961
   152   000000                     _LATDbits	set	3964
   153   000000                     _PORTFbits	set	3982
   154   000000                     _CCP4CONbits	set	3874
   155   000000                     _PIE4bits	set	3629
   156   000000                     _PIR0bits	set	3635
   157   000000                     _RD5PPS	set	3695
   158   000000                     _ANSELDbits	set	3751
   159   000000                     _SSP2ADD	set	3798
   160   000000                     _SSP2CON1bits	set	3801
   161   000000                     _LATCbits	set	3963
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _SSP2STAT	set	3800
   167   000000                     _ANSELFbits	set	3764
   168   000000                     _SSP2BUF	set	3797
   169   000000                     _IPR0bits	set	3615
   170   000000                     _RE2PPS	set	3700
   171   000000                     _ANSELBbits	set	3738
   172   000000                     _RD6PPS	set	3696
   173   000000                     _RC0PPS	set	3682
   174   000000                     _RC7PPS	set	3689
   175   000000                     _ADPCH	set	3935
   176   000000                     _ADRESH	set	3940
   177   000000                     _ADCON0bits	set	3936
   178   000000                     _RE4PPS	set	3702
   179   000000                     _RG6PPS	set	3720
   180   000000                     _T2CLKCONbits	set	4031
   181   000000                     _T2HLTbits	set	4030
   182                           
   183                           ; #config settings
   184                           
   185                           	psect	cinit
   186   0049D2                     __pcinit:
   187                           	callstack 0
   188   0049D2                     start_initialization:
   189                           	callstack 0
   190   0049D2                     __initialization:
   191                           	callstack 0
   192                           
   193                           ; Initialize objects allocated to BANK1 (2 bytes)
   194                           ; load TBLPTR registers with __pidataBANK1
   195   0049D2  0E28               	movlw	low __pidataBANK1
   196   0049D4  6EF6               	movwf	tblptrl,c
   197   0049D6  0E4D               	movlw	high __pidataBANK1
   198   0049D8  6EF7               	movwf	tblptrh,c
   199   0049DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   200   0049DC  6EF8               	movwf	tblptru,c
   201   0049DE  0009               	tblrd		*+	;fetch initializer
   202   0049E0  CFF5 F1D8          	movff	tablat,__pdataBANK1
   203   0049E4  0009               	tblrd		*+	;fetch initializer
   204   0049E6  CFF5 F1D9          	movff	tablat,__pdataBANK1+1
   205                           
   206                           ; Clear objects allocated to BANK2 (82 bytes)
   207   0049EA  EE02  F000         	lfsr	0,__pbssBANK2
   208   0049EE  0E52               	movlw	82
   209   0049F0                     clear_0:
   210   0049F0  6AEE               	clrf	postinc0,c
   211   0049F2  06E8               	decf	wreg,f,c
   212   0049F4  E1FD               	bnz	clear_0
   213                           
   214                           ; Clear objects allocated to BANK1 (1 bytes)
   215   0049F6  0101               	movlb	1
   216   0049F8  6BDA               	clrf	__pbssBANK1& (0+255),b
   217                           
   218                           ; Clear objects allocated to BANK0 (120 bytes)
   219   0049FA  EE00  F060         	lfsr	0,__pbssBANK0
   220   0049FE  0E78               	movlw	120
   221   004A00                     clear_1:
   222   004A00  6AEE               	clrf	postinc0,c
   223   004A02  06E8               	decf	wreg,f,c
   224   004A04  E1FD               	bnz	clear_1
   225                           
   226                           ; Clear objects allocated to COMRAM (5 bytes)
   227   004A06  6A4F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   228   004A08  6A4E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   229   004A0A  6A4D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   230   004A0C  6A4C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   231   004A0E  6A4B               	clrf	__pbssCOMRAM& (0+255),c
   232   004A10                     end_of_initialization:
   233                           	callstack 0
   234   004A10                     __end_of__initialization:
   235                           	callstack 0
   236   004A10  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   237   004A12  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   238   004A14  0100               	movlb	0
   239   004A16  EFA9  F011         	goto	_main	;jump to C main() function
   240                           
   241                           	psect	bssCOMRAM
   242   00004B                     __pbssCOMRAM:
   243                           	callstack 0
   244   00004B                     _lost:
   245                           	callstack 0
   246   00004B                     	ds	1
   247   00004C                     _TxBufReadCnt:
   248                           	callstack 0
   249   00004C                     	ds	1
   250   00004D                     _TxBufWriteCnt:
   251                           	callstack 0
   252   00004D                     	ds	1
   253   00004E                     _RxBufReadCnt:
   254                           	callstack 0
   255   00004E                     	ds	1
   256   00004F                     _RxBufWriteCnt:
   257                           	callstack 0
   258   00004F                     	ds	1
   259                           
   260                           	psect	bssBANK0
   261   000060                     __pbssBANK0:
   262                           	callstack 0
   263   000060                     _EUSART4TXbuf:
   264                           	callstack 0
   265   000060                     	ds	60
   266   00009C                     	ds	40
   267   0000C4                     _EUSART4RXbuf:
   268                           	callstack 0
   269   0000C4                     	ds	20
   270                           
   271                           	psect	bssBANK1
   272   0001DA                     __pbssBANK1:
   273                           	callstack 0
   274   0001DA                     _brightnessChange:
   275                           	callstack 0
   276   0001DA                     	ds	1
   277                           
   278                           	psect	dataBANK1
   279   0001D8                     __pdataBANK1:
   280                           	callstack 0
   281   0001D8                     _ambient:
   282                           	callstack 0
   283   0001D8                     	ds	2
   284                           
   285                           	psect	bssBANK2
   286   000200                     __pbssBANK2:
   287                           	callstack 0
   288   000200                     	ds	82
   289                           
   290                           	psect	cstackBANK1
   291   000100                     __pcstackBANK1:
   292                           	callstack 0
   293   000100                     main@straightTime:
   294                           	callstack 0
   295                           
   296                           ; 82 bytes @ 0x0
   297   000100                     	ds	82
   298   000152                     main@moveSequence:
   299                           	callstack 0
   300                           
   301                           ; 40 bytes @ 0x52
   302   000152                     	ds	40
   303   00017A                     main@reverseDuration:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x7A
   307   00017A                     	ds	2
   308   00017C                     main@wall:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x7C
   312   00017C                     	ds	1
   313   00017D                     main@ambientNew:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0x7D
   317   00017D                     	ds	2
   318   00017F                     main@turnSpeed:
   319                           	callstack 0
   320                           
   321                           ; 1 bytes @ 0x7F
   322   00017F                     	ds	1
   323   000180                     main@turnRamp:
   324                           	callstack 0
   325                           
   326                           ; 1 bytes @ 0x80
   327   000180                     	ds	1
   328   000181                     main@straightSpeed:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x81
   332   000181                     	ds	1
   333   000182                     main@red:
   334                           	callstack 0
   335                           
   336                           ; 6 bytes @ 0x82
   337   000182                     	ds	6
   338   000188                     main@green:
   339                           	callstack 0
   340                           
   341                           ; 6 bytes @ 0x88
   342   000188                     	ds	6
   343   00018E                     main@blue:
   344                           	callstack 0
   345                           
   346                           ; 6 bytes @ 0x8E
   347   00018E                     	ds	6
   348   000194                     main@yellow:
   349                           	callstack 0
   350                           
   351                           ; 6 bytes @ 0x94
   352   000194                     	ds	6
   353   00019A                     main@pink:
   354                           	callstack 0
   355                           
   356                           ; 6 bytes @ 0x9A
   357   00019A                     	ds	6
   358   0001A0                     main@orange:
   359                           	callstack 0
   360                           
   361                           ; 6 bytes @ 0xA0
   362   0001A0                     	ds	6
   363   0001A6                     main@lightblue:
   364                           	callstack 0
   365                           
   366                           ; 6 bytes @ 0xA6
   367   0001A6                     	ds	6
   368   0001AC                     main@white:
   369                           	callstack 0
   370                           
   371                           ; 6 bytes @ 0xAC
   372   0001AC                     	ds	6
   373   0001B2                     main@curMove:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0xB2
   377   0001B2                     	ds	1
   378   0001B3                     main@straightRamp:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0xB3
   382   0001B3                     	ds	1
   383   0001B4                     main@color:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0xB4
   387   0001B4                     	ds	1
   388   0001B5                     main@turnDuration:
   389                           	callstack 0
   390                           
   391                           ; 1 bytes @ 0xB5
   392   0001B5                     	ds	1
   393   0001B6                     main@HSV:
   394                           	callstack 0
   395                           
   396                           ; 6 bytes @ 0xB6
   397   0001B6                     	ds	6
   398   0001BC                     main@RGBC:
   399                           	callstack 0
   400                           
   401                           ; 8 bytes @ 0xBC
   402   0001BC                     	ds	8
   403   0001C4                     main@motorR:
   404                           	callstack 0
   405                           
   406                           ; 10 bytes @ 0xC4
   407   0001C4                     	ds	10
   408   0001CE                     main@motorL:
   409                           	callstack 0
   410                           
   411                           ; 10 bytes @ 0xCE
   412   0001CE                     	ds	10
   413                           
   414                           	psect	cstackBANK0
   415   0000D8                     __pcstackBANK0:
   416                           	callstack 0
   417   0000D8                     ??_color_detect:
   418   0000D8                     rgb_2_hsv@cmin:
   419                           	callstack 0
   420   0000D8                     move@mL:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x0
   424   0000D8                     	ds	2
   425   0000DA                     move@mR:
   426                           	callstack 0
   427   0000DA                     _rgb_2_hsv$3571:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x2
   431   0000DA                     	ds	2
   432   0000DC                     move@color:
   433                           	callstack 0
   434   0000DC                     _rgb_2_hsv$3572:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x4
   438   0000DC                     	ds	1
   439   0000DD                     move@moveSequence:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x5
   443   0000DD                     	ds	1
   444   0000DE                     rgb_2_hsv@r:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x6
   448   0000DE                     	ds	1
   449   0000DF                     move@straightTime:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x7
   453   0000DF                     	ds	1
   454   0000E0                     rgb_2_hsv@cmax:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x8
   458   0000E0                     	ds	1
   459   0000E1                     move@curMove:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x9
   463   0000E1                     	ds	1
   464   0000E2                     move@straightSpeed:
   465                           	callstack 0
   466   0000E2                     rgb_2_hsv@g:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0xA
   470   0000E2                     	ds	1
   471   0000E3                     move@reverseDuration:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0xB
   475   0000E3                     	ds	1
   476   0000E4                     rgb_2_hsv@b:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0xC
   480   0000E4                     	ds	1
   481   0000E5                     move@straightRamp:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0xD
   485   0000E5                     	ds	1
   486   0000E6                     move@turnSpeed:
   487                           	callstack 0
   488   0000E6                     rgb_2_hsv@diff:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0xE
   492   0000E6                     	ds	1
   493   0000E7                     move@turnDuration:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0xF
   497   0000E7                     	ds	1
   498   0000E8                     move@turnRamp:
   499                           	callstack 0
   500   0000E8                     color_calibration@RGBC:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x10
   504   0000E8                     	ds	2
   505   0000EA                     color_calibration@HSV:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x12
   509   0000EA                     	ds	2
   510   0000EC                     color_calibration@red:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x14
   514   0000EC                     	ds	2
   515   0000EE                     color_calibration@green:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x16
   519   0000EE                     	ds	2
   520   0000F0                     color_calibration@blue:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x18
   524   0000F0                     	ds	2
   525   0000F2                     color_calibration@yellow:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x1A
   529   0000F2                     	ds	2
   530   0000F4                     color_calibration@pink:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x1C
   534   0000F4                     	ds	2
   535   0000F6                     color_calibration@orange:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x1E
   539   0000F6                     	ds	2
   540   0000F8                     color_calibration@lightblue:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x20
   544   0000F8                     	ds	2
   545   0000FA                     color_calibration@white:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x22
   549   0000FA                     	ds	2
   550   0000FC                     ??_main:
   551                           
   552                           ; 1 bytes @ 0x24
   553   0000FC                     	ds	2
   554                           
   555                           	psect	cstackCOMRAM
   556   000001                     __pcstackCOMRAM:
   557                           	callstack 0
   558   000001                     ??i2_I2C_2_Master_Idle:
   559   000001                     ?i2___lwdiv:
   560                           	callstack 0
   561   000001                     i2___lwdiv@dividend:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x0
   565   000001                     	ds	1
   566   000002                     i2I2C_2_Master_Write@data_byte:
   567                           	callstack 0
   568                           
   569                           ; 1 bytes @ 0x1
   570   000002                     	ds	1
   571   000003                     i2color_writetoaddr@value:
   572                           	callstack 0
   573   000003                     i2___lwdiv@divisor:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x2
   577   000003                     	ds	1
   578   000004                     i2color_writetoaddr@address:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x3
   582   000004                     	ds	1
   583   000005                     i2___lwdiv@quotient:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x4
   587   000005                     	ds	2
   588   000007                     i2___lwdiv@counter:
   589                           	callstack 0
   590                           
   591                           ; 1 bytes @ 0x6
   592   000007                     	ds	1
   593   000008                     ??i2_color_clear_init_interrupts:
   594                           
   595                           ; 1 bytes @ 0x7
   596   000008                     	ds	1
   597   000009                     i2color_clear_init_interrupts@high_threshold:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x8
   601   000009                     	ds	2
   602   00000B                     i2color_clear_init_interrupts@low_threshold:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0xA
   606   00000B                     	ds	2
   607   00000D                     ??_LowISR:
   608                           
   609                           ; 1 bytes @ 0xC
   610   00000D                     	ds	3
   611   000010                     ??_I2C_2_Master_Idle:
   612   000010                     ?_get16bitTMR0val:
   613                           	callstack 0
   614   000010                     ?_min:
   615                           	callstack 0
   616   000010                     ?_max:
   617                           	callstack 0
   618   000010                     ?___wmul:
   619                           	callstack 0
   620   000010                     ?___awdiv:
   621                           	callstack 0
   622   000010                     white_Light@state:
   623                           	callstack 0
   624   000010                     ADC_getval@tmpval:
   625                           	callstack 0
   626   000010                     max@a:
   627                           	callstack 0
   628   000010                     min@a:
   629                           	callstack 0
   630   000010                     initDCmotorsPWM@PWMperiod:
   631                           	callstack 0
   632   000010                     ___wmul@multiplier:
   633                           	callstack 0
   634   000010                     ___awdiv@dividend:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0xF
   638   000010                     	ds	1
   639   000011                     ??_I2C_2_Master_Read:
   640   000011                     I2C_2_Master_Write@data_byte:
   641                           	callstack 0
   642                           
   643                           ; 1 bytes @ 0x10
   644   000011                     	ds	1
   645   000012                     ??_get16bitTMR0val:
   646   000012                     color_writetoaddr@value:
   647                           	callstack 0
   648   000012                     I2C_2_Master_Read@ack:
   649                           	callstack 0
   650   000012                     max@b:
   651                           	callstack 0
   652   000012                     min@b:
   653                           	callstack 0
   654   000012                     ___wmul@multiplicand:
   655                           	callstack 0
   656   000012                     ___awdiv@divisor:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x11
   660   000012                     	ds	1
   661   000013                     color_writetoaddr@address:
   662                           	callstack 0
   663   000013                     I2C_2_Master_Read@tmp:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0x12
   667   000013                     	ds	1
   668   000014                     ___awdiv@counter:
   669                           	callstack 0
   670   000014                     color_read@RGBC:
   671                           	callstack 0
   672   000014                     get16bitTMR0val@timer_low:
   673                           	callstack 0
   674   000014                     ___wmul@product:
   675                           	callstack 0
   676   000014                     color_detect@HSV:
   677                           	callstack 0
   678                           
   679                           ; 6 bytes @ 0x13
   680   000014                     	ds	1
   681   000015                     ___awdiv@sign:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x14
   685   000015                     	ds	1
   686   000016                     ??_color_read:
   687   000016                     ?___lwdiv:
   688                           	callstack 0
   689   000016                     ?___lmul:
   690                           	callstack 0
   691   000016                     get16bitTMR0val@timer_high:
   692                           	callstack 0
   693   000016                     ___awdiv@quotient:
   694                           	callstack 0
   695   000016                     ___lwdiv@dividend:
   696                           	callstack 0
   697   000016                     ___lmul@multiplier:
   698                           	callstack 0
   699                           
   700                           ; 4 bytes @ 0x15
   701   000016                     	ds	2
   702   000018                     batteryLevel@batteryVoltage:
   703                           	callstack 0
   704   000018                     get16bitTMR0val@timer_val:
   705                           	callstack 0
   706   000018                     ___lwdiv@divisor:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x17
   710   000018                     	ds	1
   711   000019                     batteryLevel@batteryQuarter:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x18
   715   000019                     	ds	1
   716   00001A                     ___lwdiv@counter:
   717                           	callstack 0
   718   00001A                     ___lmul@multiplicand:
   719                           	callstack 0
   720   00001A                     color_detect@red:
   721                           	callstack 0
   722                           
   723                           ; 6 bytes @ 0x19
   724   00001A                     	ds	1
   725   00001B                     ___lwdiv@quotient:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x1A
   729   00001B                     	ds	2
   730   00001D                     ??_color_clear_init_interrupts:
   731   00001D                     setMotorPWM@m:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x1C
   735   00001D                     	ds	1
   736   00001E                     color_clear_init_interrupts@high_threshold:
   737                           	callstack 0
   738   00001E                     ___lmul@product:
   739                           	callstack 0
   740                           
   741                           ; 4 bytes @ 0x1D
   742   00001E                     	ds	1
   743   00001F                     ??_setMotorPWM:
   744                           
   745                           ; 1 bytes @ 0x1E
   746   00001F                     	ds	1
   747   000020                     color_clear_init_interrupts@low_threshold:
   748                           	callstack 0
   749   000020                     color_detect@green:
   750                           	callstack 0
   751                           
   752                           ; 6 bytes @ 0x1F
   753   000020                     	ds	1
   754   000021                     setMotorPWM@posDuty:
   755                           	callstack 0
   756                           
   757                           ; 1 bytes @ 0x20
   758   000021                     	ds	1
   759   000022                     ??_color_click_init:
   760   000022                     ?___aldiv:
   761                           	callstack 0
   762   000022                     setMotorPWM@negDuty:
   763                           	callstack 0
   764   000022                     ___aldiv@dividend:
   765                           	callstack 0
   766                           
   767                           ; 4 bytes @ 0x21
   768   000022                     	ds	1
   769   000023                     stop@mL:
   770                           	callstack 0
   771   000023                     turnLeft@mL:
   772                           	callstack 0
   773   000023                     turnRight@mL:
   774                           	callstack 0
   775   000023                     fullSpeedAhead@mL:
   776                           	callstack 0
   777   000023                     reverseOneSquare@mL:
   778                           	callstack 0
   779   000023                     wallAdjust@mL:
   780                           	callstack 0
   781   000023                     reverseWallAdjust@mL:
   782                           	callstack 0
   783   000023                     reverseShort@mL:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x22
   787   000023                     	ds	2
   788   000025                     stop@mR:
   789                           	callstack 0
   790   000025                     turnLeft@mR:
   791                           	callstack 0
   792   000025                     turnRight@mR:
   793                           	callstack 0
   794   000025                     fullSpeedAhead@mR:
   795                           	callstack 0
   796   000025                     reverseOneSquare@mR:
   797                           	callstack 0
   798   000025                     wallAdjust@mR:
   799                           	callstack 0
   800   000025                     reverseWallAdjust@mR:
   801                           	callstack 0
   802   000025                     reverseShort@mR:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x24
   806   000025                     	ds	1
   807   000026                     ___aldiv@divisor:
   808                           	callstack 0
   809   000026                     color_detect@blue:
   810                           	callstack 0
   811                           
   812                           ; 6 bytes @ 0x25
   813   000026                     	ds	1
   814   000027                     stop@straightRamp:
   815                           	callstack 0
   816   000027                     turnLeft@turnSpeed:
   817                           	callstack 0
   818   000027                     turnRight@turnSpeed:
   819                           	callstack 0
   820   000027                     fullSpeedAhead@straightSpeed:
   821                           	callstack 0
   822   000027                     reverseOneSquare@straightSpeed:
   823                           	callstack 0
   824   000027                     wallAdjust@straightSpeed:
   825                           	callstack 0
   826   000027                     reverseWallAdjust@straightSpeed:
   827                           	callstack 0
   828   000027                     reverseShort@straightSpeed:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x26
   832   000027                     	ds	1
   833   000028                     ??_stop:
   834   000028                     turnLeft@turnDuration:
   835                           	callstack 0
   836   000028                     turnRight@turnDuration:
   837                           	callstack 0
   838   000028                     fullSpeedAhead@straightRamp:
   839                           	callstack 0
   840   000028                     wallAdjust@straightRamp:
   841                           	callstack 0
   842   000028                     reverseWallAdjust@straightRamp:
   843                           	callstack 0
   844   000028                     reverseShort@straightRamp:
   845                           	callstack 0
   846   000028                     reverseOneSquare@reverseDuration:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x27
   850   000028                     	ds	1
   851   000029                     ??_fullSpeedAhead:
   852   000029                     ??_wallAdjust:
   853   000029                     ??_reverseShort:
   854   000029                     ??_reverseWallAdjust:
   855   000029                     turnLeft@turnRamp:
   856                           	callstack 0
   857   000029                     turnRight@turnRamp:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x28
   861   000029                     	ds	1
   862   00002A                     ??_turnRight:
   863   00002A                     ??_turnLeft:
   864   00002A                     reverseOneSquare@straightRamp:
   865                           	callstack 0
   866   00002A                     ___aldiv@counter:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x29
   870   00002A                     	ds	1
   871   00002B                     ??_reverseOneSquare:
   872   00002B                     ___aldiv@sign:
   873                           	callstack 0
   874   00002B                     stop@i:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x2A
   878   00002B                     	ds	1
   879   00002C                     wallAdjust@adjustDuration:
   880                           	callstack 0
   881   00002C                     reverseWallAdjust@reverseAdjustDuration:
   882                           	callstack 0
   883   00002C                     reverseShort@shortReverseDuration:
   884                           	callstack 0
   885   00002C                     fullSpeedAhead@i:
   886                           	callstack 0
   887   00002C                     ___aldiv@quotient:
   888                           	callstack 0
   889   00002C                     color_detect@yellow:
   890                           	callstack 0
   891                           
   892                           ; 6 bytes @ 0x2B
   893   00002C                     	ds	1
   894   00002D                     wallAdjust@wallReverseDuration:
   895                           	callstack 0
   896   00002D                     reverseWallAdjust@reverseWallSpeed:
   897                           	callstack 0
   898   00002D                     stop@cur_power:
   899                           	callstack 0
   900   00002D                     turnLeft@i:
   901                           	callstack 0
   902   00002D                     turnRight@i:
   903                           	callstack 0
   904   00002D                     reverseShort@i:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x2C
   908   00002D                     	ds	1
   909   00002E                     wallAdjust@wallSpeed:
   910                           	callstack 0
   911   00002E                     fullSpeedAhead@cur_power:
   912                           	callstack 0
   913   00002E                     reverseOneSquare@i:
   914                           	callstack 0
   915   00002E                     reverseWallAdjust@i:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x2D
   919   00002E                     	ds	1
   920   00002F                     turnLeft@cur_power:
   921                           	callstack 0
   922   00002F                     turnRight@cur_power:
   923                           	callstack 0
   924   00002F                     wallAdjust@i:
   925                           	callstack 0
   926   00002F                     reverseShort@cur_power:
   927                           	callstack 0
   928                           
   929                           ; 2 bytes @ 0x2E
   930   00002F                     	ds	1
   931   000030                     reverseOneSquare@cur_power:
   932                           	callstack 0
   933   000030                     reverseWallAdjust@cur_power:
   934                           	callstack 0
   935   000030                     rgb_2_hsv@RGBC:
   936                           	callstack 0
   937                           
   938                           ; 8 bytes @ 0x2F
   939   000030                     	ds	1
   940   000031                     wallAdjust@cur_power:
   941                           	callstack 0
   942   000031                     calibration@mL:
   943                           	callstack 0
   944                           
   945                           ; 2 bytes @ 0x30
   946   000031                     	ds	1
   947   000032                     returnHome@mL:
   948                           	callstack 0
   949   000032                     color_detect@pink:
   950                           	callstack 0
   951                           
   952                           ; 6 bytes @ 0x31
   953   000032                     	ds	1
   954   000033                     calibration@mR:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x32
   958   000033                     	ds	1
   959   000034                     returnHome@mR:
   960                           	callstack 0
   961                           
   962                           ; 2 bytes @ 0x33
   963   000034                     	ds	1
   964   000035                     calibration@turnSpeed:
   965                           	callstack 0
   966                           
   967                           ; 1 bytes @ 0x34
   968   000035                     	ds	1
   969   000036                     returnHome@moveSequence:
   970                           	callstack 0
   971   000036                     calibration@turnDuration:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x35
   975   000036                     	ds	2
   976   000038                     calibration@turnRamp:
   977                           	callstack 0
   978   000038                     rgb_2_hsv@HSV:
   979                           	callstack 0
   980   000038                     returnHome@straightTime:
   981                           	callstack 0
   982   000038                     color_detect@orange:
   983                           	callstack 0
   984                           
   985                           ; 6 bytes @ 0x37
   986   000038                     	ds	1
   987   000039                     ??_calibration:
   988                           
   989                           ; 1 bytes @ 0x38
   990   000039                     	ds	1
   991   00003A                     ??_rgb_2_hsv:
   992   00003A                     returnHome@curMove:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x39
   996   00003A                     	ds	1
   997   00003B                     returnHome@straightSpeed:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x3A
  1001   00003B                     	ds	1
  1002   00003C                     ??_color_calibration:
  1003   00003C                     returnHome@reverseDuration:
  1004                           	callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x3B
  1007   00003C                     	ds	2
  1008   00003E                     returnHome@straightRamp:
  1009                           	callstack 0
  1010   00003E                     color_detect@lightblue:
  1011                           	callstack 0
  1012                           
  1013                           ; 6 bytes @ 0x3D
  1014   00003E                     	ds	1
  1015   00003F                     returnHome@turnSpeed:
  1016                           	callstack 0
  1017                           
  1018                           ; 1 bytes @ 0x3E
  1019   00003F                     	ds	1
  1020   000040                     returnHome@turnDuration:
  1021                           	callstack 0
  1022                           
  1023                           ; 1 bytes @ 0x3F
  1024   000040                     	ds	1
  1025   000041                     returnHome@turnRamp:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x40
  1029   000041                     	ds	1
  1030   000042                     ??_returnHome:
  1031                           
  1032                           ; 1 bytes @ 0x41
  1033   000042                     	ds	2
  1034   000044                     color_detect@white:
  1035                           	callstack 0
  1036                           
  1037                           ; 6 bytes @ 0x43
  1038   000044                     	ds	4
  1039   000048                     returnHome@i:
  1040                           	callstack 0
  1041                           
  1042                           ; 1 bytes @ 0x47
  1043   000048                     	ds	1
  1044   000049                     ??_move:
  1045                           
  1046                           ; 1 bytes @ 0x48
  1047   000049                     	ds	1
  1048   00004A                     color_detect@color:
  1049                           	callstack 0
  1050                           
  1051                           ; 1 bytes @ 0x49
  1052   00004A                     	ds	1
  1053                           
  1054 ;;
  1055 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1056 ;;
  1057 ;; *************** function _main *****************
  1058 ;; Defined at:
  1059 ;;		line 28 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  straightTime   82    0[BANK1 ] unsigned int [41]
  1064 ;;  moveSequence   40   82[BANK1 ] unsigned char [40]
  1065 ;;  motorL         10  206[BANK1 ] struct DC_motor
  1066 ;;  motorR         10  196[BANK1 ] struct DC_motor
  1067 ;;  RGBC            8  188[BANK1 ] struct RGBC_val
  1068 ;;  RGBC_n          8    0        struct RGBC_val
  1069 ;;  HSV             6  182[BANK1 ] struct HSV_val
  1070 ;;  white           6  172[BANK1 ] struct HSV_calib
  1071 ;;  lightblue       6  166[BANK1 ] struct HSV_calib
  1072 ;;  orange          6  160[BANK1 ] struct HSV_calib
  1073 ;;  pink            6  154[BANK1 ] struct HSV_calib
  1074 ;;  yellow          6  148[BANK1 ] struct HSV_calib
  1075 ;;  blue            6  142[BANK1 ] struct HSV_calib
  1076 ;;  green           6  136[BANK1 ] struct HSV_calib
  1077 ;;  red             6  130[BANK1 ] struct HSV_calib
  1078 ;;  PWMcycle        2    0        unsigned int 
  1079 ;;  ambientNew      2  125[BANK1 ] unsigned int 
  1080 ;;  reverseDurat    2  122[BANK1 ] unsigned int 
  1081 ;;  turnDuration    1  181[BANK1 ] unsigned char 
  1082 ;;  color           1  180[BANK1 ] unsigned char 
  1083 ;;  straightRamp    1  179[BANK1 ] unsigned char 
  1084 ;;  curMove         1  178[BANK1 ] unsigned char 
  1085 ;;  straightSpee    1  129[BANK1 ] unsigned char 
  1086 ;;  turnRamp        1  128[BANK1 ] unsigned char 
  1087 ;;  turnSpeed       1  127[BANK1 ] unsigned char 
  1088 ;;  wall            1  124[BANK1 ] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1099 ;;      Locals:         0       0     216       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1100 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1101 ;;      Totals:         0       2     216       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1102 ;;Total ram usage:      218 bytes
  1103 ;; Hardware stack levels required when called: 11
  1104 ;; This function calls:
  1105 ;;		_Buggy_init
  1106 ;;		_Interrupts_init
  1107 ;;		_Timer0_init
  1108 ;;		_batteryLevel
  1109 ;;		_calibration
  1110 ;;		_color_calibration
  1111 ;;		_color_clear_init_interrupts
  1112 ;;		_color_click_init
  1113 ;;		_color_detect
  1114 ;;		_color_read
  1115 ;;		_fullSpeedAhead
  1116 ;;		_get16bitTMR0val
  1117 ;;		_initDCmotorsPWM
  1118 ;;		_move
  1119 ;;		_resetTimer
  1120 ;;		_rgb_2_hsv
  1121 ;;		_stop
  1122 ;;		_wallAdjust
  1123 ;;		_white_Light
  1124 ;; This function is called by:
  1125 ;;		Startup code after reset
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text0
  1130   002352                     __ptext0:
  1131                           	callstack 0
  1132   002352                     _main:
  1133                           	callstack 20
  1134   002352                     
  1135                           ;main.c: 34:     unsigned int ambientNew;;main.c: 35:     char wall = 0;
  1136   002352  0E00               	movlw	0
  1137   002354  0101               	movlb	1	; () banked
  1138   002356  6F7C               	movwf	main@wall& (0+255),b
  1139                           
  1140                           ;main.c: 36:     unsigned char color = 0;
  1141   002358  0E00               	movlw	0
  1142   00235A  6FB4               	movwf	main@color& (0+255),b
  1143   00235C                     
  1144                           ; BSR set to: 1
  1145                           ;main.c: 39:     unsigned char moveSequence[40] = {0};
  1146   00235C  EE21  F052         	lfsr	2,main@moveSequence
  1147   002360  0E27               	movlw	39
  1148   002362                     u4771:
  1149   002362  6ADE               	clrf	postinc2,c
  1150   002364  06E8               	decf	wreg,f,c
  1151   002366  E2FD               	bc	u4771
  1152   002368                     
  1153                           ; BSR set to: 1
  1154                           ;main.c: 40:     unsigned int straightTime[41] = {0};
  1155   002368  EE21  F000         	lfsr	2,main@straightTime
  1156   00236C  0E51               	movlw	81
  1157   00236E                     u4781:
  1158   00236E  6ADE               	clrf	postinc2,c
  1159   002370  06E8               	decf	wreg,f,c
  1160   002372  E2FD               	bc	u4781
  1161                           
  1162                           ;main.c: 41:     char curMove = 0;
  1163   002374  0E00               	movlw	0
  1164   002376  6FB2               	movwf	main@curMove& (0+255),b
  1165   002378                     
  1166                           ; BSR set to: 1
  1167                           ;main.c: 46:     struct RGBC_val RGBC, RGBC_n;;main.c: 47:     struct HSV_val HSV;;main.
      +                          c: 48:     struct DC_motor motorL, motorR;;main.c: 51:     Buggy_init();
  1168   002378  EC4A  F025         	call	_Buggy_init	;wreg free
  1169   00237C                     
  1170                           ;main.c: 52:     color_click_init();
  1171   00237C  EC2E  F025         	call	_color_click_init	;wreg free
  1172   002380                     
  1173                           ;main.c: 54:     initDCmotorsPWM(PWMcycle);
  1174   002380  0E00               	movlw	0
  1175   002382  6E11               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1176   002384  0EC7               	movlw	199
  1177   002386  6E10               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1178   002388  ECD1  F023         	call	_initDCmotorsPWM	;wreg free
  1179   00238C                     
  1180                           ;main.c: 55:     Timer0_init();
  1181   00238C  EC28  F026         	call	_Timer0_init	;wreg free
  1182   002390                     
  1183                           ;main.c: 56:     Interrupts_init();
  1184   002390  EC61  F026         	call	_Interrupts_init	;wreg free
  1185   002394                     
  1186                           ;main.c: 58:     motorL.power=0;
  1187   002394  0E00               	movlw	0
  1188   002396  0101               	movlb	1	; () banked
  1189   002398  6FCE               	movwf	main@motorL& (0+255),b
  1190   00239A                     
  1191                           ; BSR set to: 1
  1192                           ;main.c: 59:     motorL.direction=1;
  1193   00239A  0E01               	movlw	1
  1194   00239C  6FCF               	movwf	(main@motorL+1)& (0+255),b
  1195   00239E                     
  1196                           ; BSR set to: 1
  1197                           ;main.c: 60:     motorL.brakemode=1;
  1198   00239E  0E01               	movlw	1
  1199   0023A0  6FD0               	movwf	(main@motorL+2)& (0+255),b
  1200   0023A2                     
  1201                           ; BSR set to: 1
  1202                           ;main.c: 61:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1203   0023A2  0EAA               	movlw	170
  1204   0023A4  6FD3               	movwf	(main@motorL+5)& (0+255),b
  1205   0023A6  0E0F               	movlw	15
  1206   0023A8  6FD4               	movwf	(main@motorL+6)& (0+255),b
  1207   0023AA                     
  1208                           ; BSR set to: 1
  1209                           ;main.c: 62:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1210   0023AA  0EA6               	movlw	166
  1211   0023AC  6FD5               	movwf	(main@motorL+7)& (0+255),b
  1212   0023AE  0E0F               	movlw	15
  1213   0023B0  6FD6               	movwf	(main@motorL+8)& (0+255),b
  1214   0023B2                     
  1215                           ; BSR set to: 1
  1216                           ;main.c: 63:     motorL.PWMperiod=PWMcycle;
  1217   0023B2  0E00               	movlw	0
  1218   0023B4  6FD2               	movwf	(main@motorL+4)& (0+255),b
  1219   0023B6  0EC7               	movlw	199
  1220   0023B8  6FD1               	movwf	(main@motorL+3)& (0+255),b
  1221   0023BA                     
  1222                           ; BSR set to: 1
  1223                           ;main.c: 64:     motorL.compensation=2;
  1224   0023BA  0E02               	movlw	2
  1225   0023BC  6FD7               	movwf	(main@motorL+9)& (0+255),b
  1226   0023BE                     
  1227                           ; BSR set to: 1
  1228                           ;main.c: 66:     motorR.power=0;
  1229   0023BE  0E00               	movlw	0
  1230   0023C0  6FC4               	movwf	main@motorR& (0+255),b
  1231   0023C2                     
  1232                           ; BSR set to: 1
  1233                           ;main.c: 67:     motorR.direction=1;
  1234   0023C2  0E01               	movlw	1
  1235   0023C4  6FC5               	movwf	(main@motorR+1)& (0+255),b
  1236   0023C6                     
  1237                           ; BSR set to: 1
  1238                           ;main.c: 68:     motorR.brakemode=1;
  1239   0023C6  0E01               	movlw	1
  1240   0023C8  6FC6               	movwf	(main@motorR+2)& (0+255),b
  1241   0023CA                     
  1242                           ; BSR set to: 1
  1243                           ;main.c: 69:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1244   0023CA  0E25               	movlw	37
  1245   0023CC  6FC9               	movwf	(main@motorR+5)& (0+255),b
  1246   0023CE  0E0F               	movlw	15
  1247   0023D0  6FCA               	movwf	(main@motorR+6)& (0+255),b
  1248   0023D2                     
  1249                           ; BSR set to: 1
  1250                           ;main.c: 70:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1251   0023D2  0E21               	movlw	33
  1252   0023D4  6FCB               	movwf	(main@motorR+7)& (0+255),b
  1253   0023D6  0E0F               	movlw	15
  1254   0023D8  6FCC               	movwf	(main@motorR+8)& (0+255),b
  1255   0023DA                     
  1256                           ; BSR set to: 1
  1257                           ;main.c: 71:     motorR.PWMperiod=PWMcycle;
  1258   0023DA  0E00               	movlw	0
  1259   0023DC  6FC8               	movwf	(main@motorR+4)& (0+255),b
  1260   0023DE  0EC7               	movlw	199
  1261   0023E0  6FC7               	movwf	(main@motorR+3)& (0+255),b
  1262   0023E2                     
  1263                           ; BSR set to: 1
  1264                           ;main.c: 72:     motorR.compensation=0;
  1265   0023E2  0E00               	movlw	0
  1266   0023E4  6FCD               	movwf	(main@motorR+9)& (0+255),b
  1267   0023E6                     
  1268                           ; BSR set to: 1
  1269                           ;main.c: 75:     char straightSpeed=20;
  1270   0023E6  0E14               	movlw	20
  1271   0023E8  6F81               	movwf	main@straightSpeed& (0+255),b
  1272   0023EA                     
  1273                           ; BSR set to: 1
  1274                           ;main.c: 76:     unsigned char straightRamp=2;
  1275   0023EA  0E02               	movlw	2
  1276   0023EC  6FB3               	movwf	main@straightRamp& (0+255),b
  1277   0023EE                     
  1278                           ; BSR set to: 1
  1279                           ;main.c: 78:     unsigned int reverseDuration=800;
  1280   0023EE  0E03               	movlw	3
  1281   0023F0  6F7B               	movwf	(main@reverseDuration+1)& (0+255),b
  1282   0023F2  0E20               	movlw	32
  1283   0023F4  6F7A               	movwf	main@reverseDuration& (0+255),b
  1284   0023F6                     
  1285                           ; BSR set to: 1
  1286                           ;main.c: 80:     char turnSpeed=40;
  1287   0023F6  0E28               	movlw	40
  1288   0023F8  6F7F               	movwf	main@turnSpeed& (0+255),b
  1289   0023FA                     
  1290                           ; BSR set to: 1
  1291                           ;main.c: 81:     unsigned char turnDuration=10;
  1292   0023FA  0E0A               	movlw	10
  1293   0023FC  6FB5               	movwf	main@turnDuration& (0+255),b
  1294   0023FE                     
  1295                           ; BSR set to: 1
  1296                           ;main.c: 82:     unsigned char turnRamp=1;
  1297   0023FE  0E01               	movlw	1
  1298   002400  6F80               	movwf	main@turnRamp& (0+255),b
  1299   002402                     
  1300                           ; BSR set to: 1
  1301                           ;main.c: 85:     batteryLevel();
  1302   002402  ECC2  F024         	call	_batteryLevel	;wreg free
  1303   002406                     l83:
  1304   002406  B48E               	btfsc	142,2,c	;volatile
  1305   002408  EF08  F012         	goto	u4791
  1306   00240C  EF0A  F012         	goto	u4790
  1307   002410                     u4791:
  1308   002410  EF03  F012         	goto	l83
  1309   002414                     u4790:
  1310   002414                     
  1311                           ;main.c: 89:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1312   002414  9680               	bcf	128,3,c	;volatile
  1313   002416  9E7C               	bcf	124,7,c	;volatile
  1314                           
  1315                           ;main.c: 92:     LATHbits.LATH1=LATDbits.LATD3=1;
  1316   002418  867C               	bsf	124,3,c	;volatile
  1317   00241A  8280               	bsf	128,1,c	;volatile
  1318   00241C                     
  1319                           ;main.c: 93:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1320   00241C  0E29               	movlw	41
  1321   00241E  0100               	movlb	0	; () banked
  1322   002420  6FFD               	movwf	(??_main+1)& (0+255),b
  1323   002422  0E96               	movlw	150
  1324   002424  6FFC               	movwf	??_main& (0+255),b
  1325   002426  0E7F               	movlw	127
  1326   002428                     u5057:
  1327   002428  2EE8               	decfsz	wreg,f,c
  1328   00242A  D7FE               	bra	u5057
  1329   00242C  2FFC               	decfsz	??_main& (0+255),f,b
  1330   00242E  D7FC               	bra	u5057
  1331   002430  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  1332   002432  D7FA               	bra	u5057
  1333   002434                     
  1334                           ;main.c: 96:     struct HSV_calib red, green, blue, yellow, pink, orange, lightblue, whi
      +                          te;;main.c: 97:     color_calibration(&RGBC, &HSV, &red, &green, &blue, &yellow, &pink, 
      +                          &orange, &lightblue, &white);
  1335   002434  0EBC               	movlw	low main@RGBC
  1336   002436  0100               	movlb	0	; () banked
  1337   002438  6FE8               	movwf	color_calibration@RGBC& (0+255),b
  1338   00243A  0E01               	movlw	high main@RGBC
  1339   00243C  6FE9               	movwf	(color_calibration@RGBC+1)& (0+255),b
  1340   00243E  0EB6               	movlw	low main@HSV
  1341   002440  6FEA               	movwf	color_calibration@HSV& (0+255),b
  1342   002442  0E01               	movlw	high main@HSV
  1343   002444  6FEB               	movwf	(color_calibration@HSV+1)& (0+255),b
  1344   002446  0E82               	movlw	low main@red
  1345   002448  6FEC               	movwf	color_calibration@red& (0+255),b
  1346   00244A  0E01               	movlw	high main@red
  1347   00244C  6FED               	movwf	(color_calibration@red+1)& (0+255),b
  1348   00244E  0E88               	movlw	low main@green
  1349   002450  6FEE               	movwf	color_calibration@green& (0+255),b
  1350   002452  0E01               	movlw	high main@green
  1351   002454  6FEF               	movwf	(color_calibration@green+1)& (0+255),b
  1352   002456  0E8E               	movlw	low main@blue
  1353   002458  6FF0               	movwf	color_calibration@blue& (0+255),b
  1354   00245A  0E01               	movlw	high main@blue
  1355   00245C  6FF1               	movwf	(color_calibration@blue+1)& (0+255),b
  1356   00245E  0E94               	movlw	low main@yellow
  1357   002460  6FF2               	movwf	color_calibration@yellow& (0+255),b
  1358   002462  0E01               	movlw	high main@yellow
  1359   002464  6FF3               	movwf	(color_calibration@yellow+1)& (0+255),b
  1360   002466  0E9A               	movlw	low main@pink
  1361   002468  6FF4               	movwf	color_calibration@pink& (0+255),b
  1362   00246A  0E01               	movlw	high main@pink
  1363   00246C  6FF5               	movwf	(color_calibration@pink+1)& (0+255),b
  1364   00246E  0EA0               	movlw	low main@orange
  1365   002470  6FF6               	movwf	color_calibration@orange& (0+255),b
  1366   002472  0E01               	movlw	high main@orange
  1367   002474  6FF7               	movwf	(color_calibration@orange+1)& (0+255),b
  1368   002476  0EA6               	movlw	low main@lightblue
  1369   002478  6FF8               	movwf	color_calibration@lightblue& (0+255),b
  1370   00247A  0E01               	movlw	high main@lightblue
  1371   00247C  6FF9               	movwf	(color_calibration@lightblue+1)& (0+255),b
  1372   00247E  0EAC               	movlw	low main@white
  1373   002480  6FFA               	movwf	color_calibration@white& (0+255),b
  1374   002482  0E01               	movlw	high main@white
  1375   002484  6FFB               	movwf	(color_calibration@white+1)& (0+255),b
  1376   002486  ECCB  F00E         	call	_color_calibration	;wreg free
  1377   00248A                     
  1378                           ;main.c: 100:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
  1379   00248A  0ECE               	movlw	low main@motorL
  1380   00248C  6E31               	movwf	calibration@mL^0,c
  1381   00248E  0E01               	movlw	high main@motorL
  1382   002490  6E32               	movwf	(calibration@mL+1)^0,c
  1383   002492  0EC4               	movlw	low main@motorR
  1384   002494  6E33               	movwf	calibration@mR^0,c
  1385   002496  0E01               	movlw	high main@motorR
  1386   002498  6E34               	movwf	(calibration@mR+1)^0,c
  1387   00249A  0E28               	movlw	40
  1388   00249C  6E35               	movwf	calibration@turnSpeed^0,c
  1389   00249E  0EB5               	movlw	low main@turnDuration
  1390   0024A0  6E36               	movwf	calibration@turnDuration^0,c
  1391   0024A2  0E01               	movlw	high main@turnDuration
  1392   0024A4  6E37               	movwf	(calibration@turnDuration+1)^0,c
  1393   0024A6  0E01               	movlw	1
  1394   0024A8  6E38               	movwf	calibration@turnRamp^0,c
  1395   0024AA  EC96  F019         	call	_calibration	;wreg free
  1396   0024AE                     
  1397                           ;main.c: 111:     white_Light(1);
  1398   0024AE  0E01               	movlw	1
  1399   0024B0  ECF5  F025         	call	_white_Light
  1400   0024B4                     
  1401                           ;main.c: 112:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1402   0024B4  0E52               	movlw	82
  1403   0024B6  0100               	movlb	0	; () banked
  1404   0024B8  6FFD               	movwf	(??_main+1)& (0+255),b
  1405   0024BA  0E2B               	movlw	43
  1406   0024BC  6FFC               	movwf	??_main& (0+255),b
  1407   0024BE  0E00               	movlw	0
  1408   0024C0                     u5067:
  1409   0024C0  2EE8               	decfsz	wreg,f,c
  1410   0024C2  D7FE               	bra	u5067
  1411   0024C4  2FFC               	decfsz	??_main& (0+255),f,b
  1412   0024C6  D7FC               	bra	u5067
  1413   0024C8  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  1414   0024CA  D7FA               	bra	u5067
  1415   0024CC  0000               	nop	
  1416   0024CE                     
  1417                           ;main.c: 115:     color_read(&RGBC);
  1418   0024CE  0EBC               	movlw	low main@RGBC
  1419   0024D0  6E14               	movwf	color_read@RGBC^0,c
  1420   0024D2  0E01               	movlw	high main@RGBC
  1421   0024D4  6E15               	movwf	(color_read@RGBC+1)^0,c
  1422   0024D6  ECD5  F01C         	call	_color_read	;wreg free
  1423   0024DA                     
  1424                           ;main.c: 116:     ambient=RGBC.C;
  1425   0024DA  C1C2  F1D8         	movff	main@RGBC+6,_ambient
  1426   0024DE  C1C3  F1D9         	movff	main@RGBC+7,_ambient+1
  1427   0024E2                     
  1428                           ;main.c: 117:     color_clear_init_interrupts();
  1429   0024E2  EC2B  F023         	call	_color_clear_init_interrupts	;wreg free
  1430   0024E6                     
  1431                           ;main.c: 118:     _delay((unsigned long)((10)*(64000000/4000.0)));
  1432   0024E6  0ED0               	movlw	208
  1433   0024E8  0100               	movlb	0	; () banked
  1434   0024EA  6FFC               	movwf	??_main& (0+255),b
  1435   0024EC  0EC9               	movlw	201
  1436   0024EE                     u5077:
  1437   0024EE  2EE8               	decfsz	wreg,f,c
  1438   0024F0  D7FE               	bra	u5077
  1439   0024F2  2FFC               	decfsz	??_main& (0+255),f,b
  1440   0024F4  D7FC               	bra	u5077
  1441   0024F6  D000               	nop2	
  1442   0024F8                     
  1443                           ;main.c: 121:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1444   0024F8  0ECE               	movlw	low main@motorL
  1445   0024FA  6E23               	movwf	fullSpeedAhead@mL^0,c
  1446   0024FC  0E01               	movlw	high main@motorL
  1447   0024FE  6E24               	movwf	(fullSpeedAhead@mL+1)^0,c
  1448   002500  0EC4               	movlw	low main@motorR
  1449   002502  6E25               	movwf	fullSpeedAhead@mR^0,c
  1450   002504  0E01               	movlw	high main@motorR
  1451   002506  6E26               	movwf	(fullSpeedAhead@mR+1)^0,c
  1452   002508  0E14               	movlw	20
  1453   00250A  6E27               	movwf	fullSpeedAhead@straightSpeed^0,c
  1454   00250C  0E02               	movlw	2
  1455   00250E  6E28               	movwf	fullSpeedAhead@straightRamp^0,c
  1456   002510  EC56  F022         	call	_fullSpeedAhead	;wreg free
  1457   002514                     
  1458                           ;main.c: 122:     resetTimer();
  1459   002514  EC76  F026         	call	_resetTimer	;wreg free
  1460   002518                     
  1461                           ;main.c: 125:     brightnessChange=0;
  1462   002518  0E00               	movlw	0
  1463   00251A  0101               	movlb	1	; () banked
  1464   00251C  6FDA               	movwf	_brightnessChange& (0+255),b
  1465   00251E                     
  1466                           ; BSR set to: 1
  1467                           ;main.c: 126:     lost=0;
  1468   00251E  0E00               	movlw	0
  1469   002520  6E4B               	movwf	_lost^0,c
  1470   002522                     l5699:
  1471                           
  1472                           ; BSR set to: 1
  1473                           ;main.c: 129:         if (brightnessChange == 1) {
  1474   002522  05DA               	decf	_brightnessChange& (0+255),w,b
  1475   002524  A4D8               	btfss	status,2,c
  1476   002526  EF97  F012         	goto	u4801
  1477   00252A  EF99  F012         	goto	u4800
  1478   00252E                     u4801:
  1479   00252E  EFC7  F012         	goto	l5717
  1480   002532                     u4800:
  1481   002532                     
  1482                           ; BSR set to: 1
  1483                           ;main.c: 132:             color_read(&RGBC);
  1484   002532  0EBC               	movlw	low main@RGBC
  1485   002534  6E14               	movwf	color_read@RGBC^0,c
  1486   002536  0E01               	movlw	high main@RGBC
  1487   002538  6E15               	movwf	(color_read@RGBC+1)^0,c
  1488   00253A  ECD5  F01C         	call	_color_read	;wreg free
  1489   00253E                     
  1490                           ;main.c: 133:             ambientNew=RGBC.C;
  1491   00253E  C1C2  F17D         	movff	main@RGBC+6,main@ambientNew
  1492   002542  C1C3  F17E         	movff	main@RGBC+7,main@ambientNew+1
  1493   002546                     
  1494                           ;main.c: 135:             if (ambientNew <= ambient) {
  1495   002546  0101               	movlb	1	; () banked
  1496   002548  517D               	movf	main@ambientNew& (0+255),w,b
  1497   00254A  5DD8               	subwf	_ambient& (0+255),w,b
  1498   00254C  517E               	movf	(main@ambientNew+1)& (0+255),w,b
  1499   00254E  59D9               	subwfb	(_ambient+1)& (0+255),w,b
  1500   002550  A0D8               	btfss	status,0,c
  1501   002552  EFAD  F012         	goto	u4811
  1502   002556  EFAF  F012         	goto	u4810
  1503   00255A                     u4811:
  1504   00255A  EFC3  F012         	goto	l5715
  1505   00255E                     u4810:
  1506   00255E                     
  1507                           ; BSR set to: 1
  1508                           ;main.c: 136:                 ambient = ambientNew;
  1509   00255E  C17D  F1D8         	movff	main@ambientNew,_ambient
  1510   002562  C17E  F1D9         	movff	main@ambientNew+1,_ambient+1
  1511   002566                     
  1512                           ; BSR set to: 1
  1513                           ;main.c: 137:                 color_clear_init_interrupts();
  1514   002566  EC2B  F023         	call	_color_clear_init_interrupts	;wreg free
  1515   00256A                     
  1516                           ;main.c: 138:                 _delay((unsigned long)((10)*(64000000/4000.0)));
  1517   00256A  0ED0               	movlw	208
  1518   00256C  0100               	movlb	0	; () banked
  1519   00256E  6FFC               	movwf	??_main& (0+255),b
  1520   002570  0EC9               	movlw	201
  1521   002572                     u5087:
  1522   002572  2EE8               	decfsz	wreg,f,c
  1523   002574  D7FE               	bra	u5087
  1524   002576  2FFC               	decfsz	??_main& (0+255),f,b
  1525   002578  D7FC               	bra	u5087
  1526   00257A  D000               	nop2	
  1527   00257C                     
  1528                           ;main.c: 139:                 brightnessChange = 0;
  1529   00257C  0E00               	movlw	0
  1530   00257E  0101               	movlb	1	; () banked
  1531   002580  6FDA               	movwf	_brightnessChange& (0+255),b
  1532                           
  1533                           ;main.c: 140:             }
  1534   002582  EFC7  F012         	goto	l5717
  1535   002586                     l5715:
  1536                           
  1537                           ; BSR set to: 1
  1538                           ;main.c: 143:                 wall = 1;
  1539   002586  0E01               	movlw	1
  1540   002588  6F7C               	movwf	main@wall& (0+255),b
  1541                           
  1542                           ;main.c: 144:                 brightnessChange = 0;
  1543   00258A  0E00               	movlw	0
  1544   00258C  6FDA               	movwf	_brightnessChange& (0+255),b
  1545   00258E                     l5717:
  1546                           
  1547                           ; BSR set to: 1
  1548                           ;main.c: 148:         if (wall == 1) {
  1549   00258E  057C               	decf	main@wall& (0+255),w,b
  1550   002590  A4D8               	btfss	status,2,c
  1551   002592  EFCD  F012         	goto	u4821
  1552   002596  EFCF  F012         	goto	u4820
  1553   00259A                     u4821:
  1554   00259A  EFA8  F013         	goto	l5747
  1555   00259E                     u4820:
  1556   00259E                     
  1557                           ; BSR set to: 1
  1558                           ;main.c: 150:             PIE0bits.INT0IE=0;
  1559   00259E  010E               	movlb	14	; () banked
  1560   0025A0  9129               	bcf	41,0,b	;volatile
  1561   0025A2                     
  1562                           ; BSR set to: 14
  1563                           ;main.c: 151:             straightTime[curMove] = get16bitTMR0val();
  1564   0025A2  ECA6  F025         	call	_get16bitTMR0val	;wreg free
  1565   0025A6  0101               	movlb	1	; () banked
  1566   0025A8  51B2               	movf	main@curMove& (0+255),w,b
  1567   0025AA  0D02               	mullw	2
  1568   0025AC  0E00               	movlw	low main@straightTime
  1569   0025AE  24F3               	addwf	243,w,c
  1570   0025B0  6ED9               	movwf	fsr2l,c
  1571   0025B2  0E01               	movlw	high main@straightTime
  1572   0025B4  20F4               	addwfc	prodh,w,c
  1573   0025B6  6EDA               	movwf	fsr2h,c
  1574   0025B8  C010  FFDE         	movff	?_get16bitTMR0val,postinc2
  1575   0025BC  C011  FFDD         	movff	?_get16bitTMR0val+1,postdec2
  1576                           
  1577                           ;main.c: 154:             stop(&motorL, &motorR, straightRamp);
  1578   0025C0  0ECE               	movlw	low main@motorL
  1579   0025C2  6E23               	movwf	stop@mL^0,c
  1580   0025C4  0E01               	movlw	high main@motorL
  1581   0025C6  6E24               	movwf	(stop@mL+1)^0,c
  1582   0025C8  0EC4               	movlw	low main@motorR
  1583   0025CA  6E25               	movwf	stop@mR^0,c
  1584   0025CC  0E01               	movlw	high main@motorR
  1585   0025CE  6E26               	movwf	(stop@mR+1)^0,c
  1586   0025D0  C1B3  F027         	movff	main@straightRamp,stop@straightRamp
  1587   0025D4  ECD1  F021         	call	_stop	;wreg free
  1588                           
  1589                           ;main.c: 155:             wallAdjust(&motorL, &motorR, straightSpeed, straightRamp);
  1590   0025D8  0ECE               	movlw	low main@motorL
  1591   0025DA  6E23               	movwf	wallAdjust@mL^0,c
  1592   0025DC  0E01               	movlw	high main@motorL
  1593   0025DE  6E24               	movwf	(wallAdjust@mL+1)^0,c
  1594   0025E0  0EC4               	movlw	low main@motorR
  1595   0025E2  6E25               	movwf	wallAdjust@mR^0,c
  1596   0025E4  0E01               	movlw	high main@motorR
  1597   0025E6  6E26               	movwf	(wallAdjust@mR+1)^0,c
  1598   0025E8  C181  F027         	movff	main@straightSpeed,wallAdjust@straightSpeed
  1599   0025EC  C1B3  F028         	movff	main@straightRamp,wallAdjust@straightRamp
  1600   0025F0  ECC5  F015         	call	_wallAdjust	;wreg free
  1601   0025F4                     
  1602                           ;main.c: 156:             color_read(&RGBC);
  1603   0025F4  0EBC               	movlw	low main@RGBC
  1604   0025F6  6E14               	movwf	color_read@RGBC^0,c
  1605   0025F8  0E01               	movlw	high main@RGBC
  1606   0025FA  6E15               	movwf	(color_read@RGBC+1)^0,c
  1607   0025FC  ECD5  F01C         	call	_color_read	;wreg free
  1608   002600                     
  1609                           ;main.c: 157:             rgb_2_hsv(RGBC, &HSV);
  1610   002600  EE21  F0BC         	lfsr	2,main@RGBC
  1611   002604  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  1612   002608  0E07               	movlw	7
  1613   00260A                     u4831:
  1614   00260A  CFDB FFEB          	movff	plusw2,plusw0
  1615   00260E  06E8               	decf	wreg,f,c
  1616   002610  E2FC               	bc	u4831
  1617   002612  0EB6               	movlw	low main@HSV
  1618   002614  6E38               	movwf	rgb_2_hsv@HSV^0,c
  1619   002616  0E01               	movlw	high main@HSV
  1620   002618  6E39               	movwf	(rgb_2_hsv@HSV+1)^0,c
  1621   00261A  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  1622                           
  1623                           ;main.c: 158:             color = color_detect(HSV, red, green, blue, yellow, pink, oran
      +                          ge, lightblue, white);
  1624   00261E  EE21  F0B6         	lfsr	2,main@HSV
  1625   002622  EE00  F014         	lfsr	0,color_detect@HSV
  1626   002626  0E05               	movlw	5
  1627   002628                     u4841:
  1628   002628  CFDB FFEB          	movff	plusw2,plusw0
  1629   00262C  06E8               	decf	wreg,f,c
  1630   00262E  E2FC               	bc	u4841
  1631   002630  EE21  F082         	lfsr	2,main@red
  1632   002634  EE00  F01A         	lfsr	0,color_detect@red
  1633   002638  0E05               	movlw	5
  1634   00263A                     u4851:
  1635   00263A  CFDB FFEB          	movff	plusw2,plusw0
  1636   00263E  06E8               	decf	wreg,f,c
  1637   002640  E2FC               	bc	u4851
  1638   002642  EE21  F088         	lfsr	2,main@green
  1639   002646  EE00  F020         	lfsr	0,color_detect@green
  1640   00264A  0E05               	movlw	5
  1641   00264C                     u4861:
  1642   00264C  CFDB FFEB          	movff	plusw2,plusw0
  1643   002650  06E8               	decf	wreg,f,c
  1644   002652  E2FC               	bc	u4861
  1645   002654  EE21  F08E         	lfsr	2,main@blue
  1646   002658  EE00  F026         	lfsr	0,color_detect@blue
  1647   00265C  0E05               	movlw	5
  1648   00265E                     u4871:
  1649   00265E  CFDB FFEB          	movff	plusw2,plusw0
  1650   002662  06E8               	decf	wreg,f,c
  1651   002664  E2FC               	bc	u4871
  1652   002666  EE21  F094         	lfsr	2,main@yellow
  1653   00266A  EE00  F02C         	lfsr	0,color_detect@yellow
  1654   00266E  0E05               	movlw	5
  1655   002670                     u4881:
  1656   002670  CFDB FFEB          	movff	plusw2,plusw0
  1657   002674  06E8               	decf	wreg,f,c
  1658   002676  E2FC               	bc	u4881
  1659   002678  EE21  F09A         	lfsr	2,main@pink
  1660   00267C  EE00  F032         	lfsr	0,color_detect@pink
  1661   002680  0E05               	movlw	5
  1662   002682                     u4891:
  1663   002682  CFDB FFEB          	movff	plusw2,plusw0
  1664   002686  06E8               	decf	wreg,f,c
  1665   002688  E2FC               	bc	u4891
  1666   00268A  EE21  F0A0         	lfsr	2,main@orange
  1667   00268E  EE00  F038         	lfsr	0,color_detect@orange
  1668   002692  0E05               	movlw	5
  1669   002694                     u4901:
  1670   002694  CFDB FFEB          	movff	plusw2,plusw0
  1671   002698  06E8               	decf	wreg,f,c
  1672   00269A  E2FC               	bc	u4901
  1673   00269C  EE21  F0A6         	lfsr	2,main@lightblue
  1674   0026A0  EE00  F03E         	lfsr	0,color_detect@lightblue
  1675   0026A4  0E05               	movlw	5
  1676   0026A6                     u4911:
  1677   0026A6  CFDB FFEB          	movff	plusw2,plusw0
  1678   0026AA  06E8               	decf	wreg,f,c
  1679   0026AC  E2FC               	bc	u4911
  1680   0026AE  EE21  F0AC         	lfsr	2,main@white
  1681   0026B2  EE00  F044         	lfsr	0,color_detect@white
  1682   0026B6  0E05               	movlw	5
  1683   0026B8                     u4921:
  1684   0026B8  CFDB FFEB          	movff	plusw2,plusw0
  1685   0026BC  06E8               	decf	wreg,f,c
  1686   0026BE  E2FC               	bc	u4921
  1687   0026C0  ECAE  F017         	call	_color_detect	;wreg free
  1688   0026C4  0101               	movlb	1	; () banked
  1689   0026C6  6FB4               	movwf	main@color& (0+255),b
  1690   0026C8                     
  1691                           ; BSR set to: 1
  1692                           ;main.c: 160:             moveSequence[curMove] = color;
  1693   0026C8  0E52               	movlw	low main@moveSequence
  1694   0026CA  25B2               	addwf	main@curMove& (0+255),w,b
  1695   0026CC  6ED9               	movwf	fsr2l,c
  1696   0026CE  6ADA               	clrf	fsr2h,c
  1697   0026D0  0E01               	movlw	high main@moveSequence
  1698   0026D2  22DA               	addwfc	fsr2h,f,c
  1699   0026D4  C1B4  FFDF         	movff	main@color,indf2
  1700   0026D8                     
  1701                           ; BSR set to: 1
  1702                           ;main.c: 163:             move(&motorL, &motorR, color, moveSequence, straightTime, curM
      +                          ove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  1703   0026D8  0ECE               	movlw	low main@motorL
  1704   0026DA  0100               	movlb	0	; () banked
  1705   0026DC  6FD8               	movwf	move@mL& (0+255),b
  1706   0026DE  0E01               	movlw	high main@motorL
  1707   0026E0  6FD9               	movwf	(move@mL+1)& (0+255),b
  1708   0026E2  0EC4               	movlw	low main@motorR
  1709   0026E4  6FDA               	movwf	move@mR& (0+255),b
  1710   0026E6  0E01               	movlw	high main@motorR
  1711   0026E8  6FDB               	movwf	(move@mR+1)& (0+255),b
  1712   0026EA  C1B4  F0DC         	movff	main@color,move@color
  1713   0026EE  0E52               	movlw	low main@moveSequence
  1714   0026F0  6FDD               	movwf	move@moveSequence& (0+255),b
  1715   0026F2  0E01               	movlw	high main@moveSequence
  1716   0026F4  6FDE               	movwf	(move@moveSequence+1)& (0+255),b
  1717   0026F6  0E00               	movlw	low main@straightTime
  1718   0026F8  6FDF               	movwf	move@straightTime& (0+255),b
  1719   0026FA  0E01               	movlw	high main@straightTime
  1720   0026FC  6FE0               	movwf	(move@straightTime+1)& (0+255),b
  1721   0026FE  C1B2  F0E1         	movff	main@curMove,move@curMove
  1722   002702  C181  F0E2         	movff	main@straightSpeed,move@straightSpeed
  1723   002706  C17A  F0E3         	movff	main@reverseDuration,move@reverseDuration
  1724   00270A  C17B  F0E4         	movff	main@reverseDuration+1,move@reverseDuration+1
  1725   00270E  C1B3  F0E5         	movff	main@straightRamp,move@straightRamp
  1726   002712  C17F  F0E6         	movff	main@turnSpeed,move@turnSpeed
  1727   002716  C1B5  F0E7         	movff	main@turnDuration,move@turnDuration
  1728   00271A  C180  F0E8         	movff	main@turnRamp,move@turnRamp
  1729   00271E  EC01  F007         	call	_move	;wreg free
  1730   002722                     
  1731                           ;main.c: 166:             color_read(&RGBC);
  1732   002722  0EBC               	movlw	low main@RGBC
  1733   002724  6E14               	movwf	color_read@RGBC^0,c
  1734   002726  0E01               	movlw	high main@RGBC
  1735   002728  6E15               	movwf	(color_read@RGBC+1)^0,c
  1736   00272A  ECD5  F01C         	call	_color_read	;wreg free
  1737   00272E                     
  1738                           ;main.c: 167:             ambient=RGBC.C;
  1739   00272E  C1C2  F1D8         	movff	main@RGBC+6,_ambient
  1740   002732  C1C3  F1D9         	movff	main@RGBC+7,_ambient+1
  1741   002736                     
  1742                           ;main.c: 168:             color_clear_init_interrupts();
  1743   002736  EC2B  F023         	call	_color_clear_init_interrupts	;wreg free
  1744   00273A                     
  1745                           ;main.c: 169:             brightnessChange = 0;
  1746   00273A  0E00               	movlw	0
  1747   00273C  0101               	movlb	1	; () banked
  1748   00273E  6FDA               	movwf	_brightnessChange& (0+255),b
  1749   002740                     
  1750                           ; BSR set to: 1
  1751                           ;main.c: 171:             curMove++;
  1752   002740  2BB2               	incf	main@curMove& (0+255),f,b
  1753   002742                     
  1754                           ; BSR set to: 1
  1755                           ;main.c: 172:             resetTimer();
  1756   002742  EC76  F026         	call	_resetTimer	;wreg free
  1757   002746                     
  1758                           ;main.c: 174:             PIE0bits.INT0IE=1;
  1759   002746  010E               	movlb	14	; () banked
  1760   002748  8129               	bsf	41,0,b	;volatile
  1761   00274A                     
  1762                           ; BSR set to: 14
  1763                           ;main.c: 175:             wall = 0;
  1764   00274A  0E00               	movlw	0
  1765   00274C  0101               	movlb	1	; () banked
  1766   00274E  6F7C               	movwf	main@wall& (0+255),b
  1767   002750                     l5747:
  1768                           
  1769                           ; BSR set to: 1
  1770                           ;main.c: 192:         if (color == 8 || color == 9) {break;}
  1771   002750  0E08               	movlw	8
  1772   002752  19B4               	xorwf	main@color& (0+255),w,b
  1773   002754  B4D8               	btfsc	status,2,c
  1774   002756  EFAF  F013         	goto	u4931
  1775   00275A  EFB1  F013         	goto	u4930
  1776   00275E                     u4931:
  1777   00275E  EFBA  F013         	goto	l96
  1778   002762                     u4930:
  1779   002762                     
  1780                           ; BSR set to: 1
  1781   002762  0E09               	movlw	9
  1782   002764  19B4               	xorwf	main@color& (0+255),w,b
  1783   002766  A4D8               	btfss	status,2,c
  1784   002768  EFB8  F013         	goto	u4941
  1785   00276C  EFBA  F013         	goto	u4940
  1786   002770                     u4941:
  1787   002770  EF91  F012         	goto	l5699
  1788   002774                     u4940:
  1789   002774                     l96:
  1790                           
  1791                           ; BSR set to: 1
  1792   002774  EF2A  F000         	goto	start
  1793   002778                     __end_of_main:
  1794                           	callstack 0
  1795                           
  1796 ;; *************** function _wallAdjust *****************
  1797 ;; Defined at:
  1798 ;;		line 534 in file "dc_motor.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  1801 ;;		 -> main@motorL(10), 
  1802 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  1803 ;;		 -> main@motorR(10), 
  1804 ;;  straightSpee    1   38[COMRAM] unsigned char 
  1805 ;;  straightRamp    1   39[COMRAM] unsigned char 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  cur_power       2   48[COMRAM] int 
  1808 ;;  i               2   46[COMRAM] int 
  1809 ;;  wallSpeed       1   45[COMRAM] unsigned char 
  1810 ;;  wallReverseD    1   44[COMRAM] unsigned char 
  1811 ;;  adjustDurati    1   43[COMRAM] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1821 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1822 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1823 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;Total ram usage:       16 bytes
  1826 ;; Hardware stack levels used: 1
  1827 ;; Hardware stack levels required when called: 8
  1828 ;; This function calls:
  1829 ;;		_setMotorPWM
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text1
  1836   002B8A                     __ptext1:
  1837                           	callstack 0
  1838   002B8A                     _wallAdjust:
  1839                           	callstack 22
  1840   002B8A                     
  1841                           ;dc_motor.c: 534: void wallAdjust(DC_motor *mL, DC_motor *mR, char straightSpeed, unsign
      +                          ed char straightRamp);dc_motor.c: 535: {;dc_motor.c: 536:     unsigned char adjustDurati
      +                          on = 120;
  1842   002B8A  0E78               	movlw	120
  1843   002B8C  6E2C               	movwf	wallAdjust@adjustDuration^0,c
  1844                           
  1845                           ;dc_motor.c: 537:     unsigned char wallReverseDuration = 20;
  1846   002B8E  0E14               	movlw	20
  1847   002B90  6E2D               	movwf	wallAdjust@wallReverseDuration^0,c
  1848                           
  1849                           ;dc_motor.c: 538:     unsigned char wallSpeed = 40;
  1850   002B92  0E28               	movlw	40
  1851   002B94  6E2E               	movwf	wallAdjust@wallSpeed^0,c
  1852   002B96                     
  1853                           ;dc_motor.c: 540:     mL->direction = 1;
  1854   002B96  EE20 F001          	lfsr	2,1
  1855   002B9A  5023               	movf	wallAdjust@mL^0,w,c
  1856   002B9C  26D9               	addwf	fsr2l,f,c
  1857   002B9E  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1858   002BA0  22DA               	addwfc	fsr2h,f,c
  1859   002BA2  0E01               	movlw	1
  1860   002BA4  6EDF               	movwf	indf2,c
  1861   002BA6                     
  1862                           ;dc_motor.c: 541:     mR->direction = 1;
  1863   002BA6  EE20 F001          	lfsr	2,1
  1864   002BAA  5025               	movf	wallAdjust@mR^0,w,c
  1865   002BAC  26D9               	addwf	fsr2l,f,c
  1866   002BAE  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1867   002BB0  22DA               	addwfc	fsr2h,f,c
  1868   002BB2  0E01               	movlw	1
  1869   002BB4  6EDF               	movwf	indf2,c
  1870                           
  1871                           ;dc_motor.c: 542:     int i;;dc_motor.c: 543:     int cur_power;;dc_motor.c: 544:     fo
      +                          r (cur_power=1;cur_power<=wallSpeed;cur_power++) {
  1872   002BB6  0E00               	movlw	0
  1873   002BB8  6E32               	movwf	(wallAdjust@cur_power+1)^0,c
  1874   002BBA  0E01               	movlw	1
  1875   002BBC  6E31               	movwf	wallAdjust@cur_power^0,c
  1876   002BBE  EF2B  F016         	goto	l5353
  1877   002BC2                     l5339:
  1878                           
  1879                           ;dc_motor.c: 545:         mL->power = cur_power+mL->compensation;
  1880   002BC2  EE20 F009          	lfsr	2,9
  1881   002BC6  5023               	movf	wallAdjust@mL^0,w,c
  1882   002BC8  26D9               	addwf	fsr2l,f,c
  1883   002BCA  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1884   002BCC  22DA               	addwfc	fsr2h,f,c
  1885   002BCE  50DF               	movf	indf2,w,c
  1886   002BD0  2431               	addwf	wallAdjust@cur_power^0,w,c
  1887   002BD2  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  1888   002BD6  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  1889   002BDA  6EDF               	movwf	indf2,c
  1890                           
  1891                           ;dc_motor.c: 546:         mR->power = cur_power+mR->compensation;
  1892   002BDC  EE20 F009          	lfsr	2,9
  1893   002BE0  5025               	movf	wallAdjust@mR^0,w,c
  1894   002BE2  26D9               	addwf	fsr2l,f,c
  1895   002BE4  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1896   002BE6  22DA               	addwfc	fsr2h,f,c
  1897   002BE8  50DF               	movf	indf2,w,c
  1898   002BEA  2431               	addwf	wallAdjust@cur_power^0,w,c
  1899   002BEC  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  1900   002BF0  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  1901   002BF4  6EDF               	movwf	indf2,c
  1902   002BF6                     
  1903                           ;dc_motor.c: 547:         setMotorPWM(mL);
  1904   002BF6  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  1905   002BFA  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  1906   002BFE  EC95  F020         	call	_setMotorPWM	;wreg free
  1907   002C02                     
  1908                           ;dc_motor.c: 548:         setMotorPWM(mR);
  1909   002C02  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  1910   002C06  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  1911   002C0A  EC95  F020         	call	_setMotorPWM	;wreg free
  1912   002C0E                     
  1913                           ;dc_motor.c: 549:         for (i=0;i<straightRamp;i++) {
  1914   002C0E  0E00               	movlw	0
  1915   002C10  6E30               	movwf	(wallAdjust@i+1)^0,c
  1916   002C12  0E00               	movlw	0
  1917   002C14  6E2F               	movwf	wallAdjust@i^0,c
  1918   002C16  EF17  F016         	goto	l685
  1919   002C1A                     l5347:
  1920                           
  1921                           ;dc_motor.c: 550:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1922   002C1A  0E68               	movlw	104
  1923   002C1C  6E29               	movwf	??_wallAdjust^0,c
  1924   002C1E  0EE4               	movlw	228
  1925   002C20                     u5097:
  1926   002C20  2EE8               	decfsz	wreg,f,c
  1927   002C22  D7FE               	bra	u5097
  1928   002C24  2E29               	decfsz	??_wallAdjust^0,f,c
  1929   002C26  D7FC               	bra	u5097
  1930   002C28  D000               	nop2	
  1931   002C2A                     
  1932                           ;dc_motor.c: 551:         }
  1933   002C2A  4A2F               	infsnz	wallAdjust@i^0,f,c
  1934   002C2C  2A30               	incf	(wallAdjust@i+1)^0,f,c
  1935   002C2E                     l685:
  1936   002C2E  5028               	movf	wallAdjust@straightRamp^0,w,c
  1937   002C30  6E29               	movwf	??_wallAdjust^0,c
  1938   002C32  6A2A               	clrf	(??_wallAdjust+1)^0,c
  1939   002C34  5029               	movf	??_wallAdjust^0,w,c
  1940   002C36  5C2F               	subwf	wallAdjust@i^0,w,c
  1941   002C38  5030               	movf	(wallAdjust@i+1)^0,w,c
  1942   002C3A  0A80               	xorlw	128
  1943   002C3C  6E2B               	movwf	(??_wallAdjust+2)^0,c
  1944   002C3E  502A               	movf	(??_wallAdjust+1)^0,w,c
  1945   002C40  0A80               	xorlw	128
  1946   002C42  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  1947   002C44  A0D8               	btfss	status,0,c
  1948   002C46  EF27  F016         	goto	u4371
  1949   002C4A  EF29  F016         	goto	u4370
  1950   002C4E                     u4371:
  1951   002C4E  EF0D  F016         	goto	l5347
  1952   002C52                     u4370:
  1953   002C52                     
  1954                           ;dc_motor.c: 552:     }
  1955   002C52  4A31               	infsnz	wallAdjust@cur_power^0,f,c
  1956   002C54  2A32               	incf	(wallAdjust@cur_power+1)^0,f,c
  1957   002C56                     l5353:
  1958   002C56  502E               	movf	wallAdjust@wallSpeed^0,w,c
  1959   002C58  6E29               	movwf	??_wallAdjust^0,c
  1960   002C5A  6A2A               	clrf	(??_wallAdjust+1)^0,c
  1961   002C5C  5031               	movf	wallAdjust@cur_power^0,w,c
  1962   002C5E  5C29               	subwf	??_wallAdjust^0,w,c
  1963   002C60  502A               	movf	(??_wallAdjust+1)^0,w,c
  1964   002C62  0A80               	xorlw	128
  1965   002C64  6E2B               	movwf	(??_wallAdjust+2)^0,c
  1966   002C66  5032               	movf	(wallAdjust@cur_power+1)^0,w,c
  1967   002C68  0A80               	xorlw	128
  1968   002C6A  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  1969   002C6C  B0D8               	btfsc	status,0,c
  1970   002C6E  EF3B  F016         	goto	u4381
  1971   002C72  EF3D  F016         	goto	u4380
  1972   002C76                     u4381:
  1973   002C76  EFE1  F015         	goto	l5339
  1974   002C7A                     u4380:
  1975   002C7A                     
  1976                           ;dc_motor.c: 554:     for (i=0;i<adjustDuration;i++) {
  1977   002C7A  0E00               	movlw	0
  1978   002C7C  6E30               	movwf	(wallAdjust@i+1)^0,c
  1979   002C7E  0E00               	movlw	0
  1980   002C80  6E2F               	movwf	wallAdjust@i^0,c
  1981   002C82  EF4D  F016         	goto	l689
  1982   002C86                     l5357:
  1983                           
  1984                           ;dc_motor.c: 555:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1985   002C86  0E68               	movlw	104
  1986   002C88  6E29               	movwf	??_wallAdjust^0,c
  1987   002C8A  0EE4               	movlw	228
  1988   002C8C                     u5107:
  1989   002C8C  2EE8               	decfsz	wreg,f,c
  1990   002C8E  D7FE               	bra	u5107
  1991   002C90  2E29               	decfsz	??_wallAdjust^0,f,c
  1992   002C92  D7FC               	bra	u5107
  1993   002C94  D000               	nop2	
  1994   002C96                     
  1995                           ;dc_motor.c: 556:         }
  1996   002C96  4A2F               	infsnz	wallAdjust@i^0,f,c
  1997   002C98  2A30               	incf	(wallAdjust@i+1)^0,f,c
  1998   002C9A                     l689:
  1999   002C9A  502C               	movf	wallAdjust@adjustDuration^0,w,c
  2000   002C9C  6E29               	movwf	??_wallAdjust^0,c
  2001   002C9E  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2002   002CA0  5029               	movf	??_wallAdjust^0,w,c
  2003   002CA2  5C2F               	subwf	wallAdjust@i^0,w,c
  2004   002CA4  5030               	movf	(wallAdjust@i+1)^0,w,c
  2005   002CA6  0A80               	xorlw	128
  2006   002CA8  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2007   002CAA  502A               	movf	(??_wallAdjust+1)^0,w,c
  2008   002CAC  0A80               	xorlw	128
  2009   002CAE  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2010   002CB0  A0D8               	btfss	status,0,c
  2011   002CB2  EF5D  F016         	goto	u4391
  2012   002CB6  EF5F  F016         	goto	u4390
  2013   002CBA                     u4391:
  2014   002CBA  EF43  F016         	goto	l5357
  2015   002CBE                     u4390:
  2016   002CBE                     
  2017                           ;dc_motor.c: 558:     for (cur_power=wallSpeed;cur_power>=0;cur_power--) {
  2018   002CBE  C02E  F031         	movff	wallAdjust@wallSpeed,wallAdjust@cur_power
  2019   002CC2  6A32               	clrf	(wallAdjust@cur_power+1)^0,c
  2020   002CC4                     l5361:
  2021   002CC4  BE32               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2022   002CC6  EF69  F016         	goto	u4400
  2023   002CCA  EF67  F016         	goto	u4401
  2024   002CCE                     u4401:
  2025   002CCE  EF6B  F016         	goto	l5365
  2026   002CD2                     u4400:
  2027   002CD2  EFB8  F016         	goto	l5381
  2028   002CD6                     l5365:
  2029                           
  2030                           ;dc_motor.c: 559:         mL->power = cur_power+mL->compensation;
  2031   002CD6  EE20 F009          	lfsr	2,9
  2032   002CDA  5023               	movf	wallAdjust@mL^0,w,c
  2033   002CDC  26D9               	addwf	fsr2l,f,c
  2034   002CDE  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2035   002CE0  22DA               	addwfc	fsr2h,f,c
  2036   002CE2  50DF               	movf	indf2,w,c
  2037   002CE4  2431               	addwf	wallAdjust@cur_power^0,w,c
  2038   002CE6  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2039   002CEA  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2040   002CEE  6EDF               	movwf	indf2,c
  2041                           
  2042                           ;dc_motor.c: 560:         mR->power = cur_power+mR->compensation;
  2043   002CF0  EE20 F009          	lfsr	2,9
  2044   002CF4  5025               	movf	wallAdjust@mR^0,w,c
  2045   002CF6  26D9               	addwf	fsr2l,f,c
  2046   002CF8  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2047   002CFA  22DA               	addwfc	fsr2h,f,c
  2048   002CFC  50DF               	movf	indf2,w,c
  2049   002CFE  2431               	addwf	wallAdjust@cur_power^0,w,c
  2050   002D00  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2051   002D04  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2052   002D08  6EDF               	movwf	indf2,c
  2053   002D0A                     
  2054                           ;dc_motor.c: 561:         setMotorPWM(mL);
  2055   002D0A  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2056   002D0E  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2057   002D12  EC95  F020         	call	_setMotorPWM	;wreg free
  2058   002D16                     
  2059                           ;dc_motor.c: 562:         setMotorPWM(mR);
  2060   002D16  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2061   002D1A  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2062   002D1E  EC95  F020         	call	_setMotorPWM	;wreg free
  2063   002D22                     
  2064                           ;dc_motor.c: 563:         for (i=0;i<straightRamp;i++) {
  2065   002D22  0E00               	movlw	0
  2066   002D24  6E30               	movwf	(wallAdjust@i+1)^0,c
  2067   002D26  0E00               	movlw	0
  2068   002D28  6E2F               	movwf	wallAdjust@i^0,c
  2069   002D2A  EFA1  F016         	goto	l694
  2070   002D2E                     l5373:
  2071                           
  2072                           ;dc_motor.c: 564:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2073   002D2E  0E68               	movlw	104
  2074   002D30  6E29               	movwf	??_wallAdjust^0,c
  2075   002D32  0EE4               	movlw	228
  2076   002D34                     u5117:
  2077   002D34  2EE8               	decfsz	wreg,f,c
  2078   002D36  D7FE               	bra	u5117
  2079   002D38  2E29               	decfsz	??_wallAdjust^0,f,c
  2080   002D3A  D7FC               	bra	u5117
  2081   002D3C  D000               	nop2	
  2082   002D3E                     
  2083                           ;dc_motor.c: 565:         }
  2084   002D3E  4A2F               	infsnz	wallAdjust@i^0,f,c
  2085   002D40  2A30               	incf	(wallAdjust@i+1)^0,f,c
  2086   002D42                     l694:
  2087   002D42  5028               	movf	wallAdjust@straightRamp^0,w,c
  2088   002D44  6E29               	movwf	??_wallAdjust^0,c
  2089   002D46  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2090   002D48  5029               	movf	??_wallAdjust^0,w,c
  2091   002D4A  5C2F               	subwf	wallAdjust@i^0,w,c
  2092   002D4C  5030               	movf	(wallAdjust@i+1)^0,w,c
  2093   002D4E  0A80               	xorlw	128
  2094   002D50  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2095   002D52  502A               	movf	(??_wallAdjust+1)^0,w,c
  2096   002D54  0A80               	xorlw	128
  2097   002D56  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2098   002D58  A0D8               	btfss	status,0,c
  2099   002D5A  EFB1  F016         	goto	u4411
  2100   002D5E  EFB3  F016         	goto	u4410
  2101   002D62                     u4411:
  2102   002D62  EF97  F016         	goto	l5373
  2103   002D66                     u4410:
  2104   002D66                     
  2105                           ;dc_motor.c: 566:     }
  2106   002D66  0631               	decf	wallAdjust@cur_power^0,f,c
  2107   002D68  A0D8               	btfss	status,0,c
  2108   002D6A  0632               	decf	(wallAdjust@cur_power+1)^0,f,c
  2109   002D6C  EF62  F016         	goto	l5361
  2110   002D70                     l5381:
  2111                           
  2112                           ;dc_motor.c: 568:     mL->direction = 0;
  2113   002D70  EE20 F001          	lfsr	2,1
  2114   002D74  5023               	movf	wallAdjust@mL^0,w,c
  2115   002D76  26D9               	addwf	fsr2l,f,c
  2116   002D78  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2117   002D7A  22DA               	addwfc	fsr2h,f,c
  2118   002D7C  6ADF               	clrf	indf2,c
  2119                           
  2120                           ;dc_motor.c: 569:     mR->direction = 0;
  2121   002D7E  EE20 F001          	lfsr	2,1
  2122   002D82  5025               	movf	wallAdjust@mR^0,w,c
  2123   002D84  26D9               	addwf	fsr2l,f,c
  2124   002D86  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2125   002D88  22DA               	addwfc	fsr2h,f,c
  2126   002D8A  6ADF               	clrf	indf2,c
  2127   002D8C                     
  2128                           ;dc_motor.c: 570:     for (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2129   002D8C  0E00               	movlw	0
  2130   002D8E  6E32               	movwf	(wallAdjust@cur_power+1)^0,c
  2131   002D90  0E01               	movlw	1
  2132   002D92  6E31               	movwf	wallAdjust@cur_power^0,c
  2133   002D94  EF16  F017         	goto	l5399
  2134   002D98                     l5385:
  2135                           
  2136                           ;dc_motor.c: 571:         mL->power = cur_power+mL->compensation;
  2137   002D98  EE20 F009          	lfsr	2,9
  2138   002D9C  5023               	movf	wallAdjust@mL^0,w,c
  2139   002D9E  26D9               	addwf	fsr2l,f,c
  2140   002DA0  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2141   002DA2  22DA               	addwfc	fsr2h,f,c
  2142   002DA4  50DF               	movf	indf2,w,c
  2143   002DA6  2431               	addwf	wallAdjust@cur_power^0,w,c
  2144   002DA8  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2145   002DAC  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2146   002DB0  6EDF               	movwf	indf2,c
  2147                           
  2148                           ;dc_motor.c: 572:         mR->power = cur_power+mR->compensation;
  2149   002DB2  EE20 F009          	lfsr	2,9
  2150   002DB6  5025               	movf	wallAdjust@mR^0,w,c
  2151   002DB8  26D9               	addwf	fsr2l,f,c
  2152   002DBA  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2153   002DBC  22DA               	addwfc	fsr2h,f,c
  2154   002DBE  50DF               	movf	indf2,w,c
  2155   002DC0  2431               	addwf	wallAdjust@cur_power^0,w,c
  2156   002DC2  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2157   002DC6  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2158   002DCA  6EDF               	movwf	indf2,c
  2159   002DCC                     
  2160                           ;dc_motor.c: 573:         setMotorPWM(mL);
  2161   002DCC  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2162   002DD0  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2163   002DD4  EC95  F020         	call	_setMotorPWM	;wreg free
  2164   002DD8                     
  2165                           ;dc_motor.c: 574:         setMotorPWM(mR);
  2166   002DD8  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2167   002DDC  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2168   002DE0  EC95  F020         	call	_setMotorPWM	;wreg free
  2169   002DE4                     
  2170                           ;dc_motor.c: 575:         for (i=0;i<straightRamp;i++) {
  2171   002DE4  0E00               	movlw	0
  2172   002DE6  6E30               	movwf	(wallAdjust@i+1)^0,c
  2173   002DE8  0E00               	movlw	0
  2174   002DEA  6E2F               	movwf	wallAdjust@i^0,c
  2175   002DEC  EF02  F017         	goto	l699
  2176   002DF0                     l5393:
  2177                           
  2178                           ;dc_motor.c: 576:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2179   002DF0  0E68               	movlw	104
  2180   002DF2  6E29               	movwf	??_wallAdjust^0,c
  2181   002DF4  0EE4               	movlw	228
  2182   002DF6                     u5127:
  2183   002DF6  2EE8               	decfsz	wreg,f,c
  2184   002DF8  D7FE               	bra	u5127
  2185   002DFA  2E29               	decfsz	??_wallAdjust^0,f,c
  2186   002DFC  D7FC               	bra	u5127
  2187   002DFE  D000               	nop2	
  2188   002E00                     
  2189                           ;dc_motor.c: 577:         }
  2190   002E00  4A2F               	infsnz	wallAdjust@i^0,f,c
  2191   002E02  2A30               	incf	(wallAdjust@i+1)^0,f,c
  2192   002E04                     l699:
  2193   002E04  5028               	movf	wallAdjust@straightRamp^0,w,c
  2194   002E06  6E29               	movwf	??_wallAdjust^0,c
  2195   002E08  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2196   002E0A  5029               	movf	??_wallAdjust^0,w,c
  2197   002E0C  5C2F               	subwf	wallAdjust@i^0,w,c
  2198   002E0E  5030               	movf	(wallAdjust@i+1)^0,w,c
  2199   002E10  0A80               	xorlw	128
  2200   002E12  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2201   002E14  502A               	movf	(??_wallAdjust+1)^0,w,c
  2202   002E16  0A80               	xorlw	128
  2203   002E18  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2204   002E1A  A0D8               	btfss	status,0,c
  2205   002E1C  EF12  F017         	goto	u4421
  2206   002E20  EF14  F017         	goto	u4420
  2207   002E24                     u4421:
  2208   002E24  EFF8  F016         	goto	l5393
  2209   002E28                     u4420:
  2210   002E28                     
  2211                           ;dc_motor.c: 578:     }
  2212   002E28  4A31               	infsnz	wallAdjust@cur_power^0,f,c
  2213   002E2A  2A32               	incf	(wallAdjust@cur_power+1)^0,f,c
  2214   002E2C                     l5399:
  2215   002E2C  5027               	movf	wallAdjust@straightSpeed^0,w,c
  2216   002E2E  6E29               	movwf	??_wallAdjust^0,c
  2217   002E30  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2218   002E32  5031               	movf	wallAdjust@cur_power^0,w,c
  2219   002E34  5C29               	subwf	??_wallAdjust^0,w,c
  2220   002E36  502A               	movf	(??_wallAdjust+1)^0,w,c
  2221   002E38  0A80               	xorlw	128
  2222   002E3A  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2223   002E3C  5032               	movf	(wallAdjust@cur_power+1)^0,w,c
  2224   002E3E  0A80               	xorlw	128
  2225   002E40  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2226   002E42  B0D8               	btfsc	status,0,c
  2227   002E44  EF26  F017         	goto	u4431
  2228   002E48  EF28  F017         	goto	u4430
  2229   002E4C                     u4431:
  2230   002E4C  EFCC  F016         	goto	l5385
  2231   002E50                     u4430:
  2232   002E50                     
  2233                           ;dc_motor.c: 580:     for (i=0;i<wallReverseDuration;i++) {
  2234   002E50  0E00               	movlw	0
  2235   002E52  6E30               	movwf	(wallAdjust@i+1)^0,c
  2236   002E54  0E00               	movlw	0
  2237   002E56  6E2F               	movwf	wallAdjust@i^0,c
  2238   002E58  EF38  F017         	goto	l703
  2239   002E5C                     l5403:
  2240                           
  2241                           ;dc_motor.c: 581:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2242   002E5C  0E68               	movlw	104
  2243   002E5E  6E29               	movwf	??_wallAdjust^0,c
  2244   002E60  0EE4               	movlw	228
  2245   002E62                     u5137:
  2246   002E62  2EE8               	decfsz	wreg,f,c
  2247   002E64  D7FE               	bra	u5137
  2248   002E66  2E29               	decfsz	??_wallAdjust^0,f,c
  2249   002E68  D7FC               	bra	u5137
  2250   002E6A  D000               	nop2	
  2251   002E6C                     
  2252                           ;dc_motor.c: 582:         }
  2253   002E6C  4A2F               	infsnz	wallAdjust@i^0,f,c
  2254   002E6E  2A30               	incf	(wallAdjust@i+1)^0,f,c
  2255   002E70                     l703:
  2256   002E70  502D               	movf	wallAdjust@wallReverseDuration^0,w,c
  2257   002E72  6E29               	movwf	??_wallAdjust^0,c
  2258   002E74  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2259   002E76  5029               	movf	??_wallAdjust^0,w,c
  2260   002E78  5C2F               	subwf	wallAdjust@i^0,w,c
  2261   002E7A  5030               	movf	(wallAdjust@i+1)^0,w,c
  2262   002E7C  0A80               	xorlw	128
  2263   002E7E  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2264   002E80  502A               	movf	(??_wallAdjust+1)^0,w,c
  2265   002E82  0A80               	xorlw	128
  2266   002E84  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2267   002E86  A0D8               	btfss	status,0,c
  2268   002E88  EF48  F017         	goto	u4441
  2269   002E8C  EF4A  F017         	goto	u4440
  2270   002E90                     u4441:
  2271   002E90  EF2E  F017         	goto	l5403
  2272   002E94                     u4440:
  2273   002E94                     
  2274                           ;dc_motor.c: 584:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2275   002E94  C027  F031         	movff	wallAdjust@straightSpeed,wallAdjust@cur_power
  2276   002E98  6A32               	clrf	(wallAdjust@cur_power+1)^0,c
  2277   002E9A                     l5407:
  2278   002E9A  BE32               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2279   002E9C  EF54  F017         	goto	u4450
  2280   002EA0  EF52  F017         	goto	u4451
  2281   002EA4                     u4451:
  2282   002EA4  EF56  F017         	goto	l5411
  2283   002EA8                     u4450:
  2284   002EA8  EFA3  F017         	goto	l5427
  2285   002EAC                     l5411:
  2286                           
  2287                           ;dc_motor.c: 585:         mL->power = cur_power+mL->compensation;
  2288   002EAC  EE20 F009          	lfsr	2,9
  2289   002EB0  5023               	movf	wallAdjust@mL^0,w,c
  2290   002EB2  26D9               	addwf	fsr2l,f,c
  2291   002EB4  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2292   002EB6  22DA               	addwfc	fsr2h,f,c
  2293   002EB8  50DF               	movf	indf2,w,c
  2294   002EBA  2431               	addwf	wallAdjust@cur_power^0,w,c
  2295   002EBC  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2296   002EC0  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2297   002EC4  6EDF               	movwf	indf2,c
  2298                           
  2299                           ;dc_motor.c: 586:         mR->power = cur_power+mR->compensation;
  2300   002EC6  EE20 F009          	lfsr	2,9
  2301   002ECA  5025               	movf	wallAdjust@mR^0,w,c
  2302   002ECC  26D9               	addwf	fsr2l,f,c
  2303   002ECE  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2304   002ED0  22DA               	addwfc	fsr2h,f,c
  2305   002ED2  50DF               	movf	indf2,w,c
  2306   002ED4  2431               	addwf	wallAdjust@cur_power^0,w,c
  2307   002ED6  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2308   002EDA  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2309   002EDE  6EDF               	movwf	indf2,c
  2310   002EE0                     
  2311                           ;dc_motor.c: 587:         setMotorPWM(mL);
  2312   002EE0  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2313   002EE4  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2314   002EE8  EC95  F020         	call	_setMotorPWM	;wreg free
  2315   002EEC                     
  2316                           ;dc_motor.c: 588:         setMotorPWM(mR);
  2317   002EEC  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2318   002EF0  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2319   002EF4  EC95  F020         	call	_setMotorPWM	;wreg free
  2320   002EF8                     
  2321                           ;dc_motor.c: 589:         for (i=0;i<straightRamp;i++) {
  2322   002EF8  0E00               	movlw	0
  2323   002EFA  6E30               	movwf	(wallAdjust@i+1)^0,c
  2324   002EFC  0E00               	movlw	0
  2325   002EFE  6E2F               	movwf	wallAdjust@i^0,c
  2326   002F00  EF8C  F017         	goto	l708
  2327   002F04                     l5419:
  2328                           
  2329                           ;dc_motor.c: 590:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2330   002F04  0E68               	movlw	104
  2331   002F06  6E29               	movwf	??_wallAdjust^0,c
  2332   002F08  0EE4               	movlw	228
  2333   002F0A                     u5147:
  2334   002F0A  2EE8               	decfsz	wreg,f,c
  2335   002F0C  D7FE               	bra	u5147
  2336   002F0E  2E29               	decfsz	??_wallAdjust^0,f,c
  2337   002F10  D7FC               	bra	u5147
  2338   002F12  D000               	nop2	
  2339   002F14                     
  2340                           ;dc_motor.c: 591:         }
  2341   002F14  4A2F               	infsnz	wallAdjust@i^0,f,c
  2342   002F16  2A30               	incf	(wallAdjust@i+1)^0,f,c
  2343   002F18                     l708:
  2344   002F18  5028               	movf	wallAdjust@straightRamp^0,w,c
  2345   002F1A  6E29               	movwf	??_wallAdjust^0,c
  2346   002F1C  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2347   002F1E  5029               	movf	??_wallAdjust^0,w,c
  2348   002F20  5C2F               	subwf	wallAdjust@i^0,w,c
  2349   002F22  5030               	movf	(wallAdjust@i+1)^0,w,c
  2350   002F24  0A80               	xorlw	128
  2351   002F26  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2352   002F28  502A               	movf	(??_wallAdjust+1)^0,w,c
  2353   002F2A  0A80               	xorlw	128
  2354   002F2C  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2355   002F2E  A0D8               	btfss	status,0,c
  2356   002F30  EF9C  F017         	goto	u4461
  2357   002F34  EF9E  F017         	goto	u4460
  2358   002F38                     u4461:
  2359   002F38  EF82  F017         	goto	l5419
  2360   002F3C                     u4460:
  2361   002F3C                     
  2362                           ;dc_motor.c: 592:     }
  2363   002F3C  0631               	decf	wallAdjust@cur_power^0,f,c
  2364   002F3E  A0D8               	btfss	status,0,c
  2365   002F40  0632               	decf	(wallAdjust@cur_power+1)^0,f,c
  2366   002F42  EF4D  F017         	goto	l5407
  2367   002F46                     l5427:
  2368                           
  2369                           ;dc_motor.c: 593:     mL->power = 0;
  2370   002F46  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2371   002F4A  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2372   002F4E  6ADF               	clrf	indf2,c
  2373                           
  2374                           ;dc_motor.c: 594:     mR->power = 0;
  2375   002F50  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2376   002F54  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2377   002F58  6ADF               	clrf	indf2,c
  2378   002F5A  0012               	return		;funcret
  2379   002F5C                     __end_of_wallAdjust:
  2380                           	callstack 0
  2381                           
  2382 ;; *************** function _move *****************
  2383 ;; Defined at:
  2384 ;;		line 94 in file "dc_motor.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2387 ;;		 -> main@motorL(10), 
  2388 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2389 ;;		 -> main@motorR(10), 
  2390 ;;  color           1    4[BANK0 ] unsigned char 
  2391 ;;  moveSequence    2    5[BANK0 ] PTR unsigned char 
  2392 ;;		 -> main@moveSequence(40), 
  2393 ;;  straightTime    2    7[BANK0 ] PTR unsigned int 
  2394 ;;		 -> main@straightTime(82), 
  2395 ;;  curMove         1    9[BANK0 ] unsigned char 
  2396 ;;  straightSpee    1   10[BANK0 ] unsigned char 
  2397 ;;  reverseDurat    2   11[BANK0 ] unsigned int 
  2398 ;;  straightRamp    1   13[BANK0 ] unsigned char 
  2399 ;;  turnSpeed       1   14[BANK0 ] unsigned char 
  2400 ;;  turnDuration    1   15[BANK0 ] unsigned char 
  2401 ;;  turnRamp        1   16[BANK0 ] unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2413 ;;      Params:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;Total ram usage:       19 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 10
  2420 ;; This function calls:
  2421 ;;		_fullSpeedAhead
  2422 ;;		_returnHome
  2423 ;;		_reverseOneSquare
  2424 ;;		_reverseShort
  2425 ;;		_turnLeft
  2426 ;;		_turnRight
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text2
  2433   000E02                     __ptext2:
  2434                           	callstack 0
  2435   000E02                     _move:
  2436                           	callstack 20
  2437   000E02                     
  2438                           ;dc_motor.c: 94: void move(DC_motor *mL, DC_motor *mR, char color, unsigned char *moveSe
      +                          quence, unsigned int *straightTime, char curMove, char straightSpeed, unsigned int rever
      +                          seDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsi
      +                          gned char turnRamp);dc_motor.c: 95: {;dc_motor.c: 96:     if (color == 1) {
  2439   000E02  0100               	movlb	0	; () banked
  2440   000E04  05DC               	decf	move@color& (0+255),w,b
  2441   000E06  A4D8               	btfss	status,2,c
  2442   000E08  EF08  F007         	goto	u4691
  2443   000E0C  EF0A  F007         	goto	u4690
  2444   000E10                     u4691:
  2445   000E10  EF6C  F007         	goto	l5507
  2446   000E14                     u4690:
  2447   000E14                     
  2448                           ; BSR set to: 0
  2449                           ;dc_motor.c: 97:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2450   000E14  C0D8  F023         	movff	move@mL,reverseShort@mL
  2451   000E18  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  2452   000E1C  C0DA  F025         	movff	move@mR,reverseShort@mR
  2453   000E20  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  2454   000E24  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2455   000E28  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2456   000E2C  ECDD  F01B         	call	_reverseShort	;wreg free
  2457   000E30                     
  2458                           ;dc_motor.c: 98:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2459   000E30  0E05               	movlw	5
  2460   000E32  6E4A               	movwf	(??_move+1)^0,c
  2461   000E34  0E0F               	movlw	15
  2462   000E36  6E49               	movwf	??_move^0,c
  2463   000E38  0EF1               	movlw	241
  2464   000E3A                     u5157:
  2465   000E3A  2EE8               	decfsz	wreg,f,c
  2466   000E3C  D7FE               	bra	u5157
  2467   000E3E  2E49               	decfsz	??_move^0,f,c
  2468   000E40  D7FC               	bra	u5157
  2469   000E42  2E4A               	decfsz	(??_move+1)^0,f,c
  2470   000E44  D7FA               	bra	u5157
  2471   000E46  0000               	nop	
  2472   000E48                     
  2473                           ;dc_motor.c: 99:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2474   000E48  C0D8  F023         	movff	move@mL,turnRight@mL
  2475   000E4C  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  2476   000E50  C0DA  F025         	movff	move@mR,turnRight@mR
  2477   000E54  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  2478   000E58  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2479   000E5C  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  2480   000E60  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  2481   000E64  ECBB  F01E         	call	_turnRight	;wreg free
  2482                           
  2483                           ;dc_motor.c: 100:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2484   000E68  0E05               	movlw	5
  2485   000E6A  6E4A               	movwf	(??_move+1)^0,c
  2486   000E6C  0E0F               	movlw	15
  2487   000E6E  6E49               	movwf	??_move^0,c
  2488   000E70  0EF1               	movlw	241
  2489   000E72                     u5167:
  2490   000E72  2EE8               	decfsz	wreg,f,c
  2491   000E74  D7FE               	bra	u5167
  2492   000E76  2E49               	decfsz	??_move^0,f,c
  2493   000E78  D7FC               	bra	u5167
  2494   000E7A  2E4A               	decfsz	(??_move+1)^0,f,c
  2495   000E7C  D7FA               	bra	u5167
  2496   000E7E  0000               	nop	
  2497   000E80                     
  2498                           ;dc_motor.c: 101:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2499   000E80  C0D8  F023         	movff	move@mL,turnRight@mL
  2500   000E84  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  2501   000E88  C0DA  F025         	movff	move@mR,turnRight@mR
  2502   000E8C  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  2503   000E90  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2504   000E94  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  2505   000E98  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  2506   000E9C  ECBB  F01E         	call	_turnRight	;wreg free
  2507   000EA0                     
  2508                           ;dc_motor.c: 102:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2509   000EA0  0E05               	movlw	5
  2510   000EA2  6E4A               	movwf	(??_move+1)^0,c
  2511   000EA4  0E0F               	movlw	15
  2512   000EA6  6E49               	movwf	??_move^0,c
  2513   000EA8  0EF1               	movlw	241
  2514   000EAA                     u5177:
  2515   000EAA  2EE8               	decfsz	wreg,f,c
  2516   000EAC  D7FE               	bra	u5177
  2517   000EAE  2E49               	decfsz	??_move^0,f,c
  2518   000EB0  D7FC               	bra	u5177
  2519   000EB2  2E4A               	decfsz	(??_move+1)^0,f,c
  2520   000EB4  D7FA               	bra	u5177
  2521   000EB6  0000               	nop	
  2522                           
  2523                           ;dc_motor.c: 103:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2524   000EB8  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  2525   000EBC  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2526   000EC0  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  2527   000EC4  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2528   000EC8  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2529   000ECC  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2530   000ED0  EC56  F022         	call	_fullSpeedAhead	;wreg free
  2531                           
  2532                           ;dc_motor.c: 104:     }
  2533   000ED4  EF1D  F00B         	goto	l562
  2534   000ED8                     l5507:
  2535                           
  2536                           ; BSR set to: 0
  2537   000ED8  0E02               	movlw	2
  2538   000EDA  19DC               	xorwf	move@color& (0+255),w,b
  2539   000EDC  A4D8               	btfss	status,2,c
  2540   000EDE  EF73  F007         	goto	u4701
  2541   000EE2  EF75  F007         	goto	u4700
  2542   000EE6                     u4701:
  2543   000EE6  EFD7  F007         	goto	l5519
  2544   000EEA                     u4700:
  2545   000EEA                     
  2546                           ; BSR set to: 0
  2547                           ;dc_motor.c: 107:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2548   000EEA  C0D8  F023         	movff	move@mL,reverseShort@mL
  2549   000EEE  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  2550   000EF2  C0DA  F025         	movff	move@mR,reverseShort@mR
  2551   000EF6  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  2552   000EFA  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2553   000EFE  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2554   000F02  ECDD  F01B         	call	_reverseShort	;wreg free
  2555   000F06                     
  2556                           ;dc_motor.c: 108:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2557   000F06  0E05               	movlw	5
  2558   000F08  6E4A               	movwf	(??_move+1)^0,c
  2559   000F0A  0E0F               	movlw	15
  2560   000F0C  6E49               	movwf	??_move^0,c
  2561   000F0E  0EF1               	movlw	241
  2562   000F10                     u5187:
  2563   000F10  2EE8               	decfsz	wreg,f,c
  2564   000F12  D7FE               	bra	u5187
  2565   000F14  2E49               	decfsz	??_move^0,f,c
  2566   000F16  D7FC               	bra	u5187
  2567   000F18  2E4A               	decfsz	(??_move+1)^0,f,c
  2568   000F1A  D7FA               	bra	u5187
  2569   000F1C  0000               	nop	
  2570   000F1E                     
  2571                           ;dc_motor.c: 109:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2572   000F1E  C0D8  F023         	movff	move@mL,turnLeft@mL
  2573   000F22  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2574   000F26  C0DA  F025         	movff	move@mR,turnLeft@mR
  2575   000F2A  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2576   000F2E  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2577   000F32  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2578   000F36  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2579   000F3A  ECA8  F01F         	call	_turnLeft	;wreg free
  2580                           
  2581                           ;dc_motor.c: 110:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2582   000F3E  0E05               	movlw	5
  2583   000F40  6E4A               	movwf	(??_move+1)^0,c
  2584   000F42  0E0F               	movlw	15
  2585   000F44  6E49               	movwf	??_move^0,c
  2586   000F46  0EF1               	movlw	241
  2587   000F48                     u5197:
  2588   000F48  2EE8               	decfsz	wreg,f,c
  2589   000F4A  D7FE               	bra	u5197
  2590   000F4C  2E49               	decfsz	??_move^0,f,c
  2591   000F4E  D7FC               	bra	u5197
  2592   000F50  2E4A               	decfsz	(??_move+1)^0,f,c
  2593   000F52  D7FA               	bra	u5197
  2594   000F54  0000               	nop	
  2595   000F56                     
  2596                           ;dc_motor.c: 111:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2597   000F56  C0D8  F023         	movff	move@mL,turnLeft@mL
  2598   000F5A  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2599   000F5E  C0DA  F025         	movff	move@mR,turnLeft@mR
  2600   000F62  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2601   000F66  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2602   000F6A  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2603   000F6E  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2604   000F72  ECA8  F01F         	call	_turnLeft	;wreg free
  2605   000F76                     
  2606                           ;dc_motor.c: 112:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2607   000F76  0E05               	movlw	5
  2608   000F78  6E4A               	movwf	(??_move+1)^0,c
  2609   000F7A  0E0F               	movlw	15
  2610   000F7C  6E49               	movwf	??_move^0,c
  2611   000F7E  0EF1               	movlw	241
  2612   000F80                     u5207:
  2613   000F80  2EE8               	decfsz	wreg,f,c
  2614   000F82  D7FE               	bra	u5207
  2615   000F84  2E49               	decfsz	??_move^0,f,c
  2616   000F86  D7FC               	bra	u5207
  2617   000F88  2E4A               	decfsz	(??_move+1)^0,f,c
  2618   000F8A  D7FA               	bra	u5207
  2619   000F8C  0000               	nop	
  2620                           
  2621                           ;dc_motor.c: 113:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2622   000F8E  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  2623   000F92  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2624   000F96  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  2625   000F9A  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2626   000F9E  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2627   000FA2  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2628   000FA6  EC56  F022         	call	_fullSpeedAhead	;wreg free
  2629                           
  2630                           ;dc_motor.c: 114:     }
  2631   000FAA  EF1D  F00B         	goto	l562
  2632   000FAE                     l5519:
  2633                           
  2634                           ; BSR set to: 0
  2635   000FAE  0E03               	movlw	3
  2636   000FB0  19DC               	xorwf	move@color& (0+255),w,b
  2637   000FB2  A4D8               	btfss	status,2,c
  2638   000FB4  EFDE  F007         	goto	u4711
  2639   000FB8  EFE0  F007         	goto	u4710
  2640   000FBC                     u4711:
  2641   000FBC  EF7A  F008         	goto	l5537
  2642   000FC0                     u4710:
  2643   000FC0                     
  2644                           ; BSR set to: 0
  2645                           ;dc_motor.c: 117:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2646   000FC0  C0D8  F023         	movff	move@mL,reverseShort@mL
  2647   000FC4  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  2648   000FC8  C0DA  F025         	movff	move@mR,reverseShort@mR
  2649   000FCC  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  2650   000FD0  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2651   000FD4  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2652   000FD8  ECDD  F01B         	call	_reverseShort	;wreg free
  2653   000FDC                     
  2654                           ;dc_motor.c: 118:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2655   000FDC  0E05               	movlw	5
  2656   000FDE  6E4A               	movwf	(??_move+1)^0,c
  2657   000FE0  0E0F               	movlw	15
  2658   000FE2  6E49               	movwf	??_move^0,c
  2659   000FE4  0EF1               	movlw	241
  2660   000FE6                     u5217:
  2661   000FE6  2EE8               	decfsz	wreg,f,c
  2662   000FE8  D7FE               	bra	u5217
  2663   000FEA  2E49               	decfsz	??_move^0,f,c
  2664   000FEC  D7FC               	bra	u5217
  2665   000FEE  2E4A               	decfsz	(??_move+1)^0,f,c
  2666   000FF0  D7FA               	bra	u5217
  2667   000FF2  0000               	nop	
  2668   000FF4                     
  2669                           ;dc_motor.c: 119:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2670   000FF4  C0D8  F023         	movff	move@mL,turnLeft@mL
  2671   000FF8  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2672   000FFC  C0DA  F025         	movff	move@mR,turnLeft@mR
  2673   001000  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2674   001004  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2675   001008  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2676   00100C  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2677   001010  ECA8  F01F         	call	_turnLeft	;wreg free
  2678                           
  2679                           ;dc_motor.c: 120:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2680   001014  0E05               	movlw	5
  2681   001016  6E4A               	movwf	(??_move+1)^0,c
  2682   001018  0E0F               	movlw	15
  2683   00101A  6E49               	movwf	??_move^0,c
  2684   00101C  0EF1               	movlw	241
  2685   00101E                     u5227:
  2686   00101E  2EE8               	decfsz	wreg,f,c
  2687   001020  D7FE               	bra	u5227
  2688   001022  2E49               	decfsz	??_move^0,f,c
  2689   001024  D7FC               	bra	u5227
  2690   001026  2E4A               	decfsz	(??_move+1)^0,f,c
  2691   001028  D7FA               	bra	u5227
  2692   00102A  0000               	nop	
  2693   00102C                     
  2694                           ;dc_motor.c: 121:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2695   00102C  C0D8  F023         	movff	move@mL,turnLeft@mL
  2696   001030  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2697   001034  C0DA  F025         	movff	move@mR,turnLeft@mR
  2698   001038  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2699   00103C  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2700   001040  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2701   001044  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2702   001048  ECA8  F01F         	call	_turnLeft	;wreg free
  2703   00104C                     
  2704                           ;dc_motor.c: 122:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2705   00104C  0E05               	movlw	5
  2706   00104E  6E4A               	movwf	(??_move+1)^0,c
  2707   001050  0E0F               	movlw	15
  2708   001052  6E49               	movwf	??_move^0,c
  2709   001054  0EF1               	movlw	241
  2710   001056                     u5237:
  2711   001056  2EE8               	decfsz	wreg,f,c
  2712   001058  D7FE               	bra	u5237
  2713   00105A  2E49               	decfsz	??_move^0,f,c
  2714   00105C  D7FC               	bra	u5237
  2715   00105E  2E4A               	decfsz	(??_move+1)^0,f,c
  2716   001060  D7FA               	bra	u5237
  2717   001062  0000               	nop	
  2718                           
  2719                           ;dc_motor.c: 123:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2720   001064  C0D8  F023         	movff	move@mL,turnLeft@mL
  2721   001068  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2722   00106C  C0DA  F025         	movff	move@mR,turnLeft@mR
  2723   001070  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2724   001074  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2725   001078  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2726   00107C  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2727   001080  ECA8  F01F         	call	_turnLeft	;wreg free
  2728   001084                     
  2729                           ;dc_motor.c: 124:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2730   001084  0E05               	movlw	5
  2731   001086  6E4A               	movwf	(??_move+1)^0,c
  2732   001088  0E0F               	movlw	15
  2733   00108A  6E49               	movwf	??_move^0,c
  2734   00108C  0EF1               	movlw	241
  2735   00108E                     u5247:
  2736   00108E  2EE8               	decfsz	wreg,f,c
  2737   001090  D7FE               	bra	u5247
  2738   001092  2E49               	decfsz	??_move^0,f,c
  2739   001094  D7FC               	bra	u5247
  2740   001096  2E4A               	decfsz	(??_move+1)^0,f,c
  2741   001098  D7FA               	bra	u5247
  2742   00109A  0000               	nop	
  2743   00109C                     
  2744                           ;dc_motor.c: 125:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2745   00109C  C0D8  F023         	movff	move@mL,turnLeft@mL
  2746   0010A0  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2747   0010A4  C0DA  F025         	movff	move@mR,turnLeft@mR
  2748   0010A8  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2749   0010AC  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2750   0010B0  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2751   0010B4  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2752   0010B8  ECA8  F01F         	call	_turnLeft	;wreg free
  2753                           
  2754                           ;dc_motor.c: 126:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2755   0010BC  0E05               	movlw	5
  2756   0010BE  6E4A               	movwf	(??_move+1)^0,c
  2757   0010C0  0E0F               	movlw	15
  2758   0010C2  6E49               	movwf	??_move^0,c
  2759   0010C4  0EF1               	movlw	241
  2760   0010C6                     u5257:
  2761   0010C6  2EE8               	decfsz	wreg,f,c
  2762   0010C8  D7FE               	bra	u5257
  2763   0010CA  2E49               	decfsz	??_move^0,f,c
  2764   0010CC  D7FC               	bra	u5257
  2765   0010CE  2E4A               	decfsz	(??_move+1)^0,f,c
  2766   0010D0  D7FA               	bra	u5257
  2767   0010D2  0000               	nop	
  2768   0010D4                     
  2769                           ;dc_motor.c: 127:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2770   0010D4  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  2771   0010D8  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2772   0010DC  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  2773   0010E0  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2774   0010E4  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2775   0010E8  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2776   0010EC  EC56  F022         	call	_fullSpeedAhead	;wreg free
  2777                           
  2778                           ;dc_motor.c: 128:     }
  2779   0010F0  EF1D  F00B         	goto	l562
  2780   0010F4                     l5537:
  2781                           
  2782                           ; BSR set to: 0
  2783   0010F4  0E04               	movlw	4
  2784   0010F6  19DC               	xorwf	move@color& (0+255),w,b
  2785   0010F8  A4D8               	btfss	status,2,c
  2786   0010FA  EF81  F008         	goto	u4721
  2787   0010FE  EF83  F008         	goto	u4720
  2788   001102                     u4721:
  2789   001102  EF03  F009         	goto	l5553
  2790   001106                     u4720:
  2791   001106                     
  2792                           ; BSR set to: 0
  2793                           ;dc_motor.c: 131:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2794   001106  C0D8  F023         	movff	move@mL,reverseShort@mL
  2795   00110A  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  2796   00110E  C0DA  F025         	movff	move@mR,reverseShort@mR
  2797   001112  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  2798   001116  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2799   00111A  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2800   00111E  ECDD  F01B         	call	_reverseShort	;wreg free
  2801   001122                     
  2802                           ;dc_motor.c: 132:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2803   001122  0E05               	movlw	5
  2804   001124  6E4A               	movwf	(??_move+1)^0,c
  2805   001126  0E0F               	movlw	15
  2806   001128  6E49               	movwf	??_move^0,c
  2807   00112A  0EF1               	movlw	241
  2808   00112C                     u5267:
  2809   00112C  2EE8               	decfsz	wreg,f,c
  2810   00112E  D7FE               	bra	u5267
  2811   001130  2E49               	decfsz	??_move^0,f,c
  2812   001132  D7FC               	bra	u5267
  2813   001134  2E4A               	decfsz	(??_move+1)^0,f,c
  2814   001136  D7FA               	bra	u5267
  2815   001138  0000               	nop	
  2816   00113A                     
  2817                           ;dc_motor.c: 133:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2818   00113A  C0D8  F023         	movff	move@mL,reverseOneSquare@mL
  2819   00113E  C0D9  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  2820   001142  C0DA  F025         	movff	move@mR,reverseOneSquare@mR
  2821   001146  C0DB  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  2822   00114A  C0E2  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2823   00114E  C0E3  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2824   001152  C0E4  F029         	movff	move@reverseDuration+1,reverseOneSquare@reverseDuration+1
  2825   001156  C0E5  F02A         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2826   00115A  ECCC  F01D         	call	_reverseOneSquare	;wreg free
  2827                           
  2828                           ;dc_motor.c: 134:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2829   00115E  0E05               	movlw	5
  2830   001160  6E4A               	movwf	(??_move+1)^0,c
  2831   001162  0E0F               	movlw	15
  2832   001164  6E49               	movwf	??_move^0,c
  2833   001166  0EF1               	movlw	241
  2834   001168                     u5277:
  2835   001168  2EE8               	decfsz	wreg,f,c
  2836   00116A  D7FE               	bra	u5277
  2837   00116C  2E49               	decfsz	??_move^0,f,c
  2838   00116E  D7FC               	bra	u5277
  2839   001170  2E4A               	decfsz	(??_move+1)^0,f,c
  2840   001172  D7FA               	bra	u5277
  2841   001174  0000               	nop	
  2842   001176                     
  2843                           ;dc_motor.c: 135:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2844   001176  C0D8  F023         	movff	move@mL,turnRight@mL
  2845   00117A  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  2846   00117E  C0DA  F025         	movff	move@mR,turnRight@mR
  2847   001182  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  2848   001186  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2849   00118A  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  2850   00118E  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  2851   001192  ECBB  F01E         	call	_turnRight	;wreg free
  2852   001196                     
  2853                           ;dc_motor.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2854   001196  0E05               	movlw	5
  2855   001198  6E4A               	movwf	(??_move+1)^0,c
  2856   00119A  0E0F               	movlw	15
  2857   00119C  6E49               	movwf	??_move^0,c
  2858   00119E  0EF1               	movlw	241
  2859   0011A0                     u5287:
  2860   0011A0  2EE8               	decfsz	wreg,f,c
  2861   0011A2  D7FE               	bra	u5287
  2862   0011A4  2E49               	decfsz	??_move^0,f,c
  2863   0011A6  D7FC               	bra	u5287
  2864   0011A8  2E4A               	decfsz	(??_move+1)^0,f,c
  2865   0011AA  D7FA               	bra	u5287
  2866   0011AC  0000               	nop	
  2867                           
  2868                           ;dc_motor.c: 137:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2869   0011AE  C0D8  F023         	movff	move@mL,turnRight@mL
  2870   0011B2  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  2871   0011B6  C0DA  F025         	movff	move@mR,turnRight@mR
  2872   0011BA  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  2873   0011BE  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  2874   0011C2  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  2875   0011C6  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  2876   0011CA  ECBB  F01E         	call	_turnRight	;wreg free
  2877   0011CE                     
  2878                           ;dc_motor.c: 138:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2879   0011CE  0E05               	movlw	5
  2880   0011D0  6E4A               	movwf	(??_move+1)^0,c
  2881   0011D2  0E0F               	movlw	15
  2882   0011D4  6E49               	movwf	??_move^0,c
  2883   0011D6  0EF1               	movlw	241
  2884   0011D8                     u5297:
  2885   0011D8  2EE8               	decfsz	wreg,f,c
  2886   0011DA  D7FE               	bra	u5297
  2887   0011DC  2E49               	decfsz	??_move^0,f,c
  2888   0011DE  D7FC               	bra	u5297
  2889   0011E0  2E4A               	decfsz	(??_move+1)^0,f,c
  2890   0011E2  D7FA               	bra	u5297
  2891   0011E4  0000               	nop	
  2892   0011E6                     
  2893                           ;dc_motor.c: 139:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2894   0011E6  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  2895   0011EA  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  2896   0011EE  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  2897   0011F2  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  2898   0011F6  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2899   0011FA  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2900   0011FE  EC56  F022         	call	_fullSpeedAhead	;wreg free
  2901                           
  2902                           ;dc_motor.c: 140:     }
  2903   001202  EF1D  F00B         	goto	l562
  2904   001206                     l5553:
  2905                           
  2906                           ; BSR set to: 0
  2907   001206  0E05               	movlw	5
  2908   001208  19DC               	xorwf	move@color& (0+255),w,b
  2909   00120A  A4D8               	btfss	status,2,c
  2910   00120C  EF0A  F009         	goto	u4731
  2911   001210  EF0C  F009         	goto	u4730
  2912   001214                     u4731:
  2913   001214  EF8C  F009         	goto	l5569
  2914   001218                     u4730:
  2915   001218                     
  2916                           ; BSR set to: 0
  2917                           ;dc_motor.c: 143:         reverseShort(mL, mR, straightSpeed, straightRamp);
  2918   001218  C0D8  F023         	movff	move@mL,reverseShort@mL
  2919   00121C  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  2920   001220  C0DA  F025         	movff	move@mR,reverseShort@mR
  2921   001224  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  2922   001228  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  2923   00122C  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  2924   001230  ECDD  F01B         	call	_reverseShort	;wreg free
  2925   001234                     
  2926                           ;dc_motor.c: 144:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2927   001234  0E05               	movlw	5
  2928   001236  6E4A               	movwf	(??_move+1)^0,c
  2929   001238  0E0F               	movlw	15
  2930   00123A  6E49               	movwf	??_move^0,c
  2931   00123C  0EF1               	movlw	241
  2932   00123E                     u5307:
  2933   00123E  2EE8               	decfsz	wreg,f,c
  2934   001240  D7FE               	bra	u5307
  2935   001242  2E49               	decfsz	??_move^0,f,c
  2936   001244  D7FC               	bra	u5307
  2937   001246  2E4A               	decfsz	(??_move+1)^0,f,c
  2938   001248  D7FA               	bra	u5307
  2939   00124A  0000               	nop	
  2940   00124C                     
  2941                           ;dc_motor.c: 145:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2942   00124C  C0D8  F023         	movff	move@mL,reverseOneSquare@mL
  2943   001250  C0D9  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  2944   001254  C0DA  F025         	movff	move@mR,reverseOneSquare@mR
  2945   001258  C0DB  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  2946   00125C  C0E2  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2947   001260  C0E3  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2948   001264  C0E4  F029         	movff	move@reverseDuration+1,reverseOneSquare@reverseDuration+1
  2949   001268  C0E5  F02A         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2950   00126C  ECCC  F01D         	call	_reverseOneSquare	;wreg free
  2951                           
  2952                           ;dc_motor.c: 146:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2953   001270  0E05               	movlw	5
  2954   001272  6E4A               	movwf	(??_move+1)^0,c
  2955   001274  0E0F               	movlw	15
  2956   001276  6E49               	movwf	??_move^0,c
  2957   001278  0EF1               	movlw	241
  2958   00127A                     u5317:
  2959   00127A  2EE8               	decfsz	wreg,f,c
  2960   00127C  D7FE               	bra	u5317
  2961   00127E  2E49               	decfsz	??_move^0,f,c
  2962   001280  D7FC               	bra	u5317
  2963   001282  2E4A               	decfsz	(??_move+1)^0,f,c
  2964   001284  D7FA               	bra	u5317
  2965   001286  0000               	nop	
  2966   001288                     
  2967                           ;dc_motor.c: 147:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2968   001288  C0D8  F023         	movff	move@mL,turnLeft@mL
  2969   00128C  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2970   001290  C0DA  F025         	movff	move@mR,turnLeft@mR
  2971   001294  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2972   001298  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2973   00129C  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2974   0012A0  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  2975   0012A4  ECA8  F01F         	call	_turnLeft	;wreg free
  2976   0012A8                     
  2977                           ;dc_motor.c: 148:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2978   0012A8  0E05               	movlw	5
  2979   0012AA  6E4A               	movwf	(??_move+1)^0,c
  2980   0012AC  0E0F               	movlw	15
  2981   0012AE  6E49               	movwf	??_move^0,c
  2982   0012B0  0EF1               	movlw	241
  2983   0012B2                     u5327:
  2984   0012B2  2EE8               	decfsz	wreg,f,c
  2985   0012B4  D7FE               	bra	u5327
  2986   0012B6  2E49               	decfsz	??_move^0,f,c
  2987   0012B8  D7FC               	bra	u5327
  2988   0012BA  2E4A               	decfsz	(??_move+1)^0,f,c
  2989   0012BC  D7FA               	bra	u5327
  2990   0012BE  0000               	nop	
  2991                           
  2992                           ;dc_motor.c: 149:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2993   0012C0  C0D8  F023         	movff	move@mL,turnLeft@mL
  2994   0012C4  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  2995   0012C8  C0DA  F025         	movff	move@mR,turnLeft@mR
  2996   0012CC  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  2997   0012D0  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  2998   0012D4  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  2999   0012D8  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3000   0012DC  ECA8  F01F         	call	_turnLeft	;wreg free
  3001   0012E0                     
  3002                           ;dc_motor.c: 150:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3003   0012E0  0E05               	movlw	5
  3004   0012E2  6E4A               	movwf	(??_move+1)^0,c
  3005   0012E4  0E0F               	movlw	15
  3006   0012E6  6E49               	movwf	??_move^0,c
  3007   0012E8  0EF1               	movlw	241
  3008   0012EA                     u5337:
  3009   0012EA  2EE8               	decfsz	wreg,f,c
  3010   0012EC  D7FE               	bra	u5337
  3011   0012EE  2E49               	decfsz	??_move^0,f,c
  3012   0012F0  D7FC               	bra	u5337
  3013   0012F2  2E4A               	decfsz	(??_move+1)^0,f,c
  3014   0012F4  D7FA               	bra	u5337
  3015   0012F6  0000               	nop	
  3016   0012F8                     
  3017                           ;dc_motor.c: 151:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3018   0012F8  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3019   0012FC  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3020   001300  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3021   001304  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3022   001308  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3023   00130C  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3024   001310  EC56  F022         	call	_fullSpeedAhead	;wreg free
  3025                           
  3026                           ;dc_motor.c: 152:     }
  3027   001314  EF1D  F00B         	goto	l562
  3028   001318                     l5569:
  3029                           
  3030                           ; BSR set to: 0
  3031   001318  0E06               	movlw	6
  3032   00131A  19DC               	xorwf	move@color& (0+255),w,b
  3033   00131C  A4D8               	btfss	status,2,c
  3034   00131E  EF93  F009         	goto	u4741
  3035   001322  EF95  F009         	goto	u4740
  3036   001326                     u4741:
  3037   001326  EF13  F00A         	goto	l5585
  3038   00132A                     u4740:
  3039   00132A                     
  3040                           ; BSR set to: 0
  3041                           ;dc_motor.c: 155:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3042   00132A  C0D8  F023         	movff	move@mL,reverseShort@mL
  3043   00132E  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3044   001332  C0DA  F025         	movff	move@mR,reverseShort@mR
  3045   001336  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3046   00133A  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3047   00133E  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3048   001342  ECDD  F01B         	call	_reverseShort	;wreg free
  3049   001346                     
  3050                           ;dc_motor.c: 156:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3051   001346  0E05               	movlw	5
  3052   001348  6E4A               	movwf	(??_move+1)^0,c
  3053   00134A  0E0F               	movlw	15
  3054   00134C  6E49               	movwf	??_move^0,c
  3055   00134E  0EF1               	movlw	241
  3056   001350                     u5347:
  3057   001350  2EE8               	decfsz	wreg,f,c
  3058   001352  D7FE               	bra	u5347
  3059   001354  2E49               	decfsz	??_move^0,f,c
  3060   001356  D7FC               	bra	u5347
  3061   001358  2E4A               	decfsz	(??_move+1)^0,f,c
  3062   00135A  D7FA               	bra	u5347
  3063   00135C  0000               	nop	
  3064   00135E                     
  3065                           ;dc_motor.c: 157:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3066   00135E  C0D8  F023         	movff	move@mL,turnRight@mL
  3067   001362  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3068   001366  C0DA  F025         	movff	move@mR,turnRight@mR
  3069   00136A  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3070   00136E  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3071   001372  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  3072   001376  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  3073   00137A  ECBB  F01E         	call	_turnRight	;wreg free
  3074                           
  3075                           ;dc_motor.c: 158:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3076   00137E  0E05               	movlw	5
  3077   001380  6E4A               	movwf	(??_move+1)^0,c
  3078   001382  0E0F               	movlw	15
  3079   001384  6E49               	movwf	??_move^0,c
  3080   001386  0EF1               	movlw	241
  3081   001388                     u5357:
  3082   001388  2EE8               	decfsz	wreg,f,c
  3083   00138A  D7FE               	bra	u5357
  3084   00138C  2E49               	decfsz	??_move^0,f,c
  3085   00138E  D7FC               	bra	u5357
  3086   001390  2E4A               	decfsz	(??_move+1)^0,f,c
  3087   001392  D7FA               	bra	u5357
  3088   001394  0000               	nop	
  3089   001396                     
  3090                           ;dc_motor.c: 159:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3091   001396  C0D8  F023         	movff	move@mL,turnRight@mL
  3092   00139A  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3093   00139E  C0DA  F025         	movff	move@mR,turnRight@mR
  3094   0013A2  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3095   0013A6  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3096   0013AA  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  3097   0013AE  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  3098   0013B2  ECBB  F01E         	call	_turnRight	;wreg free
  3099   0013B6                     
  3100                           ;dc_motor.c: 160:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3101   0013B6  0E05               	movlw	5
  3102   0013B8  6E4A               	movwf	(??_move+1)^0,c
  3103   0013BA  0E0F               	movlw	15
  3104   0013BC  6E49               	movwf	??_move^0,c
  3105   0013BE  0EF1               	movlw	241
  3106   0013C0                     u5367:
  3107   0013C0  2EE8               	decfsz	wreg,f,c
  3108   0013C2  D7FE               	bra	u5367
  3109   0013C4  2E49               	decfsz	??_move^0,f,c
  3110   0013C6  D7FC               	bra	u5367
  3111   0013C8  2E4A               	decfsz	(??_move+1)^0,f,c
  3112   0013CA  D7FA               	bra	u5367
  3113   0013CC  0000               	nop	
  3114                           
  3115                           ;dc_motor.c: 161:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3116   0013CE  C0D8  F023         	movff	move@mL,turnRight@mL
  3117   0013D2  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3118   0013D6  C0DA  F025         	movff	move@mR,turnRight@mR
  3119   0013DA  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3120   0013DE  C0E6  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3121   0013E2  C0E7  F028         	movff	move@turnDuration,turnRight@turnDuration
  3122   0013E6  C0E8  F029         	movff	move@turnRamp,turnRight@turnRamp
  3123   0013EA  ECBB  F01E         	call	_turnRight	;wreg free
  3124   0013EE                     
  3125                           ;dc_motor.c: 162:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3126   0013EE  0E05               	movlw	5
  3127   0013F0  6E4A               	movwf	(??_move+1)^0,c
  3128   0013F2  0E0F               	movlw	15
  3129   0013F4  6E49               	movwf	??_move^0,c
  3130   0013F6  0EF1               	movlw	241
  3131   0013F8                     u5377:
  3132   0013F8  2EE8               	decfsz	wreg,f,c
  3133   0013FA  D7FE               	bra	u5377
  3134   0013FC  2E49               	decfsz	??_move^0,f,c
  3135   0013FE  D7FC               	bra	u5377
  3136   001400  2E4A               	decfsz	(??_move+1)^0,f,c
  3137   001402  D7FA               	bra	u5377
  3138   001404  0000               	nop	
  3139   001406                     
  3140                           ;dc_motor.c: 163:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3141   001406  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3142   00140A  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3143   00140E  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3144   001412  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3145   001416  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3146   00141A  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3147   00141E  EC56  F022         	call	_fullSpeedAhead	;wreg free
  3148                           
  3149                           ;dc_motor.c: 164:     }
  3150   001422  EF1D  F00B         	goto	l562
  3151   001426                     l5585:
  3152                           
  3153                           ; BSR set to: 0
  3154   001426  0E07               	movlw	7
  3155   001428  19DC               	xorwf	move@color& (0+255),w,b
  3156   00142A  A4D8               	btfss	status,2,c
  3157   00142C  EF1A  F00A         	goto	u4751
  3158   001430  EF1C  F00A         	goto	u4750
  3159   001434                     u4751:
  3160   001434  EF9A  F00A         	goto	l5601
  3161   001438                     u4750:
  3162   001438                     
  3163                           ; BSR set to: 0
  3164                           ;dc_motor.c: 167:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3165   001438  C0D8  F023         	movff	move@mL,reverseShort@mL
  3166   00143C  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3167   001440  C0DA  F025         	movff	move@mR,reverseShort@mR
  3168   001444  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3169   001448  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3170   00144C  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3171   001450  ECDD  F01B         	call	_reverseShort	;wreg free
  3172   001454                     
  3173                           ;dc_motor.c: 168:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3174   001454  0E05               	movlw	5
  3175   001456  6E4A               	movwf	(??_move+1)^0,c
  3176   001458  0E0F               	movlw	15
  3177   00145A  6E49               	movwf	??_move^0,c
  3178   00145C  0EF1               	movlw	241
  3179   00145E                     u5387:
  3180   00145E  2EE8               	decfsz	wreg,f,c
  3181   001460  D7FE               	bra	u5387
  3182   001462  2E49               	decfsz	??_move^0,f,c
  3183   001464  D7FC               	bra	u5387
  3184   001466  2E4A               	decfsz	(??_move+1)^0,f,c
  3185   001468  D7FA               	bra	u5387
  3186   00146A  0000               	nop	
  3187   00146C                     
  3188                           ;dc_motor.c: 169:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3189   00146C  C0D8  F023         	movff	move@mL,turnLeft@mL
  3190   001470  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3191   001474  C0DA  F025         	movff	move@mR,turnLeft@mR
  3192   001478  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3193   00147C  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3194   001480  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3195   001484  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3196   001488  ECA8  F01F         	call	_turnLeft	;wreg free
  3197                           
  3198                           ;dc_motor.c: 170:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3199   00148C  0E05               	movlw	5
  3200   00148E  6E4A               	movwf	(??_move+1)^0,c
  3201   001490  0E0F               	movlw	15
  3202   001492  6E49               	movwf	??_move^0,c
  3203   001494  0EF1               	movlw	241
  3204   001496                     u5397:
  3205   001496  2EE8               	decfsz	wreg,f,c
  3206   001498  D7FE               	bra	u5397
  3207   00149A  2E49               	decfsz	??_move^0,f,c
  3208   00149C  D7FC               	bra	u5397
  3209   00149E  2E4A               	decfsz	(??_move+1)^0,f,c
  3210   0014A0  D7FA               	bra	u5397
  3211   0014A2  0000               	nop	
  3212   0014A4                     
  3213                           ;dc_motor.c: 171:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3214   0014A4  C0D8  F023         	movff	move@mL,turnLeft@mL
  3215   0014A8  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3216   0014AC  C0DA  F025         	movff	move@mR,turnLeft@mR
  3217   0014B0  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3218   0014B4  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3219   0014B8  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3220   0014BC  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3221   0014C0  ECA8  F01F         	call	_turnLeft	;wreg free
  3222   0014C4                     
  3223                           ;dc_motor.c: 172:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3224   0014C4  0E05               	movlw	5
  3225   0014C6  6E4A               	movwf	(??_move+1)^0,c
  3226   0014C8  0E0F               	movlw	15
  3227   0014CA  6E49               	movwf	??_move^0,c
  3228   0014CC  0EF1               	movlw	241
  3229   0014CE                     u5407:
  3230   0014CE  2EE8               	decfsz	wreg,f,c
  3231   0014D0  D7FE               	bra	u5407
  3232   0014D2  2E49               	decfsz	??_move^0,f,c
  3233   0014D4  D7FC               	bra	u5407
  3234   0014D6  2E4A               	decfsz	(??_move+1)^0,f,c
  3235   0014D8  D7FA               	bra	u5407
  3236   0014DA  0000               	nop	
  3237                           
  3238                           ;dc_motor.c: 173:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3239   0014DC  C0D8  F023         	movff	move@mL,turnLeft@mL
  3240   0014E0  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3241   0014E4  C0DA  F025         	movff	move@mR,turnLeft@mR
  3242   0014E8  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3243   0014EC  C0E6  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3244   0014F0  C0E7  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3245   0014F4  C0E8  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3246   0014F8  ECA8  F01F         	call	_turnLeft	;wreg free
  3247   0014FC                     
  3248                           ;dc_motor.c: 174:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3249   0014FC  0E05               	movlw	5
  3250   0014FE  6E4A               	movwf	(??_move+1)^0,c
  3251   001500  0E0F               	movlw	15
  3252   001502  6E49               	movwf	??_move^0,c
  3253   001504  0EF1               	movlw	241
  3254   001506                     u5417:
  3255   001506  2EE8               	decfsz	wreg,f,c
  3256   001508  D7FE               	bra	u5417
  3257   00150A  2E49               	decfsz	??_move^0,f,c
  3258   00150C  D7FC               	bra	u5417
  3259   00150E  2E4A               	decfsz	(??_move+1)^0,f,c
  3260   001510  D7FA               	bra	u5417
  3261   001512  0000               	nop	
  3262   001514                     
  3263                           ;dc_motor.c: 175:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3264   001514  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3265   001518  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3266   00151C  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3267   001520  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3268   001524  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3269   001528  C0E5  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3270   00152C  EC56  F022         	call	_fullSpeedAhead	;wreg free
  3271                           
  3272                           ;dc_motor.c: 176:     }
  3273   001530  EF1D  F00B         	goto	l562
  3274   001534                     l5601:
  3275                           
  3276                           ; BSR set to: 0
  3277   001534  0E08               	movlw	8
  3278   001536  19DC               	xorwf	move@color& (0+255),w,b
  3279   001538  A4D8               	btfss	status,2,c
  3280   00153A  EFA1  F00A         	goto	u4761
  3281   00153E  EFA3  F00A         	goto	u4760
  3282   001542                     u4761:
  3283   001542  EFE1  F00A         	goto	l5609
  3284   001546                     u4760:
  3285   001546                     
  3286                           ; BSR set to: 0
  3287                           ;dc_motor.c: 179:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3288   001546  C0D8  F023         	movff	move@mL,reverseShort@mL
  3289   00154A  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3290   00154E  C0DA  F025         	movff	move@mR,reverseShort@mR
  3291   001552  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3292   001556  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3293   00155A  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3294   00155E  ECDD  F01B         	call	_reverseShort	;wreg free
  3295   001562                     
  3296                           ;dc_motor.c: 180:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3297   001562  0E05               	movlw	5
  3298   001564  6E4A               	movwf	(??_move+1)^0,c
  3299   001566  0E0F               	movlw	15
  3300   001568  6E49               	movwf	??_move^0,c
  3301   00156A  0EF1               	movlw	241
  3302   00156C                     u5427:
  3303   00156C  2EE8               	decfsz	wreg,f,c
  3304   00156E  D7FE               	bra	u5427
  3305   001570  2E49               	decfsz	??_move^0,f,c
  3306   001572  D7FC               	bra	u5427
  3307   001574  2E4A               	decfsz	(??_move+1)^0,f,c
  3308   001576  D7FA               	bra	u5427
  3309   001578  0000               	nop	
  3310   00157A                     
  3311                           ;dc_motor.c: 182:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  3312   00157A  C0D8  F032         	movff	move@mL,returnHome@mL
  3313   00157E  C0D9  F033         	movff	move@mL+1,returnHome@mL+1
  3314   001582  C0DA  F034         	movff	move@mR,returnHome@mR
  3315   001586  C0DB  F035         	movff	move@mR+1,returnHome@mR+1
  3316   00158A  C0DD  F036         	movff	move@moveSequence,returnHome@moveSequence
  3317   00158E  C0DE  F037         	movff	move@moveSequence+1,returnHome@moveSequence+1
  3318   001592  C0DF  F038         	movff	move@straightTime,returnHome@straightTime
  3319   001596  C0E0  F039         	movff	move@straightTime+1,returnHome@straightTime+1
  3320   00159A  C0E1  F03A         	movff	move@curMove,returnHome@curMove
  3321   00159E  C0E2  F03B         	movff	move@straightSpeed,returnHome@straightSpeed
  3322   0015A2  C0E3  F03C         	movff	move@reverseDuration,returnHome@reverseDuration
  3323   0015A6  C0E4  F03D         	movff	move@reverseDuration+1,returnHome@reverseDuration+1
  3324   0015AA  C0E5  F03E         	movff	move@straightRamp,returnHome@straightRamp
  3325   0015AE  C0E6  F03F         	movff	move@turnSpeed,returnHome@turnSpeed
  3326   0015B2  C0E7  F040         	movff	move@turnDuration,returnHome@turnDuration
  3327   0015B6  C0E8  F041         	movff	move@turnRamp,returnHome@turnRamp
  3328   0015BA  EC1E  F00B         	call	_returnHome	;wreg free
  3329                           
  3330                           ;dc_motor.c: 183:     }
  3331   0015BE  EF1D  F00B         	goto	l562
  3332   0015C2                     l5609:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;dc_motor.c: 186:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3336   0015C2  C0D8  F023         	movff	move@mL,reverseShort@mL
  3337   0015C6  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3338   0015CA  C0DA  F025         	movff	move@mR,reverseShort@mR
  3339   0015CE  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3340   0015D2  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3341   0015D6  C0E5  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3342   0015DA  ECDD  F01B         	call	_reverseShort	;wreg free
  3343   0015DE                     
  3344                           ;dc_motor.c: 187:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3345   0015DE  0E05               	movlw	5
  3346   0015E0  6E4A               	movwf	(??_move+1)^0,c
  3347   0015E2  0E0F               	movlw	15
  3348   0015E4  6E49               	movwf	??_move^0,c
  3349   0015E6  0EF1               	movlw	241
  3350   0015E8                     u5437:
  3351   0015E8  2EE8               	decfsz	wreg,f,c
  3352   0015EA  D7FE               	bra	u5437
  3353   0015EC  2E49               	decfsz	??_move^0,f,c
  3354   0015EE  D7FC               	bra	u5437
  3355   0015F0  2E4A               	decfsz	(??_move+1)^0,f,c
  3356   0015F2  D7FA               	bra	u5437
  3357   0015F4  0000               	nop	
  3358   0015F6                     
  3359                           ;dc_motor.c: 189:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  3360   0015F6  C0D8  F032         	movff	move@mL,returnHome@mL
  3361   0015FA  C0D9  F033         	movff	move@mL+1,returnHome@mL+1
  3362   0015FE  C0DA  F034         	movff	move@mR,returnHome@mR
  3363   001602  C0DB  F035         	movff	move@mR+1,returnHome@mR+1
  3364   001606  C0DD  F036         	movff	move@moveSequence,returnHome@moveSequence
  3365   00160A  C0DE  F037         	movff	move@moveSequence+1,returnHome@moveSequence+1
  3366   00160E  C0DF  F038         	movff	move@straightTime,returnHome@straightTime
  3367   001612  C0E0  F039         	movff	move@straightTime+1,returnHome@straightTime+1
  3368   001616  C0E1  F03A         	movff	move@curMove,returnHome@curMove
  3369   00161A  C0E2  F03B         	movff	move@straightSpeed,returnHome@straightSpeed
  3370   00161E  C0E3  F03C         	movff	move@reverseDuration,returnHome@reverseDuration
  3371   001622  C0E4  F03D         	movff	move@reverseDuration+1,returnHome@reverseDuration+1
  3372   001626  C0E5  F03E         	movff	move@straightRamp,returnHome@straightRamp
  3373   00162A  C0E6  F03F         	movff	move@turnSpeed,returnHome@turnSpeed
  3374   00162E  C0E7  F040         	movff	move@turnDuration,returnHome@turnDuration
  3375   001632  C0E8  F041         	movff	move@turnRamp,returnHome@turnRamp
  3376   001636  EC1E  F00B         	call	_returnHome	;wreg free
  3377   00163A                     l562:
  3378   00163A  0012               	return		;funcret
  3379   00163C                     __end_of_move:
  3380                           	callstack 0
  3381                           
  3382 ;; *************** function _reverseShort *****************
  3383 ;; Defined at:
  3384 ;;		line 639 in file "dc_motor.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  3387 ;;		 -> main@motorL(10), 
  3388 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  3389 ;;		 -> main@motorR(10), 
  3390 ;;  straightSpee    1   38[COMRAM] unsigned char 
  3391 ;;  straightRamp    1   39[COMRAM] unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  cur_power       2   46[COMRAM] int 
  3394 ;;  i               2   44[COMRAM] int 
  3395 ;;  shortReverse    1   43[COMRAM] unsigned char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3405 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3406 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3407 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3408 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3409 ;;Total ram usage:       14 bytes
  3410 ;; Hardware stack levels used: 1
  3411 ;; Hardware stack levels required when called: 8
  3412 ;; This function calls:
  3413 ;;		_setMotorPWM
  3414 ;; This function is called by:
  3415 ;;		_move
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text3
  3420   0037BA                     __ptext3:
  3421                           	callstack 0
  3422   0037BA                     _reverseShort:
  3423                           	callstack 21
  3424   0037BA                     
  3425                           ;dc_motor.c: 639: void reverseShort(DC_motor *mL, DC_motor *mR, char straightSpeed, unsi
      +                          gned char straightRamp);dc_motor.c: 640: {;dc_motor.c: 641:     unsigned char shortRever
      +                          seDuration = 30;
  3426   0037BA  0E1E               	movlw	30
  3427   0037BC  6E2C               	movwf	reverseShort@shortReverseDuration^0,c
  3428   0037BE                     
  3429                           ;dc_motor.c: 643:     mL->direction = 0;
  3430   0037BE  EE20 F001          	lfsr	2,1
  3431   0037C2  5023               	movf	reverseShort@mL^0,w,c
  3432   0037C4  26D9               	addwf	fsr2l,f,c
  3433   0037C6  5024               	movf	(reverseShort@mL+1)^0,w,c
  3434   0037C8  22DA               	addwfc	fsr2h,f,c
  3435   0037CA  6ADF               	clrf	indf2,c
  3436   0037CC                     
  3437                           ;dc_motor.c: 644:     mR->direction = 0;
  3438   0037CC  EE20 F001          	lfsr	2,1
  3439   0037D0  5025               	movf	reverseShort@mR^0,w,c
  3440   0037D2  26D9               	addwf	fsr2l,f,c
  3441   0037D4  5026               	movf	(reverseShort@mR+1)^0,w,c
  3442   0037D6  22DA               	addwfc	fsr2h,f,c
  3443   0037D8  6ADF               	clrf	indf2,c
  3444                           
  3445                           ;dc_motor.c: 645:     int i;;dc_motor.c: 646:     int cur_power;;dc_motor.c: 647:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3446   0037DA  0E00               	movlw	0
  3447   0037DC  6E30               	movwf	(reverseShort@cur_power+1)^0,c
  3448   0037DE  0E01               	movlw	1
  3449   0037E0  6E2F               	movwf	reverseShort@cur_power^0,c
  3450   0037E2  EF3D  F01C         	goto	l5009
  3451   0037E6                     l4995:
  3452                           
  3453                           ;dc_motor.c: 648:         mL->power = cur_power+mL->compensation;
  3454   0037E6  EE20 F009          	lfsr	2,9
  3455   0037EA  5023               	movf	reverseShort@mL^0,w,c
  3456   0037EC  26D9               	addwf	fsr2l,f,c
  3457   0037EE  5024               	movf	(reverseShort@mL+1)^0,w,c
  3458   0037F0  22DA               	addwfc	fsr2h,f,c
  3459   0037F2  50DF               	movf	indf2,w,c
  3460   0037F4  242F               	addwf	reverseShort@cur_power^0,w,c
  3461   0037F6  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3462   0037FA  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3463   0037FE  6EDF               	movwf	indf2,c
  3464                           
  3465                           ;dc_motor.c: 649:         mR->power = cur_power+mR->compensation;
  3466   003800  EE20 F009          	lfsr	2,9
  3467   003804  5025               	movf	reverseShort@mR^0,w,c
  3468   003806  26D9               	addwf	fsr2l,f,c
  3469   003808  5026               	movf	(reverseShort@mR+1)^0,w,c
  3470   00380A  22DA               	addwfc	fsr2h,f,c
  3471   00380C  50DF               	movf	indf2,w,c
  3472   00380E  242F               	addwf	reverseShort@cur_power^0,w,c
  3473   003810  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3474   003814  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3475   003818  6EDF               	movwf	indf2,c
  3476   00381A                     
  3477                           ;dc_motor.c: 650:         setMotorPWM(mL);
  3478   00381A  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  3479   00381E  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  3480   003822  EC95  F020         	call	_setMotorPWM	;wreg free
  3481   003826                     
  3482                           ;dc_motor.c: 651:         setMotorPWM(mR);
  3483   003826  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  3484   00382A  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  3485   00382E  EC95  F020         	call	_setMotorPWM	;wreg free
  3486   003832                     
  3487                           ;dc_motor.c: 652:         for (i=0;i<straightRamp;i++) {
  3488   003832  0E00               	movlw	0
  3489   003834  6E2E               	movwf	(reverseShort@i+1)^0,c
  3490   003836  0E00               	movlw	0
  3491   003838  6E2D               	movwf	reverseShort@i^0,c
  3492   00383A  EF29  F01C         	goto	l733
  3493   00383E                     l5003:
  3494                           
  3495                           ;dc_motor.c: 653:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3496   00383E  0E68               	movlw	104
  3497   003840  6E29               	movwf	??_reverseShort^0,c
  3498   003842  0EE4               	movlw	228
  3499   003844                     u5447:
  3500   003844  2EE8               	decfsz	wreg,f,c
  3501   003846  D7FE               	bra	u5447
  3502   003848  2E29               	decfsz	??_reverseShort^0,f,c
  3503   00384A  D7FC               	bra	u5447
  3504   00384C  D000               	nop2	
  3505   00384E                     
  3506                           ;dc_motor.c: 654:         }
  3507   00384E  4A2D               	infsnz	reverseShort@i^0,f,c
  3508   003850  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3509   003852                     l733:
  3510   003852  5028               	movf	reverseShort@straightRamp^0,w,c
  3511   003854  6E29               	movwf	??_reverseShort^0,c
  3512   003856  6A2A               	clrf	(??_reverseShort+1)^0,c
  3513   003858  5029               	movf	??_reverseShort^0,w,c
  3514   00385A  5C2D               	subwf	reverseShort@i^0,w,c
  3515   00385C  502E               	movf	(reverseShort@i+1)^0,w,c
  3516   00385E  0A80               	xorlw	128
  3517   003860  6E2B               	movwf	(??_reverseShort+2)^0,c
  3518   003862  502A               	movf	(??_reverseShort+1)^0,w,c
  3519   003864  0A80               	xorlw	128
  3520   003866  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3521   003868  A0D8               	btfss	status,0,c
  3522   00386A  EF39  F01C         	goto	u4001
  3523   00386E  EF3B  F01C         	goto	u4000
  3524   003872                     u4001:
  3525   003872  EF1F  F01C         	goto	l5003
  3526   003876                     u4000:
  3527   003876                     
  3528                           ;dc_motor.c: 655:     }
  3529   003876  4A2F               	infsnz	reverseShort@cur_power^0,f,c
  3530   003878  2A30               	incf	(reverseShort@cur_power+1)^0,f,c
  3531   00387A                     l5009:
  3532   00387A  5027               	movf	reverseShort@straightSpeed^0,w,c
  3533   00387C  6E29               	movwf	??_reverseShort^0,c
  3534   00387E  6A2A               	clrf	(??_reverseShort+1)^0,c
  3535   003880  502F               	movf	reverseShort@cur_power^0,w,c
  3536   003882  5C29               	subwf	??_reverseShort^0,w,c
  3537   003884  502A               	movf	(??_reverseShort+1)^0,w,c
  3538   003886  0A80               	xorlw	128
  3539   003888  6E2B               	movwf	(??_reverseShort+2)^0,c
  3540   00388A  5030               	movf	(reverseShort@cur_power+1)^0,w,c
  3541   00388C  0A80               	xorlw	128
  3542   00388E  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3543   003890  B0D8               	btfsc	status,0,c
  3544   003892  EF4D  F01C         	goto	u4011
  3545   003896  EF4F  F01C         	goto	u4010
  3546   00389A                     u4011:
  3547   00389A  EFF3  F01B         	goto	l4995
  3548   00389E                     u4010:
  3549   00389E                     
  3550                           ;dc_motor.c: 657:     for (i=0;i<shortReverseDuration;i++) {
  3551   00389E  0E00               	movlw	0
  3552   0038A0  6E2E               	movwf	(reverseShort@i+1)^0,c
  3553   0038A2  0E00               	movlw	0
  3554   0038A4  6E2D               	movwf	reverseShort@i^0,c
  3555   0038A6  EF5F  F01C         	goto	l737
  3556   0038AA                     l5013:
  3557                           
  3558                           ;dc_motor.c: 658:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3559   0038AA  0E68               	movlw	104
  3560   0038AC  6E29               	movwf	??_reverseShort^0,c
  3561   0038AE  0EE4               	movlw	228
  3562   0038B0                     u5457:
  3563   0038B0  2EE8               	decfsz	wreg,f,c
  3564   0038B2  D7FE               	bra	u5457
  3565   0038B4  2E29               	decfsz	??_reverseShort^0,f,c
  3566   0038B6  D7FC               	bra	u5457
  3567   0038B8  D000               	nop2	
  3568   0038BA                     
  3569                           ;dc_motor.c: 659:         }
  3570   0038BA  4A2D               	infsnz	reverseShort@i^0,f,c
  3571   0038BC  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3572   0038BE                     l737:
  3573   0038BE  502C               	movf	reverseShort@shortReverseDuration^0,w,c
  3574   0038C0  6E29               	movwf	??_reverseShort^0,c
  3575   0038C2  6A2A               	clrf	(??_reverseShort+1)^0,c
  3576   0038C4  5029               	movf	??_reverseShort^0,w,c
  3577   0038C6  5C2D               	subwf	reverseShort@i^0,w,c
  3578   0038C8  502E               	movf	(reverseShort@i+1)^0,w,c
  3579   0038CA  0A80               	xorlw	128
  3580   0038CC  6E2B               	movwf	(??_reverseShort+2)^0,c
  3581   0038CE  502A               	movf	(??_reverseShort+1)^0,w,c
  3582   0038D0  0A80               	xorlw	128
  3583   0038D2  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3584   0038D4  A0D8               	btfss	status,0,c
  3585   0038D6  EF6F  F01C         	goto	u4021
  3586   0038DA  EF71  F01C         	goto	u4020
  3587   0038DE                     u4021:
  3588   0038DE  EF55  F01C         	goto	l5013
  3589   0038E2                     u4020:
  3590   0038E2                     
  3591                           ;dc_motor.c: 661:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3592   0038E2  C027  F02F         	movff	reverseShort@straightSpeed,reverseShort@cur_power
  3593   0038E6  6A30               	clrf	(reverseShort@cur_power+1)^0,c
  3594   0038E8                     l5017:
  3595   0038E8  BE30               	btfsc	(reverseShort@cur_power+1)^0,7,c
  3596   0038EA  EF7B  F01C         	goto	u4030
  3597   0038EE  EF79  F01C         	goto	u4031
  3598   0038F2                     u4031:
  3599   0038F2  EF7D  F01C         	goto	l5021
  3600   0038F6                     u4030:
  3601   0038F6  EFCA  F01C         	goto	l5037
  3602   0038FA                     l5021:
  3603                           
  3604                           ;dc_motor.c: 662:         mL->power = cur_power+mL->compensation;
  3605   0038FA  EE20 F009          	lfsr	2,9
  3606   0038FE  5023               	movf	reverseShort@mL^0,w,c
  3607   003900  26D9               	addwf	fsr2l,f,c
  3608   003902  5024               	movf	(reverseShort@mL+1)^0,w,c
  3609   003904  22DA               	addwfc	fsr2h,f,c
  3610   003906  50DF               	movf	indf2,w,c
  3611   003908  242F               	addwf	reverseShort@cur_power^0,w,c
  3612   00390A  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3613   00390E  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3614   003912  6EDF               	movwf	indf2,c
  3615                           
  3616                           ;dc_motor.c: 663:         mR->power = cur_power+mR->compensation;
  3617   003914  EE20 F009          	lfsr	2,9
  3618   003918  5025               	movf	reverseShort@mR^0,w,c
  3619   00391A  26D9               	addwf	fsr2l,f,c
  3620   00391C  5026               	movf	(reverseShort@mR+1)^0,w,c
  3621   00391E  22DA               	addwfc	fsr2h,f,c
  3622   003920  50DF               	movf	indf2,w,c
  3623   003922  242F               	addwf	reverseShort@cur_power^0,w,c
  3624   003924  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3625   003928  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3626   00392C  6EDF               	movwf	indf2,c
  3627   00392E                     
  3628                           ;dc_motor.c: 664:         setMotorPWM(mL);
  3629   00392E  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  3630   003932  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  3631   003936  EC95  F020         	call	_setMotorPWM	;wreg free
  3632   00393A                     
  3633                           ;dc_motor.c: 665:         setMotorPWM(mR);
  3634   00393A  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  3635   00393E  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  3636   003942  EC95  F020         	call	_setMotorPWM	;wreg free
  3637   003946                     
  3638                           ;dc_motor.c: 666:         for (i=0;i<straightRamp;i++) {
  3639   003946  0E00               	movlw	0
  3640   003948  6E2E               	movwf	(reverseShort@i+1)^0,c
  3641   00394A  0E00               	movlw	0
  3642   00394C  6E2D               	movwf	reverseShort@i^0,c
  3643   00394E  EFB3  F01C         	goto	l742
  3644   003952                     l5029:
  3645                           
  3646                           ;dc_motor.c: 667:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3647   003952  0E68               	movlw	104
  3648   003954  6E29               	movwf	??_reverseShort^0,c
  3649   003956  0EE4               	movlw	228
  3650   003958                     u5467:
  3651   003958  2EE8               	decfsz	wreg,f,c
  3652   00395A  D7FE               	bra	u5467
  3653   00395C  2E29               	decfsz	??_reverseShort^0,f,c
  3654   00395E  D7FC               	bra	u5467
  3655   003960  D000               	nop2	
  3656   003962                     
  3657                           ;dc_motor.c: 668:         }
  3658   003962  4A2D               	infsnz	reverseShort@i^0,f,c
  3659   003964  2A2E               	incf	(reverseShort@i+1)^0,f,c
  3660   003966                     l742:
  3661   003966  5028               	movf	reverseShort@straightRamp^0,w,c
  3662   003968  6E29               	movwf	??_reverseShort^0,c
  3663   00396A  6A2A               	clrf	(??_reverseShort+1)^0,c
  3664   00396C  5029               	movf	??_reverseShort^0,w,c
  3665   00396E  5C2D               	subwf	reverseShort@i^0,w,c
  3666   003970  502E               	movf	(reverseShort@i+1)^0,w,c
  3667   003972  0A80               	xorlw	128
  3668   003974  6E2B               	movwf	(??_reverseShort+2)^0,c
  3669   003976  502A               	movf	(??_reverseShort+1)^0,w,c
  3670   003978  0A80               	xorlw	128
  3671   00397A  582B               	subwfb	(??_reverseShort+2)^0,w,c
  3672   00397C  A0D8               	btfss	status,0,c
  3673   00397E  EFC3  F01C         	goto	u4041
  3674   003982  EFC5  F01C         	goto	u4040
  3675   003986                     u4041:
  3676   003986  EFA9  F01C         	goto	l5029
  3677   00398A                     u4040:
  3678   00398A                     
  3679                           ;dc_motor.c: 669:     }
  3680   00398A  062F               	decf	reverseShort@cur_power^0,f,c
  3681   00398C  A0D8               	btfss	status,0,c
  3682   00398E  0630               	decf	(reverseShort@cur_power+1)^0,f,c
  3683   003990  EF74  F01C         	goto	l5017
  3684   003994                     l5037:
  3685                           
  3686                           ;dc_motor.c: 670:     mL->power = 0;
  3687   003994  C023  FFD9         	movff	reverseShort@mL,fsr2l
  3688   003998  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  3689   00399C  6ADF               	clrf	indf2,c
  3690                           
  3691                           ;dc_motor.c: 671:     mR->power = 0;
  3692   00399E  C025  FFD9         	movff	reverseShort@mR,fsr2l
  3693   0039A2  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  3694   0039A6  6ADF               	clrf	indf2,c
  3695   0039A8  0012               	return		;funcret
  3696   0039AA                     __end_of_reverseShort:
  3697                           	callstack 0
  3698                           
  3699 ;; *************** function _returnHome *****************
  3700 ;; Defined at:
  3701 ;;		line 196 in file "dc_motor.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  3704 ;;		 -> main@motorL(10), 
  3705 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  3706 ;;		 -> main@motorR(10), 
  3707 ;;  moveSequence    2   53[COMRAM] PTR unsigned char 
  3708 ;;		 -> main@moveSequence(40), 
  3709 ;;  straightTime    2   55[COMRAM] PTR unsigned int 
  3710 ;;		 -> main@straightTime(82), 
  3711 ;;  curMove         1   57[COMRAM] unsigned char 
  3712 ;;  straightSpee    1   58[COMRAM] unsigned char 
  3713 ;;  reverseDurat    2   59[COMRAM] unsigned int 
  3714 ;;  straightRamp    1   61[COMRAM] unsigned char 
  3715 ;;  turnSpeed       1   62[COMRAM] unsigned char 
  3716 ;;  turnDuration    1   63[COMRAM] unsigned char 
  3717 ;;  turnRamp        1   64[COMRAM] unsigned char 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;  i               1   71[COMRAM] unsigned char 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3729 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3731 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3732 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3733 ;;Total ram usage:       23 bytes
  3734 ;; Hardware stack levels used: 1
  3735 ;; Hardware stack levels required when called: 9
  3736 ;; This function calls:
  3737 ;;		_fullSpeedAhead
  3738 ;;		_get16bitTMR0val
  3739 ;;		_resetTimer
  3740 ;;		_reverseOneSquare
  3741 ;;		_reverseWallAdjust
  3742 ;;		_stop
  3743 ;;		_turnLeft
  3744 ;;		_turnRight
  3745 ;;		_white_Light
  3746 ;; This function is called by:
  3747 ;;		_move
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text4
  3752   00163C                     __ptext4:
  3753                           	callstack 0
  3754   00163C                     _returnHome:
  3755                           	callstack 20
  3756   00163C                     
  3757                           ;dc_motor.c: 196: void returnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSequenc
      +                          e, unsigned int *straightTime, char curMove, char straightSpeed, unsigned int reverseDur
      +                          ation, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsigned 
      +                          char turnRamp);dc_motor.c: 197: {;dc_motor.c: 198:     white_Light(0);
  3758   00163C  0E00               	movlw	0
  3759   00163E  ECF5  F025         	call	_white_Light
  3760   001642                     
  3761                           ;dc_motor.c: 199:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3762   001642  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3763   001646  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3764   00164A  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3765   00164E  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3766   001652  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3767   001656  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3768   00165A  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3769   00165E  ECA8  F01F         	call	_turnLeft	;wreg free
  3770   001662                     
  3771                           ;dc_motor.c: 200:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3772   001662  0E05               	movlw	5
  3773   001664  6E43               	movwf	(??_returnHome+1)^0,c
  3774   001666  0E0F               	movlw	15
  3775   001668  6E42               	movwf	??_returnHome^0,c
  3776   00166A  0EF1               	movlw	241
  3777   00166C                     u5477:
  3778   00166C  2EE8               	decfsz	wreg,f,c
  3779   00166E  D7FE               	bra	u5477
  3780   001670  2E42               	decfsz	??_returnHome^0,f,c
  3781   001672  D7FC               	bra	u5477
  3782   001674  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3783   001676  D7FA               	bra	u5477
  3784   001678  0000               	nop	
  3785   00167A                     
  3786                           ;dc_motor.c: 201:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3787   00167A  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3788   00167E  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3789   001682  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3790   001686  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3791   00168A  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3792   00168E  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3793   001692  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3794   001696  ECA8  F01F         	call	_turnLeft	;wreg free
  3795   00169A                     
  3796                           ;dc_motor.c: 202:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3797   00169A  0E05               	movlw	5
  3798   00169C  6E43               	movwf	(??_returnHome+1)^0,c
  3799   00169E  0E0F               	movlw	15
  3800   0016A0  6E42               	movwf	??_returnHome^0,c
  3801   0016A2  0EF1               	movlw	241
  3802   0016A4                     u5487:
  3803   0016A4  2EE8               	decfsz	wreg,f,c
  3804   0016A6  D7FE               	bra	u5487
  3805   0016A8  2E42               	decfsz	??_returnHome^0,f,c
  3806   0016AA  D7FC               	bra	u5487
  3807   0016AC  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3808   0016AE  D7FA               	bra	u5487
  3809   0016B0  0000               	nop	
  3810   0016B2                     
  3811                           ;dc_motor.c: 203:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3812   0016B2  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3813   0016B6  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3814   0016BA  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3815   0016BE  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3816   0016C2  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3817   0016C6  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3818   0016CA  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3819   0016CE  ECA8  F01F         	call	_turnLeft	;wreg free
  3820   0016D2                     
  3821                           ;dc_motor.c: 204:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3822   0016D2  0E05               	movlw	5
  3823   0016D4  6E43               	movwf	(??_returnHome+1)^0,c
  3824   0016D6  0E0F               	movlw	15
  3825   0016D8  6E42               	movwf	??_returnHome^0,c
  3826   0016DA  0EF1               	movlw	241
  3827   0016DC                     u5497:
  3828   0016DC  2EE8               	decfsz	wreg,f,c
  3829   0016DE  D7FE               	bra	u5497
  3830   0016E0  2E42               	decfsz	??_returnHome^0,f,c
  3831   0016E2  D7FC               	bra	u5497
  3832   0016E4  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3833   0016E6  D7FA               	bra	u5497
  3834   0016E8  0000               	nop	
  3835   0016EA                     
  3836                           ;dc_motor.c: 205:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3837   0016EA  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3838   0016EE  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3839   0016F2  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3840   0016F6  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3841   0016FA  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3842   0016FE  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3843   001702  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3844   001706  ECA8  F01F         	call	_turnLeft	;wreg free
  3845   00170A                     
  3846                           ;dc_motor.c: 206:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3847   00170A  0E05               	movlw	5
  3848   00170C  6E43               	movwf	(??_returnHome+1)^0,c
  3849   00170E  0E0F               	movlw	15
  3850   001710  6E42               	movwf	??_returnHome^0,c
  3851   001712  0EF1               	movlw	241
  3852   001714                     u5507:
  3853   001714  2EE8               	decfsz	wreg,f,c
  3854   001716  D7FE               	bra	u5507
  3855   001718  2E42               	decfsz	??_returnHome^0,f,c
  3856   00171A  D7FC               	bra	u5507
  3857   00171C  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3858   00171E  D7FA               	bra	u5507
  3859   001720  0000               	nop	
  3860   001722                     
  3861                           ;dc_motor.c: 207:     reverseWallAdjust(mL, mR, straightSpeed, straightRamp);
  3862   001722  C032  F023         	movff	returnHome@mL,reverseWallAdjust@mL
  3863   001726  C033  F024         	movff	returnHome@mL+1,reverseWallAdjust@mL+1
  3864   00172A  C034  F025         	movff	returnHome@mR,reverseWallAdjust@mR
  3865   00172E  C035  F026         	movff	returnHome@mR+1,reverseWallAdjust@mR+1
  3866   001732  C03B  F027         	movff	returnHome@straightSpeed,reverseWallAdjust@straightSpeed
  3867   001736  C03E  F028         	movff	returnHome@straightRamp,reverseWallAdjust@straightRamp
  3868   00173A  ECE3  F01A         	call	_reverseWallAdjust	;wreg free
  3869   00173E                     
  3870                           ;dc_motor.c: 208:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3871   00173E  0E05               	movlw	5
  3872   001740  6E43               	movwf	(??_returnHome+1)^0,c
  3873   001742  0E0F               	movlw	15
  3874   001744  6E42               	movwf	??_returnHome^0,c
  3875   001746  0EF1               	movlw	241
  3876   001748                     u5517:
  3877   001748  2EE8               	decfsz	wreg,f,c
  3878   00174A  D7FE               	bra	u5517
  3879   00174C  2E42               	decfsz	??_returnHome^0,f,c
  3880   00174E  D7FC               	bra	u5517
  3881   001750  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3882   001752  D7FA               	bra	u5517
  3883   001754  0000               	nop	
  3884   001756                     
  3885                           ;dc_motor.c: 209:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3886   001756  C032  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  3887   00175A  C033  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  3888   00175E  C034  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  3889   001762  C035  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  3890   001766  C03B  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  3891   00176A  C03E  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  3892   00176E  EC56  F022         	call	_fullSpeedAhead	;wreg free
  3893   001772                     
  3894                           ;dc_motor.c: 210:     resetTimer();
  3895   001772  EC76  F026         	call	_resetTimer	;wreg free
  3896   001776                     l5065:
  3897   001776  503A               	movf	returnHome@curMove^0,w,c
  3898   001778  0D02               	mullw	2
  3899   00177A  CFF3 F042          	movff	prodl,??_returnHome
  3900   00177E  CFF4 F043          	movff	prodh,??_returnHome+1
  3901   001782  5042               	movf	??_returnHome^0,w,c
  3902   001784  2438               	addwf	returnHome@straightTime^0,w,c
  3903   001786  6ED9               	movwf	fsr2l,c
  3904   001788  5043               	movf	(??_returnHome+1)^0,w,c
  3905   00178A  2039               	addwfc	(returnHome@straightTime+1)^0,w,c
  3906   00178C  6EDA               	movwf	fsr2h,c
  3907   00178E  CFDE F044          	movff	postinc2,??_returnHome+2
  3908   001792  CFDD F045          	movff	postdec2,??_returnHome+3
  3909   001796  0EAC               	movlw	172
  3910   001798  2444               	addwf	(??_returnHome+2)^0,w,c
  3911   00179A  6E46               	movwf	(??_returnHome+4)^0,c
  3912   00179C  0E0D               	movlw	13
  3913   00179E  2045               	addwfc	(??_returnHome+3)^0,w,c
  3914   0017A0  6E47               	movwf	(??_returnHome+5)^0,c
  3915   0017A2  ECA6  F025         	call	_get16bitTMR0val	;wreg free
  3916   0017A6  5046               	movf	(??_returnHome+4)^0,w,c
  3917   0017A8  5C10               	subwf	?_get16bitTMR0val^0,w,c
  3918   0017AA  5047               	movf	(??_returnHome+5)^0,w,c
  3919   0017AC  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  3920   0017AE  A0D8               	btfss	status,0,c
  3921   0017B0  EFDC  F00B         	goto	u4051
  3922   0017B4  EFDE  F00B         	goto	u4050
  3923   0017B8                     u4051:
  3924   0017B8  EFBB  F00B         	goto	l5065
  3925   0017BC                     u4050:
  3926   0017BC                     
  3927                           ;dc_motor.c: 212:     stop(mL, mR, straightRamp);
  3928   0017BC  C032  F023         	movff	returnHome@mL,stop@mL
  3929   0017C0  C033  F024         	movff	returnHome@mL+1,stop@mL+1
  3930   0017C4  C034  F025         	movff	returnHome@mR,stop@mR
  3931   0017C8  C035  F026         	movff	returnHome@mR+1,stop@mR+1
  3932   0017CC  C03E  F027         	movff	returnHome@straightRamp,stop@straightRamp
  3933   0017D0  ECD1  F021         	call	_stop	;wreg free
  3934   0017D4                     
  3935                           ;dc_motor.c: 214:     char i=curMove;
  3936   0017D4  C03A  F048         	movff	returnHome@curMove,returnHome@i
  3937                           
  3938                           ;dc_motor.c: 215:     while (i>0) {
  3939   0017D8  EFC2  F00E         	goto	l5161
  3940   0017DC                     l5071:
  3941                           
  3942                           ;dc_motor.c: 216:         i--;
  3943   0017DC  0648               	decf	returnHome@i^0,f,c
  3944   0017DE                     
  3945                           ;dc_motor.c: 219:         if (moveSequence[i] == 1) {
  3946   0017DE  5048               	movf	returnHome@i^0,w,c
  3947   0017E0  2436               	addwf	returnHome@moveSequence^0,w,c
  3948   0017E2  6ED9               	movwf	fsr2l,c
  3949   0017E4  0E00               	movlw	0
  3950   0017E6  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  3951   0017E8  6EDA               	movwf	fsr2h,c
  3952   0017EA  04DE               	decf	postinc2,w,c
  3953   0017EC  A4D8               	btfss	status,2,c
  3954   0017EE  EFFB  F00B         	goto	u4061
  3955   0017F2  EFFD  F00B         	goto	u4060
  3956   0017F6                     u4061:
  3957   0017F6  EF37  F00C         	goto	l5081
  3958   0017FA                     u4060:
  3959   0017FA                     
  3960                           ;dc_motor.c: 220:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3961   0017FA  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3962   0017FE  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3963   001802  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3964   001806  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3965   00180A  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3966   00180E  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3967   001812  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3968   001816  ECA8  F01F         	call	_turnLeft	;wreg free
  3969   00181A                     
  3970                           ;dc_motor.c: 221:             _delay((unsigned long)((50)*(64000000/4000.0)));
  3971   00181A  0E05               	movlw	5
  3972   00181C  6E43               	movwf	(??_returnHome+1)^0,c
  3973   00181E  0E0F               	movlw	15
  3974   001820  6E42               	movwf	??_returnHome^0,c
  3975   001822  0EF1               	movlw	241
  3976   001824                     u5527:
  3977   001824  2EE8               	decfsz	wreg,f,c
  3978   001826  D7FE               	bra	u5527
  3979   001828  2E42               	decfsz	??_returnHome^0,f,c
  3980   00182A  D7FC               	bra	u5527
  3981   00182C  2E43               	decfsz	(??_returnHome+1)^0,f,c
  3982   00182E  D7FA               	bra	u5527
  3983   001830  0000               	nop	
  3984   001832                     
  3985                           ;dc_motor.c: 222:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3986   001832  C032  F023         	movff	returnHome@mL,turnLeft@mL
  3987   001836  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  3988   00183A  C034  F025         	movff	returnHome@mR,turnLeft@mR
  3989   00183E  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  3990   001842  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  3991   001846  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  3992   00184A  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  3993   00184E  ECA8  F01F         	call	_turnLeft	;wreg free
  3994                           
  3995                           ;dc_motor.c: 223:             _delay((unsigned long)((50)*(64000000/4000.0)));
  3996   001852  0E05               	movlw	5
  3997   001854  6E43               	movwf	(??_returnHome+1)^0,c
  3998   001856  0E0F               	movlw	15
  3999   001858  6E42               	movwf	??_returnHome^0,c
  4000   00185A  0EF1               	movlw	241
  4001   00185C                     u5537:
  4002   00185C  2EE8               	decfsz	wreg,f,c
  4003   00185E  D7FE               	bra	u5537
  4004   001860  2E42               	decfsz	??_returnHome^0,f,c
  4005   001862  D7FC               	bra	u5537
  4006   001864  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4007   001866  D7FA               	bra	u5537
  4008   001868  0000               	nop	
  4009                           
  4010                           ;dc_motor.c: 224:         }
  4011   00186A  EF69  F00E         	goto	l571
  4012   00186E                     l5081:
  4013   00186E  5048               	movf	returnHome@i^0,w,c
  4014   001870  2436               	addwf	returnHome@moveSequence^0,w,c
  4015   001872  6ED9               	movwf	fsr2l,c
  4016   001874  0E00               	movlw	0
  4017   001876  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4018   001878  6EDA               	movwf	fsr2h,c
  4019   00187A  0E02               	movlw	2
  4020   00187C  18DE               	xorwf	postinc2,w,c
  4021   00187E  A4D8               	btfss	status,2,c
  4022   001880  EF44  F00C         	goto	u4071
  4023   001884  EF46  F00C         	goto	u4070
  4024   001888                     u4071:
  4025   001888  EF80  F00C         	goto	l5089
  4026   00188C                     u4070:
  4027   00188C                     
  4028                           ;dc_motor.c: 227:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4029   00188C  C032  F023         	movff	returnHome@mL,turnRight@mL
  4030   001890  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4031   001894  C034  F025         	movff	returnHome@mR,turnRight@mR
  4032   001898  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4033   00189C  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4034   0018A0  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4035   0018A4  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4036   0018A8  ECBB  F01E         	call	_turnRight	;wreg free
  4037   0018AC                     
  4038                           ;dc_motor.c: 228:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4039   0018AC  0E05               	movlw	5
  4040   0018AE  6E43               	movwf	(??_returnHome+1)^0,c
  4041   0018B0  0E0F               	movlw	15
  4042   0018B2  6E42               	movwf	??_returnHome^0,c
  4043   0018B4  0EF1               	movlw	241
  4044   0018B6                     u5547:
  4045   0018B6  2EE8               	decfsz	wreg,f,c
  4046   0018B8  D7FE               	bra	u5547
  4047   0018BA  2E42               	decfsz	??_returnHome^0,f,c
  4048   0018BC  D7FC               	bra	u5547
  4049   0018BE  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4050   0018C0  D7FA               	bra	u5547
  4051   0018C2  0000               	nop	
  4052   0018C4                     
  4053                           ;dc_motor.c: 229:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4054   0018C4  C032  F023         	movff	returnHome@mL,turnRight@mL
  4055   0018C8  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4056   0018CC  C034  F025         	movff	returnHome@mR,turnRight@mR
  4057   0018D0  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4058   0018D4  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4059   0018D8  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4060   0018DC  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4061   0018E0  ECBB  F01E         	call	_turnRight	;wreg free
  4062                           
  4063                           ;dc_motor.c: 230:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4064   0018E4  0E05               	movlw	5
  4065   0018E6  6E43               	movwf	(??_returnHome+1)^0,c
  4066   0018E8  0E0F               	movlw	15
  4067   0018EA  6E42               	movwf	??_returnHome^0,c
  4068   0018EC  0EF1               	movlw	241
  4069   0018EE                     u5557:
  4070   0018EE  2EE8               	decfsz	wreg,f,c
  4071   0018F0  D7FE               	bra	u5557
  4072   0018F2  2E42               	decfsz	??_returnHome^0,f,c
  4073   0018F4  D7FC               	bra	u5557
  4074   0018F6  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4075   0018F8  D7FA               	bra	u5557
  4076   0018FA  0000               	nop	
  4077                           
  4078                           ;dc_motor.c: 231:         }
  4079   0018FC  EF69  F00E         	goto	l571
  4080   001900                     l5089:
  4081   001900  5048               	movf	returnHome@i^0,w,c
  4082   001902  2436               	addwf	returnHome@moveSequence^0,w,c
  4083   001904  6ED9               	movwf	fsr2l,c
  4084   001906  0E00               	movlw	0
  4085   001908  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4086   00190A  6EDA               	movwf	fsr2h,c
  4087   00190C  0E03               	movlw	3
  4088   00190E  18DE               	xorwf	postinc2,w,c
  4089   001910  A4D8               	btfss	status,2,c
  4090   001912  EF8D  F00C         	goto	u4081
  4091   001916  EF8F  F00C         	goto	u4080
  4092   00191A                     u4081:
  4093   00191A  EF01  F00D         	goto	l5103
  4094   00191E                     u4080:
  4095   00191E                     
  4096                           ;dc_motor.c: 234:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4097   00191E  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4098   001922  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4099   001926  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4100   00192A  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4101   00192E  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4102   001932  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4103   001936  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4104   00193A  ECA8  F01F         	call	_turnLeft	;wreg free
  4105   00193E                     
  4106                           ;dc_motor.c: 235:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4107   00193E  0E05               	movlw	5
  4108   001940  6E43               	movwf	(??_returnHome+1)^0,c
  4109   001942  0E0F               	movlw	15
  4110   001944  6E42               	movwf	??_returnHome^0,c
  4111   001946  0EF1               	movlw	241
  4112   001948                     u5567:
  4113   001948  2EE8               	decfsz	wreg,f,c
  4114   00194A  D7FE               	bra	u5567
  4115   00194C  2E42               	decfsz	??_returnHome^0,f,c
  4116   00194E  D7FC               	bra	u5567
  4117   001950  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4118   001952  D7FA               	bra	u5567
  4119   001954  0000               	nop	
  4120   001956                     
  4121                           ;dc_motor.c: 236:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4122   001956  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4123   00195A  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4124   00195E  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4125   001962  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4126   001966  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4127   00196A  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4128   00196E  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4129   001972  ECA8  F01F         	call	_turnLeft	;wreg free
  4130                           
  4131                           ;dc_motor.c: 237:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4132   001976  0E05               	movlw	5
  4133   001978  6E43               	movwf	(??_returnHome+1)^0,c
  4134   00197A  0E0F               	movlw	15
  4135   00197C  6E42               	movwf	??_returnHome^0,c
  4136   00197E  0EF1               	movlw	241
  4137   001980                     u5577:
  4138   001980  2EE8               	decfsz	wreg,f,c
  4139   001982  D7FE               	bra	u5577
  4140   001984  2E42               	decfsz	??_returnHome^0,f,c
  4141   001986  D7FC               	bra	u5577
  4142   001988  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4143   00198A  D7FA               	bra	u5577
  4144   00198C  0000               	nop	
  4145   00198E                     
  4146                           ;dc_motor.c: 238:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4147   00198E  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4148   001992  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4149   001996  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4150   00199A  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4151   00199E  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4152   0019A2  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4153   0019A6  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4154   0019AA  ECA8  F01F         	call	_turnLeft	;wreg free
  4155   0019AE                     
  4156                           ;dc_motor.c: 239:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4157   0019AE  0E05               	movlw	5
  4158   0019B0  6E43               	movwf	(??_returnHome+1)^0,c
  4159   0019B2  0E0F               	movlw	15
  4160   0019B4  6E42               	movwf	??_returnHome^0,c
  4161   0019B6  0EF1               	movlw	241
  4162   0019B8                     u5587:
  4163   0019B8  2EE8               	decfsz	wreg,f,c
  4164   0019BA  D7FE               	bra	u5587
  4165   0019BC  2E42               	decfsz	??_returnHome^0,f,c
  4166   0019BE  D7FC               	bra	u5587
  4167   0019C0  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4168   0019C2  D7FA               	bra	u5587
  4169   0019C4  0000               	nop	
  4170                           
  4171                           ;dc_motor.c: 240:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4172   0019C6  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4173   0019CA  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4174   0019CE  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4175   0019D2  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4176   0019D6  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4177   0019DA  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4178   0019DE  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4179   0019E2  ECA8  F01F         	call	_turnLeft	;wreg free
  4180   0019E6                     l5101:
  4181                           
  4182                           ;dc_motor.c: 241:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4183   0019E6  0E05               	movlw	5
  4184   0019E8  6E43               	movwf	(??_returnHome+1)^0,c
  4185   0019EA  0E0F               	movlw	15
  4186   0019EC  6E42               	movwf	??_returnHome^0,c
  4187   0019EE  0EF1               	movlw	241
  4188   0019F0                     u5597:
  4189   0019F0  2EE8               	decfsz	wreg,f,c
  4190   0019F2  D7FE               	bra	u5597
  4191   0019F4  2E42               	decfsz	??_returnHome^0,f,c
  4192   0019F6  D7FC               	bra	u5597
  4193   0019F8  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4194   0019FA  D7FA               	bra	u5597
  4195   0019FC  0000               	nop	
  4196                           
  4197                           ;dc_motor.c: 242:         }
  4198   0019FE  EF69  F00E         	goto	l571
  4199   001A02                     l5103:
  4200   001A02  5048               	movf	returnHome@i^0,w,c
  4201   001A04  2436               	addwf	returnHome@moveSequence^0,w,c
  4202   001A06  6ED9               	movwf	fsr2l,c
  4203   001A08  0E00               	movlw	0
  4204   001A0A  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4205   001A0C  6EDA               	movwf	fsr2h,c
  4206   001A0E  0E04               	movlw	4
  4207   001A10  18DE               	xorwf	postinc2,w,c
  4208   001A12  A4D8               	btfss	status,2,c
  4209   001A14  EF0E  F00D         	goto	u4091
  4210   001A18  EF10  F00D         	goto	u4090
  4211   001A1C                     u4091:
  4212   001A1C  EF5C  F00D         	goto	l5115
  4213   001A20                     u4090:
  4214   001A20                     
  4215                           ;dc_motor.c: 245:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4216   001A20  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4217   001A24  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4218   001A28  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4219   001A2C  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4220   001A30  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4221   001A34  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4222   001A38  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4223   001A3C  ECA8  F01F         	call	_turnLeft	;wreg free
  4224   001A40                     
  4225                           ;dc_motor.c: 246:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4226   001A40  0E05               	movlw	5
  4227   001A42  6E43               	movwf	(??_returnHome+1)^0,c
  4228   001A44  0E0F               	movlw	15
  4229   001A46  6E42               	movwf	??_returnHome^0,c
  4230   001A48  0EF1               	movlw	241
  4231   001A4A                     u5607:
  4232   001A4A  2EE8               	decfsz	wreg,f,c
  4233   001A4C  D7FE               	bra	u5607
  4234   001A4E  2E42               	decfsz	??_returnHome^0,f,c
  4235   001A50  D7FC               	bra	u5607
  4236   001A52  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4237   001A54  D7FA               	bra	u5607
  4238   001A56  0000               	nop	
  4239   001A58                     
  4240                           ;dc_motor.c: 247:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4241   001A58  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4242   001A5C  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4243   001A60  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4244   001A64  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4245   001A68  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4246   001A6C  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4247   001A70  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4248   001A74  ECA8  F01F         	call	_turnLeft	;wreg free
  4249                           
  4250                           ;dc_motor.c: 248:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4251   001A78  0E05               	movlw	5
  4252   001A7A  6E43               	movwf	(??_returnHome+1)^0,c
  4253   001A7C  0E0F               	movlw	15
  4254   001A7E  6E42               	movwf	??_returnHome^0,c
  4255   001A80  0EF1               	movlw	241
  4256   001A82                     u5617:
  4257   001A82  2EE8               	decfsz	wreg,f,c
  4258   001A84  D7FE               	bra	u5617
  4259   001A86  2E42               	decfsz	??_returnHome^0,f,c
  4260   001A88  D7FC               	bra	u5617
  4261   001A8A  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4262   001A8C  D7FA               	bra	u5617
  4263   001A8E  0000               	nop	
  4264   001A90                     
  4265                           ;dc_motor.c: 249:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  4266   001A90  C032  F023         	movff	returnHome@mL,reverseOneSquare@mL
  4267   001A94  C033  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  4268   001A98  C034  F025         	movff	returnHome@mR,reverseOneSquare@mR
  4269   001A9C  C035  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  4270   001AA0  C03B  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  4271   001AA4  C03C  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  4272   001AA8  C03D  F029         	movff	returnHome@reverseDuration+1,reverseOneSquare@reverseDuration+1
  4273   001AAC  C03E  F02A         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  4274   001AB0  ECCC  F01D         	call	_reverseOneSquare	;wreg free
  4275   001AB4  EFF3  F00C         	goto	l5101
  4276   001AB8                     l5115:
  4277   001AB8  5048               	movf	returnHome@i^0,w,c
  4278   001ABA  2436               	addwf	returnHome@moveSequence^0,w,c
  4279   001ABC  6ED9               	movwf	fsr2l,c
  4280   001ABE  0E00               	movlw	0
  4281   001AC0  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4282   001AC2  6EDA               	movwf	fsr2h,c
  4283   001AC4  0E05               	movlw	5
  4284   001AC6  18DE               	xorwf	postinc2,w,c
  4285   001AC8  A4D8               	btfss	status,2,c
  4286   001ACA  EF69  F00D         	goto	u4101
  4287   001ACE  EF6B  F00D         	goto	u4100
  4288   001AD2                     u4101:
  4289   001AD2  EFB7  F00D         	goto	l5127
  4290   001AD6                     u4100:
  4291   001AD6                     
  4292                           ;dc_motor.c: 254:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4293   001AD6  C032  F023         	movff	returnHome@mL,turnRight@mL
  4294   001ADA  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4295   001ADE  C034  F025         	movff	returnHome@mR,turnRight@mR
  4296   001AE2  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4297   001AE6  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4298   001AEA  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4299   001AEE  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4300   001AF2  ECBB  F01E         	call	_turnRight	;wreg free
  4301   001AF6                     
  4302                           ;dc_motor.c: 255:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4303   001AF6  0E05               	movlw	5
  4304   001AF8  6E43               	movwf	(??_returnHome+1)^0,c
  4305   001AFA  0E0F               	movlw	15
  4306   001AFC  6E42               	movwf	??_returnHome^0,c
  4307   001AFE  0EF1               	movlw	241
  4308   001B00                     u5627:
  4309   001B00  2EE8               	decfsz	wreg,f,c
  4310   001B02  D7FE               	bra	u5627
  4311   001B04  2E42               	decfsz	??_returnHome^0,f,c
  4312   001B06  D7FC               	bra	u5627
  4313   001B08  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4314   001B0A  D7FA               	bra	u5627
  4315   001B0C  0000               	nop	
  4316   001B0E                     
  4317                           ;dc_motor.c: 256:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4318   001B0E  C032  F023         	movff	returnHome@mL,turnRight@mL
  4319   001B12  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4320   001B16  C034  F025         	movff	returnHome@mR,turnRight@mR
  4321   001B1A  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4322   001B1E  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4323   001B22  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4324   001B26  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4325   001B2A  ECBB  F01E         	call	_turnRight	;wreg free
  4326                           
  4327                           ;dc_motor.c: 257:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4328   001B2E  0E05               	movlw	5
  4329   001B30  6E43               	movwf	(??_returnHome+1)^0,c
  4330   001B32  0E0F               	movlw	15
  4331   001B34  6E42               	movwf	??_returnHome^0,c
  4332   001B36  0EF1               	movlw	241
  4333   001B38                     u5637:
  4334   001B38  2EE8               	decfsz	wreg,f,c
  4335   001B3A  D7FE               	bra	u5637
  4336   001B3C  2E42               	decfsz	??_returnHome^0,f,c
  4337   001B3E  D7FC               	bra	u5637
  4338   001B40  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4339   001B42  D7FA               	bra	u5637
  4340   001B44  0000               	nop	
  4341   001B46                     
  4342                           ;dc_motor.c: 258:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  4343   001B46  C032  F023         	movff	returnHome@mL,reverseOneSquare@mL
  4344   001B4A  C033  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  4345   001B4E  C034  F025         	movff	returnHome@mR,reverseOneSquare@mR
  4346   001B52  C035  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  4347   001B56  C03B  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  4348   001B5A  C03C  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  4349   001B5E  C03D  F029         	movff	returnHome@reverseDuration+1,reverseOneSquare@reverseDuration+1
  4350   001B62  C03E  F02A         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  4351   001B66  ECCC  F01D         	call	_reverseOneSquare	;wreg free
  4352   001B6A  EFF3  F00C         	goto	l5101
  4353   001B6E                     l5127:
  4354   001B6E  5048               	movf	returnHome@i^0,w,c
  4355   001B70  2436               	addwf	returnHome@moveSequence^0,w,c
  4356   001B72  6ED9               	movwf	fsr2l,c
  4357   001B74  0E00               	movlw	0
  4358   001B76  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4359   001B78  6EDA               	movwf	fsr2h,c
  4360   001B7A  0E06               	movlw	6
  4361   001B7C  18DE               	xorwf	postinc2,w,c
  4362   001B7E  A4D8               	btfss	status,2,c
  4363   001B80  EFC4  F00D         	goto	u4111
  4364   001B84  EFC6  F00D         	goto	u4110
  4365   001B88                     u4111:
  4366   001B88  EF10  F00E         	goto	l5139
  4367   001B8C                     u4110:
  4368   001B8C                     
  4369                           ;dc_motor.c: 263:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4370   001B8C  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4371   001B90  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4372   001B94  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4373   001B98  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4374   001B9C  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4375   001BA0  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4376   001BA4  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4377   001BA8  ECA8  F01F         	call	_turnLeft	;wreg free
  4378   001BAC                     
  4379                           ;dc_motor.c: 264:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4380   001BAC  0E05               	movlw	5
  4381   001BAE  6E43               	movwf	(??_returnHome+1)^0,c
  4382   001BB0  0E0F               	movlw	15
  4383   001BB2  6E42               	movwf	??_returnHome^0,c
  4384   001BB4  0EF1               	movlw	241
  4385   001BB6                     u5647:
  4386   001BB6  2EE8               	decfsz	wreg,f,c
  4387   001BB8  D7FE               	bra	u5647
  4388   001BBA  2E42               	decfsz	??_returnHome^0,f,c
  4389   001BBC  D7FC               	bra	u5647
  4390   001BBE  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4391   001BC0  D7FA               	bra	u5647
  4392   001BC2  0000               	nop	
  4393   001BC4                     
  4394                           ;dc_motor.c: 265:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4395   001BC4  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4396   001BC8  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4397   001BCC  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4398   001BD0  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4399   001BD4  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4400   001BD8  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4401   001BDC  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4402   001BE0  ECA8  F01F         	call	_turnLeft	;wreg free
  4403                           
  4404                           ;dc_motor.c: 266:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4405   001BE4  0E05               	movlw	5
  4406   001BE6  6E43               	movwf	(??_returnHome+1)^0,c
  4407   001BE8  0E0F               	movlw	15
  4408   001BEA  6E42               	movwf	??_returnHome^0,c
  4409   001BEC  0EF1               	movlw	241
  4410   001BEE                     u5657:
  4411   001BEE  2EE8               	decfsz	wreg,f,c
  4412   001BF0  D7FE               	bra	u5657
  4413   001BF2  2E42               	decfsz	??_returnHome^0,f,c
  4414   001BF4  D7FC               	bra	u5657
  4415   001BF6  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4416   001BF8  D7FA               	bra	u5657
  4417   001BFA  0000               	nop	
  4418   001BFC                     
  4419                           ;dc_motor.c: 267:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4420   001BFC  C032  F023         	movff	returnHome@mL,turnLeft@mL
  4421   001C00  C033  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4422   001C04  C034  F025         	movff	returnHome@mR,turnLeft@mR
  4423   001C08  C035  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4424   001C0C  C03F  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4425   001C10  C040  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4426   001C14  C041  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4427   001C18  ECA8  F01F         	call	_turnLeft	;wreg free
  4428   001C1C  EFF3  F00C         	goto	l5101
  4429   001C20                     l5139:
  4430   001C20  5048               	movf	returnHome@i^0,w,c
  4431   001C22  2436               	addwf	returnHome@moveSequence^0,w,c
  4432   001C24  6ED9               	movwf	fsr2l,c
  4433   001C26  0E00               	movlw	0
  4434   001C28  2037               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4435   001C2A  6EDA               	movwf	fsr2h,c
  4436   001C2C  0E07               	movlw	7
  4437   001C2E  18DE               	xorwf	postinc2,w,c
  4438   001C30  A4D8               	btfss	status,2,c
  4439   001C32  EF1D  F00E         	goto	u4121
  4440   001C36  EF1F  F00E         	goto	u4120
  4441   001C3A                     u4121:
  4442   001C3A  EF69  F00E         	goto	l577
  4443   001C3E                     u4120:
  4444   001C3E                     
  4445                           ;dc_motor.c: 272:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4446   001C3E  C032  F023         	movff	returnHome@mL,turnRight@mL
  4447   001C42  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4448   001C46  C034  F025         	movff	returnHome@mR,turnRight@mR
  4449   001C4A  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4450   001C4E  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4451   001C52  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4452   001C56  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4453   001C5A  ECBB  F01E         	call	_turnRight	;wreg free
  4454   001C5E                     
  4455                           ;dc_motor.c: 273:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4456   001C5E  0E05               	movlw	5
  4457   001C60  6E43               	movwf	(??_returnHome+1)^0,c
  4458   001C62  0E0F               	movlw	15
  4459   001C64  6E42               	movwf	??_returnHome^0,c
  4460   001C66  0EF1               	movlw	241
  4461   001C68                     u5667:
  4462   001C68  2EE8               	decfsz	wreg,f,c
  4463   001C6A  D7FE               	bra	u5667
  4464   001C6C  2E42               	decfsz	??_returnHome^0,f,c
  4465   001C6E  D7FC               	bra	u5667
  4466   001C70  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4467   001C72  D7FA               	bra	u5667
  4468   001C74  0000               	nop	
  4469   001C76                     
  4470                           ;dc_motor.c: 274:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4471   001C76  C032  F023         	movff	returnHome@mL,turnRight@mL
  4472   001C7A  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4473   001C7E  C034  F025         	movff	returnHome@mR,turnRight@mR
  4474   001C82  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4475   001C86  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4476   001C8A  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4477   001C8E  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4478   001C92  ECBB  F01E         	call	_turnRight	;wreg free
  4479                           
  4480                           ;dc_motor.c: 275:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4481   001C96  0E05               	movlw	5
  4482   001C98  6E43               	movwf	(??_returnHome+1)^0,c
  4483   001C9A  0E0F               	movlw	15
  4484   001C9C  6E42               	movwf	??_returnHome^0,c
  4485   001C9E  0EF1               	movlw	241
  4486   001CA0                     u5677:
  4487   001CA0  2EE8               	decfsz	wreg,f,c
  4488   001CA2  D7FE               	bra	u5677
  4489   001CA4  2E42               	decfsz	??_returnHome^0,f,c
  4490   001CA6  D7FC               	bra	u5677
  4491   001CA8  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4492   001CAA  D7FA               	bra	u5677
  4493   001CAC  0000               	nop	
  4494   001CAE                     
  4495                           ;dc_motor.c: 276:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4496   001CAE  C032  F023         	movff	returnHome@mL,turnRight@mL
  4497   001CB2  C033  F024         	movff	returnHome@mL+1,turnRight@mL+1
  4498   001CB6  C034  F025         	movff	returnHome@mR,turnRight@mR
  4499   001CBA  C035  F026         	movff	returnHome@mR+1,turnRight@mR+1
  4500   001CBE  C03F  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  4501   001CC2  C040  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  4502   001CC6  C041  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  4503   001CCA  ECBB  F01E         	call	_turnRight	;wreg free
  4504   001CCE  EFF3  F00C         	goto	l5101
  4505   001CD2                     l577:
  4506   001CD2                     l571:
  4507                           
  4508                           ;dc_motor.c: 280:         reverseWallAdjust(mL, mR, straightSpeed, straightRamp);
  4509   001CD2  C032  F023         	movff	returnHome@mL,reverseWallAdjust@mL
  4510   001CD6  C033  F024         	movff	returnHome@mL+1,reverseWallAdjust@mL+1
  4511   001CDA  C034  F025         	movff	returnHome@mR,reverseWallAdjust@mR
  4512   001CDE  C035  F026         	movff	returnHome@mR+1,reverseWallAdjust@mR+1
  4513   001CE2  C03B  F027         	movff	returnHome@straightSpeed,reverseWallAdjust@straightSpeed
  4514   001CE6  C03E  F028         	movff	returnHome@straightRamp,reverseWallAdjust@straightRamp
  4515   001CEA  ECE3  F01A         	call	_reverseWallAdjust	;wreg free
  4516   001CEE                     
  4517                           ;dc_motor.c: 281:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4518   001CEE  0E05               	movlw	5
  4519   001CF0  6E43               	movwf	(??_returnHome+1)^0,c
  4520   001CF2  0E0F               	movlw	15
  4521   001CF4  6E42               	movwf	??_returnHome^0,c
  4522   001CF6  0EF1               	movlw	241
  4523   001CF8                     u5687:
  4524   001CF8  2EE8               	decfsz	wreg,f,c
  4525   001CFA  D7FE               	bra	u5687
  4526   001CFC  2E42               	decfsz	??_returnHome^0,f,c
  4527   001CFE  D7FC               	bra	u5687
  4528   001D00  2E43               	decfsz	(??_returnHome+1)^0,f,c
  4529   001D02  D7FA               	bra	u5687
  4530   001D04  0000               	nop	
  4531   001D06                     
  4532                           ;dc_motor.c: 282:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4533   001D06  C032  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  4534   001D0A  C033  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  4535   001D0E  C034  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  4536   001D12  C035  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  4537   001D16  C03B  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  4538   001D1A  C03E  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  4539   001D1E  EC56  F022         	call	_fullSpeedAhead	;wreg free
  4540   001D22                     
  4541                           ;dc_motor.c: 283:         resetTimer();
  4542   001D22  EC76  F026         	call	_resetTimer	;wreg free
  4543   001D26                     l5157:
  4544   001D26  5048               	movf	returnHome@i^0,w,c
  4545   001D28  0D02               	mullw	2
  4546   001D2A  CFF3 F042          	movff	prodl,??_returnHome
  4547   001D2E  CFF4 F043          	movff	prodh,??_returnHome+1
  4548   001D32  5042               	movf	??_returnHome^0,w,c
  4549   001D34  2438               	addwf	returnHome@straightTime^0,w,c
  4550   001D36  6ED9               	movwf	fsr2l,c
  4551   001D38  5043               	movf	(??_returnHome+1)^0,w,c
  4552   001D3A  2039               	addwfc	(returnHome@straightTime+1)^0,w,c
  4553   001D3C  6EDA               	movwf	fsr2h,c
  4554   001D3E  CFDE F044          	movff	postinc2,??_returnHome+2
  4555   001D42  CFDD F045          	movff	postdec2,??_returnHome+3
  4556   001D46  0ED6               	movlw	214
  4557   001D48  2444               	addwf	(??_returnHome+2)^0,w,c
  4558   001D4A  6E46               	movwf	(??_returnHome+4)^0,c
  4559   001D4C  0E06               	movlw	6
  4560   001D4E  2045               	addwfc	(??_returnHome+3)^0,w,c
  4561   001D50  6E47               	movwf	(??_returnHome+5)^0,c
  4562   001D52  ECA6  F025         	call	_get16bitTMR0val	;wreg free
  4563   001D56  5046               	movf	(??_returnHome+4)^0,w,c
  4564   001D58  5C10               	subwf	?_get16bitTMR0val^0,w,c
  4565   001D5A  5047               	movf	(??_returnHome+5)^0,w,c
  4566   001D5C  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  4567   001D5E  A0D8               	btfss	status,0,c
  4568   001D60  EFB4  F00E         	goto	u4131
  4569   001D64  EFB6  F00E         	goto	u4130
  4570   001D68                     u4131:
  4571   001D68  EF93  F00E         	goto	l5157
  4572   001D6C                     u4130:
  4573   001D6C                     
  4574                           ;dc_motor.c: 285:         stop(mL, mR, straightRamp);
  4575   001D6C  C032  F023         	movff	returnHome@mL,stop@mL
  4576   001D70  C033  F024         	movff	returnHome@mL+1,stop@mL+1
  4577   001D74  C034  F025         	movff	returnHome@mR,stop@mR
  4578   001D78  C035  F026         	movff	returnHome@mR+1,stop@mR+1
  4579   001D7C  C03E  F027         	movff	returnHome@straightRamp,stop@straightRamp
  4580   001D80  ECD1  F021         	call	_stop	;wreg free
  4581   001D84                     l5161:
  4582                           
  4583                           ;dc_motor.c: 215:     while (i>0) {
  4584   001D84  5048               	movf	returnHome@i^0,w,c
  4585   001D86  A4D8               	btfss	status,2,c
  4586   001D88  EFC8  F00E         	goto	u4141
  4587   001D8C  EFCA  F00E         	goto	u4140
  4588   001D90                     u4141:
  4589   001D90  EFEE  F00B         	goto	l5071
  4590   001D94                     u4140:
  4591   001D94  0012               	return		;funcret
  4592   001D96                     __end_of_returnHome:
  4593                           	callstack 0
  4594                           
  4595 ;; *************** function _stop *****************
  4596 ;; Defined at:
  4597 ;;		line 389 in file "dc_motor.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  4600 ;;		 -> main@motorL(10), 
  4601 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  4602 ;;		 -> main@motorR(10), 
  4603 ;;  straightRamp    1   38[COMRAM] unsigned char 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  cur_power       2   44[COMRAM] int 
  4606 ;;  i               2   42[COMRAM] int 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4616 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;Total ram usage:       12 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; Hardware stack levels required when called: 8
  4623 ;; This function calls:
  4624 ;;		_setMotorPWM
  4625 ;; This function is called by:
  4626 ;;		_main
  4627 ;;		_returnHome
  4628 ;;		_lostReturnHome
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text5
  4633   0043A2                     __ptext5:
  4634                           	callstack 0
  4635   0043A2                     _stop:
  4636                           	callstack 22
  4637   0043A2                     
  4638                           ;dc_motor.c: 389: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 390: {;dc_motor.c: 391:     mL->direction = 1;
  4639   0043A2  EE20 F001          	lfsr	2,1
  4640   0043A6  5023               	movf	stop@mL^0,w,c
  4641   0043A8  26D9               	addwf	fsr2l,f,c
  4642   0043AA  5024               	movf	(stop@mL+1)^0,w,c
  4643   0043AC  22DA               	addwfc	fsr2h,f,c
  4644   0043AE  0E01               	movlw	1
  4645   0043B0  6EDF               	movwf	indf2,c
  4646                           
  4647                           ;dc_motor.c: 392:     mR->direction = 1;
  4648   0043B2  EE20 F001          	lfsr	2,1
  4649   0043B6  5025               	movf	stop@mR^0,w,c
  4650   0043B8  26D9               	addwf	fsr2l,f,c
  4651   0043BA  5026               	movf	(stop@mR+1)^0,w,c
  4652   0043BC  22DA               	addwfc	fsr2h,f,c
  4653   0043BE  0E01               	movlw	1
  4654   0043C0  6EDF               	movwf	indf2,c
  4655                           
  4656                           ;dc_motor.c: 393:     int i;;dc_motor.c: 394:     int cur_power;;dc_motor.c: 395:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  4657   0043C2  C023  FFD9         	movff	stop@mL,fsr2l
  4658   0043C6  C024  FFDA         	movff	stop@mL+1,fsr2h
  4659   0043CA  50DF               	movf	indf2,w,c
  4660   0043CC  6E28               	movwf	??_stop^0,c
  4661   0043CE  EE20 F009          	lfsr	2,9
  4662   0043D2  5023               	movf	stop@mL^0,w,c
  4663   0043D4  26D9               	addwf	fsr2l,f,c
  4664   0043D6  5024               	movf	(stop@mL+1)^0,w,c
  4665   0043D8  22DA               	addwfc	fsr2h,f,c
  4666   0043DA  50DF               	movf	indf2,w,c
  4667   0043DC  6E29               	movwf	(??_stop+1)^0,c
  4668   0043DE  5029               	movf	(??_stop+1)^0,w,c
  4669   0043E0  5C28               	subwf	??_stop^0,w,c
  4670   0043E2  6E2D               	movwf	stop@cur_power^0,c
  4671   0043E4  6A2E               	clrf	(stop@cur_power+1)^0,c
  4672   0043E6  A0D8               	btfss	status,0,c
  4673   0043E8  062E               	decf	(stop@cur_power+1)^0,f,c
  4674   0043EA                     l4667:
  4675   0043EA  BE2E               	btfsc	(stop@cur_power+1)^0,7,c
  4676   0043EC  EFFC  F021         	goto	u3620
  4677   0043F0  EFFA  F021         	goto	u3621
  4678   0043F4                     u3621:
  4679   0043F4  EFFE  F021         	goto	l4671
  4680   0043F8                     u3620:
  4681   0043F8  EF4B  F022         	goto	l4687
  4682   0043FC                     l4671:
  4683                           
  4684                           ;dc_motor.c: 396:         mL->power = cur_power+mL->compensation;
  4685   0043FC  EE20 F009          	lfsr	2,9
  4686   004400  5023               	movf	stop@mL^0,w,c
  4687   004402  26D9               	addwf	fsr2l,f,c
  4688   004404  5024               	movf	(stop@mL+1)^0,w,c
  4689   004406  22DA               	addwfc	fsr2h,f,c
  4690   004408  50DF               	movf	indf2,w,c
  4691   00440A  242D               	addwf	stop@cur_power^0,w,c
  4692   00440C  C023  FFD9         	movff	stop@mL,fsr2l
  4693   004410  C024  FFDA         	movff	stop@mL+1,fsr2h
  4694   004414  6EDF               	movwf	indf2,c
  4695                           
  4696                           ;dc_motor.c: 397:         mR->power = cur_power+mR->compensation;
  4697   004416  EE20 F009          	lfsr	2,9
  4698   00441A  5025               	movf	stop@mR^0,w,c
  4699   00441C  26D9               	addwf	fsr2l,f,c
  4700   00441E  5026               	movf	(stop@mR+1)^0,w,c
  4701   004420  22DA               	addwfc	fsr2h,f,c
  4702   004422  50DF               	movf	indf2,w,c
  4703   004424  242D               	addwf	stop@cur_power^0,w,c
  4704   004426  C025  FFD9         	movff	stop@mR,fsr2l
  4705   00442A  C026  FFDA         	movff	stop@mR+1,fsr2h
  4706   00442E  6EDF               	movwf	indf2,c
  4707   004430                     
  4708                           ;dc_motor.c: 398:         setMotorPWM(mL);
  4709   004430  C023  F01D         	movff	stop@mL,setMotorPWM@m
  4710   004434  C024  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  4711   004438  EC95  F020         	call	_setMotorPWM	;wreg free
  4712   00443C                     
  4713                           ;dc_motor.c: 399:         setMotorPWM(mR);
  4714   00443C  C025  F01D         	movff	stop@mR,setMotorPWM@m
  4715   004440  C026  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  4716   004444  EC95  F020         	call	_setMotorPWM	;wreg free
  4717   004448                     
  4718                           ;dc_motor.c: 400:         for (i=0;i<straightRamp;i++) {
  4719   004448  0E00               	movlw	0
  4720   00444A  6E2C               	movwf	(stop@i+1)^0,c
  4721   00444C  0E00               	movlw	0
  4722   00444E  6E2B               	movwf	stop@i^0,c
  4723   004450  EF34  F022         	goto	l617
  4724   004454                     l4679:
  4725                           
  4726                           ;dc_motor.c: 401:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4727   004454  0E68               	movlw	104
  4728   004456  6E28               	movwf	??_stop^0,c
  4729   004458  0EE4               	movlw	228
  4730   00445A                     u5697:
  4731   00445A  2EE8               	decfsz	wreg,f,c
  4732   00445C  D7FE               	bra	u5697
  4733   00445E  2E28               	decfsz	??_stop^0,f,c
  4734   004460  D7FC               	bra	u5697
  4735   004462  D000               	nop2	
  4736   004464                     
  4737                           ;dc_motor.c: 402:         }
  4738   004464  4A2B               	infsnz	stop@i^0,f,c
  4739   004466  2A2C               	incf	(stop@i+1)^0,f,c
  4740   004468                     l617:
  4741   004468  5027               	movf	stop@straightRamp^0,w,c
  4742   00446A  6E28               	movwf	??_stop^0,c
  4743   00446C  6A29               	clrf	(??_stop+1)^0,c
  4744   00446E  5028               	movf	??_stop^0,w,c
  4745   004470  5C2B               	subwf	stop@i^0,w,c
  4746   004472  502C               	movf	(stop@i+1)^0,w,c
  4747   004474  0A80               	xorlw	128
  4748   004476  6E2A               	movwf	(??_stop+2)^0,c
  4749   004478  5029               	movf	(??_stop+1)^0,w,c
  4750   00447A  0A80               	xorlw	128
  4751   00447C  582A               	subwfb	(??_stop+2)^0,w,c
  4752   00447E  A0D8               	btfss	status,0,c
  4753   004480  EF44  F022         	goto	u3631
  4754   004484  EF46  F022         	goto	u3630
  4755   004488                     u3631:
  4756   004488  EF2A  F022         	goto	l4679
  4757   00448C                     u3630:
  4758   00448C                     
  4759                           ;dc_motor.c: 403:     }
  4760   00448C  062D               	decf	stop@cur_power^0,f,c
  4761   00448E  A0D8               	btfss	status,0,c
  4762   004490  062E               	decf	(stop@cur_power+1)^0,f,c
  4763   004492  EFF5  F021         	goto	l4667
  4764   004496                     l4687:
  4765                           
  4766                           ;dc_motor.c: 404:     mL->power = 0;
  4767   004496  C023  FFD9         	movff	stop@mL,fsr2l
  4768   00449A  C024  FFDA         	movff	stop@mL+1,fsr2h
  4769   00449E  6ADF               	clrf	indf2,c
  4770                           
  4771                           ;dc_motor.c: 405:     mR->power = 0;
  4772   0044A0  C025  FFD9         	movff	stop@mR,fsr2l
  4773   0044A4  C026  FFDA         	movff	stop@mR+1,fsr2h
  4774   0044A8  6ADF               	clrf	indf2,c
  4775   0044AA  0012               	return		;funcret
  4776   0044AC                     __end_of_stop:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _reverseWallAdjust *****************
  4780 ;; Defined at:
  4781 ;;		line 600 in file "dc_motor.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  4784 ;;		 -> main@motorL(10), 
  4785 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  4786 ;;		 -> main@motorR(10), 
  4787 ;;  straightSpee    1   38[COMRAM] unsigned char 
  4788 ;;  straightRamp    1   39[COMRAM] unsigned char 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  cur_power       2   47[COMRAM] int 
  4791 ;;  i               2   45[COMRAM] int 
  4792 ;;  reverseWallS    1   44[COMRAM] unsigned char 
  4793 ;;  reverseAdjus    1   43[COMRAM] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      void 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4803 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4804 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;Total ram usage:       15 bytes
  4808 ;; Hardware stack levels used: 1
  4809 ;; Hardware stack levels required when called: 8
  4810 ;; This function calls:
  4811 ;;		_setMotorPWM
  4812 ;; This function is called by:
  4813 ;;		_returnHome
  4814 ;;		_lostReturnHome
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text6
  4819   0035C6                     __ptext6:
  4820                           	callstack 0
  4821   0035C6                     _reverseWallAdjust:
  4822                           	callstack 20
  4823   0035C6                     
  4824                           ;dc_motor.c: 600: void reverseWallAdjust(DC_motor *mL, DC_motor *mR, char straightSpeed,
      +                           unsigned char straightRamp);dc_motor.c: 601: {;dc_motor.c: 602:     unsigned char rever
      +                          seAdjustDuration = 60;
  4825   0035C6  0E3C               	movlw	60
  4826   0035C8  6E2C               	movwf	reverseWallAdjust@reverseAdjustDuration^0,c
  4827                           
  4828                           ;dc_motor.c: 603:     unsigned char reverseWallSpeed = 40;
  4829   0035CA  0E28               	movlw	40
  4830   0035CC  6E2D               	movwf	reverseWallAdjust@reverseWallSpeed^0,c
  4831   0035CE                     
  4832                           ;dc_motor.c: 605:     mL->direction = 0;
  4833   0035CE  EE20 F001          	lfsr	2,1
  4834   0035D2  5023               	movf	reverseWallAdjust@mL^0,w,c
  4835   0035D4  26D9               	addwf	fsr2l,f,c
  4836   0035D6  5024               	movf	(reverseWallAdjust@mL+1)^0,w,c
  4837   0035D8  22DA               	addwfc	fsr2h,f,c
  4838   0035DA  6ADF               	clrf	indf2,c
  4839   0035DC                     
  4840                           ;dc_motor.c: 606:     mR->direction = 0;
  4841   0035DC  EE20 F001          	lfsr	2,1
  4842   0035E0  5025               	movf	reverseWallAdjust@mR^0,w,c
  4843   0035E2  26D9               	addwf	fsr2l,f,c
  4844   0035E4  5026               	movf	(reverseWallAdjust@mR+1)^0,w,c
  4845   0035E6  22DA               	addwfc	fsr2h,f,c
  4846   0035E8  6ADF               	clrf	indf2,c
  4847                           
  4848                           ;dc_motor.c: 607:     int i;;dc_motor.c: 608:     int cur_power;;dc_motor.c: 609:     fo
      +                          r (cur_power=1;cur_power<=reverseWallSpeed;cur_power++) {
  4849   0035EA  0E00               	movlw	0
  4850   0035EC  6E31               	movwf	(reverseWallAdjust@cur_power+1)^0,c
  4851   0035EE  0E01               	movlw	1
  4852   0035F0  6E30               	movwf	reverseWallAdjust@cur_power^0,c
  4853   0035F2  EF45  F01B         	goto	l4861
  4854   0035F6                     l4847:
  4855                           
  4856                           ;dc_motor.c: 610:         mL->power = cur_power+mL->compensation;
  4857   0035F6  EE20 F009          	lfsr	2,9
  4858   0035FA  5023               	movf	reverseWallAdjust@mL^0,w,c
  4859   0035FC  26D9               	addwf	fsr2l,f,c
  4860   0035FE  5024               	movf	(reverseWallAdjust@mL+1)^0,w,c
  4861   003600  22DA               	addwfc	fsr2h,f,c
  4862   003602  50DF               	movf	indf2,w,c
  4863   003604  2430               	addwf	reverseWallAdjust@cur_power^0,w,c
  4864   003606  C023  FFD9         	movff	reverseWallAdjust@mL,fsr2l
  4865   00360A  C024  FFDA         	movff	reverseWallAdjust@mL+1,fsr2h
  4866   00360E  6EDF               	movwf	indf2,c
  4867                           
  4868                           ;dc_motor.c: 611:         mR->power = cur_power+mR->compensation;
  4869   003610  EE20 F009          	lfsr	2,9
  4870   003614  5025               	movf	reverseWallAdjust@mR^0,w,c
  4871   003616  26D9               	addwf	fsr2l,f,c
  4872   003618  5026               	movf	(reverseWallAdjust@mR+1)^0,w,c
  4873   00361A  22DA               	addwfc	fsr2h,f,c
  4874   00361C  50DF               	movf	indf2,w,c
  4875   00361E  2430               	addwf	reverseWallAdjust@cur_power^0,w,c
  4876   003620  C025  FFD9         	movff	reverseWallAdjust@mR,fsr2l
  4877   003624  C026  FFDA         	movff	reverseWallAdjust@mR+1,fsr2h
  4878   003628  6EDF               	movwf	indf2,c
  4879   00362A                     
  4880                           ;dc_motor.c: 612:         setMotorPWM(mL);
  4881   00362A  C023  F01D         	movff	reverseWallAdjust@mL,setMotorPWM@m
  4882   00362E  C024  F01E         	movff	reverseWallAdjust@mL+1,setMotorPWM@m+1
  4883   003632  EC95  F020         	call	_setMotorPWM	;wreg free
  4884   003636                     
  4885                           ;dc_motor.c: 613:         setMotorPWM(mR);
  4886   003636  C025  F01D         	movff	reverseWallAdjust@mR,setMotorPWM@m
  4887   00363A  C026  F01E         	movff	reverseWallAdjust@mR+1,setMotorPWM@m+1
  4888   00363E  EC95  F020         	call	_setMotorPWM	;wreg free
  4889   003642                     
  4890                           ;dc_motor.c: 614:         for (i=0;i<straightRamp;i++) {
  4891   003642  0E00               	movlw	0
  4892   003644  6E2F               	movwf	(reverseWallAdjust@i+1)^0,c
  4893   003646  0E00               	movlw	0
  4894   003648  6E2E               	movwf	reverseWallAdjust@i^0,c
  4895   00364A  EF31  F01B         	goto	l716
  4896   00364E                     l4855:
  4897                           
  4898                           ;dc_motor.c: 615:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4899   00364E  0E68               	movlw	104
  4900   003650  6E29               	movwf	??_reverseWallAdjust^0,c
  4901   003652  0EE4               	movlw	228
  4902   003654                     u5707:
  4903   003654  2EE8               	decfsz	wreg,f,c
  4904   003656  D7FE               	bra	u5707
  4905   003658  2E29               	decfsz	??_reverseWallAdjust^0,f,c
  4906   00365A  D7FC               	bra	u5707
  4907   00365C  D000               	nop2	
  4908   00365E                     
  4909                           ;dc_motor.c: 616:         }
  4910   00365E  4A2E               	infsnz	reverseWallAdjust@i^0,f,c
  4911   003660  2A2F               	incf	(reverseWallAdjust@i+1)^0,f,c
  4912   003662                     l716:
  4913   003662  5028               	movf	reverseWallAdjust@straightRamp^0,w,c
  4914   003664  6E29               	movwf	??_reverseWallAdjust^0,c
  4915   003666  6A2A               	clrf	(??_reverseWallAdjust+1)^0,c
  4916   003668  5029               	movf	??_reverseWallAdjust^0,w,c
  4917   00366A  5C2E               	subwf	reverseWallAdjust@i^0,w,c
  4918   00366C  502F               	movf	(reverseWallAdjust@i+1)^0,w,c
  4919   00366E  0A80               	xorlw	128
  4920   003670  6E2B               	movwf	(??_reverseWallAdjust+2)^0,c
  4921   003672  502A               	movf	(??_reverseWallAdjust+1)^0,w,c
  4922   003674  0A80               	xorlw	128
  4923   003676  582B               	subwfb	(??_reverseWallAdjust+2)^0,w,c
  4924   003678  A0D8               	btfss	status,0,c
  4925   00367A  EF41  F01B         	goto	u3811
  4926   00367E  EF43  F01B         	goto	u3810
  4927   003682                     u3811:
  4928   003682  EF27  F01B         	goto	l4855
  4929   003686                     u3810:
  4930   003686                     
  4931                           ;dc_motor.c: 617:     }
  4932   003686  4A30               	infsnz	reverseWallAdjust@cur_power^0,f,c
  4933   003688  2A31               	incf	(reverseWallAdjust@cur_power+1)^0,f,c
  4934   00368A                     l4861:
  4935   00368A  502D               	movf	reverseWallAdjust@reverseWallSpeed^0,w,c
  4936   00368C  6E29               	movwf	??_reverseWallAdjust^0,c
  4937   00368E  6A2A               	clrf	(??_reverseWallAdjust+1)^0,c
  4938   003690  5030               	movf	reverseWallAdjust@cur_power^0,w,c
  4939   003692  5C29               	subwf	??_reverseWallAdjust^0,w,c
  4940   003694  502A               	movf	(??_reverseWallAdjust+1)^0,w,c
  4941   003696  0A80               	xorlw	128
  4942   003698  6E2B               	movwf	(??_reverseWallAdjust+2)^0,c
  4943   00369A  5031               	movf	(reverseWallAdjust@cur_power+1)^0,w,c
  4944   00369C  0A80               	xorlw	128
  4945   00369E  582B               	subwfb	(??_reverseWallAdjust+2)^0,w,c
  4946   0036A0  B0D8               	btfsc	status,0,c
  4947   0036A2  EF55  F01B         	goto	u3821
  4948   0036A6  EF57  F01B         	goto	u3820
  4949   0036AA                     u3821:
  4950   0036AA  EFFB  F01A         	goto	l4847
  4951   0036AE                     u3820:
  4952   0036AE                     
  4953                           ;dc_motor.c: 619:     for (i=0;i<reverseAdjustDuration;i++) {
  4954   0036AE  0E00               	movlw	0
  4955   0036B0  6E2F               	movwf	(reverseWallAdjust@i+1)^0,c
  4956   0036B2  0E00               	movlw	0
  4957   0036B4  6E2E               	movwf	reverseWallAdjust@i^0,c
  4958   0036B6  EF67  F01B         	goto	l720
  4959   0036BA                     l4865:
  4960                           
  4961                           ;dc_motor.c: 620:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4962   0036BA  0E68               	movlw	104
  4963   0036BC  6E29               	movwf	??_reverseWallAdjust^0,c
  4964   0036BE  0EE4               	movlw	228
  4965   0036C0                     u5717:
  4966   0036C0  2EE8               	decfsz	wreg,f,c
  4967   0036C2  D7FE               	bra	u5717
  4968   0036C4  2E29               	decfsz	??_reverseWallAdjust^0,f,c
  4969   0036C6  D7FC               	bra	u5717
  4970   0036C8  D000               	nop2	
  4971   0036CA                     
  4972                           ;dc_motor.c: 621:         }
  4973   0036CA  4A2E               	infsnz	reverseWallAdjust@i^0,f,c
  4974   0036CC  2A2F               	incf	(reverseWallAdjust@i+1)^0,f,c
  4975   0036CE                     l720:
  4976   0036CE  502C               	movf	reverseWallAdjust@reverseAdjustDuration^0,w,c
  4977   0036D0  6E29               	movwf	??_reverseWallAdjust^0,c
  4978   0036D2  6A2A               	clrf	(??_reverseWallAdjust+1)^0,c
  4979   0036D4  5029               	movf	??_reverseWallAdjust^0,w,c
  4980   0036D6  5C2E               	subwf	reverseWallAdjust@i^0,w,c
  4981   0036D8  502F               	movf	(reverseWallAdjust@i+1)^0,w,c
  4982   0036DA  0A80               	xorlw	128
  4983   0036DC  6E2B               	movwf	(??_reverseWallAdjust+2)^0,c
  4984   0036DE  502A               	movf	(??_reverseWallAdjust+1)^0,w,c
  4985   0036E0  0A80               	xorlw	128
  4986   0036E2  582B               	subwfb	(??_reverseWallAdjust+2)^0,w,c
  4987   0036E4  A0D8               	btfss	status,0,c
  4988   0036E6  EF77  F01B         	goto	u3831
  4989   0036EA  EF79  F01B         	goto	u3830
  4990   0036EE                     u3831:
  4991   0036EE  EF5D  F01B         	goto	l4865
  4992   0036F2                     u3830:
  4993   0036F2                     
  4994                           ;dc_motor.c: 623:     for (cur_power=reverseWallSpeed;cur_power>=0;cur_power--) {
  4995   0036F2  C02D  F030         	movff	reverseWallAdjust@reverseWallSpeed,reverseWallAdjust@cur_power
  4996   0036F6  6A31               	clrf	(reverseWallAdjust@cur_power+1)^0,c
  4997   0036F8                     l4869:
  4998   0036F8  BE31               	btfsc	(reverseWallAdjust@cur_power+1)^0,7,c
  4999   0036FA  EF83  F01B         	goto	u3840
  5000   0036FE  EF81  F01B         	goto	u3841
  5001   003702                     u3841:
  5002   003702  EF85  F01B         	goto	l4873
  5003   003706                     u3840:
  5004   003706  EFD2  F01B         	goto	l4889
  5005   00370A                     l4873:
  5006                           
  5007                           ;dc_motor.c: 624:         mL->power = cur_power+mL->compensation;
  5008   00370A  EE20 F009          	lfsr	2,9
  5009   00370E  5023               	movf	reverseWallAdjust@mL^0,w,c
  5010   003710  26D9               	addwf	fsr2l,f,c
  5011   003712  5024               	movf	(reverseWallAdjust@mL+1)^0,w,c
  5012   003714  22DA               	addwfc	fsr2h,f,c
  5013   003716  50DF               	movf	indf2,w,c
  5014   003718  2430               	addwf	reverseWallAdjust@cur_power^0,w,c
  5015   00371A  C023  FFD9         	movff	reverseWallAdjust@mL,fsr2l
  5016   00371E  C024  FFDA         	movff	reverseWallAdjust@mL+1,fsr2h
  5017   003722  6EDF               	movwf	indf2,c
  5018                           
  5019                           ;dc_motor.c: 625:         mR->power = cur_power+mR->compensation;
  5020   003724  EE20 F009          	lfsr	2,9
  5021   003728  5025               	movf	reverseWallAdjust@mR^0,w,c
  5022   00372A  26D9               	addwf	fsr2l,f,c
  5023   00372C  5026               	movf	(reverseWallAdjust@mR+1)^0,w,c
  5024   00372E  22DA               	addwfc	fsr2h,f,c
  5025   003730  50DF               	movf	indf2,w,c
  5026   003732  2430               	addwf	reverseWallAdjust@cur_power^0,w,c
  5027   003734  C025  FFD9         	movff	reverseWallAdjust@mR,fsr2l
  5028   003738  C026  FFDA         	movff	reverseWallAdjust@mR+1,fsr2h
  5029   00373C  6EDF               	movwf	indf2,c
  5030   00373E                     
  5031                           ;dc_motor.c: 626:         setMotorPWM(mL);
  5032   00373E  C023  F01D         	movff	reverseWallAdjust@mL,setMotorPWM@m
  5033   003742  C024  F01E         	movff	reverseWallAdjust@mL+1,setMotorPWM@m+1
  5034   003746  EC95  F020         	call	_setMotorPWM	;wreg free
  5035   00374A                     
  5036                           ;dc_motor.c: 627:         setMotorPWM(mR);
  5037   00374A  C025  F01D         	movff	reverseWallAdjust@mR,setMotorPWM@m
  5038   00374E  C026  F01E         	movff	reverseWallAdjust@mR+1,setMotorPWM@m+1
  5039   003752  EC95  F020         	call	_setMotorPWM	;wreg free
  5040   003756                     
  5041                           ;dc_motor.c: 628:         for (i=0;i<straightRamp;i++) {
  5042   003756  0E00               	movlw	0
  5043   003758  6E2F               	movwf	(reverseWallAdjust@i+1)^0,c
  5044   00375A  0E00               	movlw	0
  5045   00375C  6E2E               	movwf	reverseWallAdjust@i^0,c
  5046   00375E  EFBB  F01B         	goto	l725
  5047   003762                     l4881:
  5048                           
  5049                           ;dc_motor.c: 629:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5050   003762  0E68               	movlw	104
  5051   003764  6E29               	movwf	??_reverseWallAdjust^0,c
  5052   003766  0EE4               	movlw	228
  5053   003768                     u5727:
  5054   003768  2EE8               	decfsz	wreg,f,c
  5055   00376A  D7FE               	bra	u5727
  5056   00376C  2E29               	decfsz	??_reverseWallAdjust^0,f,c
  5057   00376E  D7FC               	bra	u5727
  5058   003770  D000               	nop2	
  5059   003772                     
  5060                           ;dc_motor.c: 630:         }
  5061   003772  4A2E               	infsnz	reverseWallAdjust@i^0,f,c
  5062   003774  2A2F               	incf	(reverseWallAdjust@i+1)^0,f,c
  5063   003776                     l725:
  5064   003776  5028               	movf	reverseWallAdjust@straightRamp^0,w,c
  5065   003778  6E29               	movwf	??_reverseWallAdjust^0,c
  5066   00377A  6A2A               	clrf	(??_reverseWallAdjust+1)^0,c
  5067   00377C  5029               	movf	??_reverseWallAdjust^0,w,c
  5068   00377E  5C2E               	subwf	reverseWallAdjust@i^0,w,c
  5069   003780  502F               	movf	(reverseWallAdjust@i+1)^0,w,c
  5070   003782  0A80               	xorlw	128
  5071   003784  6E2B               	movwf	(??_reverseWallAdjust+2)^0,c
  5072   003786  502A               	movf	(??_reverseWallAdjust+1)^0,w,c
  5073   003788  0A80               	xorlw	128
  5074   00378A  582B               	subwfb	(??_reverseWallAdjust+2)^0,w,c
  5075   00378C  A0D8               	btfss	status,0,c
  5076   00378E  EFCB  F01B         	goto	u3851
  5077   003792  EFCD  F01B         	goto	u3850
  5078   003796                     u3851:
  5079   003796  EFB1  F01B         	goto	l4881
  5080   00379A                     u3850:
  5081   00379A                     
  5082                           ;dc_motor.c: 631:     }
  5083   00379A  0630               	decf	reverseWallAdjust@cur_power^0,f,c
  5084   00379C  A0D8               	btfss	status,0,c
  5085   00379E  0631               	decf	(reverseWallAdjust@cur_power+1)^0,f,c
  5086   0037A0  EF7C  F01B         	goto	l4869
  5087   0037A4                     l4889:
  5088                           
  5089                           ;dc_motor.c: 632:     mL->power = 0;
  5090   0037A4  C023  FFD9         	movff	reverseWallAdjust@mL,fsr2l
  5091   0037A8  C024  FFDA         	movff	reverseWallAdjust@mL+1,fsr2h
  5092   0037AC  6ADF               	clrf	indf2,c
  5093                           
  5094                           ;dc_motor.c: 633:     mR->power = 0;
  5095   0037AE  C025  FFD9         	movff	reverseWallAdjust@mR,fsr2l
  5096   0037B2  C026  FFDA         	movff	reverseWallAdjust@mR+1,fsr2h
  5097   0037B6  6ADF               	clrf	indf2,c
  5098   0037B8  0012               	return		;funcret
  5099   0037BA                     __end_of_reverseWallAdjust:
  5100                           	callstack 0
  5101                           
  5102 ;; *************** function _reverseOneSquare *****************
  5103 ;; Defined at:
  5104 ;;		line 498 in file "dc_motor.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  5107 ;;		 -> main@motorL(10), 
  5108 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  5109 ;;		 -> main@motorR(10), 
  5110 ;;  straightSpee    1   38[COMRAM] unsigned char 
  5111 ;;  reverseDurat    2   39[COMRAM] unsigned int 
  5112 ;;  straightRamp    1   41[COMRAM] unsigned char 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  cur_power       2   47[COMRAM] int 
  5115 ;;  i               2   45[COMRAM] int 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      void 
  5118 ;; Registers used:
  5119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5125 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5126 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5128 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5129 ;;Total ram usage:       15 bytes
  5130 ;; Hardware stack levels used: 1
  5131 ;; Hardware stack levels required when called: 8
  5132 ;; This function calls:
  5133 ;;		_setMotorPWM
  5134 ;; This function is called by:
  5135 ;;		_move
  5136 ;;		_returnHome
  5137 ;;		_lostReturnHome
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text7
  5142   003B98                     __ptext7:
  5143                           	callstack 0
  5144   003B98                     _reverseOneSquare:
  5145                           	callstack 21
  5146   003B98                     
  5147                           ;dc_motor.c: 498: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned int reverseDuration, unsigned char straightRamp);dc_motor.c: 499: {;dc_motor.c:
      +                           500:     mL->direction = 0;
  5148   003B98  EE20 F001          	lfsr	2,1
  5149   003B9C  5023               	movf	reverseOneSquare@mL^0,w,c
  5150   003B9E  26D9               	addwf	fsr2l,f,c
  5151   003BA0  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  5152   003BA2  22DA               	addwfc	fsr2h,f,c
  5153   003BA4  6ADF               	clrf	indf2,c
  5154                           
  5155                           ;dc_motor.c: 501:     mR->direction = 0;
  5156   003BA6  EE20 F001          	lfsr	2,1
  5157   003BAA  5025               	movf	reverseOneSquare@mR^0,w,c
  5158   003BAC  26D9               	addwf	fsr2l,f,c
  5159   003BAE  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  5160   003BB0  22DA               	addwfc	fsr2h,f,c
  5161   003BB2  6ADF               	clrf	indf2,c
  5162   003BB4                     
  5163                           ;dc_motor.c: 502:     int i;;dc_motor.c: 503:     int cur_power;;dc_motor.c: 504:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  5164   003BB4  0E00               	movlw	0
  5165   003BB6  6E31               	movwf	(reverseOneSquare@cur_power+1)^0,c
  5166   003BB8  0E01               	movlw	1
  5167   003BBA  6E30               	movwf	reverseOneSquare@cur_power^0,c
  5168   003BBC  EF2A  F01E         	goto	l4811
  5169   003BC0                     l4797:
  5170                           
  5171                           ;dc_motor.c: 505:         mL->power = cur_power+mL->compensation;
  5172   003BC0  EE20 F009          	lfsr	2,9
  5173   003BC4  5023               	movf	reverseOneSquare@mL^0,w,c
  5174   003BC6  26D9               	addwf	fsr2l,f,c
  5175   003BC8  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  5176   003BCA  22DA               	addwfc	fsr2h,f,c
  5177   003BCC  50DF               	movf	indf2,w,c
  5178   003BCE  2430               	addwf	reverseOneSquare@cur_power^0,w,c
  5179   003BD0  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  5180   003BD4  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  5181   003BD8  6EDF               	movwf	indf2,c
  5182                           
  5183                           ;dc_motor.c: 506:         mR->power = cur_power+mR->compensation;
  5184   003BDA  EE20 F009          	lfsr	2,9
  5185   003BDE  5025               	movf	reverseOneSquare@mR^0,w,c
  5186   003BE0  26D9               	addwf	fsr2l,f,c
  5187   003BE2  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  5188   003BE4  22DA               	addwfc	fsr2h,f,c
  5189   003BE6  50DF               	movf	indf2,w,c
  5190   003BE8  2430               	addwf	reverseOneSquare@cur_power^0,w,c
  5191   003BEA  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  5192   003BEE  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  5193   003BF2  6EDF               	movwf	indf2,c
  5194   003BF4                     
  5195                           ;dc_motor.c: 507:         setMotorPWM(mL);
  5196   003BF4  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  5197   003BF8  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  5198   003BFC  EC95  F020         	call	_setMotorPWM	;wreg free
  5199   003C00                     
  5200                           ;dc_motor.c: 508:         setMotorPWM(mR);
  5201   003C00  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  5202   003C04  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  5203   003C08  EC95  F020         	call	_setMotorPWM	;wreg free
  5204   003C0C                     
  5205                           ;dc_motor.c: 509:         for (i=0;i<straightRamp;i++) {
  5206   003C0C  0E00               	movlw	0
  5207   003C0E  6E2F               	movwf	(reverseOneSquare@i+1)^0,c
  5208   003C10  0E00               	movlw	0
  5209   003C12  6E2E               	movwf	reverseOneSquare@i^0,c
  5210   003C14  EF16  F01E         	goto	l668
  5211   003C18                     l4805:
  5212                           
  5213                           ;dc_motor.c: 510:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5214   003C18  0E68               	movlw	104
  5215   003C1A  6E2B               	movwf	??_reverseOneSquare^0,c
  5216   003C1C  0EE4               	movlw	228
  5217   003C1E                     u5737:
  5218   003C1E  2EE8               	decfsz	wreg,f,c
  5219   003C20  D7FE               	bra	u5737
  5220   003C22  2E2B               	decfsz	??_reverseOneSquare^0,f,c
  5221   003C24  D7FC               	bra	u5737
  5222   003C26  D000               	nop2	
  5223   003C28                     
  5224                           ;dc_motor.c: 511:         }
  5225   003C28  4A2E               	infsnz	reverseOneSquare@i^0,f,c
  5226   003C2A  2A2F               	incf	(reverseOneSquare@i+1)^0,f,c
  5227   003C2C                     l668:
  5228   003C2C  502A               	movf	reverseOneSquare@straightRamp^0,w,c
  5229   003C2E  6E2B               	movwf	??_reverseOneSquare^0,c
  5230   003C30  6A2C               	clrf	(??_reverseOneSquare+1)^0,c
  5231   003C32  502B               	movf	??_reverseOneSquare^0,w,c
  5232   003C34  5C2E               	subwf	reverseOneSquare@i^0,w,c
  5233   003C36  502F               	movf	(reverseOneSquare@i+1)^0,w,c
  5234   003C38  0A80               	xorlw	128
  5235   003C3A  6E2D               	movwf	(??_reverseOneSquare+2)^0,c
  5236   003C3C  502C               	movf	(??_reverseOneSquare+1)^0,w,c
  5237   003C3E  0A80               	xorlw	128
  5238   003C40  582D               	subwfb	(??_reverseOneSquare+2)^0,w,c
  5239   003C42  A0D8               	btfss	status,0,c
  5240   003C44  EF26  F01E         	goto	u3761
  5241   003C48  EF28  F01E         	goto	u3760
  5242   003C4C                     u3761:
  5243   003C4C  EF0C  F01E         	goto	l4805
  5244   003C50                     u3760:
  5245   003C50                     
  5246                           ;dc_motor.c: 512:     }
  5247   003C50  4A30               	infsnz	reverseOneSquare@cur_power^0,f,c
  5248   003C52  2A31               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  5249   003C54                     l4811:
  5250   003C54  5027               	movf	reverseOneSquare@straightSpeed^0,w,c
  5251   003C56  6E2B               	movwf	??_reverseOneSquare^0,c
  5252   003C58  6A2C               	clrf	(??_reverseOneSquare+1)^0,c
  5253   003C5A  5030               	movf	reverseOneSquare@cur_power^0,w,c
  5254   003C5C  5C2B               	subwf	??_reverseOneSquare^0,w,c
  5255   003C5E  502C               	movf	(??_reverseOneSquare+1)^0,w,c
  5256   003C60  0A80               	xorlw	128
  5257   003C62  6E2D               	movwf	(??_reverseOneSquare+2)^0,c
  5258   003C64  5031               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  5259   003C66  0A80               	xorlw	128
  5260   003C68  582D               	subwfb	(??_reverseOneSquare+2)^0,w,c
  5261   003C6A  B0D8               	btfsc	status,0,c
  5262   003C6C  EF3A  F01E         	goto	u3771
  5263   003C70  EF3C  F01E         	goto	u3770
  5264   003C74                     u3771:
  5265   003C74  EFE0  F01D         	goto	l4797
  5266   003C78                     u3770:
  5267   003C78                     
  5268                           ;dc_motor.c: 514:     for (i=0;i<reverseDuration;i++) {
  5269   003C78  0E00               	movlw	0
  5270   003C7A  6E2F               	movwf	(reverseOneSquare@i+1)^0,c
  5271   003C7C  0E00               	movlw	0
  5272   003C7E  6E2E               	movwf	reverseOneSquare@i^0,c
  5273   003C80  EF4C  F01E         	goto	l672
  5274   003C84                     l4815:
  5275                           
  5276                           ;dc_motor.c: 515:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5277   003C84  0E68               	movlw	104
  5278   003C86  6E2B               	movwf	??_reverseOneSquare^0,c
  5279   003C88  0EE4               	movlw	228
  5280   003C8A                     u5747:
  5281   003C8A  2EE8               	decfsz	wreg,f,c
  5282   003C8C  D7FE               	bra	u5747
  5283   003C8E  2E2B               	decfsz	??_reverseOneSquare^0,f,c
  5284   003C90  D7FC               	bra	u5747
  5285   003C92  D000               	nop2	
  5286   003C94                     
  5287                           ;dc_motor.c: 516:         }
  5288   003C94  4A2E               	infsnz	reverseOneSquare@i^0,f,c
  5289   003C96  2A2F               	incf	(reverseOneSquare@i+1)^0,f,c
  5290   003C98                     l672:
  5291   003C98  5028               	movf	reverseOneSquare@reverseDuration^0,w,c
  5292   003C9A  5C2E               	subwf	reverseOneSquare@i^0,w,c
  5293   003C9C  5029               	movf	(reverseOneSquare@reverseDuration+1)^0,w,c
  5294   003C9E  582F               	subwfb	(reverseOneSquare@i+1)^0,w,c
  5295   003CA0  A0D8               	btfss	status,0,c
  5296   003CA2  EF55  F01E         	goto	u3781
  5297   003CA6  EF57  F01E         	goto	u3780
  5298   003CAA                     u3781:
  5299   003CAA  EF42  F01E         	goto	l4815
  5300   003CAE                     u3780:
  5301   003CAE                     
  5302                           ;dc_motor.c: 518:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  5303   003CAE  C027  F030         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  5304   003CB2  6A31               	clrf	(reverseOneSquare@cur_power+1)^0,c
  5305   003CB4                     l4819:
  5306   003CB4  BE31               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  5307   003CB6  EF61  F01E         	goto	u3790
  5308   003CBA  EF5F  F01E         	goto	u3791
  5309   003CBE                     u3791:
  5310   003CBE  EF63  F01E         	goto	l4823
  5311   003CC2                     u3790:
  5312   003CC2  EFB0  F01E         	goto	l4839
  5313   003CC6                     l4823:
  5314                           
  5315                           ;dc_motor.c: 519:         mL->power = cur_power+mL->compensation;
  5316   003CC6  EE20 F009          	lfsr	2,9
  5317   003CCA  5023               	movf	reverseOneSquare@mL^0,w,c
  5318   003CCC  26D9               	addwf	fsr2l,f,c
  5319   003CCE  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  5320   003CD0  22DA               	addwfc	fsr2h,f,c
  5321   003CD2  50DF               	movf	indf2,w,c
  5322   003CD4  2430               	addwf	reverseOneSquare@cur_power^0,w,c
  5323   003CD6  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  5324   003CDA  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  5325   003CDE  6EDF               	movwf	indf2,c
  5326                           
  5327                           ;dc_motor.c: 520:         mR->power = cur_power+mR->compensation;
  5328   003CE0  EE20 F009          	lfsr	2,9
  5329   003CE4  5025               	movf	reverseOneSquare@mR^0,w,c
  5330   003CE6  26D9               	addwf	fsr2l,f,c
  5331   003CE8  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  5332   003CEA  22DA               	addwfc	fsr2h,f,c
  5333   003CEC  50DF               	movf	indf2,w,c
  5334   003CEE  2430               	addwf	reverseOneSquare@cur_power^0,w,c
  5335   003CF0  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  5336   003CF4  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  5337   003CF8  6EDF               	movwf	indf2,c
  5338   003CFA                     
  5339                           ;dc_motor.c: 521:         setMotorPWM(mL);
  5340   003CFA  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  5341   003CFE  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  5342   003D02  EC95  F020         	call	_setMotorPWM	;wreg free
  5343   003D06                     
  5344                           ;dc_motor.c: 522:         setMotorPWM(mR);
  5345   003D06  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  5346   003D0A  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  5347   003D0E  EC95  F020         	call	_setMotorPWM	;wreg free
  5348   003D12                     
  5349                           ;dc_motor.c: 523:         for (i=0;i<straightRamp;i++) {
  5350   003D12  0E00               	movlw	0
  5351   003D14  6E2F               	movwf	(reverseOneSquare@i+1)^0,c
  5352   003D16  0E00               	movlw	0
  5353   003D18  6E2E               	movwf	reverseOneSquare@i^0,c
  5354   003D1A  EF99  F01E         	goto	l677
  5355   003D1E                     l4831:
  5356                           
  5357                           ;dc_motor.c: 524:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5358   003D1E  0E68               	movlw	104
  5359   003D20  6E2B               	movwf	??_reverseOneSquare^0,c
  5360   003D22  0EE4               	movlw	228
  5361   003D24                     u5757:
  5362   003D24  2EE8               	decfsz	wreg,f,c
  5363   003D26  D7FE               	bra	u5757
  5364   003D28  2E2B               	decfsz	??_reverseOneSquare^0,f,c
  5365   003D2A  D7FC               	bra	u5757
  5366   003D2C  D000               	nop2	
  5367   003D2E                     
  5368                           ;dc_motor.c: 525:         }
  5369   003D2E  4A2E               	infsnz	reverseOneSquare@i^0,f,c
  5370   003D30  2A2F               	incf	(reverseOneSquare@i+1)^0,f,c
  5371   003D32                     l677:
  5372   003D32  502A               	movf	reverseOneSquare@straightRamp^0,w,c
  5373   003D34  6E2B               	movwf	??_reverseOneSquare^0,c
  5374   003D36  6A2C               	clrf	(??_reverseOneSquare+1)^0,c
  5375   003D38  502B               	movf	??_reverseOneSquare^0,w,c
  5376   003D3A  5C2E               	subwf	reverseOneSquare@i^0,w,c
  5377   003D3C  502F               	movf	(reverseOneSquare@i+1)^0,w,c
  5378   003D3E  0A80               	xorlw	128
  5379   003D40  6E2D               	movwf	(??_reverseOneSquare+2)^0,c
  5380   003D42  502C               	movf	(??_reverseOneSquare+1)^0,w,c
  5381   003D44  0A80               	xorlw	128
  5382   003D46  582D               	subwfb	(??_reverseOneSquare+2)^0,w,c
  5383   003D48  A0D8               	btfss	status,0,c
  5384   003D4A  EFA9  F01E         	goto	u3801
  5385   003D4E  EFAB  F01E         	goto	u3800
  5386   003D52                     u3801:
  5387   003D52  EF8F  F01E         	goto	l4831
  5388   003D56                     u3800:
  5389   003D56                     
  5390                           ;dc_motor.c: 526:     }
  5391   003D56  0630               	decf	reverseOneSquare@cur_power^0,f,c
  5392   003D58  A0D8               	btfss	status,0,c
  5393   003D5A  0631               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  5394   003D5C  EF5A  F01E         	goto	l4819
  5395   003D60                     l4839:
  5396                           
  5397                           ;dc_motor.c: 527:     mL->power = 0;
  5398   003D60  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  5399   003D64  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  5400   003D68  6ADF               	clrf	indf2,c
  5401                           
  5402                           ;dc_motor.c: 528:     mR->power = 0;
  5403   003D6A  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  5404   003D6E  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  5405   003D72  6ADF               	clrf	indf2,c
  5406   003D74  0012               	return		;funcret
  5407   003D76                     __end_of_reverseOneSquare:
  5408                           	callstack 0
  5409                           
  5410 ;; *************** function _resetTimer *****************
  5411 ;; Defined at:
  5412 ;;		line 23 in file "timers.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; Hardware stack levels required when called: 6
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_main
  5437 ;;		_returnHome
  5438 ;;		_lostReturnHome
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text8
  5443   004CEC                     __ptext8:
  5444                           	callstack 0
  5445   004CEC                     _resetTimer:
  5446                           	callstack 24
  5447   004CEC                     
  5448                           ;timers.c: 25:     TMR0H=0;
  5449   004CEC  0E00               	movlw	0
  5450   004CEE  6ED4               	movwf	212,c	;volatile
  5451                           
  5452                           ;timers.c: 26:     TMR0L=0;
  5453   004CF0  0E00               	movlw	0
  5454   004CF2  6ED3               	movwf	211,c	;volatile
  5455   004CF4  0012               	return		;funcret
  5456   004CF6                     __end_of_resetTimer:
  5457                           	callstack 0
  5458                           
  5459 ;; *************** function _get16bitTMR0val *****************
  5460 ;; Defined at:
  5461 ;;		line 33 in file "timers.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  timer_val       2   23[COMRAM] unsigned int 
  5466 ;;  timer_high      2   21[COMRAM] unsigned int 
  5467 ;;  timer_low       2   19[COMRAM] unsigned int 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  2   15[COMRAM] unsigned int 
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, status,0
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5478 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5480 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;Total ram usage:       10 bytes
  5482 ;; Hardware stack levels used: 1
  5483 ;; Hardware stack levels required when called: 6
  5484 ;; This function calls:
  5485 ;;		Nothing
  5486 ;; This function is called by:
  5487 ;;		_main
  5488 ;;		_returnHome
  5489 ;;		_lostReturnHome
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text9
  5494   004B4C                     __ptext9:
  5495                           	callstack 0
  5496   004B4C                     _get16bitTMR0val:
  5497                           	callstack 22
  5498   004B4C                     
  5499                           ;timers.c: 36:     unsigned int timer_low = TMR0L;
  5500   004B4C  CFD3 F014          	movff	4051,get16bitTMR0val@timer_low	;volatile
  5501   004B50  6A15               	clrf	(get16bitTMR0val@timer_low+1)^0,c
  5502                           
  5503                           ;timers.c: 37:     unsigned int timer_high = TMR0H;
  5504   004B52  CFD4 F016          	movff	4052,get16bitTMR0val@timer_high	;volatile
  5505   004B56  6A17               	clrf	(get16bitTMR0val@timer_high+1)^0,c
  5506   004B58                     
  5507                           ;timers.c: 38:     unsigned int timer_val = (timer_high<<8) | timer_low;
  5508   004B58  5016               	movf	get16bitTMR0val@timer_high^0,w,c
  5509   004B5A  6E13               	movwf	(??_get16bitTMR0val+1)^0,c
  5510   004B5C  6A12               	clrf	??_get16bitTMR0val^0,c
  5511   004B5E  5014               	movf	get16bitTMR0val@timer_low^0,w,c
  5512   004B60  1012               	iorwf	??_get16bitTMR0val^0,w,c
  5513   004B62  6E18               	movwf	get16bitTMR0val@timer_val^0,c
  5514   004B64  5015               	movf	(get16bitTMR0val@timer_low+1)^0,w,c
  5515   004B66  1013               	iorwf	(??_get16bitTMR0val+1)^0,w,c
  5516   004B68  6E19               	movwf	(get16bitTMR0val@timer_val+1)^0,c
  5517   004B6A                     
  5518                           ;timers.c: 39:     return timer_val;
  5519   004B6A  C018  F010         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  5520   004B6E  C019  F011         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  5521   004B72  0012               	return		;funcret
  5522   004B74                     __end_of_get16bitTMR0val:
  5523                           	callstack 0
  5524                           
  5525 ;; *************** function _fullSpeedAhead *****************
  5526 ;; Defined at:
  5527 ;;		line 478 in file "dc_motor.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  5530 ;;		 -> main@motorL(10), 
  5531 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  5532 ;;		 -> main@motorR(10), 
  5533 ;;  straightSpee    1   38[COMRAM] unsigned char 
  5534 ;;  straightRamp    1   39[COMRAM] unsigned char 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  cur_power       2   45[COMRAM] int 
  5537 ;;  i               2   43[COMRAM] int 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5547 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5550 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;Total ram usage:       13 bytes
  5552 ;; Hardware stack levels used: 1
  5553 ;; Hardware stack levels required when called: 8
  5554 ;; This function calls:
  5555 ;;		_setMotorPWM
  5556 ;; This function is called by:
  5557 ;;		_main
  5558 ;;		_move
  5559 ;;		_returnHome
  5560 ;;		_lostReturnHome
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text10
  5565   0044AC                     __ptext10:
  5566                           	callstack 0
  5567   0044AC                     _fullSpeedAhead:
  5568                           	callstack 20
  5569   0044AC                     
  5570                           ;dc_motor.c: 478: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 479: {;dc_motor.c: 480:     mL->direction = 1;
  5571   0044AC  EE20 F001          	lfsr	2,1
  5572   0044B0  5023               	movf	fullSpeedAhead@mL^0,w,c
  5573   0044B2  26D9               	addwf	fsr2l,f,c
  5574   0044B4  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  5575   0044B6  22DA               	addwfc	fsr2h,f,c
  5576   0044B8  0E01               	movlw	1
  5577   0044BA  6EDF               	movwf	indf2,c
  5578                           
  5579                           ;dc_motor.c: 481:     mR->direction = 1;
  5580   0044BC  EE20 F001          	lfsr	2,1
  5581   0044C0  5025               	movf	fullSpeedAhead@mR^0,w,c
  5582   0044C2  26D9               	addwf	fsr2l,f,c
  5583   0044C4  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  5584   0044C6  22DA               	addwfc	fsr2h,f,c
  5585   0044C8  0E01               	movlw	1
  5586   0044CA  6EDF               	movwf	indf2,c
  5587   0044CC                     
  5588                           ;dc_motor.c: 482:     int i;;dc_motor.c: 483:     int cur_power;;dc_motor.c: 484:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  5589   0044CC  0E00               	movlw	0
  5590   0044CE  6E2F               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  5591   0044D0  0E01               	movlw	1
  5592   0044D2  6E2E               	movwf	fullSpeedAhead@cur_power^0,c
  5593   0044D4  EFB6  F022         	goto	l4663
  5594   0044D8                     l4649:
  5595                           
  5596                           ;dc_motor.c: 485:         mL->power = cur_power+mL->compensation;
  5597   0044D8  EE20 F009          	lfsr	2,9
  5598   0044DC  5023               	movf	fullSpeedAhead@mL^0,w,c
  5599   0044DE  26D9               	addwf	fsr2l,f,c
  5600   0044E0  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  5601   0044E2  22DA               	addwfc	fsr2h,f,c
  5602   0044E4  50DF               	movf	indf2,w,c
  5603   0044E6  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  5604   0044E8  C023  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5605   0044EC  C024  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5606   0044F0  6EDF               	movwf	indf2,c
  5607                           
  5608                           ;dc_motor.c: 486:         mR->power = cur_power+mR->compensation;
  5609   0044F2  EE20 F009          	lfsr	2,9
  5610   0044F6  5025               	movf	fullSpeedAhead@mR^0,w,c
  5611   0044F8  26D9               	addwf	fsr2l,f,c
  5612   0044FA  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  5613   0044FC  22DA               	addwfc	fsr2h,f,c
  5614   0044FE  50DF               	movf	indf2,w,c
  5615   004500  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  5616   004502  C025  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5617   004506  C026  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5618   00450A  6EDF               	movwf	indf2,c
  5619   00450C                     
  5620                           ;dc_motor.c: 487:         setMotorPWM(mL);
  5621   00450C  C023  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  5622   004510  C024  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  5623   004514  EC95  F020         	call	_setMotorPWM	;wreg free
  5624   004518                     
  5625                           ;dc_motor.c: 488:         setMotorPWM(mR);
  5626   004518  C025  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  5627   00451C  C026  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  5628   004520  EC95  F020         	call	_setMotorPWM	;wreg free
  5629   004524                     
  5630                           ;dc_motor.c: 489:         for (i=0;i<straightRamp;i++) {
  5631   004524  0E00               	movlw	0
  5632   004526  6E2D               	movwf	(fullSpeedAhead@i+1)^0,c
  5633   004528  0E00               	movlw	0
  5634   00452A  6E2C               	movwf	fullSpeedAhead@i^0,c
  5635   00452C  EFA2  F022         	goto	l659
  5636   004530                     l4657:
  5637                           
  5638                           ;dc_motor.c: 490:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5639   004530  0E68               	movlw	104
  5640   004532  6E29               	movwf	??_fullSpeedAhead^0,c
  5641   004534  0EE4               	movlw	228
  5642   004536                     u5767:
  5643   004536  2EE8               	decfsz	wreg,f,c
  5644   004538  D7FE               	bra	u5767
  5645   00453A  2E29               	decfsz	??_fullSpeedAhead^0,f,c
  5646   00453C  D7FC               	bra	u5767
  5647   00453E  D000               	nop2	
  5648   004540                     
  5649                           ;dc_motor.c: 491:         }
  5650   004540  4A2C               	infsnz	fullSpeedAhead@i^0,f,c
  5651   004542  2A2D               	incf	(fullSpeedAhead@i+1)^0,f,c
  5652   004544                     l659:
  5653   004544  5028               	movf	fullSpeedAhead@straightRamp^0,w,c
  5654   004546  6E29               	movwf	??_fullSpeedAhead^0,c
  5655   004548  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  5656   00454A  5029               	movf	??_fullSpeedAhead^0,w,c
  5657   00454C  5C2C               	subwf	fullSpeedAhead@i^0,w,c
  5658   00454E  502D               	movf	(fullSpeedAhead@i+1)^0,w,c
  5659   004550  0A80               	xorlw	128
  5660   004552  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  5661   004554  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  5662   004556  0A80               	xorlw	128
  5663   004558  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  5664   00455A  A0D8               	btfss	status,0,c
  5665   00455C  EFB2  F022         	goto	u3601
  5666   004560  EFB4  F022         	goto	u3600
  5667   004564                     u3601:
  5668   004564  EF98  F022         	goto	l4657
  5669   004568                     u3600:
  5670   004568                     
  5671                           ;dc_motor.c: 492:     }
  5672   004568  4A2E               	infsnz	fullSpeedAhead@cur_power^0,f,c
  5673   00456A  2A2F               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  5674   00456C                     l4663:
  5675   00456C  5027               	movf	fullSpeedAhead@straightSpeed^0,w,c
  5676   00456E  6E29               	movwf	??_fullSpeedAhead^0,c
  5677   004570  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  5678   004572  502E               	movf	fullSpeedAhead@cur_power^0,w,c
  5679   004574  5C29               	subwf	??_fullSpeedAhead^0,w,c
  5680   004576  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  5681   004578  0A80               	xorlw	128
  5682   00457A  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  5683   00457C  502F               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  5684   00457E  0A80               	xorlw	128
  5685   004580  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  5686   004582  B0D8               	btfsc	status,0,c
  5687   004584  EFC6  F022         	goto	u3611
  5688   004588  EFC8  F022         	goto	u3610
  5689   00458C                     u3611:
  5690   00458C  EF6C  F022         	goto	l4649
  5691   004590                     u3610:
  5692   004590  0012               	return		;funcret
  5693   004592                     __end_of_fullSpeedAhead:
  5694                           	callstack 0
  5695                           
  5696 ;; *************** function _initDCmotorsPWM *****************
  5697 ;; Defined at:
  5698 ;;		line 9 in file "dc_motor.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  PWMperiod       2   15[COMRAM] unsigned int 
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		wreg, status,2
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5716 ;;Total ram usage:        2 bytes
  5717 ;; Hardware stack levels used: 1
  5718 ;; Hardware stack levels required when called: 6
  5719 ;; This function calls:
  5720 ;;		Nothing
  5721 ;; This function is called by:
  5722 ;;		_main
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text11
  5727   0047A2                     __ptext11:
  5728                           	callstack 0
  5729   0047A2                     _initDCmotorsPWM:
  5730                           	callstack 24
  5731   0047A2                     
  5732                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  5733   0047A2  947D               	bcf	125,2,c	;volatile
  5734                           
  5735                           ;dc_motor.c: 13:     TRISEbits.TRISE2=0;
  5736   0047A4  9485               	bcf	133,2,c	;volatile
  5737                           
  5738                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  5739   0047A6  987D               	bcf	125,4,c	;volatile
  5740                           
  5741                           ;dc_motor.c: 15:     TRISEbits.TRISE4=0;
  5742   0047A8  9885               	bcf	133,4,c	;volatile
  5743                           
  5744                           ;dc_motor.c: 16:     LATCbits.LATC7=0;
  5745   0047AA  9E7B               	bcf	123,7,c	;volatile
  5746                           
  5747                           ;dc_motor.c: 17:     TRISCbits.TRISC7=0;
  5748   0047AC  9E83               	bcf	131,7,c	;volatile
  5749                           
  5750                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  5751   0047AE  9C7F               	bcf	127,6,c	;volatile
  5752                           
  5753                           ;dc_motor.c: 19:     TRISGbits.TRISG6=0;
  5754   0047B0  9C87               	bcf	135,6,c	;volatile
  5755   0047B2                     
  5756                           ;dc_motor.c: 22:     RE2PPS=0x05;
  5757   0047B2  0E05               	movlw	5
  5758   0047B4  010E               	movlb	14	; () banked
  5759   0047B6  6F74               	movwf	116,b	;volatile
  5760                           
  5761                           ;dc_motor.c: 23:     RE4PPS=0x06;
  5762   0047B8  0E06               	movlw	6
  5763   0047BA  6F76               	movwf	118,b	;volatile
  5764                           
  5765                           ;dc_motor.c: 24:     RC7PPS=0x07;
  5766   0047BC  0E07               	movlw	7
  5767   0047BE  6F69               	movwf	105,b	;volatile
  5768                           
  5769                           ;dc_motor.c: 25:     RG6PPS=0x08;
  5770   0047C0  0E08               	movlw	8
  5771   0047C2  6F88               	movwf	136,b	;volatile
  5772                           
  5773                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b011;
  5774   0047C4  50BD               	movf	189,w,c	;volatile
  5775   0047C6  0B8F               	andlw	-113
  5776   0047C8  0930               	iorlw	48
  5777   0047CA  6EBD               	movwf	189,c	;volatile
  5778                           
  5779                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  5780   0047CC  0EE0               	movlw	-32
  5781   0047CE  16BE               	andwf	190,f,c	;volatile
  5782                           
  5783                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  5784   0047D0  50BF               	movf	191,w,c	;volatile
  5785   0047D2  0BF0               	andlw	-16
  5786   0047D4  0901               	iorlw	1
  5787   0047D6  6EBF               	movwf	191,c	;volatile
  5788   0047D8                     
  5789                           ; BSR set to: 14
  5790                           ;dc_motor.c: 34:     T2PR=PWMperiod;
  5791   0047D8  C010  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5792   0047DC                     
  5793                           ; BSR set to: 14
  5794                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  5795   0047DC  8EBD               	bsf	189,7,c	;volatile
  5796                           
  5797                           ;dc_motor.c: 39:     CCPR1H=0;
  5798   0047DE  0E00               	movlw	0
  5799   0047E0  6EAA               	movwf	170,c	;volatile
  5800                           
  5801                           ;dc_motor.c: 40:     CCPR2H=0;
  5802   0047E2  0E00               	movlw	0
  5803   0047E4  6EA6               	movwf	166,c	;volatile
  5804                           
  5805                           ;dc_motor.c: 41:     CCPR3H=0;
  5806   0047E6  0E00               	movlw	0
  5807   0047E8  010F               	movlb	15	; () banked
  5808   0047EA  6F25               	movwf	37,b	;volatile
  5809                           
  5810                           ;dc_motor.c: 42:     CCPR4H=0;
  5811   0047EC  0E00               	movlw	0
  5812   0047EE  6F21               	movwf	33,b	;volatile
  5813                           
  5814                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  5815   0047F0  0EFC               	movlw	-4
  5816   0047F2  16AD               	andwf	173,f,c	;volatile
  5817                           
  5818                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  5819   0047F4  0EF3               	movlw	-13
  5820   0047F6  16AD               	andwf	173,f,c	;volatile
  5821                           
  5822                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  5823   0047F8  0ECF               	movlw	-49
  5824   0047FA  16AD               	andwf	173,f,c	;volatile
  5825                           
  5826                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  5827   0047FC  0E3F               	movlw	-193
  5828   0047FE  16AD               	andwf	173,f,c	;volatile
  5829   004800                     
  5830                           ; BSR set to: 15
  5831                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  5832   004800  88AB               	bsf	171,4,c	;volatile
  5833                           
  5834                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  5835   004802  50AB               	movf	171,w,c	;volatile
  5836   004804  0BF0               	andlw	-16
  5837   004806  090C               	iorlw	12
  5838   004808  6EAB               	movwf	171,c	;volatile
  5839   00480A                     
  5840                           ; BSR set to: 15
  5841                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  5842   00480A  8EAB               	bsf	171,7,c	;volatile
  5843   00480C                     
  5844                           ; BSR set to: 15
  5845                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  5846   00480C  88A7               	bsf	167,4,c	;volatile
  5847                           
  5848                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  5849   00480E  50A7               	movf	167,w,c	;volatile
  5850   004810  0BF0               	andlw	-16
  5851   004812  090C               	iorlw	12
  5852   004814  6EA7               	movwf	167,c	;volatile
  5853   004816                     
  5854                           ; BSR set to: 15
  5855                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  5856   004816  8EA7               	bsf	167,7,c	;volatile
  5857   004818                     
  5858                           ; BSR set to: 15
  5859                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  5860   004818  8926               	bsf	38,4,b	;volatile
  5861                           
  5862                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  5863   00481A  5126               	movf	38,w,b	;volatile
  5864   00481C  0BF0               	andlw	-16
  5865   00481E  090C               	iorlw	12
  5866   004820  6F26               	movwf	38,b	;volatile
  5867   004822                     
  5868                           ; BSR set to: 15
  5869                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  5870   004822  8F26               	bsf	38,7,b	;volatile
  5871   004824                     
  5872                           ; BSR set to: 15
  5873                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  5874   004824  8922               	bsf	34,4,b	;volatile
  5875                           
  5876                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  5877   004826  5122               	movf	34,w,b	;volatile
  5878   004828  0BF0               	andlw	-16
  5879   00482A  090C               	iorlw	12
  5880   00482C  6F22               	movwf	34,b	;volatile
  5881   00482E                     
  5882                           ; BSR set to: 15
  5883                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  5884   00482E  8F22               	bsf	34,7,b	;volatile
  5885   004830                     
  5886                           ; BSR set to: 15
  5887   004830  0012               	return		;funcret
  5888   004832                     __end_of_initDCmotorsPWM:
  5889                           	callstack 0
  5890                           
  5891 ;; *************** function _color_detect *****************
  5892 ;; Defined at:
  5893 ;;		line 116 in file "color.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  HSV             6   19[COMRAM] struct HSV_val
  5896 ;;  red             6   25[COMRAM] struct HSV_calib
  5897 ;;  green           6   31[COMRAM] struct HSV_calib
  5898 ;;  blue            6   37[COMRAM] struct HSV_calib
  5899 ;;  yellow          6   43[COMRAM] struct HSV_calib
  5900 ;;  pink            6   49[COMRAM] struct HSV_calib
  5901 ;;  orange          6   55[COMRAM] struct HSV_calib
  5902 ;;  lightblue       6   61[COMRAM] struct HSV_calib
  5903 ;;  white           6   67[COMRAM] struct HSV_calib
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  color           1   73[COMRAM] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      unsigned char 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5915 ;;      Params:        54       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;      Totals:        55      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;Total ram usage:       68 bytes
  5920 ;; Hardware stack levels used: 1
  5921 ;; Hardware stack levels required when called: 7
  5922 ;; This function calls:
  5923 ;;		_max
  5924 ;;		_min
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text12
  5931   002F5C                     __ptext12:
  5932                           	callstack 0
  5933   002F5C                     _color_detect:
  5934                           	callstack 23
  5935   002F5C                     
  5936                           ;color.c: 116: unsigned char color_detect(HSV_val HSV, HSV_calib red, HSV_calib green, H
      +                          SV_calib blue, HSV_calib yellow, HSV_calib pink, HSV_calib orange, HSV_calib lightblue, 
      +                          HSV_calib white);color.c: 117: {;color.c: 118:     unsigned char color=9;
  5937   002F5C  0E09               	movlw	9
  5938   002F5E  6E4A               	movwf	color_detect@color^0,c
  5939   002F60                     
  5940                           ;color.c: 121:     if (min(green.H,lightblue.H)-2000 < HSV.H && HSV.H < max(green.H,ligh
      +                          tblue.H)+2000) {
  5941   002F60  C020  F010         	movff	color_detect@green,min@a
  5942   002F64  C021  F011         	movff	color_detect@green+1,min@a+1
  5943   002F68  C03E  F012         	movff	color_detect@lightblue,min@b
  5944   002F6C  C03F  F013         	movff	color_detect@lightblue+1,min@b+1
  5945   002F70  EC65  F025         	call	_min	;wreg free
  5946   002F74  0E30               	movlw	48
  5947   002F76  2410               	addwf	?_min^0,w,c
  5948   002F78  0100               	movlb	0	; () banked
  5949   002F7A  6FD8               	movwf	??_color_detect& (0+255),b
  5950   002F7C  0EF8               	movlw	248
  5951   002F7E  2011               	addwfc	(?_min+1)^0,w,c
  5952   002F80  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  5953   002F82  5014               	movf	color_detect@HSV^0,w,c
  5954   002F84  5DD8               	subwf	??_color_detect& (0+255),w,b
  5955   002F86  5015               	movf	(color_detect@HSV+1)^0,w,c
  5956   002F88  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  5957   002F8A  B0D8               	btfsc	status,0,c
  5958   002F8C  EFCA  F017         	goto	u4471
  5959   002F90  EFCC  F017         	goto	u4470
  5960   002F94                     u4471:
  5961   002F94  EF01  F018         	goto	l5441
  5962   002F98                     u4470:
  5963   002F98                     
  5964                           ; BSR set to: 0
  5965   002F98  C020  F010         	movff	color_detect@green,max@a
  5966   002F9C  C021  F011         	movff	color_detect@green+1,max@a+1
  5967   002FA0  C03E  F012         	movff	color_detect@lightblue,max@b
  5968   002FA4  C03F  F013         	movff	color_detect@lightblue+1,max@b+1
  5969   002FA8  EC7B  F025         	call	_max	;wreg free
  5970   002FAC  0ED0               	movlw	208
  5971   002FAE  2410               	addwf	?_max^0,w,c
  5972   002FB0  0100               	movlb	0	; () banked
  5973   002FB2  6FD8               	movwf	??_color_detect& (0+255),b
  5974   002FB4  0E07               	movlw	7
  5975   002FB6  2011               	addwfc	(?_max+1)^0,w,c
  5976   002FB8  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  5977   002FBA  51D8               	movf	??_color_detect& (0+255),w,b
  5978   002FBC  5C14               	subwf	color_detect@HSV^0,w,c
  5979   002FBE  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  5980   002FC0  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  5981   002FC2  B0D8               	btfsc	status,0,c
  5982   002FC4  EFE6  F017         	goto	u4481
  5983   002FC8  EFE8  F017         	goto	u4480
  5984   002FCC                     u4481:
  5985   002FCC  EF01  F018         	goto	l5441
  5986   002FD0                     u4480:
  5987   002FD0                     
  5988                           ; BSR set to: 0
  5989                           ;color.c: 122:         if (HSV.S > lightblue.S + 1000){color = 2;}
  5990   002FD0  0EE8               	movlw	232
  5991   002FD2  2440               	addwf	(color_detect@lightblue+2)^0,w,c
  5992   002FD4  6FD8               	movwf	??_color_detect& (0+255),b
  5993   002FD6  0E03               	movlw	3
  5994   002FD8  2041               	addwfc	(color_detect@lightblue+3)^0,w,c
  5995   002FDA  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  5996   002FDC  5016               	movf	(color_detect@HSV+2)^0,w,c
  5997   002FDE  5DD8               	subwf	??_color_detect& (0+255),w,b
  5998   002FE0  5017               	movf	(color_detect@HSV+3)^0,w,c
  5999   002FE2  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6000   002FE4  B0D8               	btfsc	status,0,c
  6001   002FE6  EFF7  F017         	goto	u4491
  6002   002FEA  EFF9  F017         	goto	u4490
  6003   002FEE                     u4491:
  6004   002FEE  EFFD  F017         	goto	l5439
  6005   002FF2                     u4490:
  6006   002FF2                     
  6007                           ; BSR set to: 0
  6008   002FF2  0E02               	movlw	2
  6009   002FF4  6E4A               	movwf	color_detect@color^0,c
  6010   002FF6  EFD8  F018         	goto	l5469
  6011   002FFA                     l5439:
  6012                           
  6013                           ; BSR set to: 0
  6014   002FFA  0E07               	movlw	7
  6015   002FFC  6E4A               	movwf	color_detect@color^0,c
  6016   002FFE  EFD8  F018         	goto	l5469
  6017   003002                     l5441:
  6018                           
  6019                           ; BSR set to: 0
  6020   003002  0E48               	movlw	72
  6021   003004  2426               	addwf	color_detect@blue^0,w,c
  6022   003006  6FD8               	movwf	??_color_detect& (0+255),b
  6023   003008  0EF4               	movlw	244
  6024   00300A  2027               	addwfc	(color_detect@blue+1)^0,w,c
  6025   00300C  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6026   00300E  5014               	movf	color_detect@HSV^0,w,c
  6027   003010  5DD8               	subwf	??_color_detect& (0+255),w,b
  6028   003012  5015               	movf	(color_detect@HSV+1)^0,w,c
  6029   003014  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6030   003016  B0D8               	btfsc	status,0,c
  6031   003018  EF10  F018         	goto	u4501
  6032   00301C  EF12  F018         	goto	u4500
  6033   003020                     u4501:
  6034   003020  EF27  F018         	goto	l5447
  6035   003024                     u4500:
  6036   003024                     
  6037                           ; BSR set to: 0
  6038   003024  0EB8               	movlw	184
  6039   003026  2426               	addwf	color_detect@blue^0,w,c
  6040   003028  6FD8               	movwf	??_color_detect& (0+255),b
  6041   00302A  0E0B               	movlw	11
  6042   00302C  2027               	addwfc	(color_detect@blue+1)^0,w,c
  6043   00302E  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6044   003030  51D8               	movf	??_color_detect& (0+255),w,b
  6045   003032  5C14               	subwf	color_detect@HSV^0,w,c
  6046   003034  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6047   003036  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6048   003038  B0D8               	btfsc	status,0,c
  6049   00303A  EF21  F018         	goto	u4511
  6050   00303E  EF23  F018         	goto	u4510
  6051   003042                     u4511:
  6052   003042  EF27  F018         	goto	l5447
  6053   003046                     u4510:
  6054   003046                     
  6055                           ; BSR set to: 0
  6056   003046  0E03               	movlw	3
  6057   003048  6E4A               	movwf	color_detect@color^0,c
  6058   00304A  EFD8  F018         	goto	l5469
  6059   00304E                     l5447:
  6060                           
  6061                           ; BSR set to: 0
  6062   00304E  C02C  F010         	movff	color_detect@yellow,min@a
  6063   003052  C02D  F011         	movff	color_detect@yellow+1,min@a+1
  6064   003056  C032  F012         	movff	color_detect@pink,min@b
  6065   00305A  C033  F013         	movff	color_detect@pink+1,min@b+1
  6066   00305E  EC65  F025         	call	_min	;wreg free
  6067   003062  0E18               	movlw	24
  6068   003064  2410               	addwf	?_min^0,w,c
  6069   003066  0100               	movlb	0	; () banked
  6070   003068  6FD8               	movwf	??_color_detect& (0+255),b
  6071   00306A  0EFC               	movlw	252
  6072   00306C  2011               	addwfc	(?_min+1)^0,w,c
  6073   00306E  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6074   003070  5014               	movf	color_detect@HSV^0,w,c
  6075   003072  5DD8               	subwf	??_color_detect& (0+255),w,b
  6076   003074  5015               	movf	(color_detect@HSV+1)^0,w,c
  6077   003076  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6078   003078  B0D8               	btfsc	status,0,c
  6079   00307A  EF41  F018         	goto	u4521
  6080   00307E  EF43  F018         	goto	u4520
  6081   003082                     u4521:
  6082   003082  EFB4  F018         	goto	l5463
  6083   003086                     u4520:
  6084   003086                     
  6085                           ; BSR set to: 0
  6086   003086  C02C  F010         	movff	color_detect@yellow,max@a
  6087   00308A  C02D  F011         	movff	color_detect@yellow+1,max@a+1
  6088   00308E  C032  F012         	movff	color_detect@pink,max@b
  6089   003092  C033  F013         	movff	color_detect@pink+1,max@b+1
  6090   003096  EC7B  F025         	call	_max	;wreg free
  6091   00309A  0EE8               	movlw	232
  6092   00309C  2410               	addwf	?_max^0,w,c
  6093   00309E  0100               	movlb	0	; () banked
  6094   0030A0  6FD8               	movwf	??_color_detect& (0+255),b
  6095   0030A2  0E03               	movlw	3
  6096   0030A4  2011               	addwfc	(?_max+1)^0,w,c
  6097   0030A6  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6098   0030A8  51D8               	movf	??_color_detect& (0+255),w,b
  6099   0030AA  5C14               	subwf	color_detect@HSV^0,w,c
  6100   0030AC  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6101   0030AE  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6102   0030B0  B0D8               	btfsc	status,0,c
  6103   0030B2  EF5D  F018         	goto	u4531
  6104   0030B6  EF5F  F018         	goto	u4530
  6105   0030BA                     u4531:
  6106   0030BA  EFB4  F018         	goto	l5463
  6107   0030BE                     u4530:
  6108   0030BE                     
  6109                           ; BSR set to: 0
  6110                           ;color.c: 131:         if (HSV.H * 2 - HSV.S < HSV.H + 500 && HSV.H * 2 - HSV.S > HSV.H 
      +                          - 500) {color = 8;}
  6111   0030BE  0EF4               	movlw	244
  6112   0030C0  2414               	addwf	color_detect@HSV^0,w,c
  6113   0030C2  6FD8               	movwf	??_color_detect& (0+255),b
  6114   0030C4  0E01               	movlw	1
  6115   0030C6  2015               	addwfc	(color_detect@HSV+1)^0,w,c
  6116   0030C8  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6117   0030CA  C014  F0DA         	movff	color_detect@HSV,??_color_detect+2
  6118   0030CE  C015  F0DB         	movff	color_detect@HSV+1,??_color_detect+3
  6119   0030D2  90D8               	bcf	status,0,c
  6120   0030D4  37DA               	rlcf	(??_color_detect+2)& (0+255),f,b
  6121   0030D6  37DB               	rlcf	(??_color_detect+3)& (0+255),f,b
  6122   0030D8  5016               	movf	(color_detect@HSV+2)^0,w,c
  6123   0030DA  5FDA               	subwf	(??_color_detect+2)& (0+255),f,b
  6124   0030DC  5017               	movf	(color_detect@HSV+3)^0,w,c
  6125   0030DE  5BDB               	subwfb	(??_color_detect+3)& (0+255),f,b
  6126   0030E0  51D8               	movf	??_color_detect& (0+255),w,b
  6127   0030E2  5DDA               	subwf	(??_color_detect+2)& (0+255),w,b
  6128   0030E4  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6129   0030E6  59DB               	subwfb	(??_color_detect+3)& (0+255),w,b
  6130   0030E8  B0D8               	btfsc	status,0,c
  6131   0030EA  EF79  F018         	goto	u4541
  6132   0030EE  EF7B  F018         	goto	u4540
  6133   0030F2                     u4541:
  6134   0030F2  EF9B  F018         	goto	l5457
  6135   0030F6                     u4540:
  6136   0030F6                     
  6137                           ; BSR set to: 0
  6138   0030F6  C014  F0D8         	movff	color_detect@HSV,??_color_detect
  6139   0030FA  C015  F0D9         	movff	color_detect@HSV+1,??_color_detect+1
  6140   0030FE  90D8               	bcf	status,0,c
  6141   003100  37D8               	rlcf	??_color_detect& (0+255),f,b
  6142   003102  37D9               	rlcf	(??_color_detect+1)& (0+255),f,b
  6143   003104  5016               	movf	(color_detect@HSV+2)^0,w,c
  6144   003106  5FD8               	subwf	??_color_detect& (0+255),f,b
  6145   003108  5017               	movf	(color_detect@HSV+3)^0,w,c
  6146   00310A  5BD9               	subwfb	(??_color_detect+1)& (0+255),f,b
  6147   00310C  0E0C               	movlw	12
  6148   00310E  2414               	addwf	color_detect@HSV^0,w,c
  6149   003110  6FDA               	movwf	(??_color_detect+2)& (0+255),b
  6150   003112  0EFE               	movlw	254
  6151   003114  2015               	addwfc	(color_detect@HSV+1)^0,w,c
  6152   003116  6FDB               	movwf	(??_color_detect+3)& (0+255),b
  6153   003118  51D8               	movf	??_color_detect& (0+255),w,b
  6154   00311A  5DDA               	subwf	(??_color_detect+2)& (0+255),w,b
  6155   00311C  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6156   00311E  59DB               	subwfb	(??_color_detect+3)& (0+255),w,b
  6157   003120  B0D8               	btfsc	status,0,c
  6158   003122  EF95  F018         	goto	u4551
  6159   003126  EF97  F018         	goto	u4550
  6160   00312A                     u4551:
  6161   00312A  EF9B  F018         	goto	l5457
  6162   00312E                     u4550:
  6163   00312E                     
  6164                           ; BSR set to: 0
  6165   00312E  0E08               	movlw	8
  6166   003130  6E4A               	movwf	color_detect@color^0,c
  6167   003132  EFD8  F018         	goto	l5469
  6168   003136                     l5457:
  6169                           
  6170                           ; BSR set to: 0
  6171   003136  0EF4               	movlw	244
  6172   003138  2434               	addwf	(color_detect@pink+2)^0,w,c
  6173   00313A  6FD8               	movwf	??_color_detect& (0+255),b
  6174   00313C  0E01               	movlw	1
  6175   00313E  2035               	addwfc	(color_detect@pink+3)^0,w,c
  6176   003140  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6177   003142  5016               	movf	(color_detect@HSV+2)^0,w,c
  6178   003144  5DD8               	subwf	??_color_detect& (0+255),w,b
  6179   003146  5017               	movf	(color_detect@HSV+3)^0,w,c
  6180   003148  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6181   00314A  B0D8               	btfsc	status,0,c
  6182   00314C  EFAA  F018         	goto	u4561
  6183   003150  EFAC  F018         	goto	u4560
  6184   003154                     u4561:
  6185   003154  EFB0  F018         	goto	l5461
  6186   003158                     u4560:
  6187   003158                     
  6188                           ; BSR set to: 0
  6189   003158  0E04               	movlw	4
  6190   00315A  6E4A               	movwf	color_detect@color^0,c
  6191   00315C  EFD8  F018         	goto	l5469
  6192   003160                     l5461:
  6193                           
  6194                           ; BSR set to: 0
  6195   003160  0E05               	movlw	5
  6196   003162  6E4A               	movwf	color_detect@color^0,c
  6197   003164  EFD8  F018         	goto	l5469
  6198   003168                     l5463:
  6199                           
  6200                           ; BSR set to: 0
  6201   003168  0E0C               	movlw	12
  6202   00316A  2438               	addwf	color_detect@orange^0,w,c
  6203   00316C  6FD8               	movwf	??_color_detect& (0+255),b
  6204   00316E  0EFE               	movlw	254
  6205   003170  2039               	addwfc	(color_detect@orange+1)^0,w,c
  6206   003172  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6207   003174  5014               	movf	color_detect@HSV^0,w,c
  6208   003176  5DD8               	subwf	??_color_detect& (0+255),w,b
  6209   003178  5015               	movf	(color_detect@HSV+1)^0,w,c
  6210   00317A  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6211   00317C  B0D8               	btfsc	status,0,c
  6212   00317E  EFC3  F018         	goto	u4571
  6213   003182  EFC5  F018         	goto	u4570
  6214   003186                     u4571:
  6215   003186  EFD8  F018         	goto	l5469
  6216   00318A                     u4570:
  6217   00318A                     
  6218                           ; BSR set to: 0
  6219   00318A  0EF4               	movlw	244
  6220   00318C  2438               	addwf	color_detect@orange^0,w,c
  6221   00318E  6FD8               	movwf	??_color_detect& (0+255),b
  6222   003190  0E01               	movlw	1
  6223   003192  2039               	addwfc	(color_detect@orange+1)^0,w,c
  6224   003194  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6225   003196  51D8               	movf	??_color_detect& (0+255),w,b
  6226   003198  5C14               	subwf	color_detect@HSV^0,w,c
  6227   00319A  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6228   00319C  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6229   00319E  B0D8               	btfsc	status,0,c
  6230   0031A0  EFD4  F018         	goto	u4581
  6231   0031A4  EFD6  F018         	goto	u4580
  6232   0031A8                     u4581:
  6233   0031A8  EFD8  F018         	goto	l5469
  6234   0031AC                     u4580:
  6235   0031AC                     
  6236                           ; BSR set to: 0
  6237   0031AC  0E06               	movlw	6
  6238   0031AE  6E4A               	movwf	color_detect@color^0,c
  6239   0031B0                     l5469:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;color.c: 140:     if (red.H > 30000){
  6243   0031B0  0E31               	movlw	49
  6244   0031B2  5C1A               	subwf	color_detect@red^0,w,c
  6245   0031B4  0E75               	movlw	117
  6246   0031B6  581B               	subwfb	(color_detect@red+1)^0,w,c
  6247   0031B8  A0D8               	btfss	status,0,c
  6248   0031BA  EFE1  F018         	goto	u4591
  6249   0031BE  EFE3  F018         	goto	u4590
  6250   0031C2                     u4591:
  6251   0031C2  EF37  F019         	goto	l5481
  6252   0031C6                     u4590:
  6253   0031C6                     
  6254                           ; BSR set to: 0
  6255                           ;color.c: 141:         if(((red.H)-1000 < HSV.H && HSV.H < 36000) || (0 < HSV.H && HSV.H
      +                           < 1000 + red.H -36000)) {color = 1;}
  6256   0031C6  0E18               	movlw	24
  6257   0031C8  241A               	addwf	color_detect@red^0,w,c
  6258   0031CA  6FD8               	movwf	??_color_detect& (0+255),b
  6259   0031CC  0EFC               	movlw	252
  6260   0031CE  201B               	addwfc	(color_detect@red+1)^0,w,c
  6261   0031D0  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6262   0031D2  5014               	movf	color_detect@HSV^0,w,c
  6263   0031D4  5DD8               	subwf	??_color_detect& (0+255),w,b
  6264   0031D6  5015               	movf	(color_detect@HSV+1)^0,w,c
  6265   0031D8  59D9               	subwfb	(??_color_detect+1)& (0+255),w,b
  6266   0031DA  B0D8               	btfsc	status,0,c
  6267   0031DC  EFF2  F018         	goto	u4601
  6268   0031E0  EFF4  F018         	goto	u4600
  6269   0031E4                     u4601:
  6270   0031E4  EFFF  F018         	goto	l5475
  6271   0031E8                     u4600:
  6272   0031E8                     
  6273                           ; BSR set to: 0
  6274   0031E8  0EA0               	movlw	160
  6275   0031EA  5C14               	subwf	color_detect@HSV^0,w,c
  6276   0031EC  0E8C               	movlw	140
  6277   0031EE  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6278   0031F0  A0D8               	btfss	status,0,c
  6279   0031F2  EFFD  F018         	goto	u4611
  6280   0031F6  EFFF  F018         	goto	u4610
  6281   0031FA                     u4611:
  6282   0031FA  EF35  F019         	goto	l5479
  6283   0031FE                     u4610:
  6284   0031FE                     l5475:
  6285                           
  6286                           ; BSR set to: 0
  6287   0031FE  5014               	movf	color_detect@HSV^0,w,c
  6288   003200  1015               	iorwf	(color_detect@HSV+1)^0,w,c
  6289   003202  B4D8               	btfsc	status,2,c
  6290   003204  EF06  F019         	goto	u4621
  6291   003208  EF08  F019         	goto	u4620
  6292   00320C                     u4621:
  6293   00320C  EF37  F019         	goto	l5481
  6294   003210                     u4620:
  6295   003210                     
  6296                           ; BSR set to: 0
  6297   003210  0EE8               	movlw	232
  6298   003212  241A               	addwf	color_detect@red^0,w,c
  6299   003214  6FD8               	movwf	??_color_detect& (0+255),b
  6300   003216  0E03               	movlw	3
  6301   003218  201B               	addwfc	(color_detect@red+1)^0,w,c
  6302   00321A  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6303   00321C  6BDA               	clrf	(??_color_detect+2)& (0+255),b
  6304   00321E  6BDB               	clrf	(??_color_detect+3)& (0+255),b
  6305   003220  0E60               	movlw	96
  6306   003222  25D8               	addwf	??_color_detect& (0+255),w,b
  6307   003224  6FDC               	movwf	(??_color_detect+4)& (0+255),b
  6308   003226  0E73               	movlw	115
  6309   003228  21D9               	addwfc	(??_color_detect+1)& (0+255),w,b
  6310   00322A  6FDD               	movwf	(??_color_detect+5)& (0+255),b
  6311   00322C  0EFF               	movlw	255
  6312   00322E  21DA               	addwfc	(??_color_detect+2)& (0+255),w,b
  6313   003230  6FDE               	movwf	(??_color_detect+6)& (0+255),b
  6314   003232  0EFF               	movlw	255
  6315   003234  21DB               	addwfc	(??_color_detect+3)& (0+255),w,b
  6316   003236  6FDF               	movwf	(??_color_detect+7)& (0+255),b
  6317   003238  5014               	movf	color_detect@HSV^0,w,c
  6318   00323A  6FE0               	movwf	(??_color_detect+8)& (0+255),b
  6319   00323C  5015               	movf	(color_detect@HSV+1)^0,w,c
  6320   00323E  6FE1               	movwf	(??_color_detect+9)& (0+255),b
  6321   003240  6BE2               	clrf	(??_color_detect+10)& (0+255),b
  6322   003242  6BE3               	clrf	(??_color_detect+11)& (0+255),b
  6323   003244  51DC               	movf	(??_color_detect+4)& (0+255),w,b
  6324   003246  5DE0               	subwf	(??_color_detect+8)& (0+255),w,b
  6325   003248  51DD               	movf	(??_color_detect+5)& (0+255),w,b
  6326   00324A  59E1               	subwfb	(??_color_detect+9)& (0+255),w,b
  6327   00324C  51DE               	movf	(??_color_detect+6)& (0+255),w,b
  6328   00324E  59E2               	subwfb	(??_color_detect+10)& (0+255),w,b
  6329   003250  51E3               	movf	(??_color_detect+11)& (0+255),w,b
  6330   003252  0A80               	xorlw	128
  6331   003254  6FE4               	movwf	(??_color_detect+12)& (0+255),b
  6332   003256  51DF               	movf	(??_color_detect+7)& (0+255),w,b
  6333   003258  0A80               	xorlw	128
  6334   00325A  59E4               	subwfb	(??_color_detect+12)& (0+255),w,b
  6335   00325C  B0D8               	btfsc	status,0,c
  6336   00325E  EF33  F019         	goto	u4631
  6337   003262  EF35  F019         	goto	u4630
  6338   003266                     u4631:
  6339   003266  EF37  F019         	goto	l5481
  6340   00326A                     u4630:
  6341   00326A                     l5479:
  6342                           
  6343                           ; BSR set to: 0
  6344   00326A  0E01               	movlw	1
  6345   00326C  6E4A               	movwf	color_detect@color^0,c
  6346   00326E                     l5481:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;color.c: 144:     if (red.H < 10000){
  6350   00326E  0E10               	movlw	16
  6351   003270  5C1A               	subwf	color_detect@red^0,w,c
  6352   003272  0E27               	movlw	39
  6353   003274  581B               	subwfb	(color_detect@red+1)^0,w,c
  6354   003276  B0D8               	btfsc	status,0,c
  6355   003278  EF40  F019         	goto	u4641
  6356   00327C  EF42  F019         	goto	u4640
  6357   003280                     u4641:
  6358   003280  EF94  F019         	goto	l173
  6359   003284                     u4640:
  6360   003284                     
  6361                           ; BSR set to: 0
  6362                           ;color.c: 145:         if((36000 - 1000 + (red.H) < HSV.H && HSV.H < 36000) || (0 < HSV.
      +                          H && HSV.H < red.H + 1000)) {color = 1;}
  6363   003284  5014               	movf	color_detect@HSV^0,w,c
  6364   003286  6FD8               	movwf	??_color_detect& (0+255),b
  6365   003288  5015               	movf	(color_detect@HSV+1)^0,w,c
  6366   00328A  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6367   00328C  6BDA               	clrf	(??_color_detect+2)& (0+255),b
  6368   00328E  6BDB               	clrf	(??_color_detect+3)& (0+255),b
  6369   003290  501A               	movf	color_detect@red^0,w,c
  6370   003292  6FDC               	movwf	(??_color_detect+4)& (0+255),b
  6371   003294  501B               	movf	(color_detect@red+1)^0,w,c
  6372   003296  6FDD               	movwf	(??_color_detect+5)& (0+255),b
  6373   003298  6BDE               	clrf	(??_color_detect+6)& (0+255),b
  6374   00329A  6BDF               	clrf	(??_color_detect+7)& (0+255),b
  6375   00329C  0EB8               	movlw	184
  6376   00329E  25DC               	addwf	(??_color_detect+4)& (0+255),w,b
  6377   0032A0  6FE0               	movwf	(??_color_detect+8)& (0+255),b
  6378   0032A2  0E88               	movlw	136
  6379   0032A4  21DD               	addwfc	(??_color_detect+5)& (0+255),w,b
  6380   0032A6  6FE1               	movwf	(??_color_detect+9)& (0+255),b
  6381   0032A8  0E00               	movlw	0
  6382   0032AA  21DE               	addwfc	(??_color_detect+6)& (0+255),w,b
  6383   0032AC  6FE2               	movwf	(??_color_detect+10)& (0+255),b
  6384   0032AE  0E00               	movlw	0
  6385   0032B0  21DF               	addwfc	(??_color_detect+7)& (0+255),w,b
  6386   0032B2  6FE3               	movwf	(??_color_detect+11)& (0+255),b
  6387   0032B4  51D8               	movf	??_color_detect& (0+255),w,b
  6388   0032B6  5DE0               	subwf	(??_color_detect+8)& (0+255),w,b
  6389   0032B8  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6390   0032BA  59E1               	subwfb	(??_color_detect+9)& (0+255),w,b
  6391   0032BC  51DA               	movf	(??_color_detect+2)& (0+255),w,b
  6392   0032BE  59E2               	subwfb	(??_color_detect+10)& (0+255),w,b
  6393   0032C0  51E3               	movf	(??_color_detect+11)& (0+255),w,b
  6394   0032C2  0A80               	xorlw	128
  6395   0032C4  6FE4               	movwf	(??_color_detect+12)& (0+255),b
  6396   0032C6  51DB               	movf	(??_color_detect+3)& (0+255),w,b
  6397   0032C8  0A80               	xorlw	128
  6398   0032CA  59E4               	subwfb	(??_color_detect+12)& (0+255),w,b
  6399   0032CC  B0D8               	btfsc	status,0,c
  6400   0032CE  EF6B  F019         	goto	u4651
  6401   0032D2  EF6D  F019         	goto	u4650
  6402   0032D6                     u4651:
  6403   0032D6  EF78  F019         	goto	l5487
  6404   0032DA                     u4650:
  6405   0032DA                     
  6406                           ; BSR set to: 0
  6407   0032DA  0EA0               	movlw	160
  6408   0032DC  5C14               	subwf	color_detect@HSV^0,w,c
  6409   0032DE  0E8C               	movlw	140
  6410   0032E0  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6411   0032E2  A0D8               	btfss	status,0,c
  6412   0032E4  EF76  F019         	goto	u4661
  6413   0032E8  EF78  F019         	goto	u4660
  6414   0032EC                     u4661:
  6415   0032EC  EF92  F019         	goto	l5491
  6416   0032F0                     u4660:
  6417   0032F0                     l5487:
  6418                           
  6419                           ; BSR set to: 0
  6420   0032F0  5014               	movf	color_detect@HSV^0,w,c
  6421   0032F2  1015               	iorwf	(color_detect@HSV+1)^0,w,c
  6422   0032F4  B4D8               	btfsc	status,2,c
  6423   0032F6  EF7F  F019         	goto	u4671
  6424   0032FA  EF81  F019         	goto	u4670
  6425   0032FE                     u4671:
  6426   0032FE  EF94  F019         	goto	l173
  6427   003302                     u4670:
  6428   003302                     
  6429                           ; BSR set to: 0
  6430   003302  0EE8               	movlw	232
  6431   003304  241A               	addwf	color_detect@red^0,w,c
  6432   003306  6FD8               	movwf	??_color_detect& (0+255),b
  6433   003308  0E03               	movlw	3
  6434   00330A  201B               	addwfc	(color_detect@red+1)^0,w,c
  6435   00330C  6FD9               	movwf	(??_color_detect+1)& (0+255),b
  6436   00330E  51D8               	movf	??_color_detect& (0+255),w,b
  6437   003310  5C14               	subwf	color_detect@HSV^0,w,c
  6438   003312  51D9               	movf	(??_color_detect+1)& (0+255),w,b
  6439   003314  5815               	subwfb	(color_detect@HSV+1)^0,w,c
  6440   003316  B0D8               	btfsc	status,0,c
  6441   003318  EF90  F019         	goto	u4681
  6442   00331C  EF92  F019         	goto	u4680
  6443   003320                     u4681:
  6444   003320  EF94  F019         	goto	l173
  6445   003324                     u4680:
  6446   003324                     l5491:
  6447                           
  6448                           ; BSR set to: 0
  6449   003324  0E01               	movlw	1
  6450   003326  6E4A               	movwf	color_detect@color^0,c
  6451   003328                     l173:
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;color.c: 148:     return color;
  6455   003328  504A               	movf	color_detect@color^0,w,c
  6456   00332A                     
  6457                           ; BSR set to: 0
  6458   00332A  0012               	return		;funcret
  6459   00332C                     __end_of_color_detect:
  6460                           	callstack 0
  6461                           
  6462 ;; *************** function _color_click_init *****************
  6463 ;; Defined at:
  6464 ;;		line 7 in file "color.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;Total ram usage:        1 bytes
  6483 ;; Hardware stack levels used: 1
  6484 ;; Hardware stack levels required when called: 10
  6485 ;; This function calls:
  6486 ;;		_I2C_2_Master_Init
  6487 ;;		_color_clear_init_interrupts
  6488 ;;		_color_writetoaddr
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text13
  6495   004A5C                     __ptext13:
  6496                           	callstack 0
  6497   004A5C                     _color_click_init:
  6498                           	callstack 20
  6499   004A5C                     
  6500                           ;color.c: 10:     I2C_2_Master_Init();
  6501   004A5C  EC91  F025         	call	_I2C_2_Master_Init	;wreg free
  6502   004A60                     
  6503                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  6504   004A60  0E01               	movlw	1
  6505   004A62  6E12               	movwf	color_writetoaddr@value^0,c
  6506   004A64  0E00               	movlw	0
  6507   004A66  EC18  F026         	call	_color_writetoaddr
  6508   004A6A                     
  6509                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6510   004A6A  0E3F               	movlw	63
  6511   004A6C  6E22               	movwf	??_color_click_init^0,c
  6512   004A6E  0E55               	movlw	85
  6513   004A70                     u5777:
  6514   004A70  2EE8               	decfsz	wreg,f,c
  6515   004A72  D7FE               	bra	u5777
  6516   004A74  2E22               	decfsz	??_color_click_init^0,f,c
  6517   004A76  D7FC               	bra	u5777
  6518   004A78  0000               	nop	
  6519   004A7A                     
  6520                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  6521   004A7A  0E03               	movlw	3
  6522   004A7C  6E12               	movwf	color_writetoaddr@value^0,c
  6523   004A7E  0E00               	movlw	0
  6524   004A80  EC18  F026         	call	_color_writetoaddr
  6525   004A84                     
  6526                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  6527   004A84  0ED5               	movlw	213
  6528   004A86  6E12               	movwf	color_writetoaddr@value^0,c
  6529   004A88  0E01               	movlw	1
  6530   004A8A  EC18  F026         	call	_color_writetoaddr
  6531   004A8E                     
  6532                           ;color.c: 23:     color_clear_init_interrupts();
  6533   004A8E  EC2B  F023         	call	_color_clear_init_interrupts	;wreg free
  6534   004A92  0012               	return		;funcret
  6535   004A94                     __end_of_color_click_init:
  6536                           	callstack 0
  6537                           
  6538 ;; *************** function _color_clear_init_interrupts *****************
  6539 ;; Defined at:
  6540 ;;		line 27 in file "color.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  low_threshol    2   31[COMRAM] unsigned int 
  6545 ;;  high_thresho    2   29[COMRAM] unsigned int 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6558 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6559 ;;Total ram usage:        5 bytes
  6560 ;; Hardware stack levels used: 1
  6561 ;; Hardware stack levels required when called: 9
  6562 ;; This function calls:
  6563 ;;		_I2C_2_Master_Start
  6564 ;;		_I2C_2_Master_Stop
  6565 ;;		_I2C_2_Master_Write
  6566 ;;		___lwdiv
  6567 ;;		_color_writetoaddr
  6568 ;; This function is called by:
  6569 ;;		_main
  6570 ;;		_color_click_init
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text14
  6575   004656                     __ptext14:
  6576                           	callstack 0
  6577   004656                     _color_clear_init_interrupts:
  6578                           	callstack 20
  6579   004656                     
  6580                           ;color.c: 29:     I2C_2_Master_Start();
  6581   004656  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  6582                           
  6583                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  6584   00465A  0E52               	movlw	82
  6585   00465C  EC6A  F026         	call	_I2C_2_Master_Write
  6586                           
  6587                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
  6588   004660  0EE6               	movlw	230
  6589   004662  EC6A  F026         	call	_I2C_2_Master_Write
  6590                           
  6591                           ;color.c: 32:     I2C_2_Master_Stop();
  6592   004666  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  6593                           
  6594                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/3);
  6595   00466A  C1D8  F016         	movff	_ambient,___lwdiv@dividend
  6596   00466E  C1D9  F017         	movff	_ambient+1,___lwdiv@dividend+1
  6597   004672  0E00               	movlw	0
  6598   004674  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  6599   004676  0E03               	movlw	3
  6600   004678  6E18               	movwf	___lwdiv@divisor^0,c
  6601   00467A  EC19  F024         	call	___lwdiv	;wreg free
  6602   00467E  0101               	movlb	1	; () banked
  6603   004680  51D8               	movf	_ambient& (0+255),w,b
  6604   004682  2416               	addwf	?___lwdiv^0,w,c
  6605   004684  6E1E               	movwf	color_clear_init_interrupts@high_threshold^0,c
  6606   004686  51D9               	movf	(_ambient+1)& (0+255),w,b
  6607   004688  2017               	addwfc	(?___lwdiv+1)^0,w,c
  6608   00468A  6E1F               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  6609                           
  6610                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
  6611   00468C  C1D8  F016         	movff	_ambient,___lwdiv@dividend
  6612   004690  C1D9  F017         	movff	_ambient+1,___lwdiv@dividend+1
  6613   004694  0E00               	movlw	0
  6614   004696  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  6615   004698  0E14               	movlw	20
  6616   00469A  6E18               	movwf	___lwdiv@divisor^0,c
  6617   00469C  EC19  F024         	call	___lwdiv	;wreg free
  6618   0046A0  5016               	movf	?___lwdiv^0,w,c
  6619   0046A2  0101               	movlb	1	; () banked
  6620   0046A4  5DD8               	subwf	_ambient& (0+255),w,b
  6621   0046A6  6E20               	movwf	color_clear_init_interrupts@low_threshold^0,c
  6622   0046A8  5017               	movf	(?___lwdiv+1)^0,w,c
  6623   0046AA  59D9               	subwfb	(_ambient+1)& (0+255),w,b
  6624   0046AC  6E21               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  6625                           
  6626                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
  6627   0046AE  0E13               	movlw	19
  6628   0046B0  6E12               	movwf	color_writetoaddr@value^0,c
  6629   0046B2  0E00               	movlw	0
  6630   0046B4  EC18  F026         	call	_color_writetoaddr
  6631   0046B8                     
  6632                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6633   0046B8  0E3F               	movlw	63
  6634   0046BA  6E1D               	movwf	??_color_clear_init_interrupts^0,c
  6635   0046BC  0E55               	movlw	85
  6636   0046BE                     u5787:
  6637   0046BE  2EE8               	decfsz	wreg,f,c
  6638   0046C0  D7FE               	bra	u5787
  6639   0046C2  2E1D               	decfsz	??_color_clear_init_interrupts^0,f,c
  6640   0046C4  D7FC               	bra	u5787
  6641   0046C6  0000               	nop	
  6642   0046C8                     
  6643                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
  6644   0046C8  501F               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  6645   0046CA  6E12               	movwf	color_writetoaddr@value^0,c
  6646   0046CC  0E07               	movlw	7
  6647   0046CE  EC18  F026         	call	_color_writetoaddr
  6648   0046D2                     
  6649                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  6650   0046D2  C01E  F012         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  6651   0046D6  0E06               	movlw	6
  6652   0046D8  EC18  F026         	call	_color_writetoaddr
  6653   0046DC                     
  6654                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
  6655   0046DC  5021               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  6656   0046DE  6E12               	movwf	color_writetoaddr@value^0,c
  6657   0046E0  0E05               	movlw	5
  6658   0046E2  EC18  F026         	call	_color_writetoaddr
  6659   0046E6                     
  6660                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  6661   0046E6  C020  F012         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  6662   0046EA  0E04               	movlw	4
  6663   0046EC  EC18  F026         	call	_color_writetoaddr
  6664   0046F0                     
  6665                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
  6666   0046F0  0E03               	movlw	3
  6667   0046F2  6E12               	movwf	color_writetoaddr@value^0,c
  6668   0046F4  0E0C               	movlw	12
  6669   0046F6  EC18  F026         	call	_color_writetoaddr
  6670   0046FA  0012               	return		;funcret
  6671   0046FC                     __end_of_color_clear_init_interrupts:
  6672                           	callstack 0
  6673                           
  6674 ;; *************** function _color_writetoaddr *****************
  6675 ;; Defined at:
  6676 ;;		line 53 in file "color.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  address         1    wreg     unsigned char 
  6679 ;;  value           1   17[COMRAM] unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  address         1   18[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6691 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6695 ;;Total ram usage:        2 bytes
  6696 ;; Hardware stack levels used: 1
  6697 ;; Hardware stack levels required when called: 8
  6698 ;; This function calls:
  6699 ;;		_I2C_2_Master_Start
  6700 ;;		_I2C_2_Master_Stop
  6701 ;;		_I2C_2_Master_Write
  6702 ;; This function is called by:
  6703 ;;		_color_click_init
  6704 ;;		_color_clear_init_interrupts
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           	psect	text15
  6709   004C30                     __ptext15:
  6710                           	callstack 0
  6711   004C30                     _color_writetoaddr:
  6712                           	callstack 21
  6713                           
  6714                           ;incstack = 0
  6715                           ;color_writetoaddr@address stored from wreg
  6716   004C30  6E13               	movwf	color_writetoaddr@address^0,c
  6717   004C32                     
  6718                           ;color.c: 54:     I2C_2_Master_Start();
  6719   004C32  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  6720                           
  6721                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
  6722   004C36  0E52               	movlw	82
  6723   004C38  EC6A  F026         	call	_I2C_2_Master_Write
  6724                           
  6725                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
  6726   004C3C  5013               	movf	color_writetoaddr@address^0,w,c
  6727   004C3E  0980               	iorlw	128
  6728   004C40  EC6A  F026         	call	_I2C_2_Master_Write
  6729                           
  6730                           ;color.c: 57:     I2C_2_Master_Write(value);
  6731   004C44  5012               	movf	color_writetoaddr@value^0,w,c
  6732   004C46  EC6A  F026         	call	_I2C_2_Master_Write
  6733                           
  6734                           ;color.c: 58:     I2C_2_Master_Stop();
  6735   004C4A  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  6736   004C4E  0012               	return		;funcret
  6737   004C50                     __end_of_color_writetoaddr:
  6738                           	callstack 0
  6739                           
  6740 ;; *************** function _I2C_2_Master_Init *****************
  6741 ;; Defined at:
  6742 ;;		line 4 in file "i2c.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      void 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6760 ;;Total ram usage:        0 bytes
  6761 ;; Hardware stack levels used: 1
  6762 ;; Hardware stack levels required when called: 6
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		_color_click_init
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text16
  6771   004B22                     __ptext16:
  6772                           	callstack 0
  6773   004B22                     _I2C_2_Master_Init:
  6774                           	callstack 23
  6775   004B22                     
  6776                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6777   004B22  010E               	movlb	14	; () banked
  6778   004B24  51D9               	movf	217,w,b	;volatile
  6779   004B26  0BF0               	andlw	-16
  6780   004B28  0908               	iorlw	8
  6781   004B2A  6FD9               	movwf	217,b	;volatile
  6782   004B2C                     
  6783                           ; BSR set to: 14
  6784                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6785   004B2C  8BD9               	bsf	217,5,b	;volatile
  6786                           
  6787                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6788   004B2E  0E9F               	movlw	159
  6789   004B30  6FD6               	movwf	214,b	;volatile
  6790   004B32                     
  6791                           ; BSR set to: 14
  6792                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6793   004B32  8A84               	bsf	132,5,c	;volatile
  6794   004B34                     
  6795                           ; BSR set to: 14
  6796                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6797   004B34  8C84               	bsf	132,6,c	;volatile
  6798   004B36                     
  6799                           ; BSR set to: 14
  6800                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6801   004B36  9BA7               	bcf	167,5,b	;volatile
  6802   004B38                     
  6803                           ; BSR set to: 14
  6804                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6805   004B38  9DA7               	bcf	167,6,b	;volatile
  6806                           
  6807                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6808   004B3A  0E1D               	movlw	29
  6809   004B3C  6F1D               	movwf	29,b	;volatile
  6810                           
  6811                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6812   004B3E  0E1E               	movlw	30
  6813   004B40  6F1C               	movwf	28,b	;volatile
  6814                           
  6815                           ;i2c.c: 18:   RD5PPS=0x1C;
  6816   004B42  0E1C               	movlw	28
  6817   004B44  6F6F               	movwf	111,b	;volatile
  6818                           
  6819                           ;i2c.c: 19:   RD6PPS=0x1B;
  6820   004B46  0E1B               	movlw	27
  6821   004B48  6F70               	movwf	112,b	;volatile
  6822   004B4A                     
  6823                           ; BSR set to: 14
  6824   004B4A  0012               	return		;funcret
  6825   004B4C                     __end_of_I2C_2_Master_Init:
  6826                           	callstack 0
  6827                           
  6828 ;; *************** function _color_calibration *****************
  6829 ;; Defined at:
  6830 ;;		line 151 in file "color.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  RGBC            2   16[BANK0 ] PTR struct RGBC_val
  6833 ;;		 -> main@RGBC(8), 
  6834 ;;  HSV             2   18[BANK0 ] PTR struct HSV_val
  6835 ;;		 -> main@HSV(6), 
  6836 ;;  red             2   20[BANK0 ] PTR struct HSV_calib
  6837 ;;		 -> main@red(6), 
  6838 ;;  green           2   22[BANK0 ] PTR struct HSV_calib
  6839 ;;		 -> main@green(6), 
  6840 ;;  blue            2   24[BANK0 ] PTR struct HSV_calib
  6841 ;;		 -> main@blue(6), 
  6842 ;;  yellow          2   26[BANK0 ] PTR struct HSV_calib
  6843 ;;		 -> main@yellow(6), 
  6844 ;;  pink            2   28[BANK0 ] PTR struct HSV_calib
  6845 ;;		 -> main@pink(6), 
  6846 ;;  orange          2   30[BANK0 ] PTR struct HSV_calib
  6847 ;;		 -> main@orange(6), 
  6848 ;;  lightblue       2   32[BANK0 ] PTR struct HSV_calib
  6849 ;;		 -> main@lightblue(6), 
  6850 ;;  white           2   34[BANK0 ] PTR struct HSV_calib
  6851 ;;		 -> main@white(6), 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6863 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;      Totals:         2      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6867 ;;Total ram usage:       22 bytes
  6868 ;; Hardware stack levels used: 1
  6869 ;; Hardware stack levels required when called: 9
  6870 ;; This function calls:
  6871 ;;		_color_read
  6872 ;;		_rgb_2_hsv
  6873 ;;		_white_Light
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text17
  6880   001D96                     __ptext17:
  6881                           	callstack 0
  6882   001D96                     _color_calibration:
  6883                           	callstack 21
  6884   001D96                     
  6885                           ;color.c: 151: void color_calibration(RGBC_val *RGBC, HSV_val *HSV, HSV_calib *red, HSV_
      +                          calib *green, HSV_calib *blue, HSV_calib *yellow, HSV_calib *pink, HSV_calib *orange, HS
      +                          V_calib *lightblue, HSV_calib *white);color.c: 152: {;color.c: 153:     white_Light(1);
  6886   001D96  0E01               	movlw	1
  6887   001D98  ECF5  F025         	call	_white_Light
  6888   001D9C                     
  6889                           ;color.c: 154:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6890   001D9C  8680               	bsf	128,3,c	;volatile
  6891   001D9E  8E7C               	bsf	124,7,c	;volatile
  6892   001DA0                     l182:
  6893   001DA0  B48E               	btfsc	142,2,c	;volatile
  6894   001DA2  EFD5  F00E         	goto	u4151
  6895   001DA6  EFD7  F00E         	goto	u4150
  6896   001DAA                     u4151:
  6897   001DAA  EFD0  F00E         	goto	l182
  6898   001DAE                     u4150:
  6899   001DAE                     
  6900                           ;color.c: 158:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6901   001DAE  9680               	bcf	128,3,c	;volatile
  6902   001DB0  9E7C               	bcf	124,7,c	;volatile
  6903   001DB2                     
  6904                           ;color.c: 159:     color_read(RGBC);
  6905   001DB2  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6906   001DB6  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6907   001DBA  ECD5  F01C         	call	_color_read	;wreg free
  6908   001DBE                     
  6909                           ;color.c: 160:     rgb_2_hsv(*RGBC, HSV);
  6910   001DBE  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  6911   001DC2  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6912   001DC6  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  6913   001DCA  0E07               	movlw	7
  6914   001DCC                     u4161:
  6915   001DCC  CFDB FFEB          	movff	plusw2,plusw0
  6916   001DD0  06E8               	decf	wreg,f,c
  6917   001DD2  E2FC               	bc	u4161
  6918   001DD4  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  6919   001DD8  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  6920   001DDC  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  6921   001DE0                     
  6922                           ;color.c: 161:     red->H = HSV->H;
  6923   001DE0  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  6924   001DE4  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  6925   001DE8  C0EC  FFE1         	movff	color_calibration@red,fsr1l
  6926   001DEC  C0ED  FFE2         	movff	color_calibration@red+1,fsr1h
  6927   001DF0  CFDE FFE6          	movff	postinc2,postinc1
  6928   001DF4  CFDD FFE5          	movff	postdec2,postdec1
  6929   001DF8                     
  6930                           ;color.c: 162:     red->S = HSV->S;
  6931   001DF8  0100               	movlb	0	; () banked
  6932   001DFA  EE20 F002          	lfsr	2,2
  6933   001DFE  51EA               	movf	color_calibration@HSV& (0+255),w,b
  6934   001E00  26D9               	addwf	fsr2l,f,c
  6935   001E02  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6936   001E04  22DA               	addwfc	fsr2h,f,c
  6937   001E06  EE10 F002          	lfsr	1,2
  6938   001E0A  51EC               	movf	color_calibration@red& (0+255),w,b
  6939   001E0C  26E1               	addwf	fsr1l,f,c
  6940   001E0E  51ED               	movf	(color_calibration@red+1)& (0+255),w,b
  6941   001E10  22E2               	addwfc	fsr1h,f,c
  6942   001E12  CFDE FFE6          	movff	postinc2,postinc1
  6943   001E16  CFDD FFE5          	movff	postdec2,postdec1
  6944   001E1A                     
  6945                           ; BSR set to: 0
  6946                           ;color.c: 163:     red->V = HSV->V;
  6947   001E1A  EE20 F004          	lfsr	2,4
  6948   001E1E  51EA               	movf	color_calibration@HSV& (0+255),w,b
  6949   001E20  26D9               	addwf	fsr2l,f,c
  6950   001E22  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  6951   001E24  22DA               	addwfc	fsr2h,f,c
  6952   001E26  EE10 F004          	lfsr	1,4
  6953   001E2A  51EC               	movf	color_calibration@red& (0+255),w,b
  6954   001E2C  26E1               	addwf	fsr1l,f,c
  6955   001E2E  51ED               	movf	(color_calibration@red+1)& (0+255),w,b
  6956   001E30  22E2               	addwfc	fsr1h,f,c
  6957   001E32  CFDE FFE6          	movff	postinc2,postinc1
  6958   001E36  CFDD FFE5          	movff	postdec2,postdec1
  6959   001E3A                     
  6960                           ; BSR set to: 0
  6961                           ;color.c: 165:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6962   001E3A  0E29               	movlw	41
  6963   001E3C  6E3D               	movwf	(??_color_calibration+1)^0,c
  6964   001E3E  0E96               	movlw	150
  6965   001E40  6E3C               	movwf	??_color_calibration^0,c
  6966   001E42  0E7F               	movlw	127
  6967   001E44                     u5797:
  6968   001E44  2EE8               	decfsz	wreg,f,c
  6969   001E46  D7FE               	bra	u5797
  6970   001E48  2E3C               	decfsz	??_color_calibration^0,f,c
  6971   001E4A  D7FC               	bra	u5797
  6972   001E4C  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  6973   001E4E  D7FA               	bra	u5797
  6974   001E50  0000               	nop	
  6975   001E52                     
  6976                           ;color.c: 166:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  6977   001E52  8680               	bsf	128,3,c	;volatile
  6978   001E54  8E7C               	bsf	124,7,c	;volatile
  6979   001E56                     l185:
  6980   001E56  B48E               	btfsc	142,2,c	;volatile
  6981   001E58  EF30  F00F         	goto	u4171
  6982   001E5C  EF32  F00F         	goto	u4170
  6983   001E60                     u4171:
  6984   001E60  EF2B  F00F         	goto	l185
  6985   001E64                     u4170:
  6986   001E64                     
  6987                           ;color.c: 170:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  6988   001E64  9680               	bcf	128,3,c	;volatile
  6989   001E66  9E7C               	bcf	124,7,c	;volatile
  6990   001E68                     
  6991                           ;color.c: 171:     color_read(RGBC);
  6992   001E68  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  6993   001E6C  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  6994   001E70  ECD5  F01C         	call	_color_read	;wreg free
  6995   001E74                     
  6996                           ;color.c: 172:     rgb_2_hsv(*RGBC, HSV);
  6997   001E74  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  6998   001E78  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  6999   001E7C  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7000   001E80  0E07               	movlw	7
  7001   001E82                     u4181:
  7002   001E82  CFDB FFEB          	movff	plusw2,plusw0
  7003   001E86  06E8               	decf	wreg,f,c
  7004   001E88  E2FC               	bc	u4181
  7005   001E8A  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7006   001E8E  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7007   001E92  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7008   001E96                     
  7009                           ;color.c: 173:     green->H = HSV->H;
  7010   001E96  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7011   001E9A  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7012   001E9E  C0EE  FFE1         	movff	color_calibration@green,fsr1l
  7013   001EA2  C0EF  FFE2         	movff	color_calibration@green+1,fsr1h
  7014   001EA6  CFDE FFE6          	movff	postinc2,postinc1
  7015   001EAA  CFDD FFE5          	movff	postdec2,postdec1
  7016   001EAE                     
  7017                           ;color.c: 174:     green->S = HSV->S;
  7018   001EAE  0100               	movlb	0	; () banked
  7019   001EB0  EE20 F002          	lfsr	2,2
  7020   001EB4  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7021   001EB6  26D9               	addwf	fsr2l,f,c
  7022   001EB8  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7023   001EBA  22DA               	addwfc	fsr2h,f,c
  7024   001EBC  EE10 F002          	lfsr	1,2
  7025   001EC0  51EE               	movf	color_calibration@green& (0+255),w,b
  7026   001EC2  26E1               	addwf	fsr1l,f,c
  7027   001EC4  51EF               	movf	(color_calibration@green+1)& (0+255),w,b
  7028   001EC6  22E2               	addwfc	fsr1h,f,c
  7029   001EC8  CFDE FFE6          	movff	postinc2,postinc1
  7030   001ECC  CFDD FFE5          	movff	postdec2,postdec1
  7031   001ED0                     
  7032                           ; BSR set to: 0
  7033                           ;color.c: 175:     green->V = HSV->V;
  7034   001ED0  EE20 F004          	lfsr	2,4
  7035   001ED4  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7036   001ED6  26D9               	addwf	fsr2l,f,c
  7037   001ED8  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7038   001EDA  22DA               	addwfc	fsr2h,f,c
  7039   001EDC  EE10 F004          	lfsr	1,4
  7040   001EE0  51EE               	movf	color_calibration@green& (0+255),w,b
  7041   001EE2  26E1               	addwf	fsr1l,f,c
  7042   001EE4  51EF               	movf	(color_calibration@green+1)& (0+255),w,b
  7043   001EE6  22E2               	addwfc	fsr1h,f,c
  7044   001EE8  CFDE FFE6          	movff	postinc2,postinc1
  7045   001EEC  CFDD FFE5          	movff	postdec2,postdec1
  7046   001EF0                     
  7047                           ; BSR set to: 0
  7048                           ;color.c: 177:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7049   001EF0  0E29               	movlw	41
  7050   001EF2  6E3D               	movwf	(??_color_calibration+1)^0,c
  7051   001EF4  0E96               	movlw	150
  7052   001EF6  6E3C               	movwf	??_color_calibration^0,c
  7053   001EF8  0E7F               	movlw	127
  7054   001EFA                     u5807:
  7055   001EFA  2EE8               	decfsz	wreg,f,c
  7056   001EFC  D7FE               	bra	u5807
  7057   001EFE  2E3C               	decfsz	??_color_calibration^0,f,c
  7058   001F00  D7FC               	bra	u5807
  7059   001F02  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7060   001F04  D7FA               	bra	u5807
  7061   001F06  0000               	nop	
  7062   001F08                     
  7063                           ;color.c: 178:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7064   001F08  8680               	bsf	128,3,c	;volatile
  7065   001F0A  8E7C               	bsf	124,7,c	;volatile
  7066   001F0C                     l188:
  7067   001F0C  B48E               	btfsc	142,2,c	;volatile
  7068   001F0E  EF8B  F00F         	goto	u4191
  7069   001F12  EF8D  F00F         	goto	u4190
  7070   001F16                     u4191:
  7071   001F16  EF86  F00F         	goto	l188
  7072   001F1A                     u4190:
  7073   001F1A                     
  7074                           ;color.c: 182:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7075   001F1A  9680               	bcf	128,3,c	;volatile
  7076   001F1C  9E7C               	bcf	124,7,c	;volatile
  7077   001F1E                     
  7078                           ;color.c: 183:     color_read(RGBC);
  7079   001F1E  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7080   001F22  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7081   001F26  ECD5  F01C         	call	_color_read	;wreg free
  7082   001F2A                     
  7083                           ;color.c: 184:     rgb_2_hsv(*RGBC, HSV);
  7084   001F2A  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7085   001F2E  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7086   001F32  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7087   001F36  0E07               	movlw	7
  7088   001F38                     u4201:
  7089   001F38  CFDB FFEB          	movff	plusw2,plusw0
  7090   001F3C  06E8               	decf	wreg,f,c
  7091   001F3E  E2FC               	bc	u4201
  7092   001F40  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7093   001F44  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7094   001F48  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7095   001F4C                     
  7096                           ;color.c: 185:     blue->H = HSV->H;
  7097   001F4C  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7098   001F50  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7099   001F54  C0F0  FFE1         	movff	color_calibration@blue,fsr1l
  7100   001F58  C0F1  FFE2         	movff	color_calibration@blue+1,fsr1h
  7101   001F5C  CFDE FFE6          	movff	postinc2,postinc1
  7102   001F60  CFDD FFE5          	movff	postdec2,postdec1
  7103   001F64                     
  7104                           ;color.c: 186:     blue->S = HSV->S;
  7105   001F64  0100               	movlb	0	; () banked
  7106   001F66  EE20 F002          	lfsr	2,2
  7107   001F6A  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7108   001F6C  26D9               	addwf	fsr2l,f,c
  7109   001F6E  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7110   001F70  22DA               	addwfc	fsr2h,f,c
  7111   001F72  EE10 F002          	lfsr	1,2
  7112   001F76  51F0               	movf	color_calibration@blue& (0+255),w,b
  7113   001F78  26E1               	addwf	fsr1l,f,c
  7114   001F7A  51F1               	movf	(color_calibration@blue+1)& (0+255),w,b
  7115   001F7C  22E2               	addwfc	fsr1h,f,c
  7116   001F7E  CFDE FFE6          	movff	postinc2,postinc1
  7117   001F82  CFDD FFE5          	movff	postdec2,postdec1
  7118   001F86                     
  7119                           ; BSR set to: 0
  7120                           ;color.c: 187:     blue->V = HSV->V;
  7121   001F86  EE20 F004          	lfsr	2,4
  7122   001F8A  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7123   001F8C  26D9               	addwf	fsr2l,f,c
  7124   001F8E  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7125   001F90  22DA               	addwfc	fsr2h,f,c
  7126   001F92  EE10 F004          	lfsr	1,4
  7127   001F96  51F0               	movf	color_calibration@blue& (0+255),w,b
  7128   001F98  26E1               	addwf	fsr1l,f,c
  7129   001F9A  51F1               	movf	(color_calibration@blue+1)& (0+255),w,b
  7130   001F9C  22E2               	addwfc	fsr1h,f,c
  7131   001F9E  CFDE FFE6          	movff	postinc2,postinc1
  7132   001FA2  CFDD FFE5          	movff	postdec2,postdec1
  7133   001FA6                     
  7134                           ; BSR set to: 0
  7135                           ;color.c: 189:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7136   001FA6  0E29               	movlw	41
  7137   001FA8  6E3D               	movwf	(??_color_calibration+1)^0,c
  7138   001FAA  0E96               	movlw	150
  7139   001FAC  6E3C               	movwf	??_color_calibration^0,c
  7140   001FAE  0E7F               	movlw	127
  7141   001FB0                     u5817:
  7142   001FB0  2EE8               	decfsz	wreg,f,c
  7143   001FB2  D7FE               	bra	u5817
  7144   001FB4  2E3C               	decfsz	??_color_calibration^0,f,c
  7145   001FB6  D7FC               	bra	u5817
  7146   001FB8  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7147   001FBA  D7FA               	bra	u5817
  7148   001FBC  0000               	nop	
  7149   001FBE                     
  7150                           ;color.c: 190:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7151   001FBE  8680               	bsf	128,3,c	;volatile
  7152   001FC0  8E7C               	bsf	124,7,c	;volatile
  7153   001FC2                     l191:
  7154   001FC2  B48E               	btfsc	142,2,c	;volatile
  7155   001FC4  EFE6  F00F         	goto	u4211
  7156   001FC8  EFE8  F00F         	goto	u4210
  7157   001FCC                     u4211:
  7158   001FCC  EFE1  F00F         	goto	l191
  7159   001FD0                     u4210:
  7160   001FD0                     
  7161                           ;color.c: 194:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7162   001FD0  9680               	bcf	128,3,c	;volatile
  7163   001FD2  9E7C               	bcf	124,7,c	;volatile
  7164   001FD4                     
  7165                           ;color.c: 195:     color_read(RGBC);
  7166   001FD4  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7167   001FD8  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7168   001FDC  ECD5  F01C         	call	_color_read	;wreg free
  7169   001FE0                     
  7170                           ;color.c: 196:     rgb_2_hsv(*RGBC, HSV);
  7171   001FE0  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7172   001FE4  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7173   001FE8  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7174   001FEC  0E07               	movlw	7
  7175   001FEE                     u4221:
  7176   001FEE  CFDB FFEB          	movff	plusw2,plusw0
  7177   001FF2  06E8               	decf	wreg,f,c
  7178   001FF4  E2FC               	bc	u4221
  7179   001FF6  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7180   001FFA  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7181   001FFE  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7182   002002                     
  7183                           ;color.c: 197:     yellow->H = HSV->H;
  7184   002002  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7185   002006  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7186   00200A  C0F2  FFE1         	movff	color_calibration@yellow,fsr1l
  7187   00200E  C0F3  FFE2         	movff	color_calibration@yellow+1,fsr1h
  7188   002012  CFDE FFE6          	movff	postinc2,postinc1
  7189   002016  CFDD FFE5          	movff	postdec2,postdec1
  7190   00201A                     
  7191                           ;color.c: 198:     yellow->S = HSV->S;
  7192   00201A  0100               	movlb	0	; () banked
  7193   00201C  EE20 F002          	lfsr	2,2
  7194   002020  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7195   002022  26D9               	addwf	fsr2l,f,c
  7196   002024  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7197   002026  22DA               	addwfc	fsr2h,f,c
  7198   002028  EE10 F002          	lfsr	1,2
  7199   00202C  51F2               	movf	color_calibration@yellow& (0+255),w,b
  7200   00202E  26E1               	addwf	fsr1l,f,c
  7201   002030  51F3               	movf	(color_calibration@yellow+1)& (0+255),w,b
  7202   002032  22E2               	addwfc	fsr1h,f,c
  7203   002034  CFDE FFE6          	movff	postinc2,postinc1
  7204   002038  CFDD FFE5          	movff	postdec2,postdec1
  7205   00203C                     
  7206                           ; BSR set to: 0
  7207                           ;color.c: 199:     yellow->V = HSV->V;
  7208   00203C  EE20 F004          	lfsr	2,4
  7209   002040  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7210   002042  26D9               	addwf	fsr2l,f,c
  7211   002044  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7212   002046  22DA               	addwfc	fsr2h,f,c
  7213   002048  EE10 F004          	lfsr	1,4
  7214   00204C  51F2               	movf	color_calibration@yellow& (0+255),w,b
  7215   00204E  26E1               	addwf	fsr1l,f,c
  7216   002050  51F3               	movf	(color_calibration@yellow+1)& (0+255),w,b
  7217   002052  22E2               	addwfc	fsr1h,f,c
  7218   002054  CFDE FFE6          	movff	postinc2,postinc1
  7219   002058  CFDD FFE5          	movff	postdec2,postdec1
  7220   00205C                     
  7221                           ; BSR set to: 0
  7222                           ;color.c: 201:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7223   00205C  0E29               	movlw	41
  7224   00205E  6E3D               	movwf	(??_color_calibration+1)^0,c
  7225   002060  0E96               	movlw	150
  7226   002062  6E3C               	movwf	??_color_calibration^0,c
  7227   002064  0E7F               	movlw	127
  7228   002066                     u5827:
  7229   002066  2EE8               	decfsz	wreg,f,c
  7230   002068  D7FE               	bra	u5827
  7231   00206A  2E3C               	decfsz	??_color_calibration^0,f,c
  7232   00206C  D7FC               	bra	u5827
  7233   00206E  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7234   002070  D7FA               	bra	u5827
  7235   002072  0000               	nop	
  7236   002074                     
  7237                           ;color.c: 202:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7238   002074  8680               	bsf	128,3,c	;volatile
  7239   002076  8E7C               	bsf	124,7,c	;volatile
  7240   002078                     l194:
  7241   002078  B48E               	btfsc	142,2,c	;volatile
  7242   00207A  EF41  F010         	goto	u4231
  7243   00207E  EF43  F010         	goto	u4230
  7244   002082                     u4231:
  7245   002082  EF3C  F010         	goto	l194
  7246   002086                     u4230:
  7247   002086                     
  7248                           ;color.c: 206:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7249   002086  9680               	bcf	128,3,c	;volatile
  7250   002088  9E7C               	bcf	124,7,c	;volatile
  7251   00208A                     
  7252                           ;color.c: 207:     color_read(RGBC);
  7253   00208A  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7254   00208E  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7255   002092  ECD5  F01C         	call	_color_read	;wreg free
  7256   002096                     
  7257                           ;color.c: 208:     rgb_2_hsv(*RGBC, HSV);
  7258   002096  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7259   00209A  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7260   00209E  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7261   0020A2  0E07               	movlw	7
  7262   0020A4                     u4241:
  7263   0020A4  CFDB FFEB          	movff	plusw2,plusw0
  7264   0020A8  06E8               	decf	wreg,f,c
  7265   0020AA  E2FC               	bc	u4241
  7266   0020AC  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7267   0020B0  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7268   0020B4  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7269   0020B8                     
  7270                           ;color.c: 209:     pink->H = HSV->H;
  7271   0020B8  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7272   0020BC  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7273   0020C0  C0F4  FFE1         	movff	color_calibration@pink,fsr1l
  7274   0020C4  C0F5  FFE2         	movff	color_calibration@pink+1,fsr1h
  7275   0020C8  CFDE FFE6          	movff	postinc2,postinc1
  7276   0020CC  CFDD FFE5          	movff	postdec2,postdec1
  7277   0020D0                     
  7278                           ;color.c: 210:     pink->S = HSV->S;
  7279   0020D0  0100               	movlb	0	; () banked
  7280   0020D2  EE20 F002          	lfsr	2,2
  7281   0020D6  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7282   0020D8  26D9               	addwf	fsr2l,f,c
  7283   0020DA  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7284   0020DC  22DA               	addwfc	fsr2h,f,c
  7285   0020DE  EE10 F002          	lfsr	1,2
  7286   0020E2  51F4               	movf	color_calibration@pink& (0+255),w,b
  7287   0020E4  26E1               	addwf	fsr1l,f,c
  7288   0020E6  51F5               	movf	(color_calibration@pink+1)& (0+255),w,b
  7289   0020E8  22E2               	addwfc	fsr1h,f,c
  7290   0020EA  CFDE FFE6          	movff	postinc2,postinc1
  7291   0020EE  CFDD FFE5          	movff	postdec2,postdec1
  7292   0020F2                     
  7293                           ; BSR set to: 0
  7294                           ;color.c: 211:     pink->V = HSV->V;
  7295   0020F2  EE20 F004          	lfsr	2,4
  7296   0020F6  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7297   0020F8  26D9               	addwf	fsr2l,f,c
  7298   0020FA  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7299   0020FC  22DA               	addwfc	fsr2h,f,c
  7300   0020FE  EE10 F004          	lfsr	1,4
  7301   002102  51F4               	movf	color_calibration@pink& (0+255),w,b
  7302   002104  26E1               	addwf	fsr1l,f,c
  7303   002106  51F5               	movf	(color_calibration@pink+1)& (0+255),w,b
  7304   002108  22E2               	addwfc	fsr1h,f,c
  7305   00210A  CFDE FFE6          	movff	postinc2,postinc1
  7306   00210E  CFDD FFE5          	movff	postdec2,postdec1
  7307   002112                     
  7308                           ; BSR set to: 0
  7309                           ;color.c: 213:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7310   002112  0E29               	movlw	41
  7311   002114  6E3D               	movwf	(??_color_calibration+1)^0,c
  7312   002116  0E96               	movlw	150
  7313   002118  6E3C               	movwf	??_color_calibration^0,c
  7314   00211A  0E7F               	movlw	127
  7315   00211C                     u5837:
  7316   00211C  2EE8               	decfsz	wreg,f,c
  7317   00211E  D7FE               	bra	u5837
  7318   002120  2E3C               	decfsz	??_color_calibration^0,f,c
  7319   002122  D7FC               	bra	u5837
  7320   002124  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7321   002126  D7FA               	bra	u5837
  7322   002128  0000               	nop	
  7323   00212A                     
  7324                           ;color.c: 214:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7325   00212A  8680               	bsf	128,3,c	;volatile
  7326   00212C  8E7C               	bsf	124,7,c	;volatile
  7327   00212E                     l197:
  7328   00212E  B48E               	btfsc	142,2,c	;volatile
  7329   002130  EF9C  F010         	goto	u4251
  7330   002134  EF9E  F010         	goto	u4250
  7331   002138                     u4251:
  7332   002138  EF97  F010         	goto	l197
  7333   00213C                     u4250:
  7334   00213C                     
  7335                           ;color.c: 218:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7336   00213C  9680               	bcf	128,3,c	;volatile
  7337   00213E  9E7C               	bcf	124,7,c	;volatile
  7338   002140                     
  7339                           ;color.c: 219:     color_read(RGBC);
  7340   002140  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7341   002144  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7342   002148  ECD5  F01C         	call	_color_read	;wreg free
  7343   00214C                     
  7344                           ;color.c: 220:     rgb_2_hsv(*RGBC, HSV);
  7345   00214C  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7346   002150  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7347   002154  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7348   002158  0E07               	movlw	7
  7349   00215A                     u4261:
  7350   00215A  CFDB FFEB          	movff	plusw2,plusw0
  7351   00215E  06E8               	decf	wreg,f,c
  7352   002160  E2FC               	bc	u4261
  7353   002162  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7354   002166  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7355   00216A  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7356   00216E                     
  7357                           ;color.c: 221:     orange->H = HSV->H;
  7358   00216E  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7359   002172  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7360   002176  C0F6  FFE1         	movff	color_calibration@orange,fsr1l
  7361   00217A  C0F7  FFE2         	movff	color_calibration@orange+1,fsr1h
  7362   00217E  CFDE FFE6          	movff	postinc2,postinc1
  7363   002182  CFDD FFE5          	movff	postdec2,postdec1
  7364   002186                     
  7365                           ;color.c: 222:     orange->S = HSV->S;
  7366   002186  0100               	movlb	0	; () banked
  7367   002188  EE20 F002          	lfsr	2,2
  7368   00218C  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7369   00218E  26D9               	addwf	fsr2l,f,c
  7370   002190  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7371   002192  22DA               	addwfc	fsr2h,f,c
  7372   002194  EE10 F002          	lfsr	1,2
  7373   002198  51F6               	movf	color_calibration@orange& (0+255),w,b
  7374   00219A  26E1               	addwf	fsr1l,f,c
  7375   00219C  51F7               	movf	(color_calibration@orange+1)& (0+255),w,b
  7376   00219E  22E2               	addwfc	fsr1h,f,c
  7377   0021A0  CFDE FFE6          	movff	postinc2,postinc1
  7378   0021A4  CFDD FFE5          	movff	postdec2,postdec1
  7379   0021A8                     
  7380                           ; BSR set to: 0
  7381                           ;color.c: 223:     orange->V = HSV->V;
  7382   0021A8  EE20 F004          	lfsr	2,4
  7383   0021AC  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7384   0021AE  26D9               	addwf	fsr2l,f,c
  7385   0021B0  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7386   0021B2  22DA               	addwfc	fsr2h,f,c
  7387   0021B4  EE10 F004          	lfsr	1,4
  7388   0021B8  51F6               	movf	color_calibration@orange& (0+255),w,b
  7389   0021BA  26E1               	addwf	fsr1l,f,c
  7390   0021BC  51F7               	movf	(color_calibration@orange+1)& (0+255),w,b
  7391   0021BE  22E2               	addwfc	fsr1h,f,c
  7392   0021C0  CFDE FFE6          	movff	postinc2,postinc1
  7393   0021C4  CFDD FFE5          	movff	postdec2,postdec1
  7394   0021C8                     
  7395                           ; BSR set to: 0
  7396                           ;color.c: 225:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7397   0021C8  0E29               	movlw	41
  7398   0021CA  6E3D               	movwf	(??_color_calibration+1)^0,c
  7399   0021CC  0E96               	movlw	150
  7400   0021CE  6E3C               	movwf	??_color_calibration^0,c
  7401   0021D0  0E7F               	movlw	127
  7402   0021D2                     u5847:
  7403   0021D2  2EE8               	decfsz	wreg,f,c
  7404   0021D4  D7FE               	bra	u5847
  7405   0021D6  2E3C               	decfsz	??_color_calibration^0,f,c
  7406   0021D8  D7FC               	bra	u5847
  7407   0021DA  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7408   0021DC  D7FA               	bra	u5847
  7409   0021DE  0000               	nop	
  7410   0021E0                     
  7411                           ;color.c: 226:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7412   0021E0  8680               	bsf	128,3,c	;volatile
  7413   0021E2  8E7C               	bsf	124,7,c	;volatile
  7414   0021E4                     l200:
  7415   0021E4  B48E               	btfsc	142,2,c	;volatile
  7416   0021E6  EFF7  F010         	goto	u4271
  7417   0021EA  EFF9  F010         	goto	u4270
  7418   0021EE                     u4271:
  7419   0021EE  EFF2  F010         	goto	l200
  7420   0021F2                     u4270:
  7421   0021F2                     
  7422                           ;color.c: 230:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7423   0021F2  9680               	bcf	128,3,c	;volatile
  7424   0021F4  9E7C               	bcf	124,7,c	;volatile
  7425   0021F6                     
  7426                           ;color.c: 231:     color_read(RGBC);
  7427   0021F6  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7428   0021FA  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7429   0021FE  ECD5  F01C         	call	_color_read	;wreg free
  7430   002202                     
  7431                           ;color.c: 232:     rgb_2_hsv(*RGBC, HSV);
  7432   002202  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7433   002206  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7434   00220A  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7435   00220E  0E07               	movlw	7
  7436   002210                     u4281:
  7437   002210  CFDB FFEB          	movff	plusw2,plusw0
  7438   002214  06E8               	decf	wreg,f,c
  7439   002216  E2FC               	bc	u4281
  7440   002218  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7441   00221C  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7442   002220  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7443   002224                     
  7444                           ;color.c: 233:     lightblue->H = HSV->H;
  7445   002224  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7446   002228  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7447   00222C  C0F8  FFE1         	movff	color_calibration@lightblue,fsr1l
  7448   002230  C0F9  FFE2         	movff	color_calibration@lightblue+1,fsr1h
  7449   002234  CFDE FFE6          	movff	postinc2,postinc1
  7450   002238  CFDD FFE5          	movff	postdec2,postdec1
  7451   00223C                     
  7452                           ;color.c: 234:     lightblue->S = HSV->S;
  7453   00223C  0100               	movlb	0	; () banked
  7454   00223E  EE20 F002          	lfsr	2,2
  7455   002242  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7456   002244  26D9               	addwf	fsr2l,f,c
  7457   002246  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7458   002248  22DA               	addwfc	fsr2h,f,c
  7459   00224A  EE10 F002          	lfsr	1,2
  7460   00224E  51F8               	movf	color_calibration@lightblue& (0+255),w,b
  7461   002250  26E1               	addwf	fsr1l,f,c
  7462   002252  51F9               	movf	(color_calibration@lightblue+1)& (0+255),w,b
  7463   002254  22E2               	addwfc	fsr1h,f,c
  7464   002256  CFDE FFE6          	movff	postinc2,postinc1
  7465   00225A  CFDD FFE5          	movff	postdec2,postdec1
  7466   00225E                     
  7467                           ; BSR set to: 0
  7468                           ;color.c: 235:     lightblue->V = HSV->V;
  7469   00225E  EE20 F004          	lfsr	2,4
  7470   002262  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7471   002264  26D9               	addwf	fsr2l,f,c
  7472   002266  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7473   002268  22DA               	addwfc	fsr2h,f,c
  7474   00226A  EE10 F004          	lfsr	1,4
  7475   00226E  51F8               	movf	color_calibration@lightblue& (0+255),w,b
  7476   002270  26E1               	addwf	fsr1l,f,c
  7477   002272  51F9               	movf	(color_calibration@lightblue+1)& (0+255),w,b
  7478   002274  22E2               	addwfc	fsr1h,f,c
  7479   002276  CFDE FFE6          	movff	postinc2,postinc1
  7480   00227A  CFDD FFE5          	movff	postdec2,postdec1
  7481   00227E                     
  7482                           ; BSR set to: 0
  7483                           ;color.c: 237:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7484   00227E  0E29               	movlw	41
  7485   002280  6E3D               	movwf	(??_color_calibration+1)^0,c
  7486   002282  0E96               	movlw	150
  7487   002284  6E3C               	movwf	??_color_calibration^0,c
  7488   002286  0E7F               	movlw	127
  7489   002288                     u5857:
  7490   002288  2EE8               	decfsz	wreg,f,c
  7491   00228A  D7FE               	bra	u5857
  7492   00228C  2E3C               	decfsz	??_color_calibration^0,f,c
  7493   00228E  D7FC               	bra	u5857
  7494   002290  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7495   002292  D7FA               	bra	u5857
  7496   002294  0000               	nop	
  7497   002296                     
  7498                           ;color.c: 238:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7499   002296  8680               	bsf	128,3,c	;volatile
  7500   002298  8E7C               	bsf	124,7,c	;volatile
  7501   00229A                     l203:
  7502   00229A  B48E               	btfsc	142,2,c	;volatile
  7503   00229C  EF52  F011         	goto	u4291
  7504   0022A0  EF54  F011         	goto	u4290
  7505   0022A4                     u4291:
  7506   0022A4  EF4D  F011         	goto	l203
  7507   0022A8                     u4290:
  7508   0022A8                     
  7509                           ;color.c: 242:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  7510   0022A8  9680               	bcf	128,3,c	;volatile
  7511   0022AA  9E7C               	bcf	124,7,c	;volatile
  7512   0022AC                     
  7513                           ;color.c: 243:     color_read(RGBC);
  7514   0022AC  C0E8  F014         	movff	color_calibration@RGBC,color_read@RGBC
  7515   0022B0  C0E9  F015         	movff	color_calibration@RGBC+1,color_read@RGBC+1
  7516   0022B4  ECD5  F01C         	call	_color_read	;wreg free
  7517   0022B8                     
  7518                           ;color.c: 244:     rgb_2_hsv(*RGBC, HSV);
  7519   0022B8  C0E8  FFD9         	movff	color_calibration@RGBC,fsr2l
  7520   0022BC  C0E9  FFDA         	movff	color_calibration@RGBC+1,fsr2h
  7521   0022C0  EE00  F030         	lfsr	0,rgb_2_hsv@RGBC
  7522   0022C4  0E07               	movlw	7
  7523   0022C6                     u4301:
  7524   0022C6  CFDB FFEB          	movff	plusw2,plusw0
  7525   0022CA  06E8               	decf	wreg,f,c
  7526   0022CC  E2FC               	bc	u4301
  7527   0022CE  C0EA  F038         	movff	color_calibration@HSV,rgb_2_hsv@HSV
  7528   0022D2  C0EB  F039         	movff	color_calibration@HSV+1,rgb_2_hsv@HSV+1
  7529   0022D6  ECBC  F013         	call	_rgb_2_hsv	;wreg free
  7530   0022DA                     
  7531                           ;color.c: 245:     white->H = HSV->H;
  7532   0022DA  C0EA  FFD9         	movff	color_calibration@HSV,fsr2l
  7533   0022DE  C0EB  FFDA         	movff	color_calibration@HSV+1,fsr2h
  7534   0022E2  C0FA  FFE1         	movff	color_calibration@white,fsr1l
  7535   0022E6  C0FB  FFE2         	movff	color_calibration@white+1,fsr1h
  7536   0022EA  CFDE FFE6          	movff	postinc2,postinc1
  7537   0022EE  CFDD FFE5          	movff	postdec2,postdec1
  7538   0022F2                     
  7539                           ;color.c: 246:     white->S = HSV->S;
  7540   0022F2  0100               	movlb	0	; () banked
  7541   0022F4  EE20 F002          	lfsr	2,2
  7542   0022F8  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7543   0022FA  26D9               	addwf	fsr2l,f,c
  7544   0022FC  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7545   0022FE  22DA               	addwfc	fsr2h,f,c
  7546   002300  EE10 F002          	lfsr	1,2
  7547   002304  51FA               	movf	color_calibration@white& (0+255),w,b
  7548   002306  26E1               	addwf	fsr1l,f,c
  7549   002308  51FB               	movf	(color_calibration@white+1)& (0+255),w,b
  7550   00230A  22E2               	addwfc	fsr1h,f,c
  7551   00230C  CFDE FFE6          	movff	postinc2,postinc1
  7552   002310  CFDD FFE5          	movff	postdec2,postdec1
  7553   002314                     
  7554                           ; BSR set to: 0
  7555                           ;color.c: 247:     white->V = HSV->V;
  7556   002314  EE20 F004          	lfsr	2,4
  7557   002318  51EA               	movf	color_calibration@HSV& (0+255),w,b
  7558   00231A  26D9               	addwf	fsr2l,f,c
  7559   00231C  51EB               	movf	(color_calibration@HSV+1)& (0+255),w,b
  7560   00231E  22DA               	addwfc	fsr2h,f,c
  7561   002320  EE10 F004          	lfsr	1,4
  7562   002324  51FA               	movf	color_calibration@white& (0+255),w,b
  7563   002326  26E1               	addwf	fsr1l,f,c
  7564   002328  51FB               	movf	(color_calibration@white+1)& (0+255),w,b
  7565   00232A  22E2               	addwfc	fsr1h,f,c
  7566   00232C  CFDE FFE6          	movff	postinc2,postinc1
  7567   002330  CFDD FFE5          	movff	postdec2,postdec1
  7568   002334                     
  7569                           ; BSR set to: 0
  7570                           ;color.c: 249:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7571   002334  0E29               	movlw	41
  7572   002336  6E3D               	movwf	(??_color_calibration+1)^0,c
  7573   002338  0E96               	movlw	150
  7574   00233A  6E3C               	movwf	??_color_calibration^0,c
  7575   00233C  0E7F               	movlw	127
  7576   00233E                     u5867:
  7577   00233E  2EE8               	decfsz	wreg,f,c
  7578   002340  D7FE               	bra	u5867
  7579   002342  2E3C               	decfsz	??_color_calibration^0,f,c
  7580   002344  D7FC               	bra	u5867
  7581   002346  2E3D               	decfsz	(??_color_calibration+1)^0,f,c
  7582   002348  D7FA               	bra	u5867
  7583   00234A  0000               	nop	
  7584   00234C                     
  7585                           ;color.c: 250:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  7586   00234C  8680               	bsf	128,3,c	;volatile
  7587   00234E  8E7C               	bsf	124,7,c	;volatile
  7588   002350  0012               	return		;funcret
  7589   002352                     __end_of_color_calibration:
  7590                           	callstack 0
  7591                           
  7592 ;; *************** function _white_Light *****************
  7593 ;; Defined at:
  7594 ;;		line 62 in file "color.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  state           1    wreg     unsigned char 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  state           1   15[COMRAM] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      void 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7612 ;;Total ram usage:        1 bytes
  7613 ;; Hardware stack levels used: 1
  7614 ;; Hardware stack levels required when called: 6
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_main
  7619 ;;		_color_calibration
  7620 ;;		_returnHome
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text18
  7625   004BEA                     __ptext18:
  7626                           	callstack 0
  7627   004BEA                     _white_Light:
  7628                           	callstack 24
  7629                           
  7630                           ;incstack = 0
  7631                           ;white_Light@state stored from wreg
  7632   004BEA  6E10               	movwf	white_Light@state^0,c
  7633   004BEC                     
  7634                           ;color.c: 62: void white_Light(char state);color.c: 63: {;color.c: 64:     if (state){
  7635   004BEC  5010               	movf	white_Light@state^0,w,c
  7636   004BEE  B4D8               	btfsc	status,2,c
  7637   004BF0  EFFC  F025         	goto	u1891
  7638   004BF4  EFFE  F025         	goto	u1890
  7639   004BF8                     u1891:
  7640   004BF8  EF03  F026         	goto	l146
  7641   004BFC                     u1890:
  7642   004BFC                     
  7643                           ;color.c: 65:         LATGbits.LATG0 = 1;
  7644   004BFC  807F               	bsf	127,0,c	;volatile
  7645                           
  7646                           ;color.c: 66:         LATEbits.LATE7 = 1;
  7647   004BFE  8E7D               	bsf	125,7,c	;volatile
  7648                           
  7649                           ;color.c: 67:         LATAbits.LATA3 = 1;
  7650   004C00  8679               	bsf	121,3,c	;volatile
  7651                           
  7652                           ;color.c: 68:     }
  7653   004C02  EF06  F026         	goto	l148
  7654   004C06                     l146:
  7655                           
  7656                           ;color.c: 70:         LATGbits.LATG0 = 0;
  7657   004C06  907F               	bcf	127,0,c	;volatile
  7658                           
  7659                           ;color.c: 71:         LATEbits.LATE7 = 0;
  7660   004C08  9E7D               	bcf	125,7,c	;volatile
  7661                           
  7662                           ;color.c: 72:         LATAbits.LATA3 = 0;
  7663   004C0A  9679               	bcf	121,3,c	;volatile
  7664   004C0C                     l148:
  7665   004C0C  0012               	return		;funcret
  7666   004C0E                     __end_of_white_Light:
  7667                           	callstack 0
  7668                           
  7669 ;; *************** function _rgb_2_hsv *****************
  7670 ;; Defined at:
  7671 ;;		line 263 in file "color.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;  RGBC            8   47[COMRAM] struct RGBC_val
  7674 ;;  HSV             2   55[COMRAM] PTR struct HSV_val
  7675 ;;		 -> main@HSV(6), 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  diff            2   14[BANK0 ] unsigned int 
  7678 ;;  b               2   12[BANK0 ] unsigned int 
  7679 ;;  g               2   10[BANK0 ] unsigned int 
  7680 ;;  cmax            2    8[BANK0 ] unsigned int 
  7681 ;;  r               2    6[BANK0 ] unsigned int 
  7682 ;;  cmin            2    0[BANK0 ] unsigned int 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7692 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7693 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7695 ;;      Totals:        12      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;Total ram usage:       28 bytes
  7697 ;; Hardware stack levels used: 1
  7698 ;; Hardware stack levels required when called: 7
  7699 ;; This function calls:
  7700 ;;		___aldiv
  7701 ;;		___lmul
  7702 ;;		___lwdiv
  7703 ;;		___wmul
  7704 ;;		_max
  7705 ;;		_min
  7706 ;; This function is called by:
  7707 ;;		_main
  7708 ;;		_color_calibration
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text19
  7713   002778                     __ptext19:
  7714                           	callstack 0
  7715   002778                     _rgb_2_hsv:
  7716                           	callstack 23
  7717   002778                     
  7718                           ;color.c: 269:     unsigned int r = (unsigned int)(RGBC.R*10000L/1900);
  7719   002778  C030  F016         	movff	rgb_2_hsv@RGBC,___lmul@multiplier
  7720   00277C  C031  F017         	movff	rgb_2_hsv@RGBC+1,___lmul@multiplier+1
  7721   002780  6A18               	clrf	(___lmul@multiplier+2)^0,c
  7722   002782  6A19               	clrf	(___lmul@multiplier+3)^0,c
  7723   002784  0E10               	movlw	16
  7724   002786  6E1A               	movwf	___lmul@multiplicand^0,c
  7725   002788  0E27               	movlw	39
  7726   00278A  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  7727   00278C  0E00               	movlw	0
  7728   00278E  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  7729   002790  0E00               	movlw	0
  7730   002792  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  7731   002794  EC8D  F024         	call	___lmul	;wreg free
  7732   002798  C016  F022         	movff	?___lmul,___aldiv@dividend
  7733   00279C  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  7734   0027A0  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  7735   0027A4  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  7736   0027A8  0E6C               	movlw	108
  7737   0027AA  6E26               	movwf	___aldiv@divisor^0,c
  7738   0027AC  0E07               	movlw	7
  7739   0027AE  6E27               	movwf	(___aldiv@divisor+1)^0,c
  7740   0027B0  0E00               	movlw	0
  7741   0027B2  6E28               	movwf	(___aldiv@divisor+2)^0,c
  7742   0027B4  0E00               	movlw	0
  7743   0027B6  6E29               	movwf	(___aldiv@divisor+3)^0,c
  7744   0027B8  EC4B  F021         	call	___aldiv	;wreg free
  7745   0027BC  C022  F0DE         	movff	?___aldiv,rgb_2_hsv@r
  7746   0027C0  C023  F0DF         	movff	?___aldiv+1,rgb_2_hsv@r+1
  7747                           
  7748                           ;color.c: 270:     unsigned int g = (unsigned int)(RGBC.G*10000L/1400);
  7749   0027C4  C032  F016         	movff	rgb_2_hsv@RGBC+2,___lmul@multiplier
  7750   0027C8  C033  F017         	movff	rgb_2_hsv@RGBC+3,___lmul@multiplier+1
  7751   0027CC  6A18               	clrf	(___lmul@multiplier+2)^0,c
  7752   0027CE  6A19               	clrf	(___lmul@multiplier+3)^0,c
  7753   0027D0  0E10               	movlw	16
  7754   0027D2  6E1A               	movwf	___lmul@multiplicand^0,c
  7755   0027D4  0E27               	movlw	39
  7756   0027D6  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  7757   0027D8  0E00               	movlw	0
  7758   0027DA  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  7759   0027DC  0E00               	movlw	0
  7760   0027DE  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  7761   0027E0  EC8D  F024         	call	___lmul	;wreg free
  7762   0027E4  C016  F022         	movff	?___lmul,___aldiv@dividend
  7763   0027E8  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  7764   0027EC  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  7765   0027F0  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  7766   0027F4  0E78               	movlw	120
  7767   0027F6  6E26               	movwf	___aldiv@divisor^0,c
  7768   0027F8  0E05               	movlw	5
  7769   0027FA  6E27               	movwf	(___aldiv@divisor+1)^0,c
  7770   0027FC  0E00               	movlw	0
  7771   0027FE  6E28               	movwf	(___aldiv@divisor+2)^0,c
  7772   002800  0E00               	movlw	0
  7773   002802  6E29               	movwf	(___aldiv@divisor+3)^0,c
  7774   002804  EC4B  F021         	call	___aldiv	;wreg free
  7775   002808  C022  F0E2         	movff	?___aldiv,rgb_2_hsv@g
  7776   00280C  C023  F0E3         	movff	?___aldiv+1,rgb_2_hsv@g+1
  7777                           
  7778                           ;color.c: 271:     unsigned int b = (unsigned int)(RGBC.B*10000L/1600);
  7779   002810  C034  F016         	movff	rgb_2_hsv@RGBC+4,___lmul@multiplier
  7780   002814  C035  F017         	movff	rgb_2_hsv@RGBC+5,___lmul@multiplier+1
  7781   002818  6A18               	clrf	(___lmul@multiplier+2)^0,c
  7782   00281A  6A19               	clrf	(___lmul@multiplier+3)^0,c
  7783   00281C  0E10               	movlw	16
  7784   00281E  6E1A               	movwf	___lmul@multiplicand^0,c
  7785   002820  0E27               	movlw	39
  7786   002822  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  7787   002824  0E00               	movlw	0
  7788   002826  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  7789   002828  0E00               	movlw	0
  7790   00282A  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  7791   00282C  EC8D  F024         	call	___lmul	;wreg free
  7792   002830  C016  F022         	movff	?___lmul,___aldiv@dividend
  7793   002834  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  7794   002838  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  7795   00283C  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  7796   002840  0E40               	movlw	64
  7797   002842  6E26               	movwf	___aldiv@divisor^0,c
  7798   002844  0E06               	movlw	6
  7799   002846  6E27               	movwf	(___aldiv@divisor+1)^0,c
  7800   002848  0E00               	movlw	0
  7801   00284A  6E28               	movwf	(___aldiv@divisor+2)^0,c
  7802   00284C  0E00               	movlw	0
  7803   00284E  6E29               	movwf	(___aldiv@divisor+3)^0,c
  7804   002850  EC4B  F021         	call	___aldiv	;wreg free
  7805   002854  C022  F0E4         	movff	?___aldiv,rgb_2_hsv@b
  7806   002858  C023  F0E5         	movff	?___aldiv+1,rgb_2_hsv@b+1
  7807                           
  7808                           ;color.c: 274:     unsigned int cmax = max(r, max(g, b));
  7809   00285C  C0E2  F010         	movff	rgb_2_hsv@g,max@a
  7810   002860  C0E3  F011         	movff	rgb_2_hsv@g+1,max@a+1
  7811   002864  C0E4  F012         	movff	rgb_2_hsv@b,max@b
  7812   002868  C0E5  F013         	movff	rgb_2_hsv@b+1,max@b+1
  7813   00286C  EC7B  F025         	call	_max	;wreg free
  7814   002870  C010  F0DA         	movff	?_max,_rgb_2_hsv$3571
  7815   002874  C011  F0DB         	movff	?_max+1,_rgb_2_hsv$3571+1
  7816                           
  7817                           ;color.c: 274:     unsigned int cmax = max(r, max(g, b));
  7818   002878  C0DE  F010         	movff	rgb_2_hsv@r,max@a
  7819   00287C  C0DF  F011         	movff	rgb_2_hsv@r+1,max@a+1
  7820   002880  C0DA  F012         	movff	_rgb_2_hsv$3571,max@b
  7821   002884  C0DB  F013         	movff	_rgb_2_hsv$3571+1,max@b+1
  7822   002888  EC7B  F025         	call	_max	;wreg free
  7823   00288C  C010  F0E0         	movff	?_max,rgb_2_hsv@cmax
  7824   002890  C011  F0E1         	movff	?_max+1,rgb_2_hsv@cmax+1
  7825                           
  7826                           ;color.c: 275:     unsigned int cmin = min(r, min(g, b));
  7827   002894  C0E2  F010         	movff	rgb_2_hsv@g,min@a
  7828   002898  C0E3  F011         	movff	rgb_2_hsv@g+1,min@a+1
  7829   00289C  C0E4  F012         	movff	rgb_2_hsv@b,min@b
  7830   0028A0  C0E5  F013         	movff	rgb_2_hsv@b+1,min@b+1
  7831   0028A4  EC65  F025         	call	_min	;wreg free
  7832   0028A8  C010  F0DC         	movff	?_min,_rgb_2_hsv$3572
  7833   0028AC  C011  F0DD         	movff	?_min+1,_rgb_2_hsv$3572+1
  7834                           
  7835                           ;color.c: 275:     unsigned int cmin = min(r, min(g, b));
  7836   0028B0  C0DE  F010         	movff	rgb_2_hsv@r,min@a
  7837   0028B4  C0DF  F011         	movff	rgb_2_hsv@r+1,min@a+1
  7838   0028B8  C0DC  F012         	movff	_rgb_2_hsv$3572,min@b
  7839   0028BC  C0DD  F013         	movff	_rgb_2_hsv$3572+1,min@b+1
  7840   0028C0  EC65  F025         	call	_min	;wreg free
  7841   0028C4  C010  F0D8         	movff	?_min,rgb_2_hsv@cmin
  7842   0028C8  C011  F0D9         	movff	?_min+1,rgb_2_hsv@cmin+1
  7843   0028CC                     
  7844                           ;color.c: 276:     unsigned int diff = cmax - cmin;
  7845   0028CC  0100               	movlb	0	; () banked
  7846   0028CE  51D8               	movf	rgb_2_hsv@cmin& (0+255),w,b
  7847   0028D0  5DE0               	subwf	rgb_2_hsv@cmax& (0+255),w,b
  7848   0028D2  6FE6               	movwf	rgb_2_hsv@diff& (0+255),b
  7849   0028D4  51D9               	movf	(rgb_2_hsv@cmin+1)& (0+255),w,b
  7850   0028D6  59E1               	subwfb	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7851   0028D8  6FE7               	movwf	(rgb_2_hsv@diff+1)& (0+255),b
  7852   0028DA                     
  7853                           ; BSR set to: 0
  7854                           ;color.c: 279:     if (cmax == r){
  7855   0028DA  51DE               	movf	rgb_2_hsv@r& (0+255),w,b
  7856   0028DC  19E0               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  7857   0028DE  E107               	bnz	u3941
  7858   0028E0  51DF               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  7859   0028E2  19E1               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7860   0028E4  A4D8               	btfss	status,2,c
  7861   0028E6  EF77  F014         	goto	u3941
  7862   0028EA  EF79  F014         	goto	u3940
  7863   0028EE                     u3941:
  7864   0028EE  EFFC  F014         	goto	l4973
  7865   0028F2                     u3940:
  7866   0028F2                     
  7867                           ; BSR set to: 0
  7868                           ;color.c: 280:         if (g > b){HSV->H = (unsigned int)((g-b)*6000L/diff);}
  7869   0028F2  51E2               	movf	rgb_2_hsv@g& (0+255),w,b
  7870   0028F4  5DE4               	subwf	rgb_2_hsv@b& (0+255),w,b
  7871   0028F6  51E3               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7872   0028F8  59E5               	subwfb	(rgb_2_hsv@b+1)& (0+255),w,b
  7873   0028FA  B0D8               	btfsc	status,0,c
  7874   0028FC  EF82  F014         	goto	u3951
  7875   002900  EF84  F014         	goto	u3950
  7876   002904                     u3951:
  7877   002904  EFB4  F014         	goto	l4969
  7878   002908                     u3950:
  7879   002908                     
  7880                           ; BSR set to: 0
  7881   002908  51E4               	movf	rgb_2_hsv@b& (0+255),w,b
  7882   00290A  5DE2               	subwf	rgb_2_hsv@g& (0+255),w,b
  7883   00290C  6E3A               	movwf	??_rgb_2_hsv^0,c
  7884   00290E  51E5               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7885   002910  59E3               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  7886   002912  6E3B               	movwf	(??_rgb_2_hsv+1)^0,c
  7887   002914  C03A  F016         	movff	??_rgb_2_hsv,___lmul@multiplier
  7888   002918  C03B  F017         	movff	??_rgb_2_hsv+1,___lmul@multiplier+1
  7889   00291C  6A18               	clrf	(___lmul@multiplier+2)^0,c
  7890   00291E  6A19               	clrf	(___lmul@multiplier+3)^0,c
  7891   002920  0E70               	movlw	112
  7892   002922  6E1A               	movwf	___lmul@multiplicand^0,c
  7893   002924  0E17               	movlw	23
  7894   002926  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  7895   002928  0E00               	movlw	0
  7896   00292A  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  7897   00292C  0E00               	movlw	0
  7898   00292E  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  7899   002930  EC8D  F024         	call	___lmul	;wreg free
  7900   002934  C016  F022         	movff	?___lmul,___aldiv@dividend
  7901   002938  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  7902   00293C  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  7903   002940  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  7904   002944  C0E6  F026         	movff	rgb_2_hsv@diff,___aldiv@divisor
  7905   002948  C0E7  F027         	movff	rgb_2_hsv@diff+1,___aldiv@divisor+1
  7906   00294C  6A28               	clrf	(___aldiv@divisor+2)^0,c
  7907   00294E  6A29               	clrf	(___aldiv@divisor+3)^0,c
  7908   002950  EC4B  F021         	call	___aldiv	;wreg free
  7909   002954  C038  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7910   002958  C039  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7911   00295C  C022  FFDE         	movff	?___aldiv,postinc2
  7912   002960  C023  FFDD         	movff	?___aldiv+1,postdec2
  7913   002964  EF87  F015         	goto	l4981
  7914   002968                     l4969:
  7915                           
  7916                           ; BSR set to: 0
  7917   002968  51E4               	movf	rgb_2_hsv@b& (0+255),w,b
  7918   00296A  5DE2               	subwf	rgb_2_hsv@g& (0+255),w,b
  7919   00296C  51E5               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7920   00296E  59E3               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  7921   002970  B0D8               	btfsc	status,0,c
  7922   002972  EFBD  F014         	goto	u3961
  7923   002976  EFBF  F014         	goto	u3960
  7924   00297A                     u3961:
  7925   00297A  EF87  F015         	goto	l4981
  7926   00297E                     u3960:
  7927   00297E                     
  7928                           ; BSR set to: 0
  7929   00297E  C0E6  F010         	movff	rgb_2_hsv@diff,___wmul@multiplier
  7930   002982  C0E7  F011         	movff	rgb_2_hsv@diff+1,___wmul@multiplier+1
  7931   002986  0E00               	movlw	0
  7932   002988  6E13               	movwf	(___wmul@multiplicand+1)^0,c
  7933   00298A  0E06               	movlw	6
  7934   00298C  6E12               	movwf	___wmul@multiplicand^0,c
  7935   00298E  ECE2  F025         	call	___wmul	;wreg free
  7936   002992  0100               	movlb	0	; () banked
  7937   002994  51E4               	movf	rgb_2_hsv@b& (0+255),w,b
  7938   002996  5E10               	subwf	?___wmul^0,f,c
  7939   002998  51E5               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  7940   00299A  5A11               	subwfb	(?___wmul+1)^0,f,c
  7941   00299C  51E2               	movf	rgb_2_hsv@g& (0+255),w,b
  7942   00299E  2610               	addwf	?___wmul^0,f,c
  7943   0029A0  51E3               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7944   0029A2  2211               	addwfc	(?___wmul+1)^0,f,c
  7945   0029A4  C010  F016         	movff	?___wmul,___lmul@multiplier
  7946   0029A8  C011  F017         	movff	?___wmul+1,___lmul@multiplier+1
  7947   0029AC  6A18               	clrf	(___lmul@multiplier+2)^0,c
  7948   0029AE  6A19               	clrf	(___lmul@multiplier+3)^0,c
  7949   0029B0  0E70               	movlw	112
  7950   0029B2  6E1A               	movwf	___lmul@multiplicand^0,c
  7951   0029B4  0E17               	movlw	23
  7952   0029B6  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  7953   0029B8  0E00               	movlw	0
  7954   0029BA  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  7955   0029BC  0E00               	movlw	0
  7956   0029BE  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  7957   0029C0  EC8D  F024         	call	___lmul	;wreg free
  7958   0029C4  C016  F022         	movff	?___lmul,___aldiv@dividend
  7959   0029C8  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  7960   0029CC  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  7961   0029D0  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  7962   0029D4  C0E6  F026         	movff	rgb_2_hsv@diff,___aldiv@divisor
  7963   0029D8  C0E7  F027         	movff	rgb_2_hsv@diff+1,___aldiv@divisor+1
  7964   0029DC  6A28               	clrf	(___aldiv@divisor+2)^0,c
  7965   0029DE  6A29               	clrf	(___aldiv@divisor+3)^0,c
  7966   0029E0  EC4B  F021         	call	___aldiv	;wreg free
  7967   0029E4  C038  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  7968   0029E8  C039  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  7969   0029EC  C022  FFDE         	movff	?___aldiv,postinc2
  7970   0029F0  C023  FFDD         	movff	?___aldiv+1,postdec2
  7971   0029F4  EF87  F015         	goto	l4981
  7972   0029F8                     l4973:
  7973                           
  7974                           ; BSR set to: 0
  7975   0029F8  51E2               	movf	rgb_2_hsv@g& (0+255),w,b
  7976   0029FA  19E0               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  7977   0029FC  E107               	bnz	u3971
  7978   0029FE  51E3               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  7979   002A00  19E1               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  7980   002A02  A4D8               	btfss	status,2,c
  7981   002A04  EF06  F015         	goto	u3971
  7982   002A08  EF08  F015         	goto	u3970
  7983   002A0C                     u3971:
  7984   002A0C  EF41  F015         	goto	l4977
  7985   002A10                     u3970:
  7986   002A10                     
  7987                           ; BSR set to: 0
  7988   002A10  C0E6  F03A         	movff	rgb_2_hsv@diff,??_rgb_2_hsv
  7989   002A14  C0E7  F03B         	movff	rgb_2_hsv@diff+1,??_rgb_2_hsv+1
  7990   002A18  90D8               	bcf	status,0,c
  7991   002A1A  363A               	rlcf	??_rgb_2_hsv^0,f,c
  7992   002A1C  363B               	rlcf	(??_rgb_2_hsv+1)^0,f,c
  7993   002A1E  51DE               	movf	rgb_2_hsv@r& (0+255),w,b
  7994   002A20  5E3A               	subwf	??_rgb_2_hsv^0,f,c
  7995   002A22  51DF               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  7996   002A24  5A3B               	subwfb	(??_rgb_2_hsv+1)^0,f,c
  7997   002A26  51E4               	movf	rgb_2_hsv@b& (0+255),w,b
  7998   002A28  263A               	addwf	??_rgb_2_hsv^0,f,c
  7999   002A2A  51E5               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  8000   002A2C  223B               	addwfc	(??_rgb_2_hsv+1)^0,f,c
  8001   002A2E  C03A  F016         	movff	??_rgb_2_hsv,___lmul@multiplier
  8002   002A32  C03B  F017         	movff	??_rgb_2_hsv+1,___lmul@multiplier+1
  8003   002A36  6A18               	clrf	(___lmul@multiplier+2)^0,c
  8004   002A38  6A19               	clrf	(___lmul@multiplier+3)^0,c
  8005   002A3A  0E70               	movlw	112
  8006   002A3C  6E1A               	movwf	___lmul@multiplicand^0,c
  8007   002A3E  0E17               	movlw	23
  8008   002A40  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  8009   002A42  0E00               	movlw	0
  8010   002A44  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  8011   002A46  0E00               	movlw	0
  8012   002A48  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  8013   002A4A  EC8D  F024         	call	___lmul	;wreg free
  8014   002A4E  C016  F022         	movff	?___lmul,___aldiv@dividend
  8015   002A52  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  8016   002A56  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  8017   002A5A  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  8018   002A5E  C0E6  F026         	movff	rgb_2_hsv@diff,___aldiv@divisor
  8019   002A62  C0E7  F027         	movff	rgb_2_hsv@diff+1,___aldiv@divisor+1
  8020   002A66  6A28               	clrf	(___aldiv@divisor+2)^0,c
  8021   002A68  6A29               	clrf	(___aldiv@divisor+3)^0,c
  8022   002A6A  EC4B  F021         	call	___aldiv	;wreg free
  8023   002A6E  C038  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  8024   002A72  C039  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  8025   002A76  C022  FFDE         	movff	?___aldiv,postinc2
  8026   002A7A  C023  FFDD         	movff	?___aldiv+1,postdec2
  8027   002A7E  EF87  F015         	goto	l4981
  8028   002A82                     l4977:
  8029                           
  8030                           ; BSR set to: 0
  8031   002A82  51E4               	movf	rgb_2_hsv@b& (0+255),w,b
  8032   002A84  19E0               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  8033   002A86  E107               	bnz	u3981
  8034   002A88  51E5               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  8035   002A8A  19E1               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  8036   002A8C  A4D8               	btfss	status,2,c
  8037   002A8E  EF4B  F015         	goto	u3981
  8038   002A92  EF4D  F015         	goto	u3980
  8039   002A96                     u3981:
  8040   002A96  EF87  F015         	goto	l4981
  8041   002A9A                     u3980:
  8042   002A9A                     
  8043                           ; BSR set to: 0
  8044   002A9A  C0E6  F03A         	movff	rgb_2_hsv@diff,??_rgb_2_hsv
  8045   002A9E  C0E7  F03B         	movff	rgb_2_hsv@diff+1,??_rgb_2_hsv+1
  8046   002AA2  90D8               	bcf	status,0,c
  8047   002AA4  363A               	rlcf	??_rgb_2_hsv^0,f,c
  8048   002AA6  363B               	rlcf	(??_rgb_2_hsv+1)^0,f,c
  8049   002AA8  90D8               	bcf	status,0,c
  8050   002AAA  363A               	rlcf	??_rgb_2_hsv^0,f,c
  8051   002AAC  363B               	rlcf	(??_rgb_2_hsv+1)^0,f,c
  8052   002AAE  51E2               	movf	rgb_2_hsv@g& (0+255),w,b
  8053   002AB0  5E3A               	subwf	??_rgb_2_hsv^0,f,c
  8054   002AB2  51E3               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  8055   002AB4  5A3B               	subwfb	(??_rgb_2_hsv+1)^0,f,c
  8056   002AB6  51DE               	movf	rgb_2_hsv@r& (0+255),w,b
  8057   002AB8  263A               	addwf	??_rgb_2_hsv^0,f,c
  8058   002ABA  51DF               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  8059   002ABC  223B               	addwfc	(??_rgb_2_hsv+1)^0,f,c
  8060   002ABE  C03A  F016         	movff	??_rgb_2_hsv,___lmul@multiplier
  8061   002AC2  C03B  F017         	movff	??_rgb_2_hsv+1,___lmul@multiplier+1
  8062   002AC6  6A18               	clrf	(___lmul@multiplier+2)^0,c
  8063   002AC8  6A19               	clrf	(___lmul@multiplier+3)^0,c
  8064   002ACA  0E70               	movlw	112
  8065   002ACC  6E1A               	movwf	___lmul@multiplicand^0,c
  8066   002ACE  0E17               	movlw	23
  8067   002AD0  6E1B               	movwf	(___lmul@multiplicand+1)^0,c
  8068   002AD2  0E00               	movlw	0
  8069   002AD4  6E1C               	movwf	(___lmul@multiplicand+2)^0,c
  8070   002AD6  0E00               	movlw	0
  8071   002AD8  6E1D               	movwf	(___lmul@multiplicand+3)^0,c
  8072   002ADA  EC8D  F024         	call	___lmul	;wreg free
  8073   002ADE  C016  F022         	movff	?___lmul,___aldiv@dividend
  8074   002AE2  C017  F023         	movff	?___lmul+1,___aldiv@dividend+1
  8075   002AE6  C018  F024         	movff	?___lmul+2,___aldiv@dividend+2
  8076   002AEA  C019  F025         	movff	?___lmul+3,___aldiv@dividend+3
  8077   002AEE  C0E6  F026         	movff	rgb_2_hsv@diff,___aldiv@divisor
  8078   002AF2  C0E7  F027         	movff	rgb_2_hsv@diff+1,___aldiv@divisor+1
  8079   002AF6  6A28               	clrf	(___aldiv@divisor+2)^0,c
  8080   002AF8  6A29               	clrf	(___aldiv@divisor+3)^0,c
  8081   002AFA  EC4B  F021         	call	___aldiv	;wreg free
  8082   002AFE  C038  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  8083   002B02  C039  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  8084   002B06  C022  FFDE         	movff	?___aldiv,postinc2
  8085   002B0A  C023  FFDD         	movff	?___aldiv+1,postdec2
  8086   002B0E                     l4981:
  8087                           
  8088                           ;color.c: 289:     HSV->S = (unsigned int)((diff * 10000)/cmax);
  8089   002B0E  C0E6  F010         	movff	rgb_2_hsv@diff,___wmul@multiplier
  8090   002B12  C0E7  F011         	movff	rgb_2_hsv@diff+1,___wmul@multiplier+1
  8091   002B16  0E27               	movlw	39
  8092   002B18  6E13               	movwf	(___wmul@multiplicand+1)^0,c
  8093   002B1A  0E10               	movlw	16
  8094   002B1C  6E12               	movwf	___wmul@multiplicand^0,c
  8095   002B1E  ECE2  F025         	call	___wmul	;wreg free
  8096   002B22  C010  F016         	movff	?___wmul,___lwdiv@dividend
  8097   002B26  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
  8098   002B2A  C0E0  F018         	movff	rgb_2_hsv@cmax,___lwdiv@divisor
  8099   002B2E  C0E1  F019         	movff	rgb_2_hsv@cmax+1,___lwdiv@divisor+1
  8100   002B32  EC19  F024         	call	___lwdiv	;wreg free
  8101   002B36  EE20 F002          	lfsr	2,2
  8102   002B3A  5038               	movf	rgb_2_hsv@HSV^0,w,c
  8103   002B3C  26D9               	addwf	fsr2l,f,c
  8104   002B3E  5039               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  8105   002B40  22DA               	addwfc	fsr2h,f,c
  8106   002B42  C016  FFDE         	movff	?___lwdiv,postinc2
  8107   002B46  C017  FFDD         	movff	?___lwdiv+1,postdec2
  8108   002B4A                     
  8109                           ;color.c: 291:     if (HSV->S == 0){HSV->H = 0;}
  8110   002B4A  EE20 F002          	lfsr	2,2
  8111   002B4E  5038               	movf	rgb_2_hsv@HSV^0,w,c
  8112   002B50  26D9               	addwf	fsr2l,f,c
  8113   002B52  5039               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  8114   002B54  22DA               	addwfc	fsr2h,f,c
  8115   002B56  50DE               	movf	postinc2,w,c
  8116   002B58  10DE               	iorwf	postinc2,w,c
  8117   002B5A  A4D8               	btfss	status,2,c
  8118   002B5C  EFB2  F015         	goto	u3991
  8119   002B60  EFB4  F015         	goto	u3990
  8120   002B64                     u3991:
  8121   002B64  EFBA  F015         	goto	l4987
  8122   002B68                     u3990:
  8123   002B68  C038  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  8124   002B6C  C039  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  8125   002B70  6ADE               	clrf	postinc2,c
  8126   002B72  6ADD               	clrf	postdec2,c
  8127   002B74                     l4987:
  8128                           
  8129                           ;color.c: 294:     HSV->V = cmax;
  8130   002B74  EE20 F004          	lfsr	2,4
  8131   002B78  5038               	movf	rgb_2_hsv@HSV^0,w,c
  8132   002B7A  26D9               	addwf	fsr2l,f,c
  8133   002B7C  5039               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  8134   002B7E  22DA               	addwfc	fsr2h,f,c
  8135   002B80  C0E0  FFDE         	movff	rgb_2_hsv@cmax,postinc2
  8136   002B84  C0E1  FFDD         	movff	rgb_2_hsv@cmax+1,postdec2
  8137   002B88  0012               	return		;funcret
  8138   002B8A                     __end_of_rgb_2_hsv:
  8139                           	callstack 0
  8140                           
  8141 ;; *************** function _min *****************
  8142 ;; Defined at:
  8143 ;;		line 258 in file "color.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  a               2   15[COMRAM] unsigned int 
  8146 ;;  b               2   17[COMRAM] unsigned int 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  2   15[COMRAM] unsigned int 
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8161 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8162 ;;Total ram usage:        4 bytes
  8163 ;; Hardware stack levels used: 1
  8164 ;; Hardware stack levels required when called: 6
  8165 ;; This function calls:
  8166 ;;		Nothing
  8167 ;; This function is called by:
  8168 ;;		_color_detect
  8169 ;;		_rgb_2_hsv
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text20
  8174   004ACA                     __ptext20:
  8175                           	callstack 0
  8176   004ACA                     _min:
  8177                           	callstack 23
  8178   004ACA                     
  8179                           ;color.c: 259:     if (a < b){return a;}
  8180   004ACA  5012               	movf	min@b^0,w,c
  8181   004ACC  5C10               	subwf	min@a^0,w,c
  8182   004ACE  5013               	movf	(min@b+1)^0,w,c
  8183   004AD0  5811               	subwfb	(min@a+1)^0,w,c
  8184   004AD2  B0D8               	btfsc	status,0,c
  8185   004AD4  EF6E  F025         	goto	u3641
  8186   004AD8  EF70  F025         	goto	u3640
  8187   004ADC                     u3641:
  8188   004ADC  EF76  F025         	goto	l214
  8189   004AE0                     u3640:
  8190   004AE0  C010  F010         	movff	min@a,?_min
  8191   004AE4  C011  F011         	movff	min@a+1,?_min+1
  8192   004AE8  EF7A  F025         	goto	l215
  8193   004AEC                     l214:
  8194   004AEC  C012  F010         	movff	min@b,?_min
  8195   004AF0  C013  F011         	movff	min@b+1,?_min+1
  8196   004AF4                     l215:
  8197   004AF4  0012               	return		;funcret
  8198   004AF6                     __end_of_min:
  8199                           	callstack 0
  8200                           
  8201 ;; *************** function _max *****************
  8202 ;; Defined at:
  8203 ;;		line 253 in file "color.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  a               2   15[COMRAM] unsigned int 
  8206 ;;  b               2   17[COMRAM] unsigned int 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  2   15[COMRAM] unsigned int 
  8211 ;; Registers used:
  8212 ;;		wreg, status,2, status,0
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8218 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8221 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8222 ;;Total ram usage:        4 bytes
  8223 ;; Hardware stack levels used: 1
  8224 ;; Hardware stack levels required when called: 6
  8225 ;; This function calls:
  8226 ;;		Nothing
  8227 ;; This function is called by:
  8228 ;;		_color_detect
  8229 ;;		_rgb_2_hsv
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text21
  8234   004AF6                     __ptext21:
  8235                           	callstack 0
  8236   004AF6                     _max:
  8237                           	callstack 23
  8238   004AF6                     
  8239                           ;color.c: 254:     if (a > b){return a;}
  8240   004AF6  5010               	movf	max@a^0,w,c
  8241   004AF8  5C12               	subwf	max@b^0,w,c
  8242   004AFA  5011               	movf	(max@a+1)^0,w,c
  8243   004AFC  5813               	subwfb	(max@b+1)^0,w,c
  8244   004AFE  B0D8               	btfsc	status,0,c
  8245   004B00  EF84  F025         	goto	u3651
  8246   004B04  EF86  F025         	goto	u3650
  8247   004B08                     u3651:
  8248   004B08  EF8C  F025         	goto	l209
  8249   004B0C                     u3650:
  8250   004B0C  C010  F010         	movff	max@a,?_max
  8251   004B10  C011  F011         	movff	max@a+1,?_max+1
  8252   004B14  EF90  F025         	goto	l210
  8253   004B18                     l209:
  8254   004B18  C012  F010         	movff	max@b,?_max
  8255   004B1C  C013  F011         	movff	max@b+1,?_max+1
  8256   004B20                     l210:
  8257   004B20  0012               	return		;funcret
  8258   004B22                     __end_of_max:
  8259                           	callstack 0
  8260                           
  8261 ;; *************** function ___lmul *****************
  8262 ;; Defined at:
  8263 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  multiplier      4   21[COMRAM] unsigned long 
  8266 ;;  multiplicand    4   25[COMRAM] unsigned long 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  product         4   29[COMRAM] unsigned long 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  4   21[COMRAM] unsigned long 
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8278 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8279 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8281 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8282 ;;Total ram usage:       12 bytes
  8283 ;; Hardware stack levels used: 1
  8284 ;; Hardware stack levels required when called: 6
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_rgb_2_hsv
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text22
  8293   00491A                     __ptext22:
  8294                           	callstack 0
  8295   00491A                     ___lmul:
  8296                           	callstack 23
  8297   00491A  0E00               	movlw	0
  8298   00491C  6E1E               	movwf	___lmul@product^0,c
  8299   00491E  0E00               	movlw	0
  8300   004920  6E1F               	movwf	(___lmul@product+1)^0,c
  8301   004922  0E00               	movlw	0
  8302   004924  6E20               	movwf	(___lmul@product+2)^0,c
  8303   004926  0E00               	movlw	0
  8304   004928  6E21               	movwf	(___lmul@product+3)^0,c
  8305   00492A                     l4893:
  8306   00492A  A016               	btfss	___lmul@multiplier^0,0,c
  8307   00492C  EF9A  F024         	goto	u3861
  8308   004930  EF9C  F024         	goto	u3860
  8309   004934                     u3861:
  8310   004934  EFA4  F024         	goto	l4897
  8311   004938                     u3860:
  8312   004938  501A               	movf	___lmul@multiplicand^0,w,c
  8313   00493A  261E               	addwf	___lmul@product^0,f,c
  8314   00493C  501B               	movf	(___lmul@multiplicand+1)^0,w,c
  8315   00493E  221F               	addwfc	(___lmul@product+1)^0,f,c
  8316   004940  501C               	movf	(___lmul@multiplicand+2)^0,w,c
  8317   004942  2220               	addwfc	(___lmul@product+2)^0,f,c
  8318   004944  501D               	movf	(___lmul@multiplicand+3)^0,w,c
  8319   004946  2221               	addwfc	(___lmul@product+3)^0,f,c
  8320   004948                     l4897:
  8321   004948  90D8               	bcf	status,0,c
  8322   00494A  361A               	rlcf	___lmul@multiplicand^0,f,c
  8323   00494C  361B               	rlcf	(___lmul@multiplicand+1)^0,f,c
  8324   00494E  361C               	rlcf	(___lmul@multiplicand+2)^0,f,c
  8325   004950  361D               	rlcf	(___lmul@multiplicand+3)^0,f,c
  8326   004952  90D8               	bcf	status,0,c
  8327   004954  3219               	rrcf	(___lmul@multiplier+3)^0,f,c
  8328   004956  3218               	rrcf	(___lmul@multiplier+2)^0,f,c
  8329   004958  3217               	rrcf	(___lmul@multiplier+1)^0,f,c
  8330   00495A  3216               	rrcf	___lmul@multiplier^0,f,c
  8331   00495C  5016               	movf	___lmul@multiplier^0,w,c
  8332   00495E  1017               	iorwf	(___lmul@multiplier+1)^0,w,c
  8333   004960  1018               	iorwf	(___lmul@multiplier+2)^0,w,c
  8334   004962  1019               	iorwf	(___lmul@multiplier+3)^0,w,c
  8335   004964  A4D8               	btfss	status,2,c
  8336   004966  EFB7  F024         	goto	u3871
  8337   00496A  EFB9  F024         	goto	u3870
  8338   00496E                     u3871:
  8339   00496E  EF95  F024         	goto	l4893
  8340   004972                     u3870:
  8341   004972  C01E  F016         	movff	___lmul@product,?___lmul
  8342   004976  C01F  F017         	movff	___lmul@product+1,?___lmul+1
  8343   00497A  C020  F018         	movff	___lmul@product+2,?___lmul+2
  8344   00497E  C021  F019         	movff	___lmul@product+3,?___lmul+3
  8345   004982  0012               	return		;funcret
  8346   004984                     __end_of___lmul:
  8347                           	callstack 0
  8348                           
  8349 ;; *************** function ___aldiv *****************
  8350 ;; Defined at:
  8351 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  dividend        4   33[COMRAM] long 
  8354 ;;  divisor         4   37[COMRAM] long 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  quotient        4   43[COMRAM] long 
  8357 ;;  sign            1   42[COMRAM] unsigned char 
  8358 ;;  counter         1   41[COMRAM] unsigned char 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  4   33[COMRAM] long 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2, status,0
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8368 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8369 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8371 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8372 ;;Total ram usage:       14 bytes
  8373 ;; Hardware stack levels used: 1
  8374 ;; Hardware stack levels required when called: 6
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_rgb_2_hsv
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text23
  8383   004296                     __ptext23:
  8384                           	callstack 0
  8385   004296                     ___aldiv:
  8386                           	callstack 23
  8387   004296  0E00               	movlw	0
  8388   004298  6E2B               	movwf	___aldiv@sign^0,c
  8389   00429A  BE29               	btfsc	(___aldiv@divisor+3)^0,7,c
  8390   00429C  EF54  F021         	goto	u3880
  8391   0042A0  EF52  F021         	goto	u3881
  8392   0042A4                     u3881:
  8393   0042A4  EF5E  F021         	goto	l4909
  8394   0042A8                     u3880:
  8395   0042A8  1E29               	comf	(___aldiv@divisor+3)^0,f,c
  8396   0042AA  1E28               	comf	(___aldiv@divisor+2)^0,f,c
  8397   0042AC  1E27               	comf	(___aldiv@divisor+1)^0,f,c
  8398   0042AE  6C26               	negf	___aldiv@divisor^0,c
  8399   0042B0  0E00               	movlw	0
  8400   0042B2  2227               	addwfc	(___aldiv@divisor+1)^0,f,c
  8401   0042B4  2228               	addwfc	(___aldiv@divisor+2)^0,f,c
  8402   0042B6  2229               	addwfc	(___aldiv@divisor+3)^0,f,c
  8403   0042B8  0E01               	movlw	1
  8404   0042BA  6E2B               	movwf	___aldiv@sign^0,c
  8405   0042BC                     l4909:
  8406   0042BC  BE25               	btfsc	(___aldiv@dividend+3)^0,7,c
  8407   0042BE  EF65  F021         	goto	u3890
  8408   0042C2  EF63  F021         	goto	u3891
  8409   0042C6                     u3891:
  8410   0042C6  EF6F  F021         	goto	l4915
  8411   0042CA                     u3890:
  8412   0042CA  1E25               	comf	(___aldiv@dividend+3)^0,f,c
  8413   0042CC  1E24               	comf	(___aldiv@dividend+2)^0,f,c
  8414   0042CE  1E23               	comf	(___aldiv@dividend+1)^0,f,c
  8415   0042D0  6C22               	negf	___aldiv@dividend^0,c
  8416   0042D2  0E00               	movlw	0
  8417   0042D4  2223               	addwfc	(___aldiv@dividend+1)^0,f,c
  8418   0042D6  2224               	addwfc	(___aldiv@dividend+2)^0,f,c
  8419   0042D8  2225               	addwfc	(___aldiv@dividend+3)^0,f,c
  8420   0042DA  0E01               	movlw	1
  8421   0042DC  1A2B               	xorwf	___aldiv@sign^0,f,c
  8422   0042DE                     l4915:
  8423   0042DE  0E00               	movlw	0
  8424   0042E0  6E2C               	movwf	___aldiv@quotient^0,c
  8425   0042E2  0E00               	movlw	0
  8426   0042E4  6E2D               	movwf	(___aldiv@quotient+1)^0,c
  8427   0042E6  0E00               	movlw	0
  8428   0042E8  6E2E               	movwf	(___aldiv@quotient+2)^0,c
  8429   0042EA  0E00               	movlw	0
  8430   0042EC  6E2F               	movwf	(___aldiv@quotient+3)^0,c
  8431   0042EE  5026               	movf	___aldiv@divisor^0,w,c
  8432   0042F0  1027               	iorwf	(___aldiv@divisor+1)^0,w,c
  8433   0042F2  1028               	iorwf	(___aldiv@divisor+2)^0,w,c
  8434   0042F4  1029               	iorwf	(___aldiv@divisor+3)^0,w,c
  8435   0042F6  B4D8               	btfsc	status,2,c
  8436   0042F8  EF80  F021         	goto	u3901
  8437   0042FC  EF82  F021         	goto	u3900
  8438   004300                     u3901:
  8439   004300  EFB8  F021         	goto	l4937
  8440   004304                     u3900:
  8441   004304  0E01               	movlw	1
  8442   004306  6E2A               	movwf	___aldiv@counter^0,c
  8443   004308  EF8C  F021         	goto	l4923
  8444   00430C                     l4921:
  8445   00430C  90D8               	bcf	status,0,c
  8446   00430E  3626               	rlcf	___aldiv@divisor^0,f,c
  8447   004310  3627               	rlcf	(___aldiv@divisor+1)^0,f,c
  8448   004312  3628               	rlcf	(___aldiv@divisor+2)^0,f,c
  8449   004314  3629               	rlcf	(___aldiv@divisor+3)^0,f,c
  8450   004316  2A2A               	incf	___aldiv@counter^0,f,c
  8451   004318                     l4923:
  8452   004318  AE29               	btfss	(___aldiv@divisor+3)^0,7,c
  8453   00431A  EF91  F021         	goto	u3911
  8454   00431E  EF93  F021         	goto	u3910
  8455   004322                     u3911:
  8456   004322  EF86  F021         	goto	l4921
  8457   004326                     u3910:
  8458   004326                     l4925:
  8459   004326  90D8               	bcf	status,0,c
  8460   004328  362C               	rlcf	___aldiv@quotient^0,f,c
  8461   00432A  362D               	rlcf	(___aldiv@quotient+1)^0,f,c
  8462   00432C  362E               	rlcf	(___aldiv@quotient+2)^0,f,c
  8463   00432E  362F               	rlcf	(___aldiv@quotient+3)^0,f,c
  8464   004330  5026               	movf	___aldiv@divisor^0,w,c
  8465   004332  5C22               	subwf	___aldiv@dividend^0,w,c
  8466   004334  5027               	movf	(___aldiv@divisor+1)^0,w,c
  8467   004336  5823               	subwfb	(___aldiv@dividend+1)^0,w,c
  8468   004338  5028               	movf	(___aldiv@divisor+2)^0,w,c
  8469   00433A  5824               	subwfb	(___aldiv@dividend+2)^0,w,c
  8470   00433C  5029               	movf	(___aldiv@divisor+3)^0,w,c
  8471   00433E  5825               	subwfb	(___aldiv@dividend+3)^0,w,c
  8472   004340  A0D8               	btfss	status,0,c
  8473   004342  EFA5  F021         	goto	u3921
  8474   004346  EFA7  F021         	goto	u3920
  8475   00434A                     u3921:
  8476   00434A  EFB0  F021         	goto	l4933
  8477   00434E                     u3920:
  8478   00434E  5026               	movf	___aldiv@divisor^0,w,c
  8479   004350  5E22               	subwf	___aldiv@dividend^0,f,c
  8480   004352  5027               	movf	(___aldiv@divisor+1)^0,w,c
  8481   004354  5A23               	subwfb	(___aldiv@dividend+1)^0,f,c
  8482   004356  5028               	movf	(___aldiv@divisor+2)^0,w,c
  8483   004358  5A24               	subwfb	(___aldiv@dividend+2)^0,f,c
  8484   00435A  5029               	movf	(___aldiv@divisor+3)^0,w,c
  8485   00435C  5A25               	subwfb	(___aldiv@dividend+3)^0,f,c
  8486   00435E  802C               	bsf	___aldiv@quotient^0,0,c
  8487   004360                     l4933:
  8488   004360  90D8               	bcf	status,0,c
  8489   004362  3229               	rrcf	(___aldiv@divisor+3)^0,f,c
  8490   004364  3228               	rrcf	(___aldiv@divisor+2)^0,f,c
  8491   004366  3227               	rrcf	(___aldiv@divisor+1)^0,f,c
  8492   004368  3226               	rrcf	___aldiv@divisor^0,f,c
  8493   00436A  2E2A               	decfsz	___aldiv@counter^0,f,c
  8494   00436C  EF93  F021         	goto	l4925
  8495   004370                     l4937:
  8496   004370  502B               	movf	___aldiv@sign^0,w,c
  8497   004372  B4D8               	btfsc	status,2,c
  8498   004374  EFBE  F021         	goto	u3931
  8499   004378  EFC0  F021         	goto	u3930
  8500   00437C                     u3931:
  8501   00437C  EFC8  F021         	goto	l4941
  8502   004380                     u3930:
  8503   004380  1E2F               	comf	(___aldiv@quotient+3)^0,f,c
  8504   004382  1E2E               	comf	(___aldiv@quotient+2)^0,f,c
  8505   004384  1E2D               	comf	(___aldiv@quotient+1)^0,f,c
  8506   004386  6C2C               	negf	___aldiv@quotient^0,c
  8507   004388  0E00               	movlw	0
  8508   00438A  222D               	addwfc	(___aldiv@quotient+1)^0,f,c
  8509   00438C  222E               	addwfc	(___aldiv@quotient+2)^0,f,c
  8510   00438E  222F               	addwfc	(___aldiv@quotient+3)^0,f,c
  8511   004390                     l4941:
  8512   004390  C02C  F022         	movff	___aldiv@quotient,?___aldiv
  8513   004394  C02D  F023         	movff	___aldiv@quotient+1,?___aldiv+1
  8514   004398  C02E  F024         	movff	___aldiv@quotient+2,?___aldiv+2
  8515   00439C  C02F  F025         	movff	___aldiv@quotient+3,?___aldiv+3
  8516   0043A0  0012               	return		;funcret
  8517   0043A2                     __end_of___aldiv:
  8518                           	callstack 0
  8519                           
  8520 ;; *************** function _color_read *****************
  8521 ;; Defined at:
  8522 ;;		line 77 in file "color.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  RGBC            2   19[COMRAM] PTR struct RGBC_val
  8525 ;;		 -> main@RGBC(8), 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;		None
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      void 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8539 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8540 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8541 ;;Total ram usage:        9 bytes
  8542 ;; Hardware stack levels used: 1
  8543 ;; Hardware stack levels required when called: 8
  8544 ;; This function calls:
  8545 ;;		_I2C_2_Master_Read
  8546 ;;		_I2C_2_Master_RepStart
  8547 ;;		_I2C_2_Master_Start
  8548 ;;		_I2C_2_Master_Stop
  8549 ;;		_I2C_2_Master_Write
  8550 ;; This function is called by:
  8551 ;;		_main
  8552 ;;		_color_calibration
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           	psect	text24
  8557   0039AA                     __ptext24:
  8558                           	callstack 0
  8559   0039AA                     _color_read:
  8560                           	callstack 22
  8561   0039AA                     
  8562                           ;color.c: 77: void color_read(RGBC_val *RGBC);color.c: 78: {;color.c: 79:  I2C_2_Master_
      +                          Start();
  8563   0039AA  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  8564                           
  8565                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8566   0039AE  0E52               	movlw	82
  8567   0039B0  EC6A  F026         	call	_I2C_2_Master_Write
  8568                           
  8569                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x16);
  8570   0039B4  0EB6               	movlw	182
  8571   0039B6  EC6A  F026         	call	_I2C_2_Master_Write
  8572                           
  8573                           ;color.c: 82:  I2C_2_Master_RepStart();
  8574   0039BA  EC85  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8575                           
  8576                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8577   0039BE  0E53               	movlw	83
  8578   0039C0  EC6A  F026         	call	_I2C_2_Master_Write
  8579   0039C4                     
  8580                           ;color.c: 84:  RGBC->R=I2C_2_Master_Read(1);
  8581   0039C4  0E01               	movlw	1
  8582   0039C6  EC0D  F025         	call	_I2C_2_Master_Read
  8583   0039CA  6E16               	movwf	??_color_read^0,c
  8584   0039CC  6A17               	clrf	(??_color_read+1)^0,c
  8585   0039CE  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8586   0039D2  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8587   0039D6  C016  FFDE         	movff	??_color_read,postinc2
  8588   0039DA  C017  FFDD         	movff	??_color_read+1,postdec2
  8589   0039DE                     
  8590                           ;color.c: 85:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  8591   0039DE  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8592   0039E2  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8593   0039E6  CFDE F016          	movff	postinc2,??_color_read
  8594   0039EA  CFDD F017          	movff	postdec2,??_color_read+1
  8595   0039EE  0E00               	movlw	0
  8596   0039F0  EC0D  F025         	call	_I2C_2_Master_Read
  8597   0039F4  6E18               	movwf	(??_color_read+2)^0,c
  8598   0039F6  5018               	movf	(??_color_read+2)^0,w,c
  8599   0039F8  6E1A               	movwf	(??_color_read+4)^0,c
  8600   0039FA  6A19               	clrf	(??_color_read+3)^0,c
  8601   0039FC  5016               	movf	??_color_read^0,w,c
  8602   0039FE  1019               	iorwf	(??_color_read+3)^0,w,c
  8603   003A00  6E1B               	movwf	(??_color_read+5)^0,c
  8604   003A02  5017               	movf	(??_color_read+1)^0,w,c
  8605   003A04  101A               	iorwf	(??_color_read+4)^0,w,c
  8606   003A06  6E1C               	movwf	(??_color_read+6)^0,c
  8607   003A08  C014  FFD9         	movff	color_read@RGBC,fsr2l
  8608   003A0C  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  8609   003A10  C01B  FFDE         	movff	??_color_read+5,postinc2
  8610   003A14  C01C  FFDD         	movff	??_color_read+6,postdec2
  8611                           
  8612                           ;color.c: 86:  I2C_2_Master_Stop();
  8613   003A18  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  8614                           
  8615                           ;color.c: 88:     I2C_2_Master_Start();
  8616   003A1C  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  8617                           
  8618                           ;color.c: 89:  I2C_2_Master_Write(0x52 | 0x00);
  8619   003A20  0E52               	movlw	82
  8620   003A22  EC6A  F026         	call	_I2C_2_Master_Write
  8621                           
  8622                           ;color.c: 90:  I2C_2_Master_Write(0xA0 | 0x18);
  8623   003A26  0EB8               	movlw	184
  8624   003A28  EC6A  F026         	call	_I2C_2_Master_Write
  8625                           
  8626                           ;color.c: 91:  I2C_2_Master_RepStart();
  8627   003A2C  EC85  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8628                           
  8629                           ;color.c: 92:  I2C_2_Master_Write(0x52 | 0x01);
  8630   003A30  0E53               	movlw	83
  8631   003A32  EC6A  F026         	call	_I2C_2_Master_Write
  8632   003A36                     
  8633                           ;color.c: 93:  RGBC->G=I2C_2_Master_Read(1);
  8634   003A36  0E01               	movlw	1
  8635   003A38  EC0D  F025         	call	_I2C_2_Master_Read
  8636   003A3C  6E16               	movwf	??_color_read^0,c
  8637   003A3E  6A17               	clrf	(??_color_read+1)^0,c
  8638   003A40  EE20 F002          	lfsr	2,2
  8639   003A44  5014               	movf	color_read@RGBC^0,w,c
  8640   003A46  26D9               	addwf	fsr2l,f,c
  8641   003A48  5015               	movf	(color_read@RGBC+1)^0,w,c
  8642   003A4A  22DA               	addwfc	fsr2h,f,c
  8643   003A4C  C016  FFDE         	movff	??_color_read,postinc2
  8644   003A50  C017  FFDD         	movff	??_color_read+1,postdec2
  8645   003A54                     
  8646                           ;color.c: 94:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  8647   003A54  EE20 F002          	lfsr	2,2
  8648   003A58  5014               	movf	color_read@RGBC^0,w,c
  8649   003A5A  26D9               	addwf	fsr2l,f,c
  8650   003A5C  5015               	movf	(color_read@RGBC+1)^0,w,c
  8651   003A5E  22DA               	addwfc	fsr2h,f,c
  8652   003A60  CFDE F016          	movff	postinc2,??_color_read
  8653   003A64  CFDD F017          	movff	postdec2,??_color_read+1
  8654   003A68  0E00               	movlw	0
  8655   003A6A  EC0D  F025         	call	_I2C_2_Master_Read
  8656   003A6E  6E18               	movwf	(??_color_read+2)^0,c
  8657   003A70  5018               	movf	(??_color_read+2)^0,w,c
  8658   003A72  6E1A               	movwf	(??_color_read+4)^0,c
  8659   003A74  6A19               	clrf	(??_color_read+3)^0,c
  8660   003A76  5016               	movf	??_color_read^0,w,c
  8661   003A78  1019               	iorwf	(??_color_read+3)^0,w,c
  8662   003A7A  6E1B               	movwf	(??_color_read+5)^0,c
  8663   003A7C  5017               	movf	(??_color_read+1)^0,w,c
  8664   003A7E  101A               	iorwf	(??_color_read+4)^0,w,c
  8665   003A80  6E1C               	movwf	(??_color_read+6)^0,c
  8666   003A82  EE20 F002          	lfsr	2,2
  8667   003A86  5014               	movf	color_read@RGBC^0,w,c
  8668   003A88  26D9               	addwf	fsr2l,f,c
  8669   003A8A  5015               	movf	(color_read@RGBC+1)^0,w,c
  8670   003A8C  22DA               	addwfc	fsr2h,f,c
  8671   003A8E  C01B  FFDE         	movff	??_color_read+5,postinc2
  8672   003A92  C01C  FFDD         	movff	??_color_read+6,postdec2
  8673                           
  8674                           ;color.c: 95:  I2C_2_Master_Stop();
  8675   003A96  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  8676                           
  8677                           ;color.c: 97:     I2C_2_Master_Start();
  8678   003A9A  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  8679                           
  8680                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8681   003A9E  0E52               	movlw	82
  8682   003AA0  EC6A  F026         	call	_I2C_2_Master_Write
  8683                           
  8684                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x1A);
  8685   003AA4  0EBA               	movlw	186
  8686   003AA6  EC6A  F026         	call	_I2C_2_Master_Write
  8687                           
  8688                           ;color.c: 100:  I2C_2_Master_RepStart();
  8689   003AAA  EC85  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8690                           
  8691                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8692   003AAE  0E53               	movlw	83
  8693   003AB0  EC6A  F026         	call	_I2C_2_Master_Write
  8694   003AB4                     
  8695                           ;color.c: 102:  RGBC->B=I2C_2_Master_Read(1);
  8696   003AB4  0E01               	movlw	1
  8697   003AB6  EC0D  F025         	call	_I2C_2_Master_Read
  8698   003ABA  6E16               	movwf	??_color_read^0,c
  8699   003ABC  6A17               	clrf	(??_color_read+1)^0,c
  8700   003ABE  EE20 F004          	lfsr	2,4
  8701   003AC2  5014               	movf	color_read@RGBC^0,w,c
  8702   003AC4  26D9               	addwf	fsr2l,f,c
  8703   003AC6  5015               	movf	(color_read@RGBC+1)^0,w,c
  8704   003AC8  22DA               	addwfc	fsr2h,f,c
  8705   003ACA  C016  FFDE         	movff	??_color_read,postinc2
  8706   003ACE  C017  FFDD         	movff	??_color_read+1,postdec2
  8707   003AD2                     
  8708                           ;color.c: 103:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  8709   003AD2  EE20 F004          	lfsr	2,4
  8710   003AD6  5014               	movf	color_read@RGBC^0,w,c
  8711   003AD8  26D9               	addwf	fsr2l,f,c
  8712   003ADA  5015               	movf	(color_read@RGBC+1)^0,w,c
  8713   003ADC  22DA               	addwfc	fsr2h,f,c
  8714   003ADE  CFDE F016          	movff	postinc2,??_color_read
  8715   003AE2  CFDD F017          	movff	postdec2,??_color_read+1
  8716   003AE6  0E00               	movlw	0
  8717   003AE8  EC0D  F025         	call	_I2C_2_Master_Read
  8718   003AEC  6E18               	movwf	(??_color_read+2)^0,c
  8719   003AEE  5018               	movf	(??_color_read+2)^0,w,c
  8720   003AF0  6E1A               	movwf	(??_color_read+4)^0,c
  8721   003AF2  6A19               	clrf	(??_color_read+3)^0,c
  8722   003AF4  5016               	movf	??_color_read^0,w,c
  8723   003AF6  1019               	iorwf	(??_color_read+3)^0,w,c
  8724   003AF8  6E1B               	movwf	(??_color_read+5)^0,c
  8725   003AFA  5017               	movf	(??_color_read+1)^0,w,c
  8726   003AFC  101A               	iorwf	(??_color_read+4)^0,w,c
  8727   003AFE  6E1C               	movwf	(??_color_read+6)^0,c
  8728   003B00  EE20 F004          	lfsr	2,4
  8729   003B04  5014               	movf	color_read@RGBC^0,w,c
  8730   003B06  26D9               	addwf	fsr2l,f,c
  8731   003B08  5015               	movf	(color_read@RGBC+1)^0,w,c
  8732   003B0A  22DA               	addwfc	fsr2h,f,c
  8733   003B0C  C01B  FFDE         	movff	??_color_read+5,postinc2
  8734   003B10  C01C  FFDD         	movff	??_color_read+6,postdec2
  8735                           
  8736                           ;color.c: 104:  I2C_2_Master_Stop();
  8737   003B14  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  8738                           
  8739                           ;color.c: 106:     I2C_2_Master_Start();
  8740   003B18  EC80  F026         	call	_I2C_2_Master_Start	;wreg free
  8741                           
  8742                           ;color.c: 107:  I2C_2_Master_Write(0x52 | 0x00);
  8743   003B1C  0E52               	movlw	82
  8744   003B1E  EC6A  F026         	call	_I2C_2_Master_Write
  8745                           
  8746                           ;color.c: 108:  I2C_2_Master_Write(0xA0 | 0x14);
  8747   003B22  0EB4               	movlw	180
  8748   003B24  EC6A  F026         	call	_I2C_2_Master_Write
  8749                           
  8750                           ;color.c: 109:  I2C_2_Master_RepStart();
  8751   003B28  EC85  F026         	call	_I2C_2_Master_RepStart	;wreg free
  8752                           
  8753                           ;color.c: 110:  I2C_2_Master_Write(0x52 | 0x01);
  8754   003B2C  0E53               	movlw	83
  8755   003B2E  EC6A  F026         	call	_I2C_2_Master_Write
  8756   003B32                     
  8757                           ;color.c: 111:  RGBC->C=I2C_2_Master_Read(1);
  8758   003B32  0E01               	movlw	1
  8759   003B34  EC0D  F025         	call	_I2C_2_Master_Read
  8760   003B38  6E16               	movwf	??_color_read^0,c
  8761   003B3A  6A17               	clrf	(??_color_read+1)^0,c
  8762   003B3C  EE20 F006          	lfsr	2,6
  8763   003B40  5014               	movf	color_read@RGBC^0,w,c
  8764   003B42  26D9               	addwf	fsr2l,f,c
  8765   003B44  5015               	movf	(color_read@RGBC+1)^0,w,c
  8766   003B46  22DA               	addwfc	fsr2h,f,c
  8767   003B48  C016  FFDE         	movff	??_color_read,postinc2
  8768   003B4C  C017  FFDD         	movff	??_color_read+1,postdec2
  8769   003B50                     
  8770                           ;color.c: 112:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  8771   003B50  EE20 F006          	lfsr	2,6
  8772   003B54  5014               	movf	color_read@RGBC^0,w,c
  8773   003B56  26D9               	addwf	fsr2l,f,c
  8774   003B58  5015               	movf	(color_read@RGBC+1)^0,w,c
  8775   003B5A  22DA               	addwfc	fsr2h,f,c
  8776   003B5C  CFDE F016          	movff	postinc2,??_color_read
  8777   003B60  CFDD F017          	movff	postdec2,??_color_read+1
  8778   003B64  0E00               	movlw	0
  8779   003B66  EC0D  F025         	call	_I2C_2_Master_Read
  8780   003B6A  6E18               	movwf	(??_color_read+2)^0,c
  8781   003B6C  5018               	movf	(??_color_read+2)^0,w,c
  8782   003B6E  6E1A               	movwf	(??_color_read+4)^0,c
  8783   003B70  6A19               	clrf	(??_color_read+3)^0,c
  8784   003B72  5016               	movf	??_color_read^0,w,c
  8785   003B74  1019               	iorwf	(??_color_read+3)^0,w,c
  8786   003B76  6E1B               	movwf	(??_color_read+5)^0,c
  8787   003B78  5017               	movf	(??_color_read+1)^0,w,c
  8788   003B7A  101A               	iorwf	(??_color_read+4)^0,w,c
  8789   003B7C  6E1C               	movwf	(??_color_read+6)^0,c
  8790   003B7E  EE20 F006          	lfsr	2,6
  8791   003B82  5014               	movf	color_read@RGBC^0,w,c
  8792   003B84  26D9               	addwf	fsr2l,f,c
  8793   003B86  5015               	movf	(color_read@RGBC+1)^0,w,c
  8794   003B88  22DA               	addwfc	fsr2h,f,c
  8795   003B8A  C01B  FFDE         	movff	??_color_read+5,postinc2
  8796   003B8E  C01C  FFDD         	movff	??_color_read+6,postdec2
  8797                           
  8798                           ;color.c: 113:  I2C_2_Master_Stop();
  8799   003B92  EC7B  F026         	call	_I2C_2_Master_Stop	;wreg free
  8800   003B96  0012               	return		;funcret
  8801   003B98                     __end_of_color_read:
  8802                           	callstack 0
  8803                           
  8804 ;; *************** function _I2C_2_Master_Write *****************
  8805 ;; Defined at:
  8806 ;;		line 45 in file "i2c.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  data_byte       1    wreg     unsigned char 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  data_byte       1   16[COMRAM] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8824 ;;Total ram usage:        1 bytes
  8825 ;; Hardware stack levels used: 1
  8826 ;; Hardware stack levels required when called: 7
  8827 ;; This function calls:
  8828 ;;		_I2C_2_Master_Idle
  8829 ;; This function is called by:
  8830 ;;		_color_clear_init_interrupts
  8831 ;;		_color_writetoaddr
  8832 ;;		_color_read
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           	psect	text25
  8837   004CD4                     __ptext25:
  8838                           	callstack 0
  8839   004CD4                     _I2C_2_Master_Write:
  8840                           	callstack 22
  8841                           
  8842                           ;incstack = 0
  8843                           ;I2C_2_Master_Write@data_byte stored from wreg
  8844   004CD4  6E11               	movwf	I2C_2_Master_Write@data_byte^0,c
  8845   004CD6                     
  8846                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8847   004CD6  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  8848   004CDA                     
  8849                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8850   004CDA  C011  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8851   004CDE  0012               	return		;funcret
  8852   004CE0                     __end_of_I2C_2_Master_Write:
  8853                           	callstack 0
  8854                           
  8855 ;; *************** function _I2C_2_Master_Stop *****************
  8856 ;; Defined at:
  8857 ;;		line 39 in file "i2c.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      void 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8875 ;;Total ram usage:        0 bytes
  8876 ;; Hardware stack levels used: 1
  8877 ;; Hardware stack levels required when called: 7
  8878 ;; This function calls:
  8879 ;;		_I2C_2_Master_Idle
  8880 ;; This function is called by:
  8881 ;;		_color_clear_init_interrupts
  8882 ;;		_color_writetoaddr
  8883 ;;		_color_read
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text26
  8888   004CF6                     __ptext26:
  8889                           	callstack 0
  8890   004CF6                     _I2C_2_Master_Stop:
  8891                           	callstack 22
  8892   004CF6                     
  8893                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8894   004CF6  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  8895   004CFA                     
  8896                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8897   004CFA  010E               	movlb	14	; () banked
  8898   004CFC  85DA               	bsf	218,2,b	;volatile
  8899   004CFE                     
  8900                           ; BSR set to: 14
  8901   004CFE  0012               	return		;funcret
  8902   004D00                     __end_of_I2C_2_Master_Stop:
  8903                           	callstack 0
  8904                           
  8905 ;; *************** function _I2C_2_Master_Start *****************
  8906 ;; Defined at:
  8907 ;;		line 27 in file "i2c.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;		None
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      void 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8925 ;;Total ram usage:        0 bytes
  8926 ;; Hardware stack levels used: 1
  8927 ;; Hardware stack levels required when called: 7
  8928 ;; This function calls:
  8929 ;;		_I2C_2_Master_Idle
  8930 ;; This function is called by:
  8931 ;;		_color_clear_init_interrupts
  8932 ;;		_color_writetoaddr
  8933 ;;		_color_read
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text27
  8938   004D00                     __ptext27:
  8939                           	callstack 0
  8940   004D00                     _I2C_2_Master_Start:
  8941                           	callstack 22
  8942   004D00                     
  8943                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8944   004D00  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  8945   004D04                     
  8946                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8947   004D04  010E               	movlb	14	; () banked
  8948   004D06  81DA               	bsf	218,0,b	;volatile
  8949   004D08                     
  8950                           ; BSR set to: 14
  8951   004D08  0012               	return		;funcret
  8952   004D0A                     __end_of_I2C_2_Master_Start:
  8953                           	callstack 0
  8954                           
  8955 ;; *************** function _I2C_2_Master_RepStart *****************
  8956 ;; Defined at:
  8957 ;;		line 33 in file "i2c.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;		None
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;		None
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  1    wreg      void 
  8964 ;; Registers used:
  8965 ;;		wreg, status,2, status,0, cstack
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8975 ;;Total ram usage:        0 bytes
  8976 ;; Hardware stack levels used: 1
  8977 ;; Hardware stack levels required when called: 7
  8978 ;; This function calls:
  8979 ;;		_I2C_2_Master_Idle
  8980 ;; This function is called by:
  8981 ;;		_color_read
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           	psect	text28
  8986   004D0A                     __ptext28:
  8987                           	callstack 0
  8988   004D0A                     _I2C_2_Master_RepStart:
  8989                           	callstack 22
  8990   004D0A                     
  8991                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8992   004D0A  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  8993   004D0E                     
  8994                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8995   004D0E  010E               	movlb	14	; () banked
  8996   004D10  83DA               	bsf	218,1,b	;volatile
  8997   004D12                     
  8998                           ; BSR set to: 14
  8999   004D12  0012               	return		;funcret
  9000   004D14                     __end_of_I2C_2_Master_RepStart:
  9001                           	callstack 0
  9002                           
  9003 ;; *************** function _I2C_2_Master_Read *****************
  9004 ;; Defined at:
  9005 ;;		line 51 in file "i2c.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  ack             1    wreg     unsigned char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  ack             1   17[COMRAM] unsigned char 
  9010 ;;  tmp             1   18[COMRAM] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9021 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9023 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9024 ;;Total ram usage:        3 bytes
  9025 ;; Hardware stack levels used: 1
  9026 ;; Hardware stack levels required when called: 7
  9027 ;; This function calls:
  9028 ;;		_I2C_2_Master_Idle
  9029 ;; This function is called by:
  9030 ;;		_color_read
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text29
  9035   004A1A                     __ptext29:
  9036                           	callstack 0
  9037   004A1A                     _I2C_2_Master_Read:
  9038                           	callstack 22
  9039                           
  9040                           ; BSR set to: 14
  9041                           ;incstack = 0
  9042                           ;I2C_2_Master_Read@ack stored from wreg
  9043   004A1A  6E12               	movwf	I2C_2_Master_Read@ack^0,c
  9044   004A1C                     
  9045                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9046   004A1C  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  9047   004A20                     
  9048                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9049   004A20  010E               	movlb	14	; () banked
  9050   004A22  87DA               	bsf	218,3,b	;volatile
  9051                           
  9052                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9053   004A24  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  9054   004A28                     
  9055                           ;i2c.c: 57:   tmp = SSP2BUF;
  9056   004A28  CED5 F013          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9057                           
  9058                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9059   004A2C  ECBA  F025         	call	_I2C_2_Master_Idle	;wreg free
  9060   004A30                     
  9061                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9062   004A30  5012               	movf	I2C_2_Master_Read@ack^0,w,c
  9063   004A32  B4D8               	btfsc	status,2,c
  9064   004A34  EF1E  F025         	goto	u1941
  9065   004A38  EF22  F025         	goto	u1940
  9066   004A3C                     u1941:
  9067   004A3C  6A11               	clrf	??_I2C_2_Master_Read^0,c
  9068   004A3E  2A11               	incf	??_I2C_2_Master_Read^0,f,c
  9069   004A40  EF23  F025         	goto	u1958
  9070   004A44                     u1940:
  9071   004A44  6A11               	clrf	??_I2C_2_Master_Read^0,c
  9072   004A46                     u1958:
  9073   004A46  3A11               	swapf	??_I2C_2_Master_Read^0,f,c
  9074   004A48  4611               	rlncf	??_I2C_2_Master_Read^0,f,c
  9075   004A4A  010E               	movlb	14	; () banked
  9076   004A4C  51DA               	movf	218,w,b	;volatile
  9077   004A4E  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  9078   004A50  0BDF               	andlw	-33
  9079   004A52  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  9080   004A54  6FDA               	movwf	218,b	;volatile
  9081   004A56                     
  9082                           ; BSR set to: 14
  9083                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9084   004A56  89DA               	bsf	218,4,b	;volatile
  9085   004A58                     
  9086                           ; BSR set to: 14
  9087                           ;i2c.c: 61:   return tmp;
  9088   004A58  5013               	movf	I2C_2_Master_Read@tmp^0,w,c
  9089   004A5A                     
  9090                           ; BSR set to: 14
  9091   004A5A  0012               	return		;funcret
  9092   004A5C                     __end_of_I2C_2_Master_Read:
  9093                           	callstack 0
  9094                           
  9095 ;; *************** function _I2C_2_Master_Idle *****************
  9096 ;; Defined at:
  9097 ;;		line 22 in file "i2c.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      void 
  9104 ;; Registers used:
  9105 ;;		wreg, status,2, status,0
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9115 ;;Total ram usage:        1 bytes
  9116 ;; Hardware stack levels used: 1
  9117 ;; Hardware stack levels required when called: 6
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_I2C_2_Master_Start
  9122 ;;		_I2C_2_Master_RepStart
  9123 ;;		_I2C_2_Master_Stop
  9124 ;;		_I2C_2_Master_Write
  9125 ;;		_I2C_2_Master_Read
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text30
  9130   004B74                     __ptext30:
  9131                           	callstack 0
  9132   004B74                     _I2C_2_Master_Idle:
  9133                           	callstack 22
  9134   004B74                     l258:
  9135   004B74  010E               	movlb	14	; () banked
  9136   004B76  B5D8               	btfsc	216,2,b	;volatile
  9137   004B78  EFC0  F025         	goto	u1801
  9138   004B7C  EFC2  F025         	goto	u1800
  9139   004B80                     u1801:
  9140   004B80  EFBA  F025         	goto	l258
  9141   004B84                     u1800:
  9142   004B84                     
  9143                           ; BSR set to: 14
  9144   004B84  CEDA F010          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9145   004B88  0E1F               	movlw	31
  9146   004B8A  1610               	andwf	??_I2C_2_Master_Idle^0,f,c
  9147   004B8C  A4D8               	btfss	status,2,c
  9148   004B8E  EFCB  F025         	goto	u1811
  9149   004B92  EFCD  F025         	goto	u1810
  9150   004B96                     u1811:
  9151   004B96  EFBA  F025         	goto	l258
  9152   004B9A                     u1810:
  9153   004B9A                     
  9154                           ; BSR set to: 14
  9155   004B9A  0012               	return		;funcret
  9156   004B9C                     __end_of_I2C_2_Master_Idle:
  9157                           	callstack 0
  9158                           
  9159 ;; *************** function _calibration *****************
  9160 ;; Defined at:
  9161 ;;		line 679 in file "dc_motor.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  9164 ;;		 -> main@motorL(10), 
  9165 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  9166 ;;		 -> main@motorR(10), 
  9167 ;;  turnSpeed       1   52[COMRAM] unsigned char 
  9168 ;;  turnDuration    2   53[COMRAM] PTR unsigned char 
  9169 ;;		 -> main@turnDuration(1), 
  9170 ;;  turnRamp        1   55[COMRAM] unsigned char 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;		None
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9185 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9186 ;;Total ram usage:       10 bytes
  9187 ;; Hardware stack levels used: 1
  9188 ;; Hardware stack levels required when called: 9
  9189 ;; This function calls:
  9190 ;;		_turnLeft
  9191 ;;		_turnRight
  9192 ;; This function is called by:
  9193 ;;		_main
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           	psect	text31
  9198   00332C                     __ptext31:
  9199                           	callstack 0
  9200   00332C                     _calibration:
  9201                           	callstack 21
  9202   00332C                     
  9203                           ;dc_motor.c: 679: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 680: {;dc_motor.c: 682:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9204   00332C  C031  F023         	movff	calibration@mL,turnLeft@mL
  9205   003330  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9206   003334  C033  F025         	movff	calibration@mR,turnLeft@mR
  9207   003338  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9208   00333C  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9209   003340  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9210   003344  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9211   003348  50DF               	movf	indf2,w,c
  9212   00334A  6E28               	movwf	turnLeft@turnDuration^0,c
  9213   00334C  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9214   003350  ECA8  F01F         	call	_turnLeft	;wreg free
  9215   003354                     
  9216                           ;dc_motor.c: 683:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9217   003354  0E05               	movlw	5
  9218   003356  6E3A               	movwf	(??_calibration+1)^0,c
  9219   003358  0E0F               	movlw	15
  9220   00335A  6E39               	movwf	??_calibration^0,c
  9221   00335C  0EF1               	movlw	241
  9222   00335E                     u5877:
  9223   00335E  2EE8               	decfsz	wreg,f,c
  9224   003360  D7FE               	bra	u5877
  9225   003362  2E39               	decfsz	??_calibration^0,f,c
  9226   003364  D7FC               	bra	u5877
  9227   003366  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9228   003368  D7FA               	bra	u5877
  9229   00336A  0000               	nop	
  9230   00336C                     
  9231                           ;dc_motor.c: 684:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9232   00336C  C031  F023         	movff	calibration@mL,turnLeft@mL
  9233   003370  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9234   003374  C033  F025         	movff	calibration@mR,turnLeft@mR
  9235   003378  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9236   00337C  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9237   003380  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9238   003384  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9239   003388  50DF               	movf	indf2,w,c
  9240   00338A  6E28               	movwf	turnLeft@turnDuration^0,c
  9241   00338C  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9242   003390  ECA8  F01F         	call	_turnLeft	;wreg free
  9243                           
  9244                           ;dc_motor.c: 685:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9245   003394  0E05               	movlw	5
  9246   003396  6E3A               	movwf	(??_calibration+1)^0,c
  9247   003398  0E0F               	movlw	15
  9248   00339A  6E39               	movwf	??_calibration^0,c
  9249   00339C  0EF1               	movlw	241
  9250   00339E                     u5887:
  9251   00339E  2EE8               	decfsz	wreg,f,c
  9252   0033A0  D7FE               	bra	u5887
  9253   0033A2  2E39               	decfsz	??_calibration^0,f,c
  9254   0033A4  D7FC               	bra	u5887
  9255   0033A6  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9256   0033A8  D7FA               	bra	u5887
  9257   0033AA  0000               	nop	
  9258   0033AC                     
  9259                           ;dc_motor.c: 686:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9260   0033AC  C031  F023         	movff	calibration@mL,turnRight@mL
  9261   0033B0  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9262   0033B4  C033  F025         	movff	calibration@mR,turnRight@mR
  9263   0033B8  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9264   0033BC  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9265   0033C0  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9266   0033C4  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9267   0033C8  50DF               	movf	indf2,w,c
  9268   0033CA  6E28               	movwf	turnRight@turnDuration^0,c
  9269   0033CC  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9270   0033D0  ECBB  F01E         	call	_turnRight	;wreg free
  9271   0033D4                     
  9272                           ;dc_motor.c: 687:     _delay((unsigned long)((50)*(64000000/4000.0)));
  9273   0033D4  0E05               	movlw	5
  9274   0033D6  6E3A               	movwf	(??_calibration+1)^0,c
  9275   0033D8  0E0F               	movlw	15
  9276   0033DA  6E39               	movwf	??_calibration^0,c
  9277   0033DC  0EF1               	movlw	241
  9278   0033DE                     u5897:
  9279   0033DE  2EE8               	decfsz	wreg,f,c
  9280   0033E0  D7FE               	bra	u5897
  9281   0033E2  2E39               	decfsz	??_calibration^0,f,c
  9282   0033E4  D7FC               	bra	u5897
  9283   0033E6  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9284   0033E8  D7FA               	bra	u5897
  9285   0033EA  0000               	nop	
  9286                           
  9287                           ;dc_motor.c: 688:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9288   0033EC  C031  F023         	movff	calibration@mL,turnRight@mL
  9289   0033F0  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9290   0033F4  C033  F025         	movff	calibration@mR,turnRight@mR
  9291   0033F8  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9292   0033FC  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9293   003400  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9294   003404  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9295   003408  50DF               	movf	indf2,w,c
  9296   00340A  6E28               	movwf	turnRight@turnDuration^0,c
  9297   00340C  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9298   003410  ECBB  F01E         	call	_turnRight	;wreg free
  9299   003414                     l749:
  9300   003414  A48E               	btfss	142,2,c	;volatile
  9301   003416  EF0F  F01A         	goto	u4311
  9302   00341A  EF11  F01A         	goto	u4310
  9303   00341E                     u4311:
  9304   00341E  EF18  F01A         	goto	l753
  9305   003422                     u4310:
  9306   003422  B68E               	btfsc	142,3,c	;volatile
  9307   003424  EF16  F01A         	goto	u4321
  9308   003428  EF18  F01A         	goto	u4320
  9309   00342C                     u4321:
  9310   00342C  EF0A  F01A         	goto	l749
  9311   003430                     u4320:
  9312   003430                     l753:
  9313                           
  9314                           ;dc_motor.c: 693:         if (!PORTFbits.RF2 && *turnDuration>0) {
  9315   003430  B48E               	btfsc	142,2,c	;volatile
  9316   003432  EF1D  F01A         	goto	u4331
  9317   003436  EF1F  F01A         	goto	u4330
  9318   00343A                     u4331:
  9319   00343A  EF33  F01A         	goto	l754
  9320   00343E                     u4330:
  9321   00343E  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9322   003442  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9323   003446  50DF               	movf	indf2,w,c
  9324   003448  B4D8               	btfsc	status,2,c
  9325   00344A  EF29  F01A         	goto	u4341
  9326   00344E  EF2B  F01A         	goto	u4340
  9327   003452                     u4341:
  9328   003452  EF33  F01A         	goto	l754
  9329   003456                     u4340:
  9330   003456                     
  9331                           ;dc_motor.c: 694:             (*turnDuration)--;
  9332   003456  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9333   00345A  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9334   00345E  06DF               	decf	indf2,f,c
  9335   003460                     
  9336                           ;dc_motor.c: 695:             LATDbits.LATD7 = 1;
  9337   003460  8E7C               	bsf	124,7,c	;volatile
  9338                           
  9339                           ;dc_motor.c: 696:         }
  9340   003462  EF40  F01A         	goto	l5313
  9341   003466                     l754:
  9342   003466  B68E               	btfsc	142,3,c	;volatile
  9343   003468  EF38  F01A         	goto	u4351
  9344   00346C  EF3A  F01A         	goto	u4350
  9345   003470                     u4351:
  9346   003470  EF40  F01A         	goto	l5313
  9347   003474                     u4350:
  9348   003474                     
  9349                           ;dc_motor.c: 699:             (*turnDuration)++;
  9350   003474  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9351   003478  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9352   00347C  2ADF               	incf	indf2,f,c
  9353   00347E                     
  9354                           ;dc_motor.c: 700:             LATHbits.LATH3 = 1;
  9355   00347E  8680               	bsf	128,3,c	;volatile
  9356   003480                     l5313:
  9357                           
  9358                           ;dc_motor.c: 703:         _delay((unsigned long)((500)*(64000000/4000.0)));
  9359   003480  0E29               	movlw	41
  9360   003482  6E3A               	movwf	(??_calibration+1)^0,c
  9361   003484  0E96               	movlw	150
  9362   003486  6E39               	movwf	??_calibration^0,c
  9363   003488  0E7F               	movlw	127
  9364   00348A                     u5907:
  9365   00348A  2EE8               	decfsz	wreg,f,c
  9366   00348C  D7FE               	bra	u5907
  9367   00348E  2E39               	decfsz	??_calibration^0,f,c
  9368   003490  D7FC               	bra	u5907
  9369   003492  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9370   003494  D7FA               	bra	u5907
  9371   003496  0000               	nop	
  9372   003498                     
  9373                           ;dc_motor.c: 705:         if (!PORTFbits.RF3) {
  9374   003498  B68E               	btfsc	142,3,c	;volatile
  9375   00349A  EF51  F01A         	goto	u4361
  9376   00349E  EF53  F01A         	goto	u4360
  9377   0034A2                     u4361:
  9378   0034A2  EF5A  F01A         	goto	l757
  9379   0034A6                     u4360:
  9380   0034A6                     
  9381                           ;dc_motor.c: 706:             (*turnDuration)--;
  9382   0034A6  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9383   0034AA  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9384   0034AE  06DF               	decf	indf2,f,c
  9385                           
  9386                           ;dc_motor.c: 707:             break;
  9387   0034B0  EFD2  F01A         	goto	l758
  9388   0034B4                     l757:
  9389                           
  9390                           ;dc_motor.c: 710:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  9391   0034B4  9680               	bcf	128,3,c	;volatile
  9392   0034B6  9E7C               	bcf	124,7,c	;volatile
  9393   0034B8                     
  9394                           ;dc_motor.c: 713:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9395   0034B8  C031  F023         	movff	calibration@mL,turnLeft@mL
  9396   0034BC  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9397   0034C0  C033  F025         	movff	calibration@mR,turnLeft@mR
  9398   0034C4  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9399   0034C8  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9400   0034CC  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9401   0034D0  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9402   0034D4  50DF               	movf	indf2,w,c
  9403   0034D6  6E28               	movwf	turnLeft@turnDuration^0,c
  9404   0034D8  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9405   0034DC  ECA8  F01F         	call	_turnLeft	;wreg free
  9406   0034E0                     
  9407                           ;dc_motor.c: 714:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9408   0034E0  0E05               	movlw	5
  9409   0034E2  6E3A               	movwf	(??_calibration+1)^0,c
  9410   0034E4  0E0F               	movlw	15
  9411   0034E6  6E39               	movwf	??_calibration^0,c
  9412   0034E8  0EF1               	movlw	241
  9413   0034EA                     u5917:
  9414   0034EA  2EE8               	decfsz	wreg,f,c
  9415   0034EC  D7FE               	bra	u5917
  9416   0034EE  2E39               	decfsz	??_calibration^0,f,c
  9417   0034F0  D7FC               	bra	u5917
  9418   0034F2  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9419   0034F4  D7FA               	bra	u5917
  9420   0034F6  0000               	nop	
  9421   0034F8                     
  9422                           ;dc_motor.c: 715:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9423   0034F8  C031  F023         	movff	calibration@mL,turnLeft@mL
  9424   0034FC  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  9425   003500  C033  F025         	movff	calibration@mR,turnLeft@mR
  9426   003504  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  9427   003508  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  9428   00350C  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9429   003510  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9430   003514  50DF               	movf	indf2,w,c
  9431   003516  6E28               	movwf	turnLeft@turnDuration^0,c
  9432   003518  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  9433   00351C  ECA8  F01F         	call	_turnLeft	;wreg free
  9434                           
  9435                           ;dc_motor.c: 716:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9436   003520  0E05               	movlw	5
  9437   003522  6E3A               	movwf	(??_calibration+1)^0,c
  9438   003524  0E0F               	movlw	15
  9439   003526  6E39               	movwf	??_calibration^0,c
  9440   003528  0EF1               	movlw	241
  9441   00352A                     u5927:
  9442   00352A  2EE8               	decfsz	wreg,f,c
  9443   00352C  D7FE               	bra	u5927
  9444   00352E  2E39               	decfsz	??_calibration^0,f,c
  9445   003530  D7FC               	bra	u5927
  9446   003532  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9447   003534  D7FA               	bra	u5927
  9448   003536  0000               	nop	
  9449   003538                     
  9450                           ;dc_motor.c: 717:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9451   003538  C031  F023         	movff	calibration@mL,turnRight@mL
  9452   00353C  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9453   003540  C033  F025         	movff	calibration@mR,turnRight@mR
  9454   003544  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9455   003548  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9456   00354C  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9457   003550  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9458   003554  50DF               	movf	indf2,w,c
  9459   003556  6E28               	movwf	turnRight@turnDuration^0,c
  9460   003558  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9461   00355C  ECBB  F01E         	call	_turnRight	;wreg free
  9462   003560                     
  9463                           ;dc_motor.c: 718:         _delay((unsigned long)((50)*(64000000/4000.0)));
  9464   003560  0E05               	movlw	5
  9465   003562  6E3A               	movwf	(??_calibration+1)^0,c
  9466   003564  0E0F               	movlw	15
  9467   003566  6E39               	movwf	??_calibration^0,c
  9468   003568  0EF1               	movlw	241
  9469   00356A                     u5937:
  9470   00356A  2EE8               	decfsz	wreg,f,c
  9471   00356C  D7FE               	bra	u5937
  9472   00356E  2E39               	decfsz	??_calibration^0,f,c
  9473   003570  D7FC               	bra	u5937
  9474   003572  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9475   003574  D7FA               	bra	u5937
  9476   003576  0000               	nop	
  9477                           
  9478                           ;dc_motor.c: 719:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  9479   003578  C031  F023         	movff	calibration@mL,turnRight@mL
  9480   00357C  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  9481   003580  C033  F025         	movff	calibration@mR,turnRight@mR
  9482   003584  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  9483   003588  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  9484   00358C  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  9485   003590  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  9486   003594  50DF               	movf	indf2,w,c
  9487   003596  6E28               	movwf	turnRight@turnDuration^0,c
  9488   003598  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  9489   00359C  ECBB  F01E         	call	_turnRight	;wreg free
  9490   0035A0  EF0A  F01A         	goto	l749
  9491   0035A4                     l758:
  9492                           
  9493                           ;dc_motor.c: 724:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  9494   0035A4  8680               	bsf	128,3,c	;volatile
  9495   0035A6  8E7C               	bsf	124,7,c	;volatile
  9496   0035A8                     
  9497                           ;dc_motor.c: 725:     _delay((unsigned long)((100)*(64000000/4000.0)));
  9498   0035A8  0E09               	movlw	9
  9499   0035AA  6E3A               	movwf	(??_calibration+1)^0,c
  9500   0035AC  0E1E               	movlw	30
  9501   0035AE  6E39               	movwf	??_calibration^0,c
  9502   0035B0  0EE4               	movlw	228
  9503   0035B2                     u5947:
  9504   0035B2  2EE8               	decfsz	wreg,f,c
  9505   0035B4  D7FE               	bra	u5947
  9506   0035B6  2E39               	decfsz	??_calibration^0,f,c
  9507   0035B8  D7FC               	bra	u5947
  9508   0035BA  2E3A               	decfsz	(??_calibration+1)^0,f,c
  9509   0035BC  D7FA               	bra	u5947
  9510   0035BE  D000               	nop2	
  9511   0035C0                     
  9512                           ;dc_motor.c: 726:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  9513   0035C0  9680               	bcf	128,3,c	;volatile
  9514   0035C2  9E7C               	bcf	124,7,c	;volatile
  9515   0035C4  0012               	return		;funcret
  9516   0035C6                     __end_of_calibration:
  9517                           	callstack 0
  9518                           
  9519 ;; *************** function _turnRight *****************
  9520 ;; Defined at:
  9521 ;;		line 445 in file "dc_motor.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  9524 ;;		 -> main@motorL(10), 
  9525 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  9526 ;;		 -> main@motorR(10), 
  9527 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  9528 ;;  turnDuration    1   39[COMRAM] unsigned char 
  9529 ;;  turnRamp        1   40[COMRAM] unsigned char 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  cur_power       2   46[COMRAM] int 
  9532 ;;  i               2   44[COMRAM] int 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      void 
  9535 ;; Registers used:
  9536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9542 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9543 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9544 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9545 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9546 ;;Total ram usage:       14 bytes
  9547 ;; Hardware stack levels used: 1
  9548 ;; Hardware stack levels required when called: 8
  9549 ;; This function calls:
  9550 ;;		_setMotorPWM
  9551 ;; This function is called by:
  9552 ;;		_move
  9553 ;;		_returnHome
  9554 ;;		_calibration
  9555 ;;		_lostReturnHome
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text32
  9560   003D76                     __ptext32:
  9561                           	callstack 0
  9562   003D76                     _turnRight:
  9563                           	callstack 21
  9564   003D76                     
  9565                           ;dc_motor.c: 445: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 446: {;dc_motor.c: 447:     mL->dir
      +                          ection = 1;
  9566   003D76  EE20 F001          	lfsr	2,1
  9567   003D7A  5023               	movf	turnRight@mL^0,w,c
  9568   003D7C  26D9               	addwf	fsr2l,f,c
  9569   003D7E  5024               	movf	(turnRight@mL+1)^0,w,c
  9570   003D80  22DA               	addwfc	fsr2h,f,c
  9571   003D82  0E01               	movlw	1
  9572   003D84  6EDF               	movwf	indf2,c
  9573                           
  9574                           ;dc_motor.c: 448:     mR->direction = 0;
  9575   003D86  EE20 F001          	lfsr	2,1
  9576   003D8A  5025               	movf	turnRight@mR^0,w,c
  9577   003D8C  26D9               	addwf	fsr2l,f,c
  9578   003D8E  5026               	movf	(turnRight@mR+1)^0,w,c
  9579   003D90  22DA               	addwfc	fsr2h,f,c
  9580   003D92  6ADF               	clrf	indf2,c
  9581   003D94                     
  9582                           ;dc_motor.c: 449:     int i;;dc_motor.c: 450:     int cur_power;;dc_motor.c: 451:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  9583   003D94  0E00               	movlw	0
  9584   003D96  6E30               	movwf	(turnRight@cur_power+1)^0,c
  9585   003D98  0E01               	movlw	1
  9586   003D9A  6E2F               	movwf	turnRight@cur_power^0,c
  9587   003D9C  EF1A  F01F         	goto	l4719
  9588   003DA0                     l4705:
  9589                           
  9590                           ;dc_motor.c: 452:         mL->power = cur_power+mL->compensation;
  9591   003DA0  EE20 F009          	lfsr	2,9
  9592   003DA4  5023               	movf	turnRight@mL^0,w,c
  9593   003DA6  26D9               	addwf	fsr2l,f,c
  9594   003DA8  5024               	movf	(turnRight@mL+1)^0,w,c
  9595   003DAA  22DA               	addwfc	fsr2h,f,c
  9596   003DAC  50DF               	movf	indf2,w,c
  9597   003DAE  242F               	addwf	turnRight@cur_power^0,w,c
  9598   003DB0  C023  FFD9         	movff	turnRight@mL,fsr2l
  9599   003DB4  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  9600   003DB8  6EDF               	movwf	indf2,c
  9601                           
  9602                           ;dc_motor.c: 453:         mR->power = cur_power+mR->compensation;
  9603   003DBA  EE20 F009          	lfsr	2,9
  9604   003DBE  5025               	movf	turnRight@mR^0,w,c
  9605   003DC0  26D9               	addwf	fsr2l,f,c
  9606   003DC2  5026               	movf	(turnRight@mR+1)^0,w,c
  9607   003DC4  22DA               	addwfc	fsr2h,f,c
  9608   003DC6  50DF               	movf	indf2,w,c
  9609   003DC8  242F               	addwf	turnRight@cur_power^0,w,c
  9610   003DCA  C025  FFD9         	movff	turnRight@mR,fsr2l
  9611   003DCE  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  9612   003DD2  6EDF               	movwf	indf2,c
  9613   003DD4                     
  9614                           ;dc_motor.c: 454:         setMotorPWM(mL);
  9615   003DD4  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  9616   003DD8  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  9617   003DDC  EC95  F020         	call	_setMotorPWM	;wreg free
  9618   003DE0                     
  9619                           ;dc_motor.c: 455:         setMotorPWM(mR);
  9620   003DE0  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  9621   003DE4  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  9622   003DE8  EC95  F020         	call	_setMotorPWM	;wreg free
  9623   003DEC                     
  9624                           ;dc_motor.c: 456:         for (i=0;i<turnRamp;i++) {
  9625   003DEC  0E00               	movlw	0
  9626   003DEE  6E2E               	movwf	(turnRight@i+1)^0,c
  9627   003DF0  0E00               	movlw	0
  9628   003DF2  6E2D               	movwf	turnRight@i^0,c
  9629   003DF4  EF06  F01F         	goto	l642
  9630   003DF8                     l4713:
  9631                           
  9632                           ;dc_motor.c: 457:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9633   003DF8  0E68               	movlw	104
  9634   003DFA  6E2A               	movwf	??_turnRight^0,c
  9635   003DFC  0EE4               	movlw	228
  9636   003DFE                     u5957:
  9637   003DFE  2EE8               	decfsz	wreg,f,c
  9638   003E00  D7FE               	bra	u5957
  9639   003E02  2E2A               	decfsz	??_turnRight^0,f,c
  9640   003E04  D7FC               	bra	u5957
  9641   003E06  D000               	nop2	
  9642   003E08                     
  9643                           ;dc_motor.c: 458:         }
  9644   003E08  4A2D               	infsnz	turnRight@i^0,f,c
  9645   003E0A  2A2E               	incf	(turnRight@i+1)^0,f,c
  9646   003E0C                     l642:
  9647   003E0C  5029               	movf	turnRight@turnRamp^0,w,c
  9648   003E0E  6E2A               	movwf	??_turnRight^0,c
  9649   003E10  6A2B               	clrf	(??_turnRight+1)^0,c
  9650   003E12  502A               	movf	??_turnRight^0,w,c
  9651   003E14  5C2D               	subwf	turnRight@i^0,w,c
  9652   003E16  502E               	movf	(turnRight@i+1)^0,w,c
  9653   003E18  0A80               	xorlw	128
  9654   003E1A  6E2C               	movwf	(??_turnRight+2)^0,c
  9655   003E1C  502B               	movf	(??_turnRight+1)^0,w,c
  9656   003E1E  0A80               	xorlw	128
  9657   003E20  582C               	subwfb	(??_turnRight+2)^0,w,c
  9658   003E22  A0D8               	btfss	status,0,c
  9659   003E24  EF16  F01F         	goto	u3661
  9660   003E28  EF18  F01F         	goto	u3660
  9661   003E2C                     u3661:
  9662   003E2C  EFFC  F01E         	goto	l4713
  9663   003E30                     u3660:
  9664   003E30                     
  9665                           ;dc_motor.c: 459:     }
  9666   003E30  4A2F               	infsnz	turnRight@cur_power^0,f,c
  9667   003E32  2A30               	incf	(turnRight@cur_power+1)^0,f,c
  9668   003E34                     l4719:
  9669   003E34  5027               	movf	turnRight@turnSpeed^0,w,c
  9670   003E36  6E2A               	movwf	??_turnRight^0,c
  9671   003E38  6A2B               	clrf	(??_turnRight+1)^0,c
  9672   003E3A  502F               	movf	turnRight@cur_power^0,w,c
  9673   003E3C  5C2A               	subwf	??_turnRight^0,w,c
  9674   003E3E  502B               	movf	(??_turnRight+1)^0,w,c
  9675   003E40  0A80               	xorlw	128
  9676   003E42  6E2C               	movwf	(??_turnRight+2)^0,c
  9677   003E44  5030               	movf	(turnRight@cur_power+1)^0,w,c
  9678   003E46  0A80               	xorlw	128
  9679   003E48  582C               	subwfb	(??_turnRight+2)^0,w,c
  9680   003E4A  B0D8               	btfsc	status,0,c
  9681   003E4C  EF2A  F01F         	goto	u3671
  9682   003E50  EF2C  F01F         	goto	u3670
  9683   003E54                     u3671:
  9684   003E54  EFD0  F01E         	goto	l4705
  9685   003E58                     u3670:
  9686   003E58                     
  9687                           ;dc_motor.c: 461:     for (i=0;i<turnDuration;i++) {
  9688   003E58  0E00               	movlw	0
  9689   003E5A  6E2E               	movwf	(turnRight@i+1)^0,c
  9690   003E5C  0E00               	movlw	0
  9691   003E5E  6E2D               	movwf	turnRight@i^0,c
  9692   003E60  EF3C  F01F         	goto	l646
  9693   003E64                     l4723:
  9694                           
  9695                           ;dc_motor.c: 462:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9696   003E64  0E68               	movlw	104
  9697   003E66  6E2A               	movwf	??_turnRight^0,c
  9698   003E68  0EE4               	movlw	228
  9699   003E6A                     u5967:
  9700   003E6A  2EE8               	decfsz	wreg,f,c
  9701   003E6C  D7FE               	bra	u5967
  9702   003E6E  2E2A               	decfsz	??_turnRight^0,f,c
  9703   003E70  D7FC               	bra	u5967
  9704   003E72  D000               	nop2	
  9705   003E74                     
  9706                           ;dc_motor.c: 463:         }
  9707   003E74  4A2D               	infsnz	turnRight@i^0,f,c
  9708   003E76  2A2E               	incf	(turnRight@i+1)^0,f,c
  9709   003E78                     l646:
  9710   003E78  5028               	movf	turnRight@turnDuration^0,w,c
  9711   003E7A  6E2A               	movwf	??_turnRight^0,c
  9712   003E7C  6A2B               	clrf	(??_turnRight+1)^0,c
  9713   003E7E  502A               	movf	??_turnRight^0,w,c
  9714   003E80  5C2D               	subwf	turnRight@i^0,w,c
  9715   003E82  502E               	movf	(turnRight@i+1)^0,w,c
  9716   003E84  0A80               	xorlw	128
  9717   003E86  6E2C               	movwf	(??_turnRight+2)^0,c
  9718   003E88  502B               	movf	(??_turnRight+1)^0,w,c
  9719   003E8A  0A80               	xorlw	128
  9720   003E8C  582C               	subwfb	(??_turnRight+2)^0,w,c
  9721   003E8E  A0D8               	btfss	status,0,c
  9722   003E90  EF4C  F01F         	goto	u3681
  9723   003E94  EF4E  F01F         	goto	u3680
  9724   003E98                     u3681:
  9725   003E98  EF32  F01F         	goto	l4723
  9726   003E9C                     u3680:
  9727   003E9C                     
  9728                           ;dc_motor.c: 465:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  9729   003E9C  C027  F02F         	movff	turnRight@turnSpeed,turnRight@cur_power
  9730   003EA0  6A30               	clrf	(turnRight@cur_power+1)^0,c
  9731   003EA2                     l4727:
  9732   003EA2  BE30               	btfsc	(turnRight@cur_power+1)^0,7,c
  9733   003EA4  EF58  F01F         	goto	u3690
  9734   003EA8  EF56  F01F         	goto	u3691
  9735   003EAC                     u3691:
  9736   003EAC  EF5A  F01F         	goto	l4731
  9737   003EB0                     u3690:
  9738   003EB0  EFA7  F01F         	goto	l654
  9739   003EB4                     l4731:
  9740                           
  9741                           ;dc_motor.c: 466:         mL->power = cur_power+mL->compensation;
  9742   003EB4  EE20 F009          	lfsr	2,9
  9743   003EB8  5023               	movf	turnRight@mL^0,w,c
  9744   003EBA  26D9               	addwf	fsr2l,f,c
  9745   003EBC  5024               	movf	(turnRight@mL+1)^0,w,c
  9746   003EBE  22DA               	addwfc	fsr2h,f,c
  9747   003EC0  50DF               	movf	indf2,w,c
  9748   003EC2  242F               	addwf	turnRight@cur_power^0,w,c
  9749   003EC4  C023  FFD9         	movff	turnRight@mL,fsr2l
  9750   003EC8  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  9751   003ECC  6EDF               	movwf	indf2,c
  9752                           
  9753                           ;dc_motor.c: 467:         mR->power = cur_power+mR->compensation;
  9754   003ECE  EE20 F009          	lfsr	2,9
  9755   003ED2  5025               	movf	turnRight@mR^0,w,c
  9756   003ED4  26D9               	addwf	fsr2l,f,c
  9757   003ED6  5026               	movf	(turnRight@mR+1)^0,w,c
  9758   003ED8  22DA               	addwfc	fsr2h,f,c
  9759   003EDA  50DF               	movf	indf2,w,c
  9760   003EDC  242F               	addwf	turnRight@cur_power^0,w,c
  9761   003EDE  C025  FFD9         	movff	turnRight@mR,fsr2l
  9762   003EE2  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  9763   003EE6  6EDF               	movwf	indf2,c
  9764   003EE8                     
  9765                           ;dc_motor.c: 468:         setMotorPWM(mL);
  9766   003EE8  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  9767   003EEC  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  9768   003EF0  EC95  F020         	call	_setMotorPWM	;wreg free
  9769   003EF4                     
  9770                           ;dc_motor.c: 469:         setMotorPWM(mR);
  9771   003EF4  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  9772   003EF8  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  9773   003EFC  EC95  F020         	call	_setMotorPWM	;wreg free
  9774   003F00                     
  9775                           ;dc_motor.c: 470:         for (i=0;i<turnRamp;i++) {
  9776   003F00  0E00               	movlw	0
  9777   003F02  6E2E               	movwf	(turnRight@i+1)^0,c
  9778   003F04  0E00               	movlw	0
  9779   003F06  6E2D               	movwf	turnRight@i^0,c
  9780   003F08  EF90  F01F         	goto	l651
  9781   003F0C                     l4739:
  9782                           
  9783                           ;dc_motor.c: 471:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9784   003F0C  0E68               	movlw	104
  9785   003F0E  6E2A               	movwf	??_turnRight^0,c
  9786   003F10  0EE4               	movlw	228
  9787   003F12                     u5977:
  9788   003F12  2EE8               	decfsz	wreg,f,c
  9789   003F14  D7FE               	bra	u5977
  9790   003F16  2E2A               	decfsz	??_turnRight^0,f,c
  9791   003F18  D7FC               	bra	u5977
  9792   003F1A  D000               	nop2	
  9793   003F1C                     
  9794                           ;dc_motor.c: 472:         }
  9795   003F1C  4A2D               	infsnz	turnRight@i^0,f,c
  9796   003F1E  2A2E               	incf	(turnRight@i+1)^0,f,c
  9797   003F20                     l651:
  9798   003F20  5029               	movf	turnRight@turnRamp^0,w,c
  9799   003F22  6E2A               	movwf	??_turnRight^0,c
  9800   003F24  6A2B               	clrf	(??_turnRight+1)^0,c
  9801   003F26  502A               	movf	??_turnRight^0,w,c
  9802   003F28  5C2D               	subwf	turnRight@i^0,w,c
  9803   003F2A  502E               	movf	(turnRight@i+1)^0,w,c
  9804   003F2C  0A80               	xorlw	128
  9805   003F2E  6E2C               	movwf	(??_turnRight+2)^0,c
  9806   003F30  502B               	movf	(??_turnRight+1)^0,w,c
  9807   003F32  0A80               	xorlw	128
  9808   003F34  582C               	subwfb	(??_turnRight+2)^0,w,c
  9809   003F36  A0D8               	btfss	status,0,c
  9810   003F38  EFA0  F01F         	goto	u3701
  9811   003F3C  EFA2  F01F         	goto	u3700
  9812   003F40                     u3701:
  9813   003F40  EF86  F01F         	goto	l4739
  9814   003F44                     u3700:
  9815   003F44                     
  9816                           ;dc_motor.c: 473:     }
  9817   003F44  062F               	decf	turnRight@cur_power^0,f,c
  9818   003F46  A0D8               	btfss	status,0,c
  9819   003F48  0630               	decf	(turnRight@cur_power+1)^0,f,c
  9820   003F4A  EF51  F01F         	goto	l4727
  9821   003F4E                     l654:
  9822   003F4E  0012               	return		;funcret
  9823   003F50                     __end_of_turnRight:
  9824                           	callstack 0
  9825                           
  9826 ;; *************** function _turnLeft *****************
  9827 ;; Defined at:
  9828 ;;		line 411 in file "dc_motor.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  9831 ;;		 -> main@motorL(10), 
  9832 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  9833 ;;		 -> main@motorR(10), 
  9834 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  9835 ;;  turnDuration    1   39[COMRAM] unsigned char 
  9836 ;;  turnRamp        1   40[COMRAM] unsigned char 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  cur_power       2   46[COMRAM] int 
  9839 ;;  i               2   44[COMRAM] int 
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9849 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9850 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9851 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9852 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9853 ;;Total ram usage:       14 bytes
  9854 ;; Hardware stack levels used: 1
  9855 ;; Hardware stack levels required when called: 8
  9856 ;; This function calls:
  9857 ;;		_setMotorPWM
  9858 ;; This function is called by:
  9859 ;;		_move
  9860 ;;		_returnHome
  9861 ;;		_calibration
  9862 ;;		_lostReturnHome
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text33
  9867   003F50                     __ptext33:
  9868                           	callstack 0
  9869   003F50                     _turnLeft:
  9870                           	callstack 21
  9871   003F50                     
  9872                           ;dc_motor.c: 411: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 412: {;dc_motor.c: 413:     mL->dire
      +                          ction = 0;
  9873   003F50  EE20 F001          	lfsr	2,1
  9874   003F54  5023               	movf	turnLeft@mL^0,w,c
  9875   003F56  26D9               	addwf	fsr2l,f,c
  9876   003F58  5024               	movf	(turnLeft@mL+1)^0,w,c
  9877   003F5A  22DA               	addwfc	fsr2h,f,c
  9878   003F5C  6ADF               	clrf	indf2,c
  9879                           
  9880                           ;dc_motor.c: 414:     mR->direction = 1;
  9881   003F5E  EE20 F001          	lfsr	2,1
  9882   003F62  5025               	movf	turnLeft@mR^0,w,c
  9883   003F64  26D9               	addwf	fsr2l,f,c
  9884   003F66  5026               	movf	(turnLeft@mR+1)^0,w,c
  9885   003F68  22DA               	addwfc	fsr2h,f,c
  9886   003F6A  0E01               	movlw	1
  9887   003F6C  6EDF               	movwf	indf2,c
  9888   003F6E                     
  9889                           ;dc_motor.c: 415:     int i;;dc_motor.c: 416:     int cur_power;;dc_motor.c: 417:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  9890   003F6E  0E00               	movlw	0
  9891   003F70  6E30               	movwf	(turnLeft@cur_power+1)^0,c
  9892   003F72  0E01               	movlw	1
  9893   003F74  6E2F               	movwf	turnLeft@cur_power^0,c
  9894   003F76  EF07  F020         	goto	l4765
  9895   003F7A                     l4751:
  9896                           
  9897                           ;dc_motor.c: 418:         mL->power = cur_power+mL->compensation;
  9898   003F7A  EE20 F009          	lfsr	2,9
  9899   003F7E  5023               	movf	turnLeft@mL^0,w,c
  9900   003F80  26D9               	addwf	fsr2l,f,c
  9901   003F82  5024               	movf	(turnLeft@mL+1)^0,w,c
  9902   003F84  22DA               	addwfc	fsr2h,f,c
  9903   003F86  50DF               	movf	indf2,w,c
  9904   003F88  242F               	addwf	turnLeft@cur_power^0,w,c
  9905   003F8A  C023  FFD9         	movff	turnLeft@mL,fsr2l
  9906   003F8E  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
  9907   003F92  6EDF               	movwf	indf2,c
  9908                           
  9909                           ;dc_motor.c: 419:         mR->power = cur_power+mR->compensation;
  9910   003F94  EE20 F009          	lfsr	2,9
  9911   003F98  5025               	movf	turnLeft@mR^0,w,c
  9912   003F9A  26D9               	addwf	fsr2l,f,c
  9913   003F9C  5026               	movf	(turnLeft@mR+1)^0,w,c
  9914   003F9E  22DA               	addwfc	fsr2h,f,c
  9915   003FA0  50DF               	movf	indf2,w,c
  9916   003FA2  242F               	addwf	turnLeft@cur_power^0,w,c
  9917   003FA4  C025  FFD9         	movff	turnLeft@mR,fsr2l
  9918   003FA8  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
  9919   003FAC  6EDF               	movwf	indf2,c
  9920   003FAE                     
  9921                           ;dc_motor.c: 420:         setMotorPWM(mL);
  9922   003FAE  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
  9923   003FB2  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  9924   003FB6  EC95  F020         	call	_setMotorPWM	;wreg free
  9925   003FBA                     
  9926                           ;dc_motor.c: 421:         setMotorPWM(mR);
  9927   003FBA  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
  9928   003FBE  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  9929   003FC2  EC95  F020         	call	_setMotorPWM	;wreg free
  9930   003FC6                     
  9931                           ;dc_motor.c: 422:         for (i=0;i<turnRamp;i++) {
  9932   003FC6  0E00               	movlw	0
  9933   003FC8  6E2E               	movwf	(turnLeft@i+1)^0,c
  9934   003FCA  0E00               	movlw	0
  9935   003FCC  6E2D               	movwf	turnLeft@i^0,c
  9936   003FCE  EFF3  F01F         	goto	l625
  9937   003FD2                     l4759:
  9938                           
  9939                           ;dc_motor.c: 423:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9940   003FD2  0E68               	movlw	104
  9941   003FD4  6E2A               	movwf	??_turnLeft^0,c
  9942   003FD6  0EE4               	movlw	228
  9943   003FD8                     u5987:
  9944   003FD8  2EE8               	decfsz	wreg,f,c
  9945   003FDA  D7FE               	bra	u5987
  9946   003FDC  2E2A               	decfsz	??_turnLeft^0,f,c
  9947   003FDE  D7FC               	bra	u5987
  9948   003FE0  D000               	nop2	
  9949   003FE2                     
  9950                           ;dc_motor.c: 424:         }
  9951   003FE2  4A2D               	infsnz	turnLeft@i^0,f,c
  9952   003FE4  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9953   003FE6                     l625:
  9954   003FE6  5029               	movf	turnLeft@turnRamp^0,w,c
  9955   003FE8  6E2A               	movwf	??_turnLeft^0,c
  9956   003FEA  6A2B               	clrf	(??_turnLeft+1)^0,c
  9957   003FEC  502A               	movf	??_turnLeft^0,w,c
  9958   003FEE  5C2D               	subwf	turnLeft@i^0,w,c
  9959   003FF0  502E               	movf	(turnLeft@i+1)^0,w,c
  9960   003FF2  0A80               	xorlw	128
  9961   003FF4  6E2C               	movwf	(??_turnLeft+2)^0,c
  9962   003FF6  502B               	movf	(??_turnLeft+1)^0,w,c
  9963   003FF8  0A80               	xorlw	128
  9964   003FFA  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9965   003FFC  A0D8               	btfss	status,0,c
  9966   003FFE  EF03  F020         	goto	u3711
  9967   004002  EF05  F020         	goto	u3710
  9968   004006                     u3711:
  9969   004006  EFE9  F01F         	goto	l4759
  9970   00400A                     u3710:
  9971   00400A                     
  9972                           ;dc_motor.c: 425:     }
  9973   00400A  4A2F               	infsnz	turnLeft@cur_power^0,f,c
  9974   00400C  2A30               	incf	(turnLeft@cur_power+1)^0,f,c
  9975   00400E                     l4765:
  9976   00400E  5027               	movf	turnLeft@turnSpeed^0,w,c
  9977   004010  6E2A               	movwf	??_turnLeft^0,c
  9978   004012  6A2B               	clrf	(??_turnLeft+1)^0,c
  9979   004014  502F               	movf	turnLeft@cur_power^0,w,c
  9980   004016  5C2A               	subwf	??_turnLeft^0,w,c
  9981   004018  502B               	movf	(??_turnLeft+1)^0,w,c
  9982   00401A  0A80               	xorlw	128
  9983   00401C  6E2C               	movwf	(??_turnLeft+2)^0,c
  9984   00401E  5030               	movf	(turnLeft@cur_power+1)^0,w,c
  9985   004020  0A80               	xorlw	128
  9986   004022  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9987   004024  B0D8               	btfsc	status,0,c
  9988   004026  EF17  F020         	goto	u3721
  9989   00402A  EF19  F020         	goto	u3720
  9990   00402E                     u3721:
  9991   00402E  EFBD  F01F         	goto	l4751
  9992   004032                     u3720:
  9993   004032                     
  9994                           ;dc_motor.c: 427:     for (i=0;i<turnDuration;i++) {
  9995   004032  0E00               	movlw	0
  9996   004034  6E2E               	movwf	(turnLeft@i+1)^0,c
  9997   004036  0E00               	movlw	0
  9998   004038  6E2D               	movwf	turnLeft@i^0,c
  9999   00403A  EF29  F020         	goto	l629
 10000   00403E                     l4769:
 10001                           
 10002                           ;dc_motor.c: 428:             _delay((unsigned long)((5)*(64000000/4000.0)));
 10003   00403E  0E68               	movlw	104
 10004   004040  6E2A               	movwf	??_turnLeft^0,c
 10005   004042  0EE4               	movlw	228
 10006   004044                     u5997:
 10007   004044  2EE8               	decfsz	wreg,f,c
 10008   004046  D7FE               	bra	u5997
 10009   004048  2E2A               	decfsz	??_turnLeft^0,f,c
 10010   00404A  D7FC               	bra	u5997
 10011   00404C  D000               	nop2	
 10012   00404E                     
 10013                           ;dc_motor.c: 429:         }
 10014   00404E  4A2D               	infsnz	turnLeft@i^0,f,c
 10015   004050  2A2E               	incf	(turnLeft@i+1)^0,f,c
 10016   004052                     l629:
 10017   004052  5028               	movf	turnLeft@turnDuration^0,w,c
 10018   004054  6E2A               	movwf	??_turnLeft^0,c
 10019   004056  6A2B               	clrf	(??_turnLeft+1)^0,c
 10020   004058  502A               	movf	??_turnLeft^0,w,c
 10021   00405A  5C2D               	subwf	turnLeft@i^0,w,c
 10022   00405C  502E               	movf	(turnLeft@i+1)^0,w,c
 10023   00405E  0A80               	xorlw	128
 10024   004060  6E2C               	movwf	(??_turnLeft+2)^0,c
 10025   004062  502B               	movf	(??_turnLeft+1)^0,w,c
 10026   004064  0A80               	xorlw	128
 10027   004066  582C               	subwfb	(??_turnLeft+2)^0,w,c
 10028   004068  A0D8               	btfss	status,0,c
 10029   00406A  EF39  F020         	goto	u3731
 10030   00406E  EF3B  F020         	goto	u3730
 10031   004072                     u3731:
 10032   004072  EF1F  F020         	goto	l4769
 10033   004076                     u3730:
 10034   004076                     
 10035                           ;dc_motor.c: 431:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
 10036   004076  C027  F02F         	movff	turnLeft@turnSpeed,turnLeft@cur_power
 10037   00407A  6A30               	clrf	(turnLeft@cur_power+1)^0,c
 10038   00407C                     l4773:
 10039   00407C  BE30               	btfsc	(turnLeft@cur_power+1)^0,7,c
 10040   00407E  EF45  F020         	goto	u3740
 10041   004082  EF43  F020         	goto	u3741
 10042   004086                     u3741:
 10043   004086  EF47  F020         	goto	l4777
 10044   00408A                     u3740:
 10045   00408A  EF94  F020         	goto	l637
 10046   00408E                     l4777:
 10047                           
 10048                           ;dc_motor.c: 432:         mL->power = cur_power+mL->compensation;
 10049   00408E  EE20 F009          	lfsr	2,9
 10050   004092  5023               	movf	turnLeft@mL^0,w,c
 10051   004094  26D9               	addwf	fsr2l,f,c
 10052   004096  5024               	movf	(turnLeft@mL+1)^0,w,c
 10053   004098  22DA               	addwfc	fsr2h,f,c
 10054   00409A  50DF               	movf	indf2,w,c
 10055   00409C  242F               	addwf	turnLeft@cur_power^0,w,c
 10056   00409E  C023  FFD9         	movff	turnLeft@mL,fsr2l
 10057   0040A2  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
 10058   0040A6  6EDF               	movwf	indf2,c
 10059                           
 10060                           ;dc_motor.c: 433:         mR->power = cur_power+mR->compensation;
 10061   0040A8  EE20 F009          	lfsr	2,9
 10062   0040AC  5025               	movf	turnLeft@mR^0,w,c
 10063   0040AE  26D9               	addwf	fsr2l,f,c
 10064   0040B0  5026               	movf	(turnLeft@mR+1)^0,w,c
 10065   0040B2  22DA               	addwfc	fsr2h,f,c
 10066   0040B4  50DF               	movf	indf2,w,c
 10067   0040B6  242F               	addwf	turnLeft@cur_power^0,w,c
 10068   0040B8  C025  FFD9         	movff	turnLeft@mR,fsr2l
 10069   0040BC  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
 10070   0040C0  6EDF               	movwf	indf2,c
 10071   0040C2                     
 10072                           ;dc_motor.c: 434:         setMotorPWM(mL);
 10073   0040C2  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
 10074   0040C6  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
 10075   0040CA  EC95  F020         	call	_setMotorPWM	;wreg free
 10076   0040CE                     
 10077                           ;dc_motor.c: 435:         setMotorPWM(mR);
 10078   0040CE  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
 10079   0040D2  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
 10080   0040D6  EC95  F020         	call	_setMotorPWM	;wreg free
 10081   0040DA                     
 10082                           ;dc_motor.c: 436:         for (i=0;i<turnRamp;i++) {
 10083   0040DA  0E00               	movlw	0
 10084   0040DC  6E2E               	movwf	(turnLeft@i+1)^0,c
 10085   0040DE  0E00               	movlw	0
 10086   0040E0  6E2D               	movwf	turnLeft@i^0,c
 10087   0040E2  EF7D  F020         	goto	l634
 10088   0040E6                     l4785:
 10089                           
 10090                           ;dc_motor.c: 437:             _delay((unsigned long)((5)*(64000000/4000.0)));
 10091   0040E6  0E68               	movlw	104
 10092   0040E8  6E2A               	movwf	??_turnLeft^0,c
 10093   0040EA  0EE4               	movlw	228
 10094   0040EC                     u6007:
 10095   0040EC  2EE8               	decfsz	wreg,f,c
 10096   0040EE  D7FE               	bra	u6007
 10097   0040F0  2E2A               	decfsz	??_turnLeft^0,f,c
 10098   0040F2  D7FC               	bra	u6007
 10099   0040F4  D000               	nop2	
 10100   0040F6                     
 10101                           ;dc_motor.c: 438:         }
 10102   0040F6  4A2D               	infsnz	turnLeft@i^0,f,c
 10103   0040F8  2A2E               	incf	(turnLeft@i+1)^0,f,c
 10104   0040FA                     l634:
 10105   0040FA  5029               	movf	turnLeft@turnRamp^0,w,c
 10106   0040FC  6E2A               	movwf	??_turnLeft^0,c
 10107   0040FE  6A2B               	clrf	(??_turnLeft+1)^0,c
 10108   004100  502A               	movf	??_turnLeft^0,w,c
 10109   004102  5C2D               	subwf	turnLeft@i^0,w,c
 10110   004104  502E               	movf	(turnLeft@i+1)^0,w,c
 10111   004106  0A80               	xorlw	128
 10112   004108  6E2C               	movwf	(??_turnLeft+2)^0,c
 10113   00410A  502B               	movf	(??_turnLeft+1)^0,w,c
 10114   00410C  0A80               	xorlw	128
 10115   00410E  582C               	subwfb	(??_turnLeft+2)^0,w,c
 10116   004110  A0D8               	btfss	status,0,c
 10117   004112  EF8D  F020         	goto	u3751
 10118   004116  EF8F  F020         	goto	u3750
 10119   00411A                     u3751:
 10120   00411A  EF73  F020         	goto	l4785
 10121   00411E                     u3750:
 10122   00411E                     
 10123                           ;dc_motor.c: 439:     }
 10124   00411E  062F               	decf	turnLeft@cur_power^0,f,c
 10125   004120  A0D8               	btfss	status,0,c
 10126   004122  0630               	decf	(turnLeft@cur_power+1)^0,f,c
 10127   004124  EF3E  F020         	goto	l4773
 10128   004128                     l637:
 10129   004128  0012               	return		;funcret
 10130   00412A                     __end_of_turnLeft:
 10131                           	callstack 0
 10132                           
 10133 ;; *************** function _setMotorPWM *****************
 10134 ;; Defined at:
 10135 ;;		line 69 in file "dc_motor.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;  m               2   28[COMRAM] PTR struct DC_motor
 10138 ;;		 -> main@motorR(10), main@motorL(10), 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  negDuty         1   33[COMRAM] unsigned char 
 10141 ;;  posDuty         1   32[COMRAM] unsigned char 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  1    wreg      void 
 10144 ;; Registers used:
 10145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10154 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10155 ;;Total ram usage:        6 bytes
 10156 ;; Hardware stack levels used: 1
 10157 ;; Hardware stack levels required when called: 7
 10158 ;; This function calls:
 10159 ;;		___lwdiv
 10160 ;;		___wmul
 10161 ;; This function is called by:
 10162 ;;		_stop
 10163 ;;		_turnLeft
 10164 ;;		_turnRight
 10165 ;;		_fullSpeedAhead
 10166 ;;		_reverseOneSquare
 10167 ;;		_wallAdjust
 10168 ;;		_reverseWallAdjust
 10169 ;;		_reverseShort
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text34
 10174   00412A                     __ptext34:
 10175                           	callstack 0
 10176   00412A                     _setMotorPWM:
 10177                           	callstack 22
 10178   00412A                     
 10179                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
 10180   00412A  EE20 F002          	lfsr	2,2
 10181   00412E  501D               	movf	setMotorPWM@m^0,w,c
 10182   004130  26D9               	addwf	fsr2l,f,c
 10183   004132  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10184   004134  22DA               	addwfc	fsr2h,f,c
 10185   004136  50DF               	movf	indf2,w,c
 10186   004138  B4D8               	btfsc	status,2,c
 10187   00413A  EFA1  F020         	goto	u3581
 10188   00413E  EFA3  F020         	goto	u3580
 10189   004142                     u3581:
 10190   004142  EFD7  F020         	goto	l4635
 10191   004146                     u3580:
 10192   004146                     
 10193                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
 10194   004146  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
 10195   00414A  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
 10196   00414E  50DF               	movf	indf2,w,c
 10197   004150  6E1F               	movwf	??_setMotorPWM^0,c
 10198   004152  501F               	movf	??_setMotorPWM^0,w,c
 10199   004154  6E10               	movwf	___wmul@multiplier^0,c
 10200   004156  6A11               	clrf	(___wmul@multiplier+1)^0,c
 10201   004158  EE20 F003          	lfsr	2,3
 10202   00415C  501D               	movf	setMotorPWM@m^0,w,c
 10203   00415E  26D9               	addwf	fsr2l,f,c
 10204   004160  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10205   004162  22DA               	addwfc	fsr2h,f,c
 10206   004164  CFDE F012          	movff	postinc2,___wmul@multiplicand
 10207   004168  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
 10208   00416C  ECE2  F025         	call	___wmul	;wreg free
 10209   004170  C010  F016         	movff	?___wmul,___lwdiv@dividend
 10210   004174  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
 10211   004178  0E00               	movlw	0
 10212   00417A  6E19               	movwf	(___lwdiv@divisor+1)^0,c
 10213   00417C  0E64               	movlw	100
 10214   00417E  6E18               	movwf	___lwdiv@divisor^0,c
 10215   004180  EC19  F024         	call	___lwdiv	;wreg free
 10216   004184  EE20 F003          	lfsr	2,3
 10217   004188  501D               	movf	setMotorPWM@m^0,w,c
 10218   00418A  26D9               	addwf	fsr2l,f,c
 10219   00418C  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10220   00418E  22DA               	addwfc	fsr2h,f,c
 10221   004190  50DF               	movf	indf2,w,c
 10222   004192  6E20               	movwf	(??_setMotorPWM+1)^0,c
 10223   004194  5016               	movf	?___lwdiv^0,w,c
 10224   004196  5C20               	subwf	(??_setMotorPWM+1)^0,w,c
 10225   004198  6E21               	movwf	setMotorPWM@posDuty^0,c
 10226   00419A                     
 10227                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
 10228   00419A  EE20 F003          	lfsr	2,3
 10229   00419E  501D               	movf	setMotorPWM@m^0,w,c
 10230   0041A0  26D9               	addwf	fsr2l,f,c
 10231   0041A2  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10232   0041A4  22DA               	addwfc	fsr2h,f,c
 10233   0041A6  50DF               	movf	indf2,w,c
 10234   0041A8  6E22               	movwf	setMotorPWM@negDuty^0,c
 10235                           
 10236                           ;dc_motor.c: 76:     }
 10237   0041AA  EFFA  F020         	goto	l4639
 10238   0041AE                     l4635:
 10239                           
 10240                           ;dc_motor.c: 78:         posDuty=0;
 10241   0041AE  0E00               	movlw	0
 10242   0041B0  6E21               	movwf	setMotorPWM@posDuty^0,c
 10243   0041B2                     
 10244                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
 10245   0041B2  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
 10246   0041B6  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
 10247   0041BA  50DF               	movf	indf2,w,c
 10248   0041BC  6E1F               	movwf	??_setMotorPWM^0,c
 10249   0041BE  501F               	movf	??_setMotorPWM^0,w,c
 10250   0041C0  6E10               	movwf	___wmul@multiplier^0,c
 10251   0041C2  6A11               	clrf	(___wmul@multiplier+1)^0,c
 10252   0041C4  EE20 F003          	lfsr	2,3
 10253   0041C8  501D               	movf	setMotorPWM@m^0,w,c
 10254   0041CA  26D9               	addwf	fsr2l,f,c
 10255   0041CC  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10256   0041CE  22DA               	addwfc	fsr2h,f,c
 10257   0041D0  CFDE F012          	movff	postinc2,___wmul@multiplicand
 10258   0041D4  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
 10259   0041D8  ECE2  F025         	call	___wmul	;wreg free
 10260   0041DC  C010  F016         	movff	?___wmul,___lwdiv@dividend
 10261   0041E0  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
 10262   0041E4  0E00               	movlw	0
 10263   0041E6  6E19               	movwf	(___lwdiv@divisor+1)^0,c
 10264   0041E8  0E64               	movlw	100
 10265   0041EA  6E18               	movwf	___lwdiv@divisor^0,c
 10266   0041EC  EC19  F024         	call	___lwdiv	;wreg free
 10267   0041F0  5016               	movf	?___lwdiv^0,w,c
 10268   0041F2  6E22               	movwf	setMotorPWM@negDuty^0,c
 10269   0041F4                     l4639:
 10270                           
 10271                           ;dc_motor.c: 82:     if (m->direction) {
 10272   0041F4  EE20 F001          	lfsr	2,1
 10273   0041F8  501D               	movf	setMotorPWM@m^0,w,c
 10274   0041FA  26D9               	addwf	fsr2l,f,c
 10275   0041FC  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10276   0041FE  22DA               	addwfc	fsr2h,f,c
 10277   004200  50DF               	movf	indf2,w,c
 10278   004202  B4D8               	btfsc	status,2,c
 10279   004204  EF06  F021         	goto	u3591
 10280   004208  EF08  F021         	goto	u3590
 10281   00420C                     u3591:
 10282   00420C  EF2A  F021         	goto	l4643
 10283   004210                     u3590:
 10284   004210                     
 10285                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
 10286   004210  EE20 F005          	lfsr	2,5
 10287   004214  501D               	movf	setMotorPWM@m^0,w,c
 10288   004216  26D9               	addwf	fsr2l,f,c
 10289   004218  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10290   00421A  22DA               	addwfc	fsr2h,f,c
 10291   00421C  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10292   004220  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10293   004224  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10294   004228  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10295   00422C  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
 10296                           
 10297                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
 10298   004230  EE20 F007          	lfsr	2,7
 10299   004234  501D               	movf	setMotorPWM@m^0,w,c
 10300   004236  26D9               	addwf	fsr2l,f,c
 10301   004238  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10302   00423A  22DA               	addwfc	fsr2h,f,c
 10303   00423C  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10304   004240  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10305   004244  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10306   004248  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10307   00424C  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
 10308                           
 10309                           ;dc_motor.c: 85:     } else {
 10310   004250  EF4A  F021         	goto	l543
 10311   004254                     l4643:
 10312                           
 10313                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
 10314   004254  EE20 F005          	lfsr	2,5
 10315   004258  501D               	movf	setMotorPWM@m^0,w,c
 10316   00425A  26D9               	addwf	fsr2l,f,c
 10317   00425C  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10318   00425E  22DA               	addwfc	fsr2h,f,c
 10319   004260  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10320   004264  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10321   004268  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10322   00426C  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10323   004270  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
 10324                           
 10325                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
 10326   004274  EE20 F007          	lfsr	2,7
 10327   004278  501D               	movf	setMotorPWM@m^0,w,c
 10328   00427A  26D9               	addwf	fsr2l,f,c
 10329   00427C  501E               	movf	(setMotorPWM@m+1)^0,w,c
 10330   00427E  22DA               	addwfc	fsr2h,f,c
 10331   004280  CFDE F01F          	movff	postinc2,??_setMotorPWM
 10332   004284  CFDD F020          	movff	postdec2,??_setMotorPWM+1
 10333   004288  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
 10334   00428C  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
 10335   004290  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
 10336   004294                     l543:
 10337   004294  0012               	return		;funcret
 10338   004296                     __end_of_setMotorPWM:
 10339                           	callstack 0
 10340                           
 10341 ;; *************** function ___wmul *****************
 10342 ;; Defined at:
 10343 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;  multiplier      2   15[COMRAM] unsigned int 
 10346 ;;  multiplicand    2   17[COMRAM] unsigned int 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  product         2   19[COMRAM] unsigned int 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  2   15[COMRAM] unsigned int 
 10351 ;; Registers used:
 10352 ;;		wreg, status,2, status,0, prodl, prodh
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10362 ;;Total ram usage:        6 bytes
 10363 ;; Hardware stack levels used: 1
 10364 ;; Hardware stack levels required when called: 6
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_rgb_2_hsv
 10369 ;;		_setMotorPWM
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text35
 10374   004BC4                     __ptext35:
 10375                           	callstack 0
 10376   004BC4                     ___wmul:
 10377                           	callstack 22
 10378   004BC4  5010               	movf	___wmul@multiplier^0,w,c
 10379   004BC6  0212               	mulwf	___wmul@multiplicand^0,c
 10380   004BC8  CFF3 F014          	movff	prodl,___wmul@product
 10381   004BCC  CFF4 F015          	movff	prodh,___wmul@product+1
 10382   004BD0  5010               	movf	___wmul@multiplier^0,w,c
 10383   004BD2  0213               	mulwf	(___wmul@multiplicand+1)^0,c
 10384   004BD4  50F3               	movf	243,w,c
 10385   004BD6  2615               	addwf	(___wmul@product+1)^0,f,c
 10386   004BD8  5011               	movf	(___wmul@multiplier+1)^0,w,c
 10387   004BDA  0212               	mulwf	___wmul@multiplicand^0,c
 10388   004BDC  50F3               	movf	243,w,c
 10389   004BDE  2615               	addwf	(___wmul@product+1)^0,f,c
 10390   004BE0  C014  F010         	movff	___wmul@product,?___wmul
 10391   004BE4  C015  F011         	movff	___wmul@product+1,?___wmul+1
 10392   004BE8  0012               	return		;funcret
 10393   004BEA                     __end_of___wmul:
 10394                           	callstack 0
 10395                           
 10396 ;; *************** function ___lwdiv *****************
 10397 ;; Defined at:
 10398 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;  dividend        2   21[COMRAM] unsigned int 
 10401 ;;  divisor         2   23[COMRAM] unsigned int 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  quotient        2   26[COMRAM] unsigned int 
 10404 ;;  counter         1   25[COMRAM] unsigned char 
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  2   21[COMRAM] unsigned int 
 10407 ;; Registers used:
 10408 ;;		wreg, status,2, status,0
 10409 ;; Tracked objects:
 10410 ;;		On entry : 0/0
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10414 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10415 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10417 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10418 ;;Total ram usage:        7 bytes
 10419 ;; Hardware stack levels used: 1
 10420 ;; Hardware stack levels required when called: 6
 10421 ;; This function calls:
 10422 ;;		Nothing
 10423 ;; This function is called by:
 10424 ;;		_color_clear_init_interrupts
 10425 ;;		_rgb_2_hsv
 10426 ;;		_setMotorPWM
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           	psect	text36
 10431   004832                     __ptext36:
 10432                           	callstack 0
 10433   004832                     ___lwdiv:
 10434                           	callstack 22
 10435   004832  0E00               	movlw	0
 10436   004834  6E1C               	movwf	(___lwdiv@quotient+1)^0,c
 10437   004836  0E00               	movlw	0
 10438   004838  6E1B               	movwf	___lwdiv@quotient^0,c
 10439   00483A  5018               	movf	___lwdiv@divisor^0,w,c
 10440   00483C  1019               	iorwf	(___lwdiv@divisor+1)^0,w,c
 10441   00483E  B4D8               	btfsc	status,2,c
 10442   004840  EF24  F024         	goto	u3551
 10443   004844  EF26  F024         	goto	u3550
 10444   004848                     u3551:
 10445   004848  EF4E  F024         	goto	l1271
 10446   00484C                     u3550:
 10447   00484C  0E01               	movlw	1
 10448   00484E  6E1A               	movwf	___lwdiv@counter^0,c
 10449   004850  EF2E  F024         	goto	l4615
 10450   004854                     l4613:
 10451   004854  90D8               	bcf	status,0,c
 10452   004856  3618               	rlcf	___lwdiv@divisor^0,f,c
 10453   004858  3619               	rlcf	(___lwdiv@divisor+1)^0,f,c
 10454   00485A  2A1A               	incf	___lwdiv@counter^0,f,c
 10455   00485C                     l4615:
 10456   00485C  AE19               	btfss	(___lwdiv@divisor+1)^0,7,c
 10457   00485E  EF33  F024         	goto	u3561
 10458   004862  EF35  F024         	goto	u3560
 10459   004866                     u3561:
 10460   004866  EF2A  F024         	goto	l4613
 10461   00486A                     u3560:
 10462   00486A                     l4617:
 10463   00486A  90D8               	bcf	status,0,c
 10464   00486C  361B               	rlcf	___lwdiv@quotient^0,f,c
 10465   00486E  361C               	rlcf	(___lwdiv@quotient+1)^0,f,c
 10466   004870  5018               	movf	___lwdiv@divisor^0,w,c
 10467   004872  5C16               	subwf	___lwdiv@dividend^0,w,c
 10468   004874  5019               	movf	(___lwdiv@divisor+1)^0,w,c
 10469   004876  5817               	subwfb	(___lwdiv@dividend+1)^0,w,c
 10470   004878  A0D8               	btfss	status,0,c
 10471   00487A  EF41  F024         	goto	u3571
 10472   00487E  EF43  F024         	goto	u3570
 10473   004882                     u3571:
 10474   004882  EF48  F024         	goto	l4625
 10475   004886                     u3570:
 10476   004886  5018               	movf	___lwdiv@divisor^0,w,c
 10477   004888  5E16               	subwf	___lwdiv@dividend^0,f,c
 10478   00488A  5019               	movf	(___lwdiv@divisor+1)^0,w,c
 10479   00488C  5A17               	subwfb	(___lwdiv@dividend+1)^0,f,c
 10480   00488E  801B               	bsf	___lwdiv@quotient^0,0,c
 10481   004890                     l4625:
 10482   004890  90D8               	bcf	status,0,c
 10483   004892  3219               	rrcf	(___lwdiv@divisor+1)^0,f,c
 10484   004894  3218               	rrcf	___lwdiv@divisor^0,f,c
 10485   004896  2E1A               	decfsz	___lwdiv@counter^0,f,c
 10486   004898  EF35  F024         	goto	l4617
 10487   00489C                     l1271:
 10488   00489C  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
 10489   0048A0  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10490   0048A4  0012               	return		;funcret
 10491   0048A6                     __end_of___lwdiv:
 10492                           	callstack 0
 10493                           
 10494 ;; *************** function _batteryLevel *****************
 10495 ;; Defined at:
 10496 ;;		line 8 in file "battery.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  batteryQuart    1   24[COMRAM] unsigned char 
 10501 ;;  batteryVolta    1   23[COMRAM] unsigned char 
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, status,2, status,0, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;Total ram usage:        2 bytes
 10516 ;; Hardware stack levels used: 1
 10517 ;; Hardware stack levels required when called: 7
 10518 ;; This function calls:
 10519 ;;		_ADC_getval
 10520 ;;		_ADC_init
 10521 ;;		___awdiv
 10522 ;; This function is called by:
 10523 ;;		_main
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text37
 10528   004984                     __ptext37:
 10529                           	callstack 0
 10530   004984                     _batteryLevel:
 10531                           	callstack 23
 10532   004984                     
 10533                           ;battery.c: 9:     ADC_init();
 10534   004984  EC48  F026         	call	_ADC_init	;wreg free
 10535                           
 10536                           ;battery.c: 10:     unsigned char batteryVoltage;;battery.c: 11:     unsigned char batte
      +                          ryQuarter;;battery.c: 14:     batteryVoltage = ADC_getval();
 10537   004988  EC55  F026         	call	_ADC_getval	;wreg free
 10538   00498C  6E18               	movwf	batteryLevel@batteryVoltage^0,c
 10539   00498E                     
 10540                           ;battery.c: 15:     batteryQuarter = batteryVoltage/24;
 10541   00498E  C018  F010         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
 10542   004992  6A11               	clrf	(___awdiv@dividend+1)^0,c
 10543   004994  0E00               	movlw	0
 10544   004996  6E13               	movwf	(___awdiv@divisor+1)^0,c
 10545   004998  0E18               	movlw	24
 10546   00499A  6E12               	movwf	___awdiv@divisor^0,c
 10547   00499C  ECC9  F022         	call	___awdiv	;wreg free
 10548   0049A0  5010               	movf	?___awdiv^0,w,c
 10549   0049A2  6E19               	movwf	batteryLevel@batteryQuarter^0,c
 10550   0049A4                     
 10551                           ;battery.c: 18:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
 10552   0049A4  A219               	btfss	batteryLevel@batteryQuarter^0,1,c
 10553   0049A6  EFD7  F024         	goto	u2571
 10554   0049AA  EFD9  F024         	goto	u2570
 10555   0049AE                     u2571:
 10556   0049AE  EFDC  F024         	goto	l451
 10557   0049B2                     u2570:
 10558   0049B2  8E7C               	bsf	124,7,c	;volatile
 10559   0049B4  EFDD  F024         	goto	l452
 10560   0049B8                     l451:
 10561   0049B8  9E7C               	bcf	124,7,c	;volatile
 10562   0049BA                     l452:
 10563                           
 10564                           ;battery.c: 19:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
 10565   0049BA  A019               	btfss	batteryLevel@batteryQuarter^0,0,c
 10566   0049BC  EFE2  F024         	goto	u2581
 10567   0049C0  EFE4  F024         	goto	u2580
 10568   0049C4                     u2581:
 10569   0049C4  EFE7  F024         	goto	l453
 10570   0049C8                     u2580:
 10571   0049C8  8680               	bsf	128,3,c	;volatile
 10572   0049CA  EFE8  F024         	goto	l455
 10573   0049CE                     l453:
 10574   0049CE  9680               	bcf	128,3,c	;volatile
 10575   0049D0                     l455:
 10576   0049D0  0012               	return		;funcret
 10577   0049D2                     __end_of_batteryLevel:
 10578                           	callstack 0
 10579                           
 10580 ;; *************** function ___awdiv *****************
 10581 ;; Defined at:
 10582 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;  dividend        2   15[COMRAM] int 
 10585 ;;  divisor         2   17[COMRAM] int 
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;  quotient        2   21[COMRAM] int 
 10588 ;;  sign            1   20[COMRAM] unsigned char 
 10589 ;;  counter         1   19[COMRAM] unsigned char 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  2   15[COMRAM] int 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10600 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10602 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10603 ;;Total ram usage:        8 bytes
 10604 ;; Hardware stack levels used: 1
 10605 ;; Hardware stack levels required when called: 6
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_batteryLevel
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text38
 10614   004592                     __ptext38:
 10615                           	callstack 0
 10616   004592                     ___awdiv:
 10617                           	callstack 23
 10618   004592  0E00               	movlw	0
 10619   004594  6E15               	movwf	___awdiv@sign^0,c
 10620   004596  BE13               	btfsc	(___awdiv@divisor+1)^0,7,c
 10621   004598  EFD2  F022         	goto	u2480
 10622   00459C  EFD0  F022         	goto	u2481
 10623   0045A0                     u2481:
 10624   0045A0  EFD8  F022         	goto	l3723
 10625   0045A4                     u2480:
 10626   0045A4  6C12               	negf	___awdiv@divisor^0,c
 10627   0045A6  1E13               	comf	(___awdiv@divisor+1)^0,f,c
 10628   0045A8  B0D8               	btfsc	status,0,c
 10629   0045AA  2A13               	incf	(___awdiv@divisor+1)^0,f,c
 10630   0045AC  0E01               	movlw	1
 10631   0045AE  6E15               	movwf	___awdiv@sign^0,c
 10632   0045B0                     l3723:
 10633   0045B0  BE11               	btfsc	(___awdiv@dividend+1)^0,7,c
 10634   0045B2  EFDF  F022         	goto	u2490
 10635   0045B6  EFDD  F022         	goto	u2491
 10636   0045BA                     u2491:
 10637   0045BA  EFE5  F022         	goto	l3729
 10638   0045BE                     u2490:
 10639   0045BE  6C10               	negf	___awdiv@dividend^0,c
 10640   0045C0  1E11               	comf	(___awdiv@dividend+1)^0,f,c
 10641   0045C2  B0D8               	btfsc	status,0,c
 10642   0045C4  2A11               	incf	(___awdiv@dividend+1)^0,f,c
 10643   0045C6  0E01               	movlw	1
 10644   0045C8  1A15               	xorwf	___awdiv@sign^0,f,c
 10645   0045CA                     l3729:
 10646   0045CA  0E00               	movlw	0
 10647   0045CC  6E17               	movwf	(___awdiv@quotient+1)^0,c
 10648   0045CE  0E00               	movlw	0
 10649   0045D0  6E16               	movwf	___awdiv@quotient^0,c
 10650   0045D2  5012               	movf	___awdiv@divisor^0,w,c
 10651   0045D4  1013               	iorwf	(___awdiv@divisor+1)^0,w,c
 10652   0045D6  B4D8               	btfsc	status,2,c
 10653   0045D8  EFF0  F022         	goto	u2501
 10654   0045DC  EFF2  F022         	goto	u2500
 10655   0045E0                     u2501:
 10656   0045E0  EF1A  F023         	goto	l3751
 10657   0045E4                     u2500:
 10658   0045E4  0E01               	movlw	1
 10659   0045E6  6E14               	movwf	___awdiv@counter^0,c
 10660   0045E8  EFFA  F022         	goto	l3737
 10661   0045EC                     l3735:
 10662   0045EC  90D8               	bcf	status,0,c
 10663   0045EE  3612               	rlcf	___awdiv@divisor^0,f,c
 10664   0045F0  3613               	rlcf	(___awdiv@divisor+1)^0,f,c
 10665   0045F2  2A14               	incf	___awdiv@counter^0,f,c
 10666   0045F4                     l3737:
 10667   0045F4  AE13               	btfss	(___awdiv@divisor+1)^0,7,c
 10668   0045F6  EFFF  F022         	goto	u2511
 10669   0045FA  EF01  F023         	goto	u2510
 10670   0045FE                     u2511:
 10671   0045FE  EFF6  F022         	goto	l3735
 10672   004602                     u2510:
 10673   004602                     l3739:
 10674   004602  90D8               	bcf	status,0,c
 10675   004604  3616               	rlcf	___awdiv@quotient^0,f,c
 10676   004606  3617               	rlcf	(___awdiv@quotient+1)^0,f,c
 10677   004608  5012               	movf	___awdiv@divisor^0,w,c
 10678   00460A  5C10               	subwf	___awdiv@dividend^0,w,c
 10679   00460C  5013               	movf	(___awdiv@divisor+1)^0,w,c
 10680   00460E  5811               	subwfb	(___awdiv@dividend+1)^0,w,c
 10681   004610  A0D8               	btfss	status,0,c
 10682   004612  EF0D  F023         	goto	u2521
 10683   004616  EF0F  F023         	goto	u2520
 10684   00461A                     u2521:
 10685   00461A  EF14  F023         	goto	l3747
 10686   00461E                     u2520:
 10687   00461E  5012               	movf	___awdiv@divisor^0,w,c
 10688   004620  5E10               	subwf	___awdiv@dividend^0,f,c
 10689   004622  5013               	movf	(___awdiv@divisor+1)^0,w,c
 10690   004624  5A11               	subwfb	(___awdiv@dividend+1)^0,f,c
 10691   004626  8016               	bsf	___awdiv@quotient^0,0,c
 10692   004628                     l3747:
 10693   004628  90D8               	bcf	status,0,c
 10694   00462A  3213               	rrcf	(___awdiv@divisor+1)^0,f,c
 10695   00462C  3212               	rrcf	___awdiv@divisor^0,f,c
 10696   00462E  2E14               	decfsz	___awdiv@counter^0,f,c
 10697   004630  EF01  F023         	goto	l3739
 10698   004634                     l3751:
 10699   004634  5015               	movf	___awdiv@sign^0,w,c
 10700   004636  B4D8               	btfsc	status,2,c
 10701   004638  EF20  F023         	goto	u2531
 10702   00463C  EF22  F023         	goto	u2530
 10703   004640                     u2531:
 10704   004640  EF26  F023         	goto	l3755
 10705   004644                     u2530:
 10706   004644  6C16               	negf	___awdiv@quotient^0,c
 10707   004646  1E17               	comf	(___awdiv@quotient+1)^0,f,c
 10708   004648  B0D8               	btfsc	status,0,c
 10709   00464A  2A17               	incf	(___awdiv@quotient+1)^0,f,c
 10710   00464C                     l3755:
 10711   00464C  C016  F010         	movff	___awdiv@quotient,?___awdiv
 10712   004650  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
 10713   004654  0012               	return		;funcret
 10714   004656                     __end_of___awdiv:
 10715                           	callstack 0
 10716                           
 10717 ;; *************** function _ADC_init *****************
 10718 ;; Defined at:
 10719 ;;		line 9 in file "ADC.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;		None
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      void 
 10726 ;; Registers used:
 10727 ;;		wreg, status,2
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10737 ;;Total ram usage:        0 bytes
 10738 ;; Hardware stack levels used: 1
 10739 ;; Hardware stack levels required when called: 6
 10740 ;; This function calls:
 10741 ;;		Nothing
 10742 ;; This function is called by:
 10743 ;;		_batteryLevel
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text39
 10748   004C90                     __ptext39:
 10749                           	callstack 0
 10750   004C90                     _ADC_init:
 10751                           	callstack 23
 10752   004C90                     
 10753                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 10754   004C90  8C86               	bsf	134,6,c	;volatile
 10755                           
 10756                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 10757   004C92  010E               	movlb	14	; () banked
 10758   004C94  8DB4               	bsf	180,6,b	;volatile
 10759                           
 10760                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 10761   004C96  010F               	movlb	15	; () banked
 10762   004C98  9958               	bcf	88,4,b	;volatile
 10763   004C9A                     
 10764                           ; BSR set to: 15
 10765                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 10766   004C9A  0EFC               	movlw	-4
 10767   004C9C  1758               	andwf	88,f,b	;volatile
 10768                           
 10769                           ;ADC.c: 17:     ADPCH=0b101110;
 10770   004C9E  0E2E               	movlw	46
 10771   004CA0  6F5F               	movwf	95,b	;volatile
 10772   004CA2                     
 10773                           ; BSR set to: 15
 10774                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 10775   004CA2  9460               	bcf	96,2,c	;volatile
 10776   004CA4                     
 10777                           ; BSR set to: 15
 10778                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 10779   004CA4  8860               	bsf	96,4,c	;volatile
 10780   004CA6                     
 10781                           ; BSR set to: 15
 10782                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 10783   004CA6  8E60               	bsf	96,7,c	;volatile
 10784   004CA8                     
 10785                           ; BSR set to: 15
 10786   004CA8  0012               	return		;funcret
 10787   004CAA                     __end_of_ADC_init:
 10788                           	callstack 0
 10789                           
 10790 ;; *************** function _ADC_getval *****************
 10791 ;; Defined at:
 10792 ;;		line 23 in file "ADC.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  tmpval          1   15[COMRAM] unsigned char 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      unsigned char 
 10799 ;; Registers used:
 10800 ;;		wreg, status,2
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10810 ;;Total ram usage:        1 bytes
 10811 ;; Hardware stack levels used: 1
 10812 ;; Hardware stack levels required when called: 6
 10813 ;; This function calls:
 10814 ;;		Nothing
 10815 ;; This function is called by:
 10816 ;;		_batteryLevel
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           	psect	text40
 10821   004CAA                     __ptext40:
 10822                           	callstack 0
 10823   004CAA                     _ADC_getval:
 10824                           	callstack 23
 10825   004CAA                     
 10826                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
 10827   004CAA  8060               	bsf	96,0,c	;volatile
 10828   004CAC                     l437:
 10829   004CAC  B060               	btfsc	96,0,c	;volatile
 10830   004CAE  EF5B  F026         	goto	u2321
 10831   004CB2  EF5D  F026         	goto	u2320
 10832   004CB6                     u2321:
 10833   004CB6  EF56  F026         	goto	l437
 10834   004CBA                     u2320:
 10835   004CBA                     
 10836                           ;ADC.c: 31:     tmpval = ADRESH;
 10837   004CBA  CF64 F010          	movff	3940,ADC_getval@tmpval	;volatile
 10838   004CBE                     
 10839                           ;ADC.c: 35:     return tmpval;
 10840   004CBE  5010               	movf	ADC_getval@tmpval^0,w,c
 10841   004CC0  0012               	return		;funcret
 10842   004CC2                     __end_of_ADC_getval:
 10843                           	callstack 0
 10844                           
 10845 ;; *************** function _Timer0_init *****************
 10846 ;; Defined at:
 10847 ;;		line 7 in file "timers.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;		None
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;		None
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  1    wreg      void 
 10854 ;; Registers used:
 10855 ;;		wreg, status,2
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10865 ;;Total ram usage:        0 bytes
 10866 ;; Hardware stack levels used: 1
 10867 ;; Hardware stack levels required when called: 6
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		_main
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text41
 10876   004C50                     __ptext41:
 10877                           	callstack 0
 10878   004C50                     _Timer0_init:
 10879                           	callstack 24
 10880   004C50                     
 10881                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 10882   004C50  50D6               	movf	214,w,c	;volatile
 10883   004C52  0B1F               	andlw	-225
 10884   004C54  0940               	iorlw	64
 10885   004C56  6ED6               	movwf	214,c	;volatile
 10886   004C58                     
 10887                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 10888   004C58  88D6               	bsf	214,4,c	;volatile
 10889                           
 10890                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1100;
 10891   004C5A  50D6               	movf	214,w,c	;volatile
 10892   004C5C  0BF0               	andlw	-16
 10893   004C5E  090C               	iorlw	12
 10894   004C60  6ED6               	movwf	214,c	;volatile
 10895   004C62                     
 10896                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 10897   004C62  88D5               	bsf	213,4,c	;volatile
 10898                           
 10899                           ;timers.c: 15:     TMR0H=0;
 10900   004C64  0E00               	movlw	0
 10901   004C66  6ED4               	movwf	212,c	;volatile
 10902                           
 10903                           ;timers.c: 16:     TMR0L=0;
 10904   004C68  0E00               	movlw	0
 10905   004C6A  6ED3               	movwf	211,c	;volatile
 10906   004C6C                     
 10907                           ;timers.c: 17:     T0CON0bits.T0EN=1;
 10908   004C6C  8ED5               	bsf	213,7,c	;volatile
 10909   004C6E  0012               	return		;funcret
 10910   004C70                     __end_of_Timer0_init:
 10911                           	callstack 0
 10912                           
 10913 ;; *************** function _Interrupts_init *****************
 10914 ;; Defined at:
 10915 ;;		line 11 in file "interrupts.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		None
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used: 1
 10935 ;; Hardware stack levels required when called: 6
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_main
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           	psect	text42
 10944   004CC2                     __ptext42:
 10945                           	callstack 0
 10946   004CC2                     _Interrupts_init:
 10947                           	callstack 24
 10948   004CC2                     
 10949                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
 10950   004CC2  8082               	bsf	130,0,c	;volatile
 10951                           
 10952                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
 10953   004CC4  010E               	movlb	14	; () banked
 10954   004CC6  919A               	bcf	154,0,b	;volatile
 10955                           
 10956                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
 10957   004CC8  8129               	bsf	41,0,b	;volatile
 10958                           
 10959                           ;interrupts.c: 17:     IPR0bits.INT0IP=1;
 10960   004CCA  811F               	bsf	31,0,b	;volatile
 10961                           
 10962                           ;interrupts.c: 18:     INTCONbits.INT0EDG=0;
 10963   004CCC  90F2               	bcf	242,0,c	;volatile
 10964                           
 10965                           ;interrupts.c: 30:     INTCONbits.PEIE=1;
 10966   004CCE  8CF2               	bsf	242,6,c	;volatile
 10967                           
 10968                           ;interrupts.c: 31:     INTCONbits.GIE=1;
 10969   004CD0  8EF2               	bsf	242,7,c	;volatile
 10970   004CD2                     
 10971                           ; BSR set to: 14
 10972   004CD2  0012               	return		;funcret
 10973   004CD4                     __end_of_Interrupts_init:
 10974                           	callstack 0
 10975                           
 10976 ;; *************** function _Buggy_init *****************
 10977 ;; Defined at:
 10978 ;;		line 7 in file "buggysetup.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		None
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used: 1
 10998 ;; Hardware stack levels required when called: 6
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_main
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text43
 11007   004A94                     __ptext43:
 11008                           	callstack 0
 11009   004A94                     _Buggy_init:
 11010                           	callstack 24
 11011   004A94                     
 11012                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
 11013   004A94  9E7C               	bcf	124,7,c	;volatile
 11014                           
 11015                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
 11016   004A96  9E84               	bcf	132,7,c	;volatile
 11017                           
 11018                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
 11019   004A98  9680               	bcf	128,3,c	;volatile
 11020                           
 11021                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
 11022   004A9A  9688               	bcf	136,3,c	;volatile
 11023                           
 11024                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
 11025   004A9C  8486               	bsf	134,2,c	;volatile
 11026                           
 11027                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
 11028   004A9E  010E               	movlb	14	; () banked
 11029   004AA0  95B4               	bcf	180,2,b	;volatile
 11030                           
 11031                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
 11032   004AA2  8686               	bsf	134,3,c	;volatile
 11033                           
 11034                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
 11035   004AA4  97B4               	bcf	180,3,b	;volatile
 11036                           
 11037                           ;buggysetup.c: 32:     LATHbits.LATH1=0;
 11038   004AA6  9280               	bcf	128,1,c	;volatile
 11039                           
 11040                           ;buggysetup.c: 33:     TRISHbits.TRISH1=0;
 11041   004AA8  9288               	bcf	136,1,c	;volatile
 11042                           
 11043                           ;buggysetup.c: 36:     LATDbits.LATD4=0;
 11044   004AAA  987C               	bcf	124,4,c	;volatile
 11045                           
 11046                           ;buggysetup.c: 37:     TRISDbits.TRISD4=0;
 11047   004AAC  9884               	bcf	132,4,c	;volatile
 11048                           
 11049                           ;buggysetup.c: 40:     LATDbits.LATD3=0;
 11050   004AAE  967C               	bcf	124,3,c	;volatile
 11051                           
 11052                           ;buggysetup.c: 41:     TRISDbits.TRISD3=0;
 11053   004AB0  9684               	bcf	132,3,c	;volatile
 11054                           
 11055                           ;buggysetup.c: 42:     ANSELDbits.ANSELD3=0;
 11056   004AB2  97A7               	bcf	167,3,b	;volatile
 11057                           
 11058                           ;buggysetup.c: 45:     LATHbits.LATH0=0;
 11059   004AB4  9080               	bcf	128,0,c	;volatile
 11060                           
 11061                           ;buggysetup.c: 46:     TRISHbits.TRISH0=0;
 11062   004AB6  9088               	bcf	136,0,c	;volatile
 11063                           
 11064                           ;buggysetup.c: 49:     LATFbits.LATF0=0;
 11065   004AB8  907E               	bcf	126,0,c	;volatile
 11066                           
 11067                           ;buggysetup.c: 50:     TRISFbits.TRISF0=0;
 11068   004ABA  9086               	bcf	134,0,c	;volatile
 11069                           
 11070                           ;buggysetup.c: 53:     LATGbits.LATG0 = 0;
 11071   004ABC  907F               	bcf	127,0,c	;volatile
 11072                           
 11073                           ;buggysetup.c: 54:     TRISGbits.TRISG0 = 0;
 11074   004ABE  9087               	bcf	135,0,c	;volatile
 11075                           
 11076                           ;buggysetup.c: 56:     LATEbits.LATE7 = 0;
 11077   004AC0  9E7D               	bcf	125,7,c	;volatile
 11078                           
 11079                           ;buggysetup.c: 57:     TRISEbits.TRISE7 = 0;
 11080   004AC2  9E85               	bcf	133,7,c	;volatile
 11081                           
 11082                           ;buggysetup.c: 59:     LATAbits.LATA3 = 0;
 11083   004AC4  9679               	bcf	121,3,c	;volatile
 11084                           
 11085                           ;buggysetup.c: 60:     TRISAbits.TRISA3 = 0;
 11086   004AC6  9681               	bcf	129,3,c	;volatile
 11087   004AC8                     
 11088                           ; BSR set to: 14
 11089   004AC8  0012               	return		;funcret
 11090   004ACA                     __end_of_Buggy_init:
 11091                           	callstack 0
 11092                           
 11093 ;; *************** function _LowISR *****************
 11094 ;; Defined at:
 11095 ;;		line 72 in file "interrupts.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;		None
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;		None
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  1    wreg      void 
 11102 ;; Registers used:
 11103 ;;		wreg, status,2
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11111 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11113 ;;Total ram usage:        3 bytes
 11114 ;; Hardware stack levels used: 1
 11115 ;; Hardware stack levels required when called: 5
 11116 ;; This function calls:
 11117 ;;		Nothing
 11118 ;; This function is called by:
 11119 ;;		Interrupt level 1
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	intcodelo
 11124   000018                     __pintcodelo:
 11125                           	callstack 0
 11126   000018                     _LowISR:
 11127                           	callstack 20
 11128                           
 11129                           ; BSR set to: 14
 11130                           ;incstack = 0
 11131   000018  8050               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 11132   00001A  CFD8 F00D          	movff	status,??_LowISR
 11133   00001E  CFE8 F00E          	movff	wreg,??_LowISR+1
 11134   000022  CFE0 F00F          	movff	bsr,??_LowISR+2
 11135   000026                     
 11136                           ;interrupts.c: 76:     if(PIR0bits.TMR0IF){
 11137   000026  010E               	movlb	14	; () banked
 11138   000028  AB33               	btfss	51,5,b	;volatile
 11139   00002A  EF19  F000         	goto	i1u164_21
 11140   00002E  EF1B  F000         	goto	i1u164_20
 11141   000032                     i1u164_21:
 11142   000032  EF22  F000         	goto	i1l356
 11143   000036                     i1u164_20:
 11144   000036                     
 11145                           ; BSR set to: 14
 11146                           ;interrupts.c: 77:         lost = 1;
 11147   000036  0E01               	movlw	1
 11148   000038  6E4B               	movwf	_lost^0,c
 11149                           
 11150                           ;interrupts.c: 78:         TMR0H=0;
 11151   00003A  0E00               	movlw	0
 11152   00003C  6ED4               	movwf	212,c	;volatile
 11153                           
 11154                           ;interrupts.c: 79:         TMR0L=0;
 11155   00003E  0E00               	movlw	0
 11156   000040  6ED3               	movwf	211,c	;volatile
 11157   000042                     
 11158                           ; BSR set to: 14
 11159                           ;interrupts.c: 80:         PIR0bits.TMR0IF=0;
 11160   000042  9B33               	bcf	51,5,b	;volatile
 11161   000044                     i1l356:
 11162                           
 11163                           ; BSR set to: 14
 11164   000044  C00F  FFE0         	movff	??_LowISR+2,bsr
 11165   000048  C00E  FFE8         	movff	??_LowISR+1,wreg
 11166   00004C  C00D  FFD8         	movff	??_LowISR,status
 11167   000050  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 11168   000052  0010               	retfie	
 11169   000054                     __end_of_LowISR:
 11170                           	callstack 0
 11171                           
 11172 ;; *************** function _HighISR *****************
 11173 ;; Defined at:
 11174 ;;		line 39 in file "interrupts.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;		None
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;		None
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  1    wreg      void 
 11181 ;; Registers used:
 11182 ;;		wreg, status,2, status,0, cstack
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11192 ;;Total ram usage:        0 bytes
 11193 ;; Hardware stack levels used: 1
 11194 ;; Hardware stack levels required when called: 4
 11195 ;; This function calls:
 11196 ;;		i2_color_clear_init_interrupts
 11197 ;; This function is called by:
 11198 ;;		Interrupt level 2
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	intcode
 11203   000008                     __pintcode:
 11204                           	callstack 0
 11205   000008                     _HighISR:
 11206                           	callstack 20
 11207                           
 11208                           ; BSR set to: 14
 11209                           ;incstack = 0
 11210   000008  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11211   00000A  EF07  F026         	goto	int_func
 11212                           
 11213                           	psect	intcode_body
 11214   004C0E                     __pintcode_body:
 11215                           	callstack 20
 11216   004C0E                     int_func:
 11217                           	callstack 20
 11218   004C0E                     
 11219                           ;interrupts.c: 43:     if(PIR0bits.INT0IF){
 11220   004C0E  010E               	movlb	14	; () banked
 11221   004C10  A133               	btfss	51,0,b	;volatile
 11222   004C12  EF0D  F026         	goto	i2u340_41
 11223   004C16  EF0F  F026         	goto	i2u340_40
 11224   004C1A                     i2u340_41:
 11225   004C1A  EF16  F026         	goto	i2l350
 11226   004C1E                     i2u340_40:
 11227   004C1E                     
 11228                           ; BSR set to: 14
 11229                           ;interrupts.c: 44:         brightnessChange = 1;
 11230   004C1E  0E01               	movlw	1
 11231   004C20  0101               	movlb	1	; () banked
 11232   004C22  6FDA               	movwf	_brightnessChange& (0+255),b
 11233   004C24                     
 11234                           ; BSR set to: 1
 11235                           ;interrupts.c: 45:         color_clear_init_interrupts();
 11236   004C24  EC7E  F023         	call	i2_color_clear_init_interrupts	;wreg free
 11237   004C28                     
 11238                           ;interrupts.c: 46:         PIR0bits.INT0IF = 0;
 11239   004C28  010E               	movlb	14	; () banked
 11240   004C2A  9133               	bcf	51,0,b	;volatile
 11241   004C2C                     i2l350:
 11242                           
 11243                           ; BSR set to: 14
 11244   004C2C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11245   004C2E  0011               	retfie		f
 11246   004C30                     __end_of_HighISR:
 11247                           	callstack 0
 11248                           
 11249 ;; *************** function i2_color_clear_init_interrupts *****************
 11250 ;; Defined at:
 11251 ;;		line 27 in file "color.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;		None
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;  low_threshol    2   10[COMRAM] unsigned int 
 11256 ;;  high_thresho    2    8[COMRAM] unsigned int 
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, status,2, status,0, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11267 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11269 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11270 ;;Total ram usage:        5 bytes
 11271 ;; Hardware stack levels used: 1
 11272 ;; Hardware stack levels required when called: 3
 11273 ;; This function calls:
 11274 ;;		i2_I2C_2_Master_Start
 11275 ;;		i2_I2C_2_Master_Stop
 11276 ;;		i2_I2C_2_Master_Write
 11277 ;;		i2___lwdiv
 11278 ;;		i2_color_writetoaddr
 11279 ;; This function is called by:
 11280 ;;		_HighISR
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text46
 11285   0046FC                     __ptext46:
 11286                           	callstack 0
 11287   0046FC                     i2_color_clear_init_interrupts:
 11288                           	callstack 20
 11289   0046FC                     
 11290                           ;color.c: 29:     I2C_2_Master_Start();
 11291   0046FC  EC8F  F026         	call	i2_I2C_2_Master_Start	;wreg free
 11292                           
 11293                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
 11294   004700  0E52               	movlw	82
 11295   004702  EC70  F026         	call	i2_I2C_2_Master_Write
 11296                           
 11297                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
 11298   004706  0EE6               	movlw	230
 11299   004708  EC70  F026         	call	i2_I2C_2_Master_Write
 11300                           
 11301                           ;color.c: 32:     I2C_2_Master_Stop();
 11302   00470C  EC8A  F026         	call	i2_I2C_2_Master_Stop	;wreg free
 11303                           
 11304                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/3);
 11305   004710  C1D8  F001         	movff	_ambient,i2___lwdiv@dividend
 11306   004714  C1D9  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 11307   004718  0E00               	movlw	0
 11308   00471A  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 11309   00471C  0E03               	movlw	3
 11310   00471E  6E03               	movwf	i2___lwdiv@divisor^0,c
 11311   004720  EC53  F024         	call	i2___lwdiv	;wreg free
 11312   004724  0101               	movlb	1	; () banked
 11313   004726  51D8               	movf	_ambient& (0+255),w,b
 11314   004728  2401               	addwf	?i2___lwdiv^0,w,c
 11315   00472A  6E09               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
 11316   00472C  51D9               	movf	(_ambient+1)& (0+255),w,b
 11317   00472E  2002               	addwfc	(?i2___lwdiv+1)^0,w,c
 11318   004730  6E0A               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
 11319                           
 11320                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
 11321   004732  C1D8  F001         	movff	_ambient,i2___lwdiv@dividend
 11322   004736  C1D9  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 11323   00473A  0E00               	movlw	0
 11324   00473C  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 11325   00473E  0E14               	movlw	20
 11326   004740  6E03               	movwf	i2___lwdiv@divisor^0,c
 11327   004742  EC53  F024         	call	i2___lwdiv	;wreg free
 11328   004746  5001               	movf	?i2___lwdiv^0,w,c
 11329   004748  0101               	movlb	1	; () banked
 11330   00474A  5DD8               	subwf	_ambient& (0+255),w,b
 11331   00474C  6E0B               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
 11332   00474E  5002               	movf	(?i2___lwdiv+1)^0,w,c
 11333   004750  59D9               	subwfb	(_ambient+1)& (0+255),w,b
 11334   004752  6E0C               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
 11335                           
 11336                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
 11337   004754  0E13               	movlw	19
 11338   004756  6E03               	movwf	i2color_writetoaddr@value^0,c
 11339   004758  0E00               	movlw	0
 11340   00475A  EC38  F026         	call	i2_color_writetoaddr
 11341   00475E                     
 11342                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
 11343   00475E  0E3F               	movlw	63
 11344   004760  6E08               	movwf	??i2_color_clear_init_interrupts^0,c
 11345   004762  0E55               	movlw	85
 11346   004764                     i2u601_47:
 11347   004764  2EE8               	decfsz	wreg,f,c
 11348   004766  D7FE               	bra	i2u601_47
 11349   004768  2E08               	decfsz	??i2_color_clear_init_interrupts^0,f,c
 11350   00476A  D7FC               	bra	i2u601_47
 11351   00476C  0000               	nop	
 11352   00476E                     
 11353                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
 11354   00476E  500A               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
 11355   004770  6E03               	movwf	i2color_writetoaddr@value^0,c
 11356   004772  0E07               	movlw	7
 11357   004774  EC38  F026         	call	i2_color_writetoaddr
 11358   004778                     
 11359                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
 11360   004778  C009  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
 11361   00477C  0E06               	movlw	6
 11362   00477E  EC38  F026         	call	i2_color_writetoaddr
 11363   004782                     
 11364                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
 11365   004782  500C               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
 11366   004784  6E03               	movwf	i2color_writetoaddr@value^0,c
 11367   004786  0E05               	movlw	5
 11368   004788  EC38  F026         	call	i2_color_writetoaddr
 11369   00478C                     
 11370                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
 11371   00478C  C00B  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
 11372   004790  0E04               	movlw	4
 11373   004792  EC38  F026         	call	i2_color_writetoaddr
 11374   004796                     
 11375                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
 11376   004796  0E03               	movlw	3
 11377   004798  6E03               	movwf	i2color_writetoaddr@value^0,c
 11378   00479A  0E0C               	movlw	12
 11379   00479C  EC38  F026         	call	i2_color_writetoaddr
 11380   0047A0  0012               	return		;funcret
 11381   0047A2                     __end_ofi2_color_clear_init_interrupts:
 11382                           	callstack 0
 11383                           
 11384 ;; *************** function i2_color_writetoaddr *****************
 11385 ;; Defined at:
 11386 ;;		line 53 in file "color.c"
 11387 ;; Parameters:    Size  Location     Type
 11388 ;;  address         1    wreg     unsigned char 
 11389 ;;  value           1    2[COMRAM] unsigned char 
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;  address         1    3[COMRAM] unsigned char 
 11392 ;; Return value:  Size  Location     Type
 11393 ;;                  1    wreg      void 
 11394 ;; Registers used:
 11395 ;;		wreg, status,2, status,0, cstack
 11396 ;; Tracked objects:
 11397 ;;		On entry : 0/0
 11398 ;;		On exit  : 0/0
 11399 ;;		Unchanged: 0/0
 11400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11401 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11405 ;;Total ram usage:        2 bytes
 11406 ;; Hardware stack levels used: 1
 11407 ;; Hardware stack levels required when called: 2
 11408 ;; This function calls:
 11409 ;;		i2_I2C_2_Master_Start
 11410 ;;		i2_I2C_2_Master_Stop
 11411 ;;		i2_I2C_2_Master_Write
 11412 ;; This function is called by:
 11413 ;;		i2_color_clear_init_interrupts
 11414 ;; This function uses a non-reentrant model
 11415 ;;
 11416                           
 11417                           	psect	text47
 11418   004C70                     __ptext47:
 11419                           	callstack 0
 11420   004C70                     i2_color_writetoaddr:
 11421                           	callstack 20
 11422                           
 11423                           ;incstack = 0
 11424                           ;i2color_writetoaddr@address stored from wreg
 11425   004C70  6E04               	movwf	i2color_writetoaddr@address^0,c
 11426   004C72                     
 11427                           ;color.c: 54:     I2C_2_Master_Start();
 11428   004C72  EC8F  F026         	call	i2_I2C_2_Master_Start	;wreg free
 11429                           
 11430                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
 11431   004C76  0E52               	movlw	82
 11432   004C78  EC70  F026         	call	i2_I2C_2_Master_Write
 11433                           
 11434                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
 11435   004C7C  5004               	movf	i2color_writetoaddr@address^0,w,c
 11436   004C7E  0980               	iorlw	128
 11437   004C80  EC70  F026         	call	i2_I2C_2_Master_Write
 11438                           
 11439                           ;color.c: 57:     I2C_2_Master_Write(value);
 11440   004C84  5003               	movf	i2color_writetoaddr@value^0,w,c
 11441   004C86  EC70  F026         	call	i2_I2C_2_Master_Write
 11442                           
 11443                           ;color.c: 58:     I2C_2_Master_Stop();
 11444   004C8A  EC8A  F026         	call	i2_I2C_2_Master_Stop	;wreg free
 11445   004C8E  0012               	return		;funcret
 11446   004C90                     __end_ofi2_color_writetoaddr:
 11447                           	callstack 0
 11448                           
 11449 ;; *************** function i2_I2C_2_Master_Write *****************
 11450 ;; Defined at:
 11451 ;;		line 45 in file "i2c.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;  data_byte       1    wreg     unsigned char 
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;  data_byte       1    1[COMRAM] unsigned char 
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      void 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11469 ;;Total ram usage:        1 bytes
 11470 ;; Hardware stack levels used: 1
 11471 ;; Hardware stack levels required when called: 1
 11472 ;; This function calls:
 11473 ;;		i2_I2C_2_Master_Idle
 11474 ;; This function is called by:
 11475 ;;		i2_color_clear_init_interrupts
 11476 ;;		i2_color_writetoaddr
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text48
 11481   004CE0                     __ptext48:
 11482                           	callstack 0
 11483   004CE0                     i2_I2C_2_Master_Write:
 11484                           	callstack 20
 11485                           
 11486                           ;incstack = 0
 11487                           ;i2I2C_2_Master_Write@data_byte stored from wreg
 11488   004CE0  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
 11489   004CE2                     
 11490                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11491   004CE2  ECCE  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11492   004CE6                     
 11493                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11494   004CE6  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
 11495   004CEA  0012               	return		;funcret
 11496   004CEC                     __end_ofi2_I2C_2_Master_Write:
 11497                           	callstack 0
 11498                           
 11499 ;; *************** function i2_I2C_2_Master_Stop *****************
 11500 ;; Defined at:
 11501 ;;		line 39 in file "i2c.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;		None
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;		None
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  1    wreg      void 
 11508 ;; Registers used:
 11509 ;;		wreg, status,2, status,0, cstack
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;Total ram usage:        0 bytes
 11520 ;; Hardware stack levels used: 1
 11521 ;; Hardware stack levels required when called: 1
 11522 ;; This function calls:
 11523 ;;		i2_I2C_2_Master_Idle
 11524 ;; This function is called by:
 11525 ;;		i2_color_clear_init_interrupts
 11526 ;;		i2_color_writetoaddr
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text49
 11531   004D14                     __ptext49:
 11532                           	callstack 0
 11533   004D14                     i2_I2C_2_Master_Stop:
 11534                           	callstack 20
 11535   004D14                     
 11536                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11537   004D14  ECCE  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11538   004D18                     
 11539                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11540   004D18  010E               	movlb	14	; () banked
 11541   004D1A  85DA               	bsf	218,2,b	;volatile
 11542   004D1C                     
 11543                           ; BSR set to: 14
 11544   004D1C  0012               	return		;funcret
 11545   004D1E                     __end_ofi2_I2C_2_Master_Stop:
 11546                           	callstack 0
 11547                           
 11548 ;; *************** function i2_I2C_2_Master_Start *****************
 11549 ;; Defined at:
 11550 ;;		line 27 in file "i2c.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  1    wreg      void 
 11557 ;; Registers used:
 11558 ;;		wreg, status,2, status,0, cstack
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11568 ;;Total ram usage:        0 bytes
 11569 ;; Hardware stack levels used: 1
 11570 ;; Hardware stack levels required when called: 1
 11571 ;; This function calls:
 11572 ;;		i2_I2C_2_Master_Idle
 11573 ;; This function is called by:
 11574 ;;		i2_color_clear_init_interrupts
 11575 ;;		i2_color_writetoaddr
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           	psect	text50
 11580   004D1E                     __ptext50:
 11581                           	callstack 0
 11582   004D1E                     i2_I2C_2_Master_Start:
 11583                           	callstack 20
 11584   004D1E                     
 11585                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11586   004D1E  ECCE  F025         	call	i2_I2C_2_Master_Idle	;wreg free
 11587   004D22                     
 11588                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11589   004D22  010E               	movlb	14	; () banked
 11590   004D24  81DA               	bsf	218,0,b	;volatile
 11591   004D26                     
 11592                           ; BSR set to: 14
 11593   004D26  0012               	return		;funcret
 11594   004D28                     __end_ofi2_I2C_2_Master_Start:
 11595                           	callstack 0
 11596                           
 11597 ;; *************** function i2_I2C_2_Master_Idle *****************
 11598 ;; Defined at:
 11599 ;;		line 22 in file "i2c.c"
 11600 ;; Parameters:    Size  Location     Type
 11601 ;;		None
 11602 ;; Auto vars:     Size  Location     Type
 11603 ;;		None
 11604 ;; Return value:  Size  Location     Type
 11605 ;;                  1    wreg      void 
 11606 ;; Registers used:
 11607 ;;		wreg, status,2, status,0
 11608 ;; Tracked objects:
 11609 ;;		On entry : 0/0
 11610 ;;		On exit  : 0/0
 11611 ;;		Unchanged: 0/0
 11612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11617 ;;Total ram usage:        1 bytes
 11618 ;; Hardware stack levels used: 1
 11619 ;; This function calls:
 11620 ;;		Nothing
 11621 ;; This function is called by:
 11622 ;;		i2_I2C_2_Master_Start
 11623 ;;		i2_I2C_2_Master_Stop
 11624 ;;		i2_I2C_2_Master_Write
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           	psect	text51
 11629   004B9C                     __ptext51:
 11630                           	callstack 0
 11631   004B9C                     i2_I2C_2_Master_Idle:
 11632                           	callstack 20
 11633   004B9C                     i2l258:
 11634   004B9C  010E               	movlb	14	; () banked
 11635   004B9E  B5D8               	btfsc	216,2,b	;volatile
 11636   004BA0  EFD4  F025         	goto	i2u187_41
 11637   004BA4  EFD6  F025         	goto	i2u187_40
 11638   004BA8                     i2u187_41:
 11639   004BA8  EFCE  F025         	goto	i2l258
 11640   004BAC                     i2u187_40:
 11641   004BAC                     
 11642                           ; BSR set to: 14
 11643   004BAC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
 11644   004BB0  0E1F               	movlw	31
 11645   004BB2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
 11646   004BB4  A4D8               	btfss	status,2,c
 11647   004BB6  EFDF  F025         	goto	i2u188_41
 11648   004BBA  EFE1  F025         	goto	i2u188_40
 11649   004BBE                     i2u188_41:
 11650   004BBE  EFCE  F025         	goto	i2l258
 11651   004BC2                     i2u188_40:
 11652   004BC2                     
 11653                           ; BSR set to: 14
 11654   004BC2  0012               	return		;funcret
 11655   004BC4                     __end_ofi2_I2C_2_Master_Idle:
 11656                           	callstack 0
 11657                           
 11658 ;; *************** function i2___lwdiv *****************
 11659 ;; Defined at:
 11660 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;  dividend        2    0[COMRAM] unsigned int 
 11663 ;;  divisor         2    2[COMRAM] unsigned int 
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;  quotient        2    4[COMRAM] unsigned int 
 11666 ;;  counter         1    6[COMRAM] unsigned char 
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  2    0[COMRAM] unsigned int 
 11669 ;; Registers used:
 11670 ;;		wreg, status,2, status,0
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11677 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11679 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11680 ;;Total ram usage:        7 bytes
 11681 ;; Hardware stack levels used: 1
 11682 ;; This function calls:
 11683 ;;		Nothing
 11684 ;; This function is called by:
 11685 ;;		i2_color_clear_init_interrupts
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text52
 11690   0048A6                     __ptext52:
 11691                           	callstack 0
 11692   0048A6                     i2___lwdiv:
 11693                           	callstack 22
 11694   0048A6  0E00               	movlw	0
 11695   0048A8  6E06               	movwf	(i2___lwdiv@quotient+1)^0,c
 11696   0048AA  0E00               	movlw	0
 11697   0048AC  6E05               	movwf	i2___lwdiv@quotient^0,c
 11698   0048AE  5003               	movf	i2___lwdiv@divisor^0,w,c
 11699   0048B0  1004               	iorwf	(i2___lwdiv@divisor+1)^0,w,c
 11700   0048B2  B4D8               	btfsc	status,2,c
 11701   0048B4  EF5E  F024         	goto	i2u254_41
 11702   0048B8  EF60  F024         	goto	i2u254_40
 11703   0048BC                     i2u254_41:
 11704   0048BC  EF88  F024         	goto	i2l1271
 11705   0048C0                     i2u254_40:
 11706   0048C0  0E01               	movlw	1
 11707   0048C2  6E07               	movwf	i2___lwdiv@counter^0,c
 11708   0048C4  EF68  F024         	goto	i2l3769
 11709   0048C8                     i2l3767:
 11710   0048C8  90D8               	bcf	status,0,c
 11711   0048CA  3603               	rlcf	i2___lwdiv@divisor^0,f,c
 11712   0048CC  3604               	rlcf	(i2___lwdiv@divisor+1)^0,f,c
 11713   0048CE  2A07               	incf	i2___lwdiv@counter^0,f,c
 11714   0048D0                     i2l3769:
 11715   0048D0  AE04               	btfss	(i2___lwdiv@divisor+1)^0,7,c
 11716   0048D2  EF6D  F024         	goto	i2u255_41
 11717   0048D6  EF6F  F024         	goto	i2u255_40
 11718   0048DA                     i2u255_41:
 11719   0048DA  EF64  F024         	goto	i2l3767
 11720   0048DE                     i2u255_40:
 11721   0048DE                     i2l3771:
 11722   0048DE  90D8               	bcf	status,0,c
 11723   0048E0  3605               	rlcf	i2___lwdiv@quotient^0,f,c
 11724   0048E2  3606               	rlcf	(i2___lwdiv@quotient+1)^0,f,c
 11725   0048E4  5003               	movf	i2___lwdiv@divisor^0,w,c
 11726   0048E6  5C01               	subwf	i2___lwdiv@dividend^0,w,c
 11727   0048E8  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11728   0048EA  5802               	subwfb	(i2___lwdiv@dividend+1)^0,w,c
 11729   0048EC  A0D8               	btfss	status,0,c
 11730   0048EE  EF7B  F024         	goto	i2u256_41
 11731   0048F2  EF7D  F024         	goto	i2u256_40
 11732   0048F6                     i2u256_41:
 11733   0048F6  EF82  F024         	goto	i2l3779
 11734   0048FA                     i2u256_40:
 11735   0048FA  5003               	movf	i2___lwdiv@divisor^0,w,c
 11736   0048FC  5E01               	subwf	i2___lwdiv@dividend^0,f,c
 11737   0048FE  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11738   004900  5A02               	subwfb	(i2___lwdiv@dividend+1)^0,f,c
 11739   004902  8005               	bsf	i2___lwdiv@quotient^0,0,c
 11740   004904                     i2l3779:
 11741   004904  90D8               	bcf	status,0,c
 11742   004906  3204               	rrcf	(i2___lwdiv@divisor+1)^0,f,c
 11743   004908  3203               	rrcf	i2___lwdiv@divisor^0,f,c
 11744   00490A  2E07               	decfsz	i2___lwdiv@counter^0,f,c
 11745   00490C  EF6F  F024         	goto	i2l3771
 11746   004910                     i2l1271:
 11747   004910  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11748   004914  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11749   004918  0012               	return		;funcret
 11750   00491A                     __end_ofi2___lwdiv:
 11751                           	callstack 0
 11752                           
 11753                           	psect	smallconst
 11754   000E00                     __psmallconst:
 11755                           	callstack 0
 11756   000E00  00                 	db	0
 11757   000E01  00                 	db	0	; dummy byte at the end
 11758   000000                     
 11759                           	psect	rparam
 11760   000000                     
 11761                           	psect	temp
 11762   000050                     btemp:
 11763                           	callstack 0
 11764   000050                     	ds	1
 11765   000000                     int$flags	set	btemp
 11766   000000                     wtemp8	set	btemp+1
 11767   000000                     ttemp5	set	btemp+1
 11768   000000                     ttemp6	set	btemp+4
 11769   000000                     ttemp7	set	btemp+8
 11770                           
 11771                           	psect	config
 11772                           
 11773                           ;Config register CONFIG1L @ 0x300000
 11774                           ;	External Oscillator mode Selection bits
 11775                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11776                           ;	Power-up default value for COSC bits
 11777                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11778   300000                     	org	3145728
 11779   300000  AA                 	db	170
 11780                           
 11781                           ;Config register CONFIG1H @ 0x300001
 11782                           ;	unspecified, using default values
 11783                           ;	Clock Out Enable bit
 11784                           ;	CLKOUTEN = 0x1, unprogrammed default
 11785                           ;	Clock Switch Enable bit
 11786                           ;	CSWEN = 0x1, unprogrammed default
 11787                           ;	Fail-Safe Clock Monitor Enable bit
 11788                           ;	FCMEN = 0x1, unprogrammed default
 11789   300001                     	org	3145729
 11790   300001  FF                 	db	255
 11791                           
 11792                           ;Config register CONFIG3L @ 0x300004
 11793                           ;	WDT Period Select bits
 11794                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11795                           ;	WDT operating mode
 11796                           ;	WDTE = OFF, WDT Disabled
 11797   300004                     	org	3145732
 11798   300004  9F                 	db	159
 11799                           
 11800                           ;Config register CONFIG3H @ 0x300005
 11801                           ;	unspecified, using default values
 11802                           ;	WDT Window Select bits
 11803                           ;	WDTCWS = 0x7, unprogrammed default
 11804                           ;	WDT input clock selector
 11805                           ;	WDTCCS = 0x7, unprogrammed default
 11806   300005                     	org	3145733
 11807   300005  FF                 	db	255
 11808                           tosu	equ	0xFFF
 11809                           tosh	equ	0xFFE
 11810                           tosl	equ	0xFFD
 11811                           stkptr	equ	0xFFC
 11812                           pclatu	equ	0xFFB
 11813                           pclath	equ	0xFFA
 11814                           pcl	equ	0xFF9
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           indf0	equ	0xFEF
 11822                           postinc0	equ	0xFEE
 11823                           postdec0	equ	0xFED
 11824                           preinc0	equ	0xFEC
 11825                           plusw0	equ	0xFEB
 11826                           fsr0h	equ	0xFEA
 11827                           fsr0l	equ	0xFE9
 11828                           wreg	equ	0xFE8
 11829                           indf1	equ	0xFE7
 11830                           postinc1	equ	0xFE6
 11831                           postdec1	equ	0xFE5
 11832                           preinc1	equ	0xFE4
 11833                           plusw1	equ	0xFE3
 11834                           fsr1h	equ	0xFE2
 11835                           fsr1l	equ	0xFE1
 11836                           bsr	equ	0xFE0
 11837                           indf2	equ	0xFDF
 11838                           postinc2	equ	0xFDE
 11839                           postdec2	equ	0xFDD
 11840                           preinc2	equ	0xFDC
 11841                           plusw2	equ	0xFDB
 11842                           fsr2h	equ	0xFDA
 11843                           fsr2l	equ	0xFD9
 11844                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         208
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      79
    BANK0           160     38     158
    BANK1           256    216     219
    BANK2           256      0      82
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    calibration@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    calibration@turnDuration	PTR unsigned char  size(2) Largest target is 1
		 -> main@turnDuration(BANK1[1]), 

    color_calibration@blue	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@blue(BANK1[6]), 

    color_calibration@green	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@green(BANK1[6]), 

    color_calibration@HSV	PTR struct HSV_val size(2) Largest target is 6
		 -> main@HSV(BANK1[6]), 

    color_calibration@lightblue	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@lightblue(BANK1[6]), 

    color_calibration@orange	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@orange(BANK1[6]), 

    color_calibration@pink	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@pink(BANK1[6]), 

    color_calibration@red	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@red(BANK1[6]), 

    color_calibration@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    color_calibration@white	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@white(BANK1[6]), 

    color_calibration@yellow	PTR struct HSV_calib size(2) Largest target is 6
		 -> main@yellow(BANK1[6]), 

    color_read@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    move@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    move@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    returnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    returnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseShort@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseShort@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseWallAdjust@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseWallAdjust@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseWallAdjust@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseWallAdjust@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseWallAdjust@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseWallAdjust@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    rgb_2_hsv@HSV	PTR struct HSV_val size(2) Largest target is 6
		 -> main@HSV(BANK1[6]), 

    S33DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S33DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), main@motorR(BANK1[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    wallAdjust@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    wallAdjust@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_color_detect
    _main->_move
    _wallAdjust->_setMotorPWM
    _move->_returnHome
    _reverseShort->_setMotorPWM
    _returnHome->_reverseOneSquare
    _returnHome->_reverseWallAdjust
    _stop->_setMotorPWM
    _reverseWallAdjust->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _color_detect->_max
    _color_detect->_min
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->___lwdiv
    _color_writetoaddr->_I2C_2_Master_Write
    _color_calibration->_rgb_2_hsv
    _rgb_2_hsv->___aldiv
    ___lmul->___wmul
    ___aldiv->___lmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2___lwdiv
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_color_calibration
    _color_calibration->_rgb_2_hsv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               228   228      0  272480
                                             36 BANK0      2     2      0
                                              0 BANK1    216   216      0
                         _Buggy_init
                    _Interrupts_init
                        _Timer0_init
                       _batteryLevel
                        _calibration
                  _color_calibration
        _color_clear_init_interrupts
                   _color_click_init
                       _color_detect
                         _color_read
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                               _move
                         _resetTimer
                          _rgb_2_hsv
                               _stop
                         _wallAdjust
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _wallAdjust                                          16    10      6    7530
                                             34 COMRAM    16    10      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _move                                                19     2     17  163705
                                             72 COMRAM     2     2      0
                                              0 BANK0     17     0     17
                     _fullSpeedAhead
                         _returnHome
                   _reverseOneSquare
                       _reverseShort
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseShort                                        14     8      6    9475
                                             34 COMRAM    14     8      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          23     7     16   84357
                                             49 COMRAM    23     7     16
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                  _reverseWallAdjust
                               _stop
                           _turnLeft
                          _turnRight
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _stop                                                12     7      5    7161
                                             34 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseWallAdjust                                   15     9      6    7318
                                             34 COMRAM    15     9      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    15     7      8    8932
                                             34 COMRAM    15     7      8
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _get16bitTMR0val                                     10     8      2      69
                                             15 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                      13     7      6   10007
                                             34 COMRAM    13     7      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_detect                                        68    14     54    3941
                                             19 COMRAM    55     1     54
                                              0 BANK0     13    13      0
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    2673
                                             33 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0    1923
                                             28 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                            ___lwdiv
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             17 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_calibration                                   22     2     20   14348
                                             59 COMRAM     2     2      0
                                             16 BANK0     20     0     20
                         _color_read
                          _rgb_2_hsv
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rgb_2_hsv                                           28    18     10    9951
                                             47 COMRAM    12     2     10
                                              0 BANK0     16    16      0
                            ___aldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  4     0      4     844
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  4     0      4     844
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1536
                                             21 COMRAM    12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1705
                                             33 COMRAM    14     6      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           9     7      2    1243
                                             19 COMRAM     9     7      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             16 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             16 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibration                                         10     2      8   45654
                                             48 COMRAM    10     2      8
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     7      7   17420
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     7      7   26420
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    5241
                                             28 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     832
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1021
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             23 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                               3     3      0       0
                                             12 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0     600
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (8) i2_color_clear_init_interrupts                        5     5      0     600
                                              7 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                          i2___lwdiv
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (9) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _Timer0_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _color_calibration
     _color_read
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _rgb_2_hsv
       ___aldiv
         ___lmul (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___lmul
       ___lwdiv
       ___wmul
       _max
       _min
     _white_Light
   _color_clear_init_interrupts
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
     ___lwdiv
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
     _color_writetoaddr
   _color_detect
     _max
     _min
   _color_read
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _move
     _fullSpeedAhead
     _returnHome
       _fullSpeedAhead
       _get16bitTMR0val
       _resetTimer
       _reverseOneSquare
         _setMotorPWM
       _reverseWallAdjust
         _setMotorPWM
       _stop
         _setMotorPWM
       _turnLeft
       _turnRight
       _white_Light
     _reverseOneSquare
     _reverseShort
       _setMotorPWM
     _turnLeft
     _turnRight
   _resetTimer
   _rgb_2_hsv
   _stop
   _wallAdjust
     _setMotorPWM
   _white_Light

 _LowISR (ROOT)

 _HighISR (ROOT)
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2___lwdiv
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      52       9       32.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D8      DB       7       85.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      4F       1       84.0%
BITBIGSFRllllhh     37      0       0      46        0.0%
BITBIGSFRllhlll     31      0       0      44        0.0%
BITBIGSFRllllhl     2E      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllhl     20      0       0      49        0.0%
BITBIGSFRhlhh       1B      0       0      33        0.0%
BITBIGSFRllhh       17      0       0      38        0.0%
BITBIGSFRllhlll     14      0       0      41        0.0%
BITBIGSFRhllh       13      0       0      34        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRllllhl     11      0       0      53        0.0%
BITBIGSFRhlllh       E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      51        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRllllhh      A      0       0      47        0.0%
BITBIGSFRlllllh      9      0       0      61        0.0%
BITBIGSFRllhlll      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllhl      6      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      39        0.0%
BITBIGSFRllhlll      3      0       0      42        0.0%
BITBIGSFRllllhl      3      0       0      55        0.0%
BITBIGSFRllllhl      3      0       0      60        0.0%
BITBIGSFRlllh        2      0       0      45        0.0%
BITBIGSFRlh          2      0       0      37        0.0%
BITBIGSFRllllhl      1      0       0      54        0.0%
BITBIGSFRlllllh      1      0       0      62        0.0%
BITBIGSFRllllhl      1      0       0      48        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRhllll       1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21A      65        0.0%
DATA                 0      0     21A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 11:34:20 2024

                                _white_Light 4BEA                           reverseWallAdjust@i 002E  
                                         l83 2406                                           l85 2414  
                                         l96 2774                                 ___awdiv@sign 0015  
                        reverseWallAdjust@mL 0023                          reverseWallAdjust@mR 0025  
                                         bsr 0FE0                          ___wmul@multiplicand 0012  
                         i2___lwdiv@dividend 0001                wallAdjust@wallReverseDuration 002D  
                           main@turnDuration 01B5                            ??_Interrupts_init 0010  
                                        l200 21E4                                          l210 4B20  
                                        l202 21F2                                          l203 229A  
                                        l140 46FA                                          l205 22A8  
                                        l214 4AEC                                          l206 2350  
                                        l151 3B96                                          l215 4AF4  
                                        l143 4C4E                                          l209 4B18  
                                        l137 4A92                                          l146 4C06  
                                        l307 4AC8                                          l228 2B88  
                                        l148 4C0C                                          l261 4B9A  
                                        l173 3328                                          l270 4CFE  
                                        l190 1F1A                                          l182 1DA0  
                                        l191 1FC2                                          l255 4B4A  
                                        l344 4CD2                                          l440 4CC0  
                                        l264 4D08                                          l184 1DAE  
                                        l273 4CDE                                          l193 1FD0  
                                        l185 1E56                                          l434 4CA8  
                                        l258 4B74                                          l194 2078  
                                        l451 49B8                                          l267 4D12  
                                        l187 1E64                                          l179 332A  
                                        l452 49BA                                          l276 4A5A  
                                        l196 2086                                          l188 1F0C  
                                        l620 44AA                                          l437 4CAC  
                                        l453 49CE                                          l197 212E  
                                        l439 4CBA                                          l455 49D0  
                                        l543 4294                                          l631 4076  
                                        l199 213C                                          l711 2F5A  
                                        l703 2E70                                          l536 4830  
                                        l720 36CE                                          l625 3FE6  
                                        l617 4468                                          l705 2E94  
                                        l634 40FA                                          l642 3E0C  
                                        l722 36F2                                          l562 163A  
                                        l651 3F20                                          l571 1CD2  
                                        l716 3662                                          l708 2F18  
                                        l637 4128                                          l629 4052  
                                        l725 3776                                          l733 3852  
                                        l654 3F4E                                          l646 3E78  
                                        l742 3966                                          l663 4590  
                                        l648 3E9C                                          l760 35C4  
                                        l680 3D74                                          l672 3C98  
                                        l728 37B8                                          l753 3430  
                                        l577 1CD2                                          l745 39A8  
                                        l737 38BE                                          l754 3466  
                                        l674 3CAE                                          l771 4C6E  
                                        l659 4544                                          l587 1D94  
                                        l739 38E2                                          l691 2CBE  
                                        l780 4BE8                                          l668 3C2C  
                                        l757 34B4                                          l749 3414  
                                        l677 3D32                                          l685 2C2E  
                                        l758 35A4                                          l774 4CF4  
                                        l694 2D42                                          l791 4972  
                                        l792 4982                                          l777 4B72  
                                        l689 2C9A                                          l859 43A0  
                                        l699 2E04                                          _max 4AF6  
                                        _min 4ACA                              color_detect@HSV 0014  
                              ?_color_detect 0014                                          prod 0FF3  
                        i2_color_writetoaddr 4C70                                          wreg 0FE8  
                            color_detect@red 001A    color_clear_init_interrupts@high_threshold 001E  
i2color_clear_init_interrupts@high_threshold 0009                                         l1011 4654  
                                       l1271 489C                                         l3041 4B74  
                                       l3105 4BEC                                         l3043 4B84  
                                       l3107 4BFC                                         l3131 4B4C  
                                       l3133 4B58                                         l1278 48A4  
                                       l3135 4B6A                                         l3073 4D00  
                                       l3081 4CF6                                         l3129 4CEC  
                                       l5001 3832                                         l3171 4A20  
                                       l3075 4D04                                         l3083 4CFA  
                                       l3163 4C32                                         l5011 389E  
                                       l5003 383E                                         l3173 4A28  
                                       l3165 4D0A                                         l3077 4CD6  
                                       l5101 19E6                                         l5021 38FA  
                                       l5013 38AA                                         l5005 384E  
                                       l3175 4A30                                         l3167 4D0E  
                                       l3079 4CDA                                         l5111 1A90  
                                       l5103 1A02                                         l5031 3962  
                                       l5023 392E                                         l5015 38BA  
                                       l5007 3876                                         l3177 4A56  
                                       l3169 4A1C                                         l5201 1ED0  
                                       l3521 4B36                                         l3513 4B22  
                                       l5121 1B0E                                         l5105 1A20  
                                       l5041 1642                                         l5033 398A  
                                       l5025 393A                                         l5017 38E8  
                                       l5009 387A                                         l3531 4CA4  
                                       l3179 4A58                                         l3451 39AA  
                                       l5211 1F4C                                         l5203 1EF0  
                                       l3523 4B38                                         l3515 4B2C  
                                       l5131 1BAC                                         l5123 1B46  
                                       l5107 1A40                                         l5115 1AB8  
                                       l5051 16D2                                         l5043 1662  
                                       l5027 3946                                         l3533 4CA6  
                                       l3525 4C90                                         l5301 3422  
                                       l3461 3AB4                                         l3453 39C4  
                                       l5221 1FD4                                         l5213 1F64  
                                       l5205 1F08                                         l3517 4B32  
                                       l5141 1C3E                                         l5133 1BC4  
                                       l5117 1AD6                                         l5109 1A58  
                                       l5061 1756                                         l5053 16EA  
                                       l5045 167A                                         l5029 3952  
                                       l5037 3994                                         l3535 4CAA  
                                       l3527 4C9A                                         l5311 347E  
                                       l5303 343E                                         l3463 3AD2  
                                       l3455 39DE                                         l5231 205C  
                                       l5223 1FE0                                         l5215 1F86  
                                       l5207 1F1E                                         l3519 4B34  
                                       l5151 1CEE                                         l5143 1C5E  
                                       l5135 1BFC                                         l5119 1AF6  
                                       l5127 1B6E                                         l5071 17DC  
                                       l5063 1772                                         l5055 170A  
                                       l5047 169A                                         l5039 163C  
                                       l3537 4CBE                                         l3529 4CA2  
                                       l3721 45AC                                         l4601 4BC4  
                                       l5321 34E0                                         l5313 3480  
                                       l5305 3456                                         l3465 3B32  
                                       l3457 3A36                                         l5241 20D0  
                                       l5233 2074                                         l5225 2002  
                                       l5217 1FA6                                         l5209 1F2A  
                                       l3801 47D8                                         l5153 1D06  
                                       l5145 1C76                                         l5129 1B8C  
                                       l5081 186E                                         l5073 17DE  
                                       l5161 1D84                                         l5065 1776  
                                       l5057 1722                                         l5049 16B2  
                                       l5401 2E50                                         l3731 45D2  
                                       l3723 45B0                                         l3715 4592  
                                       l4611 484C                                         l4603 4BE0  
                                       l5331 35C0                                         l5323 34F8  
                                       l5315 3498                                         l5307 3460  
                                       l3467 3B50                                         l3459 3A54  
                                       l5251 214C                                         l5243 20F2  
                                       l5235 208A                                         l5227 201A  
                                       l5219 1FBE                                         l5171 4A84  
                                       l5163 4A5C                                         l3811 4816  
                                       l3803 47DC                                         l5155 1D22  
                                       l5147 1CAE                                         l5139 1C20  
                                       l5091 191E                                         l5083 188C  
                                       l5075 17FA                                         l5067 17BC  
                                       l5059 173E                                         l5411 2EAC  
                                       l5403 2E5C                                         l3821 4C50  
                                       l3741 4608                                         l3733 45E4  
                                       l3725 45BE                                         l3717 4596  
                                       l4621 4886                                         l4613 4854  
                                       l4701 3D76                                         l5325 3538  
                                       l5317 34A6                                         l5309 3474  
                                       l5261 21E0                                         l5253 216E  
                                       l5245 2112                                         l5237 2096  
                                       l5229 203C                                         l5181 1DBE  
                                       l5173 4A8E                                         l5165 4A60  
                                       l3813 4818                                         l3805 4800  
                                       l5157 1D26                                         l5093 193E  
                                       l5085 18AC                                         l5077 181A  
                                       l5069 17D4                                         l5501 0E48  
                                       l5421 2F14                                         l5413 2EE0  
                                       l5405 2E6C                                         l5341 2BF6  
                                       l5333 2B8A                                         l3823 4C58  
                                       l3743 461E                                         l3735 45EC  
                                       l3751 4634                                         l3727 45C6  
                                       l3719 45A4                                         l3831 4984  
                                       l4623 488E                                         l4615 485C  
                                       l4607 4832                                         l4631 4146  
                                       l4711 3DEC                                         l4703 3D94  
                                       l5327 3560                                         l5319 34B8  
                                       l5271 225E                                         l5263 21F6  
                                       l5255 2186                                         l5247 212A  
                                       l5239 20B8                                         l5191 1E52  
                                       l5183 1DE0                                         l5175 1D96  
                                       l5167 4A6A                                         l5431 2F60  
                                       l3815 4822                                         l3807 480A  
                                       l5159 1D6C                                         l5095 1956  
                                       l5087 18C4                                         l5079 1832  
                                       l5511 0F06                                         l5503 0E80  
                                       l5423 2F3C                                         l5415 2EEC  
                                       l5407 2E9A                                         l5351 2C52  
                                       l5343 2C02                                         l5335 2B96  
                                       l3825 4C62                                         l3753 4644  
                                       l3745 4626                                         l3737 45F4  
                                       l3729 45CA                                         l3833 498E  
                                       l4625 4890                                         l4617 486A  
                                       l4609 483A                                         l4641 4210  
                                       l4633 419A                                         l4721 3E58  
                                       l4713 3DF8                                         l4705 3DA0  
                                       l5329 35A8                                         l5281 22DA  
                                       l5273 227E                                         l5265 2202  
                                       l5257 21A8                                         l5249 2140  
                                       l5193 1E68                                         l5185 1DF8  
                                       l5177 1D9C                                         l5169 4A7A  
                                       l5433 2F98                                         l5441 3002  
                                       l3817 4824                                         l3809 480C  
                                       l4801 3C00                                         l5097 198E  
                                       l5089 1900                                         l5601 1534  
                                       l5521 0FC0                                         l5513 0F1E  
                                       l5505 0EA0                                         l5417 2EF8  
                                       l5361 2CC4                                         l5345 2C0E  
                                       l5353 2C56                                         l5337 2BA6  
                                       l3827 4C6C                                         l3755 464C  
                                       l3747 4628                                         l3739 4602  
                                       l3835 49A4                                         l4627 4896  
                                       l4619 4870                                         l4643 4254  
                                       l4635 41AE                                         l4731 3EB4  
                                       l4723 3E64                                         l4715 3E08  
                                       l4707 3DD4                                         l5291 332C  
                                       l5283 22F2                                         l5275 2296  
                                       l5267 2224                                         l5259 21C8  
                                       l5195 1E74                                         l5187 1E1A  
                                       l5179 1DB2                                         l5451 30BE  
                                       l5443 3024                                         l5435 2FD0  
                                       l3819 482E                                         l4651 450C  
                                       l4803 3C0C                                         l4811 3C54  
                                       l5099 19AE                                         l5611 15DE  
                                       l5603 1546                                         l5531 1084  
                                       l5523 0FDC                                         l5515 0F56  
                                       l5507 0ED8                                         l5419 2F04  
                                       l5427 2F46                                         l5371 2D22  
                                       l5355 2C7A                                         l5347 2C1A  
                                       l5339 2BC2                                         l3829 4CC2  
                                       l3749 462E                                         l3837 49B2  
                                       l4637 41B2                                         l4629 412A  
                                       l4741 3F1C                                         l4733 3EE8  
                                       l4725 3E74                                         l4717 3E30  
                                       l4709 3DE0                                         l5293 3354  
                                       l4901 4296                                         l5285 2314  
                                       l5277 22AC                                         l5269 223C  
                                       l5197 1E96                                         l5189 1E3A  
                                       l5461 3160                                         l5453 30F6  
                                       l5445 3046                                         l5437 2FF2  
                                       l5429 2F5C                                         l4661 4568  
                                       l4653 4518                                         l4645 44AC  
                                       l4813 3C78                                         l4805 3C18  
                                       l5613 15F6                                         l5605 1562  
                                       l5541 1122                                         l5533 109C  
                                       l5525 0FF4                                         l5517 0F76  
                                       l5509 0EEA                                         l5373 2D2E  
                                       l5381 2D70                                         l5365 2CD6  
                                       l5357 2C86                                         l5349 2C2A  
                                       l5701 2532                                         l5621 2378  
                                       ?_max 0010                                         l3783 4A94  
                                       l3839 49C8                                         l4639 41F4  
                                       l4751 3F7A                                         l4743 3F44  
                                       l4735 3EF4                                         l4727 3EA2  
                                       l4719 3E34                                         l5295 336C  
                                       l4911 42CA                                         l4903 429A  
                                       l5287 2334                                         l5279 22B8  
                                       l5199 1EAE                                         l5471 31C6  
                                       l5455 312E                                         l5463 3168  
                                       l5447 304E                                         l5439 2FFA  
                                       l4655 4524                                         l4663 456C  
                                       l4647 44CC                                         l4831 3D1E  
                                       l4823 3CC6                                         l4815 3C84  
                                       l4807 3C28                                         l4671 43FC  
                                       l5607 157A                                         l5551 11E6  
                                       l5543 113A                                         l5535 10D4  
                                       l5527 102C                                         l5519 0FAE  
                                       l5391 2DE4                                         l5383 2D8C  
                                       l5375 2D3E                                         l5367 2D0A  
                                       l5359 2C96                                         l5711 256A  
                                       l5703 253E                                         l5631 2394  
                                       l5623 237C                                         l5615 2352  
                                       l4761 3FE2                                         l4753 3FAE  
                                       l4737 3F00                                         l5297 33AC  
                                       l4921 430C                                         l4913 42DA  
                                       l4905 42A8                                         l5289 234C  
                                       l5473 31E8                                         l5481 326E  
                                       l5465 318A                                         l5457 3136  
                                       l5449 3086                                         l4657 4530  
                                       l4649 44D8                                         l4833 3D2E  
                                       l4825 3CFA                                         l4817 3C94  
                                       l4809 3C50                                         l4841 35C6  
                                       l4681 4464                                         l4673 4430  
                                       l4665 43A2                                         l5609 15C2  
                                       l5561 1288                                         l5545 1176  
                                       l5553 1206                                         l5529 104C  
                                       l5537 10F4                                         l5393 2DF0  
                                       l5385 2D98                                         l5377 2D66  
                                       l5369 2D16                                         l5721 25A2  
                                       l5713 257C                                         l5705 2546  
                                       l5641 23B2                                         l5633 239A  
                                       l5625 2380                                         l5617 235C  
                                main@curMove 01B2                                         l4771 404E  
                                       l4763 400A                                         l4755 3FBA  
                                       l4747 3F50                                         l4739 3F0C  
                                       l5299 33D4                                         l4931 435E  
                                       l4923 4318                                         l4915 42DE  
                                       l4907 42B8                                         l4691 4AE0  
                                       l5491 3324                                         l5483 3284  
                                       l5475 31FE                                         l5467 31AC  
                                       l5459 3158                                         l4659 4540  
                                       l4835 3D56                                         l4827 3D06  
                                       l4819 3CB4                                         l4851 3636  
                                       l4843 35CE                                         l4683 448C  
                                       l4675 443C                                         l4667 43EA  
                                       l5571 132A                                         l5563 12A8  
                                       l5555 1218                                         l5547 1196  
                                       l5539 1106                                         l5395 2E00  
                                       l5387 2DCC                                         l5731 2722  
                                       l5723 25F4                                         l5707 255E  
                                       l5715 2586                                         l5651 23CA  
                                       l5643 23BA                                         l5635 239E  
                                       l5627 238C                                         l5619 2368  
                                       ?_min 0010                                         l4781 40CE  
                                       l4773 407C                                         l4757 3FC6  
                                       l4765 400E                                         l4749 3F6E  
                                       l4941 4390                                         l4933 4360  
                                       l4925 4326                                         l4917 42EE  
                                       l4909 42BC                                         l5485 32DA  
                                       l5477 3210                                         l5469 31B0  
                                       l3797 47A2                                         l4829 3D12  
                                       l4853 3642                                         l4861 368A  
                                       l4845 35DC                                         l4677 4448  
                                       l5581 13EE                                         l5573 1346  
                                       l5565 12E0                                         l5557 1234  
                                       l5549 11CE                                         l5397 2E28  
                                       l5389 2DD8                                         l5741 2742  
                                       l5733 272E                                         l5725 2600  
                                       l5709 2566                                         l5717 258E  
                                       l5661 23EA                                         l5653 23D2  
                                       l5645 23BE                                         l5637 23A2  
                                       l5629 2390                                         l4783 40DA  
                                       l4767 4032                                         l4759 3FD2  
                                       l4935 436A                                         l4927 4330  
                                       l4919 4304                                         l4695 4AF6  
                                       l4951 46D2                                         l5487 32F0  
                                       l5479 326A                                         l3799 47B2  
                                       l4839 3D60                                         l4863 36AE  
                                       l4855 364E                                         l4847 35F6  
                                       l4679 4454                                         l4687 4496  
                                       l5591 146C                                         l5583 1406  
                                       l5575 135E                                         l5567 12F8  
                                       l5559 124C                                         l5495 0E02  
                                       l5399 2E2C                                         l5743 2746  
                                       l5735 2736                                         l5727 26C8  
                                       l5719 259E                                         l5671 2402  
                                       l5663 23EE                                         l5655 23DA  
                                       l5647 23C2                                         l5639 23AA  
                                       l4785 40E6                                         l4777 408E  
                                       l4769 403E                                         l4929 434E  
                                       l4937 4370                                         l4697 4B0C  
                                       l4689 4ACA                                         l4961 28CC  
                                       l4953 46DC                                         l4945 4656  
                                       l5489 3302                                         l4793 3B98  
                                       l4881 3762                                         l4873 370A  
                                       l4865 36BA                                         l4857 365E  
                                       l4849 362A                                         l5593 14A4  
                                       l5577 1396                                         l5585 1426  
                                       l5569 1318                                         l5497 0E14  
                                       l5745 274A                                         l5737 273A  
                                       l5729 26D8                                         l5681 24B4  
                                       l5673 241C                                         l5665 23F6  
                                       l5657 23E2                                         l5649 23C6  
                                       l4787 40F6                                         l4779 40C2  
                                       l4939 4380                                         l4891 491A  
                                       l4971 297E                                         l4963 28DA  
                                       l4955 46E6                                         l4947 46B8  
                                       l4795 3BB4                                         l4883 3772  
                                       l4875 373E                                         l4867 36CA  
                                       l4859 3686                                         l5595 14C4  
                                       l5587 1438                                         l5579 13B6  
                                       l5499 0E30                                         l5739 2740  
                                       l5747 2750                                         l5691 24F8  
                                       l5683 24CE                                         l5675 2434  
                                       l5667 23FA                                         l5659 23E6  
                                       l4789 411E                                         l4893 492A  
                                       l4981 2B0E                                         l4965 28F2  
                                       l4973 29F8                                         l4957 46F0  
                                       l4949 46C8                                         l4797 3BC0  
                                       l4885 379A                                         l4877 374A  
                                       l4869 36F8                                         l5597 14FC  
                                       l5589 1454                                         l5749 2762  
                                       l5693 2514                                         l5685 24DA  
                                       l5677 248A                                         l5669 23FE  
                                       l4895 4938                                         l4983 2B4A  
                                       l4975 2A10                                         l4967 2908  
                                       l4959 2778                                         l4799 3BF4  
                                       l4879 3756                                         l4991 37BE  
                                       l5599 1514                                         l5695 2518  
                                       l5687 24E2                                         l5679 24AE  
                                       l4897 4948                                         l4985 2B68  
                                       l4977 2A82                                         l4969 2968  
                                       l4889 37A4                                         l4993 37CC  
                                       l5697 251E                                         l5689 24E6  
                                       l4899 4952                                         l4987 2B74  
                                       l4979 2A9A                                         l4995 37E6  
                                       l5699 2522                                         l4997 381A  
                                       l4989 37BA                                         l4999 3826  
                                       u2320 4CBA                                         u4000 3876  
                    color_calibration@orange 00F6                                 _BAUD4CONbits 0EE9  
                                       u2321 4CB6                                         u4001 3872  
                                       u4010 389E                                         u4011 389A  
                                       u2500 45E4                                         u4100 1AD6  
                                       u4020 38E2                                         u2501 45E0  
                                       u4101 1AD2                                         u4021 38DE  
                                       u2510 4602                                         u4110 1B8C  
                                       u4030 38F6                                         u2511 45FE  
                                       u4111 1B88                                         u4031 38F2  
                                       u2520 461E                                         u1800 4B84  
                                       u4120 1C3E                                         u4040 398A  
                                       u2521 461A                                         u1801 4B80  
                                       u4201 1F38                                         u4121 1C3A  
                                       u4041 3986                                         u2530 4644  
                                       u1810 4B9A                                         u4210 1FD0  
                                       u4130 1D6C                                         u4050 17BC  
                                       _T2PR 0FBC                                         u2531 4640  
                                       u1811 4B96                                         u4211 1FCC  
                                       u4131 1D68                                         u4051 17B8  
                                       u4140 1D94                                         u4060 17FA  
                                       u4301 22C6                                         u4221 1FEE  
                                       u4141 1D90                                         u4061 17F6  
                                       u4310 3422                                         u4230 2086  
                                       u4150 1DAE                                         u4070 188C  
                                       u4311 341E                                         u4231 2082  
                                       u4151 1DAA                                         u4071 1888  
                                       u2480 45A4                                         u4320 3430  
                                       u3600 4568                                         u4080 191E  
                                       u4400 2CD2                                         u2481 45A0  
                                       u4321 342C                                         u4241 20A4  
                                       u4161 1DCC                                         u3601 4564  
                                       u4081 191A                                         u4401 2CCE  
                                       u2490 45BE                                         u2570 49B2  
                                       u4330 343E                                         u4250 213C  
                                       u4170 1E64                                         u3610 4590  
                                       u4090 1A20                                         u4410 2D66  
                                       u2491 45BA                                         u2571 49AE  
                                       u4331 343A                                         u4251 2138  
                                       u4171 1E60                                         u3611 458C  
                                       u4091 1A1C                                         u4411 2D62  
                                       u5107 2C8C                                         u2580 49C8  
                                       u3700 3F44                                         u4340 3456  
                                       u1940 4A44                                         u4500 3024  
                                       u3620 43F8                                         u4420 2E28  
                                       u2581 49C4                                         u3701 3F40  
                                       u4341 3452                                         u1941 4A3C  
                                       u4261 215A                                         u4181 1E82  
                                       u4501 3020                                         u3621 43F4  
                                       u4421 2E24                                         u5117 2D34  
                                       u3550 484C                                         u3710 400A  
                                       u4350 3474                                         u4270 21F2  
                                       u4190 1F1A                                         u4510 3046  
                                       u3630 448C                                         u4430 2E50  
                                       u3551 4848                                         u6007 40EC  
                                       u3711 4006                                         u4351 3470  
                                       u4271 21EE                                         u4191 1F16  
                                       u4511 3042                                         u3631 4488  
                                       u5207 0F80                                         u4431 2E4C  
                                       u5127 2DF6                                         u3560 486A  
                                       u3720 4032                                         u4360 34A6  
                                       u3640 4AE0                                         u4600 31E8  
                                       u4520 3086                                         u3800 3D56  
                                       u4440 2E94                                         u3561 4866  
                                       u3721 402E                                         u4361 34A2  
                                       u3641 4ADC                                         u4281 2210  
                                       u4601 31E4                                         u4521 3082  
                                       u3801 3D52                                         u5217 0FE6  
                                       u4441 2E90                                         u5137 2E62  
                                       u5057 2428                                         u3570 4886  
                                       u3730 4076                                         u3650 4B0C  
                                       u1890 4BFC                                         u4290 22A8  
                                       u4610 31FE                                         u4530 30BE  
                                       u3810 3686                                         u4450 2EA8  
                                       u4370 2C52                                         u3571 4882  
                                       u3731 4072                                         u3651 4B08  
                                       u1891 4BF8                                         u4291 22A4  
                                       u4611 31FA                                         u4531 30BA  
                                       u3811 3682                                         u5307 123E  
                                       u5227 101E                                         u5147 2F0A  
                                       u4451 2EA4                                         u4371 2C4E  
                                       u5067 24C0                                         u3580 4146  
                                       u3740 408A                                         u3660 3E30  
                                       u3900 4304                                         u4620 3210  
                                       u4540 30F6                                         u3820 36AE  
                                       u4700 0EEA                                         u4460 2F3C  
                                       u4380 2C7A                                         u3581 4142  
                                       u3741 4086                                         u3661 3E2C  
                                       u3901 4300                                         u4621 320C  
                                       u4541 30F2                                         u3821 36AA  
                                       u5317 127A                                         u5237 1056  
                                       u4701 0EE6                                         u5157 0E3A  
                                       u4461 2F38                                         u4381 2C76  
                                       u5077 24EE                                         u3590 4210  
                                       u3750 411E                                         u3670 3E58  
                                       u1958 4A46                                         u3910 4326  
                                       u4630 326A                                         u4550 312E  
                                       u4470 2F98                                         u3830 36F2  
                                       u4710 0FC0                                         u4390 2CBE  
                                       u3591 420C                                         u3751 411A  
                                       u3671 3E54                                         u3911 4322  
                                       u4631 3266                                         u4551 312A  
                                       u4471 2F94                                         u3831 36EE  
                                       u5407 14CE                                         u5327 12B2  
                                       u5247 108E                                         u4711 0FBC  
                                       u5167 0E72                                         u4391 2CBA  
                                       u5087 2572                                         u3680 3E9C  
                                       u3920 434E                                         u4640 3284  
                                       u4560 3158                                         u4480 2FD0  
                                       u3760 3C50                                         u3840 3706  
                                       u4720 1106                                         u4800 2532  
                                       u3681 3E98                                         u3921 434A  
                                       u4641 3280                                         u4561 3154  
                                       u4481 2FCC                                         u3761 3C4C  
                                       u3841 3702                                         u5417 1506  
                                       u5337 12EA                                         u4721 1102  
                                       u5257 10C6                                         u5177 0EAA  
                                       u5097 2C20                                         u4801 252E  
                                       u3690 3EB0                                         u3930 4380  
                                       u4650 32DA                                         u4570 318A  
                                       u4490 2FF2                                         u3770 3C78  
                                       u3850 379A                                         u4730 1218  
                                       u4810 255E                                         u3691 3EAC  
                                       u3931 437C                                         u4651 32D6  
                                       u4571 3186                                         u4491 2FEE  
                                       u3771 3C74                                         u3851 3796  
                                       u5507 1714                                         u5427 156C  
                                       u5347 1350                                         u4731 1214  
                                       u5267 112C                                         u5187 0F10  
                                       u4811 255A                                         u3860 4938  
                                       u3940 28F2                                         u4660 32F0  
                                       u4580 31AC                                         u3780 3CAE  
                                       u4740 132A                                         u4820 259E  
                                       u3861 4934                                         u3941 28EE  
                                       u4661 32EC                                         u4581 31A8  
                                       u3781 3CAA                                         u5517 1748  
                                       u5437 15E8                                         u5357 1388  
                                       u4741 1326                                         u5277 1168  
                                       u5197 0F48                                         u4901 2694  
                                       u4821 259A                                         u3870 4972  
                                       u3950 2908                                         u4670 3302  
                                       u4590 31C6                                         u3790 3CC2  
                                       u4750 1438                                         u3871 496E  
                                       u3951 2904                                         u4671 32FE  
                                       u4591 31C2                                         u3791 3CBE  
                                       u5607 1A4A                                         u5527 1824  
                                       u5447 3844                                         u4751 1434  
                                       u5367 13C0                                         u5287 11A0  
                                       u4911 26A6                                         u4831 260A  
                                       u3880 42A8                                         u3960 297E  
                                       u4680 3324                                         u4760 1546  
                                       u3881 42A4                                         u3961 297A  
                                       u4681 3320                                         u5617 1A82  
                                       u5537 185C                                         u5457 38B0  
                                       u4761 1542                                         u5377 13F8  
                                       u5297 11D8                                         u4921 26B8  
                                       u4841 2628                                         u3890 42CA  
                                       u3970 2A10                                         u4690 0E14  
                                       u4930 2762                                         u3891 42C6  
                                       u3971 2A0C                                         u5707 3654  
                                       u5627 1B00                                         u5547 18B6  
                                       u5467 3958                                         u5387 145E  
                                       u4691 0E10                                         u4931 275E  
                                       u4851 263A                                         u4771 2362  
                                       u3980 2A9A                                         u4940 2774  
                                       u3981 2A96                                         u5717 36C0  
                                       u5637 1B38                                         u5557 18EE  
                                       u5477 166C                                         u5397 1496  
                                       u4941 2770                                         u4861 264C  
                                       u4781 236E                                         u3990 2B68  
                                       u4790 2414                                         u3991 2B64  
                                       u5807 1EFA                                         u5727 3768  
                                       u5647 1BB6                                         u5567 1948  
                                       u5487 16A4                                         u4871 265E  
                                       u4791 2410                                         u5817 1FB0  
                                       u5737 3C1E                                         u5657 1BEE  
                                       u5577 1980                                         u5497 16DC  
                                       u4881 2670                                         u5907 348A  
                                       u5827 2066                                         u5747 3C8A  
                                       u5667 1C68                                         u5587 19B8  
                                       u4891 2682                                         u5917 34EA  
                                       u5837 211C                                         u5757 3D24  
                                       u5677 1CA0                                         u5597 19F0  
                                       u5927 352A                                         u5847 21D2  
                                       u5767 4536                                         u5687 1CF8  
                                       u5937 356A                                         u5857 2288  
                                       u5777 4A70                                         u5697 445A  
                                       u5947 35B2                                         u5867 233E  
                                       u5787 46BE                                         u5957 3DFE  
                                       u5877 335E                                         u5797 1E44  
                                       u5967 3E6A                                         u5887 339E  
                                       u5977 3F12                                         u5897 33DE  
                                       u5987 3FD8                                         u5997 4044  
                    color_calibration@yellow 00F2                                         _main 2352  
                                       _move 0E02                                         _lost 004B  
                                       fsr1h 0FE2                           i2___lwdiv@quotient 0005  
                                       fsr2h 0FDA                                         indf2 0FDF  
                                       fsr1l 0FE1                                         fsr2l 0FD9  
                                       max@a 0010                                         max@b 0012  
                                       btemp 0050                                         _stop 43A2  
                                       min@a 0010                                         min@b 0012  
                                       prodh 0FF4                                         prodl 0FF3  
                                       start 0054                             color_detect@blue 0026  
                        main@reverseDuration 017A                             __end_of_ADC_init 4CAA  
                       ?i2_color_writetoaddr 0003                             color_detect@pink 0032  
                            __end_of_HighISR 4C30                                 ___param_bank 0000  
                       __end_of_batteryLevel 49D2                                        ??_max 0014  
                                      ??_min 0014                              __end_of___aldiv 43A2  
                                      ?_main 0001                                        _ADPCH 0F5F  
                            __end_of___awdiv 4656                                        ?_move 00D8  
                                      ?_stop 0023                              ___awdiv@divisor 0012  
                            __end_of___lwdiv 48A6                                        i2l140 47A0  
                                      i1l356 0044                                        i2l143 4C8E  
                                      i2l261 4BC2                                        i2l270 4D1C  
                                      i2l350 4C2C                                        i2l264 4D26  
                                      i2l273 4CEA                                        i2l258 4B9C  
                            ___awdiv@counter 0014                               ??_color_detect 00D8  
                                      _TMR0H 0FD4                                        _TMR0L 0FD3  
                        ___lmul@multiplicand 001A                   __end_of_I2C_2_Master_Start 4D0A  
                 __end_of_I2C_2_Master_Write 4CE0                                   _Buggy_init 4A94  
                 color_calibration@lightblue 00F8                       returnHome@straightRamp 003E  
                     returnHome@straightTime 0038                                        tablat 0FF5  
                                      plusw0 0FEB                                        plusw2 0FDB  
                                      ttemp5 0051                                        ttemp6 0054  
                                      ttemp7 0058                                        stop@i 002B  
                                      status 0FD8                                        wtemp8 0051  
                          color_detect@color 004A                            color_detect@green 0020  
                          color_detect@white 0044                        ??i2_color_writetoaddr 0004  
                               main@turnRamp 0180                        _I2C_2_Master_RepStart 4D0A  
                            __initialization 49D2                    get16bitTMR0val@timer_high 0016  
                               __end_of_main 2778                                 __end_of_move 163C  
                               __end_of_stop 44AC                          move@reverseDuration 00E3  
                            _get16bitTMR0val 4B4C                                       ??_main 00FC  
                                     ??_move 0049                                       ??_stop 0028  
                              __activetblptr 0000                                calibration@mL 0031  
                              calibration@mR 0033                       returnHome@turnDuration 0040  
                               ?_setMotorPWM 001D                                       _ADRESH 0F64  
                                     _CCPR1H 0FAA                                       _CCPR2H 0FA6  
                                     _CCPR3H 0F25                                       _CCPR4H 0F21  
                           ___awdiv@dividend 0010                                       _RC0PPS 0E62  
                     wallAdjust@straightRamp 0028                                       _RE2PPS 0E74  
                                     _RC7PPS 0E69                                       _RD5PPS 0E6F  
                                     _RE4PPS 0E76                                       _RD6PPS 0E70  
                                     i2l3101 4B9C                                       i2l1271 4910  
                                     i2l3103 4BAC                                       i1l2863 0026  
                                     i1l2865 0036                                       i1l2867 0042  
                                     i2l1278 4918                                       i2l4301 4796  
                                     i2l3441 4D22                                       i2l3443 4D14  
                                     i2l3445 4D18                                       i2l3439 4D1E  
                                     i2l3447 4CE2                                       i2l3449 4CE6  
                                     i2l4441 4C1E                                       i2l4291 475E  
                                     i2l4443 4C24                                       i2l4293 476E  
                                     i2l4445 4C28                                       i2l4295 4778  
                                     i2l4439 4C0E                                       i2l3761 48A6  
                                     i2l4297 4782                                       i2l4289 46FC  
                                     i2l3771 48DE                                       i2l3763 48AE  
                                     i2l4299 478C                                       _RG6PPS 0E88  
                                     i2l3781 490A                                       i2l3773 48E4  
                                     i2l3765 48C0                                       i2l3775 48FA  
                                     i2l3767 48C8                                       i2l3759 4C72  
                                     i2l3777 4902                                       i2l3769 48D0  
                                     i2l3779 4904                                    ??_HighISR 000D  
                   __end_of_color_click_init 4A94                                       _RX4PPS 0E15  
                              main@lightblue 01A6                                       _LowISR 0018  
                               ??_ADC_getval 0010                                ??_Timer0_init 0010  
                        calibration@turnRamp 0038                      calibration@turnDuration 0036  
                               _CCPTMRS0bits 0FAD                                       ___lmul 491A  
                                  ??___aldiv 002A                                       ___wmul 4BC4  
                                  ??___awdiv 0014                                    ??___lwdiv 001A  
                                     clear_0 49F0                                       clear_1 4A00  
                           ___awdiv@quotient 0016                                       isa$std 0001  
                    returnHome@straightSpeed 003B                                       move@mL 00D8  
                                     move@mR 00DA                            __end_ofi2___lwdiv 491A  
                               __mediumconst 0000                                       tblptrh 0FF7  
                                     tblptrl 0FF6                                       tblptru 0FF8  
                                  ?_ADC_init 0001                                       stop@mL 0023  
                                     stop@mR 0025                                  ?_Buggy_init 0001  
                          ??_initDCmotorsPWM 0012                           __end_of_ADC_getval 4CC2  
                 i2color_writetoaddr@address 0004                             __end_of_turnLeft 412A  
                         color_detect@orange 0038                                   __accesstop 0060  
                    __end_of__initialization 4A10                           color_detect@yellow 002C  
                            fullSpeedAhead@i 002C                                main@turnSpeed 017F  
                     ?_I2C_2_Master_RepStart 0001                                ___rparam_used 0001  
                       __end_of_color_detect 332C                    reverseShort@straightSpeed 0027  
                            _Interrupts_init 4CC2                               __pcstackCOMRAM 0001  
                    __end_of_get16bitTMR0val 4B74                                 ?_white_Light 0001  
                               __pidataBANK1 4D28                     get16bitTMR0val@timer_low 0014  
                   get16bitTMR0val@timer_val 0018                 ?_color_clear_init_interrupts 0001  
                           _reverseOneSquare 3B98                          __end_of_Timer0_init 4C70  
                             main@ambientNew 017D            reverseWallAdjust@reverseWallSpeed 002D  
                                 ??_ADC_init 0010                                 rgb_2_hsv@HSV 0038  
                               _batteryLevel 4984                                   __pbssBANK0 0060  
                                 __pbssBANK1 01DA                                   __pbssBANK2 0200  
                             _rgb_2_hsv$3571 00DA                               _rgb_2_hsv$3572 00DC  
                                    ?_LowISR 0001                            _color_writetoaddr 4C30  
                               _T2CLKCONbits 0FBF                     reverseShort@straightRamp 0028  
             reverseWallAdjust@straightSpeed 0027                           ?_color_writetoaddr 0012  
                                    ?___lmul 0016                                      ?___wmul 0010  
                   wallAdjust@adjustDuration 002C                               ___lmul@product 001E  
              ??_color_clear_init_interrupts 001D                                  move@curMove 00E1  
                        ??_color_writetoaddr 0013                      wallAdjust@straightSpeed 0027  
                                    _SP4BRGH 0EE6                                      _SP4BRGL 0EE5  
                 fullSpeedAhead@straightRamp 0028                        turnRight@turnDuration 0028  
                                    _SSP2ADD 0ED6                                      _SSP2BUF 0ED5  
                           _brightnessChange 01DA                                   _color_read 39AA  
                    __end_of_Interrupts_init 4CD4                       color_writetoaddr@value 0012  
                                    _HighISR 0008                    __end_of_color_writetoaddr 4C50  
                                  _ADREFbits 0F58                           _I2C_2_Master_Start 4D00  
                        i2_I2C_2_Master_Idle 4B9C                           _I2C_2_Master_Write 4CD4  
                                    __Hparam 0000                          i2_I2C_2_Master_Stop 4D14  
                                    __Lparam 0000                                  wallAdjust@i 002F  
                                _Timer0_init 4C50                         calibration@turnSpeed 0035  
                           ?_get16bitTMR0val 0010                                      ___aldiv 4296  
                                    ___awdiv 4592                                ??_calibration 0039  
                        ?_I2C_2_Master_Start 0001                                      ___lwdiv 4832  
                        ?_I2C_2_Master_Write 0001                                 __psmallconst 0E00  
                                    _ambient 01D8                                      __pcinit 49D2  
                                    __ramtop 0E00                                    ?_turnLeft 0023  
                          __end_of_rgb_2_hsv 2B8A                                      __ptext0 2352  
                                    __ptext1 2B8A                                      __ptext2 0E02  
                                    __ptext3 37BA                                      __ptext4 163C  
                                    __ptext5 43A2                                      __ptext6 35C6  
                                    __ptext7 3B98                                      __ptext8 4CEC  
                                    __ptext9 4B4C                         ?i2_I2C_2_Master_Idle 0001  
                                  _T2CONbits 0FBD                                ?_reverseShort 0023  
                       ?i2_I2C_2_Master_Stop 0001                             ___aldiv@dividend 0022  
                                  _T2HLTbits 0FBE                                _RxBufWriteCnt 004F  
                                    main@HSV 01B6                                      main@red 0182  
                       ??_I2C_2_Master_Start 0011                         ??_I2C_2_Master_Write 0011  
                             __pintcode_body 4C0E                         end_of_initialization 4A10  
            ??i2_color_clear_init_interrupts 0008                  __end_ofi2_color_writetoaddr 4C90  
                           ADC_getval@tmpval 0010                   reverseWallAdjust@cur_power 0030  
                          reverseOneSquare@i 002E                                      int_func 4C0E  
                          ?_color_click_init 0001                                   _wallAdjust 2B8A  
                                 _resetTimer 4CEC                           ??_color_click_init 0022  
                           ___aldiv@quotient 002C                   batteryLevel@batteryQuarter 0019  
                                    postdec1 0FE5                                      postdec2 0FDD  
                                    postinc0 0FEE                                      postinc1 0FE6  
                                    postinc2 0FDE                   batteryLevel@batteryVoltage 0018  
                                 main@F14660 009C                                   main@F14662 0200  
                                 _returnHome 163C                              _initDCmotorsPWM 47A2  
                                 ??_turnLeft 002A                                    _PORTFbits 0F8E  
                         setMotorPWM@negDuty 0022                               ??_reverseShort 0029  
                      ??i2_I2C_2_Master_Idle 0001                                move@turnSpeed 00E6  
                          __end_of_turnRight 3F50                        ??i2_I2C_2_Master_Stop 0002  
                        __end_of_calibration 35C6                                 _color_detect 2F5C  
                                returnHome@i 0048                                    _TRISAbits 0F81  
                         setMotorPWM@posDuty 0021                                    _TRISBbits 0F82  
                                  _TRISCbits 0F83                                    _TRISDbits 0F84  
                                  _TRISEbits 0F85                                    _TRISFbits 0F86  
                                  _TRISGbits 0F87                                    _TRISHbits 0F88  
                           white_Light@state 0010                                 ??_Buggy_init 0010  
                           fullSpeedAhead@mL 0023                             fullSpeedAhead@mR 0025  
                                ?_color_read 0014                            i2___lwdiv@divisor 0003  
                   color_writetoaddr@address 0013                                    i2___lwdiv 48A6  
                    ??_I2C_2_Master_RepStart 0011                            i2___lwdiv@counter 0007  
                   __end_of_reverseOneSquare 3D76                             ?_Interrupts_init 0001  
                              stop@cur_power 002D                                  _CCP1CONbits 0FAB  
                     color_calibration@green 00EE                                 _EUSART4RXbuf 00C4  
                        returnHome@turnSpeed 003F                                 _EUSART4TXbuf 0060  
                                _CCP2CONbits 0FA7                       color_calibration@white 00FA  
                                _CCP3CONbits 0F26                                   main@orange 01A0  
                                _CCP4CONbits 0F22                                   main@motorL 01CE  
                                 main@motorR 01C4                                   main@yellow 0194  
                             __end_of_LowISR 0054                               color_read@RGBC 0014  
                             _fullSpeedAhead 44AC                               __end_of___lmul 4984  
                       turnLeft@turnDuration 0028                               __end_of___wmul 4BEA  
                         __end_of_Buggy_init 4ACA                          start_initialization 49D2  
                                __end_of_max 4B22                                  __end_of_min 4AF6  
                              _TxBufWriteCnt 004D                                   rgb_2_hsv@b 00E4  
                                 rgb_2_hsv@g 00E2                                   ?i2___lwdiv 0001  
                                 rgb_2_hsv@r 00DE                             move@moveSequence 00DD  
                        wallAdjust@cur_power 0031        __end_ofi2_color_clear_init_interrupts 47A2  
              i2_color_clear_init_interrupts 46FC                            _reverseWallAdjust 35C6  
                                ?_wallAdjust 0023                                  ?_resetTimer 0001  
                                   ??_LowISR 000D                           ?_reverseWallAdjust 0023  
                    __end_of_initDCmotorsPWM 4832                       __end_of_fullSpeedAhead 4592  
                         turnRight@cur_power 002F                                     ??___lmul 001E  
                              rgb_2_hsv@RGBC 0030                                     ??___wmul 0014  
                                __pdataBANK1 01D8                                rgb_2_hsv@diff 00E6  
              i2I2C_2_Master_Write@data_byte 0002                                  _calibration 332C  
                              rgb_2_hsv@cmax 00E0                                rgb_2_hsv@cmin 00D8  
                        ??_reverseWallAdjust 0029                                  ?_returnHome 0032  
                        wallAdjust@wallSpeed 002E                 reverseOneSquare@straightRamp 002A  
               __end_ofi2_I2C_2_Master_Start 4D28                 __end_ofi2_I2C_2_Master_Write 4CEC  
                          turnLeft@cur_power 002F                                  __pbssCOMRAM 004B  
                              __pcstackBANK0 00D8                                __pcstackBANK1 0100  
                  __end_of_reverseWallAdjust 37BA                                     ?_HighISR 0001  
                       __end_of_reverseShort 39AA                             stop@straightRamp 0027  
                           ___lwdiv@dividend 0016                                 ?_Timer0_init 0001  
                            ?_fullSpeedAhead 0023                                    __pintcode 0008  
                                   ?___aldiv 0022                           turnRight@turnSpeed 0027  
                                   ?___awdiv 0010                                     ?___lwdiv 0016  
           reverseShort@shortReverseDuration 002C                                  __pintcodelo 0018  
                       I2C_2_Master_Read@ack 0012                         I2C_2_Master_Read@tmp 0013  
                                __smallconst 0E00                               reverseShort@mL 0023  
                             reverseShort@mR 0025                             main@moveSequence 0152  
                          _I2C_2_Master_Idle 4B74                            _I2C_2_Master_Init 4B22  
                          _I2C_2_Master_Read 4A1A                            turnLeft@turnSpeed 0027  
                          _I2C_2_Master_Stop 4CF6                                    _rgb_2_hsv 2778  
                               _RxBufReadCnt 004E                                     _ADC_init 4C90  
                         ?_I2C_2_Master_Idle 0001                           ?_I2C_2_Master_Init 0001  
                         ?_I2C_2_Master_Read 0001                                ??_setMotorPWM 001F  
                         ?_I2C_2_Master_Stop 0001                             ___lwdiv@quotient 001B  
                   initDCmotorsPWM@PWMperiod 0010                                  ??i2___lwdiv 0005  
                          move@straightSpeed 00E2                              ___aldiv@divisor 0026  
                        ??_I2C_2_Master_Idle 0010                              ___aldiv@counter 002A  
                        ??_I2C_2_Master_Init 0010                          ??_I2C_2_Master_Read 0011  
                             ___wmul@product 0014                                     _LATAbits 0F79  
                        ??_I2C_2_Master_Stop 0011                                     _LATCbits 0F7B  
                                   _LATDbits 0F7C                                     _LATEbits 0F7D  
                                   _LATFbits 0F7E                                     _LATGbits 0F7F  
                                   _LATHbits 0F80                                     _IPR0bits 0E1F  
                                   _PIE0bits 0E29                                     _PIE4bits 0E2D  
                                   i1u164_20 0036                                     i1u164_21 0032  
                                turnRight@mL 0023                                  turnRight@mR 0025  
                                   i2u340_40 4C1E                                     i2u340_41 4C1A  
                                   i2u254_40 48C0                                     i2u254_41 48BC  
                                   i2u255_40 48DE                                     i2u255_41 48DA  
                                   _PIR0bits 0E33                                     i2u256_40 48FA  
                                   i2u256_41 48F6                                     i2u601_47 4764  
                                   i2u187_40 4BAC                                     i2u187_41 4BA8  
                                   i2u188_40 4BC2                                     i2u188_41 4BBE  
                           ?_initDCmotorsPWM 0010                  fullSpeedAhead@straightSpeed 0027  
        __end_of_color_clear_init_interrupts 46FC               ?i2_color_clear_init_interrupts 0001  
                _color_clear_init_interrupts 4656                                     _SSP2CON2 0EDA  
                                   _SSP2STAT 0ED8                                 move@turnRamp 00E8  
                                 _ADCON0bits 0F60                    __end_of_I2C_2_Master_Idle 4B9C  
                      color_calibration@RGBC 00E8                    __end_of_I2C_2_Master_Init 4B4C  
                  __end_of_I2C_2_Master_Read 4A5C                            ___wmul@multiplier 0010  
                  __end_of_I2C_2_Master_Stop 4D00     color_clear_init_interrupts@low_threshold 0020  
 i2color_clear_init_interrupts@low_threshold 000B                                 setMotorPWM@m 001D  
                I2C_2_Master_Write@data_byte 0011                        color_calibration@blue 00F0  
                         returnHome@turnRamp 0041                                    main@color 01B4  
                      color_calibration@pink 00F4                                    main@green 0188  
                                  main@white 01AC                                   ?_rgb_2_hsv 0030  
                               _TxBufReadCnt 004C                     i2color_writetoaddr@value 0003  
                                  _turnRight 3D76                    returnHome@reverseDuration 003C  
                               ??_color_read 0016                            ___lmul@multiplier 0016  
              __end_of_I2C_2_Master_RepStart 4D14                            ?_reverseOneSquare 0023  
                        __end_of_setMotorPWM 4296                         i2_I2C_2_Master_Start 4D1E  
            reverseOneSquare@reverseDuration 0028                         i2_I2C_2_Master_Write 4CE0  
                         ??_reverseOneSquare 002B                                     __Hrparam 0000  
                                 _ADC_getval 4CAA                                     __Lrparam 0000  
                               wallAdjust@mL 0023                                 wallAdjust@mR 0025  
                              ??_white_Light 0010                  __end_ofi2_I2C_2_Master_Idle 4BC4  
                __end_ofi2_I2C_2_Master_Stop 4D1E                           __end_of_color_read 3B98  
                                 _ANSELBbits 0E9A                                   _ANSELDbits 0EA7  
                                 _ANSELFbits 0EB4                                   _T0CON0bits 0FD5  
                                 _T0CON1bits 0FD6                            _color_calibration 1D96  
              reverseOneSquare@straightSpeed 0027                              ___lwdiv@divisor 0018  
                     returnHome@moveSequence 0036                              ___lwdiv@counter 001A  
                          turnRight@turnRamp 0029                                   ?_turnRight 0023  
                                   __ptext10 44AC                                     __ptext11 47A2  
                                   __ptext20 4ACA                                     __ptext12 2F5C  
                                   __ptext21 4AF6                                     __ptext13 4A5C  
                                   __ptext30 4B74                                     __ptext22 491A  
                                   __ptext14 4656                                     __ptext31 332C  
                                   __ptext23 4296                                     __ptext15 4C30  
                                   __ptext40 4CAA                                     __ptext32 3D76  
                                   __ptext24 39AA                                     __ptext16 4B22  
                                   __ptext41 4C50                                     __ptext33 3F50  
                                   __ptext25 4CD4                                     __ptext17 1D96  
                                   __ptext50 4D1E                                     __ptext42 4CC2  
                                   __ptext34 412A                                     __ptext26 4CF6  
                                   __ptext18 4BEA                                     __ptext51 4B9C  
                                   __ptext43 4A94                                     __ptext35 4BC4  
                                   __ptext27 4D00                                     __ptext19 2778  
                                   __ptext52 48A6                                     __ptext36 4832  
                                   __ptext28 4D0A                                     __ptext37 4984  
                                   __ptext29 4A1A                                     __ptext46 46FC  
                                   __ptext38 4592                                     __ptext47 4C70  
                                   __ptext39 4C90                                     __ptext48 4CE0  
                                   __ptext49 4D14                                    move@color 00DC  
                         ?_color_calibration 00E8                                ?_batteryLevel 0001  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                              reverseShort@i 002D                             turnLeft@turnRamp 0029  
                      reverseShort@cur_power 002F                                   turnLeft@mL 0023  
                                 turnLeft@mR 0025                          ??_color_calibration 003C  
                      ?i2_I2C_2_Master_Start 0001                                 ??_wallAdjust 0029  
                           move@straightRamp 00E5                        ?i2_I2C_2_Master_Write 0001  
                           move@straightTime 00DF                            returnHome@curMove 003A  
                               ??_resetTimer 0010                                   turnRight@i 002D  
                                   isa$xinst 0000                                   _RC4STAbits 0EE7  
              reverseWallAdjust@straightRamp 0028                                     main@RGBC 01BC  
                                   int$flags 0050                         color_calibration@HSV 00EA  
                               ?_calibration 0031                                     main@blue 018E  
                       color_calibration@red 00EC                                 ??_returnHome 0042  
                                   main@pink 019A                                     main@wall 017C  
                                   _turnLeft 3F50                      fullSpeedAhead@cur_power 002E  
                        __end_of_white_Light 4C0E                    __end_of_color_calibration 2352  
                                 _INTCONbits 0FF2                                 _reverseShort 37BA  
                  reverseOneSquare@cur_power 0030                                  ??_rgb_2_hsv 003A  
                         __end_of_wallAdjust 2F5C                           reverseOneSquare@mL 0023  
                         reverseOneSquare@mR 0025                           __end_of_resetTimer 4CF6  
                           move@turnDuration 00E7                               ??_batteryLevel 0018  
                                _setMotorPWM 412A                            ??_get16bitTMR0val 0012  
                                   intlevel1 0000                                     intlevel2 0000  
                           ??_fullSpeedAhead 0029                           __end_of_returnHome 1D96  
                                  turnLeft@i 002D       reverseWallAdjust@reverseAdjustDuration 002C  
                                ?_ADC_getval 0001                            main@straightSpeed 0181  
                           _color_click_init 4A5C                        color_detect@lightblue 003E  
                                 _SSP2DATPPS 0E1D                                   _SSP2CLKPPS 0E1C  
                               ___aldiv@sign 002B                                  ??_turnRight 002A  
                           main@straightRamp 01B3                             main@straightTime 0100  
                                 _TX4STAbits 0EE8                       ??i2_I2C_2_Master_Start 0002  
                     ??i2_I2C_2_Master_Write 0002                                 returnHome@mL 0032  
                               returnHome@mR 0034  
