

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 09 20:41:28 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 21/07/2023 GMT
    71                           ; 
    72                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F67K40 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     
   105                           	psect	idataCOMRAM
   106   00319A                     __pidataCOMRAM:
   107                           	callstack 0
   108                           
   109                           ;initializer for _ambient
   110   00319A  01F4               	dw	500
   111                           
   112                           	psect	idataBANK1
   113   003196                     __pidataBANK1:
   114                           	callstack 0
   115                           
   116                           ;initializer for main@F14601
   117   003196  01                 	db	1
   118   003197  03                 	db	3
   119   003198  02                 	db	2
   120   003199  08                 	db	8
   121   000000                     _TRISCbits	set	3971
   122   000000                     _RC4STAbits	set	3815
   123   000000                     _SP4BRGH	set	3814
   124   000000                     _SP4BRGL	set	3813
   125   000000                     _TX4STAbits	set	3816
   126   000000                     _BAUD4CONbits	set	3817
   127   000000                     _TX4REG	set	3812
   128   000000                     _TRISBbits	set	3970
   129   000000                     _TRISAbits	set	3969
   130   000000                     _TRISEbits	set	3973
   131   000000                     _TRISGbits	set	3975
   132   000000                     _LATFbits	set	3966
   133   000000                     _TRISFbits	set	3974
   134   000000                     _TRISHbits	set	3976
   135   000000                     _TRISDbits	set	3972
   136   000000                     _LATEbits	set	3965
   137   000000                     _LATGbits	set	3967
   138   000000                     _LATHbits	set	3968
   139   000000                     _SSP2CON2bits	set	3802
   140   000000                     _TMR0IF	set	29085
   141   000000                     _TMR0IE	set	29005
   142   000000                     _RX4PPS	set	3605
   143   000000                     _SSP2CLKPPS	set	3612
   144   000000                     _SSP2DATPPS	set	3613
   145   000000                     _PIE0bits	set	3625
   146   000000                     _CCPR4H	set	3873
   147   000000                     _CCPR3H	set	3877
   148   000000                     _CCPR2H	set	4006
   149   000000                     _CCPR1H	set	4010
   150   000000                     _CCP1CONbits	set	4011
   151   000000                     _CCPTMRS0bits	set	4013
   152   000000                     _T2PR	set	4028
   153   000000                     _T2CONbits	set	4029
   154   000000                     _INTCONbits	set	4082
   155   000000                     _CCP2CONbits	set	4007
   156   000000                     _CCP3CONbits	set	3878
   157   000000                     _ADREFbits	set	3928
   158   000000                     _LATAbits	set	3961
   159   000000                     _LATDbits	set	3964
   160   000000                     _PORTFbits	set	3982
   161   000000                     _CCP4CONbits	set	3874
   162   000000                     _PIE4bits	set	3629
   163   000000                     _RD5PPS	set	3695
   164   000000                     _ANSELDbits	set	3751
   165   000000                     _SSP2ADD	set	3798
   166   000000                     _SSP2CON1bits	set	3801
   167   000000                     _LATCbits	set	3963
   168   000000                     _RC4REG	set	3811
   169   000000                     _SSP2CON2	set	3802
   170   000000                     _SSP2STAT	set	3800
   171   000000                     _ANSELFbits	set	3764
   172   000000                     _SSP2BUF	set	3797
   173   000000                     _IPR0bits	set	3615
   174   000000                     _RE2PPS	set	3700
   175   000000                     _ANSELBbits	set	3738
   176   000000                     _RD6PPS	set	3696
   177   000000                     _PIR0bits	set	3635
   178   000000                     _PIR4bits	set	3639
   179   000000                     _RC0PPS	set	3682
   180   000000                     _RC7PPS	set	3689
   181   000000                     _ADPCH	set	3935
   182   000000                     _ADRESH	set	3940
   183   000000                     _ADCON0bits	set	3936
   184   000000                     _RE4PPS	set	3702
   185   000000                     _RG6PPS	set	3720
   186   000000                     _TMR0L	set	4051
   187   000000                     _TMR0H	set	4052
   188   000000                     _T0CON0bits	set	4053
   189   000000                     _T0CON1bits	set	4054
   190   000000                     _T2CLKCONbits	set	4031
   191   000000                     _T2HLTbits	set	4030
   192                           
   193                           ; #config settings
   194                           
   195                           	psect	cinit
   196   002D56                     __pcinit:
   197                           	callstack 0
   198   002D56                     start_initialization:
   199                           	callstack 0
   200   002D56                     __initialization:
   201                           	callstack 0
   202                           
   203                           ; Initialize objects allocated to BANK1 (4 bytes)
   204                           ; load TBLPTR registers with __pidataBANK1
   205   002D56  0E96               	movlw	low __pidataBANK1
   206   002D58  6EF6               	movwf	tblptrl,c
   207   002D5A  0E31               	movlw	high __pidataBANK1
   208   002D5C  6EF7               	movwf	tblptrh,c
   209   002D5E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   210   002D60  6EF8               	movwf	tblptru,c
   211   002D62  EE01  F0FB         	lfsr	0,__pdataBANK1
   212   002D66  EE10 F004          	lfsr	1,4
   213   002D6A                     copy_data0:
   214   002D6A  0009               	tblrd		*+
   215   002D6C  CFF5 FFEE          	movff	tablat,postinc0
   216   002D70  50E5               	movf	postdec1,w,c
   217   002D72  50E1               	movf	fsr1l,w,c
   218   002D74  E1FA               	bnz	copy_data0
   219                           
   220                           ; Initialize objects allocated to COMRAM (2 bytes)
   221                           ; load TBLPTR registers with __pidataCOMRAM
   222   002D76  0E9A               	movlw	low __pidataCOMRAM
   223   002D78  6EF6               	movwf	tblptrl,c
   224   002D7A  0E31               	movlw	high __pidataCOMRAM
   225   002D7C  6EF7               	movwf	tblptrh,c
   226   002D7E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   227   002D80  6EF8               	movwf	tblptru,c
   228   002D82  0009               	tblrd		*+	;fetch initializer
   229   002D84  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   230   002D88  0009               	tblrd		*+	;fetch initializer
   231   002D8A  CFF5 F04B          	movff	tablat,__pdataCOMRAM+1
   232                           
   233                           ; Clear objects allocated to BANK2 (82 bytes)
   234   002D8E  EE02  F000         	lfsr	0,__pbssBANK2
   235   002D92  0E52               	movlw	82
   236   002D94                     clear_0:
   237   002D94  6AEE               	clrf	postinc0,c
   238   002D96  06E8               	decf	wreg,f,c
   239   002D98  E1FD               	bnz	clear_0
   240                           
   241                           ; Clear objects allocated to BANK1 (41 bytes)
   242   002D9A  EE01  F0D2         	lfsr	0,__pbssBANK1
   243   002D9E  0E29               	movlw	41
   244   002DA0                     clear_1:
   245   002DA0  6AEE               	clrf	postinc0,c
   246   002DA2  06E8               	decf	wreg,f,c
   247   002DA4  E1FD               	bnz	clear_1
   248                           
   249                           ; Clear objects allocated to BANK0 (120 bytes)
   250   002DA6  EE00  F060         	lfsr	0,__pbssBANK0
   251   002DAA  0E78               	movlw	120
   252   002DAC                     clear_2:
   253   002DAC  6AEE               	clrf	postinc0,c
   254   002DAE  06E8               	decf	wreg,f,c
   255   002DB0  E1FD               	bnz	clear_2
   256                           
   257                           ; Clear objects allocated to COMRAM (4 bytes)
   258   002DB2  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   259   002DB4  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   260   002DB6  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   261   002DB8  6A46               	clrf	__pbssCOMRAM& (0+255),c
   262   002DBA                     end_of_initialization:
   263                           	callstack 0
   264   002DBA                     __end_of__initialization:
   265                           	callstack 0
   266   002DBA  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267   002DBC  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268   002DBE  0100               	movlb	0
   269   002DC0  EF6A  F00D         	goto	_main	;jump to C main() function
   270                           
   271                           	psect	bssCOMRAM
   272   000046                     __pbssCOMRAM:
   273                           	callstack 0
   274   000046                     _TxBufReadCnt:
   275                           	callstack 0
   276   000046                     	ds	1
   277   000047                     _TxBufWriteCnt:
   278                           	callstack 0
   279   000047                     	ds	1
   280   000048                     _RxBufReadCnt:
   281                           	callstack 0
   282   000048                     	ds	1
   283   000049                     _RxBufWriteCnt:
   284                           	callstack 0
   285   000049                     	ds	1
   286                           
   287                           	psect	dataCOMRAM
   288   00004A                     __pdataCOMRAM:
   289                           	callstack 0
   290   00004A                     _ambient:
   291                           	callstack 0
   292   00004A                     	ds	2
   293                           
   294                           	psect	bssBANK0
   295   000060                     __pbssBANK0:
   296                           	callstack 0
   297   000060                     _EUSART4TXbuf:
   298                           	callstack 0
   299   000060                     	ds	60
   300   00009C                     	ds	40
   301   0000C4                     _EUSART4RXbuf:
   302                           	callstack 0
   303   0000C4                     	ds	20
   304                           
   305                           	psect	bssBANK1
   306   0001D2                     __pbssBANK1:
   307                           	callstack 0
   308   0001D2                     	ds	40
   309   0001FA                     _wall:
   310                           	callstack 0
   311   0001FA                     	ds	1
   312                           
   313                           	psect	dataBANK1
   314   0001FB                     __pdataBANK1:
   315                           	callstack 0
   316   0001FB                     main@F14601:
   317                           	callstack 0
   318   0001FB                     	ds	4
   319                           
   320                           	psect	bssBANK2
   321   000200                     __pbssBANK2:
   322                           	callstack 0
   323   000200                     	ds	82
   324                           
   325                           	psect	cstackBANK1
   326   000100                     __pcstackBANK1:
   327                           	callstack 0
   328   000100                     main@buf:
   329                           	callstack 0
   330                           
   331                           ; 40 bytes @ 0x0
   332   000100                     	ds	40
   333   000128                     main@straightTime:
   334                           	callstack 0
   335                           
   336                           ; 82 bytes @ 0x28
   337   000128                     	ds	82
   338   00017A                     main@moveSequence:
   339                           	callstack 0
   340                           
   341                           ; 40 bytes @ 0x7A
   342   00017A                     	ds	40
   343   0001A2                     main@testSequence:
   344                           	callstack 0
   345                           
   346                           ; 4 bytes @ 0xA2
   347   0001A2                     	ds	4
   348   0001A6                     main@reverseDuration:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0xA6
   352   0001A6                     	ds	1
   353   0001A7                     main@turnSpeed:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0xA7
   357   0001A7                     	ds	1
   358   0001A8                     main@turnDuration:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0xA8
   362   0001A8                     	ds	1
   363   0001A9                     main@turnRamp:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0xA9
   367   0001A9                     	ds	1
   368   0001AA                     main@RGBC_n:
   369                           	callstack 0
   370                           
   371                           ; 8 bytes @ 0xAA
   372   0001AA                     	ds	8
   373   0001B2                     main@straightSpeed:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0xB2
   377   0001B2                     	ds	1
   378   0001B3                     main@straightRamp:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0xB3
   382   0001B3                     	ds	1
   383   0001B4                     main@color:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0xB4
   387   0001B4                     	ds	1
   388   0001B5                     main@curMove:
   389                           	callstack 0
   390                           
   391                           ; 1 bytes @ 0xB5
   392   0001B5                     	ds	1
   393   0001B6                     main@RGBC:
   394                           	callstack 0
   395                           
   396                           ; 8 bytes @ 0xB6
   397   0001B6                     	ds	8
   398   0001BE                     main@motorR:
   399                           	callstack 0
   400                           
   401                           ; 10 bytes @ 0xBE
   402   0001BE                     	ds	10
   403   0001C8                     main@motorL:
   404                           	callstack 0
   405                           
   406                           ; 10 bytes @ 0xC8
   407   0001C8                     	ds	10
   408                           
   409                           	psect	cstackBANK0
   410   0000D8                     __pcstackBANK0:
   411                           	callstack 0
   412   0000D8                     move@mL:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416   0000D8                     	ds	2
   417   0000DA                     move@mR:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421   0000DA                     	ds	2
   422   0000DC                     move@color:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x4
   426   0000DC                     	ds	1
   427   0000DD                     move@moveSequence:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x5
   431   0000DD                     	ds	2
   432   0000DF                     move@straightTime:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x7
   436   0000DF                     	ds	2
   437   0000E1                     move@curMove:
   438                           	callstack 0
   439                           
   440                           ; 1 bytes @ 0x9
   441   0000E1                     	ds	1
   442   0000E2                     move@straightSpeed:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0xA
   446   0000E2                     	ds	1
   447   0000E3                     move@reverseDuration:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0xB
   451   0000E3                     	ds	1
   452   0000E4                     move@straightRamp:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0xC
   456   0000E4                     	ds	1
   457   0000E5                     move@turnSpeed:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0xD
   461   0000E5                     	ds	1
   462   0000E6                     move@turnDuration:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0xE
   466   0000E6                     	ds	1
   467   0000E7                     move@turnRamp:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0xF
   471   0000E7                     	ds	1
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_getCharFromTxBuf:
   477   000001                     ??i2_I2C_2_Master_Idle:
   478   000001                     putCharToRxBuf@byte:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x0
   482   000001                     	ds	1
   483   000002                     i2I2C_2_Master_Write@data_byte:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487   000002                     	ds	1
   488   000003                     i2color_writetoaddr@value:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x2
   492   000003                     	ds	1
   493   000004                     i2color_writetoaddr@address:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0x3
   497   000004                     	ds	1
   498   000005                     ??i2_color_clear_init_interrupts:
   499                           
   500                           ; 1 bytes @ 0x4
   501   000005                     	ds	1
   502   000006                     i2color_clear_init_interrupts@high_threshold:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x5
   506   000006                     	ds	2
   507   000008                     i2color_clear_init_interrupts@low_threshold:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x7
   511   000008                     	ds	2
   512   00000A                     ??_HighISR:
   513                           
   514                           ; 1 bytes @ 0x9
   515   00000A                     	ds	3
   516   00000D                     ??_I2C_2_Master_Idle:
   517   00000D                     ?_get16bitTMR0val:
   518                           	callstack 0
   519   00000D                     ?___wmul:
   520                           	callstack 0
   521   00000D                     ?___awdiv:
   522                           	callstack 0
   523   00000D                     ?___lmul:
   524                           	callstack 0
   525   00000D                     white_Light@state:
   526                           	callstack 0
   527   00000D                     ADC_getval@tmpval:
   528                           	callstack 0
   529   00000D                     initDCmotorsPWM@PWMperiod:
   530                           	callstack 0
   531   00000D                     ___wmul@multiplier:
   532                           	callstack 0
   533   00000D                     ___awdiv@dividend:
   534                           	callstack 0
   535   00000D                     ___lmul@multiplier:
   536                           	callstack 0
   537                           
   538                           ; 4 bytes @ 0xC
   539   00000D                     	ds	1
   540   00000E                     ??_I2C_2_Master_Read:
   541   00000E                     I2C_2_Master_Write@data_byte:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0xD
   545   00000E                     	ds	1
   546   00000F                     ??_get16bitTMR0val:
   547   00000F                     color_writetoaddr@value:
   548                           	callstack 0
   549   00000F                     I2C_2_Master_Read@ack:
   550                           	callstack 0
   551   00000F                     ___wmul@multiplicand:
   552                           	callstack 0
   553   00000F                     ___awdiv@divisor:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0xE
   557   00000F                     	ds	1
   558   000010                     color_writetoaddr@address:
   559                           	callstack 0
   560   000010                     I2C_2_Master_Read@tmp:
   561                           	callstack 0
   562                           
   563                           ; 1 bytes @ 0xF
   564   000010                     	ds	1
   565   000011                     ??_color_clear_init_interrupts:
   566   000011                     ___awdiv@counter:
   567                           	callstack 0
   568   000011                     color_read@RGBC:
   569                           	callstack 0
   570   000011                     get16bitTMR0val@timer_low:
   571                           	callstack 0
   572   000011                     ___wmul@product:
   573                           	callstack 0
   574   000011                     ___lmul@multiplicand:
   575                           	callstack 0
   576                           
   577                           ; 4 bytes @ 0x10
   578   000011                     	ds	1
   579   000012                     ___awdiv@sign:
   580                           	callstack 0
   581   000012                     color_clear_init_interrupts@high_threshold:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0x11
   585   000012                     	ds	1
   586   000013                     ??_color_read:
   587   000013                     ?___lwdiv:
   588                           	callstack 0
   589   000013                     get16bitTMR0val@timer_high:
   590                           	callstack 0
   591   000013                     ___awdiv@quotient:
   592                           	callstack 0
   593   000013                     ___lwdiv@dividend:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x12
   597   000013                     	ds	1
   598   000014                     color_clear_init_interrupts@low_threshold:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x13
   602   000014                     	ds	1
   603   000015                     batteryLevel@batteryVoltage:
   604                           	callstack 0
   605   000015                     get16bitTMR0val@timer_val:
   606                           	callstack 0
   607   000015                     ___lwdiv@divisor:
   608                           	callstack 0
   609   000015                     ___lmul@product:
   610                           	callstack 0
   611                           
   612                           ; 4 bytes @ 0x14
   613   000015                     	ds	1
   614   000016                     ??_color_click_init:
   615   000016                     batteryLevel@batteryQuarter:
   616                           	callstack 0
   617                           
   618                           ; 1 bytes @ 0x15
   619   000016                     	ds	1
   620   000017                     ___lwdiv@quotient:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624   000017                     	ds	2
   625   000019                     ?___aldiv:
   626                           	callstack 0
   627   000019                     ___lwdiv@counter:
   628                           	callstack 0
   629   000019                     ___aldiv@dividend:
   630                           	callstack 0
   631                           
   632                           ; 4 bytes @ 0x18
   633   000019                     	ds	1
   634   00001A                     setMotorPWM@m:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x19
   638   00001A                     	ds	2
   639   00001C                     ??_setMotorPWM:
   640                           
   641                           ; 1 bytes @ 0x1B
   642   00001C                     	ds	1
   643   00001D                     ___aldiv@divisor:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x1C
   647   00001D                     	ds	1
   648   00001E                     setMotorPWM@posDuty:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x1D
   652   00001E                     	ds	1
   653   00001F                     setMotorPWM@negDuty:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x1E
   657   00001F                     	ds	1
   658   000020                     stop@mL:
   659                           	callstack 0
   660   000020                     turnLeft@mL:
   661                           	callstack 0
   662   000020                     turnRight@mL:
   663                           	callstack 0
   664   000020                     fullSpeedAhead@mL:
   665                           	callstack 0
   666   000020                     reverseOneSquare@mL:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x1F
   670   000020                     	ds	1
   671   000021                     ___aldiv@counter:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x20
   675   000021                     	ds	1
   676   000022                     ___aldiv@sign:
   677                           	callstack 0
   678   000022                     stop@mR:
   679                           	callstack 0
   680   000022                     turnLeft@mR:
   681                           	callstack 0
   682   000022                     turnRight@mR:
   683                           	callstack 0
   684   000022                     fullSpeedAhead@mR:
   685                           	callstack 0
   686   000022                     reverseOneSquare@mR:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x21
   690   000022                     	ds	1
   691   000023                     ___aldiv@quotient:
   692                           	callstack 0
   693                           
   694                           ; 4 bytes @ 0x22
   695   000023                     	ds	1
   696   000024                     stop@straightRamp:
   697                           	callstack 0
   698   000024                     turnLeft@turnSpeed:
   699                           	callstack 0
   700   000024                     turnRight@turnSpeed:
   701                           	callstack 0
   702   000024                     fullSpeedAhead@straightSpeed:
   703                           	callstack 0
   704   000024                     reverseOneSquare@straightSpeed:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x23
   708   000024                     	ds	1
   709   000025                     ??_stop:
   710   000025                     turnLeft@turnDuration:
   711                           	callstack 0
   712   000025                     turnRight@turnDuration:
   713                           	callstack 0
   714   000025                     fullSpeedAhead@straightRamp:
   715                           	callstack 0
   716   000025                     reverseOneSquare@reverseDuration:
   717                           	callstack 0
   718                           
   719                           ; 1 bytes @ 0x24
   720   000025                     	ds	1
   721   000026                     ??_fullSpeedAhead:
   722   000026                     turnLeft@turnRamp:
   723                           	callstack 0
   724   000026                     turnRight@turnRamp:
   725                           	callstack 0
   726   000026                     reverseOneSquare@straightRamp:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x25
   730   000026                     	ds	1
   731   000027                     ??_turnRight:
   732   000027                     ??_turnLeft:
   733   000027                     ??_reverseOneSquare:
   734   000027                     color_normalise@RGBC:
   735                           	callstack 0
   736                           
   737                           ; 8 bytes @ 0x26
   738   000027                     	ds	1
   739   000028                     stop@i:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x27
   743   000028                     	ds	1
   744   000029                     fullSpeedAhead@i:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x28
   748   000029                     	ds	1
   749   00002A                     stop@cur_power:
   750                           	callstack 0
   751   00002A                     turnLeft@i:
   752                           	callstack 0
   753   00002A                     turnRight@i:
   754                           	callstack 0
   755   00002A                     reverseOneSquare@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x29
   759   00002A                     	ds	1
   760   00002B                     fullSpeedAhead@cur_power:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x2A
   764   00002B                     	ds	1
   765   00002C                     turnLeft@cur_power:
   766                           	callstack 0
   767   00002C                     turnRight@cur_power:
   768                           	callstack 0
   769   00002C                     reverseOneSquare@cur_power:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x2B
   773   00002C                     	ds	2
   774   00002E                     returnHome@mL:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x2D
   778   00002E                     	ds	1
   779   00002F                     color_normalise@RGBC_n:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x2E
   783   00002F                     	ds	1
   784   000030                     returnHome@mR:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x2F
   788   000030                     	ds	1
   789   000031                     ??_color_normalise:
   790                           
   791                           ; 1 bytes @ 0x30
   792   000031                     	ds	1
   793   000032                     returnHome@moveSequence:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x31
   797   000032                     	ds	2
   798   000034                     returnHome@straightTime:
   799                           	callstack 0
   800                           
   801                           ; 2 bytes @ 0x33
   802   000034                     	ds	2
   803   000036                     returnHome@curMove:
   804                           	callstack 0
   805                           
   806                           ; 1 bytes @ 0x35
   807   000036                     	ds	1
   808   000037                     returnHome@straightSpeed:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0x36
   812   000037                     	ds	1
   813   000038                     returnHome@reverseDuration:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x37
   817   000038                     	ds	1
   818   000039                     returnHome@straightRamp:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x38
   822   000039                     	ds	1
   823   00003A                     returnHome@turnSpeed:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x39
   827   00003A                     	ds	1
   828   00003B                     returnHome@turnDuration:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x3A
   832   00003B                     	ds	1
   833   00003C                     returnHome@turnRamp:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x3B
   837   00003C                     	ds	1
   838   00003D                     ??_returnHome:
   839                           
   840                           ; 1 bytes @ 0x3C
   841   00003D                     	ds	4
   842   000041                     returnHome@i:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x40
   846   000041                     	ds	1
   847   000042                     ??_move:
   848                           
   849                           ; 1 bytes @ 0x41
   850   000042                     	ds	2
   851   000044                     ??_main:
   852                           
   853                           ; 1 bytes @ 0x43
   854   000044                     	ds	2
   855                           
   856 ;;
   857 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   858 ;;
   859 ;; *************** function _main *****************
   860 ;; Defined at:
   861 ;;		line 27 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  straightTime   82   40[BANK1 ] unsigned int [41]
   866 ;;  moveSequence   40  122[BANK1 ] unsigned char [40]
   867 ;;  buf            40    0[BANK1 ] unsigned char [40]
   868 ;;  motorL         10  200[BANK1 ] struct DC_motor
   869 ;;  motorR         10  190[BANK1 ] struct DC_motor
   870 ;;  RGBC            8  182[BANK1 ] struct RGBC_val
   871 ;;  RGBC_n          8  170[BANK1 ] struct RGBC_val
   872 ;;  testSequence    4  162[BANK1 ] unsigned char [4]
   873 ;;  PWMcycle        2    0        unsigned int 
   874 ;;  curMove         1  181[BANK1 ] unsigned char 
   875 ;;  color           1  180[BANK1 ] unsigned char 
   876 ;;  straightRamp    1  179[BANK1 ] unsigned char 
   877 ;;  straightSpee    1  178[BANK1 ] unsigned char 
   878 ;;  turnRamp        1  169[BANK1 ] unsigned char 
   879 ;;  turnDuration    1  168[BANK1 ] unsigned char 
   880 ;;  turnSpeed       1  167[BANK1 ] unsigned char 
   881 ;;  reverseDurat    1  166[BANK1 ] unsigned char 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Locals:         0       0     210       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   894 ;;      Totals:         2       0     210       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;Total ram usage:      212 bytes
   896 ;; Hardware stack levels required when called: 10
   897 ;; This function calls:
   898 ;;		_Buggy_init
   899 ;;		_Interrupts_init
   900 ;;		_Timer0_init
   901 ;;		_batteryLevel
   902 ;;		_color_click_init
   903 ;;		_color_normalise
   904 ;;		_color_read
   905 ;;		_fullSpeedAhead
   906 ;;		_get16bitTMR0val
   907 ;;		_initDCmotorsPWM
   908 ;;		_initUSART4
   909 ;;		_move
   910 ;;		_resetTimer
   911 ;;		_stop
   912 ;;		_white_Light
   913 ;; This function is called by:
   914 ;;		Startup code after reset
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text0
   919   001AD4                     __ptext0:
   920                           	callstack 0
   921   001AD4                     _main:
   922                           	callstack 21
   923   001AD4                     
   924                           ;main.c: 29:     char buf[40] = {0};
   925   001AD4  EE21  F000         	lfsr	2,main@buf
   926   001AD8  0E27               	movlw	39
   927   001ADA                     u2041:
   928   001ADA  6ADE               	clrf	postinc2,c
   929   001ADC  06E8               	decf	wreg,f,c
   930   001ADE  E2FD               	bc	u2041
   931   001AE0                     
   932                           ;main.c: 31:     unsigned char color = 0;
   933   001AE0  0E00               	movlw	0
   934   001AE2  0101               	movlb	1	; () banked
   935   001AE4  6FB4               	movwf	main@color& (0+255),b
   936                           
   937                           ;main.c: 32:     unsigned char moveSequence[40] = {0};
   938   001AE6  EE21  F07A         	lfsr	2,main@moveSequence
   939   001AEA  0E27               	movlw	39
   940   001AEC                     u2051:
   941   001AEC  6ADE               	clrf	postinc2,c
   942   001AEE  06E8               	decf	wreg,f,c
   943   001AF0  E2FD               	bc	u2051
   944                           
   945                           ;main.c: 33:     unsigned int straightTime[41] = {0};
   946   001AF2  EE21  F028         	lfsr	2,main@straightTime
   947   001AF6  0E51               	movlw	81
   948   001AF8                     u2061:
   949   001AF8  6ADE               	clrf	postinc2,c
   950   001AFA  06E8               	decf	wreg,f,c
   951   001AFC  E2FD               	bc	u2061
   952   001AFE                     
   953                           ; BSR set to: 1
   954                           ;main.c: 34:     char curMove = 0;
   955   001AFE  0E00               	movlw	0
   956   001B00  6FB5               	movwf	main@curMove& (0+255),b
   957   001B02                     
   958                           ; BSR set to: 1
   959                           ;main.c: 36:     unsigned char testSequence[4] = {1,3,2,8};
   960   001B02  C1FB  F1A2         	movff	main@F14601,main@testSequence
   961   001B06  C1FC  F1A3         	movff	main@F14601+1,main@testSequence+1
   962   001B0A  C1FD  F1A4         	movff	main@F14601+2,main@testSequence+2
   963   001B0E  C1FE  F1A5         	movff	main@F14601+3,main@testSequence+3
   964   001B12                     
   965                           ; BSR set to: 1
   966                           ;main.c: 39:     struct RGBC_val RGBC, RGBC_n;;main.c: 40:     struct DC_motor motorL, m
      +                          otorR;;main.c: 43:     Buggy_init();
   967   001B12  EC7B  F017         	call	_Buggy_init	;wreg free
   968   001B16                     
   969                           ;main.c: 44:     color_click_init();
   970   001B16  EC5F  F017         	call	_color_click_init	;wreg free
   971   001B1A                     
   972                           ;main.c: 45:     Timer0_init();
   973   001B1A  EC42  F018         	call	_Timer0_init	;wreg free
   974   001B1E                     
   975                           ;main.c: 46:     Interrupts_init();
   976   001B1E  EC96  F018         	call	_Interrupts_init	;wreg free
   977   001B22                     
   978                           ;main.c: 47:     initUSART4();
   979   001B22  EC62  F018         	call	_initUSART4	;wreg free
   980   001B26                     
   981                           ;main.c: 48:     initDCmotorsPWM(PWMcycle);
   982   001B26  0E00               	movlw	0
   983   001B28  6E0E               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   984   001B2A  0EC7               	movlw	199
   985   001B2C  6E0D               	movwf	initDCmotorsPWM@PWMperiod^0,c
   986   001B2E  ECAF  F015         	call	_initDCmotorsPWM	;wreg free
   987   001B32                     
   988                           ;main.c: 50:     motorL.power=0;
   989   001B32  0E00               	movlw	0
   990   001B34  0101               	movlb	1	; () banked
   991   001B36  6FC8               	movwf	main@motorL& (0+255),b
   992   001B38                     
   993                           ; BSR set to: 1
   994                           ;main.c: 51:     motorL.direction=1;
   995   001B38  0E01               	movlw	1
   996   001B3A  6FC9               	movwf	(main@motorL+1)& (0+255),b
   997   001B3C                     
   998                           ; BSR set to: 1
   999                           ;main.c: 52:     motorL.brakemode=1;
  1000   001B3C  0E01               	movlw	1
  1001   001B3E  6FCA               	movwf	(main@motorL+2)& (0+255),b
  1002   001B40                     
  1003                           ; BSR set to: 1
  1004                           ;main.c: 53:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1005   001B40  0EAA               	movlw	170
  1006   001B42  6FCD               	movwf	(main@motorL+5)& (0+255),b
  1007   001B44  0E0F               	movlw	15
  1008   001B46  6FCE               	movwf	(main@motorL+6)& (0+255),b
  1009   001B48                     
  1010                           ; BSR set to: 1
  1011                           ;main.c: 54:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1012   001B48  0EA6               	movlw	166
  1013   001B4A  6FCF               	movwf	(main@motorL+7)& (0+255),b
  1014   001B4C  0E0F               	movlw	15
  1015   001B4E  6FD0               	movwf	(main@motorL+8)& (0+255),b
  1016   001B50                     
  1017                           ; BSR set to: 1
  1018                           ;main.c: 55:     motorL.PWMperiod=PWMcycle;
  1019   001B50  0E00               	movlw	0
  1020   001B52  6FCC               	movwf	(main@motorL+4)& (0+255),b
  1021   001B54  0EC7               	movlw	199
  1022   001B56  6FCB               	movwf	(main@motorL+3)& (0+255),b
  1023   001B58                     
  1024                           ; BSR set to: 1
  1025                           ;main.c: 56:     motorL.compensation=3;
  1026   001B58  0E03               	movlw	3
  1027   001B5A  6FD1               	movwf	(main@motorL+9)& (0+255),b
  1028   001B5C                     
  1029                           ; BSR set to: 1
  1030                           ;main.c: 58:     motorR.power=0;
  1031   001B5C  0E00               	movlw	0
  1032   001B5E  6FBE               	movwf	main@motorR& (0+255),b
  1033   001B60                     
  1034                           ; BSR set to: 1
  1035                           ;main.c: 59:     motorR.direction=1;
  1036   001B60  0E01               	movlw	1
  1037   001B62  6FBF               	movwf	(main@motorR+1)& (0+255),b
  1038   001B64                     
  1039                           ; BSR set to: 1
  1040                           ;main.c: 60:     motorR.brakemode=1;
  1041   001B64  0E01               	movlw	1
  1042   001B66  6FC0               	movwf	(main@motorR+2)& (0+255),b
  1043   001B68                     
  1044                           ; BSR set to: 1
  1045                           ;main.c: 61:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1046   001B68  0E25               	movlw	37
  1047   001B6A  6FC3               	movwf	(main@motorR+5)& (0+255),b
  1048   001B6C  0E0F               	movlw	15
  1049   001B6E  6FC4               	movwf	(main@motorR+6)& (0+255),b
  1050   001B70                     
  1051                           ; BSR set to: 1
  1052                           ;main.c: 62:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1053   001B70  0E21               	movlw	33
  1054   001B72  6FC5               	movwf	(main@motorR+7)& (0+255),b
  1055   001B74  0E0F               	movlw	15
  1056   001B76  6FC6               	movwf	(main@motorR+8)& (0+255),b
  1057   001B78                     
  1058                           ; BSR set to: 1
  1059                           ;main.c: 63:     motorR.PWMperiod=PWMcycle;
  1060   001B78  0E00               	movlw	0
  1061   001B7A  6FC2               	movwf	(main@motorR+4)& (0+255),b
  1062   001B7C  0EC7               	movlw	199
  1063   001B7E  6FC1               	movwf	(main@motorR+3)& (0+255),b
  1064   001B80                     
  1065                           ; BSR set to: 1
  1066                           ;main.c: 64:     motorR.compensation=0;
  1067   001B80  0E00               	movlw	0
  1068   001B82  6FC7               	movwf	(main@motorR+9)& (0+255),b
  1069   001B84                     
  1070                           ; BSR set to: 1
  1071                           ;main.c: 67:     char straightSpeed=25;
  1072   001B84  0E19               	movlw	25
  1073   001B86  6FB2               	movwf	main@straightSpeed& (0+255),b
  1074   001B88                     
  1075                           ; BSR set to: 1
  1076                           ;main.c: 68:     unsigned char straightRamp=2;
  1077   001B88  0E02               	movlw	2
  1078   001B8A  6FB3               	movwf	main@straightRamp& (0+255),b
  1079   001B8C                     
  1080                           ; BSR set to: 1
  1081                           ;main.c: 70:     unsigned char reverseDuration=10;
  1082   001B8C  0E0A               	movlw	10
  1083   001B8E  6FA6               	movwf	main@reverseDuration& (0+255),b
  1084   001B90                     
  1085                           ; BSR set to: 1
  1086                           ;main.c: 72:     char turnSpeed=21;
  1087   001B90  0E15               	movlw	21
  1088   001B92  6FA7               	movwf	main@turnSpeed& (0+255),b
  1089   001B94                     
  1090                           ; BSR set to: 1
  1091                           ;main.c: 73:     unsigned char turnDuration=10;
  1092   001B94  0E0A               	movlw	10
  1093   001B96  6FA8               	movwf	main@turnDuration& (0+255),b
  1094   001B98                     
  1095                           ; BSR set to: 1
  1096                           ;main.c: 74:     unsigned char turnRamp=4;
  1097   001B98  0E04               	movlw	4
  1098   001B9A  6FA9               	movwf	main@turnRamp& (0+255),b
  1099   001B9C                     
  1100                           ; BSR set to: 1
  1101                           ;main.c: 77:     batteryLevel();
  1102   001B9C  EC17  F017         	call	_batteryLevel	;wreg free
  1103   001BA0                     l79:
  1104   001BA0  B48E               	btfsc	142,2,c	;volatile
  1105   001BA2  EFD5  F00D         	goto	u2071
  1106   001BA6  EFD7  F00D         	goto	u2070
  1107   001BAA                     u2071:
  1108   001BAA  EFD0  F00D         	goto	l79
  1109   001BAE                     u2070:
  1110   001BAE                     
  1111                           ;main.c: 81:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1112   001BAE  9680               	bcf	128,3,c	;volatile
  1113   001BB0  9E7C               	bcf	124,7,c	;volatile
  1114                           
  1115                           ;main.c: 104:     LATHbits.LATH1=LATDbits.LATD3=1;
  1116   001BB2  867C               	bsf	124,3,c	;volatile
  1117   001BB4  8280               	bsf	128,1,c	;volatile
  1118   001BB6                     
  1119                           ;main.c: 105:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1120   001BB6  0E29               	movlw	41
  1121   001BB8  6E45               	movwf	(??_main+1)^0,c
  1122   001BBA  0E96               	movlw	150
  1123   001BBC  6E44               	movwf	??_main^0,c
  1124   001BBE  0E7F               	movlw	127
  1125   001BC0                     u2137:
  1126   001BC0  2EE8               	decfsz	wreg,f,c
  1127   001BC2  D7FE               	bra	u2137
  1128   001BC4  2E44               	decfsz	??_main^0,f,c
  1129   001BC6  D7FC               	bra	u2137
  1130   001BC8  2E45               	decfsz	(??_main+1)^0,f,c
  1131   001BCA  D7FA               	bra	u2137
  1132   001BCC  0000               	nop	
  1133   001BCE                     
  1134                           ;main.c: 111:     white_Light(1);
  1135   001BCE  0E01               	movlw	1
  1136   001BD0  EC20  F018         	call	_white_Light
  1137   001BD4                     
  1138                           ;main.c: 112:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1139   001BD4  0E52               	movlw	82
  1140   001BD6  6E45               	movwf	(??_main+1)^0,c
  1141   001BD8  0E2B               	movlw	43
  1142   001BDA  6E44               	movwf	??_main^0,c
  1143   001BDC  0E00               	movlw	0
  1144   001BDE                     u2147:
  1145   001BDE  2EE8               	decfsz	wreg,f,c
  1146   001BE0  D7FE               	bra	u2147
  1147   001BE2  2E44               	decfsz	??_main^0,f,c
  1148   001BE4  D7FC               	bra	u2147
  1149   001BE6  2E45               	decfsz	(??_main+1)^0,f,c
  1150   001BE8  D7FA               	bra	u2147
  1151   001BEA  D000               	nop2	
  1152   001BEC                     
  1153                           ;main.c: 115:     color_read(&RGBC);
  1154   001BEC  0EB6               	movlw	low main@RGBC
  1155   001BEE  6E11               	movwf	color_read@RGBC^0,c
  1156   001BF0  0E01               	movlw	high main@RGBC
  1157   001BF2  6E12               	movwf	(color_read@RGBC+1)^0,c
  1158   001BF4  ECAD  F00E         	call	_color_read	;wreg free
  1159   001BF8                     
  1160                           ;main.c: 116:     ambient=RGBC.C;
  1161   001BF8  C1BC  F04A         	movff	main@RGBC+6,_ambient
  1162   001BFC  C1BD  F04B         	movff	main@RGBC+7,_ambient+1
  1163   001C00                     
  1164                           ;main.c: 117:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1165   001C00  0E29               	movlw	41
  1166   001C02  6E45               	movwf	(??_main+1)^0,c
  1167   001C04  0E96               	movlw	150
  1168   001C06  6E44               	movwf	??_main^0,c
  1169   001C08  0E7F               	movlw	127
  1170   001C0A                     u2157:
  1171   001C0A  2EE8               	decfsz	wreg,f,c
  1172   001C0C  D7FE               	bra	u2157
  1173   001C0E  2E44               	decfsz	??_main^0,f,c
  1174   001C10  D7FC               	bra	u2157
  1175   001C12  2E45               	decfsz	(??_main+1)^0,f,c
  1176   001C14  D7FA               	bra	u2157
  1177   001C16  0000               	nop	
  1178   001C18                     
  1179                           ;main.c: 119:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1180   001C18  0EC8               	movlw	low main@motorL
  1181   001C1A  6E20               	movwf	fullSpeedAhead@mL^0,c
  1182   001C1C  0E01               	movlw	high main@motorL
  1183   001C1E  6E21               	movwf	(fullSpeedAhead@mL+1)^0,c
  1184   001C20  0EBE               	movlw	low main@motorR
  1185   001C22  6E22               	movwf	fullSpeedAhead@mR^0,c
  1186   001C24  0E01               	movlw	high main@motorR
  1187   001C26  6E23               	movwf	(fullSpeedAhead@mR+1)^0,c
  1188   001C28  0E19               	movlw	25
  1189   001C2A  6E24               	movwf	fullSpeedAhead@straightSpeed^0,c
  1190   001C2C  0E02               	movlw	2
  1191   001C2E  6E25               	movwf	fullSpeedAhead@straightRamp^0,c
  1192   001C30  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1193   001C34                     
  1194                           ;main.c: 120:     resetTimer();
  1195   001C34  ECAD  F018         	call	_resetTimer	;wreg free
  1196   001C38                     
  1197                           ;main.c: 122:     wall=0;
  1198   001C38  0E00               	movlw	0
  1199   001C3A  0101               	movlb	1	; () banked
  1200   001C3C  6FFA               	movwf	_wall& (0+255),b
  1201   001C3E                     l3423:
  1202                           
  1203                           ; BSR set to: 1
  1204                           ;main.c: 125:         if (wall == 1) {
  1205   001C3E  05FA               	decf	_wall& (0+255),w,b
  1206   001C40  A4D8               	btfss	status,2,c
  1207   001C42  EF25  F00E         	goto	u2081
  1208   001C46  EF27  F00E         	goto	u2080
  1209   001C4A                     u2081:
  1210   001C4A  EFA2  F00E         	goto	l3447
  1211   001C4E                     u2080:
  1212   001C4E                     
  1213                           ; BSR set to: 1
  1214                           ;main.c: 126:             PIE0bits.INT0IE=TMR0IE=0;
  1215   001C4E  010E               	movlb	14	; () banked
  1216   001C50  9B29               	bcf	41,5,b	;volatile
  1217   001C52  AB29               	btfss	41,5,b	;volatile
  1218   001C54  D002               	bra	u2095
  1219   001C56  8129               	bsf	41,0,b	;volatile
  1220   001C58  D002               	bra	u2097
  1221   001C5A                     u2095:
  1222   001C5A  010E               	movlb	14	; () banked
  1223   001C5C  9129               	bcf	41,0,b	;volatile
  1224   001C5E                     u2097:
  1225   001C5E                     
  1226                           ; BSR set to: 14
  1227                           ;main.c: 127:             straightTime[curMove] = get16bitTMR0val();
  1228   001C5E  ECAB  F017         	call	_get16bitTMR0val	;wreg free
  1229   001C62  0101               	movlb	1	; () banked
  1230   001C64  51B5               	movf	main@curMove& (0+255),w,b
  1231   001C66  0D02               	mullw	2
  1232   001C68  0E28               	movlw	low main@straightTime
  1233   001C6A  24F3               	addwf	243,w,c
  1234   001C6C  6ED9               	movwf	fsr2l,c
  1235   001C6E  0E01               	movlw	high main@straightTime
  1236   001C70  20F4               	addwfc	prodh,w,c
  1237   001C72  6EDA               	movwf	fsr2h,c
  1238   001C74  C00D  FFDE         	movff	?_get16bitTMR0val,postinc2
  1239   001C78  C00E  FFDD         	movff	?_get16bitTMR0val+1,postdec2
  1240                           
  1241                           ;main.c: 130:             stop(&motorL, &motorR, straightRamp);
  1242   001C7C  0EC8               	movlw	low main@motorL
  1243   001C7E  6E20               	movwf	stop@mL^0,c
  1244   001C80  0E01               	movlw	high main@motorL
  1245   001C82  6E21               	movwf	(stop@mL+1)^0,c
  1246   001C84  0EBE               	movlw	low main@motorR
  1247   001C86  6E22               	movwf	stop@mR^0,c
  1248   001C88  0E01               	movlw	high main@motorR
  1249   001C8A  6E23               	movwf	(stop@mR+1)^0,c
  1250   001C8C  C1B3  F024         	movff	main@straightRamp,stop@straightRamp
  1251   001C90  EC55  F014         	call	_stop	;wreg free
  1252   001C94                     
  1253                           ;main.c: 131:             color_read(&RGBC);
  1254   001C94  0EB6               	movlw	low main@RGBC
  1255   001C96  6E11               	movwf	color_read@RGBC^0,c
  1256   001C98  0E01               	movlw	high main@RGBC
  1257   001C9A  6E12               	movwf	(color_read@RGBC+1)^0,c
  1258   001C9C  ECAD  F00E         	call	_color_read	;wreg free
  1259   001CA0                     
  1260                           ;main.c: 132:             color_normalise(RGBC, &RGBC_n);
  1261   001CA0  EE21  F0B6         	lfsr	2,main@RGBC
  1262   001CA4  EE00  F027         	lfsr	0,color_normalise@RGBC
  1263   001CA8  0E07               	movlw	7
  1264   001CAA                     u2101:
  1265   001CAA  CFDB FFEB          	movff	plusw2,plusw0
  1266   001CAE  06E8               	decf	wreg,f,c
  1267   001CB0  E2FC               	bc	u2101
  1268   001CB2  0EAA               	movlw	low main@RGBC_n
  1269   001CB4  6E2F               	movwf	color_normalise@RGBC_n^0,c
  1270   001CB6  0E01               	movlw	high main@RGBC_n
  1271   001CB8  6E30               	movwf	(color_normalise@RGBC_n+1)^0,c
  1272   001CBA  EC2A  F013         	call	_color_normalise	;wreg free
  1273   001CBE                     
  1274                           ;main.c: 134:             color = testSequence[curMove];
  1275   001CBE  0EA2               	movlw	low main@testSequence
  1276   001CC0  0101               	movlb	1	; () banked
  1277   001CC2  25B5               	addwf	main@curMove& (0+255),w,b
  1278   001CC4  6ED9               	movwf	fsr2l,c
  1279   001CC6  6ADA               	clrf	fsr2h,c
  1280   001CC8  0E01               	movlw	high main@testSequence
  1281   001CCA  22DA               	addwfc	fsr2h,f,c
  1282   001CCC  50DF               	movf	indf2,w,c
  1283   001CCE  6FB4               	movwf	main@color& (0+255),b
  1284   001CD0                     
  1285                           ; BSR set to: 1
  1286                           ;main.c: 135:             moveSequence[curMove] = color;
  1287   001CD0  0E7A               	movlw	low main@moveSequence
  1288   001CD2  25B5               	addwf	main@curMove& (0+255),w,b
  1289   001CD4  6ED9               	movwf	fsr2l,c
  1290   001CD6  6ADA               	clrf	fsr2h,c
  1291   001CD8  0E01               	movlw	high main@moveSequence
  1292   001CDA  22DA               	addwfc	fsr2h,f,c
  1293   001CDC  C1B4  FFDF         	movff	main@color,indf2
  1294   001CE0                     
  1295                           ; BSR set to: 1
  1296                           ;main.c: 138:             move(&motorL, &motorR, color, moveSequence, straightTime, curM
      +                          ove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  1297   001CE0  0EC8               	movlw	low main@motorL
  1298   001CE2  0100               	movlb	0	; () banked
  1299   001CE4  6FD8               	movwf	move@mL& (0+255),b
  1300   001CE6  0E01               	movlw	high main@motorL
  1301   001CE8  6FD9               	movwf	(move@mL+1)& (0+255),b
  1302   001CEA  0EBE               	movlw	low main@motorR
  1303   001CEC  6FDA               	movwf	move@mR& (0+255),b
  1304   001CEE  0E01               	movlw	high main@motorR
  1305   001CF0  6FDB               	movwf	(move@mR+1)& (0+255),b
  1306   001CF2  C1B4  F0DC         	movff	main@color,move@color
  1307   001CF6  0E7A               	movlw	low main@moveSequence
  1308   001CF8  6FDD               	movwf	move@moveSequence& (0+255),b
  1309   001CFA  0E01               	movlw	high main@moveSequence
  1310   001CFC  6FDE               	movwf	(move@moveSequence+1)& (0+255),b
  1311   001CFE  0E28               	movlw	low main@straightTime
  1312   001D00  6FDF               	movwf	move@straightTime& (0+255),b
  1313   001D02  0E01               	movlw	high main@straightTime
  1314   001D04  6FE0               	movwf	(move@straightTime+1)& (0+255),b
  1315   001D06  C1B5  F0E1         	movff	main@curMove,move@curMove
  1316   001D0A  C1B2  F0E2         	movff	main@straightSpeed,move@straightSpeed
  1317   001D0E  C1A6  F0E3         	movff	main@reverseDuration,move@reverseDuration
  1318   001D12  C1B3  F0E4         	movff	main@straightRamp,move@straightRamp
  1319   001D16  C1A7  F0E5         	movff	main@turnSpeed,move@turnSpeed
  1320   001D1A  C1A8  F0E6         	movff	main@turnDuration,move@turnDuration
  1321   001D1E  C1A9  F0E7         	movff	main@turnRamp,move@turnRamp
  1322   001D22  EC5F  F00A         	call	_move	;wreg free
  1323   001D26                     
  1324                           ;main.c: 140:             curMove++;
  1325   001D26  0101               	movlb	1	; () banked
  1326   001D28  2BB5               	incf	main@curMove& (0+255),f,b
  1327   001D2A                     
  1328                           ; BSR set to: 1
  1329                           ;main.c: 141:             resetTimer();
  1330   001D2A  ECAD  F018         	call	_resetTimer	;wreg free
  1331   001D2E                     
  1332                           ;main.c: 142:             PIE0bits.INT0IE=TMR0IE=1;
  1333   001D2E  010E               	movlb	14	; () banked
  1334   001D30  8B29               	bsf	41,5,b	;volatile
  1335   001D32  AB29               	btfss	41,5,b	;volatile
  1336   001D34  D002               	bra	u2115
  1337   001D36  8129               	bsf	41,0,b	;volatile
  1338   001D38  D002               	bra	u2117
  1339   001D3A                     u2115:
  1340   001D3A  010E               	movlb	14	; () banked
  1341   001D3C  9129               	bcf	41,0,b	;volatile
  1342   001D3E                     u2117:
  1343   001D3E                     
  1344                           ; BSR set to: 14
  1345                           ;main.c: 143:             wall = 0;
  1346   001D3E  0E00               	movlw	0
  1347   001D40  0101               	movlb	1	; () banked
  1348   001D42  6FFA               	movwf	_wall& (0+255),b
  1349   001D44                     l3447:
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;main.c: 155:         if (color == 8) {break;}
  1353   001D44  0E08               	movlw	8
  1354   001D46  19B4               	xorwf	main@color& (0+255),w,b
  1355   001D48  A4D8               	btfss	status,2,c
  1356   001D4A  EFA9  F00E         	goto	u2121
  1357   001D4E  EFAB  F00E         	goto	u2120
  1358   001D52                     u2121:
  1359   001D52  EF1F  F00E         	goto	l3423
  1360   001D56                     u2120:
  1361   001D56                     
  1362                           ; BSR set to: 1
  1363   001D56  EF5B  F000         	goto	start
  1364   001D5A                     __end_of_main:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _white_Light *****************
  1368 ;; Defined at:
  1369 ;;		line 57 in file "color.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  state           1    wreg     unsigned char 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  state           1   12[COMRAM] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;Total ram usage:        1 bytes
  1388 ;; Hardware stack levels used: 1
  1389 ;; Hardware stack levels required when called: 5
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text1
  1398   003040                     __ptext1:
  1399                           	callstack 0
  1400   003040                     _white_Light:
  1401                           	callstack 25
  1402                           
  1403                           ; BSR set to: 1
  1404                           ;incstack = 0
  1405                           ;white_Light@state stored from wreg
  1406   003040  6E0D               	movwf	white_Light@state^0,c
  1407   003042                     
  1408                           ;color.c: 57: void white_Light(char state);color.c: 58: {;color.c: 59:     if (state){
  1409   003042  500D               	movf	white_Light@state^0,w,c
  1410   003044  B4D8               	btfsc	status,2,c
  1411   003046  EF27  F018         	goto	u1571
  1412   00304A  EF29  F018         	goto	u1570
  1413   00304E                     u1571:
  1414   00304E  EF2E  F018         	goto	l125
  1415   003052                     u1570:
  1416   003052                     
  1417                           ;color.c: 60:         LATGbits.LATG0 = 1;
  1418   003052  807F               	bsf	127,0,c	;volatile
  1419                           
  1420                           ;color.c: 61:         LATEbits.LATE7 = 1;
  1421   003054  8E7D               	bsf	125,7,c	;volatile
  1422                           
  1423                           ;color.c: 62:         LATAbits.LATA3 = 1;
  1424   003056  8679               	bsf	121,3,c	;volatile
  1425                           
  1426                           ;color.c: 63:     }
  1427   003058  EF31  F018         	goto	l127
  1428   00305C                     l125:
  1429                           
  1430                           ;color.c: 65:         LATGbits.LATG0 = 0;
  1431   00305C  907F               	bcf	127,0,c	;volatile
  1432                           
  1433                           ;color.c: 66:         LATEbits.LATE7 = 0;
  1434   00305E  9E7D               	bcf	125,7,c	;volatile
  1435                           
  1436                           ;color.c: 67:         LATAbits.LATA3 = 0;
  1437   003060  9679               	bcf	121,3,c	;volatile
  1438   003062                     l127:
  1439   003062  0012               	return		;funcret
  1440   003064                     __end_of_white_Light:
  1441                           	callstack 0
  1442                           
  1443 ;; *************** function _move *****************
  1444 ;; Defined at:
  1445 ;;		line 89 in file "dc_motor.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  1448 ;;		 -> main@motorL(10), 
  1449 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  1450 ;;		 -> main@motorR(10), 
  1451 ;;  color           1    4[BANK0 ] unsigned char 
  1452 ;;  moveSequence    2    5[BANK0 ] PTR unsigned char 
  1453 ;;		 -> main@moveSequence(40), 
  1454 ;;  straightTime    2    7[BANK0 ] PTR unsigned int 
  1455 ;;		 -> main@straightTime(82), 
  1456 ;;  curMove         1    9[BANK0 ] unsigned char 
  1457 ;;  straightSpee    1   10[BANK0 ] unsigned char 
  1458 ;;  reverseDurat    1   11[BANK0 ] unsigned char 
  1459 ;;  straightRamp    1   12[BANK0 ] unsigned char 
  1460 ;;  turnSpeed       1   13[BANK0 ] unsigned char 
  1461 ;;  turnDuration    1   14[BANK0 ] unsigned char 
  1462 ;;  turnRamp        1   15[BANK0 ] unsigned char 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1474 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;Total ram usage:       18 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 9
  1481 ;; This function calls:
  1482 ;;		_fullSpeedAhead
  1483 ;;		_returnHome
  1484 ;;		_reverseOneSquare
  1485 ;;		_turnLeft
  1486 ;;		_turnRight
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text2
  1493   0014BE                     __ptext2:
  1494                           	callstack 0
  1495   0014BE                     _move:
  1496                           	callstack 21
  1497   0014BE                     
  1498                           ;dc_motor.c: 89: void move(DC_motor *mL, DC_motor *mR, char color, unsigned char *moveSe
      +                          quence, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reve
      +                          rseDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, uns
      +                          igned char turnRamp);dc_motor.c: 90: {;dc_motor.c: 91:     if (color == 1) {
  1499   0014BE  0100               	movlb	0	; () banked
  1500   0014C0  05DC               	decf	move@color& (0+255),w,b
  1501   0014C2  A4D8               	btfss	status,2,c
  1502   0014C4  EF66  F00A         	goto	u1961
  1503   0014C8  EF68  F00A         	goto	u1960
  1504   0014CC                     u1961:
  1505   0014CC  EFB0  F00A         	goto	l3263
  1506   0014D0                     u1960:
  1507   0014D0                     
  1508                           ; BSR set to: 0
  1509                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1510   0014D0  C0D8  F020         	movff	move@mL,turnRight@mL
  1511   0014D4  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1512   0014D8  C0DA  F022         	movff	move@mR,turnRight@mR
  1513   0014DC  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1514   0014E0  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1515   0014E4  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1516   0014E8  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1517   0014EC  EC9A  F010         	call	_turnRight	;wreg free
  1518   0014F0                     
  1519                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1520   0014F0  0E05               	movlw	5
  1521   0014F2  6E43               	movwf	(??_move+1)^0,c
  1522   0014F4  0E0F               	movlw	15
  1523   0014F6  6E42               	movwf	??_move^0,c
  1524   0014F8  0EF1               	movlw	241
  1525   0014FA                     u2167:
  1526   0014FA  2EE8               	decfsz	wreg,f,c
  1527   0014FC  D7FE               	bra	u2167
  1528   0014FE  2E42               	decfsz	??_move^0,f,c
  1529   001500  D7FC               	bra	u2167
  1530   001502  2E43               	decfsz	(??_move+1)^0,f,c
  1531   001504  D7FA               	bra	u2167
  1532   001506  0000               	nop	
  1533   001508                     
  1534                           ;dc_motor.c: 94:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1535   001508  C0D8  F020         	movff	move@mL,turnRight@mL
  1536   00150C  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1537   001510  C0DA  F022         	movff	move@mR,turnRight@mR
  1538   001514  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1539   001518  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1540   00151C  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1541   001520  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1542   001524  EC9A  F010         	call	_turnRight	;wreg free
  1543                           
  1544                           ;dc_motor.c: 95:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1545   001528  0E05               	movlw	5
  1546   00152A  6E43               	movwf	(??_move+1)^0,c
  1547   00152C  0E0F               	movlw	15
  1548   00152E  6E42               	movwf	??_move^0,c
  1549   001530  0EF1               	movlw	241
  1550   001532                     u2177:
  1551   001532  2EE8               	decfsz	wreg,f,c
  1552   001534  D7FE               	bra	u2177
  1553   001536  2E42               	decfsz	??_move^0,f,c
  1554   001538  D7FC               	bra	u2177
  1555   00153A  2E43               	decfsz	(??_move+1)^0,f,c
  1556   00153C  D7FA               	bra	u2177
  1557   00153E  0000               	nop	
  1558   001540                     
  1559                           ;dc_motor.c: 96:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1560   001540  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1561   001544  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1562   001548  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1563   00154C  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1564   001550  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1565   001554  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1566   001558  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1567                           
  1568                           ;dc_motor.c: 97:     }
  1569   00155C  EF69  F00D         	goto	l478
  1570   001560                     l3263:
  1571                           
  1572                           ; BSR set to: 0
  1573   001560  0E02               	movlw	2
  1574   001562  19DC               	xorwf	move@color& (0+255),w,b
  1575   001564  A4D8               	btfss	status,2,c
  1576   001566  EFB7  F00A         	goto	u1971
  1577   00156A  EFB9  F00A         	goto	u1970
  1578   00156E                     u1971:
  1579   00156E  EF01  F00B         	goto	l3273
  1580   001572                     u1970:
  1581   001572                     
  1582                           ; BSR set to: 0
  1583                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1584   001572  C0D8  F020         	movff	move@mL,turnLeft@mL
  1585   001576  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1586   00157A  C0DA  F022         	movff	move@mR,turnLeft@mR
  1587   00157E  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1588   001582  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1589   001586  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1590   00158A  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1591   00158E  EC87  F011         	call	_turnLeft	;wreg free
  1592   001592                     
  1593                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1594   001592  0E05               	movlw	5
  1595   001594  6E43               	movwf	(??_move+1)^0,c
  1596   001596  0E0F               	movlw	15
  1597   001598  6E42               	movwf	??_move^0,c
  1598   00159A  0EF1               	movlw	241
  1599   00159C                     u2187:
  1600   00159C  2EE8               	decfsz	wreg,f,c
  1601   00159E  D7FE               	bra	u2187
  1602   0015A0  2E42               	decfsz	??_move^0,f,c
  1603   0015A2  D7FC               	bra	u2187
  1604   0015A4  2E43               	decfsz	(??_move+1)^0,f,c
  1605   0015A6  D7FA               	bra	u2187
  1606   0015A8  0000               	nop	
  1607   0015AA                     
  1608                           ;dc_motor.c: 102:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1609   0015AA  C0D8  F020         	movff	move@mL,turnLeft@mL
  1610   0015AE  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1611   0015B2  C0DA  F022         	movff	move@mR,turnLeft@mR
  1612   0015B6  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1613   0015BA  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1614   0015BE  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1615   0015C2  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1616   0015C6  EC87  F011         	call	_turnLeft	;wreg free
  1617                           
  1618                           ;dc_motor.c: 103:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1619   0015CA  0E05               	movlw	5
  1620   0015CC  6E43               	movwf	(??_move+1)^0,c
  1621   0015CE  0E0F               	movlw	15
  1622   0015D0  6E42               	movwf	??_move^0,c
  1623   0015D2  0EF1               	movlw	241
  1624   0015D4                     u2197:
  1625   0015D4  2EE8               	decfsz	wreg,f,c
  1626   0015D6  D7FE               	bra	u2197
  1627   0015D8  2E42               	decfsz	??_move^0,f,c
  1628   0015DA  D7FC               	bra	u2197
  1629   0015DC  2E43               	decfsz	(??_move+1)^0,f,c
  1630   0015DE  D7FA               	bra	u2197
  1631   0015E0  0000               	nop	
  1632   0015E2                     
  1633                           ;dc_motor.c: 104:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1634   0015E2  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1635   0015E6  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1636   0015EA  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1637   0015EE  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1638   0015F2  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1639   0015F6  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1640   0015FA  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1641                           
  1642                           ;dc_motor.c: 105:     }
  1643   0015FE  EF69  F00D         	goto	l478
  1644   001602                     l3273:
  1645                           
  1646                           ; BSR set to: 0
  1647   001602  0E03               	movlw	3
  1648   001604  19DC               	xorwf	move@color& (0+255),w,b
  1649   001606  A4D8               	btfss	status,2,c
  1650   001608  EF08  F00B         	goto	u1981
  1651   00160C  EF0A  F00B         	goto	u1980
  1652   001610                     u1981:
  1653   001610  EF8A  F00B         	goto	l3289
  1654   001614                     u1980:
  1655   001614                     
  1656                           ; BSR set to: 0
  1657                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1658   001614  C0D8  F020         	movff	move@mL,turnLeft@mL
  1659   001618  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1660   00161C  C0DA  F022         	movff	move@mR,turnLeft@mR
  1661   001620  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1662   001624  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1663   001628  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1664   00162C  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1665   001630  EC87  F011         	call	_turnLeft	;wreg free
  1666   001634                     
  1667                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1668   001634  0E05               	movlw	5
  1669   001636  6E43               	movwf	(??_move+1)^0,c
  1670   001638  0E0F               	movlw	15
  1671   00163A  6E42               	movwf	??_move^0,c
  1672   00163C  0EF1               	movlw	241
  1673   00163E                     u2207:
  1674   00163E  2EE8               	decfsz	wreg,f,c
  1675   001640  D7FE               	bra	u2207
  1676   001642  2E42               	decfsz	??_move^0,f,c
  1677   001644  D7FC               	bra	u2207
  1678   001646  2E43               	decfsz	(??_move+1)^0,f,c
  1679   001648  D7FA               	bra	u2207
  1680   00164A  0000               	nop	
  1681   00164C                     
  1682                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1683   00164C  C0D8  F020         	movff	move@mL,turnLeft@mL
  1684   001650  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1685   001654  C0DA  F022         	movff	move@mR,turnLeft@mR
  1686   001658  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1687   00165C  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1688   001660  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1689   001664  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1690   001668  EC87  F011         	call	_turnLeft	;wreg free
  1691                           
  1692                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1693   00166C  0E05               	movlw	5
  1694   00166E  6E43               	movwf	(??_move+1)^0,c
  1695   001670  0E0F               	movlw	15
  1696   001672  6E42               	movwf	??_move^0,c
  1697   001674  0EF1               	movlw	241
  1698   001676                     u2217:
  1699   001676  2EE8               	decfsz	wreg,f,c
  1700   001678  D7FE               	bra	u2217
  1701   00167A  2E42               	decfsz	??_move^0,f,c
  1702   00167C  D7FC               	bra	u2217
  1703   00167E  2E43               	decfsz	(??_move+1)^0,f,c
  1704   001680  D7FA               	bra	u2217
  1705   001682  0000               	nop	
  1706   001684                     
  1707                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1708   001684  C0D8  F020         	movff	move@mL,turnLeft@mL
  1709   001688  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1710   00168C  C0DA  F022         	movff	move@mR,turnLeft@mR
  1711   001690  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1712   001694  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1713   001698  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1714   00169C  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1715   0016A0  EC87  F011         	call	_turnLeft	;wreg free
  1716   0016A4                     
  1717                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1718   0016A4  0E05               	movlw	5
  1719   0016A6  6E43               	movwf	(??_move+1)^0,c
  1720   0016A8  0E0F               	movlw	15
  1721   0016AA  6E42               	movwf	??_move^0,c
  1722   0016AC  0EF1               	movlw	241
  1723   0016AE                     u2227:
  1724   0016AE  2EE8               	decfsz	wreg,f,c
  1725   0016B0  D7FE               	bra	u2227
  1726   0016B2  2E42               	decfsz	??_move^0,f,c
  1727   0016B4  D7FC               	bra	u2227
  1728   0016B6  2E43               	decfsz	(??_move+1)^0,f,c
  1729   0016B8  D7FA               	bra	u2227
  1730   0016BA  0000               	nop	
  1731                           
  1732                           ;dc_motor.c: 114:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1733   0016BC  C0D8  F020         	movff	move@mL,turnLeft@mL
  1734   0016C0  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1735   0016C4  C0DA  F022         	movff	move@mR,turnLeft@mR
  1736   0016C8  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1737   0016CC  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1738   0016D0  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1739   0016D4  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1740   0016D8  EC87  F011         	call	_turnLeft	;wreg free
  1741   0016DC                     
  1742                           ;dc_motor.c: 115:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1743   0016DC  0E05               	movlw	5
  1744   0016DE  6E43               	movwf	(??_move+1)^0,c
  1745   0016E0  0E0F               	movlw	15
  1746   0016E2  6E42               	movwf	??_move^0,c
  1747   0016E4  0EF1               	movlw	241
  1748   0016E6                     u2237:
  1749   0016E6  2EE8               	decfsz	wreg,f,c
  1750   0016E8  D7FE               	bra	u2237
  1751   0016EA  2E42               	decfsz	??_move^0,f,c
  1752   0016EC  D7FC               	bra	u2237
  1753   0016EE  2E43               	decfsz	(??_move+1)^0,f,c
  1754   0016F0  D7FA               	bra	u2237
  1755   0016F2  0000               	nop	
  1756   0016F4                     
  1757                           ;dc_motor.c: 116:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1758   0016F4  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1759   0016F8  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1760   0016FC  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1761   001700  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1762   001704  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1763   001708  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1764   00170C  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1765                           
  1766                           ;dc_motor.c: 117:     }
  1767   001710  EF69  F00D         	goto	l478
  1768   001714                     l3289:
  1769                           
  1770                           ; BSR set to: 0
  1771   001714  0E04               	movlw	4
  1772   001716  19DC               	xorwf	move@color& (0+255),w,b
  1773   001718  A4D8               	btfss	status,2,c
  1774   00171A  EF91  F00B         	goto	u1991
  1775   00171E  EF93  F00B         	goto	u1990
  1776   001722                     u1991:
  1777   001722  EFF7  F00B         	goto	l3301
  1778   001726                     u1990:
  1779   001726                     
  1780                           ; BSR set to: 0
  1781                           ;dc_motor.c: 120:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1782   001726  C0D8  F020         	movff	move@mL,reverseOneSquare@mL
  1783   00172A  C0D9  F021         	movff	move@mL+1,reverseOneSquare@mL+1
  1784   00172E  C0DA  F022         	movff	move@mR,reverseOneSquare@mR
  1785   001732  C0DB  F023         	movff	move@mR+1,reverseOneSquare@mR+1
  1786   001736  C0E2  F024         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1787   00173A  C0E3  F025         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1788   00173E  C0E4  F026         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1789   001742  ECA4  F00F         	call	_reverseOneSquare	;wreg free
  1790   001746                     
  1791                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1792   001746  0E05               	movlw	5
  1793   001748  6E43               	movwf	(??_move+1)^0,c
  1794   00174A  0E0F               	movlw	15
  1795   00174C  6E42               	movwf	??_move^0,c
  1796   00174E  0EF1               	movlw	241
  1797   001750                     u2247:
  1798   001750  2EE8               	decfsz	wreg,f,c
  1799   001752  D7FE               	bra	u2247
  1800   001754  2E42               	decfsz	??_move^0,f,c
  1801   001756  D7FC               	bra	u2247
  1802   001758  2E43               	decfsz	(??_move+1)^0,f,c
  1803   00175A  D7FA               	bra	u2247
  1804   00175C  0000               	nop	
  1805   00175E                     
  1806                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1807   00175E  C0D8  F020         	movff	move@mL,turnRight@mL
  1808   001762  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1809   001766  C0DA  F022         	movff	move@mR,turnRight@mR
  1810   00176A  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1811   00176E  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1812   001772  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1813   001776  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1814   00177A  EC9A  F010         	call	_turnRight	;wreg free
  1815                           
  1816                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1817   00177E  0E05               	movlw	5
  1818   001780  6E43               	movwf	(??_move+1)^0,c
  1819   001782  0E0F               	movlw	15
  1820   001784  6E42               	movwf	??_move^0,c
  1821   001786  0EF1               	movlw	241
  1822   001788                     u2257:
  1823   001788  2EE8               	decfsz	wreg,f,c
  1824   00178A  D7FE               	bra	u2257
  1825   00178C  2E42               	decfsz	??_move^0,f,c
  1826   00178E  D7FC               	bra	u2257
  1827   001790  2E43               	decfsz	(??_move+1)^0,f,c
  1828   001792  D7FA               	bra	u2257
  1829   001794  0000               	nop	
  1830   001796                     
  1831                           ;dc_motor.c: 124:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1832   001796  C0D8  F020         	movff	move@mL,turnRight@mL
  1833   00179A  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1834   00179E  C0DA  F022         	movff	move@mR,turnRight@mR
  1835   0017A2  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1836   0017A6  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1837   0017AA  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1838   0017AE  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1839   0017B2  EC9A  F010         	call	_turnRight	;wreg free
  1840   0017B6                     
  1841                           ;dc_motor.c: 125:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1842   0017B6  0E05               	movlw	5
  1843   0017B8  6E43               	movwf	(??_move+1)^0,c
  1844   0017BA  0E0F               	movlw	15
  1845   0017BC  6E42               	movwf	??_move^0,c
  1846   0017BE  0EF1               	movlw	241
  1847   0017C0                     u2267:
  1848   0017C0  2EE8               	decfsz	wreg,f,c
  1849   0017C2  D7FE               	bra	u2267
  1850   0017C4  2E42               	decfsz	??_move^0,f,c
  1851   0017C6  D7FC               	bra	u2267
  1852   0017C8  2E43               	decfsz	(??_move+1)^0,f,c
  1853   0017CA  D7FA               	bra	u2267
  1854   0017CC  0000               	nop	
  1855                           
  1856                           ;dc_motor.c: 126:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1857   0017CE  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1858   0017D2  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1859   0017D6  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1860   0017DA  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1861   0017DE  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1862   0017E2  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1863   0017E6  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1864                           
  1865                           ;dc_motor.c: 127:     }
  1866   0017EA  EF69  F00D         	goto	l478
  1867   0017EE                     l3301:
  1868                           
  1869                           ; BSR set to: 0
  1870   0017EE  0E05               	movlw	5
  1871   0017F0  19DC               	xorwf	move@color& (0+255),w,b
  1872   0017F2  A4D8               	btfss	status,2,c
  1873   0017F4  EFFE  F00B         	goto	u2001
  1874   0017F8  EF00  F00C         	goto	u2000
  1875   0017FC                     u2001:
  1876   0017FC  EF64  F00C         	goto	l3313
  1877   001800                     u2000:
  1878   001800                     
  1879                           ; BSR set to: 0
  1880                           ;dc_motor.c: 130:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  1881   001800  C0D8  F020         	movff	move@mL,reverseOneSquare@mL
  1882   001804  C0D9  F021         	movff	move@mL+1,reverseOneSquare@mL+1
  1883   001808  C0DA  F022         	movff	move@mR,reverseOneSquare@mR
  1884   00180C  C0DB  F023         	movff	move@mR+1,reverseOneSquare@mR+1
  1885   001810  C0E2  F024         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  1886   001814  C0E3  F025         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  1887   001818  C0E4  F026         	movff	move@straightRamp,reverseOneSquare@straightRamp
  1888   00181C  ECA4  F00F         	call	_reverseOneSquare	;wreg free
  1889   001820                     
  1890                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1891   001820  0E05               	movlw	5
  1892   001822  6E43               	movwf	(??_move+1)^0,c
  1893   001824  0E0F               	movlw	15
  1894   001826  6E42               	movwf	??_move^0,c
  1895   001828  0EF1               	movlw	241
  1896   00182A                     u2277:
  1897   00182A  2EE8               	decfsz	wreg,f,c
  1898   00182C  D7FE               	bra	u2277
  1899   00182E  2E42               	decfsz	??_move^0,f,c
  1900   001830  D7FC               	bra	u2277
  1901   001832  2E43               	decfsz	(??_move+1)^0,f,c
  1902   001834  D7FA               	bra	u2277
  1903   001836  0000               	nop	
  1904   001838                     
  1905                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1906   001838  C0D8  F020         	movff	move@mL,turnLeft@mL
  1907   00183C  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1908   001840  C0DA  F022         	movff	move@mR,turnLeft@mR
  1909   001844  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1910   001848  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1911   00184C  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1912   001850  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1913   001854  EC87  F011         	call	_turnLeft	;wreg free
  1914                           
  1915                           ;dc_motor.c: 133:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1916   001858  0E05               	movlw	5
  1917   00185A  6E43               	movwf	(??_move+1)^0,c
  1918   00185C  0E0F               	movlw	15
  1919   00185E  6E42               	movwf	??_move^0,c
  1920   001860  0EF1               	movlw	241
  1921   001862                     u2287:
  1922   001862  2EE8               	decfsz	wreg,f,c
  1923   001864  D7FE               	bra	u2287
  1924   001866  2E42               	decfsz	??_move^0,f,c
  1925   001868  D7FC               	bra	u2287
  1926   00186A  2E43               	decfsz	(??_move+1)^0,f,c
  1927   00186C  D7FA               	bra	u2287
  1928   00186E  0000               	nop	
  1929   001870                     
  1930                           ;dc_motor.c: 134:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  1931   001870  C0D8  F020         	movff	move@mL,turnLeft@mL
  1932   001874  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  1933   001878  C0DA  F022         	movff	move@mR,turnLeft@mR
  1934   00187C  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  1935   001880  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  1936   001884  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  1937   001888  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  1938   00188C  EC87  F011         	call	_turnLeft	;wreg free
  1939   001890                     
  1940                           ;dc_motor.c: 135:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1941   001890  0E05               	movlw	5
  1942   001892  6E43               	movwf	(??_move+1)^0,c
  1943   001894  0E0F               	movlw	15
  1944   001896  6E42               	movwf	??_move^0,c
  1945   001898  0EF1               	movlw	241
  1946   00189A                     u2297:
  1947   00189A  2EE8               	decfsz	wreg,f,c
  1948   00189C  D7FE               	bra	u2297
  1949   00189E  2E42               	decfsz	??_move^0,f,c
  1950   0018A0  D7FC               	bra	u2297
  1951   0018A2  2E43               	decfsz	(??_move+1)^0,f,c
  1952   0018A4  D7FA               	bra	u2297
  1953   0018A6  0000               	nop	
  1954                           
  1955                           ;dc_motor.c: 136:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  1956   0018A8  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  1957   0018AC  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  1958   0018B0  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  1959   0018B4  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  1960   0018B8  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  1961   0018BC  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  1962   0018C0  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  1963                           
  1964                           ;dc_motor.c: 137:     }
  1965   0018C4  EF69  F00D         	goto	l478
  1966   0018C8                     l3313:
  1967                           
  1968                           ; BSR set to: 0
  1969   0018C8  0E06               	movlw	6
  1970   0018CA  19DC               	xorwf	move@color& (0+255),w,b
  1971   0018CC  A4D8               	btfss	status,2,c
  1972   0018CE  EF6B  F00C         	goto	u2011
  1973   0018D2  EF6D  F00C         	goto	u2010
  1974   0018D6                     u2011:
  1975   0018D6  EFD1  F00C         	goto	l3325
  1976   0018DA                     u2010:
  1977   0018DA                     
  1978                           ; BSR set to: 0
  1979                           ;dc_motor.c: 140:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  1980   0018DA  C0D8  F020         	movff	move@mL,turnRight@mL
  1981   0018DE  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  1982   0018E2  C0DA  F022         	movff	move@mR,turnRight@mR
  1983   0018E6  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  1984   0018EA  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  1985   0018EE  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  1986   0018F2  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  1987   0018F6  EC9A  F010         	call	_turnRight	;wreg free
  1988   0018FA                     
  1989                           ;dc_motor.c: 141:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1990   0018FA  0E05               	movlw	5
  1991   0018FC  6E43               	movwf	(??_move+1)^0,c
  1992   0018FE  0E0F               	movlw	15
  1993   001900  6E42               	movwf	??_move^0,c
  1994   001902  0EF1               	movlw	241
  1995   001904                     u2307:
  1996   001904  2EE8               	decfsz	wreg,f,c
  1997   001906  D7FE               	bra	u2307
  1998   001908  2E42               	decfsz	??_move^0,f,c
  1999   00190A  D7FC               	bra	u2307
  2000   00190C  2E43               	decfsz	(??_move+1)^0,f,c
  2001   00190E  D7FA               	bra	u2307
  2002   001910  0000               	nop	
  2003   001912                     
  2004                           ;dc_motor.c: 142:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2005   001912  C0D8  F020         	movff	move@mL,turnRight@mL
  2006   001916  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  2007   00191A  C0DA  F022         	movff	move@mR,turnRight@mR
  2008   00191E  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  2009   001922  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  2010   001926  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  2011   00192A  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  2012   00192E  EC9A  F010         	call	_turnRight	;wreg free
  2013                           
  2014                           ;dc_motor.c: 143:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2015   001932  0E05               	movlw	5
  2016   001934  6E43               	movwf	(??_move+1)^0,c
  2017   001936  0E0F               	movlw	15
  2018   001938  6E42               	movwf	??_move^0,c
  2019   00193A  0EF1               	movlw	241
  2020   00193C                     u2317:
  2021   00193C  2EE8               	decfsz	wreg,f,c
  2022   00193E  D7FE               	bra	u2317
  2023   001940  2E42               	decfsz	??_move^0,f,c
  2024   001942  D7FC               	bra	u2317
  2025   001944  2E43               	decfsz	(??_move+1)^0,f,c
  2026   001946  D7FA               	bra	u2317
  2027   001948  0000               	nop	
  2028   00194A                     
  2029                           ;dc_motor.c: 144:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2030   00194A  C0D8  F020         	movff	move@mL,turnRight@mL
  2031   00194E  C0D9  F021         	movff	move@mL+1,turnRight@mL+1
  2032   001952  C0DA  F022         	movff	move@mR,turnRight@mR
  2033   001956  C0DB  F023         	movff	move@mR+1,turnRight@mR+1
  2034   00195A  C0E5  F024         	movff	move@turnSpeed,turnRight@turnSpeed
  2035   00195E  C0E6  F025         	movff	move@turnDuration,turnRight@turnDuration
  2036   001962  C0E7  F026         	movff	move@turnRamp,turnRight@turnRamp
  2037   001966  EC9A  F010         	call	_turnRight	;wreg free
  2038   00196A                     
  2039                           ;dc_motor.c: 145:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2040   00196A  0E05               	movlw	5
  2041   00196C  6E43               	movwf	(??_move+1)^0,c
  2042   00196E  0E0F               	movlw	15
  2043   001970  6E42               	movwf	??_move^0,c
  2044   001972  0EF1               	movlw	241
  2045   001974                     u2327:
  2046   001974  2EE8               	decfsz	wreg,f,c
  2047   001976  D7FE               	bra	u2327
  2048   001978  2E42               	decfsz	??_move^0,f,c
  2049   00197A  D7FC               	bra	u2327
  2050   00197C  2E43               	decfsz	(??_move+1)^0,f,c
  2051   00197E  D7FA               	bra	u2327
  2052   001980  0000               	nop	
  2053                           
  2054                           ;dc_motor.c: 146:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2055   001982  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  2056   001986  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  2057   00198A  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  2058   00198E  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  2059   001992  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2060   001996  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2061   00199A  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  2062                           
  2063                           ;dc_motor.c: 147:     }
  2064   00199E  EF69  F00D         	goto	l478
  2065   0019A2                     l3325:
  2066                           
  2067                           ; BSR set to: 0
  2068   0019A2  0E07               	movlw	7
  2069   0019A4  19DC               	xorwf	move@color& (0+255),w,b
  2070   0019A6  A4D8               	btfss	status,2,c
  2071   0019A8  EFD8  F00C         	goto	u2021
  2072   0019AC  EFDA  F00C         	goto	u2020
  2073   0019B0                     u2021:
  2074   0019B0  EF3E  F00D         	goto	l3337
  2075   0019B4                     u2020:
  2076   0019B4                     
  2077                           ; BSR set to: 0
  2078                           ;dc_motor.c: 150:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2079   0019B4  C0D8  F020         	movff	move@mL,turnLeft@mL
  2080   0019B8  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2081   0019BC  C0DA  F022         	movff	move@mR,turnLeft@mR
  2082   0019C0  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2083   0019C4  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2084   0019C8  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2085   0019CC  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2086   0019D0  EC87  F011         	call	_turnLeft	;wreg free
  2087   0019D4                     
  2088                           ;dc_motor.c: 151:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2089   0019D4  0E05               	movlw	5
  2090   0019D6  6E43               	movwf	(??_move+1)^0,c
  2091   0019D8  0E0F               	movlw	15
  2092   0019DA  6E42               	movwf	??_move^0,c
  2093   0019DC  0EF1               	movlw	241
  2094   0019DE                     u2337:
  2095   0019DE  2EE8               	decfsz	wreg,f,c
  2096   0019E0  D7FE               	bra	u2337
  2097   0019E2  2E42               	decfsz	??_move^0,f,c
  2098   0019E4  D7FC               	bra	u2337
  2099   0019E6  2E43               	decfsz	(??_move+1)^0,f,c
  2100   0019E8  D7FA               	bra	u2337
  2101   0019EA  0000               	nop	
  2102   0019EC                     
  2103                           ;dc_motor.c: 152:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2104   0019EC  C0D8  F020         	movff	move@mL,turnLeft@mL
  2105   0019F0  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2106   0019F4  C0DA  F022         	movff	move@mR,turnLeft@mR
  2107   0019F8  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2108   0019FC  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2109   001A00  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2110   001A04  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2111   001A08  EC87  F011         	call	_turnLeft	;wreg free
  2112                           
  2113                           ;dc_motor.c: 153:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2114   001A0C  0E05               	movlw	5
  2115   001A0E  6E43               	movwf	(??_move+1)^0,c
  2116   001A10  0E0F               	movlw	15
  2117   001A12  6E42               	movwf	??_move^0,c
  2118   001A14  0EF1               	movlw	241
  2119   001A16                     u2347:
  2120   001A16  2EE8               	decfsz	wreg,f,c
  2121   001A18  D7FE               	bra	u2347
  2122   001A1A  2E42               	decfsz	??_move^0,f,c
  2123   001A1C  D7FC               	bra	u2347
  2124   001A1E  2E43               	decfsz	(??_move+1)^0,f,c
  2125   001A20  D7FA               	bra	u2347
  2126   001A22  0000               	nop	
  2127   001A24                     
  2128                           ;dc_motor.c: 154:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2129   001A24  C0D8  F020         	movff	move@mL,turnLeft@mL
  2130   001A28  C0D9  F021         	movff	move@mL+1,turnLeft@mL+1
  2131   001A2C  C0DA  F022         	movff	move@mR,turnLeft@mR
  2132   001A30  C0DB  F023         	movff	move@mR+1,turnLeft@mR+1
  2133   001A34  C0E5  F024         	movff	move@turnSpeed,turnLeft@turnSpeed
  2134   001A38  C0E6  F025         	movff	move@turnDuration,turnLeft@turnDuration
  2135   001A3C  C0E7  F026         	movff	move@turnRamp,turnLeft@turnRamp
  2136   001A40  EC87  F011         	call	_turnLeft	;wreg free
  2137   001A44                     
  2138                           ;dc_motor.c: 155:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2139   001A44  0E05               	movlw	5
  2140   001A46  6E43               	movwf	(??_move+1)^0,c
  2141   001A48  0E0F               	movlw	15
  2142   001A4A  6E42               	movwf	??_move^0,c
  2143   001A4C  0EF1               	movlw	241
  2144   001A4E                     u2357:
  2145   001A4E  2EE8               	decfsz	wreg,f,c
  2146   001A50  D7FE               	bra	u2357
  2147   001A52  2E42               	decfsz	??_move^0,f,c
  2148   001A54  D7FC               	bra	u2357
  2149   001A56  2E43               	decfsz	(??_move+1)^0,f,c
  2150   001A58  D7FA               	bra	u2357
  2151   001A5A  0000               	nop	
  2152                           
  2153                           ;dc_motor.c: 156:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2154   001A5C  C0D8  F020         	movff	move@mL,fullSpeedAhead@mL
  2155   001A60  C0D9  F021         	movff	move@mL+1,fullSpeedAhead@mL+1
  2156   001A64  C0DA  F022         	movff	move@mR,fullSpeedAhead@mR
  2157   001A68  C0DB  F023         	movff	move@mR+1,fullSpeedAhead@mR+1
  2158   001A6C  C0E2  F024         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2159   001A70  C0E4  F025         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2160   001A74  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  2161                           
  2162                           ;dc_motor.c: 157:     }
  2163   001A78  EF69  F00D         	goto	l478
  2164   001A7C                     l3337:
  2165                           
  2166                           ; BSR set to: 0
  2167   001A7C  0E08               	movlw	8
  2168   001A7E  19DC               	xorwf	move@color& (0+255),w,b
  2169   001A80  A4D8               	btfss	status,2,c
  2170   001A82  EF45  F00D         	goto	u2031
  2171   001A86  EF47  F00D         	goto	u2030
  2172   001A8A                     u2031:
  2173   001A8A  EF69  F00D         	goto	l472
  2174   001A8E                     u2030:
  2175   001A8E                     
  2176                           ; BSR set to: 0
  2177                           ;dc_motor.c: 160:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  2178   001A8E  C0D8  F02E         	movff	move@mL,returnHome@mL
  2179   001A92  C0D9  F02F         	movff	move@mL+1,returnHome@mL+1
  2180   001A96  C0DA  F030         	movff	move@mR,returnHome@mR
  2181   001A9A  C0DB  F031         	movff	move@mR+1,returnHome@mR+1
  2182   001A9E  C0DD  F032         	movff	move@moveSequence,returnHome@moveSequence
  2183   001AA2  C0DE  F033         	movff	move@moveSequence+1,returnHome@moveSequence+1
  2184   001AA6  C0DF  F034         	movff	move@straightTime,returnHome@straightTime
  2185   001AAA  C0E0  F035         	movff	move@straightTime+1,returnHome@straightTime+1
  2186   001AAE  C0E1  F036         	movff	move@curMove,returnHome@curMove
  2187   001AB2  C0E2  F037         	movff	move@straightSpeed,returnHome@straightSpeed
  2188   001AB6  C0E3  F038         	movff	move@reverseDuration,returnHome@reverseDuration
  2189   001ABA  C0E4  F039         	movff	move@straightRamp,returnHome@straightRamp
  2190   001ABE  C0E5  F03A         	movff	move@turnSpeed,returnHome@turnSpeed
  2191   001AC2  C0E6  F03B         	movff	move@turnDuration,returnHome@turnDuration
  2192   001AC6  C0E7  F03C         	movff	move@turnRamp,returnHome@turnRamp
  2193   001ACA  EC01  F007         	call	_returnHome	;wreg free
  2194   001ACE  EF69  F00D         	goto	l478
  2195   001AD2                     l472:
  2196   001AD2                     l478:
  2197   001AD2  0012               	return		;funcret
  2198   001AD4                     __end_of_move:
  2199                           	callstack 0
  2200                           
  2201 ;; *************** function _returnHome *****************
  2202 ;; Defined at:
  2203 ;;		line 164 in file "dc_motor.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2206 ;;		 -> main@motorL(10), 
  2207 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2208 ;;		 -> main@motorR(10), 
  2209 ;;  moveSequence    2   49[COMRAM] PTR unsigned char 
  2210 ;;		 -> main@moveSequence(40), 
  2211 ;;  straightTime    2   51[COMRAM] PTR unsigned int 
  2212 ;;		 -> main@straightTime(82), 
  2213 ;;  curMove         1   53[COMRAM] unsigned char 
  2214 ;;  straightSpee    1   54[COMRAM] unsigned char 
  2215 ;;  reverseDurat    1   55[COMRAM] unsigned char 
  2216 ;;  straightRamp    1   56[COMRAM] unsigned char 
  2217 ;;  turnSpeed       1   57[COMRAM] unsigned char 
  2218 ;;  turnDuration    1   58[COMRAM] unsigned char 
  2219 ;;  turnRamp        1   59[COMRAM] unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  i               1   64[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2231 ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;Total ram usage:       20 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 8
  2238 ;; This function calls:
  2239 ;;		_fullSpeedAhead
  2240 ;;		_get16bitTMR0val
  2241 ;;		_resetTimer
  2242 ;;		_reverseOneSquare
  2243 ;;		_stop
  2244 ;;		_turnLeft
  2245 ;;		_turnRight
  2246 ;; This function is called by:
  2247 ;;		_move
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text3
  2252   000E02                     __ptext3:
  2253                           	callstack 0
  2254   000E02                     _returnHome:
  2255                           	callstack 21
  2256   000E02                     
  2257                           ;dc_motor.c: 164: void returnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSequenc
      +                          e, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reverseDu
      +                          ration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsigned
      +                           char turnRamp);dc_motor.c: 165: {;dc_motor.c: 166:     turnLeft(mL, mR, turnSpeed, turn
      +                          Duration, turnRamp);
  2258   000E02  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2259   000E06  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2260   000E0A  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2261   000E0E  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2262   000E12  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2263   000E16  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2264   000E1A  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2265   000E1E  EC87  F011         	call	_turnLeft	;wreg free
  2266   000E22                     
  2267                           ;dc_motor.c: 167:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2268   000E22  0E05               	movlw	5
  2269   000E24  6E3E               	movwf	(??_returnHome+1)^0,c
  2270   000E26  0E0F               	movlw	15
  2271   000E28  6E3D               	movwf	??_returnHome^0,c
  2272   000E2A  0EF1               	movlw	241
  2273   000E2C                     u2367:
  2274   000E2C  2EE8               	decfsz	wreg,f,c
  2275   000E2E  D7FE               	bra	u2367
  2276   000E30  2E3D               	decfsz	??_returnHome^0,f,c
  2277   000E32  D7FC               	bra	u2367
  2278   000E34  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2279   000E36  D7FA               	bra	u2367
  2280   000E38  0000               	nop	
  2281   000E3A                     
  2282                           ;dc_motor.c: 168:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2283   000E3A  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2284   000E3E  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2285   000E42  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2286   000E46  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2287   000E4A  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2288   000E4E  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2289   000E52  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2290   000E56  EC87  F011         	call	_turnLeft	;wreg free
  2291                           
  2292                           ;dc_motor.c: 169:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2293   000E5A  0E05               	movlw	5
  2294   000E5C  6E3E               	movwf	(??_returnHome+1)^0,c
  2295   000E5E  0E0F               	movlw	15
  2296   000E60  6E3D               	movwf	??_returnHome^0,c
  2297   000E62  0EF1               	movlw	241
  2298   000E64                     u2377:
  2299   000E64  2EE8               	decfsz	wreg,f,c
  2300   000E66  D7FE               	bra	u2377
  2301   000E68  2E3D               	decfsz	??_returnHome^0,f,c
  2302   000E6A  D7FC               	bra	u2377
  2303   000E6C  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2304   000E6E  D7FA               	bra	u2377
  2305   000E70  0000               	nop	
  2306   000E72                     
  2307                           ;dc_motor.c: 170:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2308   000E72  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2309   000E76  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2310   000E7A  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2311   000E7E  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2312   000E82  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2313   000E86  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2314   000E8A  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2315   000E8E  EC87  F011         	call	_turnLeft	;wreg free
  2316   000E92                     
  2317                           ;dc_motor.c: 171:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2318   000E92  0E05               	movlw	5
  2319   000E94  6E3E               	movwf	(??_returnHome+1)^0,c
  2320   000E96  0E0F               	movlw	15
  2321   000E98  6E3D               	movwf	??_returnHome^0,c
  2322   000E9A  0EF1               	movlw	241
  2323   000E9C                     u2387:
  2324   000E9C  2EE8               	decfsz	wreg,f,c
  2325   000E9E  D7FE               	bra	u2387
  2326   000EA0  2E3D               	decfsz	??_returnHome^0,f,c
  2327   000EA2  D7FC               	bra	u2387
  2328   000EA4  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2329   000EA6  D7FA               	bra	u2387
  2330   000EA8  0000               	nop	
  2331                           
  2332                           ;dc_motor.c: 172:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2333   000EAA  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2334   000EAE  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2335   000EB2  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2336   000EB6  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2337   000EBA  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2338   000EBE  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2339   000EC2  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2340   000EC6  EC87  F011         	call	_turnLeft	;wreg free
  2341   000ECA                     
  2342                           ;dc_motor.c: 173:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2343   000ECA  0E05               	movlw	5
  2344   000ECC  6E3E               	movwf	(??_returnHome+1)^0,c
  2345   000ECE  0E0F               	movlw	15
  2346   000ED0  6E3D               	movwf	??_returnHome^0,c
  2347   000ED2  0EF1               	movlw	241
  2348   000ED4                     u2397:
  2349   000ED4  2EE8               	decfsz	wreg,f,c
  2350   000ED6  D7FE               	bra	u2397
  2351   000ED8  2E3D               	decfsz	??_returnHome^0,f,c
  2352   000EDA  D7FC               	bra	u2397
  2353   000EDC  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2354   000EDE  D7FA               	bra	u2397
  2355   000EE0  0000               	nop	
  2356   000EE2                     
  2357                           ;dc_motor.c: 174:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2358   000EE2  C02E  F020         	movff	returnHome@mL,fullSpeedAhead@mL
  2359   000EE6  C02F  F021         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  2360   000EEA  C030  F022         	movff	returnHome@mR,fullSpeedAhead@mR
  2361   000EEE  C031  F023         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  2362   000EF2  C037  F024         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  2363   000EF6  C039  F025         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  2364   000EFA  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  2365   000EFE                     
  2366                           ;dc_motor.c: 175:     resetTimer();
  2367   000EFE  ECAD  F018         	call	_resetTimer	;wreg free
  2368   000F02                     l2627:
  2369   000F02  5036               	movf	returnHome@curMove^0,w,c
  2370   000F04  0D02               	mullw	2
  2371   000F06  CFF3 F03D          	movff	prodl,??_returnHome
  2372   000F0A  CFF4 F03E          	movff	prodh,??_returnHome+1
  2373   000F0E  503D               	movf	??_returnHome^0,w,c
  2374   000F10  2434               	addwf	returnHome@straightTime^0,w,c
  2375   000F12  6ED9               	movwf	fsr2l,c
  2376   000F14  503E               	movf	(??_returnHome+1)^0,w,c
  2377   000F16  2035               	addwfc	(returnHome@straightTime+1)^0,w,c
  2378   000F18  6EDA               	movwf	fsr2h,c
  2379   000F1A  ECAB  F017         	call	_get16bitTMR0val	;wreg free
  2380   000F1E  50DE               	movf	postinc2,w,c
  2381   000F20  5C0D               	subwf	?_get16bitTMR0val^0,w,c
  2382   000F22  50DE               	movf	postinc2,w,c
  2383   000F24  580E               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  2384   000F26  A0D8               	btfss	status,0,c
  2385   000F28  EF98  F007         	goto	u1311
  2386   000F2C  EF9A  F007         	goto	u1310
  2387   000F30                     u1311:
  2388   000F30  EF81  F007         	goto	l2627
  2389   000F34                     u1310:
  2390   000F34                     
  2391                           ;dc_motor.c: 177:     stop(mL, mR, straightRamp);
  2392   000F34  C02E  F020         	movff	returnHome@mL,stop@mL
  2393   000F38  C02F  F021         	movff	returnHome@mL+1,stop@mL+1
  2394   000F3C  C030  F022         	movff	returnHome@mR,stop@mR
  2395   000F40  C031  F023         	movff	returnHome@mR+1,stop@mR+1
  2396   000F44  C039  F024         	movff	returnHome@straightRamp,stop@straightRamp
  2397   000F48  EC55  F014         	call	_stop	;wreg free
  2398   000F4C                     
  2399                           ;dc_motor.c: 179:     char i=curMove;
  2400   000F4C  C036  F041         	movff	returnHome@curMove,returnHome@i
  2401                           
  2402                           ;dc_motor.c: 180:     while (i>0) {
  2403   000F50  EF56  F00A         	goto	l2719
  2404   000F54                     l2633:
  2405                           
  2406                           ;dc_motor.c: 181:         i--;
  2407   000F54  0641               	decf	returnHome@i^0,f,c
  2408   000F56                     
  2409                           ;dc_motor.c: 183:         if (moveSequence[i] == 1) {
  2410   000F56  5041               	movf	returnHome@i^0,w,c
  2411   000F58  2432               	addwf	returnHome@moveSequence^0,w,c
  2412   000F5A  6ED9               	movwf	fsr2l,c
  2413   000F5C  0E00               	movlw	0
  2414   000F5E  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2415   000F60  6EDA               	movwf	fsr2h,c
  2416   000F62  04DE               	decf	postinc2,w,c
  2417   000F64  A4D8               	btfss	status,2,c
  2418   000F66  EFB7  F007         	goto	u1321
  2419   000F6A  EFB9  F007         	goto	u1320
  2420   000F6E                     u1321:
  2421   000F6E  EFF3  F007         	goto	l2643
  2422   000F72                     u1320:
  2423   000F72                     
  2424                           ;dc_motor.c: 184:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2425   000F72  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2426   000F76  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2427   000F7A  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2428   000F7E  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2429   000F82  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2430   000F86  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2431   000F8A  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2432   000F8E  EC87  F011         	call	_turnLeft	;wreg free
  2433   000F92                     
  2434                           ;dc_motor.c: 185:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2435   000F92  0E05               	movlw	5
  2436   000F94  6E3E               	movwf	(??_returnHome+1)^0,c
  2437   000F96  0E0F               	movlw	15
  2438   000F98  6E3D               	movwf	??_returnHome^0,c
  2439   000F9A  0EF1               	movlw	241
  2440   000F9C                     u2407:
  2441   000F9C  2EE8               	decfsz	wreg,f,c
  2442   000F9E  D7FE               	bra	u2407
  2443   000FA0  2E3D               	decfsz	??_returnHome^0,f,c
  2444   000FA2  D7FC               	bra	u2407
  2445   000FA4  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2446   000FA6  D7FA               	bra	u2407
  2447   000FA8  0000               	nop	
  2448   000FAA                     
  2449                           ;dc_motor.c: 186:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2450   000FAA  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2451   000FAE  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2452   000FB2  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2453   000FB6  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2454   000FBA  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2455   000FBE  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2456   000FC2  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2457   000FC6  EC87  F011         	call	_turnLeft	;wreg free
  2458                           
  2459                           ;dc_motor.c: 187:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2460   000FCA  0E05               	movlw	5
  2461   000FCC  6E3E               	movwf	(??_returnHome+1)^0,c
  2462   000FCE  0E0F               	movlw	15
  2463   000FD0  6E3D               	movwf	??_returnHome^0,c
  2464   000FD2  0EF1               	movlw	241
  2465   000FD4                     u2417:
  2466   000FD4  2EE8               	decfsz	wreg,f,c
  2467   000FD6  D7FE               	bra	u2417
  2468   000FD8  2E3D               	decfsz	??_returnHome^0,f,c
  2469   000FDA  D7FC               	bra	u2417
  2470   000FDC  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2471   000FDE  D7FA               	bra	u2417
  2472   000FE0  0000               	nop	
  2473                           
  2474                           ;dc_motor.c: 188:         }
  2475   000FE2  EF21  F00A         	goto	l487
  2476   000FE6                     l2643:
  2477   000FE6  5041               	movf	returnHome@i^0,w,c
  2478   000FE8  2432               	addwf	returnHome@moveSequence^0,w,c
  2479   000FEA  6ED9               	movwf	fsr2l,c
  2480   000FEC  0E00               	movlw	0
  2481   000FEE  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2482   000FF0  6EDA               	movwf	fsr2h,c
  2483   000FF2  0E02               	movlw	2
  2484   000FF4  18DE               	xorwf	postinc2,w,c
  2485   000FF6  A4D8               	btfss	status,2,c
  2486   000FF8  EF00  F008         	goto	u1331
  2487   000FFC  EF02  F008         	goto	u1330
  2488   001000                     u1331:
  2489   001000  EF3C  F008         	goto	l2651
  2490   001004                     u1330:
  2491   001004                     
  2492                           ;dc_motor.c: 191:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2493   001004  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2494   001008  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2495   00100C  C030  F022         	movff	returnHome@mR,turnRight@mR
  2496   001010  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2497   001014  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2498   001018  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2499   00101C  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2500   001020  EC9A  F010         	call	_turnRight	;wreg free
  2501   001024                     
  2502                           ;dc_motor.c: 192:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2503   001024  0E05               	movlw	5
  2504   001026  6E3E               	movwf	(??_returnHome+1)^0,c
  2505   001028  0E0F               	movlw	15
  2506   00102A  6E3D               	movwf	??_returnHome^0,c
  2507   00102C  0EF1               	movlw	241
  2508   00102E                     u2427:
  2509   00102E  2EE8               	decfsz	wreg,f,c
  2510   001030  D7FE               	bra	u2427
  2511   001032  2E3D               	decfsz	??_returnHome^0,f,c
  2512   001034  D7FC               	bra	u2427
  2513   001036  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2514   001038  D7FA               	bra	u2427
  2515   00103A  0000               	nop	
  2516   00103C                     
  2517                           ;dc_motor.c: 193:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2518   00103C  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2519   001040  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2520   001044  C030  F022         	movff	returnHome@mR,turnRight@mR
  2521   001048  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2522   00104C  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2523   001050  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2524   001054  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2525   001058  EC9A  F010         	call	_turnRight	;wreg free
  2526                           
  2527                           ;dc_motor.c: 194:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2528   00105C  0E05               	movlw	5
  2529   00105E  6E3E               	movwf	(??_returnHome+1)^0,c
  2530   001060  0E0F               	movlw	15
  2531   001062  6E3D               	movwf	??_returnHome^0,c
  2532   001064  0EF1               	movlw	241
  2533   001066                     u2437:
  2534   001066  2EE8               	decfsz	wreg,f,c
  2535   001068  D7FE               	bra	u2437
  2536   00106A  2E3D               	decfsz	??_returnHome^0,f,c
  2537   00106C  D7FC               	bra	u2437
  2538   00106E  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2539   001070  D7FA               	bra	u2437
  2540   001072  0000               	nop	
  2541                           
  2542                           ;dc_motor.c: 195:         }
  2543   001074  EF21  F00A         	goto	l487
  2544   001078                     l2651:
  2545   001078  5041               	movf	returnHome@i^0,w,c
  2546   00107A  2432               	addwf	returnHome@moveSequence^0,w,c
  2547   00107C  6ED9               	movwf	fsr2l,c
  2548   00107E  0E00               	movlw	0
  2549   001080  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2550   001082  6EDA               	movwf	fsr2h,c
  2551   001084  0E03               	movlw	3
  2552   001086  18DE               	xorwf	postinc2,w,c
  2553   001088  A4D8               	btfss	status,2,c
  2554   00108A  EF49  F008         	goto	u1341
  2555   00108E  EF4B  F008         	goto	u1340
  2556   001092                     u1341:
  2557   001092  EFBD  F008         	goto	l2665
  2558   001096                     u1340:
  2559   001096                     
  2560                           ;dc_motor.c: 198:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2561   001096  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2562   00109A  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2563   00109E  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2564   0010A2  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2565   0010A6  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2566   0010AA  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2567   0010AE  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2568   0010B2  EC87  F011         	call	_turnLeft	;wreg free
  2569   0010B6                     
  2570                           ;dc_motor.c: 199:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2571   0010B6  0E05               	movlw	5
  2572   0010B8  6E3E               	movwf	(??_returnHome+1)^0,c
  2573   0010BA  0E0F               	movlw	15
  2574   0010BC  6E3D               	movwf	??_returnHome^0,c
  2575   0010BE  0EF1               	movlw	241
  2576   0010C0                     u2447:
  2577   0010C0  2EE8               	decfsz	wreg,f,c
  2578   0010C2  D7FE               	bra	u2447
  2579   0010C4  2E3D               	decfsz	??_returnHome^0,f,c
  2580   0010C6  D7FC               	bra	u2447
  2581   0010C8  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2582   0010CA  D7FA               	bra	u2447
  2583   0010CC  0000               	nop	
  2584   0010CE                     
  2585                           ;dc_motor.c: 200:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2586   0010CE  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2587   0010D2  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2588   0010D6  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2589   0010DA  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2590   0010DE  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2591   0010E2  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2592   0010E6  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2593   0010EA  EC87  F011         	call	_turnLeft	;wreg free
  2594                           
  2595                           ;dc_motor.c: 201:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2596   0010EE  0E05               	movlw	5
  2597   0010F0  6E3E               	movwf	(??_returnHome+1)^0,c
  2598   0010F2  0E0F               	movlw	15
  2599   0010F4  6E3D               	movwf	??_returnHome^0,c
  2600   0010F6  0EF1               	movlw	241
  2601   0010F8                     u2457:
  2602   0010F8  2EE8               	decfsz	wreg,f,c
  2603   0010FA  D7FE               	bra	u2457
  2604   0010FC  2E3D               	decfsz	??_returnHome^0,f,c
  2605   0010FE  D7FC               	bra	u2457
  2606   001100  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2607   001102  D7FA               	bra	u2457
  2608   001104  0000               	nop	
  2609   001106                     
  2610                           ;dc_motor.c: 202:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2611   001106  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2612   00110A  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2613   00110E  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2614   001112  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2615   001116  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2616   00111A  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2617   00111E  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2618   001122  EC87  F011         	call	_turnLeft	;wreg free
  2619   001126                     
  2620                           ;dc_motor.c: 203:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2621   001126  0E05               	movlw	5
  2622   001128  6E3E               	movwf	(??_returnHome+1)^0,c
  2623   00112A  0E0F               	movlw	15
  2624   00112C  6E3D               	movwf	??_returnHome^0,c
  2625   00112E  0EF1               	movlw	241
  2626   001130                     u2467:
  2627   001130  2EE8               	decfsz	wreg,f,c
  2628   001132  D7FE               	bra	u2467
  2629   001134  2E3D               	decfsz	??_returnHome^0,f,c
  2630   001136  D7FC               	bra	u2467
  2631   001138  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2632   00113A  D7FA               	bra	u2467
  2633   00113C  0000               	nop	
  2634                           
  2635                           ;dc_motor.c: 204:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2636   00113E  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2637   001142  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2638   001146  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2639   00114A  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2640   00114E  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2641   001152  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2642   001156  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2643   00115A  EC87  F011         	call	_turnLeft	;wreg free
  2644   00115E                     l2663:
  2645                           
  2646                           ;dc_motor.c: 205:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2647   00115E  0E05               	movlw	5
  2648   001160  6E3E               	movwf	(??_returnHome+1)^0,c
  2649   001162  0E0F               	movlw	15
  2650   001164  6E3D               	movwf	??_returnHome^0,c
  2651   001166  0EF1               	movlw	241
  2652   001168                     u2477:
  2653   001168  2EE8               	decfsz	wreg,f,c
  2654   00116A  D7FE               	bra	u2477
  2655   00116C  2E3D               	decfsz	??_returnHome^0,f,c
  2656   00116E  D7FC               	bra	u2477
  2657   001170  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2658   001172  D7FA               	bra	u2477
  2659   001174  0000               	nop	
  2660                           
  2661                           ;dc_motor.c: 206:         }
  2662   001176  EF21  F00A         	goto	l487
  2663   00117A                     l2665:
  2664   00117A  5041               	movf	returnHome@i^0,w,c
  2665   00117C  2432               	addwf	returnHome@moveSequence^0,w,c
  2666   00117E  6ED9               	movwf	fsr2l,c
  2667   001180  0E00               	movlw	0
  2668   001182  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2669   001184  6EDA               	movwf	fsr2h,c
  2670   001186  0E04               	movlw	4
  2671   001188  18DE               	xorwf	postinc2,w,c
  2672   00118A  A4D8               	btfss	status,2,c
  2673   00118C  EFCA  F008         	goto	u1351
  2674   001190  EFCC  F008         	goto	u1350
  2675   001194                     u1351:
  2676   001194  EF16  F009         	goto	l2677
  2677   001198                     u1350:
  2678   001198                     
  2679                           ;dc_motor.c: 209:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2680   001198  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2681   00119C  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2682   0011A0  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2683   0011A4  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2684   0011A8  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2685   0011AC  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2686   0011B0  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2687   0011B4  EC87  F011         	call	_turnLeft	;wreg free
  2688   0011B8                     
  2689                           ;dc_motor.c: 210:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2690   0011B8  0E05               	movlw	5
  2691   0011BA  6E3E               	movwf	(??_returnHome+1)^0,c
  2692   0011BC  0E0F               	movlw	15
  2693   0011BE  6E3D               	movwf	??_returnHome^0,c
  2694   0011C0  0EF1               	movlw	241
  2695   0011C2                     u2487:
  2696   0011C2  2EE8               	decfsz	wreg,f,c
  2697   0011C4  D7FE               	bra	u2487
  2698   0011C6  2E3D               	decfsz	??_returnHome^0,f,c
  2699   0011C8  D7FC               	bra	u2487
  2700   0011CA  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2701   0011CC  D7FA               	bra	u2487
  2702   0011CE  0000               	nop	
  2703   0011D0                     
  2704                           ;dc_motor.c: 211:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2705   0011D0  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2706   0011D4  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2707   0011D8  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2708   0011DC  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2709   0011E0  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2710   0011E4  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2711   0011E8  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2712   0011EC  EC87  F011         	call	_turnLeft	;wreg free
  2713                           
  2714                           ;dc_motor.c: 212:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2715   0011F0  0E05               	movlw	5
  2716   0011F2  6E3E               	movwf	(??_returnHome+1)^0,c
  2717   0011F4  0E0F               	movlw	15
  2718   0011F6  6E3D               	movwf	??_returnHome^0,c
  2719   0011F8  0EF1               	movlw	241
  2720   0011FA                     u2497:
  2721   0011FA  2EE8               	decfsz	wreg,f,c
  2722   0011FC  D7FE               	bra	u2497
  2723   0011FE  2E3D               	decfsz	??_returnHome^0,f,c
  2724   001200  D7FC               	bra	u2497
  2725   001202  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2726   001204  D7FA               	bra	u2497
  2727   001206  0000               	nop	
  2728   001208                     
  2729                           ;dc_motor.c: 213:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  2730   001208  C02E  F020         	movff	returnHome@mL,reverseOneSquare@mL
  2731   00120C  C02F  F021         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  2732   001210  C030  F022         	movff	returnHome@mR,reverseOneSquare@mR
  2733   001214  C031  F023         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  2734   001218  C037  F024         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  2735   00121C  C038  F025         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  2736   001220  C039  F026         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  2737   001224  ECA4  F00F         	call	_reverseOneSquare	;wreg free
  2738   001228  EFAF  F008         	goto	l2663
  2739   00122C                     l2677:
  2740   00122C  5041               	movf	returnHome@i^0,w,c
  2741   00122E  2432               	addwf	returnHome@moveSequence^0,w,c
  2742   001230  6ED9               	movwf	fsr2l,c
  2743   001232  0E00               	movlw	0
  2744   001234  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2745   001236  6EDA               	movwf	fsr2h,c
  2746   001238  0E05               	movlw	5
  2747   00123A  18DE               	xorwf	postinc2,w,c
  2748   00123C  A4D8               	btfss	status,2,c
  2749   00123E  EF23  F009         	goto	u1361
  2750   001242  EF25  F009         	goto	u1360
  2751   001246                     u1361:
  2752   001246  EF6F  F009         	goto	l2689
  2753   00124A                     u1360:
  2754   00124A                     
  2755                           ;dc_motor.c: 218:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2756   00124A  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2757   00124E  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2758   001252  C030  F022         	movff	returnHome@mR,turnRight@mR
  2759   001256  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2760   00125A  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2761   00125E  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2762   001262  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2763   001266  EC9A  F010         	call	_turnRight	;wreg free
  2764   00126A                     
  2765                           ;dc_motor.c: 219:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2766   00126A  0E05               	movlw	5
  2767   00126C  6E3E               	movwf	(??_returnHome+1)^0,c
  2768   00126E  0E0F               	movlw	15
  2769   001270  6E3D               	movwf	??_returnHome^0,c
  2770   001272  0EF1               	movlw	241
  2771   001274                     u2507:
  2772   001274  2EE8               	decfsz	wreg,f,c
  2773   001276  D7FE               	bra	u2507
  2774   001278  2E3D               	decfsz	??_returnHome^0,f,c
  2775   00127A  D7FC               	bra	u2507
  2776   00127C  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2777   00127E  D7FA               	bra	u2507
  2778   001280  0000               	nop	
  2779   001282                     
  2780                           ;dc_motor.c: 220:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2781   001282  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2782   001286  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2783   00128A  C030  F022         	movff	returnHome@mR,turnRight@mR
  2784   00128E  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2785   001292  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2786   001296  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2787   00129A  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2788   00129E  EC9A  F010         	call	_turnRight	;wreg free
  2789                           
  2790                           ;dc_motor.c: 221:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2791   0012A2  0E05               	movlw	5
  2792   0012A4  6E3E               	movwf	(??_returnHome+1)^0,c
  2793   0012A6  0E0F               	movlw	15
  2794   0012A8  6E3D               	movwf	??_returnHome^0,c
  2795   0012AA  0EF1               	movlw	241
  2796   0012AC                     u2517:
  2797   0012AC  2EE8               	decfsz	wreg,f,c
  2798   0012AE  D7FE               	bra	u2517
  2799   0012B0  2E3D               	decfsz	??_returnHome^0,f,c
  2800   0012B2  D7FC               	bra	u2517
  2801   0012B4  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2802   0012B6  D7FA               	bra	u2517
  2803   0012B8  0000               	nop	
  2804   0012BA                     
  2805                           ;dc_motor.c: 222:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  2806   0012BA  C02E  F020         	movff	returnHome@mL,reverseOneSquare@mL
  2807   0012BE  C02F  F021         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  2808   0012C2  C030  F022         	movff	returnHome@mR,reverseOneSquare@mR
  2809   0012C6  C031  F023         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  2810   0012CA  C037  F024         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  2811   0012CE  C038  F025         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  2812   0012D2  C039  F026         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  2813   0012D6  ECA4  F00F         	call	_reverseOneSquare	;wreg free
  2814   0012DA  EFAF  F008         	goto	l2663
  2815   0012DE                     l2689:
  2816   0012DE  5041               	movf	returnHome@i^0,w,c
  2817   0012E0  2432               	addwf	returnHome@moveSequence^0,w,c
  2818   0012E2  6ED9               	movwf	fsr2l,c
  2819   0012E4  0E00               	movlw	0
  2820   0012E6  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2821   0012E8  6EDA               	movwf	fsr2h,c
  2822   0012EA  0E06               	movlw	6
  2823   0012EC  18DE               	xorwf	postinc2,w,c
  2824   0012EE  A4D8               	btfss	status,2,c
  2825   0012F0  EF7C  F009         	goto	u1371
  2826   0012F4  EF7E  F009         	goto	u1370
  2827   0012F8                     u1371:
  2828   0012F8  EFC8  F009         	goto	l2701
  2829   0012FC                     u1370:
  2830   0012FC                     
  2831                           ;dc_motor.c: 227:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2832   0012FC  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2833   001300  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2834   001304  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2835   001308  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2836   00130C  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2837   001310  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2838   001314  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2839   001318  EC87  F011         	call	_turnLeft	;wreg free
  2840   00131C                     
  2841                           ;dc_motor.c: 228:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2842   00131C  0E05               	movlw	5
  2843   00131E  6E3E               	movwf	(??_returnHome+1)^0,c
  2844   001320  0E0F               	movlw	15
  2845   001322  6E3D               	movwf	??_returnHome^0,c
  2846   001324  0EF1               	movlw	241
  2847   001326                     u2527:
  2848   001326  2EE8               	decfsz	wreg,f,c
  2849   001328  D7FE               	bra	u2527
  2850   00132A  2E3D               	decfsz	??_returnHome^0,f,c
  2851   00132C  D7FC               	bra	u2527
  2852   00132E  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2853   001330  D7FA               	bra	u2527
  2854   001332  0000               	nop	
  2855   001334                     
  2856                           ;dc_motor.c: 229:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2857   001334  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2858   001338  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2859   00133C  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2860   001340  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2861   001344  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2862   001348  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2863   00134C  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2864   001350  EC87  F011         	call	_turnLeft	;wreg free
  2865                           
  2866                           ;dc_motor.c: 230:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2867   001354  0E05               	movlw	5
  2868   001356  6E3E               	movwf	(??_returnHome+1)^0,c
  2869   001358  0E0F               	movlw	15
  2870   00135A  6E3D               	movwf	??_returnHome^0,c
  2871   00135C  0EF1               	movlw	241
  2872   00135E                     u2537:
  2873   00135E  2EE8               	decfsz	wreg,f,c
  2874   001360  D7FE               	bra	u2537
  2875   001362  2E3D               	decfsz	??_returnHome^0,f,c
  2876   001364  D7FC               	bra	u2537
  2877   001366  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2878   001368  D7FA               	bra	u2537
  2879   00136A  0000               	nop	
  2880   00136C                     
  2881                           ;dc_motor.c: 231:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2882   00136C  C02E  F020         	movff	returnHome@mL,turnLeft@mL
  2883   001370  C02F  F021         	movff	returnHome@mL+1,turnLeft@mL+1
  2884   001374  C030  F022         	movff	returnHome@mR,turnLeft@mR
  2885   001378  C031  F023         	movff	returnHome@mR+1,turnLeft@mR+1
  2886   00137C  C03A  F024         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  2887   001380  C03B  F025         	movff	returnHome@turnDuration,turnLeft@turnDuration
  2888   001384  C03C  F026         	movff	returnHome@turnRamp,turnLeft@turnRamp
  2889   001388  EC87  F011         	call	_turnLeft	;wreg free
  2890   00138C  EFAF  F008         	goto	l2663
  2891   001390                     l2701:
  2892   001390  5041               	movf	returnHome@i^0,w,c
  2893   001392  2432               	addwf	returnHome@moveSequence^0,w,c
  2894   001394  6ED9               	movwf	fsr2l,c
  2895   001396  0E00               	movlw	0
  2896   001398  2033               	addwfc	(returnHome@moveSequence+1)^0,w,c
  2897   00139A  6EDA               	movwf	fsr2h,c
  2898   00139C  0E07               	movlw	7
  2899   00139E  18DE               	xorwf	postinc2,w,c
  2900   0013A0  A4D8               	btfss	status,2,c
  2901   0013A2  EFD5  F009         	goto	u1381
  2902   0013A6  EFD7  F009         	goto	u1380
  2903   0013AA                     u1381:
  2904   0013AA  EF21  F00A         	goto	l493
  2905   0013AE                     u1380:
  2906   0013AE                     
  2907                           ;dc_motor.c: 236:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2908   0013AE  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2909   0013B2  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2910   0013B6  C030  F022         	movff	returnHome@mR,turnRight@mR
  2911   0013BA  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2912   0013BE  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2913   0013C2  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2914   0013C6  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2915   0013CA  EC9A  F010         	call	_turnRight	;wreg free
  2916   0013CE                     
  2917                           ;dc_motor.c: 237:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2918   0013CE  0E05               	movlw	5
  2919   0013D0  6E3E               	movwf	(??_returnHome+1)^0,c
  2920   0013D2  0E0F               	movlw	15
  2921   0013D4  6E3D               	movwf	??_returnHome^0,c
  2922   0013D6  0EF1               	movlw	241
  2923   0013D8                     u2547:
  2924   0013D8  2EE8               	decfsz	wreg,f,c
  2925   0013DA  D7FE               	bra	u2547
  2926   0013DC  2E3D               	decfsz	??_returnHome^0,f,c
  2927   0013DE  D7FC               	bra	u2547
  2928   0013E0  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2929   0013E2  D7FA               	bra	u2547
  2930   0013E4  0000               	nop	
  2931   0013E6                     
  2932                           ;dc_motor.c: 238:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2933   0013E6  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2934   0013EA  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2935   0013EE  C030  F022         	movff	returnHome@mR,turnRight@mR
  2936   0013F2  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2937   0013F6  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2938   0013FA  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2939   0013FE  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2940   001402  EC9A  F010         	call	_turnRight	;wreg free
  2941                           
  2942                           ;dc_motor.c: 239:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2943   001406  0E05               	movlw	5
  2944   001408  6E3E               	movwf	(??_returnHome+1)^0,c
  2945   00140A  0E0F               	movlw	15
  2946   00140C  6E3D               	movwf	??_returnHome^0,c
  2947   00140E  0EF1               	movlw	241
  2948   001410                     u2557:
  2949   001410  2EE8               	decfsz	wreg,f,c
  2950   001412  D7FE               	bra	u2557
  2951   001414  2E3D               	decfsz	??_returnHome^0,f,c
  2952   001416  D7FC               	bra	u2557
  2953   001418  2E3E               	decfsz	(??_returnHome+1)^0,f,c
  2954   00141A  D7FA               	bra	u2557
  2955   00141C  0000               	nop	
  2956   00141E                     
  2957                           ;dc_motor.c: 240:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2958   00141E  C02E  F020         	movff	returnHome@mL,turnRight@mL
  2959   001422  C02F  F021         	movff	returnHome@mL+1,turnRight@mL+1
  2960   001426  C030  F022         	movff	returnHome@mR,turnRight@mR
  2961   00142A  C031  F023         	movff	returnHome@mR+1,turnRight@mR+1
  2962   00142E  C03A  F024         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  2963   001432  C03B  F025         	movff	returnHome@turnDuration,turnRight@turnDuration
  2964   001436  C03C  F026         	movff	returnHome@turnRamp,turnRight@turnRamp
  2965   00143A  EC9A  F010         	call	_turnRight	;wreg free
  2966   00143E  EFAF  F008         	goto	l2663
  2967   001442                     l493:
  2968   001442                     l487:
  2969                           
  2970                           ;dc_motor.c: 244:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2971   001442  C02E  F020         	movff	returnHome@mL,fullSpeedAhead@mL
  2972   001446  C02F  F021         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  2973   00144A  C030  F022         	movff	returnHome@mR,fullSpeedAhead@mR
  2974   00144E  C031  F023         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  2975   001452  C037  F024         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  2976   001456  C039  F025         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  2977   00145A  ECDA  F014         	call	_fullSpeedAhead	;wreg free
  2978   00145E                     
  2979                           ;dc_motor.c: 245:         resetTimer();
  2980   00145E  ECAD  F018         	call	_resetTimer	;wreg free
  2981   001462                     l2715:
  2982   001462  5041               	movf	returnHome@i^0,w,c
  2983   001464  0D02               	mullw	2
  2984   001466  CFF3 F03D          	movff	prodl,??_returnHome
  2985   00146A  CFF4 F03E          	movff	prodh,??_returnHome+1
  2986   00146E  503D               	movf	??_returnHome^0,w,c
  2987   001470  2434               	addwf	returnHome@straightTime^0,w,c
  2988   001472  6ED9               	movwf	fsr2l,c
  2989   001474  503E               	movf	(??_returnHome+1)^0,w,c
  2990   001476  2035               	addwfc	(returnHome@straightTime+1)^0,w,c
  2991   001478  6EDA               	movwf	fsr2h,c
  2992   00147A  ECAB  F017         	call	_get16bitTMR0val	;wreg free
  2993   00147E  50DE               	movf	postinc2,w,c
  2994   001480  5C0D               	subwf	?_get16bitTMR0val^0,w,c
  2995   001482  50DE               	movf	postinc2,w,c
  2996   001484  580E               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  2997   001486  A0D8               	btfss	status,0,c
  2998   001488  EF48  F00A         	goto	u1391
  2999   00148C  EF4A  F00A         	goto	u1390
  3000   001490                     u1391:
  3001   001490  EF31  F00A         	goto	l2715
  3002   001494                     u1390:
  3003   001494                     
  3004                           ;dc_motor.c: 247:         stop(mL, mR, straightRamp);
  3005   001494  C02E  F020         	movff	returnHome@mL,stop@mL
  3006   001498  C02F  F021         	movff	returnHome@mL+1,stop@mL+1
  3007   00149C  C030  F022         	movff	returnHome@mR,stop@mR
  3008   0014A0  C031  F023         	movff	returnHome@mR+1,stop@mR+1
  3009   0014A4  C039  F024         	movff	returnHome@straightRamp,stop@straightRamp
  3010   0014A8  EC55  F014         	call	_stop	;wreg free
  3011   0014AC                     l2719:
  3012                           
  3013                           ;dc_motor.c: 180:     while (i>0) {
  3014   0014AC  5041               	movf	returnHome@i^0,w,c
  3015   0014AE  A4D8               	btfss	status,2,c
  3016   0014B0  EF5C  F00A         	goto	u1401
  3017   0014B4  EF5E  F00A         	goto	u1400
  3018   0014B8                     u1401:
  3019   0014B8  EFAA  F007         	goto	l2633
  3020   0014BC                     u1400:
  3021   0014BC  0012               	return		;funcret
  3022   0014BE                     __end_of_returnHome:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function _turnRight *****************
  3026 ;; Defined at:
  3027 ;;		line 304 in file "dc_motor.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3030 ;;		 -> main@motorL(10), 
  3031 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3032 ;;		 -> main@motorR(10), 
  3033 ;;  turnSpeed       1   35[COMRAM] unsigned char 
  3034 ;;  turnDuration    1   36[COMRAM] unsigned char 
  3035 ;;  turnRamp        1   37[COMRAM] unsigned char 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  cur_power       2   43[COMRAM] int 
  3038 ;;  i               2   41[COMRAM] int 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3048 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3049 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3050 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;Total ram usage:       14 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; Hardware stack levels required when called: 7
  3055 ;; This function calls:
  3056 ;;		_setMotorPWM
  3057 ;; This function is called by:
  3058 ;;		_move
  3059 ;;		_returnHome
  3060 ;;		_calibration
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text4
  3065   002134                     __ptext4:
  3066                           	callstack 0
  3067   002134                     _turnRight:
  3068                           	callstack 22
  3069   002134                     
  3070                           ;dc_motor.c: 304: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 305: {;dc_motor.c: 306:     mL->dir
      +                          ection = 1;
  3071   002134  EE20 F001          	lfsr	2,1
  3072   002138  5020               	movf	turnRight@mL^0,w,c
  3073   00213A  26D9               	addwf	fsr2l,f,c
  3074   00213C  5021               	movf	(turnRight@mL+1)^0,w,c
  3075   00213E  22DA               	addwfc	fsr2h,f,c
  3076   002140  0E01               	movlw	1
  3077   002142  6EDF               	movwf	indf2,c
  3078                           
  3079                           ;dc_motor.c: 307:     mR->direction = 0;
  3080   002144  EE20 F001          	lfsr	2,1
  3081   002148  5022               	movf	turnRight@mR^0,w,c
  3082   00214A  26D9               	addwf	fsr2l,f,c
  3083   00214C  5023               	movf	(turnRight@mR+1)^0,w,c
  3084   00214E  22DA               	addwfc	fsr2h,f,c
  3085   002150  6ADF               	clrf	indf2,c
  3086   002152                     
  3087                           ;dc_motor.c: 308:     int i;;dc_motor.c: 309:     int cur_power;;dc_motor.c: 310:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3088   002152  0E00               	movlw	0
  3089   002154  6E2D               	movwf	(turnRight@cur_power+1)^0,c
  3090   002156  0E01               	movlw	1
  3091   002158  6E2C               	movwf	turnRight@cur_power^0,c
  3092   00215A  EFF9  F010         	goto	l2413
  3093   00215E                     l2399:
  3094                           
  3095                           ;dc_motor.c: 311:         mL->power = cur_power+mL->compensation;
  3096   00215E  EE20 F009          	lfsr	2,9
  3097   002162  5020               	movf	turnRight@mL^0,w,c
  3098   002164  26D9               	addwf	fsr2l,f,c
  3099   002166  5021               	movf	(turnRight@mL+1)^0,w,c
  3100   002168  22DA               	addwfc	fsr2h,f,c
  3101   00216A  50DF               	movf	indf2,w,c
  3102   00216C  242C               	addwf	turnRight@cur_power^0,w,c
  3103   00216E  C020  FFD9         	movff	turnRight@mL,fsr2l
  3104   002172  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3105   002176  6EDF               	movwf	indf2,c
  3106                           
  3107                           ;dc_motor.c: 312:         mR->power = cur_power+mR->compensation;
  3108   002178  EE20 F009          	lfsr	2,9
  3109   00217C  5022               	movf	turnRight@mR^0,w,c
  3110   00217E  26D9               	addwf	fsr2l,f,c
  3111   002180  5023               	movf	(turnRight@mR+1)^0,w,c
  3112   002182  22DA               	addwfc	fsr2h,f,c
  3113   002184  50DF               	movf	indf2,w,c
  3114   002186  242C               	addwf	turnRight@cur_power^0,w,c
  3115   002188  C022  FFD9         	movff	turnRight@mR,fsr2l
  3116   00218C  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3117   002190  6EDF               	movwf	indf2,c
  3118   002192                     
  3119                           ;dc_motor.c: 313:         setMotorPWM(mL);
  3120   002192  C020  F01A         	movff	turnRight@mL,setMotorPWM@m
  3121   002196  C021  F01B         	movff	turnRight@mL+1,setMotorPWM@m+1
  3122   00219A  EC74  F012         	call	_setMotorPWM	;wreg free
  3123   00219E                     
  3124                           ;dc_motor.c: 314:         setMotorPWM(mR);
  3125   00219E  C022  F01A         	movff	turnRight@mR,setMotorPWM@m
  3126   0021A2  C023  F01B         	movff	turnRight@mR+1,setMotorPWM@m+1
  3127   0021A6  EC74  F012         	call	_setMotorPWM	;wreg free
  3128   0021AA                     
  3129                           ;dc_motor.c: 315:         for (i=0;i<turnRamp;i++) {
  3130   0021AA  0E00               	movlw	0
  3131   0021AC  6E2B               	movwf	(turnRight@i+1)^0,c
  3132   0021AE  0E00               	movlw	0
  3133   0021B0  6E2A               	movwf	turnRight@i^0,c
  3134   0021B2  EFE5  F010         	goto	l533
  3135   0021B6                     l2407:
  3136                           
  3137                           ;dc_motor.c: 316:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3138   0021B6  0E68               	movlw	104
  3139   0021B8  6E27               	movwf	??_turnRight^0,c
  3140   0021BA  0EE4               	movlw	228
  3141   0021BC                     u2567:
  3142   0021BC  2EE8               	decfsz	wreg,f,c
  3143   0021BE  D7FE               	bra	u2567
  3144   0021C0  2E27               	decfsz	??_turnRight^0,f,c
  3145   0021C2  D7FC               	bra	u2567
  3146   0021C4  D000               	nop2	
  3147   0021C6                     
  3148                           ;dc_motor.c: 317:         }
  3149   0021C6  4A2A               	infsnz	turnRight@i^0,f,c
  3150   0021C8  2A2B               	incf	(turnRight@i+1)^0,f,c
  3151   0021CA                     l533:
  3152   0021CA  5026               	movf	turnRight@turnRamp^0,w,c
  3153   0021CC  6E27               	movwf	??_turnRight^0,c
  3154   0021CE  6A28               	clrf	(??_turnRight+1)^0,c
  3155   0021D0  5027               	movf	??_turnRight^0,w,c
  3156   0021D2  5C2A               	subwf	turnRight@i^0,w,c
  3157   0021D4  502B               	movf	(turnRight@i+1)^0,w,c
  3158   0021D6  0A80               	xorlw	128
  3159   0021D8  6E29               	movwf	(??_turnRight+2)^0,c
  3160   0021DA  5028               	movf	(??_turnRight+1)^0,w,c
  3161   0021DC  0A80               	xorlw	128
  3162   0021DE  5829               	subwfb	(??_turnRight+2)^0,w,c
  3163   0021E0  A0D8               	btfss	status,0,c
  3164   0021E2  EFF5  F010         	goto	u1131
  3165   0021E6  EFF7  F010         	goto	u1130
  3166   0021EA                     u1131:
  3167   0021EA  EFDB  F010         	goto	l2407
  3168   0021EE                     u1130:
  3169   0021EE                     
  3170                           ;dc_motor.c: 318:     }
  3171   0021EE  4A2C               	infsnz	turnRight@cur_power^0,f,c
  3172   0021F0  2A2D               	incf	(turnRight@cur_power+1)^0,f,c
  3173   0021F2                     l2413:
  3174   0021F2  5024               	movf	turnRight@turnSpeed^0,w,c
  3175   0021F4  6E27               	movwf	??_turnRight^0,c
  3176   0021F6  6A28               	clrf	(??_turnRight+1)^0,c
  3177   0021F8  502C               	movf	turnRight@cur_power^0,w,c
  3178   0021FA  5C27               	subwf	??_turnRight^0,w,c
  3179   0021FC  5028               	movf	(??_turnRight+1)^0,w,c
  3180   0021FE  0A80               	xorlw	128
  3181   002200  6E29               	movwf	(??_turnRight+2)^0,c
  3182   002202  502D               	movf	(turnRight@cur_power+1)^0,w,c
  3183   002204  0A80               	xorlw	128
  3184   002206  5829               	subwfb	(??_turnRight+2)^0,w,c
  3185   002208  B0D8               	btfsc	status,0,c
  3186   00220A  EF09  F011         	goto	u1141
  3187   00220E  EF0B  F011         	goto	u1140
  3188   002212                     u1141:
  3189   002212  EFAF  F010         	goto	l2399
  3190   002216                     u1140:
  3191   002216                     
  3192                           ;dc_motor.c: 320:     for (i=0;i<turnDuration;i++) {
  3193   002216  0E00               	movlw	0
  3194   002218  6E2B               	movwf	(turnRight@i+1)^0,c
  3195   00221A  0E00               	movlw	0
  3196   00221C  6E2A               	movwf	turnRight@i^0,c
  3197   00221E  EF1B  F011         	goto	l537
  3198   002222                     l2417:
  3199                           
  3200                           ;dc_motor.c: 321:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3201   002222  0E68               	movlw	104
  3202   002224  6E27               	movwf	??_turnRight^0,c
  3203   002226  0EE4               	movlw	228
  3204   002228                     u2577:
  3205   002228  2EE8               	decfsz	wreg,f,c
  3206   00222A  D7FE               	bra	u2577
  3207   00222C  2E27               	decfsz	??_turnRight^0,f,c
  3208   00222E  D7FC               	bra	u2577
  3209   002230  D000               	nop2	
  3210   002232                     
  3211                           ;dc_motor.c: 322:         }
  3212   002232  4A2A               	infsnz	turnRight@i^0,f,c
  3213   002234  2A2B               	incf	(turnRight@i+1)^0,f,c
  3214   002236                     l537:
  3215   002236  5025               	movf	turnRight@turnDuration^0,w,c
  3216   002238  6E27               	movwf	??_turnRight^0,c
  3217   00223A  6A28               	clrf	(??_turnRight+1)^0,c
  3218   00223C  5027               	movf	??_turnRight^0,w,c
  3219   00223E  5C2A               	subwf	turnRight@i^0,w,c
  3220   002240  502B               	movf	(turnRight@i+1)^0,w,c
  3221   002242  0A80               	xorlw	128
  3222   002244  6E29               	movwf	(??_turnRight+2)^0,c
  3223   002246  5028               	movf	(??_turnRight+1)^0,w,c
  3224   002248  0A80               	xorlw	128
  3225   00224A  5829               	subwfb	(??_turnRight+2)^0,w,c
  3226   00224C  A0D8               	btfss	status,0,c
  3227   00224E  EF2B  F011         	goto	u1151
  3228   002252  EF2D  F011         	goto	u1150
  3229   002256                     u1151:
  3230   002256  EF11  F011         	goto	l2417
  3231   00225A                     u1150:
  3232   00225A                     
  3233                           ;dc_motor.c: 324:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3234   00225A  C024  F02C         	movff	turnRight@turnSpeed,turnRight@cur_power
  3235   00225E  6A2D               	clrf	(turnRight@cur_power+1)^0,c
  3236   002260                     l2421:
  3237   002260  BE2D               	btfsc	(turnRight@cur_power+1)^0,7,c
  3238   002262  EF37  F011         	goto	u1160
  3239   002266  EF35  F011         	goto	u1161
  3240   00226A                     u1161:
  3241   00226A  EF39  F011         	goto	l2425
  3242   00226E                     u1160:
  3243   00226E  EF86  F011         	goto	l545
  3244   002272                     l2425:
  3245                           
  3246                           ;dc_motor.c: 325:         mL->power = cur_power+mL->compensation;
  3247   002272  EE20 F009          	lfsr	2,9
  3248   002276  5020               	movf	turnRight@mL^0,w,c
  3249   002278  26D9               	addwf	fsr2l,f,c
  3250   00227A  5021               	movf	(turnRight@mL+1)^0,w,c
  3251   00227C  22DA               	addwfc	fsr2h,f,c
  3252   00227E  50DF               	movf	indf2,w,c
  3253   002280  242C               	addwf	turnRight@cur_power^0,w,c
  3254   002282  C020  FFD9         	movff	turnRight@mL,fsr2l
  3255   002286  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3256   00228A  6EDF               	movwf	indf2,c
  3257                           
  3258                           ;dc_motor.c: 326:         mR->power = cur_power+mR->compensation;
  3259   00228C  EE20 F009          	lfsr	2,9
  3260   002290  5022               	movf	turnRight@mR^0,w,c
  3261   002292  26D9               	addwf	fsr2l,f,c
  3262   002294  5023               	movf	(turnRight@mR+1)^0,w,c
  3263   002296  22DA               	addwfc	fsr2h,f,c
  3264   002298  50DF               	movf	indf2,w,c
  3265   00229A  242C               	addwf	turnRight@cur_power^0,w,c
  3266   00229C  C022  FFD9         	movff	turnRight@mR,fsr2l
  3267   0022A0  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3268   0022A4  6EDF               	movwf	indf2,c
  3269   0022A6                     
  3270                           ;dc_motor.c: 327:         setMotorPWM(mL);
  3271   0022A6  C020  F01A         	movff	turnRight@mL,setMotorPWM@m
  3272   0022AA  C021  F01B         	movff	turnRight@mL+1,setMotorPWM@m+1
  3273   0022AE  EC74  F012         	call	_setMotorPWM	;wreg free
  3274   0022B2                     
  3275                           ;dc_motor.c: 328:         setMotorPWM(mR);
  3276   0022B2  C022  F01A         	movff	turnRight@mR,setMotorPWM@m
  3277   0022B6  C023  F01B         	movff	turnRight@mR+1,setMotorPWM@m+1
  3278   0022BA  EC74  F012         	call	_setMotorPWM	;wreg free
  3279   0022BE                     
  3280                           ;dc_motor.c: 329:         for (i=0;i<turnRamp;i++) {
  3281   0022BE  0E00               	movlw	0
  3282   0022C0  6E2B               	movwf	(turnRight@i+1)^0,c
  3283   0022C2  0E00               	movlw	0
  3284   0022C4  6E2A               	movwf	turnRight@i^0,c
  3285   0022C6  EF6F  F011         	goto	l542
  3286   0022CA                     l2433:
  3287                           
  3288                           ;dc_motor.c: 330:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3289   0022CA  0E68               	movlw	104
  3290   0022CC  6E27               	movwf	??_turnRight^0,c
  3291   0022CE  0EE4               	movlw	228
  3292   0022D0                     u2587:
  3293   0022D0  2EE8               	decfsz	wreg,f,c
  3294   0022D2  D7FE               	bra	u2587
  3295   0022D4  2E27               	decfsz	??_turnRight^0,f,c
  3296   0022D6  D7FC               	bra	u2587
  3297   0022D8  D000               	nop2	
  3298   0022DA                     
  3299                           ;dc_motor.c: 331:         }
  3300   0022DA  4A2A               	infsnz	turnRight@i^0,f,c
  3301   0022DC  2A2B               	incf	(turnRight@i+1)^0,f,c
  3302   0022DE                     l542:
  3303   0022DE  5026               	movf	turnRight@turnRamp^0,w,c
  3304   0022E0  6E27               	movwf	??_turnRight^0,c
  3305   0022E2  6A28               	clrf	(??_turnRight+1)^0,c
  3306   0022E4  5027               	movf	??_turnRight^0,w,c
  3307   0022E6  5C2A               	subwf	turnRight@i^0,w,c
  3308   0022E8  502B               	movf	(turnRight@i+1)^0,w,c
  3309   0022EA  0A80               	xorlw	128
  3310   0022EC  6E29               	movwf	(??_turnRight+2)^0,c
  3311   0022EE  5028               	movf	(??_turnRight+1)^0,w,c
  3312   0022F0  0A80               	xorlw	128
  3313   0022F2  5829               	subwfb	(??_turnRight+2)^0,w,c
  3314   0022F4  A0D8               	btfss	status,0,c
  3315   0022F6  EF7F  F011         	goto	u1171
  3316   0022FA  EF81  F011         	goto	u1170
  3317   0022FE                     u1171:
  3318   0022FE  EF65  F011         	goto	l2433
  3319   002302                     u1170:
  3320   002302                     
  3321                           ;dc_motor.c: 332:     }
  3322   002302  062C               	decf	turnRight@cur_power^0,f,c
  3323   002304  A0D8               	btfss	status,0,c
  3324   002306  062D               	decf	(turnRight@cur_power+1)^0,f,c
  3325   002308  EF30  F011         	goto	l2421
  3326   00230C                     l545:
  3327   00230C  0012               	return		;funcret
  3328   00230E                     __end_of_turnRight:
  3329                           	callstack 0
  3330                           
  3331 ;; *************** function _turnLeft *****************
  3332 ;; Defined at:
  3333 ;;		line 272 in file "dc_motor.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3336 ;;		 -> main@motorL(10), 
  3337 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3338 ;;		 -> main@motorR(10), 
  3339 ;;  turnSpeed       1   35[COMRAM] unsigned char 
  3340 ;;  turnDuration    1   36[COMRAM] unsigned char 
  3341 ;;  turnRamp        1   37[COMRAM] unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  cur_power       2   43[COMRAM] int 
  3344 ;;  i               2   41[COMRAM] int 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3354 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3355 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3356 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3357 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3358 ;;Total ram usage:       14 bytes
  3359 ;; Hardware stack levels used: 1
  3360 ;; Hardware stack levels required when called: 7
  3361 ;; This function calls:
  3362 ;;		_setMotorPWM
  3363 ;; This function is called by:
  3364 ;;		_move
  3365 ;;		_returnHome
  3366 ;;		_calibration
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text5
  3371   00230E                     __ptext5:
  3372                           	callstack 0
  3373   00230E                     _turnLeft:
  3374                           	callstack 22
  3375   00230E                     
  3376                           ;dc_motor.c: 272: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 273: {;dc_motor.c: 274:     mL->dire
      +                          ction = 0;
  3377   00230E  EE20 F001          	lfsr	2,1
  3378   002312  5020               	movf	turnLeft@mL^0,w,c
  3379   002314  26D9               	addwf	fsr2l,f,c
  3380   002316  5021               	movf	(turnLeft@mL+1)^0,w,c
  3381   002318  22DA               	addwfc	fsr2h,f,c
  3382   00231A  6ADF               	clrf	indf2,c
  3383                           
  3384                           ;dc_motor.c: 275:     mR->direction = 1;
  3385   00231C  EE20 F001          	lfsr	2,1
  3386   002320  5022               	movf	turnLeft@mR^0,w,c
  3387   002322  26D9               	addwf	fsr2l,f,c
  3388   002324  5023               	movf	(turnLeft@mR+1)^0,w,c
  3389   002326  22DA               	addwfc	fsr2h,f,c
  3390   002328  0E01               	movlw	1
  3391   00232A  6EDF               	movwf	indf2,c
  3392   00232C                     
  3393                           ;dc_motor.c: 276:     int i;;dc_motor.c: 277:     int cur_power;;dc_motor.c: 278:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3394   00232C  0E00               	movlw	0
  3395   00232E  6E2D               	movwf	(turnLeft@cur_power+1)^0,c
  3396   002330  0E01               	movlw	1
  3397   002332  6E2C               	movwf	turnLeft@cur_power^0,c
  3398   002334  EFE6  F011         	goto	l2459
  3399   002338                     l2445:
  3400                           
  3401                           ;dc_motor.c: 279:         mL->power = cur_power+mL->compensation;
  3402   002338  EE20 F009          	lfsr	2,9
  3403   00233C  5020               	movf	turnLeft@mL^0,w,c
  3404   00233E  26D9               	addwf	fsr2l,f,c
  3405   002340  5021               	movf	(turnLeft@mL+1)^0,w,c
  3406   002342  22DA               	addwfc	fsr2h,f,c
  3407   002344  50DF               	movf	indf2,w,c
  3408   002346  242C               	addwf	turnLeft@cur_power^0,w,c
  3409   002348  C020  FFD9         	movff	turnLeft@mL,fsr2l
  3410   00234C  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  3411   002350  6EDF               	movwf	indf2,c
  3412                           
  3413                           ;dc_motor.c: 280:         mR->power = cur_power+mR->compensation;
  3414   002352  EE20 F009          	lfsr	2,9
  3415   002356  5022               	movf	turnLeft@mR^0,w,c
  3416   002358  26D9               	addwf	fsr2l,f,c
  3417   00235A  5023               	movf	(turnLeft@mR+1)^0,w,c
  3418   00235C  22DA               	addwfc	fsr2h,f,c
  3419   00235E  50DF               	movf	indf2,w,c
  3420   002360  242C               	addwf	turnLeft@cur_power^0,w,c
  3421   002362  C022  FFD9         	movff	turnLeft@mR,fsr2l
  3422   002366  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  3423   00236A  6EDF               	movwf	indf2,c
  3424   00236C                     
  3425                           ;dc_motor.c: 281:         setMotorPWM(mL);
  3426   00236C  C020  F01A         	movff	turnLeft@mL,setMotorPWM@m
  3427   002370  C021  F01B         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3428   002374  EC74  F012         	call	_setMotorPWM	;wreg free
  3429   002378                     
  3430                           ;dc_motor.c: 282:         setMotorPWM(mR);
  3431   002378  C022  F01A         	movff	turnLeft@mR,setMotorPWM@m
  3432   00237C  C023  F01B         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3433   002380  EC74  F012         	call	_setMotorPWM	;wreg free
  3434   002384                     
  3435                           ;dc_motor.c: 283:         for (i=0;i<turnRamp;i++) {
  3436   002384  0E00               	movlw	0
  3437   002386  6E2B               	movwf	(turnLeft@i+1)^0,c
  3438   002388  0E00               	movlw	0
  3439   00238A  6E2A               	movwf	turnLeft@i^0,c
  3440   00238C  EFD2  F011         	goto	l516
  3441   002390                     l2453:
  3442                           
  3443                           ;dc_motor.c: 284:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3444   002390  0E68               	movlw	104
  3445   002392  6E27               	movwf	??_turnLeft^0,c
  3446   002394  0EE4               	movlw	228
  3447   002396                     u2597:
  3448   002396  2EE8               	decfsz	wreg,f,c
  3449   002398  D7FE               	bra	u2597
  3450   00239A  2E27               	decfsz	??_turnLeft^0,f,c
  3451   00239C  D7FC               	bra	u2597
  3452   00239E  D000               	nop2	
  3453   0023A0                     
  3454                           ;dc_motor.c: 285:         }
  3455   0023A0  4A2A               	infsnz	turnLeft@i^0,f,c
  3456   0023A2  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3457   0023A4                     l516:
  3458   0023A4  5026               	movf	turnLeft@turnRamp^0,w,c
  3459   0023A6  6E27               	movwf	??_turnLeft^0,c
  3460   0023A8  6A28               	clrf	(??_turnLeft+1)^0,c
  3461   0023AA  5027               	movf	??_turnLeft^0,w,c
  3462   0023AC  5C2A               	subwf	turnLeft@i^0,w,c
  3463   0023AE  502B               	movf	(turnLeft@i+1)^0,w,c
  3464   0023B0  0A80               	xorlw	128
  3465   0023B2  6E29               	movwf	(??_turnLeft+2)^0,c
  3466   0023B4  5028               	movf	(??_turnLeft+1)^0,w,c
  3467   0023B6  0A80               	xorlw	128
  3468   0023B8  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3469   0023BA  A0D8               	btfss	status,0,c
  3470   0023BC  EFE2  F011         	goto	u1181
  3471   0023C0  EFE4  F011         	goto	u1180
  3472   0023C4                     u1181:
  3473   0023C4  EFC8  F011         	goto	l2453
  3474   0023C8                     u1180:
  3475   0023C8                     
  3476                           ;dc_motor.c: 286:     }
  3477   0023C8  4A2C               	infsnz	turnLeft@cur_power^0,f,c
  3478   0023CA  2A2D               	incf	(turnLeft@cur_power+1)^0,f,c
  3479   0023CC                     l2459:
  3480   0023CC  5024               	movf	turnLeft@turnSpeed^0,w,c
  3481   0023CE  6E27               	movwf	??_turnLeft^0,c
  3482   0023D0  6A28               	clrf	(??_turnLeft+1)^0,c
  3483   0023D2  502C               	movf	turnLeft@cur_power^0,w,c
  3484   0023D4  5C27               	subwf	??_turnLeft^0,w,c
  3485   0023D6  5028               	movf	(??_turnLeft+1)^0,w,c
  3486   0023D8  0A80               	xorlw	128
  3487   0023DA  6E29               	movwf	(??_turnLeft+2)^0,c
  3488   0023DC  502D               	movf	(turnLeft@cur_power+1)^0,w,c
  3489   0023DE  0A80               	xorlw	128
  3490   0023E0  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3491   0023E2  B0D8               	btfsc	status,0,c
  3492   0023E4  EFF6  F011         	goto	u1191
  3493   0023E8  EFF8  F011         	goto	u1190
  3494   0023EC                     u1191:
  3495   0023EC  EF9C  F011         	goto	l2445
  3496   0023F0                     u1190:
  3497   0023F0                     
  3498                           ;dc_motor.c: 288:     for (i=0;i<turnDuration;i++) {
  3499   0023F0  0E00               	movlw	0
  3500   0023F2  6E2B               	movwf	(turnLeft@i+1)^0,c
  3501   0023F4  0E00               	movlw	0
  3502   0023F6  6E2A               	movwf	turnLeft@i^0,c
  3503   0023F8  EF08  F012         	goto	l520
  3504   0023FC                     l2463:
  3505                           
  3506                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3507   0023FC  0E68               	movlw	104
  3508   0023FE  6E27               	movwf	??_turnLeft^0,c
  3509   002400  0EE4               	movlw	228
  3510   002402                     u2607:
  3511   002402  2EE8               	decfsz	wreg,f,c
  3512   002404  D7FE               	bra	u2607
  3513   002406  2E27               	decfsz	??_turnLeft^0,f,c
  3514   002408  D7FC               	bra	u2607
  3515   00240A  D000               	nop2	
  3516   00240C                     
  3517                           ;dc_motor.c: 290:         }
  3518   00240C  4A2A               	infsnz	turnLeft@i^0,f,c
  3519   00240E  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3520   002410                     l520:
  3521   002410  5025               	movf	turnLeft@turnDuration^0,w,c
  3522   002412  6E27               	movwf	??_turnLeft^0,c
  3523   002414  6A28               	clrf	(??_turnLeft+1)^0,c
  3524   002416  5027               	movf	??_turnLeft^0,w,c
  3525   002418  5C2A               	subwf	turnLeft@i^0,w,c
  3526   00241A  502B               	movf	(turnLeft@i+1)^0,w,c
  3527   00241C  0A80               	xorlw	128
  3528   00241E  6E29               	movwf	(??_turnLeft+2)^0,c
  3529   002420  5028               	movf	(??_turnLeft+1)^0,w,c
  3530   002422  0A80               	xorlw	128
  3531   002424  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3532   002426  A0D8               	btfss	status,0,c
  3533   002428  EF18  F012         	goto	u1201
  3534   00242C  EF1A  F012         	goto	u1200
  3535   002430                     u1201:
  3536   002430  EFFE  F011         	goto	l2463
  3537   002434                     u1200:
  3538   002434                     
  3539                           ;dc_motor.c: 292:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3540   002434  C024  F02C         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  3541   002438  6A2D               	clrf	(turnLeft@cur_power+1)^0,c
  3542   00243A                     l2467:
  3543   00243A  BE2D               	btfsc	(turnLeft@cur_power+1)^0,7,c
  3544   00243C  EF24  F012         	goto	u1210
  3545   002440  EF22  F012         	goto	u1211
  3546   002444                     u1211:
  3547   002444  EF26  F012         	goto	l2471
  3548   002448                     u1210:
  3549   002448  EF73  F012         	goto	l528
  3550   00244C                     l2471:
  3551                           
  3552                           ;dc_motor.c: 293:         mL->power = cur_power+mL->compensation;
  3553   00244C  EE20 F009          	lfsr	2,9
  3554   002450  5020               	movf	turnLeft@mL^0,w,c
  3555   002452  26D9               	addwf	fsr2l,f,c
  3556   002454  5021               	movf	(turnLeft@mL+1)^0,w,c
  3557   002456  22DA               	addwfc	fsr2h,f,c
  3558   002458  50DF               	movf	indf2,w,c
  3559   00245A  242C               	addwf	turnLeft@cur_power^0,w,c
  3560   00245C  C020  FFD9         	movff	turnLeft@mL,fsr2l
  3561   002460  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  3562   002464  6EDF               	movwf	indf2,c
  3563                           
  3564                           ;dc_motor.c: 294:         mR->power = cur_power+mR->compensation;
  3565   002466  EE20 F009          	lfsr	2,9
  3566   00246A  5022               	movf	turnLeft@mR^0,w,c
  3567   00246C  26D9               	addwf	fsr2l,f,c
  3568   00246E  5023               	movf	(turnLeft@mR+1)^0,w,c
  3569   002470  22DA               	addwfc	fsr2h,f,c
  3570   002472  50DF               	movf	indf2,w,c
  3571   002474  242C               	addwf	turnLeft@cur_power^0,w,c
  3572   002476  C022  FFD9         	movff	turnLeft@mR,fsr2l
  3573   00247A  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  3574   00247E  6EDF               	movwf	indf2,c
  3575   002480                     
  3576                           ;dc_motor.c: 295:         setMotorPWM(mL);
  3577   002480  C020  F01A         	movff	turnLeft@mL,setMotorPWM@m
  3578   002484  C021  F01B         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3579   002488  EC74  F012         	call	_setMotorPWM	;wreg free
  3580   00248C                     
  3581                           ;dc_motor.c: 296:         setMotorPWM(mR);
  3582   00248C  C022  F01A         	movff	turnLeft@mR,setMotorPWM@m
  3583   002490  C023  F01B         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3584   002494  EC74  F012         	call	_setMotorPWM	;wreg free
  3585   002498                     
  3586                           ;dc_motor.c: 297:         for (i=0;i<turnRamp;i++) {
  3587   002498  0E00               	movlw	0
  3588   00249A  6E2B               	movwf	(turnLeft@i+1)^0,c
  3589   00249C  0E00               	movlw	0
  3590   00249E  6E2A               	movwf	turnLeft@i^0,c
  3591   0024A0  EF5C  F012         	goto	l525
  3592   0024A4                     l2479:
  3593                           
  3594                           ;dc_motor.c: 298:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3595   0024A4  0E68               	movlw	104
  3596   0024A6  6E27               	movwf	??_turnLeft^0,c
  3597   0024A8  0EE4               	movlw	228
  3598   0024AA                     u2617:
  3599   0024AA  2EE8               	decfsz	wreg,f,c
  3600   0024AC  D7FE               	bra	u2617
  3601   0024AE  2E27               	decfsz	??_turnLeft^0,f,c
  3602   0024B0  D7FC               	bra	u2617
  3603   0024B2  D000               	nop2	
  3604   0024B4                     
  3605                           ;dc_motor.c: 299:         }
  3606   0024B4  4A2A               	infsnz	turnLeft@i^0,f,c
  3607   0024B6  2A2B               	incf	(turnLeft@i+1)^0,f,c
  3608   0024B8                     l525:
  3609   0024B8  5026               	movf	turnLeft@turnRamp^0,w,c
  3610   0024BA  6E27               	movwf	??_turnLeft^0,c
  3611   0024BC  6A28               	clrf	(??_turnLeft+1)^0,c
  3612   0024BE  5027               	movf	??_turnLeft^0,w,c
  3613   0024C0  5C2A               	subwf	turnLeft@i^0,w,c
  3614   0024C2  502B               	movf	(turnLeft@i+1)^0,w,c
  3615   0024C4  0A80               	xorlw	128
  3616   0024C6  6E29               	movwf	(??_turnLeft+2)^0,c
  3617   0024C8  5028               	movf	(??_turnLeft+1)^0,w,c
  3618   0024CA  0A80               	xorlw	128
  3619   0024CC  5829               	subwfb	(??_turnLeft+2)^0,w,c
  3620   0024CE  A0D8               	btfss	status,0,c
  3621   0024D0  EF6C  F012         	goto	u1221
  3622   0024D4  EF6E  F012         	goto	u1220
  3623   0024D8                     u1221:
  3624   0024D8  EF52  F012         	goto	l2479
  3625   0024DC                     u1220:
  3626   0024DC                     
  3627                           ;dc_motor.c: 300:     }
  3628   0024DC  062C               	decf	turnLeft@cur_power^0,f,c
  3629   0024DE  A0D8               	btfss	status,0,c
  3630   0024E0  062D               	decf	(turnLeft@cur_power+1)^0,f,c
  3631   0024E2  EF1D  F012         	goto	l2467
  3632   0024E6                     l528:
  3633   0024E6  0012               	return		;funcret
  3634   0024E8                     __end_of_turnLeft:
  3635                           	callstack 0
  3636                           
  3637 ;; *************** function _stop *****************
  3638 ;; Defined at:
  3639 ;;		line 252 in file "dc_motor.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3642 ;;		 -> main@motorL(10), 
  3643 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3644 ;;		 -> main@motorR(10), 
  3645 ;;  straightRamp    1   35[COMRAM] unsigned char 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  cur_power       2   41[COMRAM] int 
  3648 ;;  i               2   39[COMRAM] int 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3658 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3661 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3662 ;;Total ram usage:       12 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; Hardware stack levels required when called: 7
  3665 ;; This function calls:
  3666 ;;		_setMotorPWM
  3667 ;; This function is called by:
  3668 ;;		_main
  3669 ;;		_returnHome
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text6
  3674   0028AA                     __ptext6:
  3675                           	callstack 0
  3676   0028AA                     _stop:
  3677                           	callstack 23
  3678   0028AA                     
  3679                           ;dc_motor.c: 252: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 253: {;dc_motor.c: 254:     mL->direction = 1;
  3680   0028AA  EE20 F001          	lfsr	2,1
  3681   0028AE  5020               	movf	stop@mL^0,w,c
  3682   0028B0  26D9               	addwf	fsr2l,f,c
  3683   0028B2  5021               	movf	(stop@mL+1)^0,w,c
  3684   0028B4  22DA               	addwfc	fsr2h,f,c
  3685   0028B6  0E01               	movlw	1
  3686   0028B8  6EDF               	movwf	indf2,c
  3687                           
  3688                           ;dc_motor.c: 255:     mR->direction = 1;
  3689   0028BA  EE20 F001          	lfsr	2,1
  3690   0028BE  5022               	movf	stop@mR^0,w,c
  3691   0028C0  26D9               	addwf	fsr2l,f,c
  3692   0028C2  5023               	movf	(stop@mR+1)^0,w,c
  3693   0028C4  22DA               	addwfc	fsr2h,f,c
  3694   0028C6  0E01               	movlw	1
  3695   0028C8  6EDF               	movwf	indf2,c
  3696                           
  3697                           ;dc_motor.c: 256:     int i;;dc_motor.c: 257:     int cur_power;;dc_motor.c: 258:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  3698   0028CA  C020  FFD9         	movff	stop@mL,fsr2l
  3699   0028CE  C021  FFDA         	movff	stop@mL+1,fsr2h
  3700   0028D2  50DF               	movf	indf2,w,c
  3701   0028D4  6E25               	movwf	??_stop^0,c
  3702   0028D6  EE20 F009          	lfsr	2,9
  3703   0028DA  5020               	movf	stop@mL^0,w,c
  3704   0028DC  26D9               	addwf	fsr2l,f,c
  3705   0028DE  5021               	movf	(stop@mL+1)^0,w,c
  3706   0028E0  22DA               	addwfc	fsr2h,f,c
  3707   0028E2  50DF               	movf	indf2,w,c
  3708   0028E4  6E26               	movwf	(??_stop+1)^0,c
  3709   0028E6  5026               	movf	(??_stop+1)^0,w,c
  3710   0028E8  5C25               	subwf	??_stop^0,w,c
  3711   0028EA  6E2A               	movwf	stop@cur_power^0,c
  3712   0028EC  6A2B               	clrf	(stop@cur_power+1)^0,c
  3713   0028EE  A0D8               	btfss	status,0,c
  3714   0028F0  062B               	decf	(stop@cur_power+1)^0,f,c
  3715   0028F2                     l2371:
  3716   0028F2  BE2B               	btfsc	(stop@cur_power+1)^0,7,c
  3717   0028F4  EF80  F014         	goto	u1110
  3718   0028F8  EF7E  F014         	goto	u1111
  3719   0028FC                     u1111:
  3720   0028FC  EF82  F014         	goto	l2375
  3721   002900                     u1110:
  3722   002900  EFCF  F014         	goto	l2391
  3723   002904                     l2375:
  3724                           
  3725                           ;dc_motor.c: 259:         mL->power = cur_power+mL->compensation;
  3726   002904  EE20 F009          	lfsr	2,9
  3727   002908  5020               	movf	stop@mL^0,w,c
  3728   00290A  26D9               	addwf	fsr2l,f,c
  3729   00290C  5021               	movf	(stop@mL+1)^0,w,c
  3730   00290E  22DA               	addwfc	fsr2h,f,c
  3731   002910  50DF               	movf	indf2,w,c
  3732   002912  242A               	addwf	stop@cur_power^0,w,c
  3733   002914  C020  FFD9         	movff	stop@mL,fsr2l
  3734   002918  C021  FFDA         	movff	stop@mL+1,fsr2h
  3735   00291C  6EDF               	movwf	indf2,c
  3736                           
  3737                           ;dc_motor.c: 260:         mR->power = cur_power+mR->compensation;
  3738   00291E  EE20 F009          	lfsr	2,9
  3739   002922  5022               	movf	stop@mR^0,w,c
  3740   002924  26D9               	addwf	fsr2l,f,c
  3741   002926  5023               	movf	(stop@mR+1)^0,w,c
  3742   002928  22DA               	addwfc	fsr2h,f,c
  3743   00292A  50DF               	movf	indf2,w,c
  3744   00292C  242A               	addwf	stop@cur_power^0,w,c
  3745   00292E  C022  FFD9         	movff	stop@mR,fsr2l
  3746   002932  C023  FFDA         	movff	stop@mR+1,fsr2h
  3747   002936  6EDF               	movwf	indf2,c
  3748   002938                     
  3749                           ;dc_motor.c: 261:         setMotorPWM(mL);
  3750   002938  C020  F01A         	movff	stop@mL,setMotorPWM@m
  3751   00293C  C021  F01B         	movff	stop@mL+1,setMotorPWM@m+1
  3752   002940  EC74  F012         	call	_setMotorPWM	;wreg free
  3753   002944                     
  3754                           ;dc_motor.c: 262:         setMotorPWM(mR);
  3755   002944  C022  F01A         	movff	stop@mR,setMotorPWM@m
  3756   002948  C023  F01B         	movff	stop@mR+1,setMotorPWM@m+1
  3757   00294C  EC74  F012         	call	_setMotorPWM	;wreg free
  3758   002950                     
  3759                           ;dc_motor.c: 263:         for (i=0;i<straightRamp;i++) {
  3760   002950  0E00               	movlw	0
  3761   002952  6E29               	movwf	(stop@i+1)^0,c
  3762   002954  0E00               	movlw	0
  3763   002956  6E28               	movwf	stop@i^0,c
  3764   002958  EFB8  F014         	goto	l508
  3765   00295C                     l2383:
  3766                           
  3767                           ;dc_motor.c: 264:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3768   00295C  0E68               	movlw	104
  3769   00295E  6E25               	movwf	??_stop^0,c
  3770   002960  0EE4               	movlw	228
  3771   002962                     u2627:
  3772   002962  2EE8               	decfsz	wreg,f,c
  3773   002964  D7FE               	bra	u2627
  3774   002966  2E25               	decfsz	??_stop^0,f,c
  3775   002968  D7FC               	bra	u2627
  3776   00296A  D000               	nop2	
  3777   00296C                     
  3778                           ;dc_motor.c: 265:         }
  3779   00296C  4A28               	infsnz	stop@i^0,f,c
  3780   00296E  2A29               	incf	(stop@i+1)^0,f,c
  3781   002970                     l508:
  3782   002970  5024               	movf	stop@straightRamp^0,w,c
  3783   002972  6E25               	movwf	??_stop^0,c
  3784   002974  6A26               	clrf	(??_stop+1)^0,c
  3785   002976  5025               	movf	??_stop^0,w,c
  3786   002978  5C28               	subwf	stop@i^0,w,c
  3787   00297A  5029               	movf	(stop@i+1)^0,w,c
  3788   00297C  0A80               	xorlw	128
  3789   00297E  6E27               	movwf	(??_stop+2)^0,c
  3790   002980  5026               	movf	(??_stop+1)^0,w,c
  3791   002982  0A80               	xorlw	128
  3792   002984  5827               	subwfb	(??_stop+2)^0,w,c
  3793   002986  A0D8               	btfss	status,0,c
  3794   002988  EFC8  F014         	goto	u1121
  3795   00298C  EFCA  F014         	goto	u1120
  3796   002990                     u1121:
  3797   002990  EFAE  F014         	goto	l2383
  3798   002994                     u1120:
  3799   002994                     
  3800                           ;dc_motor.c: 266:     }
  3801   002994  062A               	decf	stop@cur_power^0,f,c
  3802   002996  A0D8               	btfss	status,0,c
  3803   002998  062B               	decf	(stop@cur_power+1)^0,f,c
  3804   00299A  EF79  F014         	goto	l2371
  3805   00299E                     l2391:
  3806                           
  3807                           ;dc_motor.c: 267:     mL->power = 0;
  3808   00299E  C020  FFD9         	movff	stop@mL,fsr2l
  3809   0029A2  C021  FFDA         	movff	stop@mL+1,fsr2h
  3810   0029A6  6ADF               	clrf	indf2,c
  3811                           
  3812                           ;dc_motor.c: 268:     mR->power = 0;
  3813   0029A8  C022  FFD9         	movff	stop@mR,fsr2l
  3814   0029AC  C023  FFDA         	movff	stop@mR+1,fsr2h
  3815   0029B0  6ADF               	clrf	indf2,c
  3816   0029B2  0012               	return		;funcret
  3817   0029B4                     __end_of_stop:
  3818                           	callstack 0
  3819                           
  3820 ;; *************** function _reverseOneSquare *****************
  3821 ;; Defined at:
  3822 ;;		line 353 in file "dc_motor.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3825 ;;		 -> main@motorL(10), 
  3826 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3827 ;;		 -> main@motorR(10), 
  3828 ;;  straightSpee    1   35[COMRAM] unsigned char 
  3829 ;;  reverseDurat    1   36[COMRAM] unsigned char 
  3830 ;;  straightRamp    1   37[COMRAM] unsigned char 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  cur_power       2   43[COMRAM] int 
  3833 ;;  i               2   41[COMRAM] int 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      void 
  3836 ;; Registers used:
  3837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3843 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3846 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3847 ;;Total ram usage:       14 bytes
  3848 ;; Hardware stack levels used: 1
  3849 ;; Hardware stack levels required when called: 7
  3850 ;; This function calls:
  3851 ;;		_setMotorPWM
  3852 ;; This function is called by:
  3853 ;;		_move
  3854 ;;		_returnHome
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text7
  3859   001F48                     __ptext7:
  3860                           	callstack 0
  3861   001F48                     _reverseOneSquare:
  3862                           	callstack 22
  3863   001F48                     
  3864                           ;dc_motor.c: 353: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 354: {;dc_motor.c
      +                          : 355:     mL->direction = 0;
  3865   001F48  EE20 F001          	lfsr	2,1
  3866   001F4C  5020               	movf	reverseOneSquare@mL^0,w,c
  3867   001F4E  26D9               	addwf	fsr2l,f,c
  3868   001F50  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  3869   001F52  22DA               	addwfc	fsr2h,f,c
  3870   001F54  6ADF               	clrf	indf2,c
  3871                           
  3872                           ;dc_motor.c: 356:     mR->direction = 0;
  3873   001F56  EE20 F001          	lfsr	2,1
  3874   001F5A  5022               	movf	reverseOneSquare@mR^0,w,c
  3875   001F5C  26D9               	addwf	fsr2l,f,c
  3876   001F5E  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  3877   001F60  22DA               	addwfc	fsr2h,f,c
  3878   001F62  6ADF               	clrf	indf2,c
  3879   001F64                     
  3880                           ;dc_motor.c: 357:     int i;;dc_motor.c: 358:     int cur_power;;dc_motor.c: 359:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3881   001F64  0E00               	movlw	0
  3882   001F66  6E2D               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3883   001F68  0E01               	movlw	1
  3884   001F6A  6E2C               	movwf	reverseOneSquare@cur_power^0,c
  3885   001F6C  EF02  F010         	goto	l2505
  3886   001F70                     l2491:
  3887                           
  3888                           ;dc_motor.c: 360:         mL->power = cur_power+mL->compensation;
  3889   001F70  EE20 F009          	lfsr	2,9
  3890   001F74  5020               	movf	reverseOneSquare@mL^0,w,c
  3891   001F76  26D9               	addwf	fsr2l,f,c
  3892   001F78  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  3893   001F7A  22DA               	addwfc	fsr2h,f,c
  3894   001F7C  50DF               	movf	indf2,w,c
  3895   001F7E  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  3896   001F80  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  3897   001F84  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  3898   001F88  6EDF               	movwf	indf2,c
  3899                           
  3900                           ;dc_motor.c: 361:         mR->power = cur_power+mR->compensation;
  3901   001F8A  EE20 F009          	lfsr	2,9
  3902   001F8E  5022               	movf	reverseOneSquare@mR^0,w,c
  3903   001F90  26D9               	addwf	fsr2l,f,c
  3904   001F92  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  3905   001F94  22DA               	addwfc	fsr2h,f,c
  3906   001F96  50DF               	movf	indf2,w,c
  3907   001F98  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  3908   001F9A  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  3909   001F9E  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  3910   001FA2  6EDF               	movwf	indf2,c
  3911   001FA4                     
  3912                           ;dc_motor.c: 362:         setMotorPWM(mL);
  3913   001FA4  C020  F01A         	movff	reverseOneSquare@mL,setMotorPWM@m
  3914   001FA8  C021  F01B         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  3915   001FAC  EC74  F012         	call	_setMotorPWM	;wreg free
  3916   001FB0                     
  3917                           ;dc_motor.c: 363:         setMotorPWM(mR);
  3918   001FB0  C022  F01A         	movff	reverseOneSquare@mR,setMotorPWM@m
  3919   001FB4  C023  F01B         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  3920   001FB8  EC74  F012         	call	_setMotorPWM	;wreg free
  3921   001FBC                     
  3922                           ;dc_motor.c: 364:         for (i=0;i<straightRamp;i++) {
  3923   001FBC  0E00               	movlw	0
  3924   001FBE  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  3925   001FC0  0E00               	movlw	0
  3926   001FC2  6E2A               	movwf	reverseOneSquare@i^0,c
  3927   001FC4  EFEE  F00F         	goto	l559
  3928   001FC8                     l2499:
  3929                           
  3930                           ;dc_motor.c: 365:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3931   001FC8  0E68               	movlw	104
  3932   001FCA  6E27               	movwf	??_reverseOneSquare^0,c
  3933   001FCC  0EE4               	movlw	228
  3934   001FCE                     u2637:
  3935   001FCE  2EE8               	decfsz	wreg,f,c
  3936   001FD0  D7FE               	bra	u2637
  3937   001FD2  2E27               	decfsz	??_reverseOneSquare^0,f,c
  3938   001FD4  D7FC               	bra	u2637
  3939   001FD6  D000               	nop2	
  3940   001FD8                     
  3941                           ;dc_motor.c: 366:         }
  3942   001FD8  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  3943   001FDA  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  3944   001FDC                     l559:
  3945   001FDC  5026               	movf	reverseOneSquare@straightRamp^0,w,c
  3946   001FDE  6E27               	movwf	??_reverseOneSquare^0,c
  3947   001FE0  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  3948   001FE2  5027               	movf	??_reverseOneSquare^0,w,c
  3949   001FE4  5C2A               	subwf	reverseOneSquare@i^0,w,c
  3950   001FE6  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  3951   001FE8  0A80               	xorlw	128
  3952   001FEA  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  3953   001FEC  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  3954   001FEE  0A80               	xorlw	128
  3955   001FF0  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3956   001FF2  A0D8               	btfss	status,0,c
  3957   001FF4  EFFE  F00F         	goto	u1231
  3958   001FF8  EF00  F010         	goto	u1230
  3959   001FFC                     u1231:
  3960   001FFC  EFE4  F00F         	goto	l2499
  3961   002000                     u1230:
  3962   002000                     
  3963                           ;dc_motor.c: 367:     }
  3964   002000  4A2C               	infsnz	reverseOneSquare@cur_power^0,f,c
  3965   002002  2A2D               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3966   002004                     l2505:
  3967   002004  5024               	movf	reverseOneSquare@straightSpeed^0,w,c
  3968   002006  6E27               	movwf	??_reverseOneSquare^0,c
  3969   002008  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  3970   00200A  502C               	movf	reverseOneSquare@cur_power^0,w,c
  3971   00200C  5C27               	subwf	??_reverseOneSquare^0,w,c
  3972   00200E  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  3973   002010  0A80               	xorlw	128
  3974   002012  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  3975   002014  502D               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3976   002016  0A80               	xorlw	128
  3977   002018  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3978   00201A  B0D8               	btfsc	status,0,c
  3979   00201C  EF12  F010         	goto	u1241
  3980   002020  EF14  F010         	goto	u1240
  3981   002024                     u1241:
  3982   002024  EFB8  F00F         	goto	l2491
  3983   002028                     u1240:
  3984   002028                     
  3985                           ;dc_motor.c: 369:     for (i=0;i<reverseDuration;i++) {
  3986   002028  0E00               	movlw	0
  3987   00202A  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  3988   00202C  0E00               	movlw	0
  3989   00202E  6E2A               	movwf	reverseOneSquare@i^0,c
  3990   002030  EF24  F010         	goto	l563
  3991   002034                     l2509:
  3992                           
  3993                           ;dc_motor.c: 370:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3994   002034  0E68               	movlw	104
  3995   002036  6E27               	movwf	??_reverseOneSquare^0,c
  3996   002038  0EE4               	movlw	228
  3997   00203A                     u2647:
  3998   00203A  2EE8               	decfsz	wreg,f,c
  3999   00203C  D7FE               	bra	u2647
  4000   00203E  2E27               	decfsz	??_reverseOneSquare^0,f,c
  4001   002040  D7FC               	bra	u2647
  4002   002042  D000               	nop2	
  4003   002044                     
  4004                           ;dc_motor.c: 371:         }
  4005   002044  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  4006   002046  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  4007   002048                     l563:
  4008   002048  5025               	movf	reverseOneSquare@reverseDuration^0,w,c
  4009   00204A  6E27               	movwf	??_reverseOneSquare^0,c
  4010   00204C  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  4011   00204E  5027               	movf	??_reverseOneSquare^0,w,c
  4012   002050  5C2A               	subwf	reverseOneSquare@i^0,w,c
  4013   002052  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  4014   002054  0A80               	xorlw	128
  4015   002056  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  4016   002058  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  4017   00205A  0A80               	xorlw	128
  4018   00205C  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4019   00205E  A0D8               	btfss	status,0,c
  4020   002060  EF34  F010         	goto	u1251
  4021   002064  EF36  F010         	goto	u1250
  4022   002068                     u1251:
  4023   002068  EF1A  F010         	goto	l2509
  4024   00206C                     u1250:
  4025   00206C                     
  4026                           ;dc_motor.c: 373:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  4027   00206C  C024  F02C         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  4028   002070  6A2D               	clrf	(reverseOneSquare@cur_power+1)^0,c
  4029   002072                     l2513:
  4030   002072  BE2D               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  4031   002074  EF40  F010         	goto	u1260
  4032   002078  EF3E  F010         	goto	u1261
  4033   00207C                     u1261:
  4034   00207C  EF42  F010         	goto	l2517
  4035   002080                     u1260:
  4036   002080  EF8F  F010         	goto	l2533
  4037   002084                     l2517:
  4038                           
  4039                           ;dc_motor.c: 374:         mL->power = cur_power+mL->compensation;
  4040   002084  EE20 F009          	lfsr	2,9
  4041   002088  5020               	movf	reverseOneSquare@mL^0,w,c
  4042   00208A  26D9               	addwf	fsr2l,f,c
  4043   00208C  5021               	movf	(reverseOneSquare@mL+1)^0,w,c
  4044   00208E  22DA               	addwfc	fsr2h,f,c
  4045   002090  50DF               	movf	indf2,w,c
  4046   002092  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  4047   002094  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4048   002098  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4049   00209C  6EDF               	movwf	indf2,c
  4050                           
  4051                           ;dc_motor.c: 375:         mR->power = cur_power+mR->compensation;
  4052   00209E  EE20 F009          	lfsr	2,9
  4053   0020A2  5022               	movf	reverseOneSquare@mR^0,w,c
  4054   0020A4  26D9               	addwf	fsr2l,f,c
  4055   0020A6  5023               	movf	(reverseOneSquare@mR+1)^0,w,c
  4056   0020A8  22DA               	addwfc	fsr2h,f,c
  4057   0020AA  50DF               	movf	indf2,w,c
  4058   0020AC  242C               	addwf	reverseOneSquare@cur_power^0,w,c
  4059   0020AE  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  4060   0020B2  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  4061   0020B6  6EDF               	movwf	indf2,c
  4062   0020B8                     
  4063                           ;dc_motor.c: 376:         setMotorPWM(mL);
  4064   0020B8  C020  F01A         	movff	reverseOneSquare@mL,setMotorPWM@m
  4065   0020BC  C021  F01B         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  4066   0020C0  EC74  F012         	call	_setMotorPWM	;wreg free
  4067   0020C4                     
  4068                           ;dc_motor.c: 377:         setMotorPWM(mR);
  4069   0020C4  C022  F01A         	movff	reverseOneSquare@mR,setMotorPWM@m
  4070   0020C8  C023  F01B         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  4071   0020CC  EC74  F012         	call	_setMotorPWM	;wreg free
  4072   0020D0                     
  4073                           ;dc_motor.c: 378:         for (i=0;i<straightRamp;i++) {
  4074   0020D0  0E00               	movlw	0
  4075   0020D2  6E2B               	movwf	(reverseOneSquare@i+1)^0,c
  4076   0020D4  0E00               	movlw	0
  4077   0020D6  6E2A               	movwf	reverseOneSquare@i^0,c
  4078   0020D8  EF78  F010         	goto	l568
  4079   0020DC                     l2525:
  4080                           
  4081                           ;dc_motor.c: 379:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4082   0020DC  0E68               	movlw	104
  4083   0020DE  6E27               	movwf	??_reverseOneSquare^0,c
  4084   0020E0  0EE4               	movlw	228
  4085   0020E2                     u2657:
  4086   0020E2  2EE8               	decfsz	wreg,f,c
  4087   0020E4  D7FE               	bra	u2657
  4088   0020E6  2E27               	decfsz	??_reverseOneSquare^0,f,c
  4089   0020E8  D7FC               	bra	u2657
  4090   0020EA  D000               	nop2	
  4091   0020EC                     
  4092                           ;dc_motor.c: 380:         }
  4093   0020EC  4A2A               	infsnz	reverseOneSquare@i^0,f,c
  4094   0020EE  2A2B               	incf	(reverseOneSquare@i+1)^0,f,c
  4095   0020F0                     l568:
  4096   0020F0  5026               	movf	reverseOneSquare@straightRamp^0,w,c
  4097   0020F2  6E27               	movwf	??_reverseOneSquare^0,c
  4098   0020F4  6A28               	clrf	(??_reverseOneSquare+1)^0,c
  4099   0020F6  5027               	movf	??_reverseOneSquare^0,w,c
  4100   0020F8  5C2A               	subwf	reverseOneSquare@i^0,w,c
  4101   0020FA  502B               	movf	(reverseOneSquare@i+1)^0,w,c
  4102   0020FC  0A80               	xorlw	128
  4103   0020FE  6E29               	movwf	(??_reverseOneSquare+2)^0,c
  4104   002100  5028               	movf	(??_reverseOneSquare+1)^0,w,c
  4105   002102  0A80               	xorlw	128
  4106   002104  5829               	subwfb	(??_reverseOneSquare+2)^0,w,c
  4107   002106  A0D8               	btfss	status,0,c
  4108   002108  EF88  F010         	goto	u1271
  4109   00210C  EF8A  F010         	goto	u1270
  4110   002110                     u1271:
  4111   002110  EF6E  F010         	goto	l2525
  4112   002114                     u1270:
  4113   002114                     
  4114                           ;dc_motor.c: 381:     }
  4115   002114  062C               	decf	reverseOneSquare@cur_power^0,f,c
  4116   002116  A0D8               	btfss	status,0,c
  4117   002118  062D               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  4118   00211A  EF39  F010         	goto	l2513
  4119   00211E                     l2533:
  4120                           
  4121                           ;dc_motor.c: 382:     mL->power = 0;
  4122   00211E  C020  FFD9         	movff	reverseOneSquare@mL,fsr2l
  4123   002122  C021  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  4124   002126  6ADF               	clrf	indf2,c
  4125                           
  4126                           ;dc_motor.c: 383:     mR->power = 0;
  4127   002128  C022  FFD9         	movff	reverseOneSquare@mR,fsr2l
  4128   00212C  C023  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  4129   002130  6ADF               	clrf	indf2,c
  4130   002132  0012               	return		;funcret
  4131   002134                     __end_of_reverseOneSquare:
  4132                           	callstack 0
  4133                           
  4134 ;; *************** function _resetTimer *****************
  4135 ;; Defined at:
  4136 ;;		line 23 in file "timers.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used: 1
  4156 ;; Hardware stack levels required when called: 5
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;;		_returnHome
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text8
  4166   00315A                     __ptext8:
  4167                           	callstack 0
  4168   00315A                     _resetTimer:
  4169                           	callstack 25
  4170   00315A                     
  4171                           ;timers.c: 25:     TMR0H=0;
  4172   00315A  0E00               	movlw	0
  4173   00315C  6ED4               	movwf	212,c	;volatile
  4174                           
  4175                           ;timers.c: 26:     TMR0L=0;
  4176   00315E  0E00               	movlw	0
  4177   003160  6ED3               	movwf	211,c	;volatile
  4178   003162  0012               	return		;funcret
  4179   003164                     __end_of_resetTimer:
  4180                           	callstack 0
  4181                           
  4182 ;; *************** function _get16bitTMR0val *****************
  4183 ;; Defined at:
  4184 ;;		line 33 in file "timers.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  timer_val       2   20[COMRAM] unsigned int 
  4189 ;;  timer_high      2   18[COMRAM] unsigned int 
  4190 ;;  timer_low       2   16[COMRAM] unsigned int 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  2   12[COMRAM] unsigned int 
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4201 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4203 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;Total ram usage:       10 bytes
  4205 ;; Hardware stack levels used: 1
  4206 ;; Hardware stack levels required when called: 5
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_main
  4211 ;;		_returnHome
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text9
  4216   002F56                     __ptext9:
  4217                           	callstack 0
  4218   002F56                     _get16bitTMR0val:
  4219                           	callstack 23
  4220   002F56                     
  4221                           ;timers.c: 36:     unsigned int timer_low = TMR0L;
  4222   002F56  CFD3 F011          	movff	4051,get16bitTMR0val@timer_low	;volatile
  4223   002F5A  6A12               	clrf	(get16bitTMR0val@timer_low+1)^0,c
  4224                           
  4225                           ;timers.c: 37:     unsigned int timer_high = TMR0H;
  4226   002F5C  CFD4 F013          	movff	4052,get16bitTMR0val@timer_high	;volatile
  4227   002F60  6A14               	clrf	(get16bitTMR0val@timer_high+1)^0,c
  4228   002F62                     
  4229                           ;timers.c: 38:     unsigned int timer_val = (timer_high<<8) | timer_low;
  4230   002F62  5013               	movf	get16bitTMR0val@timer_high^0,w,c
  4231   002F64  6E10               	movwf	(??_get16bitTMR0val+1)^0,c
  4232   002F66  6A0F               	clrf	??_get16bitTMR0val^0,c
  4233   002F68  5011               	movf	get16bitTMR0val@timer_low^0,w,c
  4234   002F6A  100F               	iorwf	??_get16bitTMR0val^0,w,c
  4235   002F6C  6E15               	movwf	get16bitTMR0val@timer_val^0,c
  4236   002F6E  5012               	movf	(get16bitTMR0val@timer_low+1)^0,w,c
  4237   002F70  1010               	iorwf	(??_get16bitTMR0val+1)^0,w,c
  4238   002F72  6E16               	movwf	(get16bitTMR0val@timer_val+1)^0,c
  4239   002F74                     
  4240                           ;timers.c: 39:     return timer_val;
  4241   002F74  C015  F00D         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  4242   002F78  C016  F00E         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  4243   002F7C  0012               	return		;funcret
  4244   002F7E                     __end_of_get16bitTMR0val:
  4245                           	callstack 0
  4246                           
  4247 ;; *************** function _fullSpeedAhead *****************
  4248 ;; Defined at:
  4249 ;;		line 336 in file "dc_motor.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4252 ;;		 -> main@motorL(10), 
  4253 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4254 ;;		 -> main@motorR(10), 
  4255 ;;  straightSpee    1   35[COMRAM] unsigned char 
  4256 ;;  straightRamp    1   36[COMRAM] unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  cur_power       2   42[COMRAM] int 
  4259 ;;  i               2   40[COMRAM] int 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4269 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4270 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4272 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4273 ;;Total ram usage:       13 bytes
  4274 ;; Hardware stack levels used: 1
  4275 ;; Hardware stack levels required when called: 7
  4276 ;; This function calls:
  4277 ;;		_setMotorPWM
  4278 ;; This function is called by:
  4279 ;;		_main
  4280 ;;		_move
  4281 ;;		_returnHome
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text10
  4286   0029B4                     __ptext10:
  4287                           	callstack 0
  4288   0029B4                     _fullSpeedAhead:
  4289                           	callstack 21
  4290   0029B4                     
  4291                           ;dc_motor.c: 336: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 337: {;dc_motor.c: 338:     mL->direction = 1;
  4292   0029B4  EE20 F001          	lfsr	2,1
  4293   0029B8  5020               	movf	fullSpeedAhead@mL^0,w,c
  4294   0029BA  26D9               	addwf	fsr2l,f,c
  4295   0029BC  5021               	movf	(fullSpeedAhead@mL+1)^0,w,c
  4296   0029BE  22DA               	addwfc	fsr2h,f,c
  4297   0029C0  0E01               	movlw	1
  4298   0029C2  6EDF               	movwf	indf2,c
  4299                           
  4300                           ;dc_motor.c: 339:     mR->direction = 1;
  4301   0029C4  EE20 F001          	lfsr	2,1
  4302   0029C8  5022               	movf	fullSpeedAhead@mR^0,w,c
  4303   0029CA  26D9               	addwf	fsr2l,f,c
  4304   0029CC  5023               	movf	(fullSpeedAhead@mR+1)^0,w,c
  4305   0029CE  22DA               	addwfc	fsr2h,f,c
  4306   0029D0  0E01               	movlw	1
  4307   0029D2  6EDF               	movwf	indf2,c
  4308   0029D4                     
  4309                           ;dc_motor.c: 340:     int i;;dc_motor.c: 341:     int cur_power;;dc_motor.c: 342:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  4310   0029D4  0E00               	movlw	0
  4311   0029D6  6E2C               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  4312   0029D8  0E01               	movlw	1
  4313   0029DA  6E2B               	movwf	fullSpeedAhead@cur_power^0,c
  4314   0029DC  EF3A  F015         	goto	l2357
  4315   0029E0                     l2343:
  4316                           
  4317                           ;dc_motor.c: 343:         mL->power = cur_power+mL->compensation;
  4318   0029E0  EE20 F009          	lfsr	2,9
  4319   0029E4  5020               	movf	fullSpeedAhead@mL^0,w,c
  4320   0029E6  26D9               	addwf	fsr2l,f,c
  4321   0029E8  5021               	movf	(fullSpeedAhead@mL+1)^0,w,c
  4322   0029EA  22DA               	addwfc	fsr2h,f,c
  4323   0029EC  50DF               	movf	indf2,w,c
  4324   0029EE  242B               	addwf	fullSpeedAhead@cur_power^0,w,c
  4325   0029F0  C020  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4326   0029F4  C021  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4327   0029F8  6EDF               	movwf	indf2,c
  4328                           
  4329                           ;dc_motor.c: 344:         mR->power = cur_power+mR->compensation;
  4330   0029FA  EE20 F009          	lfsr	2,9
  4331   0029FE  5022               	movf	fullSpeedAhead@mR^0,w,c
  4332   002A00  26D9               	addwf	fsr2l,f,c
  4333   002A02  5023               	movf	(fullSpeedAhead@mR+1)^0,w,c
  4334   002A04  22DA               	addwfc	fsr2h,f,c
  4335   002A06  50DF               	movf	indf2,w,c
  4336   002A08  242B               	addwf	fullSpeedAhead@cur_power^0,w,c
  4337   002A0A  C022  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4338   002A0E  C023  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4339   002A12  6EDF               	movwf	indf2,c
  4340   002A14                     
  4341                           ;dc_motor.c: 345:         setMotorPWM(mL);
  4342   002A14  C020  F01A         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4343   002A18  C021  F01B         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4344   002A1C  EC74  F012         	call	_setMotorPWM	;wreg free
  4345   002A20                     
  4346                           ;dc_motor.c: 346:         setMotorPWM(mR);
  4347   002A20  C022  F01A         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4348   002A24  C023  F01B         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4349   002A28  EC74  F012         	call	_setMotorPWM	;wreg free
  4350   002A2C                     
  4351                           ;dc_motor.c: 347:         for (i=0;i<straightRamp;i++) {
  4352   002A2C  0E00               	movlw	0
  4353   002A2E  6E2A               	movwf	(fullSpeedAhead@i+1)^0,c
  4354   002A30  0E00               	movlw	0
  4355   002A32  6E29               	movwf	fullSpeedAhead@i^0,c
  4356   002A34  EF26  F015         	goto	l550
  4357   002A38                     l2351:
  4358                           
  4359                           ;dc_motor.c: 348:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4360   002A38  0E68               	movlw	104
  4361   002A3A  6E26               	movwf	??_fullSpeedAhead^0,c
  4362   002A3C  0EE4               	movlw	228
  4363   002A3E                     u2667:
  4364   002A3E  2EE8               	decfsz	wreg,f,c
  4365   002A40  D7FE               	bra	u2667
  4366   002A42  2E26               	decfsz	??_fullSpeedAhead^0,f,c
  4367   002A44  D7FC               	bra	u2667
  4368   002A46  D000               	nop2	
  4369   002A48                     
  4370                           ;dc_motor.c: 349:         }
  4371   002A48  4A29               	infsnz	fullSpeedAhead@i^0,f,c
  4372   002A4A  2A2A               	incf	(fullSpeedAhead@i+1)^0,f,c
  4373   002A4C                     l550:
  4374   002A4C  5025               	movf	fullSpeedAhead@straightRamp^0,w,c
  4375   002A4E  6E26               	movwf	??_fullSpeedAhead^0,c
  4376   002A50  6A27               	clrf	(??_fullSpeedAhead+1)^0,c
  4377   002A52  5026               	movf	??_fullSpeedAhead^0,w,c
  4378   002A54  5C29               	subwf	fullSpeedAhead@i^0,w,c
  4379   002A56  502A               	movf	(fullSpeedAhead@i+1)^0,w,c
  4380   002A58  0A80               	xorlw	128
  4381   002A5A  6E28               	movwf	(??_fullSpeedAhead+2)^0,c
  4382   002A5C  5027               	movf	(??_fullSpeedAhead+1)^0,w,c
  4383   002A5E  0A80               	xorlw	128
  4384   002A60  5828               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4385   002A62  A0D8               	btfss	status,0,c
  4386   002A64  EF36  F015         	goto	u1091
  4387   002A68  EF38  F015         	goto	u1090
  4388   002A6C                     u1091:
  4389   002A6C  EF1C  F015         	goto	l2351
  4390   002A70                     u1090:
  4391   002A70                     
  4392                           ;dc_motor.c: 350:     }
  4393   002A70  4A2B               	infsnz	fullSpeedAhead@cur_power^0,f,c
  4394   002A72  2A2C               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  4395   002A74                     l2357:
  4396   002A74  5024               	movf	fullSpeedAhead@straightSpeed^0,w,c
  4397   002A76  6E26               	movwf	??_fullSpeedAhead^0,c
  4398   002A78  6A27               	clrf	(??_fullSpeedAhead+1)^0,c
  4399   002A7A  502B               	movf	fullSpeedAhead@cur_power^0,w,c
  4400   002A7C  5C26               	subwf	??_fullSpeedAhead^0,w,c
  4401   002A7E  5027               	movf	(??_fullSpeedAhead+1)^0,w,c
  4402   002A80  0A80               	xorlw	128
  4403   002A82  6E28               	movwf	(??_fullSpeedAhead+2)^0,c
  4404   002A84  502C               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  4405   002A86  0A80               	xorlw	128
  4406   002A88  5828               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4407   002A8A  B0D8               	btfsc	status,0,c
  4408   002A8C  EF4A  F015         	goto	u1101
  4409   002A90  EF4C  F015         	goto	u1100
  4410   002A94                     u1101:
  4411   002A94  EFF0  F014         	goto	l2343
  4412   002A98                     u1100:
  4413   002A98  0012               	return		;funcret
  4414   002A9A                     __end_of_fullSpeedAhead:
  4415                           	callstack 0
  4416                           
  4417 ;; *************** function _setMotorPWM *****************
  4418 ;; Defined at:
  4419 ;;		line 67 in file "dc_motor.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  m               2   25[COMRAM] PTR struct DC_motor
  4422 ;;		 -> main@motorR(10), main@motorL(10), 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  negDuty         1   30[COMRAM] unsigned char 
  4425 ;;  posDuty         1   29[COMRAM] unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4439 ;;Total ram usage:        6 bytes
  4440 ;; Hardware stack levels used: 1
  4441 ;; Hardware stack levels required when called: 6
  4442 ;; This function calls:
  4443 ;;		___lwdiv
  4444 ;;		___wmul
  4445 ;; This function is called by:
  4446 ;;		_stop
  4447 ;;		_turnLeft
  4448 ;;		_turnRight
  4449 ;;		_fullSpeedAhead
  4450 ;;		_reverseOneSquare
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text11
  4455   0024E8                     __ptext11:
  4456                           	callstack 0
  4457   0024E8                     _setMotorPWM:
  4458                           	callstack 23
  4459   0024E8                     
  4460                           ;dc_motor.c: 67: void setMotorPWM(DC_motor *m);dc_motor.c: 68: {;dc_motor.c: 69:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 71:     if(m->brakemode) {
  4461   0024E8  EE20 F002          	lfsr	2,2
  4462   0024EC  501A               	movf	setMotorPWM@m^0,w,c
  4463   0024EE  26D9               	addwf	fsr2l,f,c
  4464   0024F0  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4465   0024F2  22DA               	addwfc	fsr2h,f,c
  4466   0024F4  50DF               	movf	indf2,w,c
  4467   0024F6  B4D8               	btfsc	status,2,c
  4468   0024F8  EF80  F012         	goto	u1051
  4469   0024FC  EF82  F012         	goto	u1050
  4470   002500                     u1051:
  4471   002500  EFB6  F012         	goto	l2325
  4472   002504                     u1050:
  4473   002504                     
  4474                           ;dc_motor.c: 72:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  4475   002504  C01A  FFD9         	movff	setMotorPWM@m,fsr2l
  4476   002508  C01B  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4477   00250C  50DF               	movf	indf2,w,c
  4478   00250E  6E1C               	movwf	??_setMotorPWM^0,c
  4479   002510  501C               	movf	??_setMotorPWM^0,w,c
  4480   002512  6E0D               	movwf	___wmul@multiplier^0,c
  4481   002514  6A0E               	clrf	(___wmul@multiplier+1)^0,c
  4482   002516  EE20 F003          	lfsr	2,3
  4483   00251A  501A               	movf	setMotorPWM@m^0,w,c
  4484   00251C  26D9               	addwf	fsr2l,f,c
  4485   00251E  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4486   002520  22DA               	addwfc	fsr2h,f,c
  4487   002522  CFDE F00F          	movff	postinc2,___wmul@multiplicand
  4488   002526  CFDD F010          	movff	postdec2,___wmul@multiplicand+1
  4489   00252A  ECE7  F017         	call	___wmul	;wreg free
  4490   00252E  C00D  F013         	movff	?___wmul,___lwdiv@dividend
  4491   002532  C00E  F014         	movff	?___wmul+1,___lwdiv@dividend+1
  4492   002536  0E00               	movlw	0
  4493   002538  6E16               	movwf	(___lwdiv@divisor+1)^0,c
  4494   00253A  0E64               	movlw	100
  4495   00253C  6E15               	movwf	___lwdiv@divisor^0,c
  4496   00253E  EC71  F016         	call	___lwdiv	;wreg free
  4497   002542  EE20 F003          	lfsr	2,3
  4498   002546  501A               	movf	setMotorPWM@m^0,w,c
  4499   002548  26D9               	addwf	fsr2l,f,c
  4500   00254A  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4501   00254C  22DA               	addwfc	fsr2h,f,c
  4502   00254E  50DF               	movf	indf2,w,c
  4503   002550  6E1D               	movwf	(??_setMotorPWM+1)^0,c
  4504   002552  5013               	movf	?___lwdiv^0,w,c
  4505   002554  5C1D               	subwf	(??_setMotorPWM+1)^0,w,c
  4506   002556  6E1E               	movwf	setMotorPWM@posDuty^0,c
  4507   002558                     
  4508                           ;dc_motor.c: 73:         negDuty=m->PWMperiod;
  4509   002558  EE20 F003          	lfsr	2,3
  4510   00255C  501A               	movf	setMotorPWM@m^0,w,c
  4511   00255E  26D9               	addwf	fsr2l,f,c
  4512   002560  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4513   002562  22DA               	addwfc	fsr2h,f,c
  4514   002564  50DF               	movf	indf2,w,c
  4515   002566  6E1F               	movwf	setMotorPWM@negDuty^0,c
  4516                           
  4517                           ;dc_motor.c: 74:     }
  4518   002568  EFD9  F012         	goto	l2329
  4519   00256C                     l2325:
  4520                           
  4521                           ;dc_motor.c: 76:         posDuty=0;
  4522   00256C  0E00               	movlw	0
  4523   00256E  6E1E               	movwf	setMotorPWM@posDuty^0,c
  4524   002570                     
  4525                           ;dc_motor.c: 77:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4526   002570  C01A  FFD9         	movff	setMotorPWM@m,fsr2l
  4527   002574  C01B  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4528   002578  50DF               	movf	indf2,w,c
  4529   00257A  6E1C               	movwf	??_setMotorPWM^0,c
  4530   00257C  501C               	movf	??_setMotorPWM^0,w,c
  4531   00257E  6E0D               	movwf	___wmul@multiplier^0,c
  4532   002580  6A0E               	clrf	(___wmul@multiplier+1)^0,c
  4533   002582  EE20 F003          	lfsr	2,3
  4534   002586  501A               	movf	setMotorPWM@m^0,w,c
  4535   002588  26D9               	addwf	fsr2l,f,c
  4536   00258A  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4537   00258C  22DA               	addwfc	fsr2h,f,c
  4538   00258E  CFDE F00F          	movff	postinc2,___wmul@multiplicand
  4539   002592  CFDD F010          	movff	postdec2,___wmul@multiplicand+1
  4540   002596  ECE7  F017         	call	___wmul	;wreg free
  4541   00259A  C00D  F013         	movff	?___wmul,___lwdiv@dividend
  4542   00259E  C00E  F014         	movff	?___wmul+1,___lwdiv@dividend+1
  4543   0025A2  0E00               	movlw	0
  4544   0025A4  6E16               	movwf	(___lwdiv@divisor+1)^0,c
  4545   0025A6  0E64               	movlw	100
  4546   0025A8  6E15               	movwf	___lwdiv@divisor^0,c
  4547   0025AA  EC71  F016         	call	___lwdiv	;wreg free
  4548   0025AE  5013               	movf	?___lwdiv^0,w,c
  4549   0025B0  6E1F               	movwf	setMotorPWM@negDuty^0,c
  4550   0025B2                     l2329:
  4551                           
  4552                           ;dc_motor.c: 80:     if (m->direction) {
  4553   0025B2  EE20 F001          	lfsr	2,1
  4554   0025B6  501A               	movf	setMotorPWM@m^0,w,c
  4555   0025B8  26D9               	addwf	fsr2l,f,c
  4556   0025BA  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4557   0025BC  22DA               	addwfc	fsr2h,f,c
  4558   0025BE  50DF               	movf	indf2,w,c
  4559   0025C0  B4D8               	btfsc	status,2,c
  4560   0025C2  EFE5  F012         	goto	u1061
  4561   0025C6  EFE7  F012         	goto	u1060
  4562   0025CA                     u1061:
  4563   0025CA  EF09  F013         	goto	l2333
  4564   0025CE                     u1060:
  4565   0025CE                     
  4566                           ;dc_motor.c: 81:         *(m->posDutyHighByte)=posDuty;
  4567   0025CE  EE20 F005          	lfsr	2,5
  4568   0025D2  501A               	movf	setMotorPWM@m^0,w,c
  4569   0025D4  26D9               	addwf	fsr2l,f,c
  4570   0025D6  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4571   0025D8  22DA               	addwfc	fsr2h,f,c
  4572   0025DA  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4573   0025DE  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4574   0025E2  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4575   0025E6  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4576   0025EA  C01E  FFDF         	movff	setMotorPWM@posDuty,indf2
  4577                           
  4578                           ;dc_motor.c: 82:         *(m->negDutyHighByte)=negDuty;
  4579   0025EE  EE20 F007          	lfsr	2,7
  4580   0025F2  501A               	movf	setMotorPWM@m^0,w,c
  4581   0025F4  26D9               	addwf	fsr2l,f,c
  4582   0025F6  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4583   0025F8  22DA               	addwfc	fsr2h,f,c
  4584   0025FA  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4585   0025FE  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4586   002602  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4587   002606  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4588   00260A  C01F  FFDF         	movff	setMotorPWM@negDuty,indf2
  4589                           
  4590                           ;dc_motor.c: 83:     } else {
  4591   00260E  EF29  F013         	goto	l460
  4592   002612                     l2333:
  4593                           
  4594                           ;dc_motor.c: 84:         *(m->posDutyHighByte)=negDuty;
  4595   002612  EE20 F005          	lfsr	2,5
  4596   002616  501A               	movf	setMotorPWM@m^0,w,c
  4597   002618  26D9               	addwf	fsr2l,f,c
  4598   00261A  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4599   00261C  22DA               	addwfc	fsr2h,f,c
  4600   00261E  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4601   002622  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4602   002626  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4603   00262A  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4604   00262E  C01F  FFDF         	movff	setMotorPWM@negDuty,indf2
  4605                           
  4606                           ;dc_motor.c: 85:         *(m->negDutyHighByte)=posDuty;
  4607   002632  EE20 F007          	lfsr	2,7
  4608   002636  501A               	movf	setMotorPWM@m^0,w,c
  4609   002638  26D9               	addwf	fsr2l,f,c
  4610   00263A  501B               	movf	(setMotorPWM@m+1)^0,w,c
  4611   00263C  22DA               	addwfc	fsr2h,f,c
  4612   00263E  CFDE F01C          	movff	postinc2,??_setMotorPWM
  4613   002642  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  4614   002646  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  4615   00264A  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4616   00264E  C01E  FFDF         	movff	setMotorPWM@posDuty,indf2
  4617   002652                     l460:
  4618   002652  0012               	return		;funcret
  4619   002654                     __end_of_setMotorPWM:
  4620                           	callstack 0
  4621                           
  4622 ;; *************** function ___wmul *****************
  4623 ;; Defined at:
  4624 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  multiplier      2   12[COMRAM] unsigned int 
  4627 ;;  multiplicand    2   14[COMRAM] unsigned int 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  product         2   16[COMRAM] unsigned int 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  2   12[COMRAM] unsigned int 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0, prodl, prodh
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4643 ;;Total ram usage:        6 bytes
  4644 ;; Hardware stack levels used: 1
  4645 ;; Hardware stack levels required when called: 5
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		_setMotorPWM
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text12
  4654   002FCE                     __ptext12:
  4655                           	callstack 0
  4656   002FCE                     ___wmul:
  4657                           	callstack 23
  4658   002FCE  500D               	movf	___wmul@multiplier^0,w,c
  4659   002FD0  020F               	mulwf	___wmul@multiplicand^0,c
  4660   002FD2  CFF3 F011          	movff	prodl,___wmul@product
  4661   002FD6  CFF4 F012          	movff	prodh,___wmul@product+1
  4662   002FDA  500D               	movf	___wmul@multiplier^0,w,c
  4663   002FDC  0210               	mulwf	(___wmul@multiplicand+1)^0,c
  4664   002FDE  50F3               	movf	243,w,c
  4665   002FE0  2612               	addwf	(___wmul@product+1)^0,f,c
  4666   002FE2  500E               	movf	(___wmul@multiplier+1)^0,w,c
  4667   002FE4  020F               	mulwf	___wmul@multiplicand^0,c
  4668   002FE6  50F3               	movf	243,w,c
  4669   002FE8  2612               	addwf	(___wmul@product+1)^0,f,c
  4670   002FEA  C011  F00D         	movff	___wmul@product,?___wmul
  4671   002FEE  C012  F00E         	movff	___wmul@product+1,?___wmul+1
  4672   002FF2  0012               	return		;funcret
  4673   002FF4                     __end_of___wmul:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function ___lwdiv *****************
  4677 ;; Defined at:
  4678 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  dividend        2   18[COMRAM] unsigned int 
  4681 ;;  divisor         2   20[COMRAM] unsigned int 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  quotient        2   22[COMRAM] unsigned int 
  4684 ;;  counter         1   24[COMRAM] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  2   18[COMRAM] unsigned int 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4695 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4697 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;Total ram usage:        7 bytes
  4699 ;; Hardware stack levels used: 1
  4700 ;; Hardware stack levels required when called: 5
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_setMotorPWM
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text13
  4709   002CE2                     __ptext13:
  4710                           	callstack 0
  4711   002CE2                     ___lwdiv:
  4712                           	callstack 23
  4713   002CE2  0E00               	movlw	0
  4714   002CE4  6E18               	movwf	(___lwdiv@quotient+1)^0,c
  4715   002CE6  0E00               	movlw	0
  4716   002CE8  6E17               	movwf	___lwdiv@quotient^0,c
  4717   002CEA  5015               	movf	___lwdiv@divisor^0,w,c
  4718   002CEC  1016               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4719   002CEE  B4D8               	btfsc	status,2,c
  4720   002CF0  EF7C  F016         	goto	u1021
  4721   002CF4  EF7E  F016         	goto	u1020
  4722   002CF8                     u1021:
  4723   002CF8  EFA6  F016         	goto	l1097
  4724   002CFC                     u1020:
  4725   002CFC  0E01               	movlw	1
  4726   002CFE  6E19               	movwf	___lwdiv@counter^0,c
  4727   002D00  EF86  F016         	goto	l2293
  4728   002D04                     l2291:
  4729   002D04  90D8               	bcf	status,0,c
  4730   002D06  3615               	rlcf	___lwdiv@divisor^0,f,c
  4731   002D08  3616               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4732   002D0A  2A19               	incf	___lwdiv@counter^0,f,c
  4733   002D0C                     l2293:
  4734   002D0C  AE16               	btfss	(___lwdiv@divisor+1)^0,7,c
  4735   002D0E  EF8B  F016         	goto	u1031
  4736   002D12  EF8D  F016         	goto	u1030
  4737   002D16                     u1031:
  4738   002D16  EF82  F016         	goto	l2291
  4739   002D1A                     u1030:
  4740   002D1A                     l2295:
  4741   002D1A  90D8               	bcf	status,0,c
  4742   002D1C  3617               	rlcf	___lwdiv@quotient^0,f,c
  4743   002D1E  3618               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4744   002D20  5015               	movf	___lwdiv@divisor^0,w,c
  4745   002D22  5C13               	subwf	___lwdiv@dividend^0,w,c
  4746   002D24  5016               	movf	(___lwdiv@divisor+1)^0,w,c
  4747   002D26  5814               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4748   002D28  A0D8               	btfss	status,0,c
  4749   002D2A  EF99  F016         	goto	u1041
  4750   002D2E  EF9B  F016         	goto	u1040
  4751   002D32                     u1041:
  4752   002D32  EFA0  F016         	goto	l2303
  4753   002D36                     u1040:
  4754   002D36  5015               	movf	___lwdiv@divisor^0,w,c
  4755   002D38  5E13               	subwf	___lwdiv@dividend^0,f,c
  4756   002D3A  5016               	movf	(___lwdiv@divisor+1)^0,w,c
  4757   002D3C  5A14               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4758   002D3E  8017               	bsf	___lwdiv@quotient^0,0,c
  4759   002D40                     l2303:
  4760   002D40  90D8               	bcf	status,0,c
  4761   002D42  3216               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4762   002D44  3215               	rrcf	___lwdiv@divisor^0,f,c
  4763   002D46  2E19               	decfsz	___lwdiv@counter^0,f,c
  4764   002D48  EF8D  F016         	goto	l2295
  4765   002D4C                     l1097:
  4766   002D4C  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  4767   002D50  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4768   002D54  0012               	return		;funcret
  4769   002D56                     __end_of___lwdiv:
  4770                           	callstack 0
  4771                           
  4772 ;; *************** function _initUSART4 *****************
  4773 ;; Defined at:
  4774 ;;		line 4 in file "serial.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used: 1
  4794 ;; Hardware stack levels required when called: 5
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text14
  4803   0030C4                     __ptext14:
  4804                           	callstack 0
  4805   0030C4                     _initUSART4:
  4806                           	callstack 25
  4807   0030C4                     
  4808                           ;serial.c: 7:     RC0PPS = 0x12;
  4809   0030C4  0E12               	movlw	18
  4810   0030C6  010E               	movlb	14	; () banked
  4811   0030C8  6F62               	movwf	98,b	;volatile
  4812                           
  4813                           ;serial.c: 8:     RX4PPS = 0x11;
  4814   0030CA  0E11               	movlw	17
  4815   0030CC  6F15               	movwf	21,b	;volatile
  4816   0030CE                     
  4817                           ; BSR set to: 14
  4818                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  4819   0030CE  97E9               	bcf	233,3,b	;volatile
  4820   0030D0                     
  4821                           ; BSR set to: 14
  4822                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  4823   0030D0  95E8               	bcf	232,2,b	;volatile
  4824                           
  4825                           ;serial.c: 13:     SP4BRGL = 51;
  4826   0030D2  0E33               	movlw	51
  4827   0030D4  6FE5               	movwf	229,b	;volatile
  4828                           
  4829                           ;serial.c: 14:     SP4BRGH = 0;
  4830   0030D6  0E00               	movlw	0
  4831   0030D8  6FE6               	movwf	230,b	;volatile
  4832   0030DA                     
  4833                           ; BSR set to: 14
  4834                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  4835   0030DA  89E7               	bsf	231,4,b	;volatile
  4836   0030DC                     
  4837                           ; BSR set to: 14
  4838                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  4839   0030DC  8BE8               	bsf	232,5,b	;volatile
  4840   0030DE                     
  4841                           ; BSR set to: 14
  4842                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  4843   0030DE  8FE7               	bsf	231,7,b	;volatile
  4844   0030E0                     
  4845                           ; BSR set to: 14
  4846   0030E0  0012               	return		;funcret
  4847   0030E2                     __end_of_initUSART4:
  4848                           	callstack 0
  4849                           
  4850 ;; *************** function _initDCmotorsPWM *****************
  4851 ;; Defined at:
  4852 ;;		line 7 in file "dc_motor.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  PWMperiod       2   12[COMRAM] unsigned int 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4870 ;;Total ram usage:        2 bytes
  4871 ;; Hardware stack levels used: 1
  4872 ;; Hardware stack levels required when called: 5
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text15
  4881   002B5E                     __ptext15:
  4882                           	callstack 0
  4883   002B5E                     _initDCmotorsPWM:
  4884                           	callstack 25
  4885   002B5E                     
  4886                           ;dc_motor.c: 10:     LATEbits.LATE2=0;
  4887   002B5E  947D               	bcf	125,2,c	;volatile
  4888                           
  4889                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  4890   002B60  9485               	bcf	133,2,c	;volatile
  4891                           
  4892                           ;dc_motor.c: 12:     LATEbits.LATE4=0;
  4893   002B62  987D               	bcf	125,4,c	;volatile
  4894                           
  4895                           ;dc_motor.c: 13:     TRISEbits.TRISE4=0;
  4896   002B64  9885               	bcf	133,4,c	;volatile
  4897                           
  4898                           ;dc_motor.c: 14:     LATCbits.LATC7=0;
  4899   002B66  9E7B               	bcf	123,7,c	;volatile
  4900                           
  4901                           ;dc_motor.c: 15:     TRISCbits.TRISC7=0;
  4902   002B68  9E83               	bcf	131,7,c	;volatile
  4903                           
  4904                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  4905   002B6A  9C7F               	bcf	127,6,c	;volatile
  4906                           
  4907                           ;dc_motor.c: 17:     TRISGbits.TRISG6=0;
  4908   002B6C  9C87               	bcf	135,6,c	;volatile
  4909   002B6E                     
  4910                           ;dc_motor.c: 20:     RE2PPS=0x05;
  4911   002B6E  0E05               	movlw	5
  4912   002B70  010E               	movlb	14	; () banked
  4913   002B72  6F74               	movwf	116,b	;volatile
  4914                           
  4915                           ;dc_motor.c: 21:     RE4PPS=0x06;
  4916   002B74  0E06               	movlw	6
  4917   002B76  6F76               	movwf	118,b	;volatile
  4918                           
  4919                           ;dc_motor.c: 22:     RC7PPS=0x07;
  4920   002B78  0E07               	movlw	7
  4921   002B7A  6F69               	movwf	105,b	;volatile
  4922                           
  4923                           ;dc_motor.c: 23:     RG6PPS=0x08;
  4924   002B7C  0E08               	movlw	8
  4925   002B7E  6F88               	movwf	136,b	;volatile
  4926                           
  4927                           ;dc_motor.c: 26:     T2CONbits.CKPS=0b011;
  4928   002B80  50BD               	movf	189,w,c	;volatile
  4929   002B82  0B8F               	andlw	-113
  4930   002B84  0930               	iorlw	48
  4931   002B86  6EBD               	movwf	189,c	;volatile
  4932                           
  4933                           ;dc_motor.c: 27:     T2HLTbits.MODE=0b00000;
  4934   002B88  0EE0               	movlw	-32
  4935   002B8A  16BE               	andwf	190,f,c	;volatile
  4936                           
  4937                           ;dc_motor.c: 28:     T2CLKCONbits.CS=0b0001;
  4938   002B8C  50BF               	movf	191,w,c	;volatile
  4939   002B8E  0BF0               	andlw	-16
  4940   002B90  0901               	iorlw	1
  4941   002B92  6EBF               	movwf	191,c	;volatile
  4942   002B94                     
  4943                           ; BSR set to: 14
  4944                           ;dc_motor.c: 32:     T2PR=PWMperiod;
  4945   002B94  C00D  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4946   002B98                     
  4947                           ; BSR set to: 14
  4948                           ;dc_motor.c: 33:     T2CONbits.ON=1;
  4949   002B98  8EBD               	bsf	189,7,c	;volatile
  4950                           
  4951                           ;dc_motor.c: 37:     CCPR1H=0;
  4952   002B9A  0E00               	movlw	0
  4953   002B9C  6EAA               	movwf	170,c	;volatile
  4954                           
  4955                           ;dc_motor.c: 38:     CCPR2H=0;
  4956   002B9E  0E00               	movlw	0
  4957   002BA0  6EA6               	movwf	166,c	;volatile
  4958                           
  4959                           ;dc_motor.c: 39:     CCPR3H=0;
  4960   002BA2  0E00               	movlw	0
  4961   002BA4  010F               	movlb	15	; () banked
  4962   002BA6  6F25               	movwf	37,b	;volatile
  4963                           
  4964                           ;dc_motor.c: 40:     CCPR4H=0;
  4965   002BA8  0E00               	movlw	0
  4966   002BAA  6F21               	movwf	33,b	;volatile
  4967                           
  4968                           ;dc_motor.c: 43:     CCPTMRS0bits.C1TSEL=0;
  4969   002BAC  0EFC               	movlw	-4
  4970   002BAE  16AD               	andwf	173,f,c	;volatile
  4971                           
  4972                           ;dc_motor.c: 44:     CCPTMRS0bits.C2TSEL=0;
  4973   002BB0  0EF3               	movlw	-13
  4974   002BB2  16AD               	andwf	173,f,c	;volatile
  4975                           
  4976                           ;dc_motor.c: 45:     CCPTMRS0bits.C3TSEL=0;
  4977   002BB4  0ECF               	movlw	-49
  4978   002BB6  16AD               	andwf	173,f,c	;volatile
  4979                           
  4980                           ;dc_motor.c: 46:     CCPTMRS0bits.C4TSEL=0;
  4981   002BB8  0E3F               	movlw	-193
  4982   002BBA  16AD               	andwf	173,f,c	;volatile
  4983   002BBC                     
  4984                           ; BSR set to: 15
  4985                           ;dc_motor.c: 49:     CCP1CONbits.FMT=1;
  4986   002BBC  88AB               	bsf	171,4,c	;volatile
  4987                           
  4988                           ;dc_motor.c: 50:     CCP1CONbits.CCP1MODE=0b1100;
  4989   002BBE  50AB               	movf	171,w,c	;volatile
  4990   002BC0  0BF0               	andlw	-16
  4991   002BC2  090C               	iorlw	12
  4992   002BC4  6EAB               	movwf	171,c	;volatile
  4993   002BC6                     
  4994                           ; BSR set to: 15
  4995                           ;dc_motor.c: 51:     CCP1CONbits.EN=1;
  4996   002BC6  8EAB               	bsf	171,7,c	;volatile
  4997   002BC8                     
  4998                           ; BSR set to: 15
  4999                           ;dc_motor.c: 53:     CCP2CONbits.FMT=1;
  5000   002BC8  88A7               	bsf	167,4,c	;volatile
  5001                           
  5002                           ;dc_motor.c: 54:     CCP2CONbits.CCP2MODE=0b1100;
  5003   002BCA  50A7               	movf	167,w,c	;volatile
  5004   002BCC  0BF0               	andlw	-16
  5005   002BCE  090C               	iorlw	12
  5006   002BD0  6EA7               	movwf	167,c	;volatile
  5007   002BD2                     
  5008                           ; BSR set to: 15
  5009                           ;dc_motor.c: 55:     CCP2CONbits.EN=1;
  5010   002BD2  8EA7               	bsf	167,7,c	;volatile
  5011   002BD4                     
  5012                           ; BSR set to: 15
  5013                           ;dc_motor.c: 57:     CCP3CONbits.FMT=1;
  5014   002BD4  8926               	bsf	38,4,b	;volatile
  5015                           
  5016                           ;dc_motor.c: 58:     CCP3CONbits.CCP3MODE=0b1100;
  5017   002BD6  5126               	movf	38,w,b	;volatile
  5018   002BD8  0BF0               	andlw	-16
  5019   002BDA  090C               	iorlw	12
  5020   002BDC  6F26               	movwf	38,b	;volatile
  5021   002BDE                     
  5022                           ; BSR set to: 15
  5023                           ;dc_motor.c: 59:     CCP3CONbits.EN=1;
  5024   002BDE  8F26               	bsf	38,7,b	;volatile
  5025   002BE0                     
  5026                           ; BSR set to: 15
  5027                           ;dc_motor.c: 61:     CCP4CONbits.FMT=1;
  5028   002BE0  8922               	bsf	34,4,b	;volatile
  5029                           
  5030                           ;dc_motor.c: 62:     CCP4CONbits.CCP4MODE=0b1100;
  5031   002BE2  5122               	movf	34,w,b	;volatile
  5032   002BE4  0BF0               	andlw	-16
  5033   002BE6  090C               	iorlw	12
  5034   002BE8  6F22               	movwf	34,b	;volatile
  5035   002BEA                     
  5036                           ; BSR set to: 15
  5037                           ;dc_motor.c: 63:     CCP4CONbits.EN=1;
  5038   002BEA  8F22               	bsf	34,7,b	;volatile
  5039   002BEC                     
  5040                           ; BSR set to: 15
  5041   002BEC  0012               	return		;funcret
  5042   002BEE                     __end_of_initDCmotorsPWM:
  5043                           	callstack 0
  5044                           
  5045 ;; *************** function _color_read *****************
  5046 ;; Defined at:
  5047 ;;		line 72 in file "color.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  RGBC            2   16[COMRAM] PTR struct RGBC_val
  5050 ;;		 -> main@RGBC(8), 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;Total ram usage:        9 bytes
  5067 ;; Hardware stack levels used: 1
  5068 ;; Hardware stack levels required when called: 7
  5069 ;; This function calls:
  5070 ;;		_I2C_2_Master_Read
  5071 ;;		_I2C_2_Master_RepStart
  5072 ;;		_I2C_2_Master_Start
  5073 ;;		_I2C_2_Master_Stop
  5074 ;;		_I2C_2_Master_Write
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text16
  5081   001D5A                     __ptext16:
  5082                           	callstack 0
  5083   001D5A                     _color_read:
  5084                           	callstack 23
  5085   001D5A                     
  5086                           ;color.c: 72: void color_read(RGBC_val *RGBC);color.c: 73: {;color.c: 74:  I2C_2_Master_
      +                          Start();
  5087   001D5A  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  5088                           
  5089                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  5090   001D5E  0E52               	movlw	82
  5091   001D60  ECA1  F018         	call	_I2C_2_Master_Write
  5092                           
  5093                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x16);
  5094   001D64  0EB6               	movlw	182
  5095   001D66  ECA1  F018         	call	_I2C_2_Master_Write
  5096                           
  5097                           ;color.c: 77:  I2C_2_Master_RepStart();
  5098   001D6A  ECB2  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5099                           
  5100                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  5101   001D6E  0E53               	movlw	83
  5102   001D70  ECA1  F018         	call	_I2C_2_Master_Write
  5103   001D74                     
  5104                           ;color.c: 79:  RGBC->R=I2C_2_Master_Read(1);
  5105   001D74  0E01               	movlw	1
  5106   001D76  EC3E  F017         	call	_I2C_2_Master_Read
  5107   001D7A  6E13               	movwf	??_color_read^0,c
  5108   001D7C  6A14               	clrf	(??_color_read+1)^0,c
  5109   001D7E  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5110   001D82  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5111   001D86  C013  FFDE         	movff	??_color_read,postinc2
  5112   001D8A  C014  FFDD         	movff	??_color_read+1,postdec2
  5113   001D8E                     
  5114                           ;color.c: 80:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  5115   001D8E  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5116   001D92  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5117   001D96  CFDE F013          	movff	postinc2,??_color_read
  5118   001D9A  CFDD F014          	movff	postdec2,??_color_read+1
  5119   001D9E  0E00               	movlw	0
  5120   001DA0  EC3E  F017         	call	_I2C_2_Master_Read
  5121   001DA4  6E15               	movwf	(??_color_read+2)^0,c
  5122   001DA6  5015               	movf	(??_color_read+2)^0,w,c
  5123   001DA8  6E17               	movwf	(??_color_read+4)^0,c
  5124   001DAA  6A16               	clrf	(??_color_read+3)^0,c
  5125   001DAC  5013               	movf	??_color_read^0,w,c
  5126   001DAE  1016               	iorwf	(??_color_read+3)^0,w,c
  5127   001DB0  6E18               	movwf	(??_color_read+5)^0,c
  5128   001DB2  5014               	movf	(??_color_read+1)^0,w,c
  5129   001DB4  1017               	iorwf	(??_color_read+4)^0,w,c
  5130   001DB6  6E19               	movwf	(??_color_read+6)^0,c
  5131   001DB8  C011  FFD9         	movff	color_read@RGBC,fsr2l
  5132   001DBC  C012  FFDA         	movff	color_read@RGBC+1,fsr2h
  5133   001DC0  C018  FFDE         	movff	??_color_read+5,postinc2
  5134   001DC4  C019  FFDD         	movff	??_color_read+6,postdec2
  5135                           
  5136                           ;color.c: 81:  I2C_2_Master_Stop();
  5137   001DC8  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  5138                           
  5139                           ;color.c: 83:     I2C_2_Master_Start();
  5140   001DCC  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  5141                           
  5142                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x00);
  5143   001DD0  0E52               	movlw	82
  5144   001DD2  ECA1  F018         	call	_I2C_2_Master_Write
  5145                           
  5146                           ;color.c: 85:  I2C_2_Master_Write(0xA0 | 0x18);
  5147   001DD6  0EB8               	movlw	184
  5148   001DD8  ECA1  F018         	call	_I2C_2_Master_Write
  5149                           
  5150                           ;color.c: 86:  I2C_2_Master_RepStart();
  5151   001DDC  ECB2  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5152                           
  5153                           ;color.c: 87:  I2C_2_Master_Write(0x52 | 0x01);
  5154   001DE0  0E53               	movlw	83
  5155   001DE2  ECA1  F018         	call	_I2C_2_Master_Write
  5156   001DE6                     
  5157                           ;color.c: 88:  RGBC->G=I2C_2_Master_Read(1);
  5158   001DE6  0E01               	movlw	1
  5159   001DE8  EC3E  F017         	call	_I2C_2_Master_Read
  5160   001DEC  6E13               	movwf	??_color_read^0,c
  5161   001DEE  6A14               	clrf	(??_color_read+1)^0,c
  5162   001DF0  EE20 F002          	lfsr	2,2
  5163   001DF4  5011               	movf	color_read@RGBC^0,w,c
  5164   001DF6  26D9               	addwf	fsr2l,f,c
  5165   001DF8  5012               	movf	(color_read@RGBC+1)^0,w,c
  5166   001DFA  22DA               	addwfc	fsr2h,f,c
  5167   001DFC  C013  FFDE         	movff	??_color_read,postinc2
  5168   001E00  C014  FFDD         	movff	??_color_read+1,postdec2
  5169   001E04                     
  5170                           ;color.c: 89:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  5171   001E04  EE20 F002          	lfsr	2,2
  5172   001E08  5011               	movf	color_read@RGBC^0,w,c
  5173   001E0A  26D9               	addwf	fsr2l,f,c
  5174   001E0C  5012               	movf	(color_read@RGBC+1)^0,w,c
  5175   001E0E  22DA               	addwfc	fsr2h,f,c
  5176   001E10  CFDE F013          	movff	postinc2,??_color_read
  5177   001E14  CFDD F014          	movff	postdec2,??_color_read+1
  5178   001E18  0E00               	movlw	0
  5179   001E1A  EC3E  F017         	call	_I2C_2_Master_Read
  5180   001E1E  6E15               	movwf	(??_color_read+2)^0,c
  5181   001E20  5015               	movf	(??_color_read+2)^0,w,c
  5182   001E22  6E17               	movwf	(??_color_read+4)^0,c
  5183   001E24  6A16               	clrf	(??_color_read+3)^0,c
  5184   001E26  5013               	movf	??_color_read^0,w,c
  5185   001E28  1016               	iorwf	(??_color_read+3)^0,w,c
  5186   001E2A  6E18               	movwf	(??_color_read+5)^0,c
  5187   001E2C  5014               	movf	(??_color_read+1)^0,w,c
  5188   001E2E  1017               	iorwf	(??_color_read+4)^0,w,c
  5189   001E30  6E19               	movwf	(??_color_read+6)^0,c
  5190   001E32  EE20 F002          	lfsr	2,2
  5191   001E36  5011               	movf	color_read@RGBC^0,w,c
  5192   001E38  26D9               	addwf	fsr2l,f,c
  5193   001E3A  5012               	movf	(color_read@RGBC+1)^0,w,c
  5194   001E3C  22DA               	addwfc	fsr2h,f,c
  5195   001E3E  C018  FFDE         	movff	??_color_read+5,postinc2
  5196   001E42  C019  FFDD         	movff	??_color_read+6,postdec2
  5197                           
  5198                           ;color.c: 90:  I2C_2_Master_Stop();
  5199   001E46  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  5200                           
  5201                           ;color.c: 92:     I2C_2_Master_Start();
  5202   001E4A  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  5203                           
  5204                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  5205   001E4E  0E52               	movlw	82
  5206   001E50  ECA1  F018         	call	_I2C_2_Master_Write
  5207                           
  5208                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  5209   001E54  0EBA               	movlw	186
  5210   001E56  ECA1  F018         	call	_I2C_2_Master_Write
  5211                           
  5212                           ;color.c: 95:  I2C_2_Master_RepStart();
  5213   001E5A  ECB2  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5214                           
  5215                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  5216   001E5E  0E53               	movlw	83
  5217   001E60  ECA1  F018         	call	_I2C_2_Master_Write
  5218   001E64                     
  5219                           ;color.c: 97:  RGBC->B=I2C_2_Master_Read(1);
  5220   001E64  0E01               	movlw	1
  5221   001E66  EC3E  F017         	call	_I2C_2_Master_Read
  5222   001E6A  6E13               	movwf	??_color_read^0,c
  5223   001E6C  6A14               	clrf	(??_color_read+1)^0,c
  5224   001E6E  EE20 F004          	lfsr	2,4
  5225   001E72  5011               	movf	color_read@RGBC^0,w,c
  5226   001E74  26D9               	addwf	fsr2l,f,c
  5227   001E76  5012               	movf	(color_read@RGBC+1)^0,w,c
  5228   001E78  22DA               	addwfc	fsr2h,f,c
  5229   001E7A  C013  FFDE         	movff	??_color_read,postinc2
  5230   001E7E  C014  FFDD         	movff	??_color_read+1,postdec2
  5231   001E82                     
  5232                           ;color.c: 98:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  5233   001E82  EE20 F004          	lfsr	2,4
  5234   001E86  5011               	movf	color_read@RGBC^0,w,c
  5235   001E88  26D9               	addwf	fsr2l,f,c
  5236   001E8A  5012               	movf	(color_read@RGBC+1)^0,w,c
  5237   001E8C  22DA               	addwfc	fsr2h,f,c
  5238   001E8E  CFDE F013          	movff	postinc2,??_color_read
  5239   001E92  CFDD F014          	movff	postdec2,??_color_read+1
  5240   001E96  0E00               	movlw	0
  5241   001E98  EC3E  F017         	call	_I2C_2_Master_Read
  5242   001E9C  6E15               	movwf	(??_color_read+2)^0,c
  5243   001E9E  5015               	movf	(??_color_read+2)^0,w,c
  5244   001EA0  6E17               	movwf	(??_color_read+4)^0,c
  5245   001EA2  6A16               	clrf	(??_color_read+3)^0,c
  5246   001EA4  5013               	movf	??_color_read^0,w,c
  5247   001EA6  1016               	iorwf	(??_color_read+3)^0,w,c
  5248   001EA8  6E18               	movwf	(??_color_read+5)^0,c
  5249   001EAA  5014               	movf	(??_color_read+1)^0,w,c
  5250   001EAC  1017               	iorwf	(??_color_read+4)^0,w,c
  5251   001EAE  6E19               	movwf	(??_color_read+6)^0,c
  5252   001EB0  EE20 F004          	lfsr	2,4
  5253   001EB4  5011               	movf	color_read@RGBC^0,w,c
  5254   001EB6  26D9               	addwf	fsr2l,f,c
  5255   001EB8  5012               	movf	(color_read@RGBC+1)^0,w,c
  5256   001EBA  22DA               	addwfc	fsr2h,f,c
  5257   001EBC  C018  FFDE         	movff	??_color_read+5,postinc2
  5258   001EC0  C019  FFDD         	movff	??_color_read+6,postdec2
  5259                           
  5260                           ;color.c: 99:  I2C_2_Master_Stop();
  5261   001EC4  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  5262                           
  5263                           ;color.c: 101:     I2C_2_Master_Start();
  5264   001EC8  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  5265                           
  5266                           ;color.c: 102:  I2C_2_Master_Write(0x52 | 0x00);
  5267   001ECC  0E52               	movlw	82
  5268   001ECE  ECA1  F018         	call	_I2C_2_Master_Write
  5269                           
  5270                           ;color.c: 103:  I2C_2_Master_Write(0xA0 | 0x14);
  5271   001ED2  0EB4               	movlw	180
  5272   001ED4  ECA1  F018         	call	_I2C_2_Master_Write
  5273                           
  5274                           ;color.c: 104:  I2C_2_Master_RepStart();
  5275   001ED8  ECB2  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5276                           
  5277                           ;color.c: 105:  I2C_2_Master_Write(0x52 | 0x01);
  5278   001EDC  0E53               	movlw	83
  5279   001EDE  ECA1  F018         	call	_I2C_2_Master_Write
  5280   001EE2                     
  5281                           ;color.c: 106:  RGBC->C=I2C_2_Master_Read(1);
  5282   001EE2  0E01               	movlw	1
  5283   001EE4  EC3E  F017         	call	_I2C_2_Master_Read
  5284   001EE8  6E13               	movwf	??_color_read^0,c
  5285   001EEA  6A14               	clrf	(??_color_read+1)^0,c
  5286   001EEC  EE20 F006          	lfsr	2,6
  5287   001EF0  5011               	movf	color_read@RGBC^0,w,c
  5288   001EF2  26D9               	addwf	fsr2l,f,c
  5289   001EF4  5012               	movf	(color_read@RGBC+1)^0,w,c
  5290   001EF6  22DA               	addwfc	fsr2h,f,c
  5291   001EF8  C013  FFDE         	movff	??_color_read,postinc2
  5292   001EFC  C014  FFDD         	movff	??_color_read+1,postdec2
  5293   001F00                     
  5294                           ;color.c: 107:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  5295   001F00  EE20 F006          	lfsr	2,6
  5296   001F04  5011               	movf	color_read@RGBC^0,w,c
  5297   001F06  26D9               	addwf	fsr2l,f,c
  5298   001F08  5012               	movf	(color_read@RGBC+1)^0,w,c
  5299   001F0A  22DA               	addwfc	fsr2h,f,c
  5300   001F0C  CFDE F013          	movff	postinc2,??_color_read
  5301   001F10  CFDD F014          	movff	postdec2,??_color_read+1
  5302   001F14  0E00               	movlw	0
  5303   001F16  EC3E  F017         	call	_I2C_2_Master_Read
  5304   001F1A  6E15               	movwf	(??_color_read+2)^0,c
  5305   001F1C  5015               	movf	(??_color_read+2)^0,w,c
  5306   001F1E  6E17               	movwf	(??_color_read+4)^0,c
  5307   001F20  6A16               	clrf	(??_color_read+3)^0,c
  5308   001F22  5013               	movf	??_color_read^0,w,c
  5309   001F24  1016               	iorwf	(??_color_read+3)^0,w,c
  5310   001F26  6E18               	movwf	(??_color_read+5)^0,c
  5311   001F28  5014               	movf	(??_color_read+1)^0,w,c
  5312   001F2A  1017               	iorwf	(??_color_read+4)^0,w,c
  5313   001F2C  6E19               	movwf	(??_color_read+6)^0,c
  5314   001F2E  EE20 F006          	lfsr	2,6
  5315   001F32  5011               	movf	color_read@RGBC^0,w,c
  5316   001F34  26D9               	addwf	fsr2l,f,c
  5317   001F36  5012               	movf	(color_read@RGBC+1)^0,w,c
  5318   001F38  22DA               	addwfc	fsr2h,f,c
  5319   001F3A  C018  FFDE         	movff	??_color_read+5,postinc2
  5320   001F3E  C019  FFDD         	movff	??_color_read+6,postdec2
  5321                           
  5322                           ;color.c: 108:  I2C_2_Master_Stop();
  5323   001F42  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  5324   001F46  0012               	return		;funcret
  5325   001F48                     __end_of_color_read:
  5326                           	callstack 0
  5327                           
  5328 ;; *************** function _I2C_2_Master_RepStart *****************
  5329 ;; Defined at:
  5330 ;;		line 33 in file "i2c.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used: 1
  5350 ;; Hardware stack levels required when called: 6
  5351 ;; This function calls:
  5352 ;;		_I2C_2_Master_Idle
  5353 ;; This function is called by:
  5354 ;;		_color_read
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text17
  5359   003164                     __ptext17:
  5360                           	callstack 0
  5361   003164                     _I2C_2_Master_RepStart:
  5362                           	callstack 23
  5363   003164                     
  5364                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5365   003164  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  5366   003168                     
  5367                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5368   003168  010E               	movlb	14	; () banked
  5369   00316A  83DA               	bsf	218,1,b	;volatile
  5370   00316C                     
  5371                           ; BSR set to: 14
  5372   00316C  0012               	return		;funcret
  5373   00316E                     __end_of_I2C_2_Master_RepStart:
  5374                           	callstack 0
  5375                           
  5376 ;; *************** function _I2C_2_Master_Read *****************
  5377 ;; Defined at:
  5378 ;;		line 51 in file "i2c.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  ack             1    wreg     unsigned char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  ack             1   14[COMRAM] unsigned char 
  5383 ;;  tmp             1   15[COMRAM] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      unsigned char 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5396 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5397 ;;Total ram usage:        3 bytes
  5398 ;; Hardware stack levels used: 1
  5399 ;; Hardware stack levels required when called: 6
  5400 ;; This function calls:
  5401 ;;		_I2C_2_Master_Idle
  5402 ;; This function is called by:
  5403 ;;		_color_read
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text18
  5408   002E7C                     __ptext18:
  5409                           	callstack 0
  5410   002E7C                     _I2C_2_Master_Read:
  5411                           	callstack 23
  5412                           
  5413                           ; BSR set to: 14
  5414                           ;incstack = 0
  5415                           ;I2C_2_Master_Read@ack stored from wreg
  5416   002E7C  6E0F               	movwf	I2C_2_Master_Read@ack^0,c
  5417   002E7E                     
  5418                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5419   002E7E  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  5420   002E82                     
  5421                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5422   002E82  010E               	movlb	14	; () banked
  5423   002E84  87DA               	bsf	218,3,b	;volatile
  5424                           
  5425                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5426   002E86  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  5427   002E8A                     
  5428                           ;i2c.c: 57:   tmp = SSP2BUF;
  5429   002E8A  CED5 F010          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5430                           
  5431                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5432   002E8E  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  5433   002E92                     
  5434                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5435   002E92  500F               	movf	I2C_2_Master_Read@ack^0,w,c
  5436   002E94  B4D8               	btfsc	status,2,c
  5437   002E96  EF4F  F017         	goto	u1281
  5438   002E9A  EF53  F017         	goto	u1280
  5439   002E9E                     u1281:
  5440   002E9E  6A0E               	clrf	??_I2C_2_Master_Read^0,c
  5441   002EA0  2A0E               	incf	??_I2C_2_Master_Read^0,f,c
  5442   002EA2  EF54  F017         	goto	u1298
  5443   002EA6                     u1280:
  5444   002EA6  6A0E               	clrf	??_I2C_2_Master_Read^0,c
  5445   002EA8                     u1298:
  5446   002EA8  3A0E               	swapf	??_I2C_2_Master_Read^0,f,c
  5447   002EAA  460E               	rlncf	??_I2C_2_Master_Read^0,f,c
  5448   002EAC  010E               	movlb	14	; () banked
  5449   002EAE  51DA               	movf	218,w,b	;volatile
  5450   002EB0  180E               	xorwf	??_I2C_2_Master_Read^0,w,c
  5451   002EB2  0BDF               	andlw	-33
  5452   002EB4  180E               	xorwf	??_I2C_2_Master_Read^0,w,c
  5453   002EB6  6FDA               	movwf	218,b	;volatile
  5454   002EB8                     
  5455                           ; BSR set to: 14
  5456                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5457   002EB8  89DA               	bsf	218,4,b	;volatile
  5458   002EBA                     
  5459                           ; BSR set to: 14
  5460                           ;i2c.c: 61:   return tmp;
  5461   002EBA  5010               	movf	I2C_2_Master_Read@tmp^0,w,c
  5462   002EBC                     
  5463                           ; BSR set to: 14
  5464   002EBC  0012               	return		;funcret
  5465   002EBE                     __end_of_I2C_2_Master_Read:
  5466                           	callstack 0
  5467                           
  5468 ;; *************** function _color_normalise *****************
  5469 ;; Defined at:
  5470 ;;		line 112 in file "color.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  RGBC            8   38[COMRAM] struct RGBC_val
  5473 ;;  RGBC_n          2   46[COMRAM] PTR struct RGBC_val
  5474 ;;		 -> main@RGBC_n(8), 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      void 
  5479 ;; Registers used:
  5480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5486 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5489 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;Total ram usage:       12 bytes
  5491 ;; Hardware stack levels used: 1
  5492 ;; Hardware stack levels required when called: 6
  5493 ;; This function calls:
  5494 ;;		___aldiv
  5495 ;;		___lmul
  5496 ;; This function is called by:
  5497 ;;		_main
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text19
  5502   002654                     __ptext19:
  5503                           	callstack 0
  5504   002654                     _color_normalise:
  5505                           	callstack 24
  5506   002654                     
  5507                           ;color.c: 130:     RGBC_n->C = RGBC.C;
  5508   002654  EE20 F006          	lfsr	2,6
  5509   002658  502F               	movf	color_normalise@RGBC_n^0,w,c
  5510   00265A  26D9               	addwf	fsr2l,f,c
  5511   00265C  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5512   00265E  22DA               	addwfc	fsr2h,f,c
  5513   002660  C02D  FFDE         	movff	color_normalise@RGBC+6,postinc2
  5514   002664  C02E  FFDD         	movff	color_normalise@RGBC+7,postdec2
  5515   002668                     
  5516                           ;color.c: 131:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  5517   002668  C027  F00D         	movff	color_normalise@RGBC,___lmul@multiplier
  5518   00266C  C028  F00E         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  5519   002670  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5520   002672  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5521   002674  0EE8               	movlw	232
  5522   002676  6E11               	movwf	___lmul@multiplicand^0,c
  5523   002678  0E03               	movlw	3
  5524   00267A  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5525   00267C  0E00               	movlw	0
  5526   00267E  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5527   002680  0E00               	movlw	0
  5528   002682  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5529   002684  ECE2  F016         	call	___lmul	;wreg free
  5530   002688  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5531   00268C  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5532   002690  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5533   002694  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5534   002698  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5535   00269A  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5536   00269C  6E31               	movwf	??_color_normalise^0,c
  5537   00269E  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5538   0026A0  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5539   0026A2  6E32               	movwf	(??_color_normalise+1)^0,c
  5540   0026A4  5027               	movf	color_normalise@RGBC^0,w,c
  5541   0026A6  2631               	addwf	??_color_normalise^0,f,c
  5542   0026A8  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5543   0026AA  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5544   0026AC  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5545   0026B0  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5546   0026B4  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5547   0026B6  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5548   0026B8  ECCF  F013         	call	___aldiv	;wreg free
  5549   0026BC  C02F  FFD9         	movff	color_normalise@RGBC_n,fsr2l
  5550   0026C0  C030  FFDA         	movff	color_normalise@RGBC_n+1,fsr2h
  5551   0026C4  C019  FFDE         	movff	?___aldiv,postinc2
  5552   0026C8  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5553   0026CC                     
  5554                           ;color.c: 132:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  5555   0026CC  C029  F00D         	movff	color_normalise@RGBC+2,___lmul@multiplier
  5556   0026D0  C02A  F00E         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  5557   0026D4  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5558   0026D6  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5559   0026D8  0EE8               	movlw	232
  5560   0026DA  6E11               	movwf	___lmul@multiplicand^0,c
  5561   0026DC  0E03               	movlw	3
  5562   0026DE  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5563   0026E0  0E00               	movlw	0
  5564   0026E2  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5565   0026E4  0E00               	movlw	0
  5566   0026E6  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5567   0026E8  ECE2  F016         	call	___lmul	;wreg free
  5568   0026EC  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5569   0026F0  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5570   0026F4  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5571   0026F8  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5572   0026FC  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5573   0026FE  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5574   002700  6E31               	movwf	??_color_normalise^0,c
  5575   002702  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5576   002704  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5577   002706  6E32               	movwf	(??_color_normalise+1)^0,c
  5578   002708  5027               	movf	color_normalise@RGBC^0,w,c
  5579   00270A  2631               	addwf	??_color_normalise^0,f,c
  5580   00270C  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5581   00270E  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5582   002710  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5583   002714  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5584   002718  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5585   00271A  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5586   00271C  ECCF  F013         	call	___aldiv	;wreg free
  5587   002720  EE20 F002          	lfsr	2,2
  5588   002724  502F               	movf	color_normalise@RGBC_n^0,w,c
  5589   002726  26D9               	addwf	fsr2l,f,c
  5590   002728  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5591   00272A  22DA               	addwfc	fsr2h,f,c
  5592   00272C  C019  FFDE         	movff	?___aldiv,postinc2
  5593   002730  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5594   002734                     
  5595                           ;color.c: 133:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  5596   002734  C02B  F00D         	movff	color_normalise@RGBC+4,___lmul@multiplier
  5597   002738  C02C  F00E         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  5598   00273C  6A0F               	clrf	(___lmul@multiplier+2)^0,c
  5599   00273E  6A10               	clrf	(___lmul@multiplier+3)^0,c
  5600   002740  0EE8               	movlw	232
  5601   002742  6E11               	movwf	___lmul@multiplicand^0,c
  5602   002744  0E03               	movlw	3
  5603   002746  6E12               	movwf	(___lmul@multiplicand+1)^0,c
  5604   002748  0E00               	movlw	0
  5605   00274A  6E13               	movwf	(___lmul@multiplicand+2)^0,c
  5606   00274C  0E00               	movlw	0
  5607   00274E  6E14               	movwf	(___lmul@multiplicand+3)^0,c
  5608   002750  ECE2  F016         	call	___lmul	;wreg free
  5609   002754  C00D  F019         	movff	?___lmul,___aldiv@dividend
  5610   002758  C00E  F01A         	movff	?___lmul+1,___aldiv@dividend+1
  5611   00275C  C00F  F01B         	movff	?___lmul+2,___aldiv@dividend+2
  5612   002760  C010  F01C         	movff	?___lmul+3,___aldiv@dividend+3
  5613   002764  502B               	movf	(color_normalise@RGBC+4)^0,w,c
  5614   002766  2429               	addwf	(color_normalise@RGBC+2)^0,w,c
  5615   002768  6E31               	movwf	??_color_normalise^0,c
  5616   00276A  502C               	movf	(color_normalise@RGBC+5)^0,w,c
  5617   00276C  202A               	addwfc	(color_normalise@RGBC+3)^0,w,c
  5618   00276E  6E32               	movwf	(??_color_normalise+1)^0,c
  5619   002770  5027               	movf	color_normalise@RGBC^0,w,c
  5620   002772  2631               	addwf	??_color_normalise^0,f,c
  5621   002774  5028               	movf	(color_normalise@RGBC+1)^0,w,c
  5622   002776  2232               	addwfc	(??_color_normalise+1)^0,f,c
  5623   002778  C031  F01D         	movff	??_color_normalise,___aldiv@divisor
  5624   00277C  C032  F01E         	movff	??_color_normalise+1,___aldiv@divisor+1
  5625   002780  6A1F               	clrf	(___aldiv@divisor+2)^0,c
  5626   002782  6A20               	clrf	(___aldiv@divisor+3)^0,c
  5627   002784  ECCF  F013         	call	___aldiv	;wreg free
  5628   002788  EE20 F004          	lfsr	2,4
  5629   00278C  502F               	movf	color_normalise@RGBC_n^0,w,c
  5630   00278E  26D9               	addwf	fsr2l,f,c
  5631   002790  5030               	movf	(color_normalise@RGBC_n+1)^0,w,c
  5632   002792  22DA               	addwfc	fsr2h,f,c
  5633   002794  C019  FFDE         	movff	?___aldiv,postinc2
  5634   002798  C01A  FFDD         	movff	?___aldiv+1,postdec2
  5635   00279C  0012               	return		;funcret
  5636   00279E                     __end_of_color_normalise:
  5637                           	callstack 0
  5638                           
  5639 ;; *************** function ___lmul *****************
  5640 ;; Defined at:
  5641 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  multiplier      4   12[COMRAM] unsigned long 
  5644 ;;  multiplicand    4   16[COMRAM] unsigned long 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  product         4   20[COMRAM] unsigned long 
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  4   12[COMRAM] unsigned long 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5656 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5657 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5659 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5660 ;;Total ram usage:       12 bytes
  5661 ;; Hardware stack levels used: 1
  5662 ;; Hardware stack levels required when called: 5
  5663 ;; This function calls:
  5664 ;;		Nothing
  5665 ;; This function is called by:
  5666 ;;		_color_normalise
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text20
  5671   002DC4                     __ptext20:
  5672                           	callstack 0
  5673   002DC4                     ___lmul:
  5674                           	callstack 24
  5675   002DC4  0E00               	movlw	0
  5676   002DC6  6E15               	movwf	___lmul@product^0,c
  5677   002DC8  0E00               	movlw	0
  5678   002DCA  6E16               	movwf	(___lmul@product+1)^0,c
  5679   002DCC  0E00               	movlw	0
  5680   002DCE  6E17               	movwf	(___lmul@product+2)^0,c
  5681   002DD0  0E00               	movlw	0
  5682   002DD2  6E18               	movwf	(___lmul@product+3)^0,c
  5683   002DD4                     l2723:
  5684   002DD4  A00D               	btfss	___lmul@multiplier^0,0,c
  5685   002DD6  EFEF  F016         	goto	u1411
  5686   002DDA  EFF1  F016         	goto	u1410
  5687   002DDE                     u1411:
  5688   002DDE  EFF9  F016         	goto	l2727
  5689   002DE2                     u1410:
  5690   002DE2  5011               	movf	___lmul@multiplicand^0,w,c
  5691   002DE4  2615               	addwf	___lmul@product^0,f,c
  5692   002DE6  5012               	movf	(___lmul@multiplicand+1)^0,w,c
  5693   002DE8  2216               	addwfc	(___lmul@product+1)^0,f,c
  5694   002DEA  5013               	movf	(___lmul@multiplicand+2)^0,w,c
  5695   002DEC  2217               	addwfc	(___lmul@product+2)^0,f,c
  5696   002DEE  5014               	movf	(___lmul@multiplicand+3)^0,w,c
  5697   002DF0  2218               	addwfc	(___lmul@product+3)^0,f,c
  5698   002DF2                     l2727:
  5699   002DF2  90D8               	bcf	status,0,c
  5700   002DF4  3611               	rlcf	___lmul@multiplicand^0,f,c
  5701   002DF6  3612               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5702   002DF8  3613               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5703   002DFA  3614               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5704   002DFC  90D8               	bcf	status,0,c
  5705   002DFE  3210               	rrcf	(___lmul@multiplier+3)^0,f,c
  5706   002E00  320F               	rrcf	(___lmul@multiplier+2)^0,f,c
  5707   002E02  320E               	rrcf	(___lmul@multiplier+1)^0,f,c
  5708   002E04  320D               	rrcf	___lmul@multiplier^0,f,c
  5709   002E06  500D               	movf	___lmul@multiplier^0,w,c
  5710   002E08  100E               	iorwf	(___lmul@multiplier+1)^0,w,c
  5711   002E0A  100F               	iorwf	(___lmul@multiplier+2)^0,w,c
  5712   002E0C  1010               	iorwf	(___lmul@multiplier+3)^0,w,c
  5713   002E0E  A4D8               	btfss	status,2,c
  5714   002E10  EF0C  F017         	goto	u1421
  5715   002E14  EF0E  F017         	goto	u1420
  5716   002E18                     u1421:
  5717   002E18  EFEA  F016         	goto	l2723
  5718   002E1C                     u1420:
  5719   002E1C  C015  F00D         	movff	___lmul@product,?___lmul
  5720   002E20  C016  F00E         	movff	___lmul@product+1,?___lmul+1
  5721   002E24  C017  F00F         	movff	___lmul@product+2,?___lmul+2
  5722   002E28  C018  F010         	movff	___lmul@product+3,?___lmul+3
  5723   002E2C  0012               	return		;funcret
  5724   002E2E                     __end_of___lmul:
  5725                           	callstack 0
  5726                           
  5727 ;; *************** function ___aldiv *****************
  5728 ;; Defined at:
  5729 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  dividend        4   24[COMRAM] long 
  5732 ;;  divisor         4   28[COMRAM] long 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  quotient        4   34[COMRAM] long 
  5735 ;;  sign            1   33[COMRAM] unsigned char 
  5736 ;;  counter         1   32[COMRAM] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  4   24[COMRAM] long 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5746 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5747 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5749 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5750 ;;Total ram usage:       14 bytes
  5751 ;; Hardware stack levels used: 1
  5752 ;; Hardware stack levels required when called: 5
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_color_normalise
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text21
  5761   00279E                     __ptext21:
  5762                           	callstack 0
  5763   00279E                     ___aldiv:
  5764                           	callstack 24
  5765   00279E  0E00               	movlw	0
  5766   0027A0  6E22               	movwf	___aldiv@sign^0,c
  5767   0027A2  BE20               	btfsc	(___aldiv@divisor+3)^0,7,c
  5768   0027A4  EFD8  F013         	goto	u1430
  5769   0027A8  EFD6  F013         	goto	u1431
  5770   0027AC                     u1431:
  5771   0027AC  EFE2  F013         	goto	l2739
  5772   0027B0                     u1430:
  5773   0027B0  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  5774   0027B2  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  5775   0027B4  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  5776   0027B6  6C1D               	negf	___aldiv@divisor^0,c
  5777   0027B8  0E00               	movlw	0
  5778   0027BA  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  5779   0027BC  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  5780   0027BE  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  5781   0027C0  0E01               	movlw	1
  5782   0027C2  6E22               	movwf	___aldiv@sign^0,c
  5783   0027C4                     l2739:
  5784   0027C4  BE1C               	btfsc	(___aldiv@dividend+3)^0,7,c
  5785   0027C6  EFE9  F013         	goto	u1440
  5786   0027CA  EFE7  F013         	goto	u1441
  5787   0027CE                     u1441:
  5788   0027CE  EFF3  F013         	goto	l2745
  5789   0027D2                     u1440:
  5790   0027D2  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  5791   0027D4  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  5792   0027D6  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  5793   0027D8  6C19               	negf	___aldiv@dividend^0,c
  5794   0027DA  0E00               	movlw	0
  5795   0027DC  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  5796   0027DE  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  5797   0027E0  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  5798   0027E2  0E01               	movlw	1
  5799   0027E4  1A22               	xorwf	___aldiv@sign^0,f,c
  5800   0027E6                     l2745:
  5801   0027E6  0E00               	movlw	0
  5802   0027E8  6E23               	movwf	___aldiv@quotient^0,c
  5803   0027EA  0E00               	movlw	0
  5804   0027EC  6E24               	movwf	(___aldiv@quotient+1)^0,c
  5805   0027EE  0E00               	movlw	0
  5806   0027F0  6E25               	movwf	(___aldiv@quotient+2)^0,c
  5807   0027F2  0E00               	movlw	0
  5808   0027F4  6E26               	movwf	(___aldiv@quotient+3)^0,c
  5809   0027F6  501D               	movf	___aldiv@divisor^0,w,c
  5810   0027F8  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  5811   0027FA  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  5812   0027FC  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  5813   0027FE  B4D8               	btfsc	status,2,c
  5814   002800  EF04  F014         	goto	u1451
  5815   002804  EF06  F014         	goto	u1450
  5816   002808                     u1451:
  5817   002808  EF3C  F014         	goto	l2767
  5818   00280C                     u1450:
  5819   00280C  0E01               	movlw	1
  5820   00280E  6E21               	movwf	___aldiv@counter^0,c
  5821   002810  EF10  F014         	goto	l2753
  5822   002814                     l2751:
  5823   002814  90D8               	bcf	status,0,c
  5824   002816  361D               	rlcf	___aldiv@divisor^0,f,c
  5825   002818  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  5826   00281A  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  5827   00281C  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  5828   00281E  2A21               	incf	___aldiv@counter^0,f,c
  5829   002820                     l2753:
  5830   002820  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  5831   002822  EF15  F014         	goto	u1461
  5832   002826  EF17  F014         	goto	u1460
  5833   00282A                     u1461:
  5834   00282A  EF0A  F014         	goto	l2751
  5835   00282E                     u1460:
  5836   00282E                     l2755:
  5837   00282E  90D8               	bcf	status,0,c
  5838   002830  3623               	rlcf	___aldiv@quotient^0,f,c
  5839   002832  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  5840   002834  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  5841   002836  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  5842   002838  501D               	movf	___aldiv@divisor^0,w,c
  5843   00283A  5C19               	subwf	___aldiv@dividend^0,w,c
  5844   00283C  501E               	movf	(___aldiv@divisor+1)^0,w,c
  5845   00283E  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  5846   002840  501F               	movf	(___aldiv@divisor+2)^0,w,c
  5847   002842  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  5848   002844  5020               	movf	(___aldiv@divisor+3)^0,w,c
  5849   002846  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  5850   002848  A0D8               	btfss	status,0,c
  5851   00284A  EF29  F014         	goto	u1471
  5852   00284E  EF2B  F014         	goto	u1470
  5853   002852                     u1471:
  5854   002852  EF34  F014         	goto	l2763
  5855   002856                     u1470:
  5856   002856  501D               	movf	___aldiv@divisor^0,w,c
  5857   002858  5E19               	subwf	___aldiv@dividend^0,f,c
  5858   00285A  501E               	movf	(___aldiv@divisor+1)^0,w,c
  5859   00285C  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  5860   00285E  501F               	movf	(___aldiv@divisor+2)^0,w,c
  5861   002860  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  5862   002862  5020               	movf	(___aldiv@divisor+3)^0,w,c
  5863   002864  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  5864   002866  8023               	bsf	___aldiv@quotient^0,0,c
  5865   002868                     l2763:
  5866   002868  90D8               	bcf	status,0,c
  5867   00286A  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  5868   00286C  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  5869   00286E  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  5870   002870  321D               	rrcf	___aldiv@divisor^0,f,c
  5871   002872  2E21               	decfsz	___aldiv@counter^0,f,c
  5872   002874  EF17  F014         	goto	l2755
  5873   002878                     l2767:
  5874   002878  5022               	movf	___aldiv@sign^0,w,c
  5875   00287A  B4D8               	btfsc	status,2,c
  5876   00287C  EF42  F014         	goto	u1481
  5877   002880  EF44  F014         	goto	u1480
  5878   002884                     u1481:
  5879   002884  EF4C  F014         	goto	l2771
  5880   002888                     u1480:
  5881   002888  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  5882   00288A  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  5883   00288C  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  5884   00288E  6C23               	negf	___aldiv@quotient^0,c
  5885   002890  0E00               	movlw	0
  5886   002892  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  5887   002894  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  5888   002896  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  5889   002898                     l2771:
  5890   002898  C023  F019         	movff	___aldiv@quotient,?___aldiv
  5891   00289C  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  5892   0028A0  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  5893   0028A4  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  5894   0028A8  0012               	return		;funcret
  5895   0028AA                     __end_of___aldiv:
  5896                           	callstack 0
  5897                           
  5898 ;; *************** function _color_click_init *****************
  5899 ;; Defined at:
  5900 ;;		line 5 in file "color.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;Total ram usage:        1 bytes
  5919 ;; Hardware stack levels used: 1
  5920 ;; Hardware stack levels required when called: 9
  5921 ;; This function calls:
  5922 ;;		_I2C_2_Master_Init
  5923 ;;		_color_clear_init_interrupts
  5924 ;;		_color_writetoaddr
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text22
  5931   002EBE                     __ptext22:
  5932                           	callstack 0
  5933   002EBE                     _color_click_init:
  5934                           	callstack 21
  5935   002EBE                     
  5936                           ;color.c: 8:     I2C_2_Master_Init();
  5937   002EBE  EC96  F017         	call	_I2C_2_Master_Init	;wreg free
  5938   002EC2                     
  5939                           ;color.c: 11:  color_writetoaddr(0x00, 0x01);
  5940   002EC2  0E01               	movlw	1
  5941   002EC4  6E0F               	movwf	color_writetoaddr@value^0,c
  5942   002EC6  0E00               	movlw	0
  5943   002EC8  EC32  F018         	call	_color_writetoaddr
  5944   002ECC                     
  5945                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5946   002ECC  0E3F               	movlw	63
  5947   002ECE  6E16               	movwf	??_color_click_init^0,c
  5948   002ED0  0E55               	movlw	85
  5949   002ED2                     u2677:
  5950   002ED2  2EE8               	decfsz	wreg,f,c
  5951   002ED4  D7FE               	bra	u2677
  5952   002ED6  2E16               	decfsz	??_color_click_init^0,f,c
  5953   002ED8  D7FC               	bra	u2677
  5954   002EDA  0000               	nop	
  5955   002EDC                     
  5956                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  5957   002EDC  0E03               	movlw	3
  5958   002EDE  6E0F               	movwf	color_writetoaddr@value^0,c
  5959   002EE0  0E00               	movlw	0
  5960   002EE2  EC32  F018         	call	_color_writetoaddr
  5961   002EE6                     
  5962                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5963   002EE6  0ED5               	movlw	213
  5964   002EE8  6E0F               	movwf	color_writetoaddr@value^0,c
  5965   002EEA  0E01               	movlw	1
  5966   002EEC  EC32  F018         	call	_color_writetoaddr
  5967   002EF0                     
  5968                           ;color.c: 21:     color_clear_init_interrupts();
  5969   002EF0  ECF7  F015         	call	_color_clear_init_interrupts	;wreg free
  5970   002EF4  0012               	return		;funcret
  5971   002EF6                     __end_of_color_click_init:
  5972                           	callstack 0
  5973                           
  5974 ;; *************** function _color_clear_init_interrupts *****************
  5975 ;; Defined at:
  5976 ;;		line 25 in file "color.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  low_threshol    2   19[COMRAM] unsigned int 
  5981 ;;  high_thresho    2   17[COMRAM] unsigned int 
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      void 
  5984 ;; Registers used:
  5985 ;;		wreg, status,2, status,0, cstack
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5992 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;Total ram usage:        5 bytes
  5996 ;; Hardware stack levels used: 1
  5997 ;; Hardware stack levels required when called: 8
  5998 ;; This function calls:
  5999 ;;		_I2C_2_Master_Start
  6000 ;;		_I2C_2_Master_Stop
  6001 ;;		_I2C_2_Master_Write
  6002 ;;		_color_writetoaddr
  6003 ;; This function is called by:
  6004 ;;		_color_click_init
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text23
  6009   002BEE                     __ptext23:
  6010                           	callstack 0
  6011   002BEE                     _color_clear_init_interrupts:
  6012                           	callstack 21
  6013   002BEE                     
  6014                           ;color.c: 27:     I2C_2_Master_Start();
  6015   002BEE  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  6016                           
  6017                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  6018   002BF2  0E52               	movlw	82
  6019   002BF4  ECA1  F018         	call	_I2C_2_Master_Write
  6020                           
  6021                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  6022   002BF8  0EE6               	movlw	230
  6023   002BFA  ECA1  F018         	call	_I2C_2_Master_Write
  6024                           
  6025                           ;color.c: 30:     I2C_2_Master_Stop();
  6026   002BFE  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  6027   002C02                     
  6028                           ;color.c: 33:     unsigned int high_threshold = ambient + 20;
  6029   002C02  0E14               	movlw	20
  6030   002C04  244A               	addwf	_ambient^0,w,c
  6031   002C06  6E12               	movwf	color_clear_init_interrupts@high_threshold^0,c
  6032   002C08  0E00               	movlw	0
  6033   002C0A  204B               	addwfc	(_ambient+1)^0,w,c
  6034   002C0C  6E13               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  6035   002C0E                     
  6036                           ;color.c: 34:     unsigned int low_threshold = ambient - 20;
  6037   002C0E  0EEC               	movlw	236
  6038   002C10  244A               	addwf	_ambient^0,w,c
  6039   002C12  6E14               	movwf	color_clear_init_interrupts@low_threshold^0,c
  6040   002C14  0EFF               	movlw	255
  6041   002C16  204B               	addwfc	(_ambient+1)^0,w,c
  6042   002C18  6E15               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  6043                           
  6044                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  6045   002C1A  0E13               	movlw	19
  6046   002C1C  6E0F               	movwf	color_writetoaddr@value^0,c
  6047   002C1E  0E00               	movlw	0
  6048   002C20  EC32  F018         	call	_color_writetoaddr
  6049   002C24                     
  6050                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6051   002C24  0E3F               	movlw	63
  6052   002C26  6E11               	movwf	??_color_clear_init_interrupts^0,c
  6053   002C28  0E55               	movlw	85
  6054   002C2A                     u2687:
  6055   002C2A  2EE8               	decfsz	wreg,f,c
  6056   002C2C  D7FE               	bra	u2687
  6057   002C2E  2E11               	decfsz	??_color_clear_init_interrupts^0,f,c
  6058   002C30  D7FC               	bra	u2687
  6059   002C32  0000               	nop	
  6060   002C34                     
  6061                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  6062   002C34  5013               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  6063   002C36  6E0F               	movwf	color_writetoaddr@value^0,c
  6064   002C38  0E07               	movlw	7
  6065   002C3A  EC32  F018         	call	_color_writetoaddr
  6066   002C3E                     
  6067                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  6068   002C3E  C012  F00F         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  6069   002C42  0E06               	movlw	6
  6070   002C44  EC32  F018         	call	_color_writetoaddr
  6071   002C48                     
  6072                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  6073   002C48  5015               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  6074   002C4A  6E0F               	movwf	color_writetoaddr@value^0,c
  6075   002C4C  0E05               	movlw	5
  6076   002C4E  EC32  F018         	call	_color_writetoaddr
  6077   002C52                     
  6078                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  6079   002C52  C014  F00F         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  6080   002C56  0E04               	movlw	4
  6081   002C58  EC32  F018         	call	_color_writetoaddr
  6082   002C5C                     
  6083                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  6084   002C5C  0E04               	movlw	4
  6085   002C5E  6E0F               	movwf	color_writetoaddr@value^0,c
  6086   002C60  0E0C               	movlw	12
  6087   002C62  EC32  F018         	call	_color_writetoaddr
  6088   002C66  0012               	return		;funcret
  6089   002C68                     __end_of_color_clear_init_interrupts:
  6090                           	callstack 0
  6091                           
  6092 ;; *************** function _color_writetoaddr *****************
  6093 ;; Defined at:
  6094 ;;		line 48 in file "color.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  address         1    wreg     unsigned char 
  6097 ;;  value           1   14[COMRAM] unsigned char 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  address         1   15[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6113 ;;Total ram usage:        2 bytes
  6114 ;; Hardware stack levels used: 1
  6115 ;; Hardware stack levels required when called: 7
  6116 ;; This function calls:
  6117 ;;		_I2C_2_Master_Start
  6118 ;;		_I2C_2_Master_Stop
  6119 ;;		_I2C_2_Master_Write
  6120 ;; This function is called by:
  6121 ;;		_color_click_init
  6122 ;;		_color_clear_init_interrupts
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text24
  6127   003064                     __ptext24:
  6128                           	callstack 0
  6129   003064                     _color_writetoaddr:
  6130                           	callstack 22
  6131                           
  6132                           ;incstack = 0
  6133                           ;color_writetoaddr@address stored from wreg
  6134   003064  6E10               	movwf	color_writetoaddr@address^0,c
  6135   003066                     
  6136                           ;color.c: 49:     I2C_2_Master_Start();
  6137   003066  ECBC  F018         	call	_I2C_2_Master_Start	;wreg free
  6138                           
  6139                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  6140   00306A  0E52               	movlw	82
  6141   00306C  ECA1  F018         	call	_I2C_2_Master_Write
  6142                           
  6143                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  6144   003070  5010               	movf	color_writetoaddr@address^0,w,c
  6145   003072  0980               	iorlw	128
  6146   003074  ECA1  F018         	call	_I2C_2_Master_Write
  6147                           
  6148                           ;color.c: 52:     I2C_2_Master_Write(value);
  6149   003078  500F               	movf	color_writetoaddr@value^0,w,c
  6150   00307A  ECA1  F018         	call	_I2C_2_Master_Write
  6151                           
  6152                           ;color.c: 53:     I2C_2_Master_Stop();
  6153   00307E  ECB7  F018         	call	_I2C_2_Master_Stop	;wreg free
  6154   003082  0012               	return		;funcret
  6155   003084                     __end_of_color_writetoaddr:
  6156                           	callstack 0
  6157                           
  6158 ;; *************** function _I2C_2_Master_Write *****************
  6159 ;; Defined at:
  6160 ;;		line 45 in file "i2c.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  data_byte       1    wreg     unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  data_byte       1   13[COMRAM] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6178 ;;Total ram usage:        1 bytes
  6179 ;; Hardware stack levels used: 1
  6180 ;; Hardware stack levels required when called: 6
  6181 ;; This function calls:
  6182 ;;		_I2C_2_Master_Idle
  6183 ;; This function is called by:
  6184 ;;		_color_clear_init_interrupts
  6185 ;;		_color_writetoaddr
  6186 ;;		_color_read
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text25
  6191   003142                     __ptext25:
  6192                           	callstack 0
  6193   003142                     _I2C_2_Master_Write:
  6194                           	callstack 23
  6195                           
  6196                           ;incstack = 0
  6197                           ;I2C_2_Master_Write@data_byte stored from wreg
  6198   003142  6E0E               	movwf	I2C_2_Master_Write@data_byte^0,c
  6199   003144                     
  6200                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6201   003144  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  6202   003148                     
  6203                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6204   003148  C00E  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6205   00314C  0012               	return		;funcret
  6206   00314E                     __end_of_I2C_2_Master_Write:
  6207                           	callstack 0
  6208                           
  6209 ;; *************** function _I2C_2_Master_Stop *****************
  6210 ;; Defined at:
  6211 ;;		line 39 in file "i2c.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;		None
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0, cstack
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6229 ;;Total ram usage:        0 bytes
  6230 ;; Hardware stack levels used: 1
  6231 ;; Hardware stack levels required when called: 6
  6232 ;; This function calls:
  6233 ;;		_I2C_2_Master_Idle
  6234 ;; This function is called by:
  6235 ;;		_color_clear_init_interrupts
  6236 ;;		_color_writetoaddr
  6237 ;;		_color_read
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text26
  6242   00316E                     __ptext26:
  6243                           	callstack 0
  6244   00316E                     _I2C_2_Master_Stop:
  6245                           	callstack 23
  6246   00316E                     
  6247                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6248   00316E  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  6249   003172                     
  6250                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6251   003172  010E               	movlb	14	; () banked
  6252   003174  85DA               	bsf	218,2,b	;volatile
  6253   003176                     
  6254                           ; BSR set to: 14
  6255   003176  0012               	return		;funcret
  6256   003178                     __end_of_I2C_2_Master_Stop:
  6257                           	callstack 0
  6258                           
  6259 ;; *************** function _I2C_2_Master_Start *****************
  6260 ;; Defined at:
  6261 ;;		line 27 in file "i2c.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 6
  6282 ;; This function calls:
  6283 ;;		_I2C_2_Master_Idle
  6284 ;; This function is called by:
  6285 ;;		_color_clear_init_interrupts
  6286 ;;		_color_writetoaddr
  6287 ;;		_color_read
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text27
  6292   003178                     __ptext27:
  6293                           	callstack 0
  6294   003178                     _I2C_2_Master_Start:
  6295                           	callstack 23
  6296   003178                     
  6297                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6298   003178  ECBF  F017         	call	_I2C_2_Master_Idle	;wreg free
  6299   00317C                     
  6300                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6301   00317C  010E               	movlb	14	; () banked
  6302   00317E  81DA               	bsf	218,0,b	;volatile
  6303   003180                     
  6304                           ; BSR set to: 14
  6305   003180  0012               	return		;funcret
  6306   003182                     __end_of_I2C_2_Master_Start:
  6307                           	callstack 0
  6308                           
  6309 ;; *************** function _I2C_2_Master_Idle *****************
  6310 ;; Defined at:
  6311 ;;		line 22 in file "i2c.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;		None
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;		None
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  1    wreg      void 
  6318 ;; Registers used:
  6319 ;;		wreg, status,2, status,0
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6328 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6329 ;;Total ram usage:        1 bytes
  6330 ;; Hardware stack levels used: 1
  6331 ;; Hardware stack levels required when called: 5
  6332 ;; This function calls:
  6333 ;;		Nothing
  6334 ;; This function is called by:
  6335 ;;		_I2C_2_Master_Start
  6336 ;;		_I2C_2_Master_RepStart
  6337 ;;		_I2C_2_Master_Stop
  6338 ;;		_I2C_2_Master_Write
  6339 ;;		_I2C_2_Master_Read
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text28
  6344   002F7E                     __ptext28:
  6345                           	callstack 0
  6346   002F7E                     _I2C_2_Master_Idle:
  6347                           	callstack 23
  6348   002F7E                     l171:
  6349   002F7E  010E               	movlb	14	; () banked
  6350   002F80  B5D8               	btfsc	216,2,b	;volatile
  6351   002F82  EFC5  F017         	goto	u1001
  6352   002F86  EFC7  F017         	goto	u1000
  6353   002F8A                     u1001:
  6354   002F8A  EFBF  F017         	goto	l171
  6355   002F8E                     u1000:
  6356   002F8E                     
  6357                           ; BSR set to: 14
  6358   002F8E  CEDA F00D          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6359   002F92  0E1F               	movlw	31
  6360   002F94  160D               	andwf	??_I2C_2_Master_Idle^0,f,c
  6361   002F96  A4D8               	btfss	status,2,c
  6362   002F98  EFD0  F017         	goto	u1011
  6363   002F9C  EFD2  F017         	goto	u1010
  6364   002FA0                     u1011:
  6365   002FA0  EFBF  F017         	goto	l171
  6366   002FA4                     u1010:
  6367   002FA4                     
  6368                           ; BSR set to: 14
  6369   002FA4  0012               	return		;funcret
  6370   002FA6                     __end_of_I2C_2_Master_Idle:
  6371                           	callstack 0
  6372                           
  6373 ;; *************** function _I2C_2_Master_Init *****************
  6374 ;; Defined at:
  6375 ;;		line 4 in file "i2c.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      void 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6393 ;;Total ram usage:        0 bytes
  6394 ;; Hardware stack levels used: 1
  6395 ;; Hardware stack levels required when called: 5
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_color_click_init
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text29
  6404   002F2C                     __ptext29:
  6405                           	callstack 0
  6406   002F2C                     _I2C_2_Master_Init:
  6407                           	callstack 24
  6408   002F2C                     
  6409                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6410   002F2C  010E               	movlb	14	; () banked
  6411   002F2E  51D9               	movf	217,w,b	;volatile
  6412   002F30  0BF0               	andlw	-16
  6413   002F32  0908               	iorlw	8
  6414   002F34  6FD9               	movwf	217,b	;volatile
  6415   002F36                     
  6416                           ; BSR set to: 14
  6417                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6418   002F36  8BD9               	bsf	217,5,b	;volatile
  6419                           
  6420                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6421   002F38  0E9F               	movlw	159
  6422   002F3A  6FD6               	movwf	214,b	;volatile
  6423   002F3C                     
  6424                           ; BSR set to: 14
  6425                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6426   002F3C  8A84               	bsf	132,5,c	;volatile
  6427   002F3E                     
  6428                           ; BSR set to: 14
  6429                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6430   002F3E  8C84               	bsf	132,6,c	;volatile
  6431   002F40                     
  6432                           ; BSR set to: 14
  6433                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6434   002F40  9BA7               	bcf	167,5,b	;volatile
  6435   002F42                     
  6436                           ; BSR set to: 14
  6437                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6438   002F42  9DA7               	bcf	167,6,b	;volatile
  6439                           
  6440                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  6441   002F44  0E1D               	movlw	29
  6442   002F46  6F1D               	movwf	29,b	;volatile
  6443                           
  6444                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  6445   002F48  0E1E               	movlw	30
  6446   002F4A  6F1C               	movwf	28,b	;volatile
  6447                           
  6448                           ;i2c.c: 18:   RD5PPS=0x1C;
  6449   002F4C  0E1C               	movlw	28
  6450   002F4E  6F6F               	movwf	111,b	;volatile
  6451                           
  6452                           ;i2c.c: 19:   RD6PPS=0x1B;
  6453   002F50  0E1B               	movlw	27
  6454   002F52  6F70               	movwf	112,b	;volatile
  6455   002F54                     
  6456                           ; BSR set to: 14
  6457   002F54  0012               	return		;funcret
  6458   002F56                     __end_of_I2C_2_Master_Init:
  6459                           	callstack 0
  6460                           
  6461 ;; *************** function _batteryLevel *****************
  6462 ;; Defined at:
  6463 ;;		line 6 in file "battery.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  batteryQuart    1   21[COMRAM] unsigned char 
  6468 ;;  batteryVolta    1   20[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;Total ram usage:        2 bytes
  6483 ;; Hardware stack levels used: 1
  6484 ;; Hardware stack levels required when called: 6
  6485 ;; This function calls:
  6486 ;;		_ADC_getval
  6487 ;;		_ADC_init
  6488 ;;		___awdiv
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text30
  6495   002E2E                     __ptext30:
  6496                           	callstack 0
  6497   002E2E                     _batteryLevel:
  6498                           	callstack 24
  6499   002E2E                     
  6500                           ;battery.c: 7:     ADC_init();
  6501   002E2E  EC71  F018         	call	_ADC_init	;wreg free
  6502                           
  6503                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6504   002E32  EC7E  F018         	call	_ADC_getval	;wreg free
  6505   002E36  6E15               	movwf	batteryLevel@batteryVoltage^0,c
  6506   002E38                     
  6507                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6508   002E38  C015  F00D         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6509   002E3C  6A0E               	clrf	(___awdiv@dividend+1)^0,c
  6510   002E3E  0E00               	movlw	0
  6511   002E40  6E10               	movwf	(___awdiv@divisor+1)^0,c
  6512   002E42  0E18               	movlw	24
  6513   002E44  6E0F               	movwf	___awdiv@divisor^0,c
  6514   002E46  EC4D  F015         	call	___awdiv	;wreg free
  6515   002E4A  500D               	movf	?___awdiv^0,w,c
  6516   002E4C  6E16               	movwf	batteryLevel@batteryQuarter^0,c
  6517   002E4E                     
  6518                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  6519   002E4E  A216               	btfss	batteryLevel@batteryQuarter^0,1,c
  6520   002E50  EF2C  F017         	goto	u1551
  6521   002E54  EF2E  F017         	goto	u1550
  6522   002E58                     u1551:
  6523   002E58  EF31  F017         	goto	l376
  6524   002E5C                     u1550:
  6525   002E5C  8E7C               	bsf	124,7,c	;volatile
  6526   002E5E  EF32  F017         	goto	l377
  6527   002E62                     l376:
  6528   002E62  9E7C               	bcf	124,7,c	;volatile
  6529   002E64                     l377:
  6530                           
  6531                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  6532   002E64  A016               	btfss	batteryLevel@batteryQuarter^0,0,c
  6533   002E66  EF37  F017         	goto	u1561
  6534   002E6A  EF39  F017         	goto	u1560
  6535   002E6E                     u1561:
  6536   002E6E  EF3C  F017         	goto	l378
  6537   002E72                     u1560:
  6538   002E72  8680               	bsf	128,3,c	;volatile
  6539   002E74  EF3D  F017         	goto	l380
  6540   002E78                     l378:
  6541   002E78  9680               	bcf	128,3,c	;volatile
  6542   002E7A                     l380:
  6543   002E7A  0012               	return		;funcret
  6544   002E7C                     __end_of_batteryLevel:
  6545                           	callstack 0
  6546                           
  6547 ;; *************** function ___awdiv *****************
  6548 ;; Defined at:
  6549 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  dividend        2   12[COMRAM] int 
  6552 ;;  divisor         2   14[COMRAM] int 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  quotient        2   18[COMRAM] int 
  6555 ;;  sign            1   17[COMRAM] unsigned char 
  6556 ;;  counter         1   16[COMRAM] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  2   12[COMRAM] int 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2, status,0
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6566 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6567 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6569 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;Total ram usage:        8 bytes
  6571 ;; Hardware stack levels used: 1
  6572 ;; Hardware stack levels required when called: 5
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_batteryLevel
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text31
  6581   002A9A                     __ptext31:
  6582                           	callstack 0
  6583   002A9A                     ___awdiv:
  6584                           	callstack 24
  6585   002A9A  0E00               	movlw	0
  6586   002A9C  6E12               	movwf	___awdiv@sign^0,c
  6587   002A9E  BE10               	btfsc	(___awdiv@divisor+1)^0,7,c
  6588   002AA0  EF56  F015         	goto	u1490
  6589   002AA4  EF54  F015         	goto	u1491
  6590   002AA8                     u1491:
  6591   002AA8  EF5C  F015         	goto	l2783
  6592   002AAC                     u1490:
  6593   002AAC  6C0F               	negf	___awdiv@divisor^0,c
  6594   002AAE  1E10               	comf	(___awdiv@divisor+1)^0,f,c
  6595   002AB0  B0D8               	btfsc	status,0,c
  6596   002AB2  2A10               	incf	(___awdiv@divisor+1)^0,f,c
  6597   002AB4  0E01               	movlw	1
  6598   002AB6  6E12               	movwf	___awdiv@sign^0,c
  6599   002AB8                     l2783:
  6600   002AB8  BE0E               	btfsc	(___awdiv@dividend+1)^0,7,c
  6601   002ABA  EF63  F015         	goto	u1500
  6602   002ABE  EF61  F015         	goto	u1501
  6603   002AC2                     u1501:
  6604   002AC2  EF69  F015         	goto	l2789
  6605   002AC6                     u1500:
  6606   002AC6  6C0D               	negf	___awdiv@dividend^0,c
  6607   002AC8  1E0E               	comf	(___awdiv@dividend+1)^0,f,c
  6608   002ACA  B0D8               	btfsc	status,0,c
  6609   002ACC  2A0E               	incf	(___awdiv@dividend+1)^0,f,c
  6610   002ACE  0E01               	movlw	1
  6611   002AD0  1A12               	xorwf	___awdiv@sign^0,f,c
  6612   002AD2                     l2789:
  6613   002AD2  0E00               	movlw	0
  6614   002AD4  6E14               	movwf	(___awdiv@quotient+1)^0,c
  6615   002AD6  0E00               	movlw	0
  6616   002AD8  6E13               	movwf	___awdiv@quotient^0,c
  6617   002ADA  500F               	movf	___awdiv@divisor^0,w,c
  6618   002ADC  1010               	iorwf	(___awdiv@divisor+1)^0,w,c
  6619   002ADE  B4D8               	btfsc	status,2,c
  6620   002AE0  EF74  F015         	goto	u1511
  6621   002AE4  EF76  F015         	goto	u1510
  6622   002AE8                     u1511:
  6623   002AE8  EF9E  F015         	goto	l2811
  6624   002AEC                     u1510:
  6625   002AEC  0E01               	movlw	1
  6626   002AEE  6E11               	movwf	___awdiv@counter^0,c
  6627   002AF0  EF7E  F015         	goto	l2797
  6628   002AF4                     l2795:
  6629   002AF4  90D8               	bcf	status,0,c
  6630   002AF6  360F               	rlcf	___awdiv@divisor^0,f,c
  6631   002AF8  3610               	rlcf	(___awdiv@divisor+1)^0,f,c
  6632   002AFA  2A11               	incf	___awdiv@counter^0,f,c
  6633   002AFC                     l2797:
  6634   002AFC  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
  6635   002AFE  EF83  F015         	goto	u1521
  6636   002B02  EF85  F015         	goto	u1520
  6637   002B06                     u1521:
  6638   002B06  EF7A  F015         	goto	l2795
  6639   002B0A                     u1520:
  6640   002B0A                     l2799:
  6641   002B0A  90D8               	bcf	status,0,c
  6642   002B0C  3613               	rlcf	___awdiv@quotient^0,f,c
  6643   002B0E  3614               	rlcf	(___awdiv@quotient+1)^0,f,c
  6644   002B10  500F               	movf	___awdiv@divisor^0,w,c
  6645   002B12  5C0D               	subwf	___awdiv@dividend^0,w,c
  6646   002B14  5010               	movf	(___awdiv@divisor+1)^0,w,c
  6647   002B16  580E               	subwfb	(___awdiv@dividend+1)^0,w,c
  6648   002B18  A0D8               	btfss	status,0,c
  6649   002B1A  EF91  F015         	goto	u1531
  6650   002B1E  EF93  F015         	goto	u1530
  6651   002B22                     u1531:
  6652   002B22  EF98  F015         	goto	l2807
  6653   002B26                     u1530:
  6654   002B26  500F               	movf	___awdiv@divisor^0,w,c
  6655   002B28  5E0D               	subwf	___awdiv@dividend^0,f,c
  6656   002B2A  5010               	movf	(___awdiv@divisor+1)^0,w,c
  6657   002B2C  5A0E               	subwfb	(___awdiv@dividend+1)^0,f,c
  6658   002B2E  8013               	bsf	___awdiv@quotient^0,0,c
  6659   002B30                     l2807:
  6660   002B30  90D8               	bcf	status,0,c
  6661   002B32  3210               	rrcf	(___awdiv@divisor+1)^0,f,c
  6662   002B34  320F               	rrcf	___awdiv@divisor^0,f,c
  6663   002B36  2E11               	decfsz	___awdiv@counter^0,f,c
  6664   002B38  EF85  F015         	goto	l2799
  6665   002B3C                     l2811:
  6666   002B3C  5012               	movf	___awdiv@sign^0,w,c
  6667   002B3E  B4D8               	btfsc	status,2,c
  6668   002B40  EFA4  F015         	goto	u1541
  6669   002B44  EFA6  F015         	goto	u1540
  6670   002B48                     u1541:
  6671   002B48  EFAA  F015         	goto	l2815
  6672   002B4C                     u1540:
  6673   002B4C  6C13               	negf	___awdiv@quotient^0,c
  6674   002B4E  1E14               	comf	(___awdiv@quotient+1)^0,f,c
  6675   002B50  B0D8               	btfsc	status,0,c
  6676   002B52  2A14               	incf	(___awdiv@quotient+1)^0,f,c
  6677   002B54                     l2815:
  6678   002B54  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  6679   002B58  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  6680   002B5C  0012               	return		;funcret
  6681   002B5E                     __end_of___awdiv:
  6682                           	callstack 0
  6683                           
  6684 ;; *************** function _ADC_init *****************
  6685 ;; Defined at:
  6686 ;;		line 9 in file "ADC.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 5
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_batteryLevel
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text32
  6715   0030E2                     __ptext32:
  6716                           	callstack 0
  6717   0030E2                     _ADC_init:
  6718                           	callstack 24
  6719   0030E2                     
  6720                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6721   0030E2  8C86               	bsf	134,6,c	;volatile
  6722                           
  6723                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6724   0030E4  010E               	movlb	14	; () banked
  6725   0030E6  8DB4               	bsf	180,6,b	;volatile
  6726                           
  6727                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6728   0030E8  010F               	movlb	15	; () banked
  6729   0030EA  9958               	bcf	88,4,b	;volatile
  6730   0030EC                     
  6731                           ; BSR set to: 15
  6732                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6733   0030EC  0EFC               	movlw	-4
  6734   0030EE  1758               	andwf	88,f,b	;volatile
  6735                           
  6736                           ;ADC.c: 17:     ADPCH=0b101110;
  6737   0030F0  0E2E               	movlw	46
  6738   0030F2  6F5F               	movwf	95,b	;volatile
  6739   0030F4                     
  6740                           ; BSR set to: 15
  6741                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6742   0030F4  9460               	bcf	96,2,c	;volatile
  6743   0030F6                     
  6744                           ; BSR set to: 15
  6745                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6746   0030F6  8860               	bsf	96,4,c	;volatile
  6747   0030F8                     
  6748                           ; BSR set to: 15
  6749                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6750   0030F8  8E60               	bsf	96,7,c	;volatile
  6751   0030FA                     
  6752                           ; BSR set to: 15
  6753   0030FA  0012               	return		;funcret
  6754   0030FC                     __end_of_ADC_init:
  6755                           	callstack 0
  6756                           
  6757 ;; *************** function _ADC_getval *****************
  6758 ;; Defined at:
  6759 ;;		line 23 in file "ADC.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  tmpval          1   12[COMRAM] unsigned char 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      unsigned char 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6777 ;;Total ram usage:        1 bytes
  6778 ;; Hardware stack levels used: 1
  6779 ;; Hardware stack levels required when called: 5
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_batteryLevel
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text33
  6788   0030FC                     __ptext33:
  6789                           	callstack 0
  6790   0030FC                     _ADC_getval:
  6791                           	callstack 24
  6792   0030FC                     
  6793                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6794   0030FC  8060               	bsf	96,0,c	;volatile
  6795   0030FE                     l362:
  6796   0030FE  B060               	btfsc	96,0,c	;volatile
  6797   003100  EF84  F018         	goto	u1301
  6798   003104  EF86  F018         	goto	u1300
  6799   003108                     u1301:
  6800   003108  EF7F  F018         	goto	l362
  6801   00310C                     u1300:
  6802   00310C                     
  6803                           ;ADC.c: 31:     tmpval = ADRESH;
  6804   00310C  CF64 F00D          	movff	3940,ADC_getval@tmpval	;volatile
  6805   003110                     
  6806                           ;ADC.c: 35:     return tmpval;
  6807   003110  500D               	movf	ADC_getval@tmpval^0,w,c
  6808   003112  0012               	return		;funcret
  6809   003114                     __end_of_ADC_getval:
  6810                           	callstack 0
  6811                           
  6812 ;; *************** function _Timer0_init *****************
  6813 ;; Defined at:
  6814 ;;		line 7 in file "timers.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6832 ;;Total ram usage:        0 bytes
  6833 ;; Hardware stack levels used: 1
  6834 ;; Hardware stack levels required when called: 5
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_main
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text34
  6843   003084                     __ptext34:
  6844                           	callstack 0
  6845   003084                     _Timer0_init:
  6846                           	callstack 25
  6847   003084                     
  6848                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  6849   003084  50D6               	movf	214,w,c	;volatile
  6850   003086  0B1F               	andlw	-225
  6851   003088  0940               	iorlw	64
  6852   00308A  6ED6               	movwf	214,c	;volatile
  6853   00308C                     
  6854                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  6855   00308C  88D6               	bsf	214,4,c	;volatile
  6856                           
  6857                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1011;
  6858   00308E  50D6               	movf	214,w,c	;volatile
  6859   003090  0BF0               	andlw	-16
  6860   003092  090B               	iorlw	11
  6861   003094  6ED6               	movwf	214,c	;volatile
  6862   003096                     
  6863                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  6864   003096  88D5               	bsf	213,4,c	;volatile
  6865                           
  6866                           ;timers.c: 15:     TMR0H=0;
  6867   003098  0E00               	movlw	0
  6868   00309A  6ED4               	movwf	212,c	;volatile
  6869                           
  6870                           ;timers.c: 16:     TMR0L=0;
  6871   00309C  0E00               	movlw	0
  6872   00309E  6ED3               	movwf	211,c	;volatile
  6873   0030A0                     
  6874                           ;timers.c: 17:     T0CON0bits.T0EN=1;
  6875   0030A0  8ED5               	bsf	213,7,c	;volatile
  6876   0030A2  0012               	return		;funcret
  6877   0030A4                     __end_of_Timer0_init:
  6878                           	callstack 0
  6879                           
  6880 ;; *************** function _Interrupts_init *****************
  6881 ;; Defined at:
  6882 ;;		line 11 in file "interrupts.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;		None
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;		None
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		None
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6900 ;;Total ram usage:        0 bytes
  6901 ;; Hardware stack levels used: 1
  6902 ;; Hardware stack levels required when called: 5
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_main
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text35
  6911   00312C                     __ptext35:
  6912                           	callstack 0
  6913   00312C                     _Interrupts_init:
  6914                           	callstack 25
  6915   00312C                     
  6916                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
  6917   00312C  8082               	bsf	130,0,c	;volatile
  6918                           
  6919                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
  6920   00312E  010E               	movlb	14	; () banked
  6921   003130  919A               	bcf	154,0,b	;volatile
  6922                           
  6923                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
  6924   003132  8129               	bsf	41,0,b	;volatile
  6925                           
  6926                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
  6927   003134  811F               	bsf	31,0,b	;volatile
  6928                           
  6929                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
  6930   003136  90F2               	bcf	242,0,c	;volatile
  6931                           
  6932                           ;interrupts.c: 22:     TMR0IE=1;
  6933   003138  8B29               	bsf	41,5,b	;volatile
  6934                           
  6935                           ;interrupts.c: 23:     PIE4bits.RC4IE=1;
  6936   00313A  872D               	bsf	45,3,b	;volatile
  6937                           
  6938                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
  6939   00313C  8CF2               	bsf	242,6,c	;volatile
  6940                           
  6941                           ;interrupts.c: 25:     INTCONbits.GIE=1;
  6942   00313E  8EF2               	bsf	242,7,c	;volatile
  6943   003140                     
  6944                           ; BSR set to: 14
  6945   003140  0012               	return		;funcret
  6946   003142                     __end_of_Interrupts_init:
  6947                           	callstack 0
  6948                           
  6949 ;; *************** function _Buggy_init *****************
  6950 ;; Defined at:
  6951 ;;		line 7 in file "buggysetup.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		None
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used: 1
  6971 ;; Hardware stack levels required when called: 5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_main
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text36
  6980   002EF6                     __ptext36:
  6981                           	callstack 0
  6982   002EF6                     _Buggy_init:
  6983                           	callstack 25
  6984   002EF6                     
  6985                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  6986   002EF6  9E7C               	bcf	124,7,c	;volatile
  6987                           
  6988                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  6989   002EF8  9E84               	bcf	132,7,c	;volatile
  6990                           
  6991                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  6992   002EFA  9680               	bcf	128,3,c	;volatile
  6993                           
  6994                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  6995   002EFC  9688               	bcf	136,3,c	;volatile
  6996                           
  6997                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  6998   002EFE  8486               	bsf	134,2,c	;volatile
  6999                           
  7000                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  7001   002F00  010E               	movlb	14	; () banked
  7002   002F02  95B4               	bcf	180,2,b	;volatile
  7003                           
  7004                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  7005   002F04  8686               	bsf	134,3,c	;volatile
  7006                           
  7007                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  7008   002F06  97B4               	bcf	180,3,b	;volatile
  7009                           
  7010                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  7011   002F08  9280               	bcf	128,1,c	;volatile
  7012                           
  7013                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  7014   002F0A  9288               	bcf	136,1,c	;volatile
  7015                           
  7016                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  7017   002F0C  987C               	bcf	124,4,c	;volatile
  7018                           
  7019                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  7020   002F0E  9884               	bcf	132,4,c	;volatile
  7021                           
  7022                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  7023   002F10  967C               	bcf	124,3,c	;volatile
  7024                           
  7025                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  7026   002F12  9684               	bcf	132,3,c	;volatile
  7027                           
  7028                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  7029   002F14  97A7               	bcf	167,3,b	;volatile
  7030                           
  7031                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  7032   002F16  9080               	bcf	128,0,c	;volatile
  7033                           
  7034                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  7035   002F18  9088               	bcf	136,0,c	;volatile
  7036                           
  7037                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  7038   002F1A  907E               	bcf	126,0,c	;volatile
  7039                           
  7040                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  7041   002F1C  9086               	bcf	134,0,c	;volatile
  7042                           
  7043                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  7044   002F1E  907F               	bcf	127,0,c	;volatile
  7045                           
  7046                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  7047   002F20  9087               	bcf	135,0,c	;volatile
  7048                           
  7049                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  7050   002F22  9E7D               	bcf	125,7,c	;volatile
  7051                           
  7052                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  7053   002F24  9E85               	bcf	133,7,c	;volatile
  7054                           
  7055                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  7056   002F26  9679               	bcf	121,3,c	;volatile
  7057                           
  7058                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  7059   002F28  9681               	bcf	129,3,c	;volatile
  7060   002F2A                     
  7061                           ; BSR set to: 14
  7062   002F2A  0012               	return		;funcret
  7063   002F2C                     __end_of_Buggy_init:
  7064                           	callstack 0
  7065                           
  7066 ;; *************** function _HighISR *****************
  7067 ;; Defined at:
  7068 ;;		line 33 in file "interrupts.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7084 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;Total ram usage:        3 bytes
  7087 ;; Hardware stack levels used: 1
  7088 ;; Hardware stack levels required when called: 4
  7089 ;; This function calls:
  7090 ;;		_getCharFromTxBuf
  7091 ;;		_isDataInTxBuf
  7092 ;;		_putCharToRxBuf
  7093 ;;		i2_color_clear_init_interrupts
  7094 ;; This function is called by:
  7095 ;;		Interrupt level 2
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	intcode
  7100   000008                     __pintcode:
  7101                           	callstack 0
  7102   000008                     _HighISR:
  7103                           	callstack 21
  7104                           
  7105                           ; BSR set to: 14
  7106                           ;incstack = 0
  7107   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7108   00000A  CFD9 F00B          	movff	fsr2l,??_HighISR+1
  7109   00000E  CFDA F00C          	movff	fsr2h,??_HighISR+2
  7110   000012                     
  7111                           ;interrupts.c: 37:     if(PIR0bits.INT0IF){
  7112   000012  010E               	movlb	14	; () banked
  7113   000014  A133               	btfss	51,0,b	;volatile
  7114   000016  EF0F  F000         	goto	i2u180_41
  7115   00001A  EF11  F000         	goto	i2u180_40
  7116   00001E                     i2u180_41:
  7117   00001E  EF2A  F000         	goto	i2l3175
  7118   000022                     i2u180_40:
  7119   000022                     
  7120                           ; BSR set to: 14
  7121                           ;interrupts.c: 39:     wall = 1;
  7122   000022  0E01               	movlw	1
  7123   000024  0101               	movlb	1	; () banked
  7124   000026  6FFA               	movwf	_wall& (0+255),b
  7125   000028                     
  7126                           ; BSR set to: 1
  7127                           ;interrupts.c: 40:     color_clear_init_interrupts();
  7128   000028  EC34  F016         	call	i2_color_clear_init_interrupts	;wreg free
  7129   00002C                     
  7130                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  7131   00002C  010E               	movlb	14	; () banked
  7132   00002E  9133               	bcf	51,0,b	;volatile
  7133   000030                     
  7134                           ; BSR set to: 14
  7135                           ;interrupts.c: 43:     LATHbits.LATH3 = !LATHbits.LATH3;
  7136   000030  A680               	btfss	128,3,c	;volatile
  7137   000032  EF1D  F000         	goto	i2u181_41
  7138   000036  EF21  F000         	goto	i2u181_40
  7139   00003A                     i2u181_41:
  7140   00003A  6A0A               	clrf	??_HighISR^0,c
  7141   00003C  2A0A               	incf	??_HighISR^0,f,c
  7142   00003E  EF22  F000         	goto	i2u182_48
  7143   000042                     i2u181_40:
  7144   000042  6A0A               	clrf	??_HighISR^0,c
  7145   000044                     i2u182_48:
  7146   000044  460A               	rlncf	??_HighISR^0,f,c
  7147   000046  460A               	rlncf	??_HighISR^0,f,c
  7148   000048  460A               	rlncf	??_HighISR^0,f,c
  7149   00004A  5080               	movf	128,w,c	;volatile
  7150   00004C  180A               	xorwf	??_HighISR^0,w,c
  7151   00004E  0BF7               	andlw	-9
  7152   000050  180A               	xorwf	??_HighISR^0,w,c
  7153   000052  6E80               	movwf	128,c	;volatile
  7154   000054                     i2l3175:
  7155                           
  7156                           ;interrupts.c: 49:     if(TMR0IF){
  7157   000054  010E               	movlb	14	; () banked
  7158   000056  AB33               	btfss	51,5,b	;volatile
  7159   000058  EF30  F000         	goto	i2u183_41
  7160   00005C  EF32  F000         	goto	i2u183_40
  7161   000060                     i2u183_41:
  7162   000060  EF33  F000         	goto	i2l277
  7163   000064                     i2u183_40:
  7164   000064                     
  7165                           ; BSR set to: 14
  7166                           ;interrupts.c: 52:  TMR0IF=0;
  7167   000064  9B33               	bcf	51,5,b	;volatile
  7168   000066                     i2l277:
  7169                           
  7170                           ; BSR set to: 14
  7171                           ;interrupts.c: 58:     if(PIR4bits.RC4IF){
  7172   000066  A737               	btfss	55,3,b	;volatile
  7173   000068  EF38  F000         	goto	i2u184_41
  7174   00006C  EF3A  F000         	goto	i2u184_40
  7175   000070                     i2u184_41:
  7176   000070  EF3D  F000         	goto	i2l3181
  7177   000074                     i2u184_40:
  7178   000074                     
  7179                           ; BSR set to: 14
  7180                           ;interrupts.c: 60:     putCharToRxBuf(RC4REG);
  7181   000074  51E3               	movf	227,w,b	;volatile
  7182   000076  ECFA  F017         	call	_putCharToRxBuf
  7183   00007A                     i2l3181:
  7184                           
  7185                           ;interrupts.c: 64:     if(PIR4bits.TX4IF){
  7186   00007A  010E               	movlb	14	; () banked
  7187   00007C  A537               	btfss	55,2,b	;volatile
  7188   00007E  EF43  F000         	goto	i2u185_41
  7189   000082  EF45  F000         	goto	i2u185_40
  7190   000086                     i2u185_41:
  7191   000086  EF55  F000         	goto	i2l281
  7192   00008A                     i2u185_40:
  7193   00008A                     
  7194                           ; BSR set to: 14
  7195                           ;interrupts.c: 66:     TX4REG = getCharFromTxBuf();
  7196   00008A  EC0D  F018         	call	_getCharFromTxBuf	;wreg free
  7197   00008E  010E               	movlb	14	; () banked
  7198   000090  6FE4               	movwf	228,b	;volatile
  7199   000092                     
  7200                           ; BSR set to: 14
  7201                           ;interrupts.c: 67:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  7202   000092  EC8A  F018         	call	_isDataInTxBuf	;wreg free
  7203   000096  0900               	iorlw	0
  7204   000098  A4D8               	btfss	status,2,c
  7205   00009A  EF51  F000         	goto	i2u186_41
  7206   00009E  EF53  F000         	goto	i2u186_40
  7207   0000A2                     i2u186_41:
  7208   0000A2  EF55  F000         	goto	i2l281
  7209   0000A6                     i2u186_40:
  7210   0000A6  010E               	movlb	14	; () banked
  7211   0000A8  952D               	bcf	45,2,b	;volatile
  7212   0000AA                     i2l281:
  7213   0000AA  C00C  FFDA         	movff	??_HighISR+2,fsr2h
  7214   0000AE  C00B  FFD9         	movff	??_HighISR+1,fsr2l
  7215   0000B2  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7216   0000B4  0011               	retfie		f
  7217   0000B6                     __end_of_HighISR:
  7218                           	callstack 0
  7219                           
  7220 ;; *************** function i2_color_clear_init_interrupts *****************
  7221 ;; Defined at:
  7222 ;;		line 25 in file "color.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  low_threshol    2    7[COMRAM] unsigned int 
  7227 ;;  high_thresho    2    5[COMRAM] unsigned int 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7238 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7240 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7241 ;;Total ram usage:        5 bytes
  7242 ;; Hardware stack levels used: 1
  7243 ;; Hardware stack levels required when called: 3
  7244 ;; This function calls:
  7245 ;;		i2_I2C_2_Master_Start
  7246 ;;		i2_I2C_2_Master_Stop
  7247 ;;		i2_I2C_2_Master_Write
  7248 ;;		i2_color_writetoaddr
  7249 ;; This function is called by:
  7250 ;;		_HighISR
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text38
  7255   002C68                     __ptext38:
  7256                           	callstack 0
  7257   002C68                     i2_color_clear_init_interrupts:
  7258                           	callstack 21
  7259   002C68                     
  7260                           ;color.c: 27:     I2C_2_Master_Start();
  7261   002C68  ECC6  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7262                           
  7263                           ;color.c: 28:     I2C_2_Master_Write(0x52 | 0x00);
  7264   002C6C  0E52               	movlw	82
  7265   002C6E  ECA7  F018         	call	i2_I2C_2_Master_Write
  7266                           
  7267                           ;color.c: 29:     I2C_2_Master_Write(0b11100110);
  7268   002C72  0EE6               	movlw	230
  7269   002C74  ECA7  F018         	call	i2_I2C_2_Master_Write
  7270                           
  7271                           ;color.c: 30:     I2C_2_Master_Stop();
  7272   002C78  ECC1  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7273   002C7C                     
  7274                           ;color.c: 33:     unsigned int high_threshold = ambient + 20;
  7275   002C7C  0E14               	movlw	20
  7276   002C7E  244A               	addwf	_ambient^0,w,c
  7277   002C80  6E06               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
  7278   002C82  0E00               	movlw	0
  7279   002C84  204B               	addwfc	(_ambient+1)^0,w,c
  7280   002C86  6E07               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
  7281   002C88                     
  7282                           ;color.c: 34:     unsigned int low_threshold = ambient - 20;
  7283   002C88  0EEC               	movlw	236
  7284   002C8A  244A               	addwf	_ambient^0,w,c
  7285   002C8C  6E08               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
  7286   002C8E  0EFF               	movlw	255
  7287   002C90  204B               	addwfc	(_ambient+1)^0,w,c
  7288   002C92  6E09               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
  7289                           
  7290                           ;color.c: 37:  color_writetoaddr(0x00, 0x13);
  7291   002C94  0E13               	movlw	19
  7292   002C96  6E03               	movwf	i2color_writetoaddr@value^0,c
  7293   002C98  0E00               	movlw	0
  7294   002C9A  EC52  F018         	call	i2_color_writetoaddr
  7295   002C9E                     
  7296                           ;color.c: 38:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7297   002C9E  0E3F               	movlw	63
  7298   002CA0  6E05               	movwf	??i2_color_clear_init_interrupts^0,c
  7299   002CA2  0E55               	movlw	85
  7300   002CA4                     i2u269_47:
  7301   002CA4  2EE8               	decfsz	wreg,f,c
  7302   002CA6  D7FE               	bra	i2u269_47
  7303   002CA8  2E05               	decfsz	??i2_color_clear_init_interrupts^0,f,c
  7304   002CAA  D7FC               	bra	i2u269_47
  7305   002CAC  0000               	nop	
  7306   002CAE                     
  7307                           ;color.c: 39:     color_writetoaddr(0x07, (high_threshold >> 8));
  7308   002CAE  5007               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
  7309   002CB0  6E03               	movwf	i2color_writetoaddr@value^0,c
  7310   002CB2  0E07               	movlw	7
  7311   002CB4  EC52  F018         	call	i2_color_writetoaddr
  7312   002CB8                     
  7313                           ;color.c: 40:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  7314   002CB8  C006  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
  7315   002CBC  0E06               	movlw	6
  7316   002CBE  EC52  F018         	call	i2_color_writetoaddr
  7317   002CC2                     
  7318                           ;color.c: 41:     color_writetoaddr(0x05, (low_threshold >> 8));
  7319   002CC2  5009               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
  7320   002CC4  6E03               	movwf	i2color_writetoaddr@value^0,c
  7321   002CC6  0E05               	movlw	5
  7322   002CC8  EC52  F018         	call	i2_color_writetoaddr
  7323   002CCC                     
  7324                           ;color.c: 42:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  7325   002CCC  C008  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
  7326   002CD0  0E04               	movlw	4
  7327   002CD2  EC52  F018         	call	i2_color_writetoaddr
  7328   002CD6                     
  7329                           ;color.c: 43:     color_writetoaddr(0x0C, 0b0100);
  7330   002CD6  0E04               	movlw	4
  7331   002CD8  6E03               	movwf	i2color_writetoaddr@value^0,c
  7332   002CDA  0E0C               	movlw	12
  7333   002CDC  EC52  F018         	call	i2_color_writetoaddr
  7334   002CE0  0012               	return		;funcret
  7335   002CE2                     __end_ofi2_color_clear_init_interrupts:
  7336                           	callstack 0
  7337                           
  7338 ;; *************** function i2_color_writetoaddr *****************
  7339 ;; Defined at:
  7340 ;;		line 48 in file "color.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  address         1    wreg     unsigned char 
  7343 ;;  value           1    2[COMRAM] unsigned char 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  address         1    3[COMRAM] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      void 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7355 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7359 ;;Total ram usage:        2 bytes
  7360 ;; Hardware stack levels used: 1
  7361 ;; Hardware stack levels required when called: 2
  7362 ;; This function calls:
  7363 ;;		i2_I2C_2_Master_Start
  7364 ;;		i2_I2C_2_Master_Stop
  7365 ;;		i2_I2C_2_Master_Write
  7366 ;; This function is called by:
  7367 ;;		i2_color_clear_init_interrupts
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           	psect	text39
  7372   0030A4                     __ptext39:
  7373                           	callstack 0
  7374   0030A4                     i2_color_writetoaddr:
  7375                           	callstack 21
  7376                           
  7377                           ;incstack = 0
  7378                           ;i2color_writetoaddr@address stored from wreg
  7379   0030A4  6E04               	movwf	i2color_writetoaddr@address^0,c
  7380   0030A6                     
  7381                           ;color.c: 49:     I2C_2_Master_Start();
  7382   0030A6  ECC6  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7383                           
  7384                           ;color.c: 50:     I2C_2_Master_Write(0x52 | 0x00);
  7385   0030AA  0E52               	movlw	82
  7386   0030AC  ECA7  F018         	call	i2_I2C_2_Master_Write
  7387                           
  7388                           ;color.c: 51:     I2C_2_Master_Write(0x80 | address);
  7389   0030B0  5004               	movf	i2color_writetoaddr@address^0,w,c
  7390   0030B2  0980               	iorlw	128
  7391   0030B4  ECA7  F018         	call	i2_I2C_2_Master_Write
  7392                           
  7393                           ;color.c: 52:     I2C_2_Master_Write(value);
  7394   0030B8  5003               	movf	i2color_writetoaddr@value^0,w,c
  7395   0030BA  ECA7  F018         	call	i2_I2C_2_Master_Write
  7396                           
  7397                           ;color.c: 53:     I2C_2_Master_Stop();
  7398   0030BE  ECC1  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7399   0030C2  0012               	return		;funcret
  7400   0030C4                     __end_ofi2_color_writetoaddr:
  7401                           	callstack 0
  7402                           
  7403 ;; *************** function i2_I2C_2_Master_Write *****************
  7404 ;; Defined at:
  7405 ;;		line 45 in file "i2c.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  data_byte       1    wreg     unsigned char 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;  data_byte       1    1[COMRAM] unsigned char 
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7423 ;;Total ram usage:        1 bytes
  7424 ;; Hardware stack levels used: 1
  7425 ;; Hardware stack levels required when called: 1
  7426 ;; This function calls:
  7427 ;;		i2_I2C_2_Master_Idle
  7428 ;; This function is called by:
  7429 ;;		i2_color_clear_init_interrupts
  7430 ;;		i2_color_writetoaddr
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text40
  7435   00314E                     __ptext40:
  7436                           	callstack 0
  7437   00314E                     i2_I2C_2_Master_Write:
  7438                           	callstack 21
  7439                           
  7440                           ;incstack = 0
  7441                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7442   00314E  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7443   003150                     
  7444                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7445   003150  ECD3  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7446   003154                     
  7447                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7448   003154  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7449   003158  0012               	return		;funcret
  7450   00315A                     __end_ofi2_I2C_2_Master_Write:
  7451                           	callstack 0
  7452                           
  7453 ;; *************** function i2_I2C_2_Master_Stop *****************
  7454 ;; Defined at:
  7455 ;;		line 39 in file "i2c.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;		None
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7473 ;;Total ram usage:        0 bytes
  7474 ;; Hardware stack levels used: 1
  7475 ;; Hardware stack levels required when called: 1
  7476 ;; This function calls:
  7477 ;;		i2_I2C_2_Master_Idle
  7478 ;; This function is called by:
  7479 ;;		i2_color_clear_init_interrupts
  7480 ;;		i2_color_writetoaddr
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text41
  7485   003182                     __ptext41:
  7486                           	callstack 0
  7487   003182                     i2_I2C_2_Master_Stop:
  7488                           	callstack 21
  7489   003182                     
  7490                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7491   003182  ECD3  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7492   003186                     
  7493                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7494   003186  010E               	movlb	14	; () banked
  7495   003188  85DA               	bsf	218,2,b	;volatile
  7496   00318A                     
  7497                           ; BSR set to: 14
  7498   00318A  0012               	return		;funcret
  7499   00318C                     __end_ofi2_I2C_2_Master_Stop:
  7500                           	callstack 0
  7501                           
  7502 ;; *************** function i2_I2C_2_Master_Start *****************
  7503 ;; Defined at:
  7504 ;;		line 27 in file "i2c.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      void 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7522 ;;Total ram usage:        0 bytes
  7523 ;; Hardware stack levels used: 1
  7524 ;; Hardware stack levels required when called: 1
  7525 ;; This function calls:
  7526 ;;		i2_I2C_2_Master_Idle
  7527 ;; This function is called by:
  7528 ;;		i2_color_clear_init_interrupts
  7529 ;;		i2_color_writetoaddr
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text42
  7534   00318C                     __ptext42:
  7535                           	callstack 0
  7536   00318C                     i2_I2C_2_Master_Start:
  7537                           	callstack 21
  7538   00318C                     
  7539                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7540   00318C  ECD3  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7541   003190                     
  7542                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7543   003190  010E               	movlb	14	; () banked
  7544   003192  81DA               	bsf	218,0,b	;volatile
  7545   003194                     
  7546                           ; BSR set to: 14
  7547   003194  0012               	return		;funcret
  7548   003196                     __end_ofi2_I2C_2_Master_Start:
  7549                           	callstack 0
  7550                           
  7551 ;; *************** function i2_I2C_2_Master_Idle *****************
  7552 ;; Defined at:
  7553 ;;		line 22 in file "i2c.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;		None
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      void 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7571 ;;Total ram usage:        1 bytes
  7572 ;; Hardware stack levels used: 1
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		i2_I2C_2_Master_Start
  7577 ;;		i2_I2C_2_Master_Stop
  7578 ;;		i2_I2C_2_Master_Write
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text43
  7583   002FA6                     __ptext43:
  7584                           	callstack 0
  7585   002FA6                     i2_I2C_2_Master_Idle:
  7586                           	callstack 21
  7587   002FA6                     i2l171:
  7588   002FA6  010E               	movlb	14	; () banked
  7589   002FA8  B5D8               	btfsc	216,2,b	;volatile
  7590   002FAA  EFD9  F017         	goto	i2u107_41
  7591   002FAE  EFDB  F017         	goto	i2u107_40
  7592   002FB2                     i2u107_41:
  7593   002FB2  EFD3  F017         	goto	i2l171
  7594   002FB6                     i2u107_40:
  7595   002FB6                     
  7596                           ; BSR set to: 14
  7597   002FB6  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7598   002FBA  0E1F               	movlw	31
  7599   002FBC  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7600   002FBE  A4D8               	btfss	status,2,c
  7601   002FC0  EFE4  F017         	goto	i2u108_41
  7602   002FC4  EFE6  F017         	goto	i2u108_40
  7603   002FC8                     i2u108_41:
  7604   002FC8  EFD3  F017         	goto	i2l171
  7605   002FCC                     i2u108_40:
  7606   002FCC                     
  7607                           ; BSR set to: 14
  7608   002FCC  0012               	return		;funcret
  7609   002FCE                     __end_ofi2_I2C_2_Master_Idle:
  7610                           	callstack 0
  7611                           
  7612 ;; *************** function _putCharToRxBuf *****************
  7613 ;; Defined at:
  7614 ;;		line 33 in file "serial.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  byte            1    wreg     unsigned char 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  byte            1    0[COMRAM] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7632 ;;Total ram usage:        1 bytes
  7633 ;; Hardware stack levels used: 1
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_HighISR
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text44
  7642   002FF4                     __ptext44:
  7643                           	callstack 0
  7644   002FF4                     _putCharToRxBuf:
  7645                           	callstack 24
  7646                           
  7647                           ; BSR set to: 14
  7648                           ;incstack = 0
  7649                           ;putCharToRxBuf@byte stored from wreg
  7650   002FF4  6E01               	movwf	putCharToRxBuf@byte^0,c
  7651   002FF6                     
  7652                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  7653   002FF6  0E13               	movlw	19
  7654   002FF8  6449               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  7655   002FFA  EF01  F018         	goto	i2u166_41
  7656   002FFE  EF03  F018         	goto	i2u166_40
  7657   003002                     i2u166_41:
  7658   003002  EF05  F018         	goto	i2l3013
  7659   003006                     i2u166_40:
  7660   003006  0E00               	movlw	0
  7661   003008  6E49               	movwf	_RxBufWriteCnt^0,c	;volatile
  7662   00300A                     i2l3013:
  7663                           
  7664                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  7665   00300A  5049               	movf	_RxBufWriteCnt^0,w,c
  7666   00300C  0FC4               	addlw	low _EUSART4RXbuf
  7667   00300E  6ED9               	movwf	fsr2l,c
  7668   003010  6ADA               	clrf	fsr2h,c
  7669   003012  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  7670   003016  2A49               	incf	_RxBufWriteCnt^0,f,c	;volatile
  7671   003018  0012               	return		;funcret
  7672   00301A                     __end_of_putCharToRxBuf:
  7673                           	callstack 0
  7674                           
  7675 ;; *************** function _isDataInTxBuf *****************
  7676 ;; Defined at:
  7677 ;;		line 61 in file "serial.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      unsigned char 
  7684 ;; Registers used:
  7685 ;;		wreg, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7695 ;;Total ram usage:        0 bytes
  7696 ;; Hardware stack levels used: 1
  7697 ;; This function calls:
  7698 ;;		Nothing
  7699 ;; This function is called by:
  7700 ;;		_HighISR
  7701 ;;		_sendTxBuf
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           	psect	text45
  7706   003114                     __ptext45:
  7707                           	callstack 0
  7708   003114                     _isDataInTxBuf:
  7709                           	callstack 24
  7710   003114                     
  7711                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  7712   003114  5046               	movf	_TxBufReadCnt^0,w,c	;volatile
  7713   003116  1847               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  7714   003118  A4D8               	btfss	status,2,c
  7715   00311A  EF91  F018         	goto	i2u168_41
  7716   00311E  EF94  F018         	goto	i2u168_40
  7717   003122                     i2u168_41:
  7718   003122  0E01               	movlw	1
  7719   003124  EF95  F018         	goto	i2u169_40
  7720   003128                     i2u168_40:
  7721   003128  0E00               	movlw	0
  7722   00312A                     i2u169_40:
  7723   00312A  0012               	return		;funcret
  7724   00312C                     __end_of_isDataInTxBuf:
  7725                           	callstack 0
  7726                           
  7727 ;; *************** function _getCharFromTxBuf *****************
  7728 ;; Defined at:
  7729 ;;		line 47 in file "serial.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;		None
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;		None
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      unsigned char 
  7736 ;; Registers used:
  7737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;Total ram usage:        1 bytes
  7748 ;; Hardware stack levels used: 1
  7749 ;; This function calls:
  7750 ;;		Nothing
  7751 ;; This function is called by:
  7752 ;;		_HighISR
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text46
  7757   00301A                     __ptext46:
  7758                           	callstack 0
  7759   00301A                     _getCharFromTxBuf:
  7760                           	callstack 24
  7761   00301A                     
  7762                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7763   00301A  0E3B               	movlw	59
  7764   00301C  6446               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7765   00301E  EF13  F018         	goto	i2u167_41
  7766   003022  EF15  F018         	goto	i2u167_40
  7767   003026                     i2u167_41:
  7768   003026  EF17  F018         	goto	i2l3021
  7769   00302A                     i2u167_40:
  7770   00302A  0E00               	movlw	0
  7771   00302C  6E46               	movwf	_TxBufReadCnt^0,c	;volatile
  7772   00302E                     i2l3021:
  7773                           
  7774                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  7775   00302E  2A46               	incf	_TxBufReadCnt^0,f,c	;volatile
  7776   003030  0446               	decf	_TxBufReadCnt^0,w,c	;volatile
  7777   003032  6E01               	movwf	??_getCharFromTxBuf^0,c
  7778   003034  5001               	movf	??_getCharFromTxBuf^0,w,c
  7779   003036  0F60               	addlw	low _EUSART4TXbuf
  7780   003038  6ED9               	movwf	fsr2l,c
  7781   00303A  6ADA               	clrf	fsr2h,c
  7782   00303C  50DF               	movf	indf2,w,c
  7783   00303E  0012               	return		;funcret
  7784   003040                     __end_of_getCharFromTxBuf:
  7785                           	callstack 0
  7786                           
  7787                           	psect	smallconst
  7788   000E00                     __psmallconst:
  7789                           	callstack 0
  7790   000E00  00                 	db	0
  7791   000E01  00                 	db	0	; dummy byte at the end
  7792   000000                     
  7793                           	psect	rparam
  7794   000000                     
  7795                           	psect	temp
  7796   00004C                     btemp:
  7797                           	callstack 0
  7798   00004C                     	ds	1
  7799   000000                     int$flags	set	btemp
  7800   000000                     wtemp8	set	btemp+1
  7801   000000                     ttemp5	set	btemp+1
  7802   000000                     ttemp6	set	btemp+4
  7803   000000                     ttemp7	set	btemp+8
  7804                           
  7805                           	psect	config
  7806                           
  7807                           ;Config register CONFIG1L @ 0x300000
  7808                           ;	External Oscillator mode Selection bits
  7809                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7810                           ;	Power-up default value for COSC bits
  7811                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7812   300000                     	org	3145728
  7813   300000  AA                 	db	170
  7814                           
  7815                           ;Config register CONFIG1H @ 0x300001
  7816                           ;	unspecified, using default values
  7817                           ;	Clock Out Enable bit
  7818                           ;	CLKOUTEN = 0x1, unprogrammed default
  7819                           ;	Clock Switch Enable bit
  7820                           ;	CSWEN = 0x1, unprogrammed default
  7821                           ;	Fail-Safe Clock Monitor Enable bit
  7822                           ;	FCMEN = 0x1, unprogrammed default
  7823   300001                     	org	3145729
  7824   300001  FF                 	db	255
  7825                           
  7826                           ;Config register CONFIG3L @ 0x300004
  7827                           ;	WDT Period Select bits
  7828                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7829                           ;	WDT operating mode
  7830                           ;	WDTE = OFF, WDT Disabled
  7831   300004                     	org	3145732
  7832   300004  9F                 	db	159
  7833                           
  7834                           ;Config register CONFIG3H @ 0x300005
  7835                           ;	unspecified, using default values
  7836                           ;	WDT Window Select bits
  7837                           ;	WDTCWS = 0x7, unprogrammed default
  7838                           ;	WDT input clock selector
  7839                           ;	WDTCCS = 0x7, unprogrammed default
  7840   300005                     	org	3145733
  7841   300005  FF                 	db	255
  7842                           tosu	equ	0xFFF
  7843                           tosh	equ	0xFFE
  7844                           tosl	equ	0xFFD
  7845                           stkptr	equ	0xFFC
  7846                           pclatu	equ	0xFFB
  7847                           pclath	equ	0xFFA
  7848                           pcl	equ	0xFF9
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           indf0	equ	0xFEF
  7856                           postinc0	equ	0xFEE
  7857                           postdec0	equ	0xFED
  7858                           preinc0	equ	0xFEC
  7859                           plusw0	equ	0xFEB
  7860                           fsr0h	equ	0xFEA
  7861                           fsr0l	equ	0xFE9
  7862                           wreg	equ	0xFE8
  7863                           indf1	equ	0xFE7
  7864                           postinc1	equ	0xFE6
  7865                           postdec1	equ	0xFE5
  7866                           preinc1	equ	0xFE4
  7867                           plusw1	equ	0xFE3
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           bsr	equ	0xFE0
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           preinc2	equ	0xFDC
  7875                           plusw2	equ	0xFDB
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         247
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      75
    BANK0           160     16     136
    BANK1           256    210     255
    BANK2           256      0      82
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC_n(BANK1[8]), 

    color_read@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    move@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    move@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    returnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    returnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), main@motorR(BANK1[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _move->_returnHome
    _returnHome->_reverseOneSquare
    _returnHome->_turnLeft
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _batteryLevel->___awdiv

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_move

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               214   214      0   97594
                                             67 COMRAM     2     2      0
                                              0 BANK1    210   210      0
                         _Buggy_init
                    _Interrupts_init
                        _Timer0_init
                       _batteryLevel
                   _color_click_init
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                         _resetTimer
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _move                                                18     2     16   81781
                                             65 COMRAM     2     2      0
                                              0 BANK0     16     0     16
                     _fullSpeedAhead
                         _returnHome
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          20     5     15   41904
                                             45 COMRAM    20     5     15
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     7      7    9773
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     7      7   14333
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                12     7      5    3369
                                             31 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    14     7      7    4497
                                             31 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _get16bitTMR0val                                     10     8      2      69
                                             12 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                      13     7      6    5637
                                             31 COMRAM    13     7      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2285
                                             25 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             18 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           9     7      2     483
                                             16 COMRAM     9     7      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             13 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     12     2     10    1965
                                             38 COMRAM    12     2     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                             12 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             24 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    1612
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0     862
                                             16 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             14 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             13 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             20 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              3     3      0     356
                                              9 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        5     5      0     334
                                              4 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _Timer0_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _color_writetoaddr
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _returnHome
       _fullSpeedAhead
       _get16bitTMR0val
       _resetTimer
       _reverseOneSquare
         _setMotorPWM
       _stop
         _setMotorPWM
       _turnLeft
         _setMotorPWM
       _turnRight
         _setMotorPWM
     _reverseOneSquare
     _turnLeft
     _turnRight
   _resetTimer
   _stop
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      52       9       32.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D2      FF       7       99.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      88       5       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4B       1       79.8%
BITBIGSFRllllhh     37      0       0      46        0.0%
BITBIGSFRllhlll     31      0       0      44        0.0%
BITBIGSFRllllhl     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRllllhl     20      0       0      49        0.0%
BITBIGSFRhlhh       1B      0       0      33        0.0%
BITBIGSFRllhh       17      0       0      38        0.0%
BITBIGSFRllhlll     14      0       0      41        0.0%
BITBIGSFRhlhl       13      0       0      34        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRllllhl     11      0       0      53        0.0%
BITBIGSFRhllh        E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      51        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRlllllh      9      0       0      62        0.0%
BITBIGSFRllllhh      8      0       0      47        0.0%
BITBIGSFRllhlll      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllhl      6      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      60        0.0%
BITBIGSFRllhlhh      5      0       0      39        0.0%
BITBIGSFRllhlll      3      0       0      42        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRllllhl      3      0       0      55        0.0%
BITBIGSFRllllhl      3      0       0      61        0.0%
BITBIGSFRlllh        2      0       0      45        0.0%
BITBIGSFRlh          2      0       0      37        0.0%
BITBIGSFRllllhl      1      0       0      54        0.0%
BITBIGSFRlllllh      1      0       0      63        0.0%
BITBIGSFRllllhl      1      0       0      48        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRhlll        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     224      66        0.0%
DATA                 0      0     224       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 09 20:41:28 2024

                                _white_Light 3040                                           l81 1BAE  
                                         l87 1D56                                           l79 1BA0  
                               ___awdiv@sign 0012                          ___wmul@multiplicand 000F  
                           main@turnDuration 01A8                            ??_Interrupts_init 000D  
                                        l122 3082                                          l130 1F46  
                                        l220 2F2A                                          l116 2EF4  
                                        l133 279C                                          l125 305C  
                                        l119 2C66                                          l127 3062  
                                        l312 30E0                                          l171 2F7E  
                                        l180 316C                                          l174 2FA4  
                                        l271 3140                                          l183 3176  
                                        l511 29B2                                          l503 14BC  
                                        l168 2F54                                          l600 3162  
                                        l520 2410                                          l177 3180  
                                        l362 30FE                                          l186 314C  
                                        l522 2434                                          l603 2F7C  
                                        l364 310C                                          l380 2E7A  
                                        l460 2652                                          l508 2970  
                                        l516 23A4                                          l365 3112  
                                        l189 2EBC                                          l453 2BEC  
                                        l525 24B8                                          l533 21CA  
                                        l606 2FF2                                          l550 2A4C  
                                        l542 22DE                                          l359 30FA  
                                        l376 2E62                                          l528 24E6  
                                        l472 1AD2                                          l377 2E64  
                                        l617 2E1C                                          l545 230C  
                                        l537 2236                                          l378 2E78  
                                        l618 2E2C                                          l554 2A98  
                                        l571 2132                                          l563 2048  
                                        l539 225A                                          l565 206C  
                                        l493 1442                                          l478 1AD2  
                                        l559 1FDC                                          l487 1442  
                                        l568 20F0                                          l597 30A2  
                                        l837 2B5C                                          l685 28A8  
                                        prod 0FF3                          i2_color_writetoaddr 30A4  
                                        wreg 0FE8    color_clear_init_interrupts@high_threshold 0012  
i2color_clear_init_interrupts@high_threshold 0006                              _color_normalise 2654  
                                       l1104 2D54                                         l2301 2D3E  
                                       l2311 3144                                         l2303 2D40  
                                       l2313 3148                                         l2305 2D46  
                                       l1097 2D4C                                         l2321 2504  
                                       l2401 2192                                         l2307 3178  
                                       l2315 316E                                         l2331 25CE  
                                       l2323 2558                                         l2411 21EE  
                                       l2403 219E                                         l2309 317C  
                                       l2317 3172                                         l2333 2612  
                                       l2325 256C                                         l2341 29D4  
                                       l2501 1FD8                                         l2421 2260  
                                       l2405 21AA                                         l2413 21F2  
                                       l3301 17EE                                         l2327 2570  
                                       l2319 24E8                                         l2351 2A38  
                                       l2343 29E0                                         l2511 2044  
                                       l2503 2000                                         l2431 22BE  
                                       l2415 2216                                         l2407 21B6  
                                       l3311 1890                                         l3303 1800  
                                       l2601 30F6                                         l2281 2FEA  
                                       l2329 25B2                                         l2353 2A48  
                                       l2345 2A14                                         l2361 2F56  
                                       l2521 20C4                                         l2513 2072  
                                       l2505 2004                                         l2441 230E  
                                       l2433 22CA                                         l2425 2272  
                                       l2417 2222                                         l2409 21C6  
                                       l3321 194A                                         l3305 1820  
                                       l3313 18C8                                         l3401 1B98  
                                       l2603 30F8                                         l2275 2F7E  
                                       l2291 2D04                                         l2355 2A70  
                                       l2347 2A20                                         l2339 29B4  
                                       l2363 2F62                                         l2523 20D0  
                                       l2507 2028                                         l2371 28F2  
                                       l2451 2384                                         l2443 232C  
                                       l2435 22DA                                         l2427 22A6  
                                       l2419 2232                                         l2611 0E02  
                                       l3331 19EC                                         l3323 196A  
                                       l3315 18DA                                         l3307 1838  
                                       l3411 1BEC                                         l3403 1B9C  
                                       l2605 30FC                                         l2277 2F8E  
                                       l2293 2D0C                                         l2285 2CE2  
                                       l2349 2A2C                                         l2357 2A74  
                                       l2365 2F74                                         l2525 20DC  
                                       l2533 211E                                         l2517 2084  
                                       l2509 2034                                         l2381 2950  
                                       l2461 23F0                                         l2453 2390  
                                       l2445 2338                                         l2437 2302  
                                       l2429 22B2                                         l2701 1390  
                                       l2621 0ECA                                         l2613 0E22  
                                       l3333 1A24                                         l3317 18FA  
                                       l3325 19A2                                         l3309 1870  
                                       l3261 1540                                         l3253 14BE  
                                       l3421 1C38                                         l3413 1BF8  
                                       l3405 1BB6                                         l3341 1AD4  
                                       l2607 3110                                         l2551 2F3C  
                                       l2295 2D1A                                         l2287 2CEA  
                                       l2279 2FCE                                         l2359 315A  
                                       l2527 20EC                                         l2519 20B8  
                                       l2383 295C                                         l2391 299E  
                                       l2375 2904                                         l2471 244C  
                                       l2463 23FC                                         l2455 23A0  
                                       l2447 236C                                         l2703 13AE  
                                       l2631 0F4C                                         l2623 0EE2  
                                       l2615 0E3A                                         l3335 1A44  
                                       l3327 19B4                                         l3319 1912  
                                       l3271 15E2                                         l3255 14D0  
                                       l3263 1560                                         l3431 1CA0  
                                       l3423 1C3E                                         l3415 1C00  
                                       l3407 1BCE                                         l3351 1B12  
                                       l3343 1AE0                                         l2801 2B10  
                                       l2553 2F3E                                         l2393 3066  
                                       l2561 2C02                                         l2721 2DC4  
                                       l2297 2D20                                         l2289 2CFC  
                                       l2529 2114                                         l2385 296C  
                                       l2377 2938                                         l2369 28AA  
                                       l2481 24B4                                         l2473 2480  
                                       l2465 240C                                         l2457 23C8  
                                       l2449 2378                                         l2713 145E  
                                       l2705 13CE                                         l2641 0FAA  
                                       l2633 0F54                                         l2625 0EFE  
                                       l2617 0E72                                         l3329 19D4  
                                       l3337 1A7C                                         l3281 1684  
                                       l3265 1572                                         l3273 1602  
                                       l3257 14F0                                         l3441 1D2A  
                                       l3433 1CBE                                         l3425 1C4E  
                                       l3417 1C18                                         l3409 1BD4  
                                       l3361 1B26                                         l3353 1B16  
                                       l3345 1AE0                                         l2803 2B26  
                                       l2811 2B3C                                         l2555 2F40  
                                       l2547 2F2C                                         l2571 2C48  
                                       l2563 2C0E                                         l2731 279E  
                                       l2723 2DD4                                         l2299 2D36  
                                       l2491 1F70                                         l2387 2994  
                                       l2379 2944                                         l2483 24DC  
                                       l2475 248C                                         l2467 243A  
                                       l2459 23CC                                         l2395 2134  
                                       l2715 1462                                         l2707 13E6  
                                       l2651 1078                                         l2643 0FE6  
                                       l2635 0F56                                         l2627 0F02  
                                       l2619 0E92                                         l3339 1A8E  
                                       l3291 1726                                         l3283 16A4  
                                       l3275 1614                                         l3267 1592  
                                       l3259 1508                                         l3443 1D2E  
                                       l3435 1CD0                                         l3427 1C5E  
                                       l3419 1C34                                         l3371 1B48  
                                       l3363 1B32                                         l3355 1B1A  
                                       l3347 1AFE                                         l2821 2EF6  
                                       l2813 2B4C                                         l2805 2B2E  
                                       l2557 2F42                                         l2549 2F36  
                                       l2573 2C52                                         l2565 2C24  
                                       l2741 27D2                                         l2733 27A2  
                                       l2725 2DE2                                         l2581 2E7E  
                                       l2901 1DE6                                         l2493 1FA4  
                                       l2477 2498                                         l2397 2152  
                                       l2717 1494                                         l2709 141E  
                                       l2661 1126                                         l2653 1096  
                                       l2645 1004                                         l2637 0F72  
                                       l2629 0F34                                         l3293 1746  
                                       l3285 16DC                                         l3277 1634  
                                       l3269 15AA                                         l3445 1D3E  
                                       l3437 1CE0                                         l3429 1C94  
                                       l3381 1B64                                         l3373 1B50  
                                       l3365 1B38                                         l3357 1B1E  
                                       l3349 1B02                                         l2815 2B54  
                                       l2807 2B30                                         l2575 2C5C  
                                       l2567 2C34                                         l2559 2BEE  
                                       l2831 2EE6                                         l2823 2EBE  
                                       l2751 2814                                         l2743 27E2  
                                       l2735 27B0                                         l2727 2DF2  
                                       l2591 2EBA                                         l2583 2E82  
                                       l2911 1F00                                         l2903 1E04  
                                       l2495 1FB0                                         l2487 1F48  
                                       l2479 24A4                                         l2399 215E  
                                       l2671 11D0                                         l2663 115E  
                                       l2655 10B6                                         l2647 1024  
                                       l2639 0F92                                         l2719 14AC  
                                       l3295 175E                                         l3287 16F4  
                                       l3279 164C                                         l3439 1D26  
                                       l3447 1D44                                         l3391 1B84  
                                       l3383 1B68                                         l3375 1B58  
                                       l3367 1B3C                                         l3359 1B22  
                                       l2841 30A0                                         l2809 2B36  
                                       l2569 2C3E                                         l2833 2EF0  
                                       l2825 2EC2                                         l2761 2866  
                                       l2753 2820                                         l2745 27E6  
                                       l2737 27C0                                         l2729 2DFC  
                                       l2913 2654                                         l2585 2E8A  
                                       l2577 3164                                         l2905 1E64  
                                       l2497 1FBC                                         l2489 1F64  
                                       l2681 126A                                         l2673 1208  
                                       l2657 10CE                                         l2665 117A  
                                       l2649 103C                                         l3297 1796  
                                       l3289 1714                                         l3393 1B88  
                                       l3385 1B70                                         l3377 1B5C  
                                       l3369 1B40                                         l2843 312C  
                                       l2835 3084                                         l2595 30E2  
                                       l2827 2ECC                                         l2771 2898  
                                       l2763 2868                                         l2755 282E  
                                       l2747 27F6                                         l2739 27C4  
                                       l2915 2668                                         l2587 2E92  
                                       l2579 3168                                         l2907 1E82  
                                       l2851 30DA                                         l2499 1FC8  
                                       l2691 12FC                                         l2683 1282  
                                       l2667 1198                                         l2659 1106  
                                       l3299 17B6                                         l3395 1B8C  
                                       l3387 1B78                                         l3379 1B60  
                                       l2837 308C                                         l2597 30EC  
                                       l2781 2AB4                                         l2829 2EDC  
                                       l2765 2872                                         l2757 2838  
                                       l2749 280C                                         l2917 26CC  
                                       l2589 2EB8                                         l2909 1EE2  
                                       l2861 2B94                                         l2853 30DC  
                                       l2845 30C4                                         l2693 131C  
                                       l2685 12BA                                         l2669 11B8  
                                       l2677 122C                                         l3397 1B90  
                                       l3389 1B80                                         l2839 3096  
                                       l2599 30F4                                         l2791 2ADA  
                                       l2783 2AB8                                         l2775 2A9A  
                                       l2759 2856                                         l2767 2878  
                                       l2919 2734                                         l2871 2BD2  
                                       l2863 2B98                                         l2855 30DE  
                                       l2847 30CE                                         l2695 1334  
                                       l2679 124A                                         l3399 1B94  
                                       l2793 2AEC                                         l2785 2AC6  
                                       l2777 2A9E                                         l2881 2E2E  
                                       l2769 2888                                         l2873 2BD4  
                                       l2865 2BBC                                         l2857 2B5E  
                                       l2849 30D0                                         l2697 136C  
                                       l2689 12DE                                         l2795 2AF4  
                                       l2787 2ACE                                         l2779 2AAC  
                                       l2883 2E38                                         l2875 2BDE  
                                       l2867 2BC6                                         l2859 2B6E  
                                       l2891 3042                                         l2797 2AFC  
                                       l2789 2AD2                                         l2885 2E4E  
                                       l2877 2BE0                                         l2869 2BC8  
                                       l2893 3052                                         l2799 2B0A  
                                       l2887 2E5C                                         l2895 1D5A  
                                       l2879 2BEA                                         l2889 2E72  
                                       l2897 1D74                                  main@curMove 01B5  
                                       l2899 1D8E                                         u1000 2F8E  
                                       u1001 2F8A                                         u1010 2FA4  
                                       u1011 2FA0                                         u1020 2CFC  
                                       u1100 2A98                                         u1021 2CF8  
                                       u1101 2A94                                         u1030 2D1A  
                                       u1110 2900                                         u1031 2D16  
                                       u1111 28FC                                         u1040 2D36  
                                       u1120 2994                                         u1200 2434  
                                       u2000 1800                                         u1041 2D32  
                                       u1121 2990                                         u1201 2430  
                                       u2001 17FC                                         u1050 2504  
                                       u1210 2448                                         u1130 21EE  
                                       u2010 18DA                                         u1051 2500  
                                       u1211 2444                                         u1131 21EA  
                                       u2011 18D6                                         u1300 310C  
                                       u1060 25CE                                         u1220 24DC  
                                       u1140 2216                                         u2020 19B4  
                                       u1301 3108                                         u1061 25CA  
                                       u1221 24D8                                         u1141 2212  
                                       u2021 19B0                                         u2101 1CAA  
                                       u1230 2000                                         u1150 225A  
                                       u1310 0F34                                         u2030 1A8E  
                                       u1231 1FFC                                         u1151 2256  
                                       u1311 0F30                                         u2031 1A8A  
                                       u1240 2028                                         u1160 226E  
                                       u1400 14BC                                         u1320 0F72  
                                       u2120 1D56                                         u1241 2024  
                                       u1161 226A                                         u1401 14B8  
                                       u1321 0F6E                                         u2121 1D52  
                                       u2041 1ADA                                         u1410 2DE2  
                                       u1090 2A70                                         u1250 206C  
                                       u1170 2302                                         u1330 1004  
                                       u1411 2DDE                                         u1091 2A6C  
                                       u1251 2068                                         u1171 22FE  
                                       u1331 1000                                         u2115 1D3A  
                                       u2051 1AEC                                         u1500 2AC6  
                                       u1420 2E1C                                         u1260 2080  
                                       u1180 23C8                                         u1340 1096  
                                       u1501 2AC2                                         u1421 2E18  
                                       u1261 207C                                         u1181 23C4  
                                       u1341 1092                                         u2117 1D3E  
                                       u2061 1AF8                                         u1510 2AEC  
                                       u1430 27B0                                         u1270 2114  
                                       u1190 23F0                                         u1350 1198  
                                       u2070 1BAE                                         u1511 2AE8  
                                       u1431 27AC                                         u1271 2110  
                                       u1191 23EC                                         u1351 1194  
                                       u2207 163E                                         u2071 1BAA  
                                       u1520 2B0A                                         u1440 27D2  
                                       u1280 2EA6                                         u1360 124A  
                                       u2080 1C4E                                 _BAUD4CONbits 0EE9  
                                       u1521 2B06                                         u1441 27CE  
                                       u1281 2E9E                                         u1361 1246  
                                       u2217 1676                                         u2081 1C4A  
                                       u2137 1BC0                                         u1530 2B26  
                                       u1450 280C                                         u1370 12FC  
                                       u1531 2B22                                         u1451 2808  
                                       u1371 12F8                                         u2307 1904  
                                       u2227 16AE                                         u2147 1BDE  
                                       u1540 2B4C                                         u1460 282E  
                                       u1380 13AE                                         u1541 2B48  
                                       u1461 282A                                         u1381 13AA  
                                       u2317 193C                                         u2237 16E6  
                                       u2157 1C0A                                         u1550 2E5C  
                                       u1470 2856                                         u1390 1494  
                                       u1551 2E58                                         u1471 2852  
                                       u1391 1490                                         u2407 0F9C  
                                       u2327 1974                                         u2247 1750  
                                       u2167 14FA                                         u2095 1C5A  
                                       u1560 2E72                                         u1480 2888  
                                       u1561 2E6E                                         u1481 2884  
                                       u2417 0FD4                                         u2337 19DE  
                                       u2257 1788                                         u2177 1532  
                                       u2097 1C5E                                         u1490 2AAC  
                                       u1298 2EA8                                         u1570 3052  
                                       _T2PR 0FBC                                         u1491 2AA8  
                                       u2507 1274                                         u2427 102E  
                                       u2347 1A16                                         u2267 17C0  
                                       u2187 159C                                         u1571 304E  
                                       u2517 12AC                                         u2437 1066  
                                       u2357 1A4E                                         u2277 182A  
                                       u2197 15D4                                         u2607 2402  
                                       u2527 1326                                         u2447 10C0  
                                       u2367 0E2C                                         u2287 1862  
                                       u2617 24AA                                         u2537 135E  
                                       u2457 10F8                                         u2377 0E64  
                                       u2297 189A                                         u2627 2962  
                                       u2547 13D8                                         u2467 1130  
                                       u2387 0E9C                                         u2637 1FCE  
                                       u2557 1410                                         u2477 1168  
                                       u2397 0ED4                                         u2647 203A  
                                       u2567 21BC                                         u2487 11C2  
                                       u1960 14D0                                         u2657 20E2  
                                       u2577 2228                                         u2497 11FA  
                                       u1961 14CC                                         u1970 1572  
                                       u2667 2A3E                                         u2587 22D0  
                                       u1971 156E                                         u1980 1614  
                                       u2677 2ED2                                         u2597 2396  
                                       u1981 1610                                         u1990 1726  
                                       u2687 2C2A                                         u1991 1722  
                                       _main 1AD4                                         _move 14BE  
                                       _wall 01FA                                         fsr2h 0FDA  
                                       indf2 0FDF                                         fsr1l 0FE1  
                                       fsr2l 0FD9                                         btemp 004C  
                                       _stop 28AA                                         prodh 0FF4  
                                       prodl 0FF3                                         start 00B6  
                        main@reverseDuration 01A6                             __end_of_ADC_init 30FC  
                       ?i2_color_writetoaddr 0003                              __end_of_HighISR 00B6  
                               ___param_bank 0000                         __end_of_batteryLevel 2E7C  
                            __end_of___aldiv 28AA                                        ?_main 0001  
                                      _ADPCH 0F5F                              __end_of___awdiv 2B5E  
                                      ?_move 00D8                                        ?_stop 0020  
                            ___awdiv@divisor 000F                              __end_of___lwdiv 2D56  
                                      i2l122 30C2                                        i2l119 2CE0  
                                      i2l320 3018                                        i2l171 2FA6  
                                      i2l334 312A                                        i2l174 2FCC  
                                      i2l327 303E                                        i2l183 318A  
                                      i2l177 3194                                        i2l281 00AA  
                                      i2l186 3158                                        i2l277 0066  
                            ___awdiv@counter 0011                                        _TMR0H 0FD4  
                                      _TMR0L 0FD3                          ___lmul@multiplicand 0011  
                 __end_of_I2C_2_Master_Start 3182                   __end_of_I2C_2_Master_Write 314E  
                                 _Buggy_init 2EF6                       returnHome@straightRamp 0039  
                     returnHome@straightTime 0034                                        tablat 0FF5  
                                      plusw0 0FEB                                        plusw2 0FDB  
                                      ttemp5 004D                                        ttemp6 0050  
                                      ttemp7 0054                                        stop@i 0028  
                                      status 0FD8                                        wtemp8 004D  
                      ??i2_color_writetoaddr 0004                                 main@turnRamp 01A9  
                      _I2C_2_Master_RepStart 3164                           putCharToRxBuf@byte 0001  
                            __initialization 2D56                    get16bitTMR0val@timer_high 0013  
                               __end_of_main 1D5A                                 __end_of_move 1AD4  
                               __end_of_stop 29B4                          move@reverseDuration 00E3  
                            _get16bitTMR0val 2F56                                       ??_main 0044  
                                     ??_move 0042                                       ??_stop 0025  
                              __activetblptr 0000                      __end_of_color_normalise 279E  
                     returnHome@turnDuration 003B                                 ?_setMotorPWM 001A  
                                     _ADRESH 0F64                                       _CCPR1H 0FAA  
                                     _CCPR2H 0FA6                                       _CCPR3H 0F25  
                                     _CCPR4H 0F21                             ___awdiv@dividend 000D  
                                     _RC0PPS 0E62                                       _RC4REG 0EE3  
                                     _RE2PPS 0E74                                       _RC7PPS 0E69  
                                     _RD5PPS 0E6F                                       _RE4PPS 0E76  
                                     _RD6PPS 0E70                                       i2l3011 3006  
                                     i2l3021 302E                                       i2l3013 300A  
                                     i2l3015 3016                                       i2l3017 301A  
                                     i2l3025 3114                                       i2l3009 2FF6  
                                     i2l3041 2C88                                       i2l3019 302A  
                                     i2l3051 2CCC                                       i2l3043 2C9E  
                                     i2l3053 2CD6                                       i2l3045 2CAE  
                                     i2l3037 2C68                                       i2l2335 2FA6  
                                     i2l3047 2CB8                                       i2l3039 2C7C  
                                     i2l2337 2FB6                                       i2l3049 2CC2  
                                     i2l3171 002C                                       i2l2541 3186  
                                     i2l3181 007A                                       i2l3173 0030  
                                     i2l3165 0012                                       i2l2535 318C  
                                     i2l2543 3150                                       i2l3183 008A  
                                     i2l3167 0022                                       i2l3175 0054  
                                     i2l2537 3190                                       i2l2545 3154  
                                     i2l3185 0092                                       i2l3177 0064  
                                     i2l3169 0028                                       i2l2539 3182  
                                     i2l3187 00A6                                       i2l3179 0074  
                                     i2l2819 30A6                                       _RG6PPS 0E88  
                                  ??_HighISR 000A                     __end_of_color_click_init 2EF6  
                                     _TMR0IE 714D                                       _TMR0IF 719D  
                                     _RX4PPS 0E15                                       _TX4REG 0EE4  
                               ??_ADC_getval 000D                                ??_Timer0_init 000D  
                               _CCPTMRS0bits 0FAD                             _getCharFromTxBuf 301A  
                                     ___lmul 2DC4                                    ??___aldiv 0021  
                                     ___wmul 2FCE                                    ??___awdiv 0011  
                                  ??___lwdiv 0017                                       clear_0 2D94  
                                     clear_1 2DA0                                       clear_2 2DAC  
                           ___awdiv@quotient 0013                                       isa$std 0001  
                    returnHome@straightSpeed 0037                                 __pdataCOMRAM 004A  
                                     move@mL 00D8                                       move@mR 00DA  
                               __mediumconst 0000                                       tblptrh 0FF7  
                                     tblptrl 0FF6                                       tblptru 0FF8  
                                  ?_ADC_init 0001                                       stop@mL 0020  
                                     stop@mR 0022                                  ?_Buggy_init 0001  
                          ??_initDCmotorsPWM 000F                           __end_of_ADC_getval 3114  
                 i2color_writetoaddr@address 0004                             __end_of_turnLeft 24E8  
                      __end_of_isDataInTxBuf 312C                                   __accesstop 0060  
                    __end_of__initialization 2DBA                              fullSpeedAhead@i 0029  
                              main@turnSpeed 01A7                       ?_I2C_2_Master_RepStart 0001  
                              ___rparam_used 0001                              _Interrupts_init 312C  
                             __pcstackCOMRAM 0001                      __end_of_get16bitTMR0val 2F7E  
                               ?_white_Light 0001                                 __pidataBANK1 3196  
                   get16bitTMR0val@timer_low 0011                     get16bitTMR0val@timer_val 0015  
               ?_color_clear_init_interrupts 0001                             _reverseOneSquare 1F48  
                        __end_of_Timer0_init 30A4                             ?_color_normalise 0027  
                                 ??_ADC_init 000D                                 _batteryLevel 2E2E  
                                 __pbssBANK0 0060                                   __pbssBANK1 01D2  
                                 __pbssBANK2 0200                            _color_writetoaddr 3064  
                               _T2CLKCONbits 0FBF                           ?_color_writetoaddr 000F  
                                    ?___lmul 000D                                      ?___wmul 000D  
                             ___lmul@product 0015                ??_color_clear_init_interrupts 0011  
                                move@curMove 00E1                          ??_color_writetoaddr 0010  
                                    _SP4BRGH 0EE6                                      _SP4BRGL 0EE5  
                 fullSpeedAhead@straightRamp 0025                        turnRight@turnDuration 0025  
                                    _SSP2ADD 0ED6                                      _SSP2BUF 0ED5  
                                 _color_read 1D5A                      __end_of_Interrupts_init 3142  
                     color_writetoaddr@value 000F                                      _HighISR 0008  
                  __end_of_color_writetoaddr 3084                                    _ADREFbits 0F58  
                         _I2C_2_Master_Start 3178                                   _initUSART4 30C4  
                        i2_I2C_2_Master_Idle 2FA6                           _I2C_2_Master_Write 3142  
                                    __Hparam 0000                          i2_I2C_2_Master_Stop 3182  
                                    __Lparam 0000                                  _Timer0_init 3084  
                           ?_get16bitTMR0val 000D                                      ___aldiv 279E  
                                    ___awdiv 2A9A                          ?_I2C_2_Master_Start 0001  
                                    ___lwdiv 2CE2                          ?_I2C_2_Master_Write 0001  
                               __psmallconst 0E00                                      _ambient 004A  
                                    __pcinit 2D56                                      __ramtop 0E00  
                                  ?_turnLeft 0020                                      __ptext0 1AD4  
                                    __ptext1 3040                                      __ptext2 14BE  
                                    __ptext3 0E02                                      __ptext4 2134  
                                    __ptext5 230E                                      __ptext6 28AA  
                                    __ptext7 1F48                                      __ptext8 315A  
                                    __ptext9 2F56                         ?i2_I2C_2_Master_Idle 0001  
                                  _T2CONbits 0FBD                         ?i2_I2C_2_Master_Stop 0001  
                           ___aldiv@dividend 0019                                    _T2HLTbits 0FBE  
                              _RxBufWriteCnt 0049                     __end_of_getCharFromTxBuf 3040  
                                    main@buf 0100                         ??_I2C_2_Master_Start 000E  
                       ??_I2C_2_Master_Write 000E                        color_normalise@RGBC_n 002F  
                       end_of_initialization 2DBA              ??i2_color_clear_init_interrupts 0005  
                __end_ofi2_color_writetoaddr 30C4                             ADC_getval@tmpval 000D  
                          reverseOneSquare@i 002A                            ?_color_click_init 0001  
                                 _resetTimer 315A                           ??_color_click_init 0016  
                           ___aldiv@quotient 0023                   batteryLevel@batteryQuarter 0016  
                                    postdec1 0FE5                                      postdec2 0FDD  
                                    postinc0 0FEE                                      postinc2 0FDE  
                 batteryLevel@batteryVoltage 0015                                   main@F14601 01FB  
                                 main@F14592 01D2                                   main@F14596 009C  
                                 main@F14598 0200                                   _returnHome 0E02  
                            _initDCmotorsPWM 2B5E                                   ??_turnLeft 0027  
                                  _PORTFbits 0F8E                           setMotorPWM@negDuty 001F  
                      ??i2_I2C_2_Master_Idle 0001                                move@turnSpeed 00E5  
                          __end_of_turnRight 230E                        ??i2_I2C_2_Master_Stop 0002  
                                 main@RGBC_n 01AA                                  returnHome@i 0041  
                                  _TRISAbits 0F81                           setMotorPWM@posDuty 001E  
                                  _TRISBbits 0F82                                    _TRISCbits 0F83  
                                  _TRISDbits 0F84                                    _TRISEbits 0F85  
                                  _TRISFbits 0F86                                    _TRISGbits 0F87  
                                  _TRISHbits 0F88                             white_Light@state 000D  
                               ??_Buggy_init 000D                             fullSpeedAhead@mL 0020  
                           fullSpeedAhead@mR 0022                                  ?_color_read 0011  
                   color_writetoaddr@address 0010                      ??_I2C_2_Master_RepStart 000E  
                   __end_of_reverseOneSquare 2134                             ?_Interrupts_init 0001  
                              stop@cur_power 002A                                  _CCP1CONbits 0FAB  
                               _EUSART4RXbuf 00C4                          returnHome@turnSpeed 003A  
                               _EUSART4TXbuf 0060                                  _CCP2CONbits 0FA7  
                                _CCP3CONbits 0F26                                  ?_initUSART4 0001  
                                _CCP4CONbits 0F22                                   main@motorL 01C8  
                                 main@motorR 01BE                               color_read@RGBC 0011  
                             _fullSpeedAhead 29B4                               __end_of___lmul 2E2E  
                       turnLeft@turnDuration 0025                               __end_of___wmul 2FF4  
                         __end_of_Buggy_init 2F2C                                __pidataCOMRAM 319A  
                        start_initialization 2D56                                _TxBufWriteCnt 0047  
                           move@moveSequence 00DD        __end_ofi2_color_clear_init_interrupts 2CE2  
              i2_color_clear_init_interrupts 2C68                                  ?_resetTimer 0001  
                    __end_of_initDCmotorsPWM 2BEE                       __end_of_fullSpeedAhead 2A9A  
                         turnRight@cur_power 002C                                     ??___lmul 0015  
                                   ??___wmul 0011                               _putCharToRxBuf 2FF4  
                        color_normalise@RGBC 0027                                  __pdataBANK1 01FB  
              i2I2C_2_Master_Write@data_byte 0002                                  ?_returnHome 002E  
               reverseOneSquare@straightRamp 0026                 __end_ofi2_I2C_2_Master_Start 3196  
               __end_ofi2_I2C_2_Master_Write 315A                            turnLeft@cur_power 002C  
                                __pbssCOMRAM 0046                                __pcstackBANK0 00D8  
                              __pcstackBANK1 0100                                     ?_HighISR 0001  
                           stop@straightRamp 0024                             ___lwdiv@dividend 0013  
                               ?_Timer0_init 0001                       __end_of_putCharToRxBuf 301A  
                            ?_fullSpeedAhead 0020                                    __pintcode 0008  
                                   ?___aldiv 0019                           turnRight@turnSpeed 0024  
                                   ?___awdiv 000D                                     ?___lwdiv 0013  
                       I2C_2_Master_Read@ack 000F                         I2C_2_Master_Read@tmp 0010  
                                __smallconst 0E00                             main@moveSequence 017A  
                          _I2C_2_Master_Idle 2F7E                            _I2C_2_Master_Init 2F2C  
                          _I2C_2_Master_Read 2E7C                            turnLeft@turnSpeed 0024  
                          _I2C_2_Master_Stop 316E                                 _RxBufReadCnt 0048  
                                   _ADC_init 30E2                           ?_I2C_2_Master_Idle 0001  
                         ?_I2C_2_Master_Init 0001                           ?_I2C_2_Master_Read 0001  
                              ??_setMotorPWM 001C                           ?_I2C_2_Master_Stop 0001  
                           ___lwdiv@quotient 0017                     initDCmotorsPWM@PWMperiod 000D  
                          ?_getCharFromTxBuf 0001                           ??_getCharFromTxBuf 0001  
                          move@straightSpeed 00E2                              ___aldiv@divisor 001D  
                        ??_I2C_2_Master_Idle 000D                              ___aldiv@counter 0021  
                        ??_I2C_2_Master_Init 000D                          ??_I2C_2_Master_Read 000E  
                             ___wmul@product 0011                                     _LATAbits 0F79  
                        ??_I2C_2_Master_Stop 000E                                     _LATCbits 0F7B  
                              _isDataInTxBuf 3114                                     _LATDbits 0F7C  
                                   _LATEbits 0F7D                                     _LATFbits 0F7E  
                                   _LATGbits 0F7F                                     _LATHbits 0F80  
                                   _IPR0bits 0E1F                                     _PIE0bits 0E29  
                                   _PIE4bits 0E2D                                     i2u107_40 2FB6  
                                   i2u107_41 2FB2                                     i2u108_40 2FCC  
                                   i2u108_41 2FC8                                  turnRight@mL 0020  
                                turnRight@mR 0022                                     i2u180_40 0022  
                                   i2u180_41 001E                                     i2u181_40 0042  
                                   i2u181_41 003A                                     i2u166_40 3006  
                                   i2u166_41 3002                                     i2u167_40 302A  
                                   i2u183_40 0064                                     i2u182_48 0044  
                                   i2u167_41 3026                                     i2u183_41 0060  
                                   _PIR0bits 0E33                                     i2u168_40 3128  
                                   i2u184_40 0074                                     i2u168_41 3122  
                                   i2u184_41 0070                                     i2u169_40 312A  
                                   i2u185_40 008A                                     i2u185_41 0086  
                                   i2u186_40 00A6                                     i2u186_41 00A2  
                                   i2u269_47 2CA4                                     _PIR4bits 0E37  
                            ?_putCharToRxBuf 0001                             ?_initDCmotorsPWM 000D  
                fullSpeedAhead@straightSpeed 0024          __end_of_color_clear_init_interrupts 2C68  
             ?i2_color_clear_init_interrupts 0001                  _color_clear_init_interrupts 2BEE  
                                   _SSP2CON2 0EDA                                     _SSP2STAT 0ED8  
                               move@turnRamp 00E7                                   _ADCON0bits 0F60  
                  __end_of_I2C_2_Master_Idle 2FA6                    __end_of_I2C_2_Master_Init 2F56  
                  __end_of_I2C_2_Master_Read 2EBE                            ___wmul@multiplier 000D  
                  __end_of_I2C_2_Master_Stop 3178     color_clear_init_interrupts@low_threshold 0014  
 i2color_clear_init_interrupts@low_threshold 0008                                 setMotorPWM@m 001A  
                I2C_2_Master_Write@data_byte 000E                           returnHome@turnRamp 003C  
                                  main@color 01B4                                 _TxBufReadCnt 0046  
                   i2color_writetoaddr@value 0003                                    _turnRight 2134  
                  returnHome@reverseDuration 0038                                 ??_color_read 0013  
                          ___lmul@multiplier 000D                                    copy_data0 2D6A  
                             ?_isDataInTxBuf 0001                __end_of_I2C_2_Master_RepStart 316E  
                          ?_reverseOneSquare 0020                          __end_of_setMotorPWM 2654  
                               ??_initUSART4 000D                         i2_I2C_2_Master_Start 318C  
            reverseOneSquare@reverseDuration 0025                         i2_I2C_2_Master_Write 314E  
                         ??_reverseOneSquare 0027                                     __Hrparam 0000  
                          ??_color_normalise 0031                                   _ADC_getval 30FC  
                           main@testSequence 01A2                                     __Lrparam 0000  
                              ??_white_Light 000D                  __end_ofi2_I2C_2_Master_Idle 2FCE  
                __end_ofi2_I2C_2_Master_Stop 318C                           __end_of_color_read 1F48  
                                 _ANSELBbits 0E9A                                   _ANSELDbits 0EA7  
                                 _ANSELFbits 0EB4                                   _T0CON0bits 0FD5  
                                 _T0CON1bits 0FD6                reverseOneSquare@straightSpeed 0024  
                            ___lwdiv@divisor 0015                       returnHome@moveSequence 0032  
                         __end_of_initUSART4 30E2                              ___lwdiv@counter 0019  
                          turnRight@turnRamp 0026                                   ?_turnRight 0020  
                                   __ptext10 29B4                                     __ptext11 24E8  
                                   __ptext20 2DC4                                     __ptext12 2FCE  
                                   __ptext21 279E                                     __ptext13 2CE2  
                                   __ptext30 2E2E                                     __ptext22 2EBE  
                                   __ptext14 30C4                                     __ptext31 2A9A  
                                   __ptext23 2BEE                                     __ptext15 2B5E  
                                   __ptext40 314E                                     __ptext32 30E2  
                                   __ptext24 3064                                     __ptext16 1D5A  
                                   __ptext41 3182                                     __ptext33 30FC  
                                   __ptext25 3142                                     __ptext17 3164  
                                   __ptext42 318C                                     __ptext34 3084  
                                   __ptext26 316E                                     __ptext18 2E7C  
                                   __ptext43 2FA6                                     __ptext35 312C  
                                   __ptext27 3178                                     __ptext19 2654  
                                   __ptext44 2FF4                                     __ptext36 2EF6  
                                   __ptext28 2F7E                                     __ptext45 3114  
                                   __ptext29 2F2C                                     __ptext46 301A  
                                   __ptext38 2C68                                     __ptext39 30A4  
                                  move@color 00DC                                ?_batteryLevel 0001  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                           turnLeft@turnRamp 0026                                   turnLeft@mL 0020  
                                 turnLeft@mR 0022                        ?i2_I2C_2_Master_Start 0001  
                           move@straightRamp 00E4                        ?i2_I2C_2_Master_Write 0001  
                           move@straightTime 00DF                            returnHome@curMove 0036  
                               ??_resetTimer 000D                                   turnRight@i 002A  
                                   isa$xinst 0000                                   _RC4STAbits 0EE7  
                                   main@RGBC 01B6                                     int$flags 004C  
                               ??_returnHome 003D                                     _turnLeft 230E  
                    fullSpeedAhead@cur_power 002B                          __end_of_white_Light 3064  
                                 _INTCONbits 0FF2                    reverseOneSquare@cur_power 002C  
                         reverseOneSquare@mL 0020                           reverseOneSquare@mR 0022  
                         __end_of_resetTimer 3164                             move@turnDuration 00E6  
                             ??_batteryLevel 0015                                  _setMotorPWM 24E8  
                          ??_get16bitTMR0val 000F                              ??_isDataInTxBuf 0001  
                                   intlevel2 0000                             ??_fullSpeedAhead 0026  
                         __end_of_returnHome 14BE                                    turnLeft@i 002A  
                                ?_ADC_getval 0001                            main@straightSpeed 01B2  
                           _color_click_init 2EBE                                   _SSP2DATPPS 0E1D  
                                 _SSP2CLKPPS 0E1C                                 ___aldiv@sign 0022  
                                ??_turnRight 0027                             main@straightRamp 01B3  
                           main@straightTime 0128                                   _TX4STAbits 0EE8  
                     ??i2_I2C_2_Master_Start 0002                       ??i2_I2C_2_Master_Write 0002  
                           ??_putCharToRxBuf 0001                                 returnHome@mL 002E  
                               returnHome@mR 0030  
