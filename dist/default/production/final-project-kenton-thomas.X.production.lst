

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 05 17:25:42 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Generated 21/07/2023 GMT
    69                           ; 
    70                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F67K40 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102   000000                     _TRISCbits	set	3971
   103   000000                     _RC4STAbits	set	3815
   104   000000                     _SP4BRGH	set	3814
   105   000000                     _SP4BRGL	set	3813
   106   000000                     _TX4STAbits	set	3816
   107   000000                     _BAUD4CONbits	set	3817
   108   000000                     _TX4REG	set	3812
   109   000000                     _TRISBbits	set	3970
   110   000000                     _TRISAbits	set	3969
   111   000000                     _TRISEbits	set	3973
   112   000000                     _TRISGbits	set	3975
   113   000000                     _LATFbits	set	3966
   114   000000                     _TRISFbits	set	3974
   115   000000                     _TRISHbits	set	3976
   116   000000                     _TRISDbits	set	3972
   117   000000                     _LATEbits	set	3965
   118   000000                     _LATGbits	set	3967
   119   000000                     _LATHbits	set	3968
   120   000000                     _SSP2CON2bits	set	3802
   121   000000                     _RX4PPS	set	3605
   122   000000                     _SSP2CLKPPS	set	3612
   123   000000                     _SSP2DATPPS	set	3613
   124   000000                     _ANSELDbits	set	3751
   125   000000                     _SSP2ADD	set	3798
   126   000000                     _SSP2CON1bits	set	3801
   127   000000                     _CCPR4H	set	3873
   128   000000                     _CCPR3H	set	3877
   129   000000                     _CCPR2H	set	4006
   130   000000                     _CCPR1H	set	4010
   131   000000                     _CCP1CONbits	set	4011
   132   000000                     _CCPTMRS0bits	set	4013
   133   000000                     _T2PR	set	4028
   134   000000                     _T2CONbits	set	4029
   135   000000                     _INTCONbits	set	4082
   136   000000                     _CCP2CONbits	set	4007
   137   000000                     _CCP3CONbits	set	3878
   138   000000                     _ADREFbits	set	3928
   139   000000                     _LATAbits	set	3961
   140   000000                     _LATDbits	set	3964
   141   000000                     _PORTFbits	set	3982
   142   000000                     _CCP4CONbits	set	3874
   143   000000                     _LATCbits	set	3963
   144   000000                     _RC4REG	set	3811
   145   000000                     _SSP2CON2	set	3802
   146   000000                     _SSP2STAT	set	3800
   147   000000                     _ANSELFbits	set	3764
   148   000000                     _SSP2BUF	set	3797
   149   000000                     _IPR0bits	set	3615
   150   000000                     _PIE0bits	set	3625
   151   000000                     _RD5PPS	set	3695
   152   000000                     _RE2PPS	set	3700
   153   000000                     _ANSELBbits	set	3738
   154   000000                     _RD6PPS	set	3696
   155   000000                     _PIE4bits	set	3629
   156   000000                     _PIR0bits	set	3635
   157   000000                     _PIR4bits	set	3639
   158   000000                     _RC0PPS	set	3682
   159   000000                     _RC7PPS	set	3689
   160   000000                     _ADPCH	set	3935
   161   000000                     _ADRESH	set	3940
   162   000000                     _ADCON0bits	set	3936
   163   000000                     _RE4PPS	set	3702
   164   000000                     _RG6PPS	set	3720
   165   000000                     _T2CLKCONbits	set	4031
   166   000000                     _T2HLTbits	set	4030
   167                           
   168                           	psect	smallconst
   169   000E00                     __psmallconst:
   170                           	callstack 0
   171   000E00  00                 	db	0
   172   000E01                     STR_1:
   173   000E01  72                 	db	114	;'r'
   174   000E02  3D                 	db	61	;'='
   175   000E03  25                 	db	37
   176   000E04  64                 	db	100	;'d'
   177   000E05  20                 	db	32
   178   000E06  67                 	db	103	;'g'
   179   000E07  3D                 	db	61	;'='
   180   000E08  25                 	db	37
   181   000E09  64                 	db	100	;'d'
   182   000E0A  20                 	db	32
   183   000E0B  62                 	db	98	;'b'
   184   000E0C  3D                 	db	61	;'='
   185   000E0D  25                 	db	37
   186   000E0E  64                 	db	100	;'d'
   187   000E0F  20                 	db	32
   188   000E10  63                 	db	99	;'c'
   189   000E11  3D                 	db	61	;'='
   190   000E12  25                 	db	37
   191   000E13  64                 	db	100	;'d'
   192   000E14  20                 	db	32
   193   000E15  20                 	db	32
   194   000E16  20                 	db	32
   195   000E17  6E                 	db	110	;'n'
   196   000E18  3A                 	db	58	;':'
   197   000E19  20                 	db	32
   198   000E1A  72                 	db	114	;'r'
   199   000E1B  3D                 	db	61	;'='
   200   000E1C  25                 	db	37
   201   000E1D  64                 	db	100	;'d'
   202   000E1E  20                 	db	32
   203   000E1F  67                 	db	103	;'g'
   204   000E20  3D                 	db	61	;'='
   205   000E21  25                 	db	37
   206   000E22  64                 	db	100	;'d'
   207   000E23  20                 	db	32
   208   000E24  62                 	db	98	;'b'
   209   000E25  3D                 	db	61	;'='
   210   000E26  25                 	db	37
   211   000E27  64                 	db	100	;'d'
   212   000E28  20                 	db	32
   213   000E29  20                 	db	32
   214   000E2A  63                 	db	99	;'c'
   215   000E2B  6F                 	db	111	;'o'
   216   000E2C  6C                 	db	108	;'l'
   217   000E2D  6F                 	db	111	;'o'
   218   000E2E  72                 	db	114	;'r'
   219   000E2F  3A                 	db	58	;':'
   220   000E30  20                 	db	32
   221   000E31  25                 	db	37
   222   000E32  64                 	db	100	;'d'
   223   000E33  20                 	db	32
   224   000E34  0D                 	db	13
   225   000E35  0A                 	db	10
   226   000E36  00                 	db	0
   227   000E37  00                 	db	0	; dummy byte at the end
   228   000000                     
   229                           ; #config settings
   230                           
   231                           	psect	cinit
   232   0026E2                     __pcinit:
   233                           	callstack 0
   234   0026E2                     start_initialization:
   235                           	callstack 0
   236   0026E2                     __initialization:
   237                           	callstack 0
   238                           
   239                           ; Clear objects allocated to BANK1 (60 bytes)
   240   0026E2  EE01  F000         	lfsr	0,__pbssBANK1
   241   0026E6  0E3C               	movlw	60
   242   0026E8                     clear_0:
   243   0026E8  6AEE               	clrf	postinc0,c
   244   0026EA  06E8               	decf	wreg,f,c
   245   0026EC  E1FD               	bnz	clear_0
   246                           
   247                           ; Clear objects allocated to BANK0 (72 bytes)
   248   0026EE  EE00  F0B5         	lfsr	0,__pbssBANK0
   249   0026F2  0E48               	movlw	72
   250   0026F4                     clear_1:
   251   0026F4  6AEE               	clrf	postinc0,c
   252   0026F6  06E8               	decf	wreg,f,c
   253   0026F8  E1FD               	bnz	clear_1
   254                           
   255                           ; Clear objects allocated to COMRAM (29 bytes)
   256   0026FA  EE00  F03D         	lfsr	0,__pbssCOMRAM
   257   0026FE  0E1D               	movlw	29
   258   002700                     clear_2:
   259   002700  6AEE               	clrf	postinc0,c
   260   002702  06E8               	decf	wreg,f,c
   261   002704  E1FD               	bnz	clear_2
   262   002706                     end_of_initialization:
   263                           	callstack 0
   264   002706                     __end_of__initialization:
   265                           	callstack 0
   266   002706  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267   002708  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268   00270A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269   00270C  6EF8               	movwf	tblptru,c
   270   00270E  0100               	movlb	0
   271   002710  EFC4  F009         	goto	_main	;jump to C main() function
   272                           
   273                           	psect	bssCOMRAM
   274   00003D                     __pbssCOMRAM:
   275                           	callstack 0
   276   00003D                     _EUSART4RXbuf:
   277                           	callstack 0
   278   00003D                     	ds	20
   279   000051                     _width:
   280                           	callstack 0
   281   000051                     	ds	2
   282   000053                     _prec:
   283                           	callstack 0
   284   000053                     	ds	2
   285   000055                     _flags:
   286                           	callstack 0
   287   000055                     	ds	1
   288   000056                     _TxBufReadCnt:
   289                           	callstack 0
   290   000056                     	ds	1
   291   000057                     _TxBufWriteCnt:
   292                           	callstack 0
   293   000057                     	ds	1
   294   000058                     _RxBufReadCnt:
   295                           	callstack 0
   296   000058                     	ds	1
   297   000059                     _RxBufWriteCnt:
   298                           	callstack 0
   299   000059                     	ds	1
   300                           
   301                           	psect	bssBANK0
   302   0000B5                     __pbssBANK0:
   303                           	callstack 0
   304   0000B5                     	ds	40
   305   0000DD                     _dbuf:
   306                           	callstack 0
   307   0000DD                     	ds	32
   308                           
   309                           	psect	bssBANK1
   310   000100                     __pbssBANK1:
   311                           	callstack 0
   312   000100                     _EUSART4TXbuf:
   313                           	callstack 0
   314   000100                     	ds	60
   315                           
   316                           	psect	cstackBANK0
   317   000060                     __pcstackBANK0:
   318                           	callstack 0
   319   000060                     ??_main:
   320                           
   321                           ; 1 bytes @ 0x0
   322   000060                     	ds	2
   323   000062                     main@buf:
   324                           	callstack 0
   325                           
   326                           ; 40 bytes @ 0x2
   327   000062                     	ds	40
   328   00008A                     main@straightSpeed:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x2A
   332   00008A                     	ds	1
   333   00008B                     main@straightRamp:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x2B
   337   00008B                     	ds	1
   338   00008C                     main@reverseDuration:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x2C
   342   00008C                     	ds	1
   343   00008D                     main@turnSpeed:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x2D
   347   00008D                     	ds	1
   348   00008E                     main@turnDuration:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0x2E
   352   00008E                     	ds	1
   353   00008F                     main@turnRamp:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0x2F
   357   00008F                     	ds	1
   358   000090                     main@color:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0x30
   362   000090                     	ds	1
   363   000091                     main@RGBC_n:
   364                           	callstack 0
   365                           
   366                           ; 8 bytes @ 0x31
   367   000091                     	ds	8
   368   000099                     main@RGBC:
   369                           	callstack 0
   370                           
   371                           ; 8 bytes @ 0x39
   372   000099                     	ds	8
   373   0000A1                     main@motorL:
   374                           	callstack 0
   375                           
   376                           ; 10 bytes @ 0x41
   377   0000A1                     	ds	10
   378   0000AB                     main@motorR:
   379                           	callstack 0
   380                           
   381                           ; 10 bytes @ 0x4B
   382   0000AB                     	ds	10
   383                           
   384                           	psect	cstackCOMRAM
   385   000001                     __pcstackCOMRAM:
   386                           	callstack 0
   387   000001                     ??_getCharFromTxBuf:
   388   000001                     ??i2_I2C_2_Master_Idle:
   389   000001                     putCharToRxBuf@byte:
   390                           	callstack 0
   391   000001                     
   392                           ; 1 bytes @ 0x0
   393   000001                     	ds	1
   394   000002                     i2I2C_2_Master_Write@data_byte:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x1
   398   000002                     	ds	1
   399   000003                     ??_HighISR:
   400                           
   401                           ; 1 bytes @ 0x2
   402   000003                     	ds	2
   403   000005                     ??_I2C_2_Master_Idle:
   404   000005                     ?___wmul:
   405                           	callstack 0
   406   000005                     ?___awdiv:
   407                           	callstack 0
   408   000005                     ?___awmod:
   409                           	callstack 0
   410   000005                     ?___lmul:
   411                           	callstack 0
   412   000005                     white_Light@state:
   413                           	callstack 0
   414   000005                     putCharToTxBuf@byte:
   415                           	callstack 0
   416   000005                     ADC_getval@tmpval:
   417                           	callstack 0
   418   000005                     initDCmotorsPWM@PWMperiod:
   419                           	callstack 0
   420   000005                     ___wmul@multiplier:
   421                           	callstack 0
   422   000005                     ___awdiv@dividend:
   423                           	callstack 0
   424   000005                     ___awmod@dividend:
   425                           	callstack 0
   426   000005                     fputc@c:
   427                           	callstack 0
   428   000005                     ___lmul@multiplier:
   429                           	callstack 0
   430   000005                     color_detect@RGBC_n:
   431                           	callstack 0
   432                           
   433                           ; 8 bytes @ 0x4
   434   000005                     	ds	1
   435   000006                     ??_I2C_2_Master_Read:
   436   000006                     I2C_2_Master_Write@data_byte:
   437                           	callstack 0
   438   000006                     TxBufferedString@string:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x5
   442   000006                     	ds	1
   443   000007                     color_writetoaddr@value:
   444                           	callstack 0
   445   000007                     I2C_2_Master_Read@ack:
   446                           	callstack 0
   447   000007                     fputc@fp:
   448                           	callstack 0
   449   000007                     ___wmul@multiplicand:
   450                           	callstack 0
   451   000007                     ___awdiv@divisor:
   452                           	callstack 0
   453   000007                     ___awmod@divisor:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x6
   457   000007                     	ds	1
   458   000008                     ??_fputc:
   459   000008                     color_writetoaddr@address:
   460                           	callstack 0
   461   000008                     I2C_2_Master_Read@tmp:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0x7
   465   000008                     	ds	1
   466   000009                     ??_color_click_init:
   467   000009                     color_read@RGBC:
   468                           	callstack 0
   469   000009                     ___awdiv@counter:
   470                           	callstack 0
   471   000009                     ___awmod@counter:
   472                           	callstack 0
   473   000009                     ___wmul@product:
   474                           	callstack 0
   475   000009                     ___lmul@multiplicand:
   476                           	callstack 0
   477                           
   478                           ; 4 bytes @ 0x8
   479   000009                     	ds	1
   480   00000A                     ??_color_read:
   481   00000A                     ___awdiv@sign:
   482                           	callstack 0
   483   00000A                     ___awmod@sign:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x9
   487   00000A                     	ds	1
   488   00000B                     ?_abs:
   489                           	callstack 0
   490   00000B                     ?___lwdiv:
   491                           	callstack 0
   492   00000B                     ___awdiv@quotient:
   493                           	callstack 0
   494   00000B                     ___lwdiv@dividend:
   495                           	callstack 0
   496   00000B                     abs@a:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0xA
   500   00000B                     	ds	2
   501   00000D                     ??_abs:
   502   00000D                     color_detect@color:
   503                           	callstack 0
   504   00000D                     batteryLevel@batteryVoltage:
   505                           	callstack 0
   506   00000D                     ___lwdiv@divisor:
   507                           	callstack 0
   508   00000D                     ___lmul@product:
   509                           	callstack 0
   510                           
   511                           ; 4 bytes @ 0xC
   512   00000D                     	ds	1
   513   00000E                     batteryLevel@batteryQuarter:
   514                           	callstack 0
   515                           
   516                           ; 1 bytes @ 0xD
   517   00000E                     	ds	1
   518   00000F                     vfpfcnvrt@fp:
   519                           	callstack 0
   520   00000F                     ___lwdiv@quotient:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0xE
   524   00000F                     	ds	1
   525   000010                     vfpfcnvrt@fmt:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0xF
   529   000010                     	ds	1
   530   000011                     ?___aldiv:
   531                           	callstack 0
   532   000011                     ___lwdiv@counter:
   533                           	callstack 0
   534   000011                     vfpfcnvrt@ap:
   535                           	callstack 0
   536   000011                     ___aldiv@dividend:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x10
   540   000011                     	ds	1
   541   000012                     ??_vfpfcnvrt:
   542   000012                     setMotorPWM@m:
   543                           	callstack 0
   544                           
   545                           ; 1 bytes @ 0x11
   546   000012                     	ds	1
   547   000013                     ??_setMotorPWM:
   548   000013                     vfpfcnvrt@done:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x12
   552   000013                     	ds	1
   553   000014                     vfpfcnvrt@cp:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x13
   557   000014                     	ds	1
   558   000015                     setMotorPWM@posDuty:
   559                           	callstack 0
   560   000015                     ___aldiv@divisor:
   561                           	callstack 0
   562   000015                     vfpfcnvrt@convarg:
   563                           	callstack 0
   564                           
   565                           ; 4 bytes @ 0x14
   566   000015                     	ds	1
   567   000016                     setMotorPWM@negDuty:
   568                           	callstack 0
   569                           
   570                           ; 1 bytes @ 0x15
   571   000016                     	ds	1
   572   000017                     turnLeft@mL:
   573                           	callstack 0
   574   000017                     turnRight@mL:
   575                           	callstack 0
   576   000017                     fullSpeedAhead@mL:
   577                           	callstack 0
   578   000017                     reverseOneSquare@mL:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x16
   582   000017                     	ds	1
   583   000018                     turnLeft@mR:
   584                           	callstack 0
   585   000018                     turnRight@mR:
   586                           	callstack 0
   587   000018                     fullSpeedAhead@mR:
   588                           	callstack 0
   589   000018                     reverseOneSquare@mR:
   590                           	callstack 0
   591                           
   592                           ; 1 bytes @ 0x17
   593   000018                     	ds	1
   594   000019                     turnLeft@turnSpeed:
   595                           	callstack 0
   596   000019                     turnRight@turnSpeed:
   597                           	callstack 0
   598   000019                     fullSpeedAhead@straightSpeed:
   599                           	callstack 0
   600   000019                     reverseOneSquare@straightSpeed:
   601                           	callstack 0
   602   000019                     ___aldiv@counter:
   603                           	callstack 0
   604   000019                     vfpfcnvrt@c:
   605                           	callstack 0
   606                           
   607                           ; 1 bytes @ 0x18
   608   000019                     	ds	1
   609   00001A                     ?_vfprintf:
   610                           	callstack 0
   611   00001A                     turnLeft@turnDuration:
   612                           	callstack 0
   613   00001A                     turnRight@turnDuration:
   614                           	callstack 0
   615   00001A                     fullSpeedAhead@straightRamp:
   616                           	callstack 0
   617   00001A                     reverseOneSquare@reverseDuration:
   618                           	callstack 0
   619   00001A                     ___aldiv@sign:
   620                           	callstack 0
   621   00001A                     vfprintf@fp:
   622                           	callstack 0
   623                           
   624                           ; 1 bytes @ 0x19
   625   00001A                     	ds	1
   626   00001B                     ??_fullSpeedAhead:
   627   00001B                     turnLeft@turnRamp:
   628                           	callstack 0
   629   00001B                     turnRight@turnRamp:
   630                           	callstack 0
   631   00001B                     reverseOneSquare@straightRamp:
   632                           	callstack 0
   633   00001B                     vfprintf@fmt:
   634                           	callstack 0
   635   00001B                     ___aldiv@quotient:
   636                           	callstack 0
   637                           
   638                           ; 4 bytes @ 0x1A
   639   00001B                     	ds	1
   640   00001C                     ??_turnRight:
   641   00001C                     ??_turnLeft:
   642   00001C                     ??_reverseOneSquare:
   643   00001C                     vfprintf@ap:
   644                           	callstack 0
   645                           
   646                           ; 1 bytes @ 0x1B
   647   00001C                     	ds	1
   648   00001D                     vfprintf@cfmt:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x1C
   652   00001D                     	ds	1
   653   00001E                     ?_sprintf:
   654                           	callstack 0
   655   00001E                     sprintf@s:
   656                           	callstack 0
   657   00001E                     fullSpeedAhead@i:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x1D
   661   00001E                     	ds	1
   662   00001F                     sprintf@fmt:
   663                           	callstack 0
   664   00001F                     turnLeft@i:
   665                           	callstack 0
   666   00001F                     turnRight@i:
   667                           	callstack 0
   668   00001F                     reverseOneSquare@i:
   669                           	callstack 0
   670   00001F                     color_normalise@RGBC:
   671                           	callstack 0
   672                           
   673                           ; 8 bytes @ 0x1E
   674   00001F                     	ds	1
   675   000020                     fullSpeedAhead@cur_power:
   676                           	callstack 0
   677                           
   678                           ; 2 bytes @ 0x1F
   679   000020                     	ds	1
   680   000021                     turnLeft@cur_power:
   681                           	callstack 0
   682   000021                     turnRight@cur_power:
   683                           	callstack 0
   684   000021                     reverseOneSquare@cur_power:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x20
   688   000021                     	ds	2
   689   000023                     move@mL:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x22
   693   000023                     	ds	1
   694   000024                     move@mR:
   695                           	callstack 0
   696                           
   697                           ; 1 bytes @ 0x23
   698   000024                     	ds	1
   699   000025                     move@color:
   700                           	callstack 0
   701                           
   702                           ; 1 bytes @ 0x24
   703   000025                     	ds	1
   704   000026                     move@straightSpeed:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x25
   708   000026                     	ds	1
   709   000027                     color_normalise@RGBC_n:
   710                           	callstack 0
   711   000027                     move@reverseDuration:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x26
   715   000027                     	ds	1
   716   000028                     ??_color_normalise:
   717   000028                     move@straightRamp:
   718                           	callstack 0
   719                           
   720                           ; 1 bytes @ 0x27
   721   000028                     	ds	1
   722   000029                     move@turnSpeed:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x28
   726   000029                     	ds	1
   727   00002A                     move@turnDuration:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x29
   731   00002A                     	ds	1
   732   00002B                     move@turnRamp:
   733                           	callstack 0
   734                           
   735                           ; 1 bytes @ 0x2A
   736   00002B                     	ds	1
   737   00002C                     ??_move:
   738                           
   739                           ; 1 bytes @ 0x2B
   740   00002C                     	ds	4
   741   000030                     sprintf@ap:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x2F
   745   000030                     	ds	1
   746   000031                     sprintf@f:
   747                           	callstack 0
   748                           
   749                           ; 12 bytes @ 0x30
   750   000031                     	ds	12
   751                           
   752 ;;
   753 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   754 ;;
   755 ;; *************** function _main *****************
   756 ;; Defined at:
   757 ;;		line 23 in file "main.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;		None
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  buf            40    2[BANK0 ] unsigned char [40]
   762 ;;  motorR         10   75[BANK0 ] struct DC_motor
   763 ;;  motorL         10   65[BANK0 ] struct DC_motor
   764 ;;  RGBC            8   57[BANK0 ] struct RGBC_val
   765 ;;  RGBC_n          8   49[BANK0 ] struct RGBC_val
   766 ;;  PWMcycle        2    0        unsigned int 
   767 ;;  color           1   48[BANK0 ] unsigned char 
   768 ;;  turnRamp        1   47[BANK0 ] unsigned char 
   769 ;;  turnDuration    1   46[BANK0 ] unsigned char 
   770 ;;  turnSpeed       1   45[BANK0 ] unsigned char 
   771 ;;  reverseDurat    1   44[BANK0 ] unsigned char 
   772 ;;  straightRamp    1   43[BANK0 ] unsigned char 
   773 ;;  straightSpee    1   42[BANK0 ] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;      Locals:         0      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   786 ;;      Totals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;Total ram usage:       85 bytes
   788 ;; Hardware stack levels required when called: 8
   789 ;; This function calls:
   790 ;;		_Buggy_init
   791 ;;		_Interrupts_init
   792 ;;		_TxBufferedString
   793 ;;		_batteryLevel
   794 ;;		_color_click_init
   795 ;;		_color_detect
   796 ;;		_color_normalise
   797 ;;		_color_read
   798 ;;		_initDCmotorsPWM
   799 ;;		_initUSART4
   800 ;;		_move
   801 ;;		_sendTxBuf
   802 ;;		_sprintf
   803 ;;		_white_Light
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810   001388                     __ptext0:
   811                           	callstack 0
   812   001388                     _main:
   813                           	callstack 23
   814   001388                     
   815                           ;main.c: 24:     Buggy_init();
   816   001388  EC22  F013         	call	_Buggy_init	;wreg free
   817   00138C                     
   818                           ;main.c: 25:     color_click_init();
   819   00138C  EC57  F012         	call	_color_click_init	;wreg free
   820   001390                     
   821                           ;main.c: 26:     initUSART4();
   822   001390  EC3A  F014         	call	_initUSART4	;wreg free
   823   001394                     
   824                           ;main.c: 27:     Interrupts_init();
   825   001394  EC87  F014         	call	_Interrupts_init	;wreg free
   826   001398                     
   827                           ;main.c: 29:     initDCmotorsPWM(PWMcycle);
   828   001398  0E00               	movlw	0
   829   00139A  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   830   00139C  0EC7               	movlw	199
   831   00139E  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   832   0013A0  EC66  F011         	call	_initDCmotorsPWM	;wreg free
   833   0013A4                     
   834                           ;main.c: 30:     struct RGBC_val RGBC, RGBC_n;;main.c: 31:     unsigned char color;;main
      +                          .c: 32:     char buf[40] = {0};
   835   0013A4  EE20  F062         	lfsr	2,main@buf
   836   0013A8  0E27               	movlw	39
   837   0013AA                     u2131:
   838   0013AA  6ADE               	clrf	postinc2,c
   839   0013AC  06E8               	decf	wreg,f,c
   840   0013AE  E2FD               	bc	u2131
   841   0013B0                     
   842                           ;main.c: 34:     struct DC_motor motorL, motorR;;main.c: 36:     motorL.power=0;
   843   0013B0  0E00               	movlw	0
   844   0013B2  0100               	movlb	0	; () banked
   845   0013B4  6FA1               	movwf	main@motorL& (0+255),b
   846   0013B6                     
   847                           ; BSR set to: 0
   848                           ;main.c: 37:     motorL.direction=1;
   849   0013B6  0E01               	movlw	1
   850   0013B8  6FA2               	movwf	(main@motorL+1)& (0+255),b
   851   0013BA                     
   852                           ; BSR set to: 0
   853                           ;main.c: 38:     motorL.brakemode=1;
   854   0013BA  0E01               	movlw	1
   855   0013BC  6FA3               	movwf	(main@motorL+2)& (0+255),b
   856   0013BE                     
   857                           ; BSR set to: 0
   858                           ;main.c: 39:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   859   0013BE  0EAA               	movlw	170
   860   0013C0  6FA6               	movwf	(main@motorL+5)& (0+255),b
   861   0013C2  0E0F               	movlw	15
   862   0013C4  6FA7               	movwf	(main@motorL+6)& (0+255),b
   863   0013C6                     
   864                           ; BSR set to: 0
   865                           ;main.c: 40:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   866   0013C6  0EA6               	movlw	166
   867   0013C8  6FA8               	movwf	(main@motorL+7)& (0+255),b
   868   0013CA  0E0F               	movlw	15
   869   0013CC  6FA9               	movwf	(main@motorL+8)& (0+255),b
   870   0013CE                     
   871                           ; BSR set to: 0
   872                           ;main.c: 41:     motorL.PWMperiod=PWMcycle;
   873   0013CE  0E00               	movlw	0
   874   0013D0  6FA5               	movwf	(main@motorL+4)& (0+255),b
   875   0013D2  0EC7               	movlw	199
   876   0013D4  6FA4               	movwf	(main@motorL+3)& (0+255),b
   877   0013D6                     
   878                           ; BSR set to: 0
   879                           ;main.c: 42:     motorL.compensation=3;
   880   0013D6  0E03               	movlw	3
   881   0013D8  6FAA               	movwf	(main@motorL+9)& (0+255),b
   882   0013DA                     
   883                           ; BSR set to: 0
   884                           ;main.c: 44:     motorR.power=0;
   885   0013DA  0E00               	movlw	0
   886   0013DC  6FAB               	movwf	main@motorR& (0+255),b
   887   0013DE                     
   888                           ; BSR set to: 0
   889                           ;main.c: 45:     motorR.direction=1;
   890   0013DE  0E01               	movlw	1
   891   0013E0  6FAC               	movwf	(main@motorR+1)& (0+255),b
   892   0013E2                     
   893                           ; BSR set to: 0
   894                           ;main.c: 46:     motorR.brakemode=1;
   895   0013E2  0E01               	movlw	1
   896   0013E4  6FAD               	movwf	(main@motorR+2)& (0+255),b
   897   0013E6                     
   898                           ; BSR set to: 0
   899                           ;main.c: 47:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   900   0013E6  0E25               	movlw	37
   901   0013E8  6FB0               	movwf	(main@motorR+5)& (0+255),b
   902   0013EA  0E0F               	movlw	15
   903   0013EC  6FB1               	movwf	(main@motorR+6)& (0+255),b
   904   0013EE                     
   905                           ; BSR set to: 0
   906                           ;main.c: 48:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   907   0013EE  0E21               	movlw	33
   908   0013F0  6FB2               	movwf	(main@motorR+7)& (0+255),b
   909   0013F2  0E0F               	movlw	15
   910   0013F4  6FB3               	movwf	(main@motorR+8)& (0+255),b
   911   0013F6                     
   912                           ; BSR set to: 0
   913                           ;main.c: 49:     motorR.PWMperiod=PWMcycle;
   914   0013F6  0E00               	movlw	0
   915   0013F8  6FAF               	movwf	(main@motorR+4)& (0+255),b
   916   0013FA  0EC7               	movlw	199
   917   0013FC  6FAE               	movwf	(main@motorR+3)& (0+255),b
   918   0013FE                     
   919                           ; BSR set to: 0
   920                           ;main.c: 50:     motorR.compensation=0;
   921   0013FE  0E00               	movlw	0
   922   001400  6FB4               	movwf	(main@motorR+9)& (0+255),b
   923   001402                     
   924                           ; BSR set to: 0
   925                           ;main.c: 53:     char straightSpeed=60;
   926   001402  0E3C               	movlw	60
   927   001404  6F8A               	movwf	main@straightSpeed& (0+255),b
   928   001406                     
   929                           ; BSR set to: 0
   930                           ;main.c: 54:     unsigned char straightRamp=2;
   931   001406  0E02               	movlw	2
   932   001408  6F8B               	movwf	main@straightRamp& (0+255),b
   933   00140A                     
   934                           ; BSR set to: 0
   935                           ;main.c: 56:     unsigned char reverseDuration=10;
   936   00140A  0E0A               	movlw	10
   937   00140C  6F8C               	movwf	main@reverseDuration& (0+255),b
   938   00140E                     
   939                           ; BSR set to: 0
   940                           ;main.c: 58:     char turnSpeed=21;
   941   00140E  0E15               	movlw	21
   942   001410  6F8D               	movwf	main@turnSpeed& (0+255),b
   943   001412                     
   944                           ; BSR set to: 0
   945                           ;main.c: 59:     unsigned char turnDuration=10;
   946   001412  0E0A               	movlw	10
   947   001414  6F8E               	movwf	main@turnDuration& (0+255),b
   948   001416                     
   949                           ; BSR set to: 0
   950                           ;main.c: 60:     unsigned char turnRamp=4;
   951   001416  0E04               	movlw	4
   952   001418  6F8F               	movwf	main@turnRamp& (0+255),b
   953   00141A                     
   954                           ; BSR set to: 0
   955                           ;main.c: 63:     batteryLevel();
   956   00141A  ECBB  F012         	call	_batteryLevel	;wreg free
   957   00141E                     l63:
   958   00141E  B48E               	btfsc	142,2,c	;volatile
   959   001420  EF14  F00A         	goto	u2141
   960   001424  EF16  F00A         	goto	u2140
   961   001428                     u2141:
   962   001428  EF0F  F00A         	goto	l63
   963   00142C                     u2140:
   964   00142C                     
   965                           ;main.c: 67:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
   966   00142C  9680               	bcf	128,3,c	;volatile
   967   00142E  9E7C               	bcf	124,7,c	;volatile
   968                           
   969                           ;main.c: 69:     LATHbits.LATH1=LATDbits.LATD3=1;
   970   001430  867C               	bsf	124,3,c	;volatile
   971   001432  8280               	bsf	128,1,c	;volatile
   972   001434                     
   973                           ;main.c: 70:     _delay((unsigned long)((500)*(64000000/4000.0)));
   974   001434  0E29               	movlw	41
   975   001436  0100               	movlb	0	; () banked
   976   001438  6F61               	movwf	(??_main+1)& (0+255),b
   977   00143A  0E96               	movlw	150
   978   00143C  6F60               	movwf	??_main& (0+255),b
   979   00143E  0E7F               	movlw	127
   980   001440                     u2187:
   981   001440  2EE8               	decfsz	wreg,f,c
   982   001442  D7FE               	bra	u2187
   983   001444  2F60               	decfsz	??_main& (0+255),f,b
   984   001446  D7FC               	bra	u2187
   985   001448  2F61               	decfsz	(??_main+1)& (0+255),f,b
   986   00144A  D7FA               	bra	u2187
   987   00144C                     
   988                           ;main.c: 75:     white_Light(1);
   989   00144C  0E01               	movlw	1
   990   00144E  EC18  F014         	call	_white_Light
   991   001452                     l67:
   992   001452  B48E               	btfsc	142,2,c	;volatile
   993   001454  EF2E  F00A         	goto	u2151
   994   001458  EF30  F00A         	goto	u2150
   995   00145C                     u2151:
   996   00145C  EF29  F00A         	goto	l67
   997   001460                     u2150:
   998   001460                     
   999                           ;main.c: 80:         color_read(&RGBC);
  1000   001460  0E99               	movlw	low main@RGBC
  1001   001462  6E09               	movwf	color_read@RGBC^0,c
  1002   001464  ECD9  F008         	call	_color_read	;wreg free
  1003   001468                     
  1004                           ;main.c: 81:         color_normalise(RGBC, &RGBC_n);
  1005   001468  EE20  F099         	lfsr	2,main@RGBC
  1006   00146C  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1007   001470  0E07               	movlw	7
  1008   001472                     u2161:
  1009   001472  CFDB FFEB          	movff	plusw2,plusw0
  1010   001476  06E8               	decf	wreg,f,c
  1011   001478  E2FC               	bc	u2161
  1012   00147A  0E91               	movlw	low main@RGBC_n
  1013   00147C  6E27               	movwf	color_normalise@RGBC_n^0,c
  1014   00147E  ECC7  F00E         	call	_color_normalise	;wreg free
  1015   001482                     
  1016                           ;main.c: 82:         color = color_detect(RGBC_n);
  1017   001482  EE20  F091         	lfsr	2,main@RGBC_n
  1018   001486  EE00  F005         	lfsr	0,color_detect@RGBC_n
  1019   00148A  0E07               	movlw	7
  1020   00148C                     u2171:
  1021   00148C  CFDB FFEB          	movff	plusw2,plusw0
  1022   001490  06E8               	decf	wreg,f,c
  1023   001492  E2FC               	bc	u2171
  1024   001494  ECE8  F011         	call	_color_detect	;wreg free
  1025   001498  0100               	movlb	0	; () banked
  1026   00149A  6F90               	movwf	main@color& (0+255),b
  1027   00149C                     
  1028                           ; BSR set to: 0
  1029                           ;main.c: 83:         move(&motorL, &motorR, color, straightSpeed, reverseDuration, strai
      +                          ghtRamp, turnSpeed, turnDuration, turnRamp);
  1030   00149C  0EA1               	movlw	low main@motorL
  1031   00149E  6E23               	movwf	move@mL^0,c
  1032   0014A0  0EAB               	movlw	low main@motorR
  1033   0014A2  6E24               	movwf	move@mR^0,c
  1034   0014A4  C090  F025         	movff	main@color,move@color
  1035   0014A8  C08A  F026         	movff	main@straightSpeed,move@straightSpeed
  1036   0014AC  C08C  F027         	movff	main@reverseDuration,move@reverseDuration
  1037   0014B0  C08B  F028         	movff	main@straightRamp,move@straightRamp
  1038   0014B4  C08D  F029         	movff	main@turnSpeed,move@turnSpeed
  1039   0014B8  C08E  F02A         	movff	main@turnDuration,move@turnDuration
  1040   0014BC  C08F  F02B         	movff	main@turnRamp,move@turnRamp
  1041   0014C0  EC1C  F007         	call	_move	;wreg free
  1042   0014C4                     
  1043                           ;main.c: 85:         sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d  color: %d \r\
      +                          n",RGBC.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B,color);
  1044   0014C4  0E62               	movlw	low main@buf
  1045   0014C6  6E1E               	movwf	sprintf@s^0,c
  1046   0014C8  0E01               	movlw	low STR_1
  1047   0014CA  6E1F               	movwf	sprintf@fmt^0,c
  1048   0014CC  C099  F020         	movff	main@RGBC,?_sprintf+2
  1049   0014D0  C09A  F021         	movff	main@RGBC+1,?_sprintf+3
  1050   0014D4  C09B  F022         	movff	main@RGBC+2,?_sprintf+4
  1051   0014D8  C09C  F023         	movff	main@RGBC+3,?_sprintf+5
  1052   0014DC  C09D  F024         	movff	main@RGBC+4,?_sprintf+6
  1053   0014E0  C09E  F025         	movff	main@RGBC+5,?_sprintf+7
  1054   0014E4  C09F  F026         	movff	main@RGBC+6,?_sprintf+8
  1055   0014E8  C0A0  F027         	movff	main@RGBC+7,?_sprintf+9
  1056   0014EC  C091  F028         	movff	main@RGBC_n,?_sprintf+10
  1057   0014F0  C092  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1058   0014F4  C093  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1059   0014F8  C094  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1060   0014FC  C095  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1061   001500  C096  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1062   001504  C090  F02E         	movff	main@color,?_sprintf+16
  1063   001508  6A2F               	clrf	(?_sprintf+17)^0,c
  1064   00150A  EC3D  F013         	call	_sprintf	;wreg free
  1065   00150E                     
  1066                           ;main.c: 86:         sendTxBuf();
  1067   00150E  EC49  F014         	call	_sendTxBuf	;wreg free
  1068   001512                     
  1069                           ;main.c: 87:         TxBufferedString(buf);
  1070   001512  0E62               	movlw	low main@buf
  1071   001514  6E06               	movwf	TxBufferedString@string^0,c
  1072   001516  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1073   001518  EC8A  F012         	call	_TxBufferedString	;wreg free
  1074   00151C                     
  1075                           ;main.c: 88:         sendTxBuf();
  1076   00151C  EC49  F014         	call	_sendTxBuf	;wreg free
  1077   001520                     
  1078                           ;main.c: 89:         TxBufferedString("");
  1079   001520  0E36               	movlw	low (STR_1+53)
  1080   001522  6E06               	movwf	TxBufferedString@string^0,c
  1081   001524  5006               	movf	TxBufferedString@string^0,w,c
  1082   001526  A4D8               	btfss	status,2,c
  1083   001528  0E0E               	movlw	high __smallconst
  1084   00152A  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1085   00152C  EC8A  F012         	call	_TxBufferedString	;wreg free
  1086   001530                     
  1087                           ;main.c: 90:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1088   001530  0E19               	movlw	25
  1089   001532  0100               	movlb	0	; () banked
  1090   001534  6F61               	movwf	(??_main+1)& (0+255),b
  1091   001536  0E5A               	movlw	90
  1092   001538  6F60               	movwf	??_main& (0+255),b
  1093   00153A  0EB1               	movlw	177
  1094   00153C                     u2197:
  1095   00153C  2EE8               	decfsz	wreg,f,c
  1096   00153E  D7FE               	bra	u2197
  1097   001540  2F60               	decfsz	??_main& (0+255),f,b
  1098   001542  D7FC               	bra	u2197
  1099   001544  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1100   001546  D7FA               	bra	u2197
  1101   001548  D000               	nop2	
  1102   00154A  EF29  F00A         	goto	l67
  1103   00154E  EF46  F000         	goto	start
  1104   001552                     __end_of_main:
  1105                           	callstack 0
  1106                           
  1107 ;; *************** function _white_Light *****************
  1108 ;; Defined at:
  1109 ;;		line 40 in file "color.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  state           1    wreg     unsigned char 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  state           1    4[COMRAM] unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1127 ;;Total ram usage:        1 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; Hardware stack levels required when called: 3
  1130 ;; This function calls:
  1131 ;;		Nothing
  1132 ;; This function is called by:
  1133 ;;		_main
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text1
  1138   002830                     __ptext1:
  1139                           	callstack 0
  1140   002830                     _white_Light:
  1141                           	callstack 27
  1142                           
  1143                           ;incstack = 0
  1144                           ;white_Light@state stored from wreg
  1145   002830  6E05               	movwf	white_Light@state^0,c
  1146   002832                     
  1147                           ;color.c: 40: void white_Light(char state);color.c: 41: {;color.c: 42:     if (state){
  1148   002832  5005               	movf	white_Light@state^0,w,c
  1149   002834  B4D8               	btfsc	status,2,c
  1150   002836  EF1F  F014         	goto	u1791
  1151   00283A  EF21  F014         	goto	u1790
  1152   00283E                     u1791:
  1153   00283E  EF26  F014         	goto	l103
  1154   002842                     u1790:
  1155   002842                     
  1156                           ;color.c: 43:         LATGbits.LATG0 = 1;
  1157   002842  807F               	bsf	127,0,c	;volatile
  1158                           
  1159                           ;color.c: 44:         LATEbits.LATE7 = 1;
  1160   002844  8E7D               	bsf	125,7,c	;volatile
  1161                           
  1162                           ;color.c: 45:         LATAbits.LATA3 = 1;
  1163   002846  8679               	bsf	121,3,c	;volatile
  1164                           
  1165                           ;color.c: 46:     }
  1166   002848  EF29  F014         	goto	l105
  1167   00284C                     l103:
  1168                           
  1169                           ;color.c: 48:         LATGbits.LATG0 = 0;
  1170   00284C  907F               	bcf	127,0,c	;volatile
  1171                           
  1172                           ;color.c: 49:         LATEbits.LATE7 = 0;
  1173   00284E  9E7D               	bcf	125,7,c	;volatile
  1174                           
  1175                           ;color.c: 50:         LATAbits.LATA3 = 0;
  1176   002850  9679               	bcf	121,3,c	;volatile
  1177   002852                     l105:
  1178   002852  0012               	return		;funcret
  1179   002854                     __end_of_white_Light:
  1180                           	callstack 0
  1181                           
  1182 ;; *************** function _sprintf *****************
  1183 ;; Defined at:
  1184 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  s               1   29[COMRAM] PTR unsigned char 
  1187 ;;		 -> main@buf(40), 
  1188 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1189 ;;		 -> STR_1(54), 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  f              12   48[COMRAM] struct _IO_FILE
  1192 ;;  ret             2    0        int 
  1193 ;;  ap              1   47[COMRAM] PTR void [1]
  1194 ;;		 -> ?_sprintf(2), 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  2   29[COMRAM] int 
  1197 ;; Registers used:
  1198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1204 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;Total ram usage:       31 bytes
  1209 ;; Hardware stack levels used: 1
  1210 ;; Hardware stack levels required when called: 7
  1211 ;; This function calls:
  1212 ;;		_vfprintf
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text2
  1219   00267A                     __ptext2:
  1220                           	callstack 0
  1221   00267A                     _sprintf:
  1222                           	callstack 23
  1223   00267A  0E20               	movlw	low (?_sprintf+2)
  1224   00267C  6E30               	movwf	sprintf@ap^0,c
  1225   00267E  C01E  F031         	movff	sprintf@s,sprintf@f
  1226   002682  0E00               	movlw	0
  1227   002684  6E35               	movwf	(sprintf@f+4)^0,c
  1228   002686  0E00               	movlw	0
  1229   002688  6E34               	movwf	(sprintf@f+3)^0,c
  1230   00268A  0E00               	movlw	0
  1231   00268C  6E3C               	movwf	(sprintf@f+11)^0,c
  1232   00268E  0E00               	movlw	0
  1233   002690  6E3B               	movwf	(sprintf@f+10)^0,c
  1234   002692  0E31               	movlw	low sprintf@f
  1235   002694  6E1A               	movwf	vfprintf@fp^0,c
  1236   002696  C01F  F01B         	movff	sprintf@fmt,vfprintf@fmt
  1237   00269A  0E30               	movlw	low sprintf@ap
  1238   00269C  6E1C               	movwf	vfprintf@ap^0,c
  1239   00269E  EC03  F013         	call	_vfprintf	;wreg free
  1240   0026A2  501E               	movf	sprintf@s^0,w,c
  1241   0026A4  2434               	addwf	(sprintf@f+3)^0,w,c
  1242   0026A6  6ED9               	movwf	fsr2l,c
  1243   0026A8  6ADA               	clrf	fsr2h,c
  1244   0026AA  6ADF               	clrf	indf2,c
  1245   0026AC  0012               	return		;funcret
  1246   0026AE                     __end_of_sprintf:
  1247                           	callstack 0
  1248                           
  1249 ;; *************** function _vfprintf *****************
  1250 ;; Defined at:
  1251 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  1254 ;;		 -> sprintf@f(12), 
  1255 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1256 ;;		 -> STR_1(54), 
  1257 ;;  ap              1   27[COMRAM] PTR PTR void 
  1258 ;;		 -> sprintf@ap(1), 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  cfmt            1   28[COMRAM] PTR unsigned char 
  1261 ;;		 -> STR_1(54), 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  2   25[COMRAM] int 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;Total ram usage:        4 bytes
  1276 ;; Hardware stack levels used: 1
  1277 ;; Hardware stack levels required when called: 6
  1278 ;; This function calls:
  1279 ;;		_vfpfcnvrt
  1280 ;; This function is called by:
  1281 ;;		_sprintf
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text3
  1286   002606                     __ptext3:
  1287                           	callstack 0
  1288   002606                     _vfprintf:
  1289                           	callstack 23
  1290   002606                     
  1291                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1292   002606  C01B  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  1293                           
  1294                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1295   00260A  EF0F  F013         	goto	l2705
  1296   00260E                     l2703:
  1297                           
  1298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1299   00260E  C01A  F00F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1300   002612  0E1D               	movlw	low vfprintf@cfmt
  1301   002614  6E10               	movwf	vfpfcnvrt@fmt^0,c
  1302   002616  C01C  F011         	movff	vfprintf@ap,vfpfcnvrt@ap
  1303   00261A  EC8B  F00B         	call	_vfpfcnvrt	;wreg free
  1304   00261E                     l2705:
  1305                           
  1306                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1307   00261E  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1308   002622                     	if	1	;There is more than 1 active tblptr byte
  1309   002622  0E0E               	movlw	high __smallconst
  1310   002624  6EF7               	movwf	tblptrh,c
  1311   002626                     	endif
  1312   002626                     	if	0	;tblptru may be non-zero
  1313   002626                     	endif
  1314   002626                     	if	0	;tblptru may be non-zero
  1315   002626                     	endif
  1316   002626  0008               	tblrd		*
  1317   002628  50F5               	movf	tablat,w,c
  1318   00262A  0900               	iorlw	0
  1319   00262C  A4D8               	btfss	status,2,c
  1320   00262E  EF1B  F013         	goto	u1741
  1321   002632  EF1D  F013         	goto	u1740
  1322   002636                     u1741:
  1323   002636  EF07  F013         	goto	l2703
  1324   00263A                     u1740:
  1325   00263A                     
  1326                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1327   00263A  0E00               	movlw	0
  1328   00263C  6E1B               	movwf	(?_vfprintf+1)^0,c
  1329   00263E  0E00               	movlw	0
  1330   002640  6E1A               	movwf	?_vfprintf^0,c
  1331   002642  0012               	return		;funcret
  1332   002644                     __end_of_vfprintf:
  1333                           	callstack 0
  1334                           
  1335 ;; *************** function _vfpfcnvrt *****************
  1336 ;; Defined at:
  1337 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1340 ;;		 -> sprintf@f(12), 
  1341 ;;  fmt             1   15[COMRAM] PTR PTR unsigned char 
  1342 ;;		 -> vfprintf@cfmt(1), 
  1343 ;;  ap              1   16[COMRAM] PTR PTR void 
  1344 ;;		 -> sprintf@ap(1), 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  convarg         4   20[COMRAM] struct .
  1347 ;;  c               1   24[COMRAM] unsigned char 
  1348 ;;  cp              1   19[COMRAM] PTR unsigned char 
  1349 ;;		 -> STR_1(54), 
  1350 ;;  done            1   18[COMRAM] _Bool 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1360 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;Total ram usage:       11 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 5
  1367 ;; This function calls:
  1368 ;;		___awdiv
  1369 ;;		___awmod
  1370 ;;		_abs
  1371 ;;		_fputc
  1372 ;; This function is called by:
  1373 ;;		_vfprintf
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text4
  1378   001716                     __ptext4:
  1379                           	callstack 0
  1380   001716                     _vfpfcnvrt:
  1381                           	callstack 23
  1382   001716                     
  1383                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1384   001716  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1385   001718  6ED9               	movwf	fsr2l,c
  1386   00171A  6ADA               	clrf	fsr2h,c
  1387   00171C  CFDF FFF6          	movff	indf2,tblptrl
  1388   001720                     	if	1	;There is more than 1 active tblptr byte
  1389   001720  0E0E               	movlw	high __smallconst
  1390   001722  6EF7               	movwf	tblptrh,c
  1391   001724                     	endif
  1392   001724                     	if	0	;tblptru may be non-zero
  1393   001724                     	endif
  1394   001724                     	if	0	;tblptru may be non-zero
  1395   001724                     	endif
  1396   001724  0008               	tblrd		*
  1397   001726  50F5               	movf	tablat,w,c
  1398   001728  0A25               	xorlw	37
  1399   00172A  A4D8               	btfss	status,2,c
  1400   00172C  EF9A  F00B         	goto	u1331
  1401   001730  EF9C  F00B         	goto	u1330
  1402   001734                     u1331:
  1403   001734  EF55  F00C         	goto	l2421
  1404   001738                     u1330:
  1405   001738                     
  1406                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1407   001738  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1408   00173A  6ED9               	movwf	fsr2l,c
  1409   00173C  6ADA               	clrf	fsr2h,c
  1410   00173E  2ADF               	incf	indf2,f,c
  1411   001740                     
  1412                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1413   001740  0E00               	movlw	0
  1414   001742  6E52               	movwf	(_width+1)^0,c
  1415   001744  0E00               	movlw	0
  1416   001746  6E51               	movwf	_width^0,c
  1417   001748  C051  F055         	movff	_width,_flags
  1418   00174C                     
  1419                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1420   00174C  6853               	setf	_prec^0,c
  1421   00174E  6854               	setf	(_prec+1)^0,c
  1422   001750                     
  1423                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1424   001750  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1425   001752  6ED9               	movwf	fsr2l,c
  1426   001754  6ADA               	clrf	fsr2h,c
  1427   001756  50DF               	movf	indf2,w,c
  1428   001758  6E14               	movwf	vfpfcnvrt@cp^0,c
  1429   00175A                     
  1430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1431   00175A  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1432   00175E                     	if	1	;There is more than 1 active tblptr byte
  1433   00175E  0E0E               	movlw	high __smallconst
  1434   001760  6EF7               	movwf	tblptrh,c
  1435   001762                     	endif
  1436   001762                     	if	0	;tblptru may be non-zero
  1437   001762                     	endif
  1438   001762                     	if	0	;tblptru may be non-zero
  1439   001762                     	endif
  1440   001762  0008               	tblrd		*
  1441   001764  50F5               	movf	tablat,w,c
  1442   001766  0A64               	xorlw	100
  1443   001768  B4D8               	btfsc	status,2,c
  1444   00176A  EFB9  F00B         	goto	u1341
  1445   00176E  EFBB  F00B         	goto	u1340
  1446   001772                     u1341:
  1447   001772  EFC9  F00B         	goto	l2391
  1448   001776                     u1340:
  1449   001776  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1450   00177A                     	if	1	;There is more than 1 active tblptr byte
  1451   00177A  0E0E               	movlw	high __smallconst
  1452   00177C  6EF7               	movwf	tblptrh,c
  1453   00177E                     	endif
  1454   00177E                     	if	0	;tblptru may be non-zero
  1455   00177E                     	endif
  1456   00177E                     	if	0	;tblptru may be non-zero
  1457   00177E                     	endif
  1458   00177E  0008               	tblrd		*
  1459   001780  50F5               	movf	tablat,w,c
  1460   001782  0A69               	xorlw	105
  1461   001784  A4D8               	btfss	status,2,c
  1462   001786  EFC7  F00B         	goto	u1351
  1463   00178A  EFC9  F00B         	goto	u1350
  1464   00178E                     u1351:
  1465   00178E  EF4F  F00C         	goto	l2417
  1466   001792                     u1350:
  1467   001792                     l2391:
  1468                           
  1469                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1470   001792  5011               	movf	vfpfcnvrt@ap^0,w,c
  1471   001794  6ED9               	movwf	fsr2l,c
  1472   001796  6ADA               	clrf	fsr2h,c
  1473   001798  0E02               	movlw	2
  1474   00179A  26DF               	addwf	indf2,f,c
  1475   00179C  5CDF               	subwf	indf2,w,c
  1476   00179E  6ED9               	movwf	fsr2l,c
  1477   0017A0  6ADA               	clrf	fsr2h,c
  1478   0017A2  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg
  1479   0017A6  CFDE F016          	movff	postinc2,vfpfcnvrt@convarg+1
  1480   0017AA                     
  1481                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1482   0017AA  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1483   0017AC  6ED9               	movwf	fsr2l,c
  1484   0017AE  6ADA               	clrf	fsr2h,c
  1485   0017B0  2814               	incf	vfpfcnvrt@cp^0,w,c
  1486   0017B2  6EDF               	movwf	indf2,c
  1487   0017B4                     
  1488                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1489   0017B4  0E20               	movlw	32
  1490   0017B6  6E19               	movwf	vfpfcnvrt@c^0,c
  1491                           
  1492                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1493   0017B8  BE16               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1494   0017BA  EFE1  F00B         	goto	u1361
  1495   0017BE  EFE4  F00B         	goto	u1360
  1496   0017C2                     u1361:
  1497   0017C2  0E01               	movlw	1
  1498   0017C4  EFE5  F00B         	goto	u1370
  1499   0017C8                     u1360:
  1500   0017C8  0E00               	movlw	0
  1501   0017CA                     u1370:
  1502   0017CA  6E13               	movwf	vfpfcnvrt@done^0,c
  1503   0017CC                     l2397:
  1504                           
  1505                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1506   0017CC  0619               	decf	vfpfcnvrt@c^0,f,c
  1507   0017CE  5019               	movf	vfpfcnvrt@c^0,w,c
  1508   0017D0  0FDD               	addlw	low _dbuf
  1509   0017D2  6ED9               	movwf	fsr2l,c
  1510   0017D4  6ADA               	clrf	fsr2h,c
  1511   0017D6  C015  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1512   0017DA  C016  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1513   0017DE  0E00               	movlw	0
  1514   0017E0  6E08               	movwf	(___awmod@divisor+1)^0,c
  1515   0017E2  0E0A               	movlw	10
  1516   0017E4  6E07               	movwf	___awmod@divisor^0,c
  1517   0017E6  ECB9  F010         	call	___awmod	;wreg free
  1518   0017EA  C005  F00B         	movff	?___awmod,abs@a
  1519   0017EE  C006  F00C         	movff	?___awmod+1,abs@a+1
  1520   0017F2  EC57  F013         	call	_abs	;wreg free
  1521   0017F6  500B               	movf	?_abs^0,w,c
  1522   0017F8  0F30               	addlw	48
  1523   0017FA  6EDF               	movwf	indf2,c
  1524   0017FC                     
  1525                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1526   0017FC  C015  F005         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1527   001800  C016  F006         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1528   001804  0E00               	movlw	0
  1529   001806  6E08               	movwf	(___awdiv@divisor+1)^0,c
  1530   001808  0E0A               	movlw	10
  1531   00180A  6E07               	movwf	___awdiv@divisor^0,c
  1532   00180C  EC57  F010         	call	___awdiv	;wreg free
  1533   001810  C005  F015         	movff	?___awdiv,vfpfcnvrt@convarg
  1534   001814  C006  F016         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1535   001818                     
  1536                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1537   001818  5015               	movf	vfpfcnvrt@convarg^0,w,c
  1538   00181A  1016               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1539   00181C  B4D8               	btfsc	status,2,c
  1540   00181E  EF13  F00C         	goto	u1381
  1541   001822  EF15  F00C         	goto	u1380
  1542   001826                     u1381:
  1543   001826  EF1D  F00C         	goto	l2405
  1544   00182A                     u1380:
  1545   00182A  5019               	movf	vfpfcnvrt@c^0,w,c
  1546   00182C  A4D8               	btfss	status,2,c
  1547   00182E  EF1B  F00C         	goto	u1391
  1548   001832  EF1D  F00C         	goto	u1390
  1549   001836                     u1391:
  1550   001836  EFE6  F00B         	goto	l2397
  1551   00183A                     u1390:
  1552   00183A                     l2405:
  1553                           
  1554                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1555   00183A  5019               	movf	vfpfcnvrt@c^0,w,c
  1556   00183C  B4D8               	btfsc	status,2,c
  1557   00183E  EF23  F00C         	goto	u1401
  1558   001842  EF25  F00C         	goto	u1400
  1559   001846                     u1401:
  1560   001846  EF44  F00C         	goto	l2415
  1561   00184A                     u1400:
  1562   00184A  5013               	movf	vfpfcnvrt@done^0,w,c
  1563   00184C  B4D8               	btfsc	status,2,c
  1564   00184E  EF2B  F00C         	goto	u1411
  1565   001852  EF2D  F00C         	goto	u1410
  1566   001856                     u1411:
  1567   001856  EF44  F00C         	goto	l2415
  1568   00185A                     u1410:
  1569   00185A                     
  1570                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1571   00185A  0619               	decf	vfpfcnvrt@c^0,f,c
  1572   00185C  5019               	movf	vfpfcnvrt@c^0,w,c
  1573   00185E  0FDD               	addlw	low _dbuf
  1574   001860  6ED9               	movwf	fsr2l,c
  1575   001862  6ADA               	clrf	fsr2h,c
  1576   001864  0E2D               	movlw	45
  1577   001866  6EDF               	movwf	indf2,c
  1578   001868  EF44  F00C         	goto	l2415
  1579   00186C                     l2411:
  1580                           
  1581                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1582   00186C  5019               	movf	vfpfcnvrt@c^0,w,c
  1583   00186E  0FDD               	addlw	low _dbuf
  1584   001870  6ED9               	movwf	fsr2l,c
  1585   001872  6ADA               	clrf	fsr2h,c
  1586   001874  50DF               	movf	indf2,w,c
  1587   001876  6E12               	movwf	??_vfpfcnvrt^0,c
  1588   001878  5012               	movf	??_vfpfcnvrt^0,w,c
  1589   00187A  6E05               	movwf	fputc@c^0,c
  1590   00187C  6A06               	clrf	(fputc@c+1)^0,c
  1591   00187E  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1592   001882  EC11  F011         	call	_fputc	;wreg free
  1593   001886  2A19               	incf	vfpfcnvrt@c^0,f,c
  1594   001888                     l2415:
  1595                           
  1596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1597   001888  0E20               	movlw	32
  1598   00188A  1819               	xorwf	vfpfcnvrt@c^0,w,c
  1599   00188C  A4D8               	btfss	status,2,c
  1600   00188E  EF4B  F00C         	goto	u1421
  1601   001892  EF4D  F00C         	goto	u1420
  1602   001896                     u1421:
  1603   001896  EF36  F00C         	goto	l2411
  1604   00189A                     u1420:
  1605   00189A  EF66  F00C         	goto	l1247
  1606   00189E                     l2417:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1609   00189E  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1610   0018A0  6ED9               	movwf	fsr2l,c
  1611   0018A2  6ADA               	clrf	fsr2h,c
  1612   0018A4  2ADF               	incf	indf2,f,c
  1613   0018A6  EF66  F00C         	goto	l1247
  1614   0018AA                     l2421:
  1615                           
  1616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1617   0018AA  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1618   0018AC  6ED9               	movwf	fsr2l,c
  1619   0018AE  6ADA               	clrf	fsr2h,c
  1620   0018B0  CFDF FFF6          	movff	indf2,tblptrl
  1621   0018B4                     	if	1	;There is more than 1 active tblptr byte
  1622   0018B4  0E0E               	movlw	high __smallconst
  1623   0018B6  6EF7               	movwf	tblptrh,c
  1624   0018B8                     	endif
  1625   0018B8                     	if	0	;tblptru may be non-zero
  1626   0018B8                     	endif
  1627   0018B8                     	if	0	;tblptru may be non-zero
  1628   0018B8                     	endif
  1629   0018B8  0008               	tblrd		*
  1630   0018BA  50F5               	movf	tablat,w,c
  1631   0018BC  6E05               	movwf	fputc@c^0,c
  1632   0018BE  6A06               	clrf	(fputc@c+1)^0,c
  1633   0018C0  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1634   0018C4  EC11  F011         	call	_fputc	;wreg free
  1635   0018C8  EF4F  F00C         	goto	l2417
  1636   0018CC                     l1247:
  1637   0018CC  0012               	return		;funcret
  1638   0018CE                     __end_of_vfpfcnvrt:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _fputc *****************
  1642 ;; Defined at:
  1643 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  c               2    4[COMRAM] int 
  1646 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  1647 ;;		 -> sprintf@f(12), 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  2    4[COMRAM] int 
  1652 ;; Registers used:
  1653 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1659 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;Total ram usage:        8 bytes
  1664 ;; Hardware stack levels used: 1
  1665 ;; Hardware stack levels required when called: 4
  1666 ;; This function calls:
  1667 ;;		_putch
  1668 ;; This function is called by:
  1669 ;;		_vfpfcnvrt
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           	psect	text5
  1674   002222                     __ptext5:
  1675                           	callstack 0
  1676   002222                     _fputc:
  1677                           	callstack 23
  1678   002222  5007               	movf	fputc@fp^0,w,c
  1679   002224  B4D8               	btfsc	status,2,c
  1680   002226  EF17  F011         	goto	u1261
  1681   00222A  EF19  F011         	goto	u1260
  1682   00222E                     u1261:
  1683   00222E  EF21  F011         	goto	l2335
  1684   002232                     u1260:
  1685   002232  5007               	movf	fputc@fp^0,w,c
  1686   002234  A4D8               	btfss	status,2,c
  1687   002236  EF1F  F011         	goto	u1271
  1688   00223A  EF21  F011         	goto	u1270
  1689   00223E                     u1271:
  1690   00223E  EF26  F011         	goto	l2337
  1691   002242                     u1270:
  1692   002242                     l2335:
  1693   002242  5005               	movf	fputc@c^0,w,c
  1694   002244  ECB5  F014         	call	_putch
  1695   002248  EF65  F011         	goto	l1272
  1696   00224C                     l2337:
  1697   00224C  5007               	movf	fputc@fp^0,w,c
  1698   00224E  6ED9               	movwf	fsr2l,c
  1699   002250  6ADA               	clrf	fsr2h,c
  1700   002252  0E0A               	movlw	10
  1701   002254  26D9               	addwf	fsr2l,f,c
  1702   002256  50DE               	movf	postinc2,w,c
  1703   002258  10DE               	iorwf	postinc2,w,c
  1704   00225A  B4D8               	btfsc	status,2,c
  1705   00225C  EF32  F011         	goto	u1281
  1706   002260  EF34  F011         	goto	u1280
  1707   002264                     u1281:
  1708   002264  EF4D  F011         	goto	l2341
  1709   002268                     u1280:
  1710   002268  5007               	movf	fputc@fp^0,w,c
  1711   00226A  6ED9               	movwf	fsr2l,c
  1712   00226C  6ADA               	clrf	fsr2h,c
  1713   00226E  0E0A               	movlw	10
  1714   002270  26D9               	addwf	fsr2l,f,c
  1715   002272  5007               	movf	fputc@fp^0,w,c
  1716   002274  6EE1               	movwf	fsr1l,c
  1717   002276  6AE2               	clrf	fsr1h,c
  1718   002278  0E03               	movlw	3
  1719   00227A  26E1               	addwf	fsr1l,f,c
  1720   00227C  50DE               	movf	postinc2,w,c
  1721   00227E  5CE6               	subwf	postinc1,w,c
  1722   002280  50E6               	movf	postinc1,w,c
  1723   002282  0A80               	xorlw	128
  1724   002284  6E0C               	movwf	(??_fputc+4)^0,c
  1725   002286  50DE               	movf	postinc2,w,c
  1726   002288  0A80               	xorlw	128
  1727   00228A  580C               	subwfb	(??_fputc+4)^0,w,c
  1728   00228C  B0D8               	btfsc	status,0,c
  1729   00228E  EF4B  F011         	goto	u1291
  1730   002292  EF4D  F011         	goto	u1290
  1731   002296                     u1291:
  1732   002296  EF65  F011         	goto	l1272
  1733   00229A                     u1290:
  1734   00229A                     l2341:
  1735   00229A  5007               	movf	fputc@fp^0,w,c
  1736   00229C  6ED9               	movwf	fsr2l,c
  1737   00229E  6ADA               	clrf	fsr2h,c
  1738   0022A0  0E03               	movlw	3
  1739   0022A2  26D9               	addwf	fsr2l,f,c
  1740   0022A4  50DF               	movf	indf2,w,c
  1741   0022A6  6E08               	movwf	??_fputc^0,c
  1742   0022A8  5007               	movf	fputc@fp^0,w,c
  1743   0022AA  6ED9               	movwf	fsr2l,c
  1744   0022AC  6ADA               	clrf	fsr2h,c
  1745   0022AE  50DF               	movf	indf2,w,c
  1746   0022B0  2408               	addwf	??_fputc^0,w,c
  1747   0022B2  6ED9               	movwf	fsr2l,c
  1748   0022B4  6ADA               	clrf	fsr2h,c
  1749   0022B6  C005  FFDF         	movff	fputc@c,indf2
  1750   0022BA  5007               	movf	fputc@fp^0,w,c
  1751   0022BC  6ED9               	movwf	fsr2l,c
  1752   0022BE  6ADA               	clrf	fsr2h,c
  1753   0022C0  0E03               	movlw	3
  1754   0022C2  26D9               	addwf	fsr2l,f,c
  1755   0022C4  2ADE               	incf	postinc2,f,c
  1756   0022C6  0E00               	movlw	0
  1757   0022C8  22DD               	addwfc	postdec2,f,c
  1758   0022CA                     l1272:
  1759   0022CA  0012               	return		;funcret
  1760   0022CC                     __end_of_fputc:
  1761                           	callstack 0
  1762                           
  1763 ;; *************** function _putch *****************
  1764 ;; Defined at:
  1765 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  c               1    wreg     unsigned char 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  c               1    0[COMRAM] unsigned char 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used: 1
  1785 ;; Hardware stack levels required when called: 3
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_fputc
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text6
  1794   00296A                     __ptext6:
  1795                           	callstack 0
  1796   00296A                     _putch:
  1797                           	callstack 23
  1798   00296A  0012               	return		;funcret
  1799   00296C                     __end_of_putch:
  1800                           	callstack 0
  1801                           
  1802 ;; *************** function _abs *****************
  1803 ;; Defined at:
  1804 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  a               2   10[COMRAM] int 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  2   10[COMRAM] int 
  1811 ;; Registers used:
  1812 ;;		wreg, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1821 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1822 ;;Total ram usage:        4 bytes
  1823 ;; Hardware stack levels used: 1
  1824 ;; Hardware stack levels required when called: 3
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_vfpfcnvrt
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text7
  1833   0026AE                     __ptext7:
  1834                           	callstack 0
  1835   0026AE                     _abs:
  1836                           	callstack 24
  1837   0026AE  BE0C               	btfsc	(abs@a+1)^0,7,c
  1838   0026B0  EF5C  F013         	goto	u1301
  1839   0026B4  EF5E  F013         	goto	u1300
  1840   0026B8                     u1301:
  1841   0026B8  EF64  F013         	goto	l1257
  1842   0026BC                     u1300:
  1843   0026BC  C00B  F00B         	movff	abs@a,?_abs
  1844   0026C0  C00C  F00C         	movff	abs@a+1,?_abs+1
  1845   0026C4  EF70  F013         	goto	l1260
  1846   0026C8                     l1257:
  1847   0026C8  C00B  F00D         	movff	abs@a,??_abs
  1848   0026CC  C00C  F00E         	movff	abs@a+1,??_abs+1
  1849   0026D0  1E0D               	comf	??_abs^0,f,c
  1850   0026D2  1E0E               	comf	(??_abs+1)^0,f,c
  1851   0026D4  4A0D               	infsnz	??_abs^0,f,c
  1852   0026D6  2A0E               	incf	(??_abs+1)^0,f,c
  1853   0026D8  C00D  F00B         	movff	??_abs,?_abs
  1854   0026DC  C00E  F00C         	movff	??_abs+1,?_abs+1
  1855   0026E0                     l1260:
  1856   0026E0  0012               	return		;funcret
  1857   0026E2                     __end_of_abs:
  1858                           	callstack 0
  1859                           
  1860 ;; *************** function ___awmod *****************
  1861 ;; Defined at:
  1862 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  dividend        2    4[COMRAM] int 
  1865 ;;  divisor         2    6[COMRAM] int 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  sign            1    9[COMRAM] unsigned char 
  1868 ;;  counter         1    8[COMRAM] unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2    4[COMRAM] int 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1881 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1882 ;;Total ram usage:        6 bytes
  1883 ;; Hardware stack levels used: 1
  1884 ;; Hardware stack levels required when called: 3
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_vfpfcnvrt
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text8
  1893   002172                     __ptext8:
  1894                           	callstack 0
  1895   002172                     ___awmod:
  1896                           	callstack 24
  1897   002172  0E00               	movlw	0
  1898   002174  6E0A               	movwf	___awmod@sign^0,c
  1899   002176  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  1900   002178  EFC2  F010         	goto	u1170
  1901   00217C  EFC0  F010         	goto	u1171
  1902   002180                     u1171:
  1903   002180  EFC8  F010         	goto	l2281
  1904   002184                     u1170:
  1905   002184  6C05               	negf	___awmod@dividend^0,c
  1906   002186  1E06               	comf	(___awmod@dividend+1)^0,f,c
  1907   002188  B0D8               	btfsc	status,0,c
  1908   00218A  2A06               	incf	(___awmod@dividend+1)^0,f,c
  1909   00218C  0E01               	movlw	1
  1910   00218E  6E0A               	movwf	___awmod@sign^0,c
  1911   002190                     l2281:
  1912   002190  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  1913   002192  EFCF  F010         	goto	u1180
  1914   002196  EFCD  F010         	goto	u1181
  1915   00219A                     u1181:
  1916   00219A  EFD3  F010         	goto	l2285
  1917   00219E                     u1180:
  1918   00219E  6C07               	negf	___awmod@divisor^0,c
  1919   0021A0  1E08               	comf	(___awmod@divisor+1)^0,f,c
  1920   0021A2  B0D8               	btfsc	status,0,c
  1921   0021A4  2A08               	incf	(___awmod@divisor+1)^0,f,c
  1922   0021A6                     l2285:
  1923   0021A6  5007               	movf	___awmod@divisor^0,w,c
  1924   0021A8  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  1925   0021AA  B4D8               	btfsc	status,2,c
  1926   0021AC  EFDA  F010         	goto	u1191
  1927   0021B0  EFDC  F010         	goto	u1190
  1928   0021B4                     u1191:
  1929   0021B4  EF00  F011         	goto	l2301
  1930   0021B8                     u1190:
  1931   0021B8  0E01               	movlw	1
  1932   0021BA  6E09               	movwf	___awmod@counter^0,c
  1933   0021BC  EFE4  F010         	goto	l2291
  1934   0021C0                     l2289:
  1935   0021C0  90D8               	bcf	status,0,c
  1936   0021C2  3607               	rlcf	___awmod@divisor^0,f,c
  1937   0021C4  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  1938   0021C6  2A09               	incf	___awmod@counter^0,f,c
  1939   0021C8                     l2291:
  1940   0021C8  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  1941   0021CA  EFE9  F010         	goto	u1201
  1942   0021CE  EFEB  F010         	goto	u1200
  1943   0021D2                     u1201:
  1944   0021D2  EFE0  F010         	goto	l2289
  1945   0021D6                     u1200:
  1946   0021D6                     l2293:
  1947   0021D6  5007               	movf	___awmod@divisor^0,w,c
  1948   0021D8  5C05               	subwf	___awmod@dividend^0,w,c
  1949   0021DA  5008               	movf	(___awmod@divisor+1)^0,w,c
  1950   0021DC  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  1951   0021DE  A0D8               	btfss	status,0,c
  1952   0021E0  EFF4  F010         	goto	u1211
  1953   0021E4  EFF6  F010         	goto	u1210
  1954   0021E8                     u1211:
  1955   0021E8  EFFA  F010         	goto	l2297
  1956   0021EC                     u1210:
  1957   0021EC  5007               	movf	___awmod@divisor^0,w,c
  1958   0021EE  5E05               	subwf	___awmod@dividend^0,f,c
  1959   0021F0  5008               	movf	(___awmod@divisor+1)^0,w,c
  1960   0021F2  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  1961   0021F4                     l2297:
  1962   0021F4  90D8               	bcf	status,0,c
  1963   0021F6  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  1964   0021F8  3207               	rrcf	___awmod@divisor^0,f,c
  1965   0021FA  2E09               	decfsz	___awmod@counter^0,f,c
  1966   0021FC  EFEB  F010         	goto	l2293
  1967   002200                     l2301:
  1968   002200  500A               	movf	___awmod@sign^0,w,c
  1969   002202  B4D8               	btfsc	status,2,c
  1970   002204  EF06  F011         	goto	u1221
  1971   002208  EF08  F011         	goto	u1220
  1972   00220C                     u1221:
  1973   00220C  EF0C  F011         	goto	l2305
  1974   002210                     u1220:
  1975   002210  6C05               	negf	___awmod@dividend^0,c
  1976   002212  1E06               	comf	(___awmod@dividend+1)^0,f,c
  1977   002214  B0D8               	btfsc	status,0,c
  1978   002216  2A06               	incf	(___awmod@dividend+1)^0,f,c
  1979   002218                     l2305:
  1980   002218  C005  F005         	movff	___awmod@dividend,?___awmod
  1981   00221C  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  1982   002220  0012               	return		;funcret
  1983   002222                     __end_of___awmod:
  1984                           	callstack 0
  1985                           
  1986 ;; *************** function _sendTxBuf *****************
  1987 ;; Defined at:
  1988 ;;		line 74 in file "serial.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2, status,0, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;Total ram usage:        0 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 4
  2009 ;; This function calls:
  2010 ;;		_isDataInTxBuf
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text9
  2017   002892                     __ptext9:
  2018                           	callstack 0
  2019   002892                     _sendTxBuf:
  2020                           	callstack 26
  2021   002892                     
  2022                           ;serial.c: 75:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2023   002892  EC63  F014         	call	_isDataInTxBuf	;wreg free
  2024   002896  0900               	iorlw	0
  2025   002898  B4D8               	btfsc	status,2,c
  2026   00289A  EF51  F014         	goto	u1911
  2027   00289E  EF53  F014         	goto	u1910
  2028   0028A2                     u1911:
  2029   0028A2  EF55  F014         	goto	l319
  2030   0028A6                     u1910:
  2031   0028A6  010E               	movlb	14	; () banked
  2032   0028A8  852D               	bsf	45,2,b	;volatile
  2033   0028AA                     l319:
  2034   0028AA  0012               	return		;funcret
  2035   0028AC                     __end_of_sendTxBuf:
  2036                           	callstack 0
  2037                           
  2038 ;; *************** function _isDataInTxBuf *****************
  2039 ;; Defined at:
  2040 ;;		line 61 in file "serial.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;		None
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      unsigned char 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2058 ;;Total ram usage:        0 bytes
  2059 ;; Hardware stack levels used: 1
  2060 ;; Hardware stack levels required when called: 3
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_sendTxBuf
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text10
  2069   0028C6                     __ptext10:
  2070                           	callstack 0
  2071   0028C6                     _isDataInTxBuf:
  2072                           	callstack 26
  2073   0028C6                     
  2074                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  2075   0028C6  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  2076   0028C8  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2077   0028CA  A4D8               	btfss	status,2,c
  2078   0028CC  EF6A  F014         	goto	u1451
  2079   0028D0  EF6D  F014         	goto	u1450
  2080   0028D4                     u1451:
  2081   0028D4  0E01               	movlw	1
  2082   0028D6  EF6E  F014         	goto	u1460
  2083   0028DA                     u1450:
  2084   0028DA  0E00               	movlw	0
  2085   0028DC                     u1460:
  2086   0028DC  0012               	return		;funcret
  2087   0028DE                     __end_of_isDataInTxBuf:
  2088                           	callstack 0
  2089                           
  2090 ;; *************** function _move *****************
  2091 ;; Defined at:
  2092 ;;		line 87 in file "dc_motor.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  2095 ;;		 -> main@motorL(10), 
  2096 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  2097 ;;		 -> main@motorR(10), 
  2098 ;;  color           1   36[COMRAM] unsigned char 
  2099 ;;  straightSpee    1   37[COMRAM] unsigned char 
  2100 ;;  reverseDurat    1   38[COMRAM] unsigned char 
  2101 ;;  straightRamp    1   39[COMRAM] unsigned char 
  2102 ;;  turnSpeed       1   40[COMRAM] unsigned char 
  2103 ;;  turnDuration    1   41[COMRAM] unsigned char 
  2104 ;;  turnRamp        1   42[COMRAM] unsigned char 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2116 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;Total ram usage:       11 bytes
  2121 ;; Hardware stack levels used: 1
  2122 ;; Hardware stack levels required when called: 6
  2123 ;; This function calls:
  2124 ;;		_fullSpeedAhead
  2125 ;;		_reverseOneSquare
  2126 ;;		_turnLeft
  2127 ;;		_turnRight
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text11
  2134   000E38                     __ptext11:
  2135                           	callstack 0
  2136   000E38                     _move:
  2137                           	callstack 24
  2138   000E38                     
  2139                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  2140   000E38  0425               	decf	move@color^0,w,c
  2141   000E3A  A4D8               	btfss	status,2,c
  2142   000E3C  EF22  F007         	goto	u1841
  2143   000E40  EF24  F007         	goto	u1840
  2144   000E44                     u1841:
  2145   000E44  EF60  F007         	goto	l2843
  2146   000E48                     u1840:
  2147   000E48                     
  2148                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2149   000E48  C023  F017         	movff	move@mL,turnRight@mL
  2150   000E4C  C024  F018         	movff	move@mR,turnRight@mR
  2151   000E50  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2152   000E54  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2153   000E58  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2154   000E5C  EC67  F00C         	call	_turnRight	;wreg free
  2155   000E60                     
  2156                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2157   000E60  0E05               	movlw	5
  2158   000E62  6E2D               	movwf	(??_move+1)^0,c
  2159   000E64  0E0F               	movlw	15
  2160   000E66  6E2C               	movwf	??_move^0,c
  2161   000E68  0EF1               	movlw	241
  2162   000E6A                     u2207:
  2163   000E6A  2EE8               	decfsz	wreg,f,c
  2164   000E6C  D7FE               	bra	u2207
  2165   000E6E  2E2C               	decfsz	??_move^0,f,c
  2166   000E70  D7FC               	bra	u2207
  2167   000E72  2E2D               	decfsz	(??_move+1)^0,f,c
  2168   000E74  D7FA               	bra	u2207
  2169   000E76  0000               	nop	
  2170   000E78                     
  2171                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2172   000E78  C023  F017         	movff	move@mL,turnRight@mL
  2173   000E7C  C024  F018         	movff	move@mR,turnRight@mR
  2174   000E80  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2175   000E84  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2176   000E88  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2177   000E8C  EC67  F00C         	call	_turnRight	;wreg free
  2178                           
  2179                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2180   000E90  0E05               	movlw	5
  2181   000E92  6E2D               	movwf	(??_move+1)^0,c
  2182   000E94  0E0F               	movlw	15
  2183   000E96  6E2C               	movwf	??_move^0,c
  2184   000E98  0EF1               	movlw	241
  2185   000E9A                     u2217:
  2186   000E9A  2EE8               	decfsz	wreg,f,c
  2187   000E9C  D7FE               	bra	u2217
  2188   000E9E  2E2C               	decfsz	??_move^0,f,c
  2189   000EA0  D7FC               	bra	u2217
  2190   000EA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2191   000EA4  D7FA               	bra	u2217
  2192   000EA6  0000               	nop	
  2193   000EA8                     l2841:
  2194                           
  2195                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2196   000EA8  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2197   000EAC  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2198   000EB0  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2199   000EB4  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2200   000EB8  ECEE  F00F         	call	_fullSpeedAhead	;wreg free
  2201                           
  2202                           ;dc_motor.c: 95:     }
  2203   000EBC  EFD8  F008         	goto	l445
  2204   000EC0                     l2843:
  2205   000EC0  0E02               	movlw	2
  2206   000EC2  1825               	xorwf	move@color^0,w,c
  2207   000EC4  A4D8               	btfss	status,2,c
  2208   000EC6  EF67  F007         	goto	u1851
  2209   000ECA  EF69  F007         	goto	u1850
  2210   000ECE                     u1851:
  2211   000ECE  EF9B  F007         	goto	l2853
  2212   000ED2                     u1850:
  2213   000ED2                     
  2214                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2215   000ED2  C023  F017         	movff	move@mL,turnLeft@mL
  2216   000ED6  C024  F018         	movff	move@mR,turnLeft@mR
  2217   000EDA  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2218   000EDE  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2219   000EE2  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2220   000EE6  EC42  F00D         	call	_turnLeft	;wreg free
  2221   000EEA                     
  2222                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2223   000EEA  0E05               	movlw	5
  2224   000EEC  6E2D               	movwf	(??_move+1)^0,c
  2225   000EEE  0E0F               	movlw	15
  2226   000EF0  6E2C               	movwf	??_move^0,c
  2227   000EF2  0EF1               	movlw	241
  2228   000EF4                     u2227:
  2229   000EF4  2EE8               	decfsz	wreg,f,c
  2230   000EF6  D7FE               	bra	u2227
  2231   000EF8  2E2C               	decfsz	??_move^0,f,c
  2232   000EFA  D7FC               	bra	u2227
  2233   000EFC  2E2D               	decfsz	(??_move+1)^0,f,c
  2234   000EFE  D7FA               	bra	u2227
  2235   000F00  0000               	nop	
  2236   000F02                     
  2237                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2238   000F02  C023  F017         	movff	move@mL,turnLeft@mL
  2239   000F06  C024  F018         	movff	move@mR,turnLeft@mR
  2240   000F0A  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2241   000F0E  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2242   000F12  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2243   000F16  EC42  F00D         	call	_turnLeft	;wreg free
  2244                           
  2245                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2246   000F1A  0E05               	movlw	5
  2247   000F1C  6E2D               	movwf	(??_move+1)^0,c
  2248   000F1E  0E0F               	movlw	15
  2249   000F20  6E2C               	movwf	??_move^0,c
  2250   000F22  0EF1               	movlw	241
  2251   000F24                     u2237:
  2252   000F24  2EE8               	decfsz	wreg,f,c
  2253   000F26  D7FE               	bra	u2237
  2254   000F28  2E2C               	decfsz	??_move^0,f,c
  2255   000F2A  D7FC               	bra	u2237
  2256   000F2C  2E2D               	decfsz	(??_move+1)^0,f,c
  2257   000F2E  D7FA               	bra	u2237
  2258   000F30  0000               	nop	
  2259   000F32  EF54  F007         	goto	l2841
  2260   000F36                     l2853:
  2261   000F36  0E03               	movlw	3
  2262   000F38  1825               	xorwf	move@color^0,w,c
  2263   000F3A  A4D8               	btfss	status,2,c
  2264   000F3C  EFA2  F007         	goto	u1861
  2265   000F40  EFA4  F007         	goto	u1860
  2266   000F44                     u1861:
  2267   000F44  EF06  F008         	goto	l2869
  2268   000F48                     u1860:
  2269   000F48                     
  2270                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2271   000F48  C023  F017         	movff	move@mL,turnLeft@mL
  2272   000F4C  C024  F018         	movff	move@mR,turnLeft@mR
  2273   000F50  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2274   000F54  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2275   000F58  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2276   000F5C  EC42  F00D         	call	_turnLeft	;wreg free
  2277   000F60                     
  2278                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2279   000F60  0E05               	movlw	5
  2280   000F62  6E2D               	movwf	(??_move+1)^0,c
  2281   000F64  0E0F               	movlw	15
  2282   000F66  6E2C               	movwf	??_move^0,c
  2283   000F68  0EF1               	movlw	241
  2284   000F6A                     u2247:
  2285   000F6A  2EE8               	decfsz	wreg,f,c
  2286   000F6C  D7FE               	bra	u2247
  2287   000F6E  2E2C               	decfsz	??_move^0,f,c
  2288   000F70  D7FC               	bra	u2247
  2289   000F72  2E2D               	decfsz	(??_move+1)^0,f,c
  2290   000F74  D7FA               	bra	u2247
  2291   000F76  0000               	nop	
  2292   000F78                     
  2293                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2294   000F78  C023  F017         	movff	move@mL,turnLeft@mL
  2295   000F7C  C024  F018         	movff	move@mR,turnLeft@mR
  2296   000F80  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2297   000F84  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2298   000F88  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2299   000F8C  EC42  F00D         	call	_turnLeft	;wreg free
  2300                           
  2301                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2302   000F90  0E05               	movlw	5
  2303   000F92  6E2D               	movwf	(??_move+1)^0,c
  2304   000F94  0E0F               	movlw	15
  2305   000F96  6E2C               	movwf	??_move^0,c
  2306   000F98  0EF1               	movlw	241
  2307   000F9A                     u2257:
  2308   000F9A  2EE8               	decfsz	wreg,f,c
  2309   000F9C  D7FE               	bra	u2257
  2310   000F9E  2E2C               	decfsz	??_move^0,f,c
  2311   000FA0  D7FC               	bra	u2257
  2312   000FA2  2E2D               	decfsz	(??_move+1)^0,f,c
  2313   000FA4  D7FA               	bra	u2257
  2314   000FA6  0000               	nop	
  2315   000FA8                     
  2316                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2317   000FA8  C023  F017         	movff	move@mL,turnLeft@mL
  2318   000FAC  C024  F018         	movff	move@mR,turnLeft@mR
  2319   000FB0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2320   000FB4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2321   000FB8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2322   000FBC  EC42  F00D         	call	_turnLeft	;wreg free
  2323   000FC0                     
  2324                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2325   000FC0  0E05               	movlw	5
  2326   000FC2  6E2D               	movwf	(??_move+1)^0,c
  2327   000FC4  0E0F               	movlw	15
  2328   000FC6  6E2C               	movwf	??_move^0,c
  2329   000FC8  0EF1               	movlw	241
  2330   000FCA                     u2267:
  2331   000FCA  2EE8               	decfsz	wreg,f,c
  2332   000FCC  D7FE               	bra	u2267
  2333   000FCE  2E2C               	decfsz	??_move^0,f,c
  2334   000FD0  D7FC               	bra	u2267
  2335   000FD2  2E2D               	decfsz	(??_move+1)^0,f,c
  2336   000FD4  D7FA               	bra	u2267
  2337   000FD6  0000               	nop	
  2338                           
  2339                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2340   000FD8  C023  F017         	movff	move@mL,turnLeft@mL
  2341   000FDC  C024  F018         	movff	move@mR,turnLeft@mR
  2342   000FE0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2343   000FE4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2344   000FE8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2345   000FEC  EC42  F00D         	call	_turnLeft	;wreg free
  2346   000FF0                     
  2347                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2348   000FF0  0E05               	movlw	5
  2349   000FF2  6E2D               	movwf	(??_move+1)^0,c
  2350   000FF4  0E0F               	movlw	15
  2351   000FF6  6E2C               	movwf	??_move^0,c
  2352   000FF8  0EF1               	movlw	241
  2353   000FFA                     u2277:
  2354   000FFA  2EE8               	decfsz	wreg,f,c
  2355   000FFC  D7FE               	bra	u2277
  2356   000FFE  2E2C               	decfsz	??_move^0,f,c
  2357   001000  D7FC               	bra	u2277
  2358   001002  2E2D               	decfsz	(??_move+1)^0,f,c
  2359   001004  D7FA               	bra	u2277
  2360   001006  0000               	nop	
  2361   001008  EF54  F007         	goto	l2841
  2362   00100C                     l2869:
  2363   00100C  0E04               	movlw	4
  2364   00100E  1825               	xorwf	move@color^0,w,c
  2365   001010  A4D8               	btfss	status,2,c
  2366   001012  EF0D  F008         	goto	u1871
  2367   001016  EF0F  F008         	goto	u1870
  2368   00101A                     u1871:
  2369   00101A  EF63  F008         	goto	l2881
  2370   00101E                     u1870:
  2371   00101E                     
  2372                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2373   00101E  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2374   001022  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2375   001026  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2376   00102A  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2377   00102E  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2378   001032  ECA9  F00A         	call	_reverseOneSquare	;wreg free
  2379   001036                     l2873:
  2380                           
  2381                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2382   001036  0E05               	movlw	5
  2383   001038  6E2D               	movwf	(??_move+1)^0,c
  2384   00103A  0E0F               	movlw	15
  2385   00103C  6E2C               	movwf	??_move^0,c
  2386   00103E  0EF1               	movlw	241
  2387   001040                     u2287:
  2388   001040  2EE8               	decfsz	wreg,f,c
  2389   001042  D7FE               	bra	u2287
  2390   001044  2E2C               	decfsz	??_move^0,f,c
  2391   001046  D7FC               	bra	u2287
  2392   001048  2E2D               	decfsz	(??_move+1)^0,f,c
  2393   00104A  D7FA               	bra	u2287
  2394   00104C  0000               	nop	
  2395   00104E                     
  2396                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2397   00104E  C023  F017         	movff	move@mL,turnRight@mL
  2398   001052  C024  F018         	movff	move@mR,turnRight@mR
  2399   001056  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2400   00105A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2401   00105E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2402   001062  EC67  F00C         	call	_turnRight	;wreg free
  2403                           
  2404                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2405   001066  0E05               	movlw	5
  2406   001068  6E2D               	movwf	(??_move+1)^0,c
  2407   00106A  0E0F               	movlw	15
  2408   00106C  6E2C               	movwf	??_move^0,c
  2409   00106E  0EF1               	movlw	241
  2410   001070                     u2297:
  2411   001070  2EE8               	decfsz	wreg,f,c
  2412   001072  D7FE               	bra	u2297
  2413   001074  2E2C               	decfsz	??_move^0,f,c
  2414   001076  D7FC               	bra	u2297
  2415   001078  2E2D               	decfsz	(??_move+1)^0,f,c
  2416   00107A  D7FA               	bra	u2297
  2417   00107C  0000               	nop	
  2418   00107E                     
  2419                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2420   00107E  C023  F017         	movff	move@mL,turnRight@mL
  2421   001082  C024  F018         	movff	move@mR,turnRight@mR
  2422   001086  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2423   00108A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2424   00108E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2425   001092  EC67  F00C         	call	_turnRight	;wreg free
  2426   001096                     l2879:
  2427                           
  2428                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2429   001096  0E05               	movlw	5
  2430   001098  6E2D               	movwf	(??_move+1)^0,c
  2431   00109A  0E0F               	movlw	15
  2432   00109C  6E2C               	movwf	??_move^0,c
  2433   00109E  0EF1               	movlw	241
  2434   0010A0                     u2307:
  2435   0010A0  2EE8               	decfsz	wreg,f,c
  2436   0010A2  D7FE               	bra	u2307
  2437   0010A4  2E2C               	decfsz	??_move^0,f,c
  2438   0010A6  D7FC               	bra	u2307
  2439   0010A8  2E2D               	decfsz	(??_move+1)^0,f,c
  2440   0010AA  D7FA               	bra	u2307
  2441   0010AC  0000               	nop	
  2442                           
  2443                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2444   0010AE  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2445   0010B2  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2446   0010B6  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2447   0010BA  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2448   0010BE  ECEE  F00F         	call	_fullSpeedAhead	;wreg free
  2449                           
  2450                           ;dc_motor.c: 125:     }
  2451   0010C2  EFD8  F008         	goto	l445
  2452   0010C6                     l2881:
  2453   0010C6  0E05               	movlw	5
  2454   0010C8  1825               	xorwf	move@color^0,w,c
  2455   0010CA  A4D8               	btfss	status,2,c
  2456   0010CC  EF6A  F008         	goto	u1881
  2457   0010D0  EF6C  F008         	goto	u1880
  2458   0010D4                     u1881:
  2459   0010D4  EFAA  F008         	goto	l2893
  2460   0010D8                     u1880:
  2461   0010D8                     
  2462                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2463   0010D8  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2464   0010DC  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2465   0010E0  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2466   0010E4  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2467   0010E8  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2468   0010EC  ECA9  F00A         	call	_reverseOneSquare	;wreg free
  2469   0010F0                     l2885:
  2470                           
  2471                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2472   0010F0  0E05               	movlw	5
  2473   0010F2  6E2D               	movwf	(??_move+1)^0,c
  2474   0010F4  0E0F               	movlw	15
  2475   0010F6  6E2C               	movwf	??_move^0,c
  2476   0010F8  0EF1               	movlw	241
  2477   0010FA                     u2317:
  2478   0010FA  2EE8               	decfsz	wreg,f,c
  2479   0010FC  D7FE               	bra	u2317
  2480   0010FE  2E2C               	decfsz	??_move^0,f,c
  2481   001100  D7FC               	bra	u2317
  2482   001102  2E2D               	decfsz	(??_move+1)^0,f,c
  2483   001104  D7FA               	bra	u2317
  2484   001106  0000               	nop	
  2485   001108                     
  2486                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2487   001108  C023  F017         	movff	move@mL,turnLeft@mL
  2488   00110C  C024  F018         	movff	move@mR,turnLeft@mR
  2489   001110  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2490   001114  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2491   001118  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2492   00111C  EC42  F00D         	call	_turnLeft	;wreg free
  2493                           
  2494                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2495   001120  0E05               	movlw	5
  2496   001122  6E2D               	movwf	(??_move+1)^0,c
  2497   001124  0E0F               	movlw	15
  2498   001126  6E2C               	movwf	??_move^0,c
  2499   001128  0EF1               	movlw	241
  2500   00112A                     u2327:
  2501   00112A  2EE8               	decfsz	wreg,f,c
  2502   00112C  D7FE               	bra	u2327
  2503   00112E  2E2C               	decfsz	??_move^0,f,c
  2504   001130  D7FC               	bra	u2327
  2505   001132  2E2D               	decfsz	(??_move+1)^0,f,c
  2506   001134  D7FA               	bra	u2327
  2507   001136  0000               	nop	
  2508   001138                     
  2509                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2510   001138  C023  F017         	movff	move@mL,turnLeft@mL
  2511   00113C  C024  F018         	movff	move@mR,turnLeft@mR
  2512   001140  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2513   001144  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2514   001148  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2515   00114C  EC42  F00D         	call	_turnLeft	;wreg free
  2516   001150  EF4B  F008         	goto	l2879
  2517   001154                     l2893:
  2518   001154  0E06               	movlw	6
  2519   001156  1825               	xorwf	move@color^0,w,c
  2520   001158  A4D8               	btfss	status,2,c
  2521   00115A  EFB1  F008         	goto	u1891
  2522   00115E  EFB3  F008         	goto	u1890
  2523   001162                     u1891:
  2524   001162  EFC1  F008         	goto	l2905
  2525   001166                     u1890:
  2526   001166                     
  2527                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2528   001166  C023  F017         	movff	move@mL,turnRight@mL
  2529   00116A  C024  F018         	movff	move@mR,turnRight@mR
  2530   00116E  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2531   001172  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2532   001176  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2533   00117A  EC67  F00C         	call	_turnRight	;wreg free
  2534   00117E  EF1B  F008         	goto	l2873
  2535   001182                     l2905:
  2536   001182  0E07               	movlw	7
  2537   001184  1825               	xorwf	move@color^0,w,c
  2538   001186  A4D8               	btfss	status,2,c
  2539   001188  EFC8  F008         	goto	u1901
  2540   00118C  EFCA  F008         	goto	u1900
  2541   001190                     u1901:
  2542   001190  EFD8  F008         	goto	l443
  2543   001194                     u1900:
  2544   001194                     
  2545                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2546   001194  C023  F017         	movff	move@mL,turnLeft@mL
  2547   001198  C024  F018         	movff	move@mR,turnLeft@mR
  2548   00119C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2549   0011A0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2550   0011A4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2551   0011A8  EC42  F00D         	call	_turnLeft	;wreg free
  2552   0011AC  EF78  F008         	goto	l2885
  2553   0011B0                     l443:
  2554   0011B0                     l445:
  2555   0011B0  0012               	return		;funcret
  2556   0011B2                     __end_of_move:
  2557                           	callstack 0
  2558                           
  2559 ;; *************** function _turnRight *****************
  2560 ;; Defined at:
  2561 ;;		line 214 in file "dc_motor.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2564 ;;		 -> main@motorL(10), 
  2565 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2566 ;;		 -> main@motorR(10), 
  2567 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  2568 ;;  turnDuration    1   25[COMRAM] unsigned char 
  2569 ;;  turnRamp        1   26[COMRAM] unsigned char 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  cur_power       2   32[COMRAM] int 
  2572 ;;  i               2   30[COMRAM] int 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2582 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2583 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;Total ram usage:       12 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; Hardware stack levels required when called: 5
  2589 ;; This function calls:
  2590 ;;		_setMotorPWM
  2591 ;; This function is called by:
  2592 ;;		_move
  2593 ;;		_calibration
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text12
  2598   0018CE                     __ptext12:
  2599                           	callstack 0
  2600   0018CE                     _turnRight:
  2601                           	callstack 24
  2602   0018CE                     
  2603                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  2604   0018CE  5017               	movf	turnRight@mL^0,w,c
  2605   0018D0  6ED9               	movwf	fsr2l,c
  2606   0018D2  6ADA               	clrf	fsr2h,c
  2607   0018D4  0E01               	movlw	1
  2608   0018D6  26D9               	addwf	fsr2l,f,c
  2609   0018D8  0E01               	movlw	1
  2610   0018DA  6EDF               	movwf	indf2,c
  2611                           
  2612                           ;dc_motor.c: 217:     mR->direction = 0;
  2613   0018DC  5018               	movf	turnRight@mR^0,w,c
  2614   0018DE  6ED9               	movwf	fsr2l,c
  2615   0018E0  6ADA               	clrf	fsr2h,c
  2616   0018E2  0E01               	movlw	1
  2617   0018E4  26D9               	addwf	fsr2l,f,c
  2618   0018E6  6ADF               	clrf	indf2,c
  2619   0018E8                     
  2620                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2621   0018E8  0E00               	movlw	0
  2622   0018EA  6E22               	movwf	(turnRight@cur_power+1)^0,c
  2623   0018EC  0E01               	movlw	1
  2624   0018EE  6E21               	movwf	turnRight@cur_power^0,c
  2625   0018F0  EFBC  F00C         	goto	l2505
  2626   0018F4                     l2491:
  2627                           
  2628                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  2629   0018F4  5017               	movf	turnRight@mL^0,w,c
  2630   0018F6  6ED9               	movwf	fsr2l,c
  2631   0018F8  6ADA               	clrf	fsr2h,c
  2632   0018FA  5017               	movf	turnRight@mL^0,w,c
  2633   0018FC  6EE1               	movwf	fsr1l,c
  2634   0018FE  6AE2               	clrf	fsr1h,c
  2635   001900  0E09               	movlw	9
  2636   001902  26E1               	addwf	fsr1l,f,c
  2637   001904  50E7               	movf	indf1,w,c
  2638   001906  2421               	addwf	turnRight@cur_power^0,w,c
  2639   001908  6EDF               	movwf	indf2,c
  2640                           
  2641                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  2642   00190A  5018               	movf	turnRight@mR^0,w,c
  2643   00190C  6ED9               	movwf	fsr2l,c
  2644   00190E  6ADA               	clrf	fsr2h,c
  2645   001910  5018               	movf	turnRight@mR^0,w,c
  2646   001912  6EE1               	movwf	fsr1l,c
  2647   001914  6AE2               	clrf	fsr1h,c
  2648   001916  0E09               	movlw	9
  2649   001918  26E1               	addwf	fsr1l,f,c
  2650   00191A  50E7               	movf	indf1,w,c
  2651   00191C  2421               	addwf	turnRight@cur_power^0,w,c
  2652   00191E  6EDF               	movwf	indf2,c
  2653   001920                     
  2654                           ;dc_motor.c: 223:         setMotorPWM(mL);
  2655   001920  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  2656   001924  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2657   001928                     
  2658                           ;dc_motor.c: 224:         setMotorPWM(mR);
  2659   001928  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  2660   00192C  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2661   001930                     
  2662                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  2663   001930  0E00               	movlw	0
  2664   001932  6E20               	movwf	(turnRight@i+1)^0,c
  2665   001934  0E00               	movlw	0
  2666   001936  6E1F               	movwf	turnRight@i^0,c
  2667   001938  EFA8  F00C         	goto	l475
  2668   00193C                     l2499:
  2669                           
  2670                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2671   00193C  0E68               	movlw	104
  2672   00193E  6E1C               	movwf	??_turnRight^0,c
  2673   001940  0EE4               	movlw	228
  2674   001942                     u2337:
  2675   001942  2EE8               	decfsz	wreg,f,c
  2676   001944  D7FE               	bra	u2337
  2677   001946  2E1C               	decfsz	??_turnRight^0,f,c
  2678   001948  D7FC               	bra	u2337
  2679   00194A  D000               	nop2	
  2680   00194C                     
  2681                           ;dc_motor.c: 227:         }
  2682   00194C  4A1F               	infsnz	turnRight@i^0,f,c
  2683   00194E  2A20               	incf	(turnRight@i+1)^0,f,c
  2684   001950                     l475:
  2685   001950  501B               	movf	turnRight@turnRamp^0,w,c
  2686   001952  6E1C               	movwf	??_turnRight^0,c
  2687   001954  6A1D               	clrf	(??_turnRight+1)^0,c
  2688   001956  501C               	movf	??_turnRight^0,w,c
  2689   001958  5C1F               	subwf	turnRight@i^0,w,c
  2690   00195A  5020               	movf	(turnRight@i+1)^0,w,c
  2691   00195C  0A80               	xorlw	128
  2692   00195E  6E1E               	movwf	(??_turnRight+2)^0,c
  2693   001960  501D               	movf	(??_turnRight+1)^0,w,c
  2694   001962  0A80               	xorlw	128
  2695   001964  581E               	subwfb	(??_turnRight+2)^0,w,c
  2696   001966  A0D8               	btfss	status,0,c
  2697   001968  EFB8  F00C         	goto	u1491
  2698   00196C  EFBA  F00C         	goto	u1490
  2699   001970                     u1491:
  2700   001970  EF9E  F00C         	goto	l2499
  2701   001974                     u1490:
  2702   001974                     
  2703                           ;dc_motor.c: 228:     }
  2704   001974  4A21               	infsnz	turnRight@cur_power^0,f,c
  2705   001976  2A22               	incf	(turnRight@cur_power+1)^0,f,c
  2706   001978                     l2505:
  2707   001978  5019               	movf	turnRight@turnSpeed^0,w,c
  2708   00197A  6E1C               	movwf	??_turnRight^0,c
  2709   00197C  6A1D               	clrf	(??_turnRight+1)^0,c
  2710   00197E  5021               	movf	turnRight@cur_power^0,w,c
  2711   001980  5C1C               	subwf	??_turnRight^0,w,c
  2712   001982  501D               	movf	(??_turnRight+1)^0,w,c
  2713   001984  0A80               	xorlw	128
  2714   001986  6E1E               	movwf	(??_turnRight+2)^0,c
  2715   001988  5022               	movf	(turnRight@cur_power+1)^0,w,c
  2716   00198A  0A80               	xorlw	128
  2717   00198C  581E               	subwfb	(??_turnRight+2)^0,w,c
  2718   00198E  B0D8               	btfsc	status,0,c
  2719   001990  EFCC  F00C         	goto	u1501
  2720   001994  EFCE  F00C         	goto	u1500
  2721   001998                     u1501:
  2722   001998  EF7A  F00C         	goto	l2491
  2723   00199C                     u1500:
  2724   00199C                     
  2725                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  2726   00199C  0E00               	movlw	0
  2727   00199E  6E20               	movwf	(turnRight@i+1)^0,c
  2728   0019A0  0E00               	movlw	0
  2729   0019A2  6E1F               	movwf	turnRight@i^0,c
  2730   0019A4  EFDE  F00C         	goto	l479
  2731   0019A8                     l2509:
  2732                           
  2733                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2734   0019A8  0E68               	movlw	104
  2735   0019AA  6E1C               	movwf	??_turnRight^0,c
  2736   0019AC  0EE4               	movlw	228
  2737   0019AE                     u2347:
  2738   0019AE  2EE8               	decfsz	wreg,f,c
  2739   0019B0  D7FE               	bra	u2347
  2740   0019B2  2E1C               	decfsz	??_turnRight^0,f,c
  2741   0019B4  D7FC               	bra	u2347
  2742   0019B6  D000               	nop2	
  2743   0019B8                     
  2744                           ;dc_motor.c: 232:         }
  2745   0019B8  4A1F               	infsnz	turnRight@i^0,f,c
  2746   0019BA  2A20               	incf	(turnRight@i+1)^0,f,c
  2747   0019BC                     l479:
  2748   0019BC  501A               	movf	turnRight@turnDuration^0,w,c
  2749   0019BE  6E1C               	movwf	??_turnRight^0,c
  2750   0019C0  6A1D               	clrf	(??_turnRight+1)^0,c
  2751   0019C2  501C               	movf	??_turnRight^0,w,c
  2752   0019C4  5C1F               	subwf	turnRight@i^0,w,c
  2753   0019C6  5020               	movf	(turnRight@i+1)^0,w,c
  2754   0019C8  0A80               	xorlw	128
  2755   0019CA  6E1E               	movwf	(??_turnRight+2)^0,c
  2756   0019CC  501D               	movf	(??_turnRight+1)^0,w,c
  2757   0019CE  0A80               	xorlw	128
  2758   0019D0  581E               	subwfb	(??_turnRight+2)^0,w,c
  2759   0019D2  A0D8               	btfss	status,0,c
  2760   0019D4  EFEE  F00C         	goto	u1511
  2761   0019D8  EFF0  F00C         	goto	u1510
  2762   0019DC                     u1511:
  2763   0019DC  EFD4  F00C         	goto	l2509
  2764   0019E0                     u1510:
  2765   0019E0                     
  2766                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2767   0019E0  C019  F021         	movff	turnRight@turnSpeed,turnRight@cur_power
  2768   0019E4  6A22               	clrf	(turnRight@cur_power+1)^0,c
  2769   0019E6                     l2513:
  2770   0019E6  BE22               	btfsc	(turnRight@cur_power+1)^0,7,c
  2771   0019E8  EFFA  F00C         	goto	u1520
  2772   0019EC  EFF8  F00C         	goto	u1521
  2773   0019F0                     u1521:
  2774   0019F0  EFFC  F00C         	goto	l2517
  2775   0019F4                     u1520:
  2776   0019F4  EF41  F00D         	goto	l487
  2777   0019F8                     l2517:
  2778                           
  2779                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  2780   0019F8  5017               	movf	turnRight@mL^0,w,c
  2781   0019FA  6ED9               	movwf	fsr2l,c
  2782   0019FC  6ADA               	clrf	fsr2h,c
  2783   0019FE  5017               	movf	turnRight@mL^0,w,c
  2784   001A00  6EE1               	movwf	fsr1l,c
  2785   001A02  6AE2               	clrf	fsr1h,c
  2786   001A04  0E09               	movlw	9
  2787   001A06  26E1               	addwf	fsr1l,f,c
  2788   001A08  50E7               	movf	indf1,w,c
  2789   001A0A  2421               	addwf	turnRight@cur_power^0,w,c
  2790   001A0C  6EDF               	movwf	indf2,c
  2791                           
  2792                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  2793   001A0E  5018               	movf	turnRight@mR^0,w,c
  2794   001A10  6ED9               	movwf	fsr2l,c
  2795   001A12  6ADA               	clrf	fsr2h,c
  2796   001A14  5018               	movf	turnRight@mR^0,w,c
  2797   001A16  6EE1               	movwf	fsr1l,c
  2798   001A18  6AE2               	clrf	fsr1h,c
  2799   001A1A  0E09               	movlw	9
  2800   001A1C  26E1               	addwf	fsr1l,f,c
  2801   001A1E  50E7               	movf	indf1,w,c
  2802   001A20  2421               	addwf	turnRight@cur_power^0,w,c
  2803   001A22  6EDF               	movwf	indf2,c
  2804   001A24                     
  2805                           ;dc_motor.c: 237:         setMotorPWM(mL);
  2806   001A24  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  2807   001A28  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2808   001A2C                     
  2809                           ;dc_motor.c: 238:         setMotorPWM(mR);
  2810   001A2C  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  2811   001A30  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2812   001A34                     
  2813                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  2814   001A34  0E00               	movlw	0
  2815   001A36  6E20               	movwf	(turnRight@i+1)^0,c
  2816   001A38  0E00               	movlw	0
  2817   001A3A  6E1F               	movwf	turnRight@i^0,c
  2818   001A3C  EF2A  F00D         	goto	l484
  2819   001A40                     l2525:
  2820                           
  2821                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2822   001A40  0E68               	movlw	104
  2823   001A42  6E1C               	movwf	??_turnRight^0,c
  2824   001A44  0EE4               	movlw	228
  2825   001A46                     u2357:
  2826   001A46  2EE8               	decfsz	wreg,f,c
  2827   001A48  D7FE               	bra	u2357
  2828   001A4A  2E1C               	decfsz	??_turnRight^0,f,c
  2829   001A4C  D7FC               	bra	u2357
  2830   001A4E  D000               	nop2	
  2831   001A50                     
  2832                           ;dc_motor.c: 241:         }
  2833   001A50  4A1F               	infsnz	turnRight@i^0,f,c
  2834   001A52  2A20               	incf	(turnRight@i+1)^0,f,c
  2835   001A54                     l484:
  2836   001A54  501B               	movf	turnRight@turnRamp^0,w,c
  2837   001A56  6E1C               	movwf	??_turnRight^0,c
  2838   001A58  6A1D               	clrf	(??_turnRight+1)^0,c
  2839   001A5A  501C               	movf	??_turnRight^0,w,c
  2840   001A5C  5C1F               	subwf	turnRight@i^0,w,c
  2841   001A5E  5020               	movf	(turnRight@i+1)^0,w,c
  2842   001A60  0A80               	xorlw	128
  2843   001A62  6E1E               	movwf	(??_turnRight+2)^0,c
  2844   001A64  501D               	movf	(??_turnRight+1)^0,w,c
  2845   001A66  0A80               	xorlw	128
  2846   001A68  581E               	subwfb	(??_turnRight+2)^0,w,c
  2847   001A6A  A0D8               	btfss	status,0,c
  2848   001A6C  EF3A  F00D         	goto	u1531
  2849   001A70  EF3C  F00D         	goto	u1530
  2850   001A74                     u1531:
  2851   001A74  EF20  F00D         	goto	l2525
  2852   001A78                     u1530:
  2853   001A78                     
  2854                           ;dc_motor.c: 242:     }
  2855   001A78  0621               	decf	turnRight@cur_power^0,f,c
  2856   001A7A  A0D8               	btfss	status,0,c
  2857   001A7C  0622               	decf	(turnRight@cur_power+1)^0,f,c
  2858   001A7E  EFF3  F00C         	goto	l2513
  2859   001A82                     l487:
  2860   001A82  0012               	return		;funcret
  2861   001A84                     __end_of_turnRight:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _turnLeft *****************
  2865 ;; Defined at:
  2866 ;;		line 182 in file "dc_motor.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  2869 ;;		 -> main@motorL(10), 
  2870 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  2871 ;;		 -> main@motorR(10), 
  2872 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  2873 ;;  turnDuration    1   25[COMRAM] unsigned char 
  2874 ;;  turnRamp        1   26[COMRAM] unsigned char 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  cur_power       2   32[COMRAM] int 
  2877 ;;  i               2   30[COMRAM] int 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2887 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2891 ;;Total ram usage:       12 bytes
  2892 ;; Hardware stack levels used: 1
  2893 ;; Hardware stack levels required when called: 5
  2894 ;; This function calls:
  2895 ;;		_setMotorPWM
  2896 ;; This function is called by:
  2897 ;;		_move
  2898 ;;		_calibration
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text13
  2903   001A84                     __ptext13:
  2904                           	callstack 0
  2905   001A84                     _turnLeft:
  2906                           	callstack 24
  2907   001A84                     
  2908                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  2909   001A84  5017               	movf	turnLeft@mL^0,w,c
  2910   001A86  6ED9               	movwf	fsr2l,c
  2911   001A88  6ADA               	clrf	fsr2h,c
  2912   001A8A  0E01               	movlw	1
  2913   001A8C  26D9               	addwf	fsr2l,f,c
  2914   001A8E  6ADF               	clrf	indf2,c
  2915                           
  2916                           ;dc_motor.c: 185:     mR->direction = 1;
  2917   001A90  5018               	movf	turnLeft@mR^0,w,c
  2918   001A92  6ED9               	movwf	fsr2l,c
  2919   001A94  6ADA               	clrf	fsr2h,c
  2920   001A96  0E01               	movlw	1
  2921   001A98  26D9               	addwf	fsr2l,f,c
  2922   001A9A  0E01               	movlw	1
  2923   001A9C  6EDF               	movwf	indf2,c
  2924   001A9E                     
  2925                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2926   001A9E  0E00               	movlw	0
  2927   001AA0  6E22               	movwf	(turnLeft@cur_power+1)^0,c
  2928   001AA2  0E01               	movlw	1
  2929   001AA4  6E21               	movwf	turnLeft@cur_power^0,c
  2930   001AA6  EF97  F00D         	goto	l2571
  2931   001AAA                     l2557:
  2932                           
  2933                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  2934   001AAA  5017               	movf	turnLeft@mL^0,w,c
  2935   001AAC  6ED9               	movwf	fsr2l,c
  2936   001AAE  6ADA               	clrf	fsr2h,c
  2937   001AB0  5017               	movf	turnLeft@mL^0,w,c
  2938   001AB2  6EE1               	movwf	fsr1l,c
  2939   001AB4  6AE2               	clrf	fsr1h,c
  2940   001AB6  0E09               	movlw	9
  2941   001AB8  26E1               	addwf	fsr1l,f,c
  2942   001ABA  50E7               	movf	indf1,w,c
  2943   001ABC  2421               	addwf	turnLeft@cur_power^0,w,c
  2944   001ABE  6EDF               	movwf	indf2,c
  2945                           
  2946                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  2947   001AC0  5018               	movf	turnLeft@mR^0,w,c
  2948   001AC2  6ED9               	movwf	fsr2l,c
  2949   001AC4  6ADA               	clrf	fsr2h,c
  2950   001AC6  5018               	movf	turnLeft@mR^0,w,c
  2951   001AC8  6EE1               	movwf	fsr1l,c
  2952   001ACA  6AE2               	clrf	fsr1h,c
  2953   001ACC  0E09               	movlw	9
  2954   001ACE  26E1               	addwf	fsr1l,f,c
  2955   001AD0  50E7               	movf	indf1,w,c
  2956   001AD2  2421               	addwf	turnLeft@cur_power^0,w,c
  2957   001AD4  6EDF               	movwf	indf2,c
  2958   001AD6                     
  2959                           ;dc_motor.c: 191:         setMotorPWM(mL);
  2960   001AD6  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  2961   001ADA  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2962   001ADE                     
  2963                           ;dc_motor.c: 192:         setMotorPWM(mR);
  2964   001ADE  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  2965   001AE2  EC1D  F00E         	call	_setMotorPWM	;wreg free
  2966   001AE6                     
  2967                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  2968   001AE6  0E00               	movlw	0
  2969   001AE8  6E20               	movwf	(turnLeft@i+1)^0,c
  2970   001AEA  0E00               	movlw	0
  2971   001AEC  6E1F               	movwf	turnLeft@i^0,c
  2972   001AEE  EF83  F00D         	goto	l458
  2973   001AF2                     l2565:
  2974                           
  2975                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2976   001AF2  0E68               	movlw	104
  2977   001AF4  6E1C               	movwf	??_turnLeft^0,c
  2978   001AF6  0EE4               	movlw	228
  2979   001AF8                     u2367:
  2980   001AF8  2EE8               	decfsz	wreg,f,c
  2981   001AFA  D7FE               	bra	u2367
  2982   001AFC  2E1C               	decfsz	??_turnLeft^0,f,c
  2983   001AFE  D7FC               	bra	u2367
  2984   001B00  D000               	nop2	
  2985   001B02                     
  2986                           ;dc_motor.c: 195:         }
  2987   001B02  4A1F               	infsnz	turnLeft@i^0,f,c
  2988   001B04  2A20               	incf	(turnLeft@i+1)^0,f,c
  2989   001B06                     l458:
  2990   001B06  501B               	movf	turnLeft@turnRamp^0,w,c
  2991   001B08  6E1C               	movwf	??_turnLeft^0,c
  2992   001B0A  6A1D               	clrf	(??_turnLeft+1)^0,c
  2993   001B0C  501C               	movf	??_turnLeft^0,w,c
  2994   001B0E  5C1F               	subwf	turnLeft@i^0,w,c
  2995   001B10  5020               	movf	(turnLeft@i+1)^0,w,c
  2996   001B12  0A80               	xorlw	128
  2997   001B14  6E1E               	movwf	(??_turnLeft+2)^0,c
  2998   001B16  501D               	movf	(??_turnLeft+1)^0,w,c
  2999   001B18  0A80               	xorlw	128
  3000   001B1A  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3001   001B1C  A0D8               	btfss	status,0,c
  3002   001B1E  EF93  F00D         	goto	u1561
  3003   001B22  EF95  F00D         	goto	u1560
  3004   001B26                     u1561:
  3005   001B26  EF79  F00D         	goto	l2565
  3006   001B2A                     u1560:
  3007   001B2A                     
  3008                           ;dc_motor.c: 196:     }
  3009   001B2A  4A21               	infsnz	turnLeft@cur_power^0,f,c
  3010   001B2C  2A22               	incf	(turnLeft@cur_power+1)^0,f,c
  3011   001B2E                     l2571:
  3012   001B2E  5019               	movf	turnLeft@turnSpeed^0,w,c
  3013   001B30  6E1C               	movwf	??_turnLeft^0,c
  3014   001B32  6A1D               	clrf	(??_turnLeft+1)^0,c
  3015   001B34  5021               	movf	turnLeft@cur_power^0,w,c
  3016   001B36  5C1C               	subwf	??_turnLeft^0,w,c
  3017   001B38  501D               	movf	(??_turnLeft+1)^0,w,c
  3018   001B3A  0A80               	xorlw	128
  3019   001B3C  6E1E               	movwf	(??_turnLeft+2)^0,c
  3020   001B3E  5022               	movf	(turnLeft@cur_power+1)^0,w,c
  3021   001B40  0A80               	xorlw	128
  3022   001B42  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3023   001B44  B0D8               	btfsc	status,0,c
  3024   001B46  EFA7  F00D         	goto	u1571
  3025   001B4A  EFA9  F00D         	goto	u1570
  3026   001B4E                     u1571:
  3027   001B4E  EF55  F00D         	goto	l2557
  3028   001B52                     u1570:
  3029   001B52                     
  3030                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  3031   001B52  0E00               	movlw	0
  3032   001B54  6E20               	movwf	(turnLeft@i+1)^0,c
  3033   001B56  0E00               	movlw	0
  3034   001B58  6E1F               	movwf	turnLeft@i^0,c
  3035   001B5A  EFB9  F00D         	goto	l462
  3036   001B5E                     l2575:
  3037                           
  3038                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3039   001B5E  0E68               	movlw	104
  3040   001B60  6E1C               	movwf	??_turnLeft^0,c
  3041   001B62  0EE4               	movlw	228
  3042   001B64                     u2377:
  3043   001B64  2EE8               	decfsz	wreg,f,c
  3044   001B66  D7FE               	bra	u2377
  3045   001B68  2E1C               	decfsz	??_turnLeft^0,f,c
  3046   001B6A  D7FC               	bra	u2377
  3047   001B6C  D000               	nop2	
  3048   001B6E                     
  3049                           ;dc_motor.c: 200:         }
  3050   001B6E  4A1F               	infsnz	turnLeft@i^0,f,c
  3051   001B70  2A20               	incf	(turnLeft@i+1)^0,f,c
  3052   001B72                     l462:
  3053   001B72  501A               	movf	turnLeft@turnDuration^0,w,c
  3054   001B74  6E1C               	movwf	??_turnLeft^0,c
  3055   001B76  6A1D               	clrf	(??_turnLeft+1)^0,c
  3056   001B78  501C               	movf	??_turnLeft^0,w,c
  3057   001B7A  5C1F               	subwf	turnLeft@i^0,w,c
  3058   001B7C  5020               	movf	(turnLeft@i+1)^0,w,c
  3059   001B7E  0A80               	xorlw	128
  3060   001B80  6E1E               	movwf	(??_turnLeft+2)^0,c
  3061   001B82  501D               	movf	(??_turnLeft+1)^0,w,c
  3062   001B84  0A80               	xorlw	128
  3063   001B86  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3064   001B88  A0D8               	btfss	status,0,c
  3065   001B8A  EFC9  F00D         	goto	u1581
  3066   001B8E  EFCB  F00D         	goto	u1580
  3067   001B92                     u1581:
  3068   001B92  EFAF  F00D         	goto	l2575
  3069   001B96                     u1580:
  3070   001B96                     
  3071                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3072   001B96  C019  F021         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  3073   001B9A  6A22               	clrf	(turnLeft@cur_power+1)^0,c
  3074   001B9C                     l2579:
  3075   001B9C  BE22               	btfsc	(turnLeft@cur_power+1)^0,7,c
  3076   001B9E  EFD5  F00D         	goto	u1590
  3077   001BA2  EFD3  F00D         	goto	u1591
  3078   001BA6                     u1591:
  3079   001BA6  EFD7  F00D         	goto	l2583
  3080   001BAA                     u1590:
  3081   001BAA  EF1C  F00E         	goto	l470
  3082   001BAE                     l2583:
  3083                           
  3084                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  3085   001BAE  5017               	movf	turnLeft@mL^0,w,c
  3086   001BB0  6ED9               	movwf	fsr2l,c
  3087   001BB2  6ADA               	clrf	fsr2h,c
  3088   001BB4  5017               	movf	turnLeft@mL^0,w,c
  3089   001BB6  6EE1               	movwf	fsr1l,c
  3090   001BB8  6AE2               	clrf	fsr1h,c
  3091   001BBA  0E09               	movlw	9
  3092   001BBC  26E1               	addwf	fsr1l,f,c
  3093   001BBE  50E7               	movf	indf1,w,c
  3094   001BC0  2421               	addwf	turnLeft@cur_power^0,w,c
  3095   001BC2  6EDF               	movwf	indf2,c
  3096                           
  3097                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  3098   001BC4  5018               	movf	turnLeft@mR^0,w,c
  3099   001BC6  6ED9               	movwf	fsr2l,c
  3100   001BC8  6ADA               	clrf	fsr2h,c
  3101   001BCA  5018               	movf	turnLeft@mR^0,w,c
  3102   001BCC  6EE1               	movwf	fsr1l,c
  3103   001BCE  6AE2               	clrf	fsr1h,c
  3104   001BD0  0E09               	movlw	9
  3105   001BD2  26E1               	addwf	fsr1l,f,c
  3106   001BD4  50E7               	movf	indf1,w,c
  3107   001BD6  2421               	addwf	turnLeft@cur_power^0,w,c
  3108   001BD8  6EDF               	movwf	indf2,c
  3109   001BDA                     
  3110                           ;dc_motor.c: 205:         setMotorPWM(mL);
  3111   001BDA  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  3112   001BDE  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3113   001BE2                     
  3114                           ;dc_motor.c: 206:         setMotorPWM(mR);
  3115   001BE2  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  3116   001BE6  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3117   001BEA                     
  3118                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  3119   001BEA  0E00               	movlw	0
  3120   001BEC  6E20               	movwf	(turnLeft@i+1)^0,c
  3121   001BEE  0E00               	movlw	0
  3122   001BF0  6E1F               	movwf	turnLeft@i^0,c
  3123   001BF2  EF05  F00E         	goto	l467
  3124   001BF6                     l2591:
  3125                           
  3126                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3127   001BF6  0E68               	movlw	104
  3128   001BF8  6E1C               	movwf	??_turnLeft^0,c
  3129   001BFA  0EE4               	movlw	228
  3130   001BFC                     u2387:
  3131   001BFC  2EE8               	decfsz	wreg,f,c
  3132   001BFE  D7FE               	bra	u2387
  3133   001C00  2E1C               	decfsz	??_turnLeft^0,f,c
  3134   001C02  D7FC               	bra	u2387
  3135   001C04  D000               	nop2	
  3136   001C06                     
  3137                           ;dc_motor.c: 209:         }
  3138   001C06  4A1F               	infsnz	turnLeft@i^0,f,c
  3139   001C08  2A20               	incf	(turnLeft@i+1)^0,f,c
  3140   001C0A                     l467:
  3141   001C0A  501B               	movf	turnLeft@turnRamp^0,w,c
  3142   001C0C  6E1C               	movwf	??_turnLeft^0,c
  3143   001C0E  6A1D               	clrf	(??_turnLeft+1)^0,c
  3144   001C10  501C               	movf	??_turnLeft^0,w,c
  3145   001C12  5C1F               	subwf	turnLeft@i^0,w,c
  3146   001C14  5020               	movf	(turnLeft@i+1)^0,w,c
  3147   001C16  0A80               	xorlw	128
  3148   001C18  6E1E               	movwf	(??_turnLeft+2)^0,c
  3149   001C1A  501D               	movf	(??_turnLeft+1)^0,w,c
  3150   001C1C  0A80               	xorlw	128
  3151   001C1E  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3152   001C20  A0D8               	btfss	status,0,c
  3153   001C22  EF15  F00E         	goto	u1601
  3154   001C26  EF17  F00E         	goto	u1600
  3155   001C2A                     u1601:
  3156   001C2A  EFFB  F00D         	goto	l2591
  3157   001C2E                     u1600:
  3158   001C2E                     
  3159                           ;dc_motor.c: 210:     }
  3160   001C2E  0621               	decf	turnLeft@cur_power^0,f,c
  3161   001C30  A0D8               	btfss	status,0,c
  3162   001C32  0622               	decf	(turnLeft@cur_power+1)^0,f,c
  3163   001C34  EFCE  F00D         	goto	l2579
  3164   001C38                     l470:
  3165   001C38  0012               	return		;funcret
  3166   001C3A                     __end_of_turnLeft:
  3167                           	callstack 0
  3168                           
  3169 ;; *************** function _reverseOneSquare *****************
  3170 ;; Defined at:
  3171 ;;		line 263 in file "dc_motor.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3174 ;;		 -> main@motorL(10), 
  3175 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3176 ;;		 -> main@motorR(10), 
  3177 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3178 ;;  reverseDurat    1   25[COMRAM] unsigned char 
  3179 ;;  straightRamp    1   26[COMRAM] unsigned char 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  cur_power       2   32[COMRAM] int 
  3182 ;;  i               2   30[COMRAM] int 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      void 
  3185 ;; Registers used:
  3186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3192 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3193 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3194 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3195 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3196 ;;Total ram usage:       12 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 5
  3199 ;; This function calls:
  3200 ;;		_setMotorPWM
  3201 ;; This function is called by:
  3202 ;;		_move
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text14
  3207   001552                     __ptext14:
  3208                           	callstack 0
  3209   001552                     _reverseOneSquare:
  3210                           	callstack 24
  3211   001552                     
  3212                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  3213   001552  5017               	movf	reverseOneSquare@mL^0,w,c
  3214   001554  6ED9               	movwf	fsr2l,c
  3215   001556  6ADA               	clrf	fsr2h,c
  3216   001558  0E01               	movlw	1
  3217   00155A  26D9               	addwf	fsr2l,f,c
  3218   00155C  6ADF               	clrf	indf2,c
  3219                           
  3220                           ;dc_motor.c: 266:     mR->direction = 0;
  3221   00155E  5018               	movf	reverseOneSquare@mR^0,w,c
  3222   001560  6ED9               	movwf	fsr2l,c
  3223   001562  6ADA               	clrf	fsr2h,c
  3224   001564  0E01               	movlw	1
  3225   001566  26D9               	addwf	fsr2l,f,c
  3226   001568  6ADF               	clrf	indf2,c
  3227   00156A                     
  3228                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3229   00156A  0E00               	movlw	0
  3230   00156C  6E22               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3231   00156E  0E01               	movlw	1
  3232   001570  6E21               	movwf	reverseOneSquare@cur_power^0,c
  3233   001572  EFFD  F00A         	goto	l2617
  3234   001576                     l2603:
  3235                           
  3236                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  3237   001576  5017               	movf	reverseOneSquare@mL^0,w,c
  3238   001578  6ED9               	movwf	fsr2l,c
  3239   00157A  6ADA               	clrf	fsr2h,c
  3240   00157C  5017               	movf	reverseOneSquare@mL^0,w,c
  3241   00157E  6EE1               	movwf	fsr1l,c
  3242   001580  6AE2               	clrf	fsr1h,c
  3243   001582  0E09               	movlw	9
  3244   001584  26E1               	addwf	fsr1l,f,c
  3245   001586  50E7               	movf	indf1,w,c
  3246   001588  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3247   00158A  6EDF               	movwf	indf2,c
  3248                           
  3249                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  3250   00158C  5018               	movf	reverseOneSquare@mR^0,w,c
  3251   00158E  6ED9               	movwf	fsr2l,c
  3252   001590  6ADA               	clrf	fsr2h,c
  3253   001592  5018               	movf	reverseOneSquare@mR^0,w,c
  3254   001594  6EE1               	movwf	fsr1l,c
  3255   001596  6AE2               	clrf	fsr1h,c
  3256   001598  0E09               	movlw	9
  3257   00159A  26E1               	addwf	fsr1l,f,c
  3258   00159C  50E7               	movf	indf1,w,c
  3259   00159E  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3260   0015A0  6EDF               	movwf	indf2,c
  3261   0015A2                     
  3262                           ;dc_motor.c: 272:         setMotorPWM(mL);
  3263   0015A2  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3264   0015A6  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3265   0015AA                     
  3266                           ;dc_motor.c: 273:         setMotorPWM(mR);
  3267   0015AA  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3268   0015AE  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3269   0015B2                     
  3270                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  3271   0015B2  0E00               	movlw	0
  3272   0015B4  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3273   0015B6  0E00               	movlw	0
  3274   0015B8  6E1F               	movwf	reverseOneSquare@i^0,c
  3275   0015BA  EFE9  F00A         	goto	l501
  3276   0015BE                     l2611:
  3277                           
  3278                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3279   0015BE  0E68               	movlw	104
  3280   0015C0  6E1C               	movwf	??_reverseOneSquare^0,c
  3281   0015C2  0EE4               	movlw	228
  3282   0015C4                     u2397:
  3283   0015C4  2EE8               	decfsz	wreg,f,c
  3284   0015C6  D7FE               	bra	u2397
  3285   0015C8  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3286   0015CA  D7FC               	bra	u2397
  3287   0015CC  D000               	nop2	
  3288   0015CE                     
  3289                           ;dc_motor.c: 276:         }
  3290   0015CE  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3291   0015D0  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3292   0015D2                     l501:
  3293   0015D2  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3294   0015D4  6E1C               	movwf	??_reverseOneSquare^0,c
  3295   0015D6  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3296   0015D8  501C               	movf	??_reverseOneSquare^0,w,c
  3297   0015DA  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3298   0015DC  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3299   0015DE  0A80               	xorlw	128
  3300   0015E0  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3301   0015E2  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3302   0015E4  0A80               	xorlw	128
  3303   0015E6  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3304   0015E8  A0D8               	btfss	status,0,c
  3305   0015EA  EFF9  F00A         	goto	u1611
  3306   0015EE  EFFB  F00A         	goto	u1610
  3307   0015F2                     u1611:
  3308   0015F2  EFDF  F00A         	goto	l2611
  3309   0015F6                     u1610:
  3310   0015F6                     
  3311                           ;dc_motor.c: 277:     }
  3312   0015F6  4A21               	infsnz	reverseOneSquare@cur_power^0,f,c
  3313   0015F8  2A22               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3314   0015FA                     l2617:
  3315   0015FA  5019               	movf	reverseOneSquare@straightSpeed^0,w,c
  3316   0015FC  6E1C               	movwf	??_reverseOneSquare^0,c
  3317   0015FE  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3318   001600  5021               	movf	reverseOneSquare@cur_power^0,w,c
  3319   001602  5C1C               	subwf	??_reverseOneSquare^0,w,c
  3320   001604  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3321   001606  0A80               	xorlw	128
  3322   001608  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3323   00160A  5022               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3324   00160C  0A80               	xorlw	128
  3325   00160E  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3326   001610  B0D8               	btfsc	status,0,c
  3327   001612  EF0D  F00B         	goto	u1621
  3328   001616  EF0F  F00B         	goto	u1620
  3329   00161A                     u1621:
  3330   00161A  EFBB  F00A         	goto	l2603
  3331   00161E                     u1620:
  3332   00161E                     
  3333                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  3334   00161E  0E00               	movlw	0
  3335   001620  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3336   001622  0E00               	movlw	0
  3337   001624  6E1F               	movwf	reverseOneSquare@i^0,c
  3338   001626  EF1F  F00B         	goto	l505
  3339   00162A                     l2621:
  3340                           
  3341                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3342   00162A  0E68               	movlw	104
  3343   00162C  6E1C               	movwf	??_reverseOneSquare^0,c
  3344   00162E  0EE4               	movlw	228
  3345   001630                     u2407:
  3346   001630  2EE8               	decfsz	wreg,f,c
  3347   001632  D7FE               	bra	u2407
  3348   001634  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3349   001636  D7FC               	bra	u2407
  3350   001638  D000               	nop2	
  3351   00163A                     
  3352                           ;dc_motor.c: 281:         }
  3353   00163A  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3354   00163C  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3355   00163E                     l505:
  3356   00163E  501A               	movf	reverseOneSquare@reverseDuration^0,w,c
  3357   001640  6E1C               	movwf	??_reverseOneSquare^0,c
  3358   001642  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3359   001644  501C               	movf	??_reverseOneSquare^0,w,c
  3360   001646  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3361   001648  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3362   00164A  0A80               	xorlw	128
  3363   00164C  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3364   00164E  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3365   001650  0A80               	xorlw	128
  3366   001652  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3367   001654  A0D8               	btfss	status,0,c
  3368   001656  EF2F  F00B         	goto	u1631
  3369   00165A  EF31  F00B         	goto	u1630
  3370   00165E                     u1631:
  3371   00165E  EF15  F00B         	goto	l2621
  3372   001662                     u1630:
  3373   001662                     
  3374                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3375   001662  C019  F021         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  3376   001666  6A22               	clrf	(reverseOneSquare@cur_power+1)^0,c
  3377   001668                     l2625:
  3378   001668  BE22               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  3379   00166A  EF3B  F00B         	goto	u1640
  3380   00166E  EF39  F00B         	goto	u1641
  3381   001672                     u1641:
  3382   001672  EF3D  F00B         	goto	l2629
  3383   001676                     u1640:
  3384   001676  EF82  F00B         	goto	l2645
  3385   00167A                     l2629:
  3386                           
  3387                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  3388   00167A  5017               	movf	reverseOneSquare@mL^0,w,c
  3389   00167C  6ED9               	movwf	fsr2l,c
  3390   00167E  6ADA               	clrf	fsr2h,c
  3391   001680  5017               	movf	reverseOneSquare@mL^0,w,c
  3392   001682  6EE1               	movwf	fsr1l,c
  3393   001684  6AE2               	clrf	fsr1h,c
  3394   001686  0E09               	movlw	9
  3395   001688  26E1               	addwf	fsr1l,f,c
  3396   00168A  50E7               	movf	indf1,w,c
  3397   00168C  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3398   00168E  6EDF               	movwf	indf2,c
  3399                           
  3400                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  3401   001690  5018               	movf	reverseOneSquare@mR^0,w,c
  3402   001692  6ED9               	movwf	fsr2l,c
  3403   001694  6ADA               	clrf	fsr2h,c
  3404   001696  5018               	movf	reverseOneSquare@mR^0,w,c
  3405   001698  6EE1               	movwf	fsr1l,c
  3406   00169A  6AE2               	clrf	fsr1h,c
  3407   00169C  0E09               	movlw	9
  3408   00169E  26E1               	addwf	fsr1l,f,c
  3409   0016A0  50E7               	movf	indf1,w,c
  3410   0016A2  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3411   0016A4  6EDF               	movwf	indf2,c
  3412   0016A6                     
  3413                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3414   0016A6  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3415   0016AA  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3416   0016AE                     
  3417                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3418   0016AE  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3419   0016B2  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3420   0016B6                     
  3421                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  3422   0016B6  0E00               	movlw	0
  3423   0016B8  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3424   0016BA  0E00               	movlw	0
  3425   0016BC  6E1F               	movwf	reverseOneSquare@i^0,c
  3426   0016BE  EF6B  F00B         	goto	l510
  3427   0016C2                     l2637:
  3428                           
  3429                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3430   0016C2  0E68               	movlw	104
  3431   0016C4  6E1C               	movwf	??_reverseOneSquare^0,c
  3432   0016C6  0EE4               	movlw	228
  3433   0016C8                     u2417:
  3434   0016C8  2EE8               	decfsz	wreg,f,c
  3435   0016CA  D7FE               	bra	u2417
  3436   0016CC  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3437   0016CE  D7FC               	bra	u2417
  3438   0016D0  D000               	nop2	
  3439   0016D2                     
  3440                           ;dc_motor.c: 290:         }
  3441   0016D2  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3442   0016D4  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3443   0016D6                     l510:
  3444   0016D6  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3445   0016D8  6E1C               	movwf	??_reverseOneSquare^0,c
  3446   0016DA  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3447   0016DC  501C               	movf	??_reverseOneSquare^0,w,c
  3448   0016DE  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3449   0016E0  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3450   0016E2  0A80               	xorlw	128
  3451   0016E4  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3452   0016E6  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3453   0016E8  0A80               	xorlw	128
  3454   0016EA  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3455   0016EC  A0D8               	btfss	status,0,c
  3456   0016EE  EF7B  F00B         	goto	u1651
  3457   0016F2  EF7D  F00B         	goto	u1650
  3458   0016F6                     u1651:
  3459   0016F6  EF61  F00B         	goto	l2637
  3460   0016FA                     u1650:
  3461   0016FA                     
  3462                           ;dc_motor.c: 291:     }
  3463   0016FA  0621               	decf	reverseOneSquare@cur_power^0,f,c
  3464   0016FC  A0D8               	btfss	status,0,c
  3465   0016FE  0622               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  3466   001700  EF34  F00B         	goto	l2625
  3467   001704                     l2645:
  3468                           
  3469                           ;dc_motor.c: 292:     mL->power = 0;
  3470   001704  5017               	movf	reverseOneSquare@mL^0,w,c
  3471   001706  6ED9               	movwf	fsr2l,c
  3472   001708  6ADA               	clrf	fsr2h,c
  3473   00170A  6ADF               	clrf	indf2,c
  3474                           
  3475                           ;dc_motor.c: 293:     mR->power = 0;
  3476   00170C  5018               	movf	reverseOneSquare@mR^0,w,c
  3477   00170E  6ED9               	movwf	fsr2l,c
  3478   001710  6ADA               	clrf	fsr2h,c
  3479   001712  6ADF               	clrf	indf2,c
  3480   001714  0012               	return		;funcret
  3481   001716                     __end_of_reverseOneSquare:
  3482                           	callstack 0
  3483                           
  3484 ;; *************** function _fullSpeedAhead *****************
  3485 ;; Defined at:
  3486 ;;		line 246 in file "dc_motor.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3489 ;;		 -> main@motorL(10), 
  3490 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3491 ;;		 -> main@motorR(10), 
  3492 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3493 ;;  straightRamp    1   25[COMRAM] unsigned char 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  cur_power       2   31[COMRAM] int 
  3496 ;;  i               2   29[COMRAM] int 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3507 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3508 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3509 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;Total ram usage:       11 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 5
  3513 ;; This function calls:
  3514 ;;		_setMotorPWM
  3515 ;; This function is called by:
  3516 ;;		_move
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text15
  3521   001FDC                     __ptext15:
  3522                           	callstack 0
  3523   001FDC                     _fullSpeedAhead:
  3524                           	callstack 24
  3525   001FDC                     
  3526                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  3527   001FDC  5017               	movf	fullSpeedAhead@mL^0,w,c
  3528   001FDE  6ED9               	movwf	fsr2l,c
  3529   001FE0  6ADA               	clrf	fsr2h,c
  3530   001FE2  0E01               	movlw	1
  3531   001FE4  26D9               	addwf	fsr2l,f,c
  3532   001FE6  0E01               	movlw	1
  3533   001FE8  6EDF               	movwf	indf2,c
  3534                           
  3535                           ;dc_motor.c: 249:     mR->direction = 1;
  3536   001FEA  5018               	movf	fullSpeedAhead@mR^0,w,c
  3537   001FEC  6ED9               	movwf	fsr2l,c
  3538   001FEE  6ADA               	clrf	fsr2h,c
  3539   001FF0  0E01               	movlw	1
  3540   001FF2  26D9               	addwf	fsr2l,f,c
  3541   001FF4  0E01               	movlw	1
  3542   001FF6  6EDF               	movwf	indf2,c
  3543   001FF8                     
  3544                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3545   001FF8  0E00               	movlw	0
  3546   001FFA  6E21               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  3547   001FFC  0E01               	movlw	1
  3548   001FFE  6E20               	movwf	fullSpeedAhead@cur_power^0,c
  3549   002000  EF44  F010         	goto	l2551
  3550   002004                     l2537:
  3551                           
  3552                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  3553   002004  5017               	movf	fullSpeedAhead@mL^0,w,c
  3554   002006  6ED9               	movwf	fsr2l,c
  3555   002008  6ADA               	clrf	fsr2h,c
  3556   00200A  5017               	movf	fullSpeedAhead@mL^0,w,c
  3557   00200C  6EE1               	movwf	fsr1l,c
  3558   00200E  6AE2               	clrf	fsr1h,c
  3559   002010  0E09               	movlw	9
  3560   002012  26E1               	addwf	fsr1l,f,c
  3561   002014  50E7               	movf	indf1,w,c
  3562   002016  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3563   002018  6EDF               	movwf	indf2,c
  3564                           
  3565                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  3566   00201A  5018               	movf	fullSpeedAhead@mR^0,w,c
  3567   00201C  6ED9               	movwf	fsr2l,c
  3568   00201E  6ADA               	clrf	fsr2h,c
  3569   002020  5018               	movf	fullSpeedAhead@mR^0,w,c
  3570   002022  6EE1               	movwf	fsr1l,c
  3571   002024  6AE2               	clrf	fsr1h,c
  3572   002026  0E09               	movlw	9
  3573   002028  26E1               	addwf	fsr1l,f,c
  3574   00202A  50E7               	movf	indf1,w,c
  3575   00202C  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3576   00202E  6EDF               	movwf	indf2,c
  3577   002030                     
  3578                           ;dc_motor.c: 255:         setMotorPWM(mL);
  3579   002030  C017  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3580   002034  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3581   002038                     
  3582                           ;dc_motor.c: 256:         setMotorPWM(mR);
  3583   002038  C018  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3584   00203C  EC1D  F00E         	call	_setMotorPWM	;wreg free
  3585   002040                     
  3586                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  3587   002040  0E00               	movlw	0
  3588   002042  6E1F               	movwf	(fullSpeedAhead@i+1)^0,c
  3589   002044  0E00               	movlw	0
  3590   002046  6E1E               	movwf	fullSpeedAhead@i^0,c
  3591   002048  EF30  F010         	goto	l492
  3592   00204C                     l2545:
  3593                           
  3594                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3595   00204C  0E68               	movlw	104
  3596   00204E  6E1B               	movwf	??_fullSpeedAhead^0,c
  3597   002050  0EE4               	movlw	228
  3598   002052                     u2427:
  3599   002052  2EE8               	decfsz	wreg,f,c
  3600   002054  D7FE               	bra	u2427
  3601   002056  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  3602   002058  D7FC               	bra	u2427
  3603   00205A  D000               	nop2	
  3604   00205C                     
  3605                           ;dc_motor.c: 259:         }
  3606   00205C  4A1E               	infsnz	fullSpeedAhead@i^0,f,c
  3607   00205E  2A1F               	incf	(fullSpeedAhead@i+1)^0,f,c
  3608   002060                     l492:
  3609   002060  501A               	movf	fullSpeedAhead@straightRamp^0,w,c
  3610   002062  6E1B               	movwf	??_fullSpeedAhead^0,c
  3611   002064  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3612   002066  501B               	movf	??_fullSpeedAhead^0,w,c
  3613   002068  5C1E               	subwf	fullSpeedAhead@i^0,w,c
  3614   00206A  501F               	movf	(fullSpeedAhead@i+1)^0,w,c
  3615   00206C  0A80               	xorlw	128
  3616   00206E  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3617   002070  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3618   002072  0A80               	xorlw	128
  3619   002074  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3620   002076  A0D8               	btfss	status,0,c
  3621   002078  EF40  F010         	goto	u1541
  3622   00207C  EF42  F010         	goto	u1540
  3623   002080                     u1541:
  3624   002080  EF26  F010         	goto	l2545
  3625   002084                     u1540:
  3626   002084                     
  3627                           ;dc_motor.c: 260:     }
  3628   002084  4A20               	infsnz	fullSpeedAhead@cur_power^0,f,c
  3629   002086  2A21               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  3630   002088                     l2551:
  3631   002088  5019               	movf	fullSpeedAhead@straightSpeed^0,w,c
  3632   00208A  6E1B               	movwf	??_fullSpeedAhead^0,c
  3633   00208C  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3634   00208E  5020               	movf	fullSpeedAhead@cur_power^0,w,c
  3635   002090  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  3636   002092  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3637   002094  0A80               	xorlw	128
  3638   002096  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3639   002098  5021               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  3640   00209A  0A80               	xorlw	128
  3641   00209C  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3642   00209E  B0D8               	btfsc	status,0,c
  3643   0020A0  EF54  F010         	goto	u1551
  3644   0020A4  EF56  F010         	goto	u1550
  3645   0020A8                     u1551:
  3646   0020A8  EF02  F010         	goto	l2537
  3647   0020AC                     u1550:
  3648   0020AC  0012               	return		;funcret
  3649   0020AE                     __end_of_fullSpeedAhead:
  3650                           	callstack 0
  3651                           
  3652 ;; *************** function _setMotorPWM *****************
  3653 ;; Defined at:
  3654 ;;		line 65 in file "dc_motor.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  m               1   17[COMRAM] PTR struct DC_motor
  3657 ;;		 -> main@motorR(10), main@motorL(10), 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  negDuty         1   21[COMRAM] unsigned char 
  3660 ;;  posDuty         1   20[COMRAM] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3670 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3673 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;Total ram usage:        5 bytes
  3675 ;; Hardware stack levels used: 1
  3676 ;; Hardware stack levels required when called: 4
  3677 ;; This function calls:
  3678 ;;		___lwdiv
  3679 ;;		___wmul
  3680 ;; This function is called by:
  3681 ;;		_turnLeft
  3682 ;;		_turnRight
  3683 ;;		_fullSpeedAhead
  3684 ;;		_reverseOneSquare
  3685 ;;		_stop
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text16
  3690   001C3A                     __ptext16:
  3691                           	callstack 0
  3692   001C3A                     _setMotorPWM:
  3693                           	callstack 24
  3694   001C3A                     
  3695                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  3696   001C3A  5012               	movf	setMotorPWM@m^0,w,c
  3697   001C3C  6ED9               	movwf	fsr2l,c
  3698   001C3E  6ADA               	clrf	fsr2h,c
  3699   001C40  0E02               	movlw	2
  3700   001C42  26D9               	addwf	fsr2l,f,c
  3701   001C44  50DF               	movf	indf2,w,c
  3702   001C46  B4D8               	btfsc	status,2,c
  3703   001C48  EF28  F00E         	goto	u1311
  3704   001C4C  EF2A  F00E         	goto	u1310
  3705   001C50                     u1311:
  3706   001C50  EF5A  F00E         	goto	l2367
  3707   001C54                     u1310:
  3708   001C54                     
  3709                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  3710   001C54  5012               	movf	setMotorPWM@m^0,w,c
  3711   001C56  6ED9               	movwf	fsr2l,c
  3712   001C58  6ADA               	clrf	fsr2h,c
  3713   001C5A  50DF               	movf	indf2,w,c
  3714   001C5C  6E13               	movwf	??_setMotorPWM^0,c
  3715   001C5E  5013               	movf	??_setMotorPWM^0,w,c
  3716   001C60  6E05               	movwf	___wmul@multiplier^0,c
  3717   001C62  6A06               	clrf	(___wmul@multiplier+1)^0,c
  3718   001C64  5012               	movf	setMotorPWM@m^0,w,c
  3719   001C66  6ED9               	movwf	fsr2l,c
  3720   001C68  6ADA               	clrf	fsr2h,c
  3721   001C6A  0E03               	movlw	3
  3722   001C6C  26D9               	addwf	fsr2l,f,c
  3723   001C6E  CFDE F007          	movff	postinc2,___wmul@multiplicand
  3724   001C72  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  3725   001C76  ECF2  F013         	call	___wmul	;wreg free
  3726   001C7A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3727   001C7E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3728   001C82  0E00               	movlw	0
  3729   001C84  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  3730   001C86  0E64               	movlw	100
  3731   001C88  6E0D               	movwf	___lwdiv@divisor^0,c
  3732   001C8A  ECAE  F011         	call	___lwdiv	;wreg free
  3733   001C8E  5012               	movf	setMotorPWM@m^0,w,c
  3734   001C90  6ED9               	movwf	fsr2l,c
  3735   001C92  6ADA               	clrf	fsr2h,c
  3736   001C94  0E03               	movlw	3
  3737   001C96  26D9               	addwf	fsr2l,f,c
  3738   001C98  50DF               	movf	indf2,w,c
  3739   001C9A  6E14               	movwf	(??_setMotorPWM+1)^0,c
  3740   001C9C  500B               	movf	?___lwdiv^0,w,c
  3741   001C9E  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  3742   001CA0  6E15               	movwf	setMotorPWM@posDuty^0,c
  3743   001CA2                     
  3744                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  3745   001CA2  5012               	movf	setMotorPWM@m^0,w,c
  3746   001CA4  6ED9               	movwf	fsr2l,c
  3747   001CA6  6ADA               	clrf	fsr2h,c
  3748   001CA8  0E03               	movlw	3
  3749   001CAA  26D9               	addwf	fsr2l,f,c
  3750   001CAC  50DF               	movf	indf2,w,c
  3751   001CAE  6E16               	movwf	setMotorPWM@negDuty^0,c
  3752                           
  3753                           ;dc_motor.c: 72:     }
  3754   001CB0  EF7B  F00E         	goto	l2371
  3755   001CB4                     l2367:
  3756                           
  3757                           ;dc_motor.c: 74:         posDuty=0;
  3758   001CB4  0E00               	movlw	0
  3759   001CB6  6E15               	movwf	setMotorPWM@posDuty^0,c
  3760   001CB8                     
  3761                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3762   001CB8  5012               	movf	setMotorPWM@m^0,w,c
  3763   001CBA  6ED9               	movwf	fsr2l,c
  3764   001CBC  6ADA               	clrf	fsr2h,c
  3765   001CBE  50DF               	movf	indf2,w,c
  3766   001CC0  6E13               	movwf	??_setMotorPWM^0,c
  3767   001CC2  5013               	movf	??_setMotorPWM^0,w,c
  3768   001CC4  6E05               	movwf	___wmul@multiplier^0,c
  3769   001CC6  6A06               	clrf	(___wmul@multiplier+1)^0,c
  3770   001CC8  5012               	movf	setMotorPWM@m^0,w,c
  3771   001CCA  6ED9               	movwf	fsr2l,c
  3772   001CCC  6ADA               	clrf	fsr2h,c
  3773   001CCE  0E03               	movlw	3
  3774   001CD0  26D9               	addwf	fsr2l,f,c
  3775   001CD2  CFDE F007          	movff	postinc2,___wmul@multiplicand
  3776   001CD6  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  3777   001CDA  ECF2  F013         	call	___wmul	;wreg free
  3778   001CDE  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3779   001CE2  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3780   001CE6  0E00               	movlw	0
  3781   001CE8  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  3782   001CEA  0E64               	movlw	100
  3783   001CEC  6E0D               	movwf	___lwdiv@divisor^0,c
  3784   001CEE  ECAE  F011         	call	___lwdiv	;wreg free
  3785   001CF2  500B               	movf	?___lwdiv^0,w,c
  3786   001CF4  6E16               	movwf	setMotorPWM@negDuty^0,c
  3787   001CF6                     l2371:
  3788                           
  3789                           ;dc_motor.c: 78:     if (m->direction) {
  3790   001CF6  5012               	movf	setMotorPWM@m^0,w,c
  3791   001CF8  6ED9               	movwf	fsr2l,c
  3792   001CFA  6ADA               	clrf	fsr2h,c
  3793   001CFC  0E01               	movlw	1
  3794   001CFE  26D9               	addwf	fsr2l,f,c
  3795   001D00  50DF               	movf	indf2,w,c
  3796   001D02  B4D8               	btfsc	status,2,c
  3797   001D04  EF86  F00E         	goto	u1321
  3798   001D08  EF88  F00E         	goto	u1320
  3799   001D0C                     u1321:
  3800   001D0C  EFA8  F00E         	goto	l2375
  3801   001D10                     u1320:
  3802   001D10                     
  3803                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  3804   001D10  5012               	movf	setMotorPWM@m^0,w,c
  3805   001D12  6ED9               	movwf	fsr2l,c
  3806   001D14  6ADA               	clrf	fsr2h,c
  3807   001D16  0E05               	movlw	5
  3808   001D18  26D9               	addwf	fsr2l,f,c
  3809   001D1A  CFDE F013          	movff	postinc2,??_setMotorPWM
  3810   001D1E  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  3811   001D22  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  3812   001D26  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3813   001D2A  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  3814                           
  3815                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  3816   001D2E  5012               	movf	setMotorPWM@m^0,w,c
  3817   001D30  6ED9               	movwf	fsr2l,c
  3818   001D32  6ADA               	clrf	fsr2h,c
  3819   001D34  0E07               	movlw	7
  3820   001D36  26D9               	addwf	fsr2l,f,c
  3821   001D38  CFDE F013          	movff	postinc2,??_setMotorPWM
  3822   001D3C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  3823   001D40  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  3824   001D44  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3825   001D48  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  3826                           
  3827                           ;dc_motor.c: 81:     } else {
  3828   001D4C  EFC6  F00E         	goto	l427
  3829   001D50                     l2375:
  3830                           
  3831                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  3832   001D50  5012               	movf	setMotorPWM@m^0,w,c
  3833   001D52  6ED9               	movwf	fsr2l,c
  3834   001D54  6ADA               	clrf	fsr2h,c
  3835   001D56  0E05               	movlw	5
  3836   001D58  26D9               	addwf	fsr2l,f,c
  3837   001D5A  CFDE F013          	movff	postinc2,??_setMotorPWM
  3838   001D5E  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  3839   001D62  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  3840   001D66  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3841   001D6A  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  3842                           
  3843                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  3844   001D6E  5012               	movf	setMotorPWM@m^0,w,c
  3845   001D70  6ED9               	movwf	fsr2l,c
  3846   001D72  6ADA               	clrf	fsr2h,c
  3847   001D74  0E07               	movlw	7
  3848   001D76  26D9               	addwf	fsr2l,f,c
  3849   001D78  CFDE F013          	movff	postinc2,??_setMotorPWM
  3850   001D7C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  3851   001D80  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  3852   001D84  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3853   001D88  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  3854   001D8C                     l427:
  3855   001D8C  0012               	return		;funcret
  3856   001D8E                     __end_of_setMotorPWM:
  3857                           	callstack 0
  3858                           
  3859 ;; *************** function ___wmul *****************
  3860 ;; Defined at:
  3861 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  multiplier      2    4[COMRAM] unsigned int 
  3864 ;;  multiplicand    2    6[COMRAM] unsigned int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  product         2    8[COMRAM] unsigned int 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  2    4[COMRAM] unsigned int 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, prodl, prodh
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3876 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3880 ;;Total ram usage:        6 bytes
  3881 ;; Hardware stack levels used: 1
  3882 ;; Hardware stack levels required when called: 3
  3883 ;; This function calls:
  3884 ;;		Nothing
  3885 ;; This function is called by:
  3886 ;;		_setMotorPWM
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text17
  3891   0027E4                     __ptext17:
  3892                           	callstack 0
  3893   0027E4                     ___wmul:
  3894                           	callstack 24
  3895   0027E4  5005               	movf	___wmul@multiplier^0,w,c
  3896   0027E6  0207               	mulwf	___wmul@multiplicand^0,c
  3897   0027E8  CFF3 F009          	movff	prodl,___wmul@product
  3898   0027EC  CFF4 F00A          	movff	prodh,___wmul@product+1
  3899   0027F0  5005               	movf	___wmul@multiplier^0,w,c
  3900   0027F2  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  3901   0027F4  50F3               	movf	243,w,c
  3902   0027F6  260A               	addwf	(___wmul@product+1)^0,f,c
  3903   0027F8  5006               	movf	(___wmul@multiplier+1)^0,w,c
  3904   0027FA  0207               	mulwf	___wmul@multiplicand^0,c
  3905   0027FC  50F3               	movf	243,w,c
  3906   0027FE  260A               	addwf	(___wmul@product+1)^0,f,c
  3907   002800  C009  F005         	movff	___wmul@product,?___wmul
  3908   002804  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  3909   002808  0012               	return		;funcret
  3910   00280A                     __end_of___wmul:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function ___lwdiv *****************
  3914 ;; Defined at:
  3915 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  dividend        2   10[COMRAM] unsigned int 
  3918 ;;  divisor         2   12[COMRAM] unsigned int 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  quotient        2   14[COMRAM] unsigned int 
  3921 ;;  counter         1   16[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  2   10[COMRAM] unsigned int 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;Total ram usage:        7 bytes
  3936 ;; Hardware stack levels used: 1
  3937 ;; Hardware stack levels required when called: 3
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_setMotorPWM
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text18
  3946   00235C                     __ptext18:
  3947                           	callstack 0
  3948   00235C                     ___lwdiv:
  3949                           	callstack 24
  3950   00235C  0E00               	movlw	0
  3951   00235E  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  3952   002360  0E00               	movlw	0
  3953   002362  6E0F               	movwf	___lwdiv@quotient^0,c
  3954   002364  500D               	movf	___lwdiv@divisor^0,w,c
  3955   002366  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3956   002368  B4D8               	btfsc	status,2,c
  3957   00236A  EFB9  F011         	goto	u1231
  3958   00236E  EFBB  F011         	goto	u1230
  3959   002372                     u1231:
  3960   002372  EFE3  F011         	goto	l1022
  3961   002376                     u1230:
  3962   002376  0E01               	movlw	1
  3963   002378  6E11               	movwf	___lwdiv@counter^0,c
  3964   00237A  EFC3  F011         	goto	l2317
  3965   00237E                     l2315:
  3966   00237E  90D8               	bcf	status,0,c
  3967   002380  360D               	rlcf	___lwdiv@divisor^0,f,c
  3968   002382  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3969   002384  2A11               	incf	___lwdiv@counter^0,f,c
  3970   002386                     l2317:
  3971   002386  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  3972   002388  EFC8  F011         	goto	u1241
  3973   00238C  EFCA  F011         	goto	u1240
  3974   002390                     u1241:
  3975   002390  EFBF  F011         	goto	l2315
  3976   002394                     u1240:
  3977   002394                     l2319:
  3978   002394  90D8               	bcf	status,0,c
  3979   002396  360F               	rlcf	___lwdiv@quotient^0,f,c
  3980   002398  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3981   00239A  500D               	movf	___lwdiv@divisor^0,w,c
  3982   00239C  5C0B               	subwf	___lwdiv@dividend^0,w,c
  3983   00239E  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3984   0023A0  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3985   0023A2  A0D8               	btfss	status,0,c
  3986   0023A4  EFD6  F011         	goto	u1251
  3987   0023A8  EFD8  F011         	goto	u1250
  3988   0023AC                     u1251:
  3989   0023AC  EFDD  F011         	goto	l2327
  3990   0023B0                     u1250:
  3991   0023B0  500D               	movf	___lwdiv@divisor^0,w,c
  3992   0023B2  5E0B               	subwf	___lwdiv@dividend^0,f,c
  3993   0023B4  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3994   0023B6  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3995   0023B8  800F               	bsf	___lwdiv@quotient^0,0,c
  3996   0023BA                     l2327:
  3997   0023BA  90D8               	bcf	status,0,c
  3998   0023BC  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3999   0023BE  320D               	rrcf	___lwdiv@divisor^0,f,c
  4000   0023C0  2E11               	decfsz	___lwdiv@counter^0,f,c
  4001   0023C2  EFCA  F011         	goto	l2319
  4002   0023C6                     l1022:
  4003   0023C6  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4004   0023CA  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4005   0023CE  0012               	return		;funcret
  4006   0023D0                     __end_of___lwdiv:
  4007                           	callstack 0
  4008                           
  4009 ;; *************** function _initUSART4 *****************
  4010 ;; Defined at:
  4011 ;;		line 4 in file "serial.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used: 1
  4031 ;; Hardware stack levels required when called: 3
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text19
  4040   002874                     __ptext19:
  4041                           	callstack 0
  4042   002874                     _initUSART4:
  4043                           	callstack 27
  4044   002874                     
  4045                           ;serial.c: 7:     RC0PPS = 0x12;
  4046   002874  0E12               	movlw	18
  4047   002876  010E               	movlb	14	; () banked
  4048   002878  6F62               	movwf	98,b	;volatile
  4049                           
  4050                           ;serial.c: 8:     RX4PPS = 0x11;
  4051   00287A  0E11               	movlw	17
  4052   00287C  6F15               	movwf	21,b	;volatile
  4053   00287E                     
  4054                           ; BSR set to: 14
  4055                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  4056   00287E  97E9               	bcf	233,3,b	;volatile
  4057   002880                     
  4058                           ; BSR set to: 14
  4059                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  4060   002880  95E8               	bcf	232,2,b	;volatile
  4061                           
  4062                           ;serial.c: 13:     SP4BRGL = 51;
  4063   002882  0E33               	movlw	51
  4064   002884  6FE5               	movwf	229,b	;volatile
  4065                           
  4066                           ;serial.c: 14:     SP4BRGH = 0;
  4067   002886  0E00               	movlw	0
  4068   002888  6FE6               	movwf	230,b	;volatile
  4069   00288A                     
  4070                           ; BSR set to: 14
  4071                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  4072   00288A  89E7               	bsf	231,4,b	;volatile
  4073   00288C                     
  4074                           ; BSR set to: 14
  4075                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  4076   00288C  8BE8               	bsf	232,5,b	;volatile
  4077   00288E                     
  4078                           ; BSR set to: 14
  4079                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  4080   00288E  8FE7               	bsf	231,7,b	;volatile
  4081   002890                     
  4082                           ; BSR set to: 14
  4083   002890  0012               	return		;funcret
  4084   002892                     __end_of_initUSART4:
  4085                           	callstack 0
  4086                           
  4087 ;; *************** function _initDCmotorsPWM *****************
  4088 ;; Defined at:
  4089 ;;		line 5 in file "dc_motor.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;Total ram usage:        2 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 3
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_main
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text20
  4118   0022CC                     __ptext20:
  4119                           	callstack 0
  4120   0022CC                     _initDCmotorsPWM:
  4121                           	callstack 27
  4122   0022CC                     
  4123                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  4124   0022CC  947D               	bcf	125,2,c	;volatile
  4125                           
  4126                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  4127   0022CE  9485               	bcf	133,2,c	;volatile
  4128                           
  4129                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  4130   0022D0  987D               	bcf	125,4,c	;volatile
  4131                           
  4132                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  4133   0022D2  9885               	bcf	133,4,c	;volatile
  4134                           
  4135                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  4136   0022D4  9E7B               	bcf	123,7,c	;volatile
  4137                           
  4138                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  4139   0022D6  9E83               	bcf	131,7,c	;volatile
  4140                           
  4141                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  4142   0022D8  9C7F               	bcf	127,6,c	;volatile
  4143                           
  4144                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  4145   0022DA  9C87               	bcf	135,6,c	;volatile
  4146   0022DC                     
  4147                           ;dc_motor.c: 18:     RE2PPS=0x05;
  4148   0022DC  0E05               	movlw	5
  4149   0022DE  010E               	movlb	14	; () banked
  4150   0022E0  6F74               	movwf	116,b	;volatile
  4151                           
  4152                           ;dc_motor.c: 19:     RE4PPS=0x06;
  4153   0022E2  0E06               	movlw	6
  4154   0022E4  6F76               	movwf	118,b	;volatile
  4155                           
  4156                           ;dc_motor.c: 20:     RC7PPS=0x07;
  4157   0022E6  0E07               	movlw	7
  4158   0022E8  6F69               	movwf	105,b	;volatile
  4159                           
  4160                           ;dc_motor.c: 21:     RG6PPS=0x08;
  4161   0022EA  0E08               	movlw	8
  4162   0022EC  6F88               	movwf	136,b	;volatile
  4163                           
  4164                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  4165   0022EE  50BD               	movf	189,w,c	;volatile
  4166   0022F0  0B8F               	andlw	-113
  4167   0022F2  0930               	iorlw	48
  4168   0022F4  6EBD               	movwf	189,c	;volatile
  4169                           
  4170                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  4171   0022F6  0EE0               	movlw	-32
  4172   0022F8  16BE               	andwf	190,f,c	;volatile
  4173                           
  4174                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  4175   0022FA  50BF               	movf	191,w,c	;volatile
  4176   0022FC  0BF0               	andlw	-16
  4177   0022FE  0901               	iorlw	1
  4178   002300  6EBF               	movwf	191,c	;volatile
  4179   002302                     
  4180                           ; BSR set to: 14
  4181                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  4182   002302  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4183   002306                     
  4184                           ; BSR set to: 14
  4185                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  4186   002306  8EBD               	bsf	189,7,c	;volatile
  4187                           
  4188                           ;dc_motor.c: 35:     CCPR1H=0;
  4189   002308  0E00               	movlw	0
  4190   00230A  6EAA               	movwf	170,c	;volatile
  4191                           
  4192                           ;dc_motor.c: 36:     CCPR2H=0;
  4193   00230C  0E00               	movlw	0
  4194   00230E  6EA6               	movwf	166,c	;volatile
  4195                           
  4196                           ;dc_motor.c: 37:     CCPR3H=0;
  4197   002310  0E00               	movlw	0
  4198   002312  010F               	movlb	15	; () banked
  4199   002314  6F25               	movwf	37,b	;volatile
  4200                           
  4201                           ;dc_motor.c: 38:     CCPR4H=0;
  4202   002316  0E00               	movlw	0
  4203   002318  6F21               	movwf	33,b	;volatile
  4204                           
  4205                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  4206   00231A  0EFC               	movlw	-4
  4207   00231C  16AD               	andwf	173,f,c	;volatile
  4208                           
  4209                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  4210   00231E  0EF3               	movlw	-13
  4211   002320  16AD               	andwf	173,f,c	;volatile
  4212                           
  4213                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  4214   002322  0ECF               	movlw	-49
  4215   002324  16AD               	andwf	173,f,c	;volatile
  4216                           
  4217                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  4218   002326  0E3F               	movlw	-193
  4219   002328  16AD               	andwf	173,f,c	;volatile
  4220   00232A                     
  4221                           ; BSR set to: 15
  4222                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  4223   00232A  88AB               	bsf	171,4,c	;volatile
  4224                           
  4225                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  4226   00232C  50AB               	movf	171,w,c	;volatile
  4227   00232E  0BF0               	andlw	-16
  4228   002330  090C               	iorlw	12
  4229   002332  6EAB               	movwf	171,c	;volatile
  4230   002334                     
  4231                           ; BSR set to: 15
  4232                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  4233   002334  8EAB               	bsf	171,7,c	;volatile
  4234   002336                     
  4235                           ; BSR set to: 15
  4236                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  4237   002336  88A7               	bsf	167,4,c	;volatile
  4238                           
  4239                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  4240   002338  50A7               	movf	167,w,c	;volatile
  4241   00233A  0BF0               	andlw	-16
  4242   00233C  090C               	iorlw	12
  4243   00233E  6EA7               	movwf	167,c	;volatile
  4244   002340                     
  4245                           ; BSR set to: 15
  4246                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  4247   002340  8EA7               	bsf	167,7,c	;volatile
  4248   002342                     
  4249                           ; BSR set to: 15
  4250                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  4251   002342  8926               	bsf	38,4,b	;volatile
  4252                           
  4253                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  4254   002344  5126               	movf	38,w,b	;volatile
  4255   002346  0BF0               	andlw	-16
  4256   002348  090C               	iorlw	12
  4257   00234A  6F26               	movwf	38,b	;volatile
  4258   00234C                     
  4259                           ; BSR set to: 15
  4260                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  4261   00234C  8F26               	bsf	38,7,b	;volatile
  4262   00234E                     
  4263                           ; BSR set to: 15
  4264                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  4265   00234E  8922               	bsf	34,4,b	;volatile
  4266                           
  4267                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  4268   002350  5122               	movf	34,w,b	;volatile
  4269   002352  0BF0               	andlw	-16
  4270   002354  090C               	iorlw	12
  4271   002356  6F22               	movwf	34,b	;volatile
  4272   002358                     
  4273                           ; BSR set to: 15
  4274                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  4275   002358  8F22               	bsf	34,7,b	;volatile
  4276   00235A                     
  4277                           ; BSR set to: 15
  4278   00235A  0012               	return		;funcret
  4279   00235C                     __end_of_initDCmotorsPWM:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function _color_read *****************
  4283 ;; Defined at:
  4284 ;;		line 55 in file "color.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  RGBC            1    8[COMRAM] PTR struct RGBC_val
  4287 ;;		 -> main@RGBC(8), 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4299 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4302 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4303 ;;Total ram usage:        8 bytes
  4304 ;; Hardware stack levels used: 1
  4305 ;; Hardware stack levels required when called: 5
  4306 ;; This function calls:
  4307 ;;		_I2C_2_Master_Read
  4308 ;;		_I2C_2_Master_RepStart
  4309 ;;		_I2C_2_Master_Start
  4310 ;;		_I2C_2_Master_Stop
  4311 ;;		_I2C_2_Master_Write
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text21
  4318   0011B2                     __ptext21:
  4319                           	callstack 0
  4320   0011B2                     _color_read:
  4321                           	callstack 25
  4322   0011B2                     
  4323                           ;color.c: 55: void color_read(RGBC_val *RGBC);color.c: 56: {;color.c: 57:  I2C_2_Master_
      +                          Start();
  4324   0011B2  ECA6  F014         	call	_I2C_2_Master_Start	;wreg free
  4325                           
  4326                           ;color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  4327   0011B6  0E52               	movlw	82
  4328   0011B8  EC90  F014         	call	_I2C_2_Master_Write
  4329                           
  4330                           ;color.c: 59:  I2C_2_Master_Write(0xA0 | 0x16);
  4331   0011BC  0EB6               	movlw	182
  4332   0011BE  EC90  F014         	call	_I2C_2_Master_Write
  4333                           
  4334                           ;color.c: 60:  I2C_2_Master_RepStart();
  4335   0011C2  EC9C  F014         	call	_I2C_2_Master_RepStart	;wreg free
  4336                           
  4337                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  4338   0011C6  0E53               	movlw	83
  4339   0011C8  EC90  F014         	call	_I2C_2_Master_Write
  4340   0011CC                     
  4341                           ;color.c: 62:  RGBC->R=I2C_2_Master_Read(1);
  4342   0011CC  0E01               	movlw	1
  4343   0011CE  ECE2  F012         	call	_I2C_2_Master_Read
  4344   0011D2  6E0A               	movwf	??_color_read^0,c
  4345   0011D4  6A0B               	clrf	(??_color_read+1)^0,c
  4346   0011D6  5009               	movf	color_read@RGBC^0,w,c
  4347   0011D8  6ED9               	movwf	fsr2l,c
  4348   0011DA  6ADA               	clrf	fsr2h,c
  4349   0011DC  C00A  FFDE         	movff	??_color_read,postinc2
  4350   0011E0  C00B  FFDD         	movff	??_color_read+1,postdec2
  4351   0011E4                     
  4352                           ;color.c: 63:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  4353   0011E4  5009               	movf	color_read@RGBC^0,w,c
  4354   0011E6  6ED9               	movwf	fsr2l,c
  4355   0011E8  6ADA               	clrf	fsr2h,c
  4356   0011EA  CFDE F00A          	movff	postinc2,??_color_read
  4357   0011EE  CFDD F00B          	movff	postdec2,??_color_read+1
  4358   0011F2  0E00               	movlw	0
  4359   0011F4  ECE2  F012         	call	_I2C_2_Master_Read
  4360   0011F8  6E0C               	movwf	(??_color_read+2)^0,c
  4361   0011FA  500C               	movf	(??_color_read+2)^0,w,c
  4362   0011FC  6E0E               	movwf	(??_color_read+4)^0,c
  4363   0011FE  6A0D               	clrf	(??_color_read+3)^0,c
  4364   001200  500A               	movf	??_color_read^0,w,c
  4365   001202  100D               	iorwf	(??_color_read+3)^0,w,c
  4366   001204  6E0F               	movwf	(??_color_read+5)^0,c
  4367   001206  500B               	movf	(??_color_read+1)^0,w,c
  4368   001208  100E               	iorwf	(??_color_read+4)^0,w,c
  4369   00120A  6E10               	movwf	(??_color_read+6)^0,c
  4370   00120C  5009               	movf	color_read@RGBC^0,w,c
  4371   00120E  6ED9               	movwf	fsr2l,c
  4372   001210  6ADA               	clrf	fsr2h,c
  4373   001212  C00F  FFDE         	movff	??_color_read+5,postinc2
  4374   001216  C010  FFDD         	movff	??_color_read+6,postdec2
  4375                           
  4376                           ;color.c: 64:  I2C_2_Master_Stop();
  4377   00121A  ECA1  F014         	call	_I2C_2_Master_Stop	;wreg free
  4378                           
  4379                           ;color.c: 66:     I2C_2_Master_Start();
  4380   00121E  ECA6  F014         	call	_I2C_2_Master_Start	;wreg free
  4381                           
  4382                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  4383   001222  0E52               	movlw	82
  4384   001224  EC90  F014         	call	_I2C_2_Master_Write
  4385                           
  4386                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x18);
  4387   001228  0EB8               	movlw	184
  4388   00122A  EC90  F014         	call	_I2C_2_Master_Write
  4389                           
  4390                           ;color.c: 69:  I2C_2_Master_RepStart();
  4391   00122E  EC9C  F014         	call	_I2C_2_Master_RepStart	;wreg free
  4392                           
  4393                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  4394   001232  0E53               	movlw	83
  4395   001234  EC90  F014         	call	_I2C_2_Master_Write
  4396   001238                     
  4397                           ;color.c: 71:  RGBC->G=I2C_2_Master_Read(1);
  4398   001238  0E01               	movlw	1
  4399   00123A  ECE2  F012         	call	_I2C_2_Master_Read
  4400   00123E  6E0A               	movwf	??_color_read^0,c
  4401   001240  6A0B               	clrf	(??_color_read+1)^0,c
  4402   001242  5009               	movf	color_read@RGBC^0,w,c
  4403   001244  6ED9               	movwf	fsr2l,c
  4404   001246  6ADA               	clrf	fsr2h,c
  4405   001248  0E02               	movlw	2
  4406   00124A  26D9               	addwf	fsr2l,f,c
  4407   00124C  C00A  FFDE         	movff	??_color_read,postinc2
  4408   001250  C00B  FFDD         	movff	??_color_read+1,postdec2
  4409   001254                     
  4410                           ;color.c: 72:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  4411   001254  5009               	movf	color_read@RGBC^0,w,c
  4412   001256  6ED9               	movwf	fsr2l,c
  4413   001258  6ADA               	clrf	fsr2h,c
  4414   00125A  0E02               	movlw	2
  4415   00125C  26D9               	addwf	fsr2l,f,c
  4416   00125E  CFDE F00A          	movff	postinc2,??_color_read
  4417   001262  CFDD F00B          	movff	postdec2,??_color_read+1
  4418   001266  0E00               	movlw	0
  4419   001268  ECE2  F012         	call	_I2C_2_Master_Read
  4420   00126C  6E0C               	movwf	(??_color_read+2)^0,c
  4421   00126E  500C               	movf	(??_color_read+2)^0,w,c
  4422   001270  6E0E               	movwf	(??_color_read+4)^0,c
  4423   001272  6A0D               	clrf	(??_color_read+3)^0,c
  4424   001274  500A               	movf	??_color_read^0,w,c
  4425   001276  100D               	iorwf	(??_color_read+3)^0,w,c
  4426   001278  6E0F               	movwf	(??_color_read+5)^0,c
  4427   00127A  500B               	movf	(??_color_read+1)^0,w,c
  4428   00127C  100E               	iorwf	(??_color_read+4)^0,w,c
  4429   00127E  6E10               	movwf	(??_color_read+6)^0,c
  4430   001280  5009               	movf	color_read@RGBC^0,w,c
  4431   001282  6ED9               	movwf	fsr2l,c
  4432   001284  6ADA               	clrf	fsr2h,c
  4433   001286  0E02               	movlw	2
  4434   001288  26D9               	addwf	fsr2l,f,c
  4435   00128A  C00F  FFDE         	movff	??_color_read+5,postinc2
  4436   00128E  C010  FFDD         	movff	??_color_read+6,postdec2
  4437                           
  4438                           ;color.c: 73:  I2C_2_Master_Stop();
  4439   001292  ECA1  F014         	call	_I2C_2_Master_Stop	;wreg free
  4440                           
  4441                           ;color.c: 75:     I2C_2_Master_Start();
  4442   001296  ECA6  F014         	call	_I2C_2_Master_Start	;wreg free
  4443                           
  4444                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  4445   00129A  0E52               	movlw	82
  4446   00129C  EC90  F014         	call	_I2C_2_Master_Write
  4447                           
  4448                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x1A);
  4449   0012A0  0EBA               	movlw	186
  4450   0012A2  EC90  F014         	call	_I2C_2_Master_Write
  4451                           
  4452                           ;color.c: 78:  I2C_2_Master_RepStart();
  4453   0012A6  EC9C  F014         	call	_I2C_2_Master_RepStart	;wreg free
  4454                           
  4455                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  4456   0012AA  0E53               	movlw	83
  4457   0012AC  EC90  F014         	call	_I2C_2_Master_Write
  4458   0012B0                     
  4459                           ;color.c: 80:  RGBC->B=I2C_2_Master_Read(1);
  4460   0012B0  0E01               	movlw	1
  4461   0012B2  ECE2  F012         	call	_I2C_2_Master_Read
  4462   0012B6  6E0A               	movwf	??_color_read^0,c
  4463   0012B8  6A0B               	clrf	(??_color_read+1)^0,c
  4464   0012BA  5009               	movf	color_read@RGBC^0,w,c
  4465   0012BC  6ED9               	movwf	fsr2l,c
  4466   0012BE  6ADA               	clrf	fsr2h,c
  4467   0012C0  0E04               	movlw	4
  4468   0012C2  26D9               	addwf	fsr2l,f,c
  4469   0012C4  C00A  FFDE         	movff	??_color_read,postinc2
  4470   0012C8  C00B  FFDD         	movff	??_color_read+1,postdec2
  4471   0012CC                     
  4472                           ;color.c: 81:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  4473   0012CC  5009               	movf	color_read@RGBC^0,w,c
  4474   0012CE  6ED9               	movwf	fsr2l,c
  4475   0012D0  6ADA               	clrf	fsr2h,c
  4476   0012D2  0E04               	movlw	4
  4477   0012D4  26D9               	addwf	fsr2l,f,c
  4478   0012D6  CFDE F00A          	movff	postinc2,??_color_read
  4479   0012DA  CFDD F00B          	movff	postdec2,??_color_read+1
  4480   0012DE  0E00               	movlw	0
  4481   0012E0  ECE2  F012         	call	_I2C_2_Master_Read
  4482   0012E4  6E0C               	movwf	(??_color_read+2)^0,c
  4483   0012E6  500C               	movf	(??_color_read+2)^0,w,c
  4484   0012E8  6E0E               	movwf	(??_color_read+4)^0,c
  4485   0012EA  6A0D               	clrf	(??_color_read+3)^0,c
  4486   0012EC  500A               	movf	??_color_read^0,w,c
  4487   0012EE  100D               	iorwf	(??_color_read+3)^0,w,c
  4488   0012F0  6E0F               	movwf	(??_color_read+5)^0,c
  4489   0012F2  500B               	movf	(??_color_read+1)^0,w,c
  4490   0012F4  100E               	iorwf	(??_color_read+4)^0,w,c
  4491   0012F6  6E10               	movwf	(??_color_read+6)^0,c
  4492   0012F8  5009               	movf	color_read@RGBC^0,w,c
  4493   0012FA  6ED9               	movwf	fsr2l,c
  4494   0012FC  6ADA               	clrf	fsr2h,c
  4495   0012FE  0E04               	movlw	4
  4496   001300  26D9               	addwf	fsr2l,f,c
  4497   001302  C00F  FFDE         	movff	??_color_read+5,postinc2
  4498   001306  C010  FFDD         	movff	??_color_read+6,postdec2
  4499                           
  4500                           ;color.c: 82:  I2C_2_Master_Stop();
  4501   00130A  ECA1  F014         	call	_I2C_2_Master_Stop	;wreg free
  4502                           
  4503                           ;color.c: 84:     I2C_2_Master_Start();
  4504   00130E  ECA6  F014         	call	_I2C_2_Master_Start	;wreg free
  4505                           
  4506                           ;color.c: 85:  I2C_2_Master_Write(0x52 | 0x00);
  4507   001312  0E52               	movlw	82
  4508   001314  EC90  F014         	call	_I2C_2_Master_Write
  4509                           
  4510                           ;color.c: 86:  I2C_2_Master_Write(0xA0 | 0x14);
  4511   001318  0EB4               	movlw	180
  4512   00131A  EC90  F014         	call	_I2C_2_Master_Write
  4513                           
  4514                           ;color.c: 87:  I2C_2_Master_RepStart();
  4515   00131E  EC9C  F014         	call	_I2C_2_Master_RepStart	;wreg free
  4516                           
  4517                           ;color.c: 88:  I2C_2_Master_Write(0x52 | 0x01);
  4518   001322  0E53               	movlw	83
  4519   001324  EC90  F014         	call	_I2C_2_Master_Write
  4520   001328                     
  4521                           ;color.c: 89:  RGBC->C=I2C_2_Master_Read(1);
  4522   001328  0E01               	movlw	1
  4523   00132A  ECE2  F012         	call	_I2C_2_Master_Read
  4524   00132E  6E0A               	movwf	??_color_read^0,c
  4525   001330  6A0B               	clrf	(??_color_read+1)^0,c
  4526   001332  5009               	movf	color_read@RGBC^0,w,c
  4527   001334  6ED9               	movwf	fsr2l,c
  4528   001336  6ADA               	clrf	fsr2h,c
  4529   001338  0E06               	movlw	6
  4530   00133A  26D9               	addwf	fsr2l,f,c
  4531   00133C  C00A  FFDE         	movff	??_color_read,postinc2
  4532   001340  C00B  FFDD         	movff	??_color_read+1,postdec2
  4533   001344                     
  4534                           ;color.c: 90:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  4535   001344  5009               	movf	color_read@RGBC^0,w,c
  4536   001346  6ED9               	movwf	fsr2l,c
  4537   001348  6ADA               	clrf	fsr2h,c
  4538   00134A  0E06               	movlw	6
  4539   00134C  26D9               	addwf	fsr2l,f,c
  4540   00134E  CFDE F00A          	movff	postinc2,??_color_read
  4541   001352  CFDD F00B          	movff	postdec2,??_color_read+1
  4542   001356  0E00               	movlw	0
  4543   001358  ECE2  F012         	call	_I2C_2_Master_Read
  4544   00135C  6E0C               	movwf	(??_color_read+2)^0,c
  4545   00135E  500C               	movf	(??_color_read+2)^0,w,c
  4546   001360  6E0E               	movwf	(??_color_read+4)^0,c
  4547   001362  6A0D               	clrf	(??_color_read+3)^0,c
  4548   001364  500A               	movf	??_color_read^0,w,c
  4549   001366  100D               	iorwf	(??_color_read+3)^0,w,c
  4550   001368  6E0F               	movwf	(??_color_read+5)^0,c
  4551   00136A  500B               	movf	(??_color_read+1)^0,w,c
  4552   00136C  100E               	iorwf	(??_color_read+4)^0,w,c
  4553   00136E  6E10               	movwf	(??_color_read+6)^0,c
  4554   001370  5009               	movf	color_read@RGBC^0,w,c
  4555   001372  6ED9               	movwf	fsr2l,c
  4556   001374  6ADA               	clrf	fsr2h,c
  4557   001376  0E06               	movlw	6
  4558   001378  26D9               	addwf	fsr2l,f,c
  4559   00137A  C00F  FFDE         	movff	??_color_read+5,postinc2
  4560   00137E  C010  FFDD         	movff	??_color_read+6,postdec2
  4561                           
  4562                           ;color.c: 91:  I2C_2_Master_Stop();
  4563   001382  ECA1  F014         	call	_I2C_2_Master_Stop	;wreg free
  4564   001386  0012               	return		;funcret
  4565   001388                     __end_of_color_read:
  4566                           	callstack 0
  4567                           
  4568 ;; *************** function _I2C_2_Master_RepStart *****************
  4569 ;; Defined at:
  4570 ;;		line 33 in file "i2c.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;		None
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4588 ;;Total ram usage:        0 bytes
  4589 ;; Hardware stack levels used: 1
  4590 ;; Hardware stack levels required when called: 4
  4591 ;; This function calls:
  4592 ;;		_I2C_2_Master_Idle
  4593 ;; This function is called by:
  4594 ;;		_color_read
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text22
  4599   002938                     __ptext22:
  4600                           	callstack 0
  4601   002938                     _I2C_2_Master_RepStart:
  4602                           	callstack 25
  4603   002938                     
  4604                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4605   002938  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  4606   00293C                     
  4607                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4608   00293C  010E               	movlb	14	; () banked
  4609   00293E  83DA               	bsf	218,1,b	;volatile
  4610   002940                     
  4611                           ; BSR set to: 14
  4612   002940  0012               	return		;funcret
  4613   002942                     __end_of_I2C_2_Master_RepStart:
  4614                           	callstack 0
  4615                           
  4616 ;; *************** function _I2C_2_Master_Read *****************
  4617 ;; Defined at:
  4618 ;;		line 51 in file "i2c.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  ack             1    wreg     unsigned char 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  ack             1    6[COMRAM] unsigned char 
  4623 ;;  tmp             1    7[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      unsigned char 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4635 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;Total ram usage:        3 bytes
  4638 ;; Hardware stack levels used: 1
  4639 ;; Hardware stack levels required when called: 4
  4640 ;; This function calls:
  4641 ;;		_I2C_2_Master_Idle
  4642 ;; This function is called by:
  4643 ;;		_color_read
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text23
  4648   0025C4                     __ptext23:
  4649                           	callstack 0
  4650   0025C4                     _I2C_2_Master_Read:
  4651                           	callstack 25
  4652                           
  4653                           ; BSR set to: 14
  4654                           ;incstack = 0
  4655                           ;I2C_2_Master_Read@ack stored from wreg
  4656   0025C4  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  4657   0025C6                     
  4658                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4659   0025C6  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  4660   0025CA                     
  4661                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4662   0025CA  010E               	movlb	14	; () banked
  4663   0025CC  87DA               	bsf	218,3,b	;volatile
  4664                           
  4665                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4666   0025CE  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  4667   0025D2                     
  4668                           ;i2c.c: 57:   tmp = SSP2BUF;
  4669   0025D2  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4670                           
  4671                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4672   0025D6  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  4673   0025DA                     
  4674                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4675   0025DA  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  4676   0025DC  B4D8               	btfsc	status,2,c
  4677   0025DE  EFF3  F012         	goto	u1431
  4678   0025E2  EFF7  F012         	goto	u1430
  4679   0025E6                     u1431:
  4680   0025E6  6A06               	clrf	??_I2C_2_Master_Read^0,c
  4681   0025E8  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  4682   0025EA  EFF8  F012         	goto	u1448
  4683   0025EE                     u1430:
  4684   0025EE  6A06               	clrf	??_I2C_2_Master_Read^0,c
  4685   0025F0                     u1448:
  4686   0025F0  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  4687   0025F2  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  4688   0025F4  010E               	movlb	14	; () banked
  4689   0025F6  51DA               	movf	218,w,b	;volatile
  4690   0025F8  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  4691   0025FA  0BDF               	andlw	-33
  4692   0025FC  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  4693   0025FE  6FDA               	movwf	218,b	;volatile
  4694   002600                     
  4695                           ; BSR set to: 14
  4696                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4697   002600  89DA               	bsf	218,4,b	;volatile
  4698   002602                     
  4699                           ; BSR set to: 14
  4700                           ;i2c.c: 61:   return tmp;
  4701   002602  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  4702   002604                     
  4703                           ; BSR set to: 14
  4704   002604  0012               	return		;funcret
  4705   002606                     __end_of_I2C_2_Master_Read:
  4706                           	callstack 0
  4707                           
  4708 ;; *************** function _color_normalise *****************
  4709 ;; Defined at:
  4710 ;;		line 95 in file "color.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  RGBC            8   30[COMRAM] struct RGBC_val
  4713 ;;  RGBC_n          1   38[COMRAM] PTR struct RGBC_val
  4714 ;;		 -> main@RGBC_n(8), 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4726 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;Total ram usage:       11 bytes
  4731 ;; Hardware stack levels used: 1
  4732 ;; Hardware stack levels required when called: 4
  4733 ;; This function calls:
  4734 ;;		___aldiv
  4735 ;;		___lmul
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text24
  4742   001D8E                     __ptext24:
  4743                           	callstack 0
  4744   001D8E                     _color_normalise:
  4745                           	callstack 26
  4746   001D8E                     
  4747                           ;color.c: 113:     RGBC_n->C = RGBC.C;
  4748   001D8E  5027               	movf	color_normalise@RGBC_n^0,w,c
  4749   001D90  6ED9               	movwf	fsr2l,c
  4750   001D92  6ADA               	clrf	fsr2h,c
  4751   001D94  0E06               	movlw	6
  4752   001D96  26D9               	addwf	fsr2l,f,c
  4753   001D98  C025  FFDE         	movff	color_normalise@RGBC+6,postinc2
  4754   001D9C  C026  FFDD         	movff	color_normalise@RGBC+7,postdec2
  4755   001DA0                     
  4756                           ;color.c: 114:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  4757   001DA0  C01F  F005         	movff	color_normalise@RGBC,___lmul@multiplier
  4758   001DA4  C020  F006         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  4759   001DA8  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4760   001DAA  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4761   001DAC  0EE8               	movlw	232
  4762   001DAE  6E09               	movwf	___lmul@multiplicand^0,c
  4763   001DB0  0E03               	movlw	3
  4764   001DB2  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4765   001DB4  0E00               	movlw	0
  4766   001DB6  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4767   001DB8  0E00               	movlw	0
  4768   001DBA  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4769   001DBC  EC22  F012         	call	___lmul	;wreg free
  4770   001DC0  C005  F011         	movff	?___lmul,___aldiv@dividend
  4771   001DC4  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4772   001DC8  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4773   001DCC  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4774   001DD0  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4775   001DD2  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4776   001DD4  6E28               	movwf	??_color_normalise^0,c
  4777   001DD6  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4778   001DD8  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4779   001DDA  6E29               	movwf	(??_color_normalise+1)^0,c
  4780   001DDC  501F               	movf	color_normalise@RGBC^0,w,c
  4781   001DDE  2628               	addwf	??_color_normalise^0,f,c
  4782   001DE0  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4783   001DE2  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4784   001DE4  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4785   001DE8  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4786   001DEC  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4787   001DEE  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4788   001DF0  EC68  F00F         	call	___aldiv	;wreg free
  4789   001DF4  5027               	movf	color_normalise@RGBC_n^0,w,c
  4790   001DF6  6ED9               	movwf	fsr2l,c
  4791   001DF8  6ADA               	clrf	fsr2h,c
  4792   001DFA  C011  FFDE         	movff	?___aldiv,postinc2
  4793   001DFE  C012  FFDD         	movff	?___aldiv+1,postdec2
  4794   001E02                     
  4795                           ;color.c: 115:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  4796   001E02  C021  F005         	movff	color_normalise@RGBC+2,___lmul@multiplier
  4797   001E06  C022  F006         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  4798   001E0A  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4799   001E0C  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4800   001E0E  0EE8               	movlw	232
  4801   001E10  6E09               	movwf	___lmul@multiplicand^0,c
  4802   001E12  0E03               	movlw	3
  4803   001E14  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4804   001E16  0E00               	movlw	0
  4805   001E18  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4806   001E1A  0E00               	movlw	0
  4807   001E1C  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4808   001E1E  EC22  F012         	call	___lmul	;wreg free
  4809   001E22  C005  F011         	movff	?___lmul,___aldiv@dividend
  4810   001E26  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4811   001E2A  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4812   001E2E  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4813   001E32  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4814   001E34  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4815   001E36  6E28               	movwf	??_color_normalise^0,c
  4816   001E38  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4817   001E3A  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4818   001E3C  6E29               	movwf	(??_color_normalise+1)^0,c
  4819   001E3E  501F               	movf	color_normalise@RGBC^0,w,c
  4820   001E40  2628               	addwf	??_color_normalise^0,f,c
  4821   001E42  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4822   001E44  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4823   001E46  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4824   001E4A  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4825   001E4E  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4826   001E50  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4827   001E52  EC68  F00F         	call	___aldiv	;wreg free
  4828   001E56  5027               	movf	color_normalise@RGBC_n^0,w,c
  4829   001E58  6ED9               	movwf	fsr2l,c
  4830   001E5A  6ADA               	clrf	fsr2h,c
  4831   001E5C  0E02               	movlw	2
  4832   001E5E  26D9               	addwf	fsr2l,f,c
  4833   001E60  C011  FFDE         	movff	?___aldiv,postinc2
  4834   001E64  C012  FFDD         	movff	?___aldiv+1,postdec2
  4835   001E68                     
  4836                           ;color.c: 116:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  4837   001E68  C023  F005         	movff	color_normalise@RGBC+4,___lmul@multiplier
  4838   001E6C  C024  F006         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  4839   001E70  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4840   001E72  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4841   001E74  0EE8               	movlw	232
  4842   001E76  6E09               	movwf	___lmul@multiplicand^0,c
  4843   001E78  0E03               	movlw	3
  4844   001E7A  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4845   001E7C  0E00               	movlw	0
  4846   001E7E  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4847   001E80  0E00               	movlw	0
  4848   001E82  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4849   001E84  EC22  F012         	call	___lmul	;wreg free
  4850   001E88  C005  F011         	movff	?___lmul,___aldiv@dividend
  4851   001E8C  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4852   001E90  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4853   001E94  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4854   001E98  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4855   001E9A  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4856   001E9C  6E28               	movwf	??_color_normalise^0,c
  4857   001E9E  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4858   001EA0  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4859   001EA2  6E29               	movwf	(??_color_normalise+1)^0,c
  4860   001EA4  501F               	movf	color_normalise@RGBC^0,w,c
  4861   001EA6  2628               	addwf	??_color_normalise^0,f,c
  4862   001EA8  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4863   001EAA  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4864   001EAC  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4865   001EB0  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4866   001EB4  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4867   001EB6  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4868   001EB8  EC68  F00F         	call	___aldiv	;wreg free
  4869   001EBC  5027               	movf	color_normalise@RGBC_n^0,w,c
  4870   001EBE  6ED9               	movwf	fsr2l,c
  4871   001EC0  6ADA               	clrf	fsr2h,c
  4872   001EC2  0E04               	movlw	4
  4873   001EC4  26D9               	addwf	fsr2l,f,c
  4874   001EC6  C011  FFDE         	movff	?___aldiv,postinc2
  4875   001ECA  C012  FFDD         	movff	?___aldiv+1,postdec2
  4876   001ECE  0012               	return		;funcret
  4877   001ED0                     __end_of_color_normalise:
  4878                           	callstack 0
  4879                           
  4880 ;; *************** function ___lmul *****************
  4881 ;; Defined at:
  4882 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  multiplier      4    4[COMRAM] unsigned long 
  4885 ;;  multiplicand    4    8[COMRAM] unsigned long 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  product         4   12[COMRAM] unsigned long 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  4    4[COMRAM] unsigned long 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4897 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4898 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4901 ;;Total ram usage:       12 bytes
  4902 ;; Hardware stack levels used: 1
  4903 ;; Hardware stack levels required when called: 3
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_color_normalise
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text25
  4912   002444                     __ptext25:
  4913                           	callstack 0
  4914   002444                     ___lmul:
  4915                           	callstack 26
  4916   002444  0E00               	movlw	0
  4917   002446  6E0D               	movwf	___lmul@product^0,c
  4918   002448  0E00               	movlw	0
  4919   00244A  6E0E               	movwf	(___lmul@product+1)^0,c
  4920   00244C  0E00               	movlw	0
  4921   00244E  6E0F               	movwf	(___lmul@product+2)^0,c
  4922   002450  0E00               	movlw	0
  4923   002452  6E10               	movwf	(___lmul@product+3)^0,c
  4924   002454                     l2649:
  4925   002454  A005               	btfss	___lmul@multiplier^0,0,c
  4926   002456  EF2F  F012         	goto	u1661
  4927   00245A  EF31  F012         	goto	u1660
  4928   00245E                     u1661:
  4929   00245E  EF39  F012         	goto	l2653
  4930   002462                     u1660:
  4931   002462  5009               	movf	___lmul@multiplicand^0,w,c
  4932   002464  260D               	addwf	___lmul@product^0,f,c
  4933   002466  500A               	movf	(___lmul@multiplicand+1)^0,w,c
  4934   002468  220E               	addwfc	(___lmul@product+1)^0,f,c
  4935   00246A  500B               	movf	(___lmul@multiplicand+2)^0,w,c
  4936   00246C  220F               	addwfc	(___lmul@product+2)^0,f,c
  4937   00246E  500C               	movf	(___lmul@multiplicand+3)^0,w,c
  4938   002470  2210               	addwfc	(___lmul@product+3)^0,f,c
  4939   002472                     l2653:
  4940   002472  90D8               	bcf	status,0,c
  4941   002474  3609               	rlcf	___lmul@multiplicand^0,f,c
  4942   002476  360A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4943   002478  360B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4944   00247A  360C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4945   00247C  90D8               	bcf	status,0,c
  4946   00247E  3208               	rrcf	(___lmul@multiplier+3)^0,f,c
  4947   002480  3207               	rrcf	(___lmul@multiplier+2)^0,f,c
  4948   002482  3206               	rrcf	(___lmul@multiplier+1)^0,f,c
  4949   002484  3205               	rrcf	___lmul@multiplier^0,f,c
  4950   002486  5005               	movf	___lmul@multiplier^0,w,c
  4951   002488  1006               	iorwf	(___lmul@multiplier+1)^0,w,c
  4952   00248A  1007               	iorwf	(___lmul@multiplier+2)^0,w,c
  4953   00248C  1008               	iorwf	(___lmul@multiplier+3)^0,w,c
  4954   00248E  A4D8               	btfss	status,2,c
  4955   002490  EF4C  F012         	goto	u1671
  4956   002494  EF4E  F012         	goto	u1670
  4957   002498                     u1671:
  4958   002498  EF2A  F012         	goto	l2649
  4959   00249C                     u1670:
  4960   00249C  C00D  F005         	movff	___lmul@product,?___lmul
  4961   0024A0  C00E  F006         	movff	___lmul@product+1,?___lmul+1
  4962   0024A4  C00F  F007         	movff	___lmul@product+2,?___lmul+2
  4963   0024A8  C010  F008         	movff	___lmul@product+3,?___lmul+3
  4964   0024AC  0012               	return		;funcret
  4965   0024AE                     __end_of___lmul:
  4966                           	callstack 0
  4967                           
  4968 ;; *************** function ___aldiv *****************
  4969 ;; Defined at:
  4970 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  dividend        4   16[COMRAM] long 
  4973 ;;  divisor         4   20[COMRAM] long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  quotient        4   26[COMRAM] long 
  4976 ;;  sign            1   25[COMRAM] unsigned char 
  4977 ;;  counter         1   24[COMRAM] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  4   16[COMRAM] long 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4987 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4988 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4990 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4991 ;;Total ram usage:       14 bytes
  4992 ;; Hardware stack levels used: 1
  4993 ;; Hardware stack levels required when called: 3
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_color_normalise
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text26
  5002   001ED0                     __ptext26:
  5003                           	callstack 0
  5004   001ED0                     ___aldiv:
  5005                           	callstack 26
  5006   001ED0  0E00               	movlw	0
  5007   001ED2  6E1A               	movwf	___aldiv@sign^0,c
  5008   001ED4  BE18               	btfsc	(___aldiv@divisor+3)^0,7,c
  5009   001ED6  EF71  F00F         	goto	u1680
  5010   001EDA  EF6F  F00F         	goto	u1681
  5011   001EDE                     u1681:
  5012   001EDE  EF7B  F00F         	goto	l2665
  5013   001EE2                     u1680:
  5014   001EE2  1E18               	comf	(___aldiv@divisor+3)^0,f,c
  5015   001EE4  1E17               	comf	(___aldiv@divisor+2)^0,f,c
  5016   001EE6  1E16               	comf	(___aldiv@divisor+1)^0,f,c
  5017   001EE8  6C15               	negf	___aldiv@divisor^0,c
  5018   001EEA  0E00               	movlw	0
  5019   001EEC  2216               	addwfc	(___aldiv@divisor+1)^0,f,c
  5020   001EEE  2217               	addwfc	(___aldiv@divisor+2)^0,f,c
  5021   001EF0  2218               	addwfc	(___aldiv@divisor+3)^0,f,c
  5022   001EF2  0E01               	movlw	1
  5023   001EF4  6E1A               	movwf	___aldiv@sign^0,c
  5024   001EF6                     l2665:
  5025   001EF6  BE14               	btfsc	(___aldiv@dividend+3)^0,7,c
  5026   001EF8  EF82  F00F         	goto	u1690
  5027   001EFC  EF80  F00F         	goto	u1691
  5028   001F00                     u1691:
  5029   001F00  EF8C  F00F         	goto	l2671
  5030   001F04                     u1690:
  5031   001F04  1E14               	comf	(___aldiv@dividend+3)^0,f,c
  5032   001F06  1E13               	comf	(___aldiv@dividend+2)^0,f,c
  5033   001F08  1E12               	comf	(___aldiv@dividend+1)^0,f,c
  5034   001F0A  6C11               	negf	___aldiv@dividend^0,c
  5035   001F0C  0E00               	movlw	0
  5036   001F0E  2212               	addwfc	(___aldiv@dividend+1)^0,f,c
  5037   001F10  2213               	addwfc	(___aldiv@dividend+2)^0,f,c
  5038   001F12  2214               	addwfc	(___aldiv@dividend+3)^0,f,c
  5039   001F14  0E01               	movlw	1
  5040   001F16  1A1A               	xorwf	___aldiv@sign^0,f,c
  5041   001F18                     l2671:
  5042   001F18  0E00               	movlw	0
  5043   001F1A  6E1B               	movwf	___aldiv@quotient^0,c
  5044   001F1C  0E00               	movlw	0
  5045   001F1E  6E1C               	movwf	(___aldiv@quotient+1)^0,c
  5046   001F20  0E00               	movlw	0
  5047   001F22  6E1D               	movwf	(___aldiv@quotient+2)^0,c
  5048   001F24  0E00               	movlw	0
  5049   001F26  6E1E               	movwf	(___aldiv@quotient+3)^0,c
  5050   001F28  5015               	movf	___aldiv@divisor^0,w,c
  5051   001F2A  1016               	iorwf	(___aldiv@divisor+1)^0,w,c
  5052   001F2C  1017               	iorwf	(___aldiv@divisor+2)^0,w,c
  5053   001F2E  1018               	iorwf	(___aldiv@divisor+3)^0,w,c
  5054   001F30  B4D8               	btfsc	status,2,c
  5055   001F32  EF9D  F00F         	goto	u1701
  5056   001F36  EF9F  F00F         	goto	u1700
  5057   001F3A                     u1701:
  5058   001F3A  EFD5  F00F         	goto	l2693
  5059   001F3E                     u1700:
  5060   001F3E  0E01               	movlw	1
  5061   001F40  6E19               	movwf	___aldiv@counter^0,c
  5062   001F42  EFA9  F00F         	goto	l2679
  5063   001F46                     l2677:
  5064   001F46  90D8               	bcf	status,0,c
  5065   001F48  3615               	rlcf	___aldiv@divisor^0,f,c
  5066   001F4A  3616               	rlcf	(___aldiv@divisor+1)^0,f,c
  5067   001F4C  3617               	rlcf	(___aldiv@divisor+2)^0,f,c
  5068   001F4E  3618               	rlcf	(___aldiv@divisor+3)^0,f,c
  5069   001F50  2A19               	incf	___aldiv@counter^0,f,c
  5070   001F52                     l2679:
  5071   001F52  AE18               	btfss	(___aldiv@divisor+3)^0,7,c
  5072   001F54  EFAE  F00F         	goto	u1711
  5073   001F58  EFB0  F00F         	goto	u1710
  5074   001F5C                     u1711:
  5075   001F5C  EFA3  F00F         	goto	l2677
  5076   001F60                     u1710:
  5077   001F60                     l2681:
  5078   001F60  90D8               	bcf	status,0,c
  5079   001F62  361B               	rlcf	___aldiv@quotient^0,f,c
  5080   001F64  361C               	rlcf	(___aldiv@quotient+1)^0,f,c
  5081   001F66  361D               	rlcf	(___aldiv@quotient+2)^0,f,c
  5082   001F68  361E               	rlcf	(___aldiv@quotient+3)^0,f,c
  5083   001F6A  5015               	movf	___aldiv@divisor^0,w,c
  5084   001F6C  5C11               	subwf	___aldiv@dividend^0,w,c
  5085   001F6E  5016               	movf	(___aldiv@divisor+1)^0,w,c
  5086   001F70  5812               	subwfb	(___aldiv@dividend+1)^0,w,c
  5087   001F72  5017               	movf	(___aldiv@divisor+2)^0,w,c
  5088   001F74  5813               	subwfb	(___aldiv@dividend+2)^0,w,c
  5089   001F76  5018               	movf	(___aldiv@divisor+3)^0,w,c
  5090   001F78  5814               	subwfb	(___aldiv@dividend+3)^0,w,c
  5091   001F7A  A0D8               	btfss	status,0,c
  5092   001F7C  EFC2  F00F         	goto	u1721
  5093   001F80  EFC4  F00F         	goto	u1720
  5094   001F84                     u1721:
  5095   001F84  EFCD  F00F         	goto	l2689
  5096   001F88                     u1720:
  5097   001F88  5015               	movf	___aldiv@divisor^0,w,c
  5098   001F8A  5E11               	subwf	___aldiv@dividend^0,f,c
  5099   001F8C  5016               	movf	(___aldiv@divisor+1)^0,w,c
  5100   001F8E  5A12               	subwfb	(___aldiv@dividend+1)^0,f,c
  5101   001F90  5017               	movf	(___aldiv@divisor+2)^0,w,c
  5102   001F92  5A13               	subwfb	(___aldiv@dividend+2)^0,f,c
  5103   001F94  5018               	movf	(___aldiv@divisor+3)^0,w,c
  5104   001F96  5A14               	subwfb	(___aldiv@dividend+3)^0,f,c
  5105   001F98  801B               	bsf	___aldiv@quotient^0,0,c
  5106   001F9A                     l2689:
  5107   001F9A  90D8               	bcf	status,0,c
  5108   001F9C  3218               	rrcf	(___aldiv@divisor+3)^0,f,c
  5109   001F9E  3217               	rrcf	(___aldiv@divisor+2)^0,f,c
  5110   001FA0  3216               	rrcf	(___aldiv@divisor+1)^0,f,c
  5111   001FA2  3215               	rrcf	___aldiv@divisor^0,f,c
  5112   001FA4  2E19               	decfsz	___aldiv@counter^0,f,c
  5113   001FA6  EFB0  F00F         	goto	l2681
  5114   001FAA                     l2693:
  5115   001FAA  501A               	movf	___aldiv@sign^0,w,c
  5116   001FAC  B4D8               	btfsc	status,2,c
  5117   001FAE  EFDB  F00F         	goto	u1731
  5118   001FB2  EFDD  F00F         	goto	u1730
  5119   001FB6                     u1731:
  5120   001FB6  EFE5  F00F         	goto	l2697
  5121   001FBA                     u1730:
  5122   001FBA  1E1E               	comf	(___aldiv@quotient+3)^0,f,c
  5123   001FBC  1E1D               	comf	(___aldiv@quotient+2)^0,f,c
  5124   001FBE  1E1C               	comf	(___aldiv@quotient+1)^0,f,c
  5125   001FC0  6C1B               	negf	___aldiv@quotient^0,c
  5126   001FC2  0E00               	movlw	0
  5127   001FC4  221C               	addwfc	(___aldiv@quotient+1)^0,f,c
  5128   001FC6  221D               	addwfc	(___aldiv@quotient+2)^0,f,c
  5129   001FC8  221E               	addwfc	(___aldiv@quotient+3)^0,f,c
  5130   001FCA                     l2697:
  5131   001FCA  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  5132   001FCE  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  5133   001FD2  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  5134   001FD6  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  5135   001FDA  0012               	return		;funcret
  5136   001FDC                     __end_of___aldiv:
  5137                           	callstack 0
  5138                           
  5139 ;; *************** function _color_detect *****************
  5140 ;; Defined at:
  5141 ;;		line 119 in file "color.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;  RGBC_n          8    4[COMRAM] struct RGBC_val
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  color           1   12[COMRAM] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      unsigned char 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;Total ram usage:        9 bytes
  5160 ;; Hardware stack levels used: 1
  5161 ;; Hardware stack levels required when called: 3
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_main
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text27
  5170   0023D0                     __ptext27:
  5171                           	callstack 0
  5172   0023D0                     _color_detect:
  5173                           	callstack 27
  5174   0023D0                     
  5175                           ;color.c: 119: unsigned char color_detect(RGBC_val RGBC_n);color.c: 120: {;color.c: 121:
      +                               unsigned char color=0;
  5176   0023D0  0E00               	movlw	0
  5177   0023D2  6E0D               	movwf	color_detect@color^0,c
  5178   0023D4                     
  5179                           ;color.c: 122:     if (RGBC_n.R > 550) {
  5180   0023D4  0E27               	movlw	39
  5181   0023D6  5C05               	subwf	color_detect@RGBC_n^0,w,c
  5182   0023D8  0E02               	movlw	2
  5183   0023DA  5806               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  5184   0023DC  A0D8               	btfss	status,0,c
  5185   0023DE  EFF3  F011         	goto	u1801
  5186   0023E2  EFF5  F011         	goto	u1800
  5187   0023E6                     u1801:
  5188   0023E6  EFF9  F011         	goto	l2821
  5189   0023EA                     u1800:
  5190   0023EA                     
  5191                           ;color.c: 123:         color = 1;
  5192   0023EA  0E01               	movlw	1
  5193   0023EC  6E0D               	movwf	color_detect@color^0,c
  5194                           
  5195                           ;color.c: 124:     }
  5196   0023EE  EF20  F012         	goto	l115
  5197   0023F2                     l2821:
  5198   0023F2  0E23               	movlw	35
  5199   0023F4  5C07               	subwf	(color_detect@RGBC_n+2)^0,w,c
  5200   0023F6  0E01               	movlw	1
  5201   0023F8  5808               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  5202   0023FA  A0D8               	btfss	status,0,c
  5203   0023FC  EF02  F012         	goto	u1811
  5204   002400  EF04  F012         	goto	u1810
  5205   002404                     u1811:
  5206   002404  EF08  F012         	goto	l2825
  5207   002408                     u1810:
  5208   002408                     
  5209                           ;color.c: 126:         color = 2;
  5210   002408  0E02               	movlw	2
  5211   00240A  6E0D               	movwf	color_detect@color^0,c
  5212                           
  5213                           ;color.c: 127:     }
  5214   00240C  EF20  F012         	goto	l115
  5215   002410                     l2825:
  5216   002410  500A               	movf	(color_detect@RGBC_n+5)^0,w,c
  5217   002412  E109               	bnz	u1820
  5218   002414  0EDD               	movlw	221
  5219   002416  5C09               	subwf	(color_detect@RGBC_n+4)^0,w,c
  5220   002418  A0D8               	btfss	status,0,c
  5221   00241A  EF11  F012         	goto	u1821
  5222   00241E  EF13  F012         	goto	u1820
  5223   002422                     u1821:
  5224   002422  EF20  F012         	goto	l115
  5225   002426                     u1820:
  5226   002426  0E20               	movlw	32
  5227   002428  5C0B               	subwf	(color_detect@RGBC_n+6)^0,w,c
  5228   00242A  0E03               	movlw	3
  5229   00242C  580C               	subwfb	(color_detect@RGBC_n+7)^0,w,c
  5230   00242E  B0D8               	btfsc	status,0,c
  5231   002430  EF1C  F012         	goto	u1831
  5232   002434  EF1E  F012         	goto	u1830
  5233   002438                     u1831:
  5234   002438  EF20  F012         	goto	l115
  5235   00243C                     u1830:
  5236   00243C                     
  5237                           ;color.c: 129:         color = 3;
  5238   00243C  0E03               	movlw	3
  5239   00243E  6E0D               	movwf	color_detect@color^0,c
  5240   002440                     l115:
  5241                           
  5242                           ;color.c: 149:     return color;
  5243   002440  500D               	movf	color_detect@color^0,w,c
  5244   002442  0012               	return		;funcret
  5245   002444                     __end_of_color_detect:
  5246                           	callstack 0
  5247                           
  5248 ;; *************** function _color_click_init *****************
  5249 ;; Defined at:
  5250 ;;		line 5 in file "color.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5268 ;;Total ram usage:        1 bytes
  5269 ;; Hardware stack levels used: 1
  5270 ;; Hardware stack levels required when called: 6
  5271 ;; This function calls:
  5272 ;;		_I2C_2_Master_Init
  5273 ;;		_color_writetoaddr
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text28
  5280   0024AE                     __ptext28:
  5281                           	callstack 0
  5282   0024AE                     _color_click_init:
  5283                           	callstack 24
  5284   0024AE                     
  5285                           ;color.c: 8:     I2C_2_Master_Init();
  5286   0024AE  ECA0  F013         	call	_I2C_2_Master_Init	;wreg free
  5287   0024B2                     
  5288                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  5289   0024B2  0E01               	movlw	1
  5290   0024B4  6E07               	movwf	color_writetoaddr@value^0,c
  5291   0024B6  0E00               	movlw	0
  5292   0024B8  EC2A  F014         	call	_color_writetoaddr
  5293   0024BC                     
  5294                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5295   0024BC  0E3F               	movlw	63
  5296   0024BE  6E09               	movwf	??_color_click_init^0,c
  5297   0024C0  0E55               	movlw	85
  5298   0024C2                     u2437:
  5299   0024C2  2EE8               	decfsz	wreg,f,c
  5300   0024C4  D7FE               	bra	u2437
  5301   0024C6  2E09               	decfsz	??_color_click_init^0,f,c
  5302   0024C8  D7FC               	bra	u2437
  5303   0024CA  0000               	nop	
  5304   0024CC                     
  5305                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  5306   0024CC  0E03               	movlw	3
  5307   0024CE  6E07               	movwf	color_writetoaddr@value^0,c
  5308   0024D0  0E00               	movlw	0
  5309   0024D2  EC2A  F014         	call	_color_writetoaddr
  5310   0024D6                     
  5311                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  5312   0024D6  0ED5               	movlw	213
  5313   0024D8  6E07               	movwf	color_writetoaddr@value^0,c
  5314   0024DA  0E01               	movlw	1
  5315   0024DC  EC2A  F014         	call	_color_writetoaddr
  5316   0024E0                     
  5317                           ;color.c: 21:  color_writetoaddr(0x00, 0x13);
  5318   0024E0  0E13               	movlw	19
  5319   0024E2  6E07               	movwf	color_writetoaddr@value^0,c
  5320   0024E4  0E00               	movlw	0
  5321   0024E6  EC2A  F014         	call	_color_writetoaddr
  5322   0024EA                     
  5323                           ;color.c: 22:     color_writetoaddr(0x07, 0x07);
  5324   0024EA  0E07               	movlw	7
  5325   0024EC  6E07               	movwf	color_writetoaddr@value^0,c
  5326   0024EE  0E07               	movlw	7
  5327   0024F0  EC2A  F014         	call	_color_writetoaddr
  5328   0024F4                     
  5329                           ;color.c: 23:     color_writetoaddr(0x06, 0xD0);
  5330   0024F4  0ED0               	movlw	208
  5331   0024F6  6E07               	movwf	color_writetoaddr@value^0,c
  5332   0024F8  0E06               	movlw	6
  5333   0024FA  EC2A  F014         	call	_color_writetoaddr
  5334   0024FE                     
  5335                           ;color.c: 24:     color_writetoaddr(0x05, 0x00);
  5336   0024FE  0E00               	movlw	0
  5337   002500  6E07               	movwf	color_writetoaddr@value^0,c
  5338   002502  0E05               	movlw	5
  5339   002504  EC2A  F014         	call	_color_writetoaddr
  5340   002508                     
  5341                           ;color.c: 25:     color_writetoaddr(0x04, 0x00);
  5342   002508  0E00               	movlw	0
  5343   00250A  6E07               	movwf	color_writetoaddr@value^0,c
  5344   00250C  0E04               	movlw	4
  5345   00250E  EC2A  F014         	call	_color_writetoaddr
  5346   002512  0012               	return		;funcret
  5347   002514                     __end_of_color_click_init:
  5348                           	callstack 0
  5349                           
  5350 ;; *************** function _color_writetoaddr *****************
  5351 ;; Defined at:
  5352 ;;		line 31 in file "color.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  address         1    wreg     unsigned char 
  5355 ;;  value           1    6[COMRAM] unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  address         1    7[COMRAM] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5367 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5371 ;;Total ram usage:        2 bytes
  5372 ;; Hardware stack levels used: 1
  5373 ;; Hardware stack levels required when called: 5
  5374 ;; This function calls:
  5375 ;;		_I2C_2_Master_Start
  5376 ;;		_I2C_2_Master_Stop
  5377 ;;		_I2C_2_Master_Write
  5378 ;; This function is called by:
  5379 ;;		_color_click_init
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text29
  5384   002854                     __ptext29:
  5385                           	callstack 0
  5386   002854                     _color_writetoaddr:
  5387                           	callstack 24
  5388                           
  5389                           ;incstack = 0
  5390                           ;color_writetoaddr@address stored from wreg
  5391   002854  6E08               	movwf	color_writetoaddr@address^0,c
  5392   002856                     
  5393                           ;color.c: 32:     I2C_2_Master_Start();
  5394   002856  ECA6  F014         	call	_I2C_2_Master_Start	;wreg free
  5395                           
  5396                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  5397   00285A  0E52               	movlw	82
  5398   00285C  EC90  F014         	call	_I2C_2_Master_Write
  5399                           
  5400                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  5401   002860  5008               	movf	color_writetoaddr@address^0,w,c
  5402   002862  0980               	iorlw	128
  5403   002864  EC90  F014         	call	_I2C_2_Master_Write
  5404                           
  5405                           ;color.c: 35:     I2C_2_Master_Write(value);
  5406   002868  5007               	movf	color_writetoaddr@value^0,w,c
  5407   00286A  EC90  F014         	call	_I2C_2_Master_Write
  5408                           
  5409                           ;color.c: 36:     I2C_2_Master_Stop();
  5410   00286E  ECA1  F014         	call	_I2C_2_Master_Stop	;wreg free
  5411   002872  0012               	return		;funcret
  5412   002874                     __end_of_color_writetoaddr:
  5413                           	callstack 0
  5414                           
  5415 ;; *************** function _I2C_2_Master_Write *****************
  5416 ;; Defined at:
  5417 ;;		line 45 in file "i2c.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  data_byte       1    wreg     unsigned char 
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  data_byte       1    5[COMRAM] unsigned char 
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  1    wreg      void 
  5424 ;; Registers used:
  5425 ;;		wreg, status,2, status,0, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5434 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5435 ;;Total ram usage:        1 bytes
  5436 ;; Hardware stack levels used: 1
  5437 ;; Hardware stack levels required when called: 4
  5438 ;; This function calls:
  5439 ;;		_I2C_2_Master_Idle
  5440 ;; This function is called by:
  5441 ;;		_color_writetoaddr
  5442 ;;		_color_read
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text30
  5447   002920                     __ptext30:
  5448                           	callstack 0
  5449   002920                     _I2C_2_Master_Write:
  5450                           	callstack 25
  5451                           
  5452                           ;incstack = 0
  5453                           ;I2C_2_Master_Write@data_byte stored from wreg
  5454   002920  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  5455   002922                     
  5456                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5457   002922  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  5458   002926                     
  5459                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5460   002926  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5461   00292A  0012               	return		;funcret
  5462   00292C                     __end_of_I2C_2_Master_Write:
  5463                           	callstack 0
  5464                           
  5465 ;; *************** function _I2C_2_Master_Stop *****************
  5466 ;; Defined at:
  5467 ;;		line 39 in file "i2c.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used: 1
  5487 ;; Hardware stack levels required when called: 4
  5488 ;; This function calls:
  5489 ;;		_I2C_2_Master_Idle
  5490 ;; This function is called by:
  5491 ;;		_color_writetoaddr
  5492 ;;		_color_read
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text31
  5497   002942                     __ptext31:
  5498                           	callstack 0
  5499   002942                     _I2C_2_Master_Stop:
  5500                           	callstack 25
  5501   002942                     
  5502                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5503   002942  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  5504   002946                     
  5505                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5506   002946  010E               	movlb	14	; () banked
  5507   002948  85DA               	bsf	218,2,b	;volatile
  5508   00294A                     
  5509                           ; BSR set to: 14
  5510   00294A  0012               	return		;funcret
  5511   00294C                     __end_of_I2C_2_Master_Stop:
  5512                           	callstack 0
  5513                           
  5514 ;; *************** function _I2C_2_Master_Start *****************
  5515 ;; Defined at:
  5516 ;;		line 27 in file "i2c.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5534 ;;Total ram usage:        0 bytes
  5535 ;; Hardware stack levels used: 1
  5536 ;; Hardware stack levels required when called: 4
  5537 ;; This function calls:
  5538 ;;		_I2C_2_Master_Idle
  5539 ;; This function is called by:
  5540 ;;		_color_writetoaddr
  5541 ;;		_color_read
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text32
  5546   00294C                     __ptext32:
  5547                           	callstack 0
  5548   00294C                     _I2C_2_Master_Start:
  5549                           	callstack 25
  5550   00294C                     
  5551                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5552   00294C  ECCA  F013         	call	_I2C_2_Master_Idle	;wreg free
  5553   002950                     
  5554                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5555   002950  010E               	movlb	14	; () banked
  5556   002952  81DA               	bsf	218,0,b	;volatile
  5557   002954                     
  5558                           ; BSR set to: 14
  5559   002954  0012               	return		;funcret
  5560   002956                     __end_of_I2C_2_Master_Start:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function _I2C_2_Master_Idle *****************
  5564 ;; Defined at:
  5565 ;;		line 22 in file "i2c.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;Total ram usage:        1 bytes
  5584 ;; Hardware stack levels used: 1
  5585 ;; Hardware stack levels required when called: 3
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_I2C_2_Master_Start
  5590 ;;		_I2C_2_Master_RepStart
  5591 ;;		_I2C_2_Master_Stop
  5592 ;;		_I2C_2_Master_Write
  5593 ;;		_I2C_2_Master_Read
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text33
  5598   002794                     __ptext33:
  5599                           	callstack 0
  5600   002794                     _I2C_2_Master_Idle:
  5601                           	callstack 25
  5602   002794                     l149:
  5603   002794  010E               	movlb	14	; () banked
  5604   002796  B5D8               	btfsc	216,2,b	;volatile
  5605   002798  EFD0  F013         	goto	u1091
  5606   00279C  EFD2  F013         	goto	u1090
  5607   0027A0                     u1091:
  5608   0027A0  EFCA  F013         	goto	l149
  5609   0027A4                     u1090:
  5610   0027A4                     
  5611                           ; BSR set to: 14
  5612   0027A4  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5613   0027A8  0E1F               	movlw	31
  5614   0027AA  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  5615   0027AC  A4D8               	btfss	status,2,c
  5616   0027AE  EFDB  F013         	goto	u1101
  5617   0027B2  EFDD  F013         	goto	u1100
  5618   0027B6                     u1101:
  5619   0027B6  EFCA  F013         	goto	l149
  5620   0027BA                     u1100:
  5621   0027BA                     
  5622                           ; BSR set to: 14
  5623   0027BA  0012               	return		;funcret
  5624   0027BC                     __end_of_I2C_2_Master_Idle:
  5625                           	callstack 0
  5626                           
  5627 ;; *************** function _I2C_2_Master_Init *****************
  5628 ;; Defined at:
  5629 ;;		line 4 in file "i2c.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used: 1
  5649 ;; Hardware stack levels required when called: 3
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_color_click_init
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text34
  5658   002740                     __ptext34:
  5659                           	callstack 0
  5660   002740                     _I2C_2_Master_Init:
  5661                           	callstack 26
  5662   002740                     
  5663                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5664   002740  010E               	movlb	14	; () banked
  5665   002742  51D9               	movf	217,w,b	;volatile
  5666   002744  0BF0               	andlw	-16
  5667   002746  0908               	iorlw	8
  5668   002748  6FD9               	movwf	217,b	;volatile
  5669   00274A                     
  5670                           ; BSR set to: 14
  5671                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5672   00274A  8BD9               	bsf	217,5,b	;volatile
  5673                           
  5674                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5675   00274C  0E9F               	movlw	159
  5676   00274E  6FD6               	movwf	214,b	;volatile
  5677   002750                     
  5678                           ; BSR set to: 14
  5679                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5680   002750  8A84               	bsf	132,5,c	;volatile
  5681   002752                     
  5682                           ; BSR set to: 14
  5683                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5684   002752  8C84               	bsf	132,6,c	;volatile
  5685   002754                     
  5686                           ; BSR set to: 14
  5687                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5688   002754  9BA7               	bcf	167,5,b	;volatile
  5689   002756                     
  5690                           ; BSR set to: 14
  5691                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5692   002756  9DA7               	bcf	167,6,b	;volatile
  5693                           
  5694                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5695   002758  0E1D               	movlw	29
  5696   00275A  6F1D               	movwf	29,b	;volatile
  5697                           
  5698                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5699   00275C  0E1E               	movlw	30
  5700   00275E  6F1C               	movwf	28,b	;volatile
  5701                           
  5702                           ;i2c.c: 18:   RD5PPS=0x1C;
  5703   002760  0E1C               	movlw	28
  5704   002762  6F6F               	movwf	111,b	;volatile
  5705                           
  5706                           ;i2c.c: 19:   RD6PPS=0x1B;
  5707   002764  0E1B               	movlw	27
  5708   002766  6F70               	movwf	112,b	;volatile
  5709   002768                     
  5710                           ; BSR set to: 14
  5711   002768  0012               	return		;funcret
  5712   00276A                     __end_of_I2C_2_Master_Init:
  5713                           	callstack 0
  5714                           
  5715 ;; *************** function _batteryLevel *****************
  5716 ;; Defined at:
  5717 ;;		line 6 in file "battery.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  batteryQuart    1   13[COMRAM] unsigned char 
  5722 ;;  batteryVolta    1   12[COMRAM] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;Total ram usage:        2 bytes
  5737 ;; Hardware stack levels used: 1
  5738 ;; Hardware stack levels required when called: 4
  5739 ;; This function calls:
  5740 ;;		_ADC_getval
  5741 ;;		_ADC_init
  5742 ;;		___awdiv
  5743 ;; This function is called by:
  5744 ;;		_main
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text35
  5749   002576                     __ptext35:
  5750                           	callstack 0
  5751   002576                     _batteryLevel:
  5752                           	callstack 26
  5753   002576                     
  5754                           ;battery.c: 7:     ADC_init();
  5755   002576  EC56  F014         	call	_ADC_init	;wreg free
  5756                           
  5757                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  5758   00257A  EC6F  F014         	call	_ADC_getval	;wreg free
  5759   00257E  6E0D               	movwf	batteryLevel@batteryVoltage^0,c
  5760   002580                     
  5761                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  5762   002580  C00D  F005         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  5763   002584  6A06               	clrf	(___awdiv@dividend+1)^0,c
  5764   002586  0E00               	movlw	0
  5765   002588  6E08               	movwf	(___awdiv@divisor+1)^0,c
  5766   00258A  0E18               	movlw	24
  5767   00258C  6E07               	movwf	___awdiv@divisor^0,c
  5768   00258E  EC57  F010         	call	___awdiv	;wreg free
  5769   002592  5005               	movf	?___awdiv^0,w,c
  5770   002594  6E0E               	movwf	batteryLevel@batteryQuarter^0,c
  5771   002596                     
  5772                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  5773   002596  A20E               	btfss	batteryLevel@batteryQuarter^0,1,c
  5774   002598  EFD0  F012         	goto	u1771
  5775   00259C  EFD2  F012         	goto	u1770
  5776   0025A0                     u1771:
  5777   0025A0  EFD5  F012         	goto	l351
  5778   0025A4                     u1770:
  5779   0025A4  8E7C               	bsf	124,7,c	;volatile
  5780   0025A6  EFD6  F012         	goto	l352
  5781   0025AA                     l351:
  5782   0025AA  9E7C               	bcf	124,7,c	;volatile
  5783   0025AC                     l352:
  5784                           
  5785                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  5786   0025AC  A00E               	btfss	batteryLevel@batteryQuarter^0,0,c
  5787   0025AE  EFDB  F012         	goto	u1781
  5788   0025B2  EFDD  F012         	goto	u1780
  5789   0025B6                     u1781:
  5790   0025B6  EFE0  F012         	goto	l353
  5791   0025BA                     u1780:
  5792   0025BA  8680               	bsf	128,3,c	;volatile
  5793   0025BC  EFE1  F012         	goto	l355
  5794   0025C0                     l353:
  5795   0025C0  9680               	bcf	128,3,c	;volatile
  5796   0025C2                     l355:
  5797   0025C2  0012               	return		;funcret
  5798   0025C4                     __end_of_batteryLevel:
  5799                           	callstack 0
  5800                           
  5801 ;; *************** function ___awdiv *****************
  5802 ;; Defined at:
  5803 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  dividend        2    4[COMRAM] int 
  5806 ;;  divisor         2    6[COMRAM] int 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  quotient        2   10[COMRAM] int 
  5809 ;;  sign            1    9[COMRAM] unsigned char 
  5810 ;;  counter         1    8[COMRAM] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  2    4[COMRAM] int 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5821 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5823 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;Total ram usage:        8 bytes
  5825 ;; Hardware stack levels used: 1
  5826 ;; Hardware stack levels required when called: 3
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_batteryLevel
  5831 ;;		_vfpfcnvrt
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text36
  5836   0020AE                     __ptext36:
  5837                           	callstack 0
  5838   0020AE                     ___awdiv:
  5839                           	callstack 24
  5840   0020AE  0E00               	movlw	0
  5841   0020B0  6E0A               	movwf	___awdiv@sign^0,c
  5842   0020B2  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  5843   0020B4  EF60  F010         	goto	u1110
  5844   0020B8  EF5E  F010         	goto	u1111
  5845   0020BC                     u1111:
  5846   0020BC  EF66  F010         	goto	l2237
  5847   0020C0                     u1110:
  5848   0020C0  6C07               	negf	___awdiv@divisor^0,c
  5849   0020C2  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  5850   0020C4  B0D8               	btfsc	status,0,c
  5851   0020C6  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  5852   0020C8  0E01               	movlw	1
  5853   0020CA  6E0A               	movwf	___awdiv@sign^0,c
  5854   0020CC                     l2237:
  5855   0020CC  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  5856   0020CE  EF6D  F010         	goto	u1120
  5857   0020D2  EF6B  F010         	goto	u1121
  5858   0020D6                     u1121:
  5859   0020D6  EF73  F010         	goto	l2243
  5860   0020DA                     u1120:
  5861   0020DA  6C05               	negf	___awdiv@dividend^0,c
  5862   0020DC  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  5863   0020DE  B0D8               	btfsc	status,0,c
  5864   0020E0  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  5865   0020E2  0E01               	movlw	1
  5866   0020E4  1A0A               	xorwf	___awdiv@sign^0,f,c
  5867   0020E6                     l2243:
  5868   0020E6  0E00               	movlw	0
  5869   0020E8  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  5870   0020EA  0E00               	movlw	0
  5871   0020EC  6E0B               	movwf	___awdiv@quotient^0,c
  5872   0020EE  5007               	movf	___awdiv@divisor^0,w,c
  5873   0020F0  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  5874   0020F2  B4D8               	btfsc	status,2,c
  5875   0020F4  EF7E  F010         	goto	u1131
  5876   0020F8  EF80  F010         	goto	u1130
  5877   0020FC                     u1131:
  5878   0020FC  EFA8  F010         	goto	l2265
  5879   002100                     u1130:
  5880   002100  0E01               	movlw	1
  5881   002102  6E09               	movwf	___awdiv@counter^0,c
  5882   002104  EF88  F010         	goto	l2251
  5883   002108                     l2249:
  5884   002108  90D8               	bcf	status,0,c
  5885   00210A  3607               	rlcf	___awdiv@divisor^0,f,c
  5886   00210C  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  5887   00210E  2A09               	incf	___awdiv@counter^0,f,c
  5888   002110                     l2251:
  5889   002110  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  5890   002112  EF8D  F010         	goto	u1141
  5891   002116  EF8F  F010         	goto	u1140
  5892   00211A                     u1141:
  5893   00211A  EF84  F010         	goto	l2249
  5894   00211E                     u1140:
  5895   00211E                     l2253:
  5896   00211E  90D8               	bcf	status,0,c
  5897   002120  360B               	rlcf	___awdiv@quotient^0,f,c
  5898   002122  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  5899   002124  5007               	movf	___awdiv@divisor^0,w,c
  5900   002126  5C05               	subwf	___awdiv@dividend^0,w,c
  5901   002128  5008               	movf	(___awdiv@divisor+1)^0,w,c
  5902   00212A  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  5903   00212C  A0D8               	btfss	status,0,c
  5904   00212E  EF9B  F010         	goto	u1151
  5905   002132  EF9D  F010         	goto	u1150
  5906   002136                     u1151:
  5907   002136  EFA2  F010         	goto	l2261
  5908   00213A                     u1150:
  5909   00213A  5007               	movf	___awdiv@divisor^0,w,c
  5910   00213C  5E05               	subwf	___awdiv@dividend^0,f,c
  5911   00213E  5008               	movf	(___awdiv@divisor+1)^0,w,c
  5912   002140  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  5913   002142  800B               	bsf	___awdiv@quotient^0,0,c
  5914   002144                     l2261:
  5915   002144  90D8               	bcf	status,0,c
  5916   002146  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  5917   002148  3207               	rrcf	___awdiv@divisor^0,f,c
  5918   00214A  2E09               	decfsz	___awdiv@counter^0,f,c
  5919   00214C  EF8F  F010         	goto	l2253
  5920   002150                     l2265:
  5921   002150  500A               	movf	___awdiv@sign^0,w,c
  5922   002152  B4D8               	btfsc	status,2,c
  5923   002154  EFAE  F010         	goto	u1161
  5924   002158  EFB0  F010         	goto	u1160
  5925   00215C                     u1161:
  5926   00215C  EFB4  F010         	goto	l2269
  5927   002160                     u1160:
  5928   002160  6C0B               	negf	___awdiv@quotient^0,c
  5929   002162  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  5930   002164  B0D8               	btfsc	status,0,c
  5931   002166  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  5932   002168                     l2269:
  5933   002168  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  5934   00216C  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  5935   002170  0012               	return		;funcret
  5936   002172                     __end_of___awdiv:
  5937                           	callstack 0
  5938                           
  5939 ;; *************** function _ADC_init *****************
  5940 ;; Defined at:
  5941 ;;		line 9 in file "ADC.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      void 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used: 1
  5961 ;; Hardware stack levels required when called: 3
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_batteryLevel
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text37
  5970   0028AC                     __ptext37:
  5971                           	callstack 0
  5972   0028AC                     _ADC_init:
  5973                           	callstack 26
  5974   0028AC                     
  5975                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  5976   0028AC  8C86               	bsf	134,6,c	;volatile
  5977                           
  5978                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  5979   0028AE  010E               	movlb	14	; () banked
  5980   0028B0  8DB4               	bsf	180,6,b	;volatile
  5981                           
  5982                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  5983   0028B2  010F               	movlb	15	; () banked
  5984   0028B4  9958               	bcf	88,4,b	;volatile
  5985   0028B6                     
  5986                           ; BSR set to: 15
  5987                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  5988   0028B6  0EFC               	movlw	-4
  5989   0028B8  1758               	andwf	88,f,b	;volatile
  5990                           
  5991                           ;ADC.c: 17:     ADPCH=0b101110;
  5992   0028BA  0E2E               	movlw	46
  5993   0028BC  6F5F               	movwf	95,b	;volatile
  5994   0028BE                     
  5995                           ; BSR set to: 15
  5996                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  5997   0028BE  9460               	bcf	96,2,c	;volatile
  5998   0028C0                     
  5999                           ; BSR set to: 15
  6000                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6001   0028C0  8860               	bsf	96,4,c	;volatile
  6002   0028C2                     
  6003                           ; BSR set to: 15
  6004                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6005   0028C2  8E60               	bsf	96,7,c	;volatile
  6006   0028C4                     
  6007                           ; BSR set to: 15
  6008   0028C4  0012               	return		;funcret
  6009   0028C6                     __end_of_ADC_init:
  6010                           	callstack 0
  6011                           
  6012 ;; *************** function _ADC_getval *****************
  6013 ;; Defined at:
  6014 ;;		line 23 in file "ADC.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  tmpval          1    4[COMRAM] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used: 1
  6034 ;; Hardware stack levels required when called: 3
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_batteryLevel
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text38
  6043   0028DE                     __ptext38:
  6044                           	callstack 0
  6045   0028DE                     _ADC_getval:
  6046                           	callstack 26
  6047   0028DE                     
  6048                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6049   0028DE  8060               	bsf	96,0,c	;volatile
  6050   0028E0                     l337:
  6051   0028E0  B060               	btfsc	96,0,c	;volatile
  6052   0028E2  EF75  F014         	goto	u1481
  6053   0028E6  EF77  F014         	goto	u1480
  6054   0028EA                     u1481:
  6055   0028EA  EF70  F014         	goto	l337
  6056   0028EE                     u1480:
  6057   0028EE                     
  6058                           ;ADC.c: 31:     tmpval = ADRESH;
  6059   0028EE  CF64 F005          	movff	3940,ADC_getval@tmpval	;volatile
  6060   0028F2                     
  6061                           ;ADC.c: 35:     return tmpval;
  6062   0028F2  5005               	movf	ADC_getval@tmpval^0,w,c
  6063   0028F4  0012               	return		;funcret
  6064   0028F6                     __end_of_ADC_getval:
  6065                           	callstack 0
  6066                           
  6067 ;; *************** function _TxBufferedString *****************
  6068 ;; Defined at:
  6069 ;;		line 66 in file "serial.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  string          2    5[COMRAM] PTR unsigned char 
  6072 ;;		 -> STR_2(1), main@buf(40), 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      void 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;Total ram usage:        2 bytes
  6089 ;; Hardware stack levels used: 1
  6090 ;; Hardware stack levels required when called: 4
  6091 ;; This function calls:
  6092 ;;		_putCharToTxBuf
  6093 ;; This function is called by:
  6094 ;;		_main
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text39
  6099   002514                     __ptext39:
  6100                           	callstack 0
  6101   002514                     _TxBufferedString:
  6102                           	callstack 26
  6103   002514                     
  6104                           ;serial.c: 67:     while(*string != 0){
  6105   002514  EFA1  F012         	goto	l2941
  6106   002518                     l2937:
  6107                           
  6108                           ;serial.c: 68:   putCharToTxBuf(*string++);
  6109   002518  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6110   00251C  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6111   002520  0E00               	movlw	low (__smallconst shr (0+16))
  6112   002522  6EF8               	movwf	tblptru,c
  6113   002524  0E0D               	movlw	(high __ramtop+-1)
  6114   002526  64F7               	cpfsgt	tblptrh,c
  6115   002528  D003               	bra	u1927
  6116   00252A  0008               	tblrd		*
  6117   00252C  50F5               	movf	tablat,w,c
  6118   00252E  D005               	bra	u1920
  6119   002530                     u1927:
  6120   002530  CFF6 FFE9          	movff	tblptrl,fsr0l
  6121   002534  CFF7 FFEA          	movff	tblptrh,fsr0h
  6122   002538  50EF               	movf	indf0,w,c
  6123   00253A                     u1920:
  6124   00253A  ECB5  F013         	call	_putCharToTxBuf
  6125   00253E  4A06               	infsnz	TxBufferedString@string^0,f,c
  6126   002540  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  6127   002542                     l2941:
  6128                           
  6129                           ;serial.c: 67:     while(*string != 0){
  6130   002542  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6131   002546  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6132   00254A  0E00               	movlw	low (__smallconst shr (0+16))
  6133   00254C  6EF8               	movwf	tblptru,c
  6134   00254E  0E0D               	movlw	(high __ramtop+-1)
  6135   002550  64F7               	cpfsgt	tblptrh,c
  6136   002552  D003               	bra	u1937
  6137   002554  0008               	tblrd		*
  6138   002556  50F5               	movf	tablat,w,c
  6139   002558  D005               	bra	u1930
  6140   00255A                     u1937:
  6141   00255A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6142   00255E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6143   002562  50EF               	movf	indf0,w,c
  6144   002564                     u1930:
  6145   002564  0900               	iorlw	0
  6146   002566  A4D8               	btfss	status,2,c
  6147   002568  EFB8  F012         	goto	u1941
  6148   00256C  EFBA  F012         	goto	u1940
  6149   002570                     u1941:
  6150   002570  EF8C  F012         	goto	l2937
  6151   002574                     u1940:
  6152   002574  0012               	return		;funcret
  6153   002576                     __end_of_TxBufferedString:
  6154                           	callstack 0
  6155                           
  6156 ;; *************** function _putCharToTxBuf *****************
  6157 ;; Defined at:
  6158 ;;		line 53 in file "serial.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  byte            1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  byte            1    4[COMRAM] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      void 
  6165 ;; Registers used:
  6166 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6176 ;;Total ram usage:        1 bytes
  6177 ;; Hardware stack levels used: 1
  6178 ;; Hardware stack levels required when called: 3
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_TxBufferedString
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text40
  6187   00276A                     __ptext40:
  6188                           	callstack 0
  6189   00276A                     _putCharToTxBuf:
  6190                           	callstack 26
  6191                           
  6192                           ;incstack = 0
  6193                           ;putCharToTxBuf@byte stored from wreg
  6194   00276A  6E05               	movwf	putCharToTxBuf@byte^0,c
  6195   00276C                     
  6196                           ;serial.c: 54:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  6197   00276C  0E3B               	movlw	59
  6198   00276E  6457               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  6199   002770  EFBC  F013         	goto	u1471
  6200   002774  EFBE  F013         	goto	u1470
  6201   002778                     u1471:
  6202   002778  EFC0  F013         	goto	l2467
  6203   00277C                     u1470:
  6204   00277C  0E00               	movlw	0
  6205   00277E  6E57               	movwf	_TxBufWriteCnt^0,c	;volatile
  6206   002780                     l2467:
  6207                           
  6208                           ;serial.c: 55:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  6209   002780  0E00               	movlw	low _EUSART4TXbuf
  6210   002782  2457               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  6211   002784  6ED9               	movwf	fsr2l,c
  6212   002786  6ADA               	clrf	fsr2h,c
  6213   002788  0E01               	movlw	high _EUSART4TXbuf
  6214   00278A  22DA               	addwfc	fsr2h,f,c
  6215   00278C  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  6216   002790  2A57               	incf	_TxBufWriteCnt^0,f,c	;volatile
  6217   002792  0012               	return		;funcret
  6218   002794                     __end_of_putCharToTxBuf:
  6219                           	callstack 0
  6220                           
  6221 ;; *************** function _Interrupts_init *****************
  6222 ;; Defined at:
  6223 ;;		line 10 in file "interrupts.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		None
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used: 1
  6243 ;; Hardware stack levels required when called: 3
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_main
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text41
  6252   00290E                     __ptext41:
  6253                           	callstack 0
  6254   00290E                     _Interrupts_init:
  6255                           	callstack 27
  6256   00290E                     
  6257                           ;interrupts.c: 12:  TRISBbits.TRISB0=1;
  6258   00290E  8082               	bsf	130,0,c	;volatile
  6259                           
  6260                           ;interrupts.c: 13:     ANSELBbits.ANSELB0=0;
  6261   002910  010E               	movlb	14	; () banked
  6262   002912  919A               	bcf	154,0,b	;volatile
  6263                           
  6264                           ;interrupts.c: 14:     PIE0bits.INT0IE=1;
  6265   002914  8129               	bsf	41,0,b	;volatile
  6266                           
  6267                           ;interrupts.c: 15:     IPR0bits.INT0IP=1;
  6268   002916  811F               	bsf	31,0,b	;volatile
  6269                           
  6270                           ;interrupts.c: 19:     PIE4bits.RC4IE=1;
  6271   002918  872D               	bsf	45,3,b	;volatile
  6272                           
  6273                           ;interrupts.c: 20:     INTCONbits.PEIE=1;
  6274   00291A  8CF2               	bsf	242,6,c	;volatile
  6275                           
  6276                           ;interrupts.c: 21:     INTCONbits.GIE=1;
  6277   00291C  8EF2               	bsf	242,7,c	;volatile
  6278   00291E                     
  6279                           ; BSR set to: 14
  6280   00291E  0012               	return		;funcret
  6281   002920                     __end_of_Interrupts_init:
  6282                           	callstack 0
  6283                           
  6284 ;; *************** function _Buggy_init *****************
  6285 ;; Defined at:
  6286 ;;		line 7 in file "buggysetup.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		None
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used: 1
  6306 ;; Hardware stack levels required when called: 3
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_main
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text42
  6315   002644                     __ptext42:
  6316                           	callstack 0
  6317   002644                     _Buggy_init:
  6318                           	callstack 27
  6319   002644                     
  6320                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  6321   002644  9E7C               	bcf	124,7,c	;volatile
  6322                           
  6323                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  6324   002646  9E84               	bcf	132,7,c	;volatile
  6325                           
  6326                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  6327   002648  9680               	bcf	128,3,c	;volatile
  6328                           
  6329                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  6330   00264A  9688               	bcf	136,3,c	;volatile
  6331                           
  6332                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  6333   00264C  8486               	bsf	134,2,c	;volatile
  6334                           
  6335                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  6336   00264E  010E               	movlb	14	; () banked
  6337   002650  95B4               	bcf	180,2,b	;volatile
  6338                           
  6339                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  6340   002652  8686               	bsf	134,3,c	;volatile
  6341                           
  6342                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  6343   002654  97B4               	bcf	180,3,b	;volatile
  6344                           
  6345                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  6346   002656  9280               	bcf	128,1,c	;volatile
  6347                           
  6348                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  6349   002658  9288               	bcf	136,1,c	;volatile
  6350                           
  6351                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  6352   00265A  987C               	bcf	124,4,c	;volatile
  6353                           
  6354                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  6355   00265C  9884               	bcf	132,4,c	;volatile
  6356                           
  6357                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  6358   00265E  967C               	bcf	124,3,c	;volatile
  6359                           
  6360                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  6361   002660  9684               	bcf	132,3,c	;volatile
  6362                           
  6363                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  6364   002662  97A7               	bcf	167,3,b	;volatile
  6365                           
  6366                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  6367   002664  9080               	bcf	128,0,c	;volatile
  6368                           
  6369                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  6370   002666  9088               	bcf	136,0,c	;volatile
  6371                           
  6372                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  6373   002668  907E               	bcf	126,0,c	;volatile
  6374                           
  6375                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  6376   00266A  9086               	bcf	134,0,c	;volatile
  6377                           
  6378                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  6379   00266C  907F               	bcf	127,0,c	;volatile
  6380                           
  6381                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  6382   00266E  9087               	bcf	135,0,c	;volatile
  6383                           
  6384                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  6385   002670  9E7D               	bcf	125,7,c	;volatile
  6386                           
  6387                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  6388   002672  9E85               	bcf	133,7,c	;volatile
  6389                           
  6390                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  6391   002674  9679               	bcf	121,3,c	;volatile
  6392                           
  6393                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  6394   002676  9681               	bcf	129,3,c	;volatile
  6395   002678                     
  6396                           ; BSR set to: 14
  6397   002678  0012               	return		;funcret
  6398   00267A                     __end_of_Buggy_init:
  6399                           	callstack 0
  6400                           
  6401 ;; *************** function _HighISR *****************
  6402 ;; Defined at:
  6403 ;;		line 29 in file "interrupts.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used: 1
  6423 ;; Hardware stack levels required when called: 2
  6424 ;; This function calls:
  6425 ;;		_getCharFromTxBuf
  6426 ;;		_putCharToRxBuf
  6427 ;;		i2_I2C_2_Master_Start
  6428 ;;		i2_I2C_2_Master_Stop
  6429 ;;		i2_I2C_2_Master_Write
  6430 ;;		i2_isDataInTxBuf
  6431 ;; This function is called by:
  6432 ;;		Interrupt level 2
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	intcode
  6437   000008                     __pintcode:
  6438                           	callstack 0
  6439   000008                     _HighISR:
  6440                           	callstack 23
  6441                           
  6442                           ; BSR set to: 14
  6443                           ;incstack = 0
  6444   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6445   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  6446   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  6447   000012                     
  6448                           ;interrupts.c: 33:     if(PIR0bits.INT0IF){
  6449   000012  010E               	movlb	14	; () banked
  6450   000014  A133               	btfss	51,0,b	;volatile
  6451   000016  EF0F  F000         	goto	i2u201_41
  6452   00001A  EF11  F000         	goto	i2u201_40
  6453   00001E                     i2u201_41:
  6454   00001E  EF1E  F000         	goto	i2l3051
  6455   000022                     i2u201_40:
  6456   000022                     
  6457                           ; BSR set to: 14
  6458                           ;interrupts.c: 34:  LATHbits.LATH3 = 1;
  6459   000022  8680               	bsf	128,3,c	;volatile
  6460   000024                     
  6461                           ; BSR set to: 14
  6462                           ;interrupts.c: 36:     I2C_2_Master_Start();
  6463   000024  ECB0  F014         	call	i2_I2C_2_Master_Start	;wreg free
  6464                           
  6465                           ;interrupts.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  6466   000028  0E52               	movlw	82
  6467   00002A  EC96  F014         	call	i2_I2C_2_Master_Write
  6468                           
  6469                           ;interrupts.c: 38:  I2C_2_Master_Write(0b11100110);
  6470   00002E  0EE6               	movlw	230
  6471   000030  EC96  F014         	call	i2_I2C_2_Master_Write
  6472                           
  6473                           ;interrupts.c: 39:  I2C_2_Master_Stop();
  6474   000034  ECAB  F014         	call	i2_I2C_2_Master_Stop	;wreg free
  6475   000038                     
  6476                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  6477   000038  010E               	movlb	14	; () banked
  6478   00003A  9133               	bcf	51,0,b	;volatile
  6479   00003C                     i2l3051:
  6480                           
  6481                           ; BSR set to: 14
  6482                           ;interrupts.c: 44:     if(PIR4bits.RC4IF){
  6483   00003C  A737               	btfss	55,3,b	;volatile
  6484   00003E  EF23  F000         	goto	i2u202_41
  6485   000042  EF25  F000         	goto	i2u202_40
  6486   000046                     i2u202_41:
  6487   000046  EF28  F000         	goto	i2l3055
  6488   00004A                     i2u202_40:
  6489   00004A                     
  6490                           ; BSR set to: 14
  6491                           ;interrupts.c: 46:     putCharToRxBuf(RC4REG);
  6492   00004A  51E3               	movf	227,w,b	;volatile
  6493   00004C  EC05  F014         	call	_putCharToRxBuf
  6494   000050                     i2l3055:
  6495                           
  6496                           ;interrupts.c: 50:     if(PIR4bits.TX4IF){
  6497   000050  010E               	movlb	14	; () banked
  6498   000052  A537               	btfss	55,2,b	;volatile
  6499   000054  EF2E  F000         	goto	i2u203_41
  6500   000058  EF30  F000         	goto	i2u203_40
  6501   00005C                     i2u203_41:
  6502   00005C  EF40  F000         	goto	i2l256
  6503   000060                     i2u203_40:
  6504   000060                     
  6505                           ; BSR set to: 14
  6506                           ;interrupts.c: 52:     TX4REG = getCharFromTxBuf();
  6507   000060  EC8A  F013         	call	_getCharFromTxBuf	;wreg free
  6508   000064  010E               	movlb	14	; () banked
  6509   000066  6FE4               	movwf	228,b	;volatile
  6510   000068                     
  6511                           ; BSR set to: 14
  6512                           ;interrupts.c: 53:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  6513   000068  EC7B  F014         	call	i2_isDataInTxBuf	;wreg free
  6514   00006C  0900               	iorlw	0
  6515   00006E  A4D8               	btfss	status,2,c
  6516   000070  EF3C  F000         	goto	i2u204_41
  6517   000074  EF3E  F000         	goto	i2u204_40
  6518   000078                     i2u204_41:
  6519   000078  EF40  F000         	goto	i2l256
  6520   00007C                     i2u204_40:
  6521   00007C  010E               	movlb	14	; () banked
  6522   00007E  952D               	bcf	45,2,b	;volatile
  6523   000080                     i2l256:
  6524   000080  C004  FFDA         	movff	??_HighISR+1,fsr2h
  6525   000084  C003  FFD9         	movff	??_HighISR,fsr2l
  6526   000088  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6527   00008A  0011               	retfie		f
  6528   00008C                     __end_of_HighISR:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function i2_isDataInTxBuf *****************
  6532 ;; Defined at:
  6533 ;;		line 61 in file "serial.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      unsigned char 
  6540 ;; Registers used:
  6541 ;;		wreg, status,2, status,0
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used: 1
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_HighISR
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text44
  6561   0028F6                     __ptext44:
  6562                           	callstack 0
  6563   0028F6                     i2_isDataInTxBuf:
  6564                           	callstack 24
  6565   0028F6                     
  6566                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  6567   0028F6  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  6568   0028F8  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6569   0028FA  A4D8               	btfss	status,2,c
  6570   0028FC  EF82  F014         	goto	i2u89_41
  6571   002900  EF85  F014         	goto	i2u89_40
  6572   002904                     i2u89_41:
  6573   002904  0E01               	movlw	1
  6574   002906  EF86  F014         	goto	i2u90_40
  6575   00290A                     i2u89_40:
  6576   00290A  0E00               	movlw	0
  6577   00290C                     i2u90_40:
  6578   00290C  0012               	return		;funcret
  6579   00290E                     __end_ofi2_isDataInTxBuf:
  6580                           	callstack 0
  6581                           
  6582 ;; *************** function i2_I2C_2_Master_Write *****************
  6583 ;; Defined at:
  6584 ;;		line 45 in file "i2c.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  data_byte       1    wreg     unsigned char 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  data_byte       1    1[COMRAM] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6602 ;;Total ram usage:        1 bytes
  6603 ;; Hardware stack levels used: 1
  6604 ;; Hardware stack levels required when called: 1
  6605 ;; This function calls:
  6606 ;;		i2_I2C_2_Master_Idle
  6607 ;; This function is called by:
  6608 ;;		_HighISR
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text45
  6613   00292C                     __ptext45:
  6614                           	callstack 0
  6615   00292C                     i2_I2C_2_Master_Write:
  6616                           	callstack 23
  6617                           
  6618                           ;incstack = 0
  6619                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  6620   00292C  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  6621   00292E                     
  6622                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6623   00292E  ECDE  F013         	call	i2_I2C_2_Master_Idle	;wreg free
  6624   002932                     
  6625                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6626   002932  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  6627   002936  0012               	return		;funcret
  6628   002938                     __end_ofi2_I2C_2_Master_Write:
  6629                           	callstack 0
  6630                           
  6631 ;; *************** function i2_I2C_2_Master_Stop *****************
  6632 ;; Defined at:
  6633 ;;		line 39 in file "i2c.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;		None
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6651 ;;Total ram usage:        0 bytes
  6652 ;; Hardware stack levels used: 1
  6653 ;; Hardware stack levels required when called: 1
  6654 ;; This function calls:
  6655 ;;		i2_I2C_2_Master_Idle
  6656 ;; This function is called by:
  6657 ;;		_HighISR
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text46
  6662   002956                     __ptext46:
  6663                           	callstack 0
  6664   002956                     i2_I2C_2_Master_Stop:
  6665                           	callstack 23
  6666   002956                     
  6667                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6668   002956  ECDE  F013         	call	i2_I2C_2_Master_Idle	;wreg free
  6669   00295A                     
  6670                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6671   00295A  010E               	movlb	14	; () banked
  6672   00295C  85DA               	bsf	218,2,b	;volatile
  6673   00295E                     
  6674                           ; BSR set to: 14
  6675   00295E  0012               	return		;funcret
  6676   002960                     __end_ofi2_I2C_2_Master_Stop:
  6677                           	callstack 0
  6678                           
  6679 ;; *************** function i2_I2C_2_Master_Start *****************
  6680 ;; Defined at:
  6681 ;;		line 27 in file "i2c.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      void 
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;Total ram usage:        0 bytes
  6700 ;; Hardware stack levels used: 1
  6701 ;; Hardware stack levels required when called: 1
  6702 ;; This function calls:
  6703 ;;		i2_I2C_2_Master_Idle
  6704 ;; This function is called by:
  6705 ;;		_HighISR
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text47
  6710   002960                     __ptext47:
  6711                           	callstack 0
  6712   002960                     i2_I2C_2_Master_Start:
  6713                           	callstack 23
  6714   002960                     
  6715                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6716   002960  ECDE  F013         	call	i2_I2C_2_Master_Idle	;wreg free
  6717   002964                     
  6718                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6719   002964  010E               	movlb	14	; () banked
  6720   002966  81DA               	bsf	218,0,b	;volatile
  6721   002968                     
  6722                           ; BSR set to: 14
  6723   002968  0012               	return		;funcret
  6724   00296A                     __end_ofi2_I2C_2_Master_Start:
  6725                           	callstack 0
  6726                           
  6727 ;; *************** function i2_I2C_2_Master_Idle *****************
  6728 ;; Defined at:
  6729 ;;		line 22 in file "i2c.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6747 ;;Total ram usage:        1 bytes
  6748 ;; Hardware stack levels used: 1
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		i2_I2C_2_Master_Start
  6753 ;;		i2_I2C_2_Master_Stop
  6754 ;;		i2_I2C_2_Master_Write
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text48
  6759   0027BC                     __ptext48:
  6760                           	callstack 0
  6761   0027BC                     i2_I2C_2_Master_Idle:
  6762                           	callstack 23
  6763   0027BC                     i2l149:
  6764   0027BC  010E               	movlb	14	; () banked
  6765   0027BE  B5D8               	btfsc	216,2,b	;volatile
  6766   0027C0  EFE4  F013         	goto	i2u175_41
  6767   0027C4  EFE6  F013         	goto	i2u175_40
  6768   0027C8                     i2u175_41:
  6769   0027C8  EFDE  F013         	goto	i2l149
  6770   0027CC                     i2u175_40:
  6771   0027CC                     
  6772                           ; BSR set to: 14
  6773   0027CC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  6774   0027D0  0E1F               	movlw	31
  6775   0027D2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  6776   0027D4  A4D8               	btfss	status,2,c
  6777   0027D6  EFEF  F013         	goto	i2u176_41
  6778   0027DA  EFF1  F013         	goto	i2u176_40
  6779   0027DE                     i2u176_41:
  6780   0027DE  EFDE  F013         	goto	i2l149
  6781   0027E2                     i2u176_40:
  6782   0027E2                     
  6783                           ; BSR set to: 14
  6784   0027E2  0012               	return		;funcret
  6785   0027E4                     __end_ofi2_I2C_2_Master_Idle:
  6786                           	callstack 0
  6787                           
  6788 ;; *************** function _putCharToRxBuf *****************
  6789 ;; Defined at:
  6790 ;;		line 33 in file "serial.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;  byte            1    wreg     unsigned char 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  byte            1    0[COMRAM] unsigned char 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;Total ram usage:        1 bytes
  6809 ;; Hardware stack levels used: 1
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_HighISR
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text49
  6818   00280A                     __ptext49:
  6819                           	callstack 0
  6820   00280A                     _putCharToRxBuf:
  6821                           	callstack 24
  6822                           
  6823                           ; BSR set to: 14
  6824                           ;incstack = 0
  6825                           ;putCharToRxBuf@byte stored from wreg
  6826   00280A  6E01               	movwf	putCharToRxBuf@byte^0,c
  6827   00280C                     
  6828                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  6829   00280C  0E13               	movlw	19
  6830   00280E  6459               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  6831   002810  EF0C  F014         	goto	i2u87_41
  6832   002814  EF0E  F014         	goto	i2u87_40
  6833   002818                     i2u87_41:
  6834   002818  EF10  F014         	goto	i2l2013
  6835   00281C                     i2u87_40:
  6836   00281C  0E00               	movlw	0
  6837   00281E  6E59               	movwf	_RxBufWriteCnt^0,c	;volatile
  6838   002820                     i2l2013:
  6839                           
  6840                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  6841   002820  5059               	movf	_RxBufWriteCnt^0,w,c
  6842   002822  0F3D               	addlw	low _EUSART4RXbuf
  6843   002824  6ED9               	movwf	fsr2l,c
  6844   002826  6ADA               	clrf	fsr2h,c
  6845   002828  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  6846   00282C  2A59               	incf	_RxBufWriteCnt^0,f,c	;volatile
  6847   00282E  0012               	return		;funcret
  6848   002830                     __end_of_putCharToRxBuf:
  6849                           	callstack 0
  6850                           
  6851 ;; *************** function _getCharFromTxBuf *****************
  6852 ;; Defined at:
  6853 ;;		line 47 in file "serial.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      unsigned char 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6871 ;;Total ram usage:        2 bytes
  6872 ;; Hardware stack levels used: 1
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_HighISR
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text50
  6881   002714                     __ptext50:
  6882                           	callstack 0
  6883   002714                     _getCharFromTxBuf:
  6884                           	callstack 24
  6885   002714                     
  6886                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  6887   002714  0E3B               	movlw	59
  6888   002716  6456               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  6889   002718  EF90  F013         	goto	i2u195_41
  6890   00271C  EF92  F013         	goto	i2u195_40
  6891   002720                     i2u195_41:
  6892   002720  EF94  F013         	goto	i2l2947
  6893   002724                     i2u195_40:
  6894   002724  0E00               	movlw	0
  6895   002726  6E56               	movwf	_TxBufReadCnt^0,c	;volatile
  6896   002728                     i2l2947:
  6897                           
  6898                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  6899   002728  2A56               	incf	_TxBufReadCnt^0,f,c	;volatile
  6900   00272A  0456               	decf	_TxBufReadCnt^0,w,c	;volatile
  6901   00272C  6E01               	movwf	??_getCharFromTxBuf^0,c
  6902   00272E  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  6903   002730  0E00               	movlw	low _EUSART4TXbuf
  6904   002732  2401               	addwf	??_getCharFromTxBuf^0,w,c
  6905   002734  6ED9               	movwf	fsr2l,c
  6906   002736  0E01               	movlw	high _EUSART4TXbuf
  6907   002738  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  6908   00273A  6EDA               	movwf	fsr2h,c
  6909   00273C  50DF               	movf	indf2,w,c
  6910   00273E  0012               	return		;funcret
  6911   002740                     __end_of_getCharFromTxBuf:
  6912                           	callstack 0
  6913                           
  6914                           	psect	rparam
  6915   000000                     
  6916                           	psect	temp
  6917   00005A                     btemp:
  6918                           	callstack 0
  6919   00005A                     	ds	1
  6920   000000                     int$flags	set	btemp
  6921   000000                     wtemp8	set	btemp+1
  6922   000000                     ttemp5	set	btemp+1
  6923   000000                     ttemp6	set	btemp+4
  6924   000000                     ttemp7	set	btemp+8
  6925                           
  6926                           	psect	config
  6927                           
  6928                           ;Config register CONFIG1L @ 0x300000
  6929                           ;	External Oscillator mode Selection bits
  6930                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6931                           ;	Power-up default value for COSC bits
  6932                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6933   300000                     	org	3145728
  6934   300000  AA                 	db	170
  6935                           
  6936                           ;Config register CONFIG1H @ 0x300001
  6937                           ;	unspecified, using default values
  6938                           ;	Clock Out Enable bit
  6939                           ;	CLKOUTEN = 0x1, unprogrammed default
  6940                           ;	Clock Switch Enable bit
  6941                           ;	CSWEN = 0x1, unprogrammed default
  6942                           ;	Fail-Safe Clock Monitor Enable bit
  6943                           ;	FCMEN = 0x1, unprogrammed default
  6944   300001                     	org	3145729
  6945   300001  FF                 	db	255
  6946                           
  6947                           ;Config register CONFIG3L @ 0x300004
  6948                           ;	WDT Period Select bits
  6949                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6950                           ;	WDT operating mode
  6951                           ;	WDTE = OFF, WDT Disabled
  6952   300004                     	org	3145732
  6953   300004  9F                 	db	159
  6954                           
  6955                           ;Config register CONFIG3H @ 0x300005
  6956                           ;	unspecified, using default values
  6957                           ;	WDT Window Select bits
  6958                           ;	WDTCWS = 0x7, unprogrammed default
  6959                           ;	WDT input clock selector
  6960                           ;	WDTCCS = 0x7, unprogrammed default
  6961   300005                     	org	3145733
  6962   300005  FF                 	db	255
  6963                           tosu	equ	0xFFF
  6964                           tosh	equ	0xFFE
  6965                           tosl	equ	0xFFD
  6966                           stkptr	equ	0xFFC
  6967                           pclatu	equ	0xFFB
  6968                           pclath	equ	0xFFA
  6969                           pcl	equ	0xFF9
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           indf0	equ	0xFEF
  6977                           postinc0	equ	0xFEE
  6978                           postdec0	equ	0xFED
  6979                           preinc0	equ	0xFEC
  6980                           plusw0	equ	0xFEB
  6981                           fsr0h	equ	0xFEA
  6982                           fsr0l	equ	0xFE9
  6983                           wreg	equ	0xFE8
  6984                           indf1	equ	0xFE7
  6985                           postinc1	equ	0xFE6
  6986                           postdec1	equ	0xFE5
  6987                           preinc1	equ	0xFE4
  6988                           plusw1	equ	0xFE3
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           bsr	equ	0xFE0
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           preinc2	equ	0xFDC
  6996                           plusw2	equ	0xFDB
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160     85     157
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    S2918$buffer	PTR unsigned char  size(2) Largest target is 0

    S2918$source	PTR const unsigned char  size(2) Largest target is 0

    S50DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S50DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 40
		 -> main@buf(BANK0[40]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), STR_2(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _batteryLevel->___awdiv
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf
    _HighISR->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                87    87      0   37254
                                              0 BANK0     85    85      0
                         _Buggy_init
                    _Interrupts_init
                   _TxBufferedString
                       _batteryLevel
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                          _sendTxBuf
                            _sprintf
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             33    15     18    3439
                                             29 COMRAM    31    13     18
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    3088
                                             25 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2738
                                             14 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   27884
                                             34 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    4725
                                             22 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2285
                                             17 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     407
                                              8 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    1965
                                             30 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     193
                                              4 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     674
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     695
                                             12 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     219
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      37
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _TxBufferedString
     _putCharToTxBuf
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_I2C_2_Master_Start
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Write
     i2_I2C_2_Master_Idle
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     55      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllll     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      50        0.0%
BITBIGSFRllllll      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      61        0.0%
BITBIGSFRllllhl      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllll      3      0       0      60        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRllllll      1      0       0      62        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      65        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 05 17:25:42 2024

                    _white_Light 2830                               l63 141E                               l65 142C  
                             l67 1452                               l97 2512                     ___awdiv@sign 000A  
            ___wmul@multiplicand 0007                 main@turnDuration 008E                ??_Interrupts_init 0005  
                            l100 2872                              l111 1ECE                              l103 284C  
                            l105 2852                              l115 2440                              l108 1386  
                            l119 2442                              l152 27BA                              l161 294A  
                            l306 2792                              l146 2768                              l315 2574  
                            l155 2954                              l340 28F4                              l164 292A  
                            l420 235A                              l149 2794                              l501 15D2  
                            l309 28DC                              l334 28C4                              l158 2940  
                            l510 16D6                              l247 291E                              l351 25AA  
                            l167 2604                              l319 28AA                              l352 25AC  
                            l337 28E0                              l353 25C0                              l513 1714  
                            l505 163E                              l610 1FDA                              l339 28EE  
                            l355 25C2                              l531 2808                              l427 1D8C  
                            l507 1662                              l443 11B0                              l445 11B0  
                            l198 2678                              l542 249C                              l470 1C38  
                            l462 1B72                              l543 24AC                              l287 2890  
                            l464 1B96                              l481 19E0                              l458 1B06  
                            l467 1C0A                              l475 1950                              l492 2060  
                            l484 1A54                              l487 1A82                              l479 19BC  
                            l496 20AC                              l762 2170                              l775 2220  
                            _abs 26AE                     ___awmod@sign 000A                    ?_color_detect 0005  
                            wreg 0FE8                  _color_normalise 1D8E                             l1022 23C6  
                           ?_abs 000B                             l1029 23CE                             l1209 26AC  
                           l1260 26E0                             l2221 27A4                             l2301 2200  
                           l1253 2642                             l2231 20B2                             l2311 2364  
                           l2223 27E4                             l2303 2210                             l1247 18CC  
                           l1272 22CA                             l2241 20E2                             l2233 20C0  
                           l2321 239A                             l2313 2376                             l2225 2800  
                           l2305 2218                             l1257 26C8                             l2401 1818  
                           l3201 1512                             l2251 2110                             l2243 20E6  
                           l2235 20C8                             l2219 2794                             l2323 23B0  
                           l2315 237E                             l1283 296A                             l2331 2222  
                           l2411 186C                             l2403 182A                             l3203 151C  
                           l3131 138C                             l2261 2144                             l2253 211E  
                           l2245 20EE                             l2237 20CC                             l2229 20AE  
                           l2325 23B8                             l2317 2386                             l2309 235C  
                           l2501 194C                             l2341 229A                             l2333 2232  
                           l2413 1886                             l2405 183A                             l2421 18AA  
                           l3205 1520                             l3141 13A4                             l3133 1390  
                           l2263 214A                             l2255 2124                             l2247 2100  
                           l2239 20DA                             l2431 2750                             l2351 2950  
                           l2327 23BA                             l2319 2394                             l2511 19B8  
                           l2503 1974                             l2335 2242                             l2407 184A  
                           l2415 1888                             l3207 1530                             l3151 13C6  
                           l3143 13B0                             l3135 1394                             l2257 213A  
                           l2249 2108                             l2265 2150                             l2433 2752  
                           l2353 2922                             l2441 2938                             l2329 23C0  
                           l2361 1C3A                             l2601 156A                             l2521 1A2C  
                           l2513 19E6                             l2505 1978                             l2281 2190  
                           l2273 2172                             l2345 26AE                             l2337 224C  
                           l2409 185A                             l2417 189E                             l3161 13E2  
                           l3153 13CE                             l3145 13B6                             l3137 1398  
                           l3129 1388                             l2267 2160                             l2259 2142  
                           l2435 2754                             l2427 2740                             l2355 2926  
                           l2451 25DA                             l2443 293C                             l2371 1CF6  
                           l2363 1C54                             l2611 15BE                             l2603 1576  
                           l2523 1A34                             l2507 199C                             l2291 21C8  
                           l2283 219E                             l2275 2176                             l2347 26BC  
                           l2339 2268                             l3171 1402                             l3163 13E6  
                           l3155 13D6                             l3147 13BA                             l3139 1398  
                           l2269 2168                             l2437 2756                             l2429 274A  
                           l2349 294C                             l2357 2942                             l2453 2600  
                           l2445 25C6                             l2373 1D10                             l2365 1CA2  
                           l2541 2038                             l2533 1FDC                             l2621 162A  
                           l2613 15CE                             l2605 15A2                             l2525 1A40  
                           l2517 19F8                             l2509 19A8                             l2293 21D6  
                           l2285 21A6                             l2277 2184                             l2381 1740  
                           l2701 2606                             l3181 1416                             l3173 1406  
                           l3165 13EE                             l3157 13DA                             l3149 13BE  
                           l2463 276C                             l2471 28AC                             l2359 2946  
                           l2439 2856                             l2455 2602                             l2447 25CA  
                           l2375 1D50                             l2367 1CB4                             l2543 2040  
                           l2551 2088                             l2535 1FF8                             l2631 16A6  
                           l2623 163A                             l2615 15F6                             l2607 15AA  
                           l2527 1A50                             l2519 1A24                             l2295 21EC  
                           l2287 21B8                             l2279 218C                             l2391 1792  
                           l2383 174C                             l2703 260E                             l3191 1468  
                           l3183 141A                             l3175 140A                             l3167 13F6  
                           l3159 13DE                             l2465 277C                             l2481 28DE  
                           l2473 28B6                             l2721 24BC                             l2449 25D2  
                           l2801 12CC                             l2369 1CB8                             l2545 204C  
                           l2537 2004                             l2641 16FA                             l2633 16AE  
                           l2625 1668                             l2609 15B2                             l2617 15FA  
                           l2561 1ADE                             l2553 1A84                             l2529 1A78  
                           l2297 21F4                             l2289 21C0                             l2393 17AA  
                           l2385 1750                             l2377 1716                             l2705 261E  
                           l3193 1482                             l3185 1434                             l3177 140E  
                           l3169 13FE                             l2715 2644                             l2467 2780  
                           l2483 28F2                             l2475 28BE                             l2731 24F4  
                           l2723 24CC                             l2651 2462                             l2811 1E02  
                           l2803 1328                             l2547 205C                             l2539 2030  
                           l2635 16B6                             l2619 161E                             l2563 1AE6  
                           l2571 1B2E                             l2555 1A9E                             l2491 18F4  
                           l2459 28C6                             l2299 21FA                             l2395 17B4  
                           l2387 175A                             l2379 1738                             l2707 263A  
                           l3195 149C                             l3187 144C                             l3179 1412  
                           l2469 2790                             l2477 28C0                             l2733 24FE  
                           l2725 24D6                             l2717 24AE                             l2821 23F2  
                           l2661 1EE2                             l2653 2472                             l2813 1E68  
                           l2805 1344                             l2741 2880                             l2549 2084  
                           l2637 16C2                             l2645 1704                             l2629 167A  
                           l2573 1B52                             l2565 1AF2                             l2557 1AAA  
                           l2493 1920                             l2397 17CC                             l2389 1776  
                           l3197 14C4                             l3189 1460                             l2479 28C2  
                           l2735 2508                             l2727 24E0                             l2719 24B2  
                           l2823 2408                             l2815 23D0                             l2671 1F18  
                           l2663 1EF2                             l2655 247C                             l2647 2444  
                           l2807 1D8E                             l2751 22CC                             l2743 288A  
                           l2639 16D2                             l2591 1BF6                             l2583 1BAE  
                           l2575 1B5E                             l2567 1B02                             l2559 1AD6  
                           l2495 1928                             l2487 18CE                             l2399 17FC  
                           l3199 150E                             l2729 24EA                             l2825 2410  
                           l2817 23D4                             l2681 1F60                             l2673 1F28  
                           l2665 1EF6                             l2657 1ED0                             l2649 2454  
                           l2809 1DA0                             l2761 2334                             l2753 22DC  
                           l2745 288C                             l2737 2874                             l2593 1C06  
                           l2585 1BDA                             l2577 1B6E                             l2569 1B2A  
                           l2497 1930                             l2489 18E8                             l2905 1182  
                           l2841 0EA8                             l2833 0E38                             l2921 2682  
                           l2827 2426                             l2819 23EA                             l2691 1FA4  
                           l2683 1F6A                             l2675 1F3E                             l2667 1F04  
                           l2659 1ED4                             l2771 234E                             l2763 2336  
                           l2755 2302                             l2747 288E                             l2739 287E  
                           l2595 1C2E                             l2587 1BE2                             l2579 1B9C  
                           l2499 193C                             l2907 1194                             l2835 0E48  
                           l2843 0EC0                             l2931 2892                             l2923 268A  
                           l2749 290E                             l2941 2542                             l2781 25A4  
                           l2829 243C                             l2685 1F88                             l2677 1F46  
                           l2693 1FAA                             l2669 1F14                             l2773 2358  
                           l2765 2340                             l2757 2306                             l2589 1BEA  
                           l2861 0FA8                             l2845 0ED2                             l2853 0F36  
                           l2837 0E60                             l2933 28A6                             l2925 2692  
                           l2935 2514                             l2783 25BA                             l2775 2576  
                           l2695 1FBA                             l2687 1F98                             l2679 1F52  
                           l2791 11CC                             l2767 2342                             l2759 232A  
                           l2599 1552                             l2871 101E                             l2863 0FC0  
                           l2855 0F48                             l2847 0EEA                             l2839 0E78  
                           l2927 26A2                             l2919 267A                             l2937 2518  
                           l2777 2580                             l2697 1FCA                             l2689 1F9A  
                           l2793 11E4                             l2769 234C                             l2873 1036  
                           l2881 10C6                             l2865 0FF0                             l2857 0F60  
                           l2849 0F02                             l2785 2832                             l2939 253E  
                           l2779 2596                             l2795 1238                             l2883 10D8  
                           l2875 104E                             l2859 0F78                             l2787 2842  
                           l2797 1254                             l2789 11B2                             l2885 10F0  
                           l2893 1154                             l2877 107E                             l2869 100C  
                           l2799 12B0                             l2895 1166                             l2887 1108  
                           l2879 1096                             l2889 1138                             STR_1 0E01  
                           STR_2 0E36                             u1100 27BA                             u1101 27B6  
                           u1110 20C0                             u1111 20BC                             u1120 20DA  
                           u1200 21D6                             u1121 20D6                             u1201 21D2  
                           u1130 2100                             u1210 21EC                             u1131 20FC  
                           u1211 21E8                             u1140 211E                             u1220 2210  
                           u1300 26BC                             u1141 211A                             u1221 220C  
                           u1301 26B8                             u1150 213A                             u1230 2376  
                           u1310 1C54                             u1151 2136                             u1231 2372  
                           u1311 1C50                             u1160 2160                             u1240 2394  
                           u1320 1D10                             u1400 184A                             u1161 215C  
                           u1241 2390                             u1321 1D0C                             u1401 1846  
                           u1090 27A4                             u1250 23B0                             u1170 2184  
                           u1410 185A                             u1330 1738                             u1091 27A0  
                           u1251 23AC                             u1171 2180                             u1411 1856  
                           u1331 1734                             u2131 13AA                             u1500 199C  
                           u1180 219E                             u1260 2232                             u1420 189A  
                           u1340 1776                             u2140 142C                             u1501 1998  
                           u1181 219A                             u1261 222E                             u1421 1896  
                           u1341 1772                             u2141 1428                             u1430 25EE  
                           u1510 19E0                             u1190 21B8                             u1270 2242  
                           u1350 1792                             u2150 1460                             u1431 25E6  
                           u1511 19DC                             u2207 0E6A                             u1191 21B4  
                           u1271 223E                             u1351 178E                             u2151 145C  
                           u1600 1C2E                             u1520 19F4                             u1280 2268  
                           u1360 17C8                     _BAUD4CONbits 0EE9                             u1601 1C2A  
                           u1521 19F0                             u2217 0E9A                             u1281 2264  
                           u1361 17C2                             u2161 1472                             u1610 15F6  
                           u1530 1A78                             u1450 28DA                             u1290 229A  
                           u1370 17CA                             u1611 15F2                             u1531 1A74  
                           u2307 10A0                             u2227 0EF4                             u1451 28D4  
                           u1291 2296                             u2171 148C                             u1700 1F3E  
                           u1540 2084                             u1620 161E                             u1460 28DC  
                           u1380 182A                             u1701 1F3A                             u1541 2080  
                           u1621 161A                             u2317 10FA                             u2237 0F24  
                           u1381 1826                             u1470 277C                             u1710 1F60  
                           u1550 20AC                             u1630 1662                             u1390 183A  
                           u1471 2778                             u1711 1F5C                             u1551 20A8  
                           u1631 165E                             u2407 1630                             u2327 112A  
                           u2247 0F6A                             u1391 1836                             u1480 28EE  
                           u1800 23EA                             u1720 1F88                             u1448 25F0  
                           u1640 1676                             u1560 1B2A                             u1481 28EA  
                           u1801 23E6                             u1721 1F84                             u2417 16C8  
                           u1641 1672                             u1561 1B26                             u2337 1942  
                           u2257 0F9A                             u1810 2408                             u1730 1FBA  
                           u1650 16FA                             u1570 1B52                             u1490 1974  
                           _T2PR 0FBC                             u1811 2404                             u1731 1FB6  
                           u2427 2052                             u1651 16F6                             u1571 1B4E  
                           u2347 19AE                             u1491 1970                             u2267 0FCA  
                           u2187 1440                             u1820 2426                             u1660 2462  
                           u1580 1B96                             u1900 1194                             u1740 263A  
                           u2437 24C2                             u1821 2422                             u1661 245E  
                           u1581 1B92                             u2357 1A46                             u1901 1190  
                           u2277 0FFA                             u1741 2636                             u2197 153C  
                           u1830 243C                             u1670 249C                             u1590 1BAA  
                           u1910 28A6                             u1831 2438                             u1671 2498  
                           u1591 1BA6                             u2367 1AF8                             u2287 1040  
                           u1911 28A2                             u1920 253A                             u1680 1EE2  
                           u1840 0E48                             u1681 1EDE                             u2377 1B64  
                           u2297 1070                             u1841 0E44                             u1930 2564  
                           u1770 25A4                             u1690 1F04                             u1850 0ED2  
                           u1771 25A0                             u1691 1F00                             u2387 1BFC  
                           u1851 0ECE                             u1940 2574                             u1780 25BA  
                           u1860 0F48                             u1941 2570                             u1781 25B6  
                           u2397 15C4                             u1861 0F44                             u1870 101E  
                           u1790 2842                             u1927 2530                             u1871 101A  
                           u1791 283E                             u1880 10D8                             u1937 255A  
                           u1881 10D4                             u1890 1166                             u1891 1162  
                           abs@a 000B                             _dbuf 00DD                             _main 1388  
                           _prec 0053                             _move 0E38                             fsr0h 0FEA  
                           fsr1h 0FE2                             indf0 0FEF                             fsr2h 0FDA  
                           fsr0l 0FE9                             indf1 0FE7                             indf2 0FDF  
                           fsr1l 0FE1                             fsr2l 0FD9                             btemp 005A  
                           prodh 0FF4                             prodl 0FF3                             start 008C  
            main@reverseDuration 008C                 __end_of_ADC_init 28C6                  __end_of_HighISR 008C  
                   ___param_bank 0000                            ??_abs 000D             __end_of_batteryLevel 25C4  
                __end_of___aldiv 1FDC                            ?_main 0001                            _ADPCH 0F5F  
                __end_of___awdiv 2172                            ?_move 0023                  __end_of___awmod 2222  
                ___awdiv@divisor 0007                  __end_of___lwdiv 23D0                            i2l302 273E  
                          i2l152 27E2                            i2l161 295E                            i2l155 2968  
                          i2l164 2936                            i2l149 27BC                            i2l309 290C  
                          i2l256 0080                            i2l295 282E                  ___awdiv@counter 0009  
                 ??_color_detect 000D                     vfpfcnvrt@fmt 0010              ___lmul@multiplicand 0009  
     __end_of_I2C_2_Master_Start 2956       __end_of_I2C_2_Master_Write 292C                            _flags 0055  
                     _Buggy_init 2644                            _fputc 2222                            _width 0051  
                          _putch 296A                            tablat 0FF5                            plusw0 0FEB  
                          plusw2 0FDB                            ttemp5 005B                            ttemp6 005E  
                          ttemp7 0062                            status 0FD8                            wtemp8 005B  
                __end_of_sprintf 26AE                color_detect@color 000D                     main@turnRamp 008F  
          _I2C_2_Master_RepStart 2938               putCharToRxBuf@byte 0001                  __initialization 26E2  
                   __end_of_main 1552                     __end_of_move 11B2                  i2_isDataInTxBuf 28F6  
             putCharToTxBuf@byte 0005              move@reverseDuration 0027                           ??_main 0060  
                         ??_move 002C                    __activetblptr 0002          __end_of_color_normalise 1ED0  
                   ?_setMotorPWM 0012                           ?_fputc 0005                           _ADRESH 0F64  
                         _CCPR1H 0FAA                           _CCPR2H 0FA6                           _CCPR3H 0F25  
                         _CCPR4H 0F21                 ___awdiv@dividend 0005                           ?_putch 0001  
                         _RC0PPS 0E62                           _RC4REG 0EE3                           _RE2PPS 0E74  
                         _RC7PPS 0E69                           _RD5PPS 0E6F                           i2l2011 281C  
                         _RE4PPS 0E76                           _RD6PPS 0E70                           i2l2013 2820  
                         i2l2015 282C                           i2l2009 280C                           i2l2037 28F6  
                         i2l3051 003C                           i2l3043 0012                           i2l3061 007C  
                         i2l3053 004A                           i2l3045 0022                           i2l3055 0050  
                         i2l3047 0024                           i2l3057 0060                           i2l3049 0038  
                         i2l3059 0068                           i2l2711 27BC                           i2l2713 27CC  
                         i2l2943 2714                           i2l2951 2960                           i2l2945 2724  
                         i2l2953 2964                           i2l2961 2932                           i2l2947 2728  
                         i2l2955 2956                           _RG6PPS 0E88                           i2l2957 295A  
                         i2l2959 292E                    vfpfcnvrt@done 0013                        ??_HighISR 0003  
       __end_of_color_click_init 2514                           _RX4PPS 0E15                           _TX4REG 0EE4  
                   ??_ADC_getval 0005                     _CCPTMRS0bits 0FAD                     vfprintf@cfmt 001D  
               _getCharFromTxBuf 2714                           ___lmul 2444                        ??___aldiv 0019  
                         ___wmul 27E4                        ??___awdiv 0009                        ??___awmod 0009  
                      ??___lwdiv 000F               color_detect@RGBC_n 0005                           clear_0 26E8  
                         clear_1 26F4                           clear_2 2700                 ___awdiv@quotient 000B  
                ___awmod@divisor 0007                           isa$std 0001                  ___awmod@counter 0009  
                         fputc@c 0005                ?_TxBufferedString 0006                           move@mL 0023  
                         move@mR 0024                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8                        ?_ADC_init 0001  
             ??_TxBufferedString 0008                           putch@c 0001                 __end_of_vfprintf 2644  
                    ?_Buggy_init 0001                ??_initDCmotorsPWM 0007                        ??_sprintf 0030  
             __end_of_ADC_getval 28F6                 __end_of_turnLeft 1C3A            __end_of_isDataInTxBuf 28DE  
                     __accesstop 0060          __end_of__initialization 2706                  fullSpeedAhead@i 001E  
                  main@turnSpeed 008D           ?_I2C_2_Master_RepStart 0001          __end_ofi2_isDataInTxBuf 290E  
                  ___rparam_used 0001             __end_of_color_detect 2444                  _Interrupts_init 290E  
                 __pcstackCOMRAM 0001                     ?_white_Light 0001                    __end_of_fputc 22CC  
                  __end_of_putch 296C                 _reverseOneSquare 1552                 ?_color_normalise 001F  
                     ??_ADC_init 0005                          ??_fputc 0008                          ??_putch 0005  
                   _batteryLevel 2576                       __pbssBANK0 00B5                       __pbssBANK1 0100  
              _color_writetoaddr 2854                     _T2CLKCONbits 0FBF               ?_color_writetoaddr 0007  
                        ?___lmul 0005                          ?___wmul 0005                   ___lmul@product 000D  
            ??_color_writetoaddr 0008                          _SP4BRGH 0EE6                          _SP4BRGL 0EE5  
     fullSpeedAhead@straightRamp 001A                          i2u90_40 290C            turnRight@turnDuration 001A  
                        i2u87_40 281C                          i2u87_41 2818                          i2u89_40 290A  
                        i2u89_41 2904                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
                     _color_read 11B2          __end_of_Interrupts_init 2920           color_writetoaddr@value 0007  
                        _HighISR 0008        __end_of_color_writetoaddr 2874                 ?i2_isDataInTxBuf 0001  
                      _ADREFbits 0F58               _I2C_2_Master_Start 294C                       _initUSART4 2874  
            i2_I2C_2_Master_Idle 27BC               _I2C_2_Master_Write 2920                          __Hparam 0000  
            i2_I2C_2_Master_Stop 2956                          __Lparam 0000                          ___aldiv 1ED0  
                        ___awdiv 20AE                          ___awmod 2172              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 235C              ?_I2C_2_Master_Write 0001                        ?_vfprintf 001A  
                   __psmallconst 0E00                          __pcinit 26E2                          __ramtop 0E00  
                      ?_turnLeft 0017                          __ptext0 1388                          __ptext1 2830  
                        __ptext2 267A                          __ptext3 2606                          __ptext4 1716  
                        __ptext5 2222                          __ptext6 296A                          __ptext7 26AE  
                        __ptext8 2172                          __ptext9 2892             ?i2_I2C_2_Master_Idle 0001  
                      _T2CONbits 0FBD             ?i2_I2C_2_Master_Stop 0001                 ___awmod@dividend 0005  
               ___aldiv@dividend 0011                        _T2HLTbits 0FBE                    _RxBufWriteCnt 0059  
       __end_of_getCharFromTxBuf 2740                          main@buf 0062                          _sprintf 267A  
           ??_I2C_2_Master_Start 0006             ??_I2C_2_Master_Write 0006            color_normalise@RGBC_n 0027  
           end_of_initialization 2706                __end_of_sendTxBuf 28AC                 ADC_getval@tmpval 0005  
              reverseOneSquare@i 001F                          fputc@fp 0007                    __Lmediumconst 0000  
              ?_color_click_init 0001               ??_color_click_init 0009                __end_of_vfpfcnvrt 18CE  
               ___aldiv@quotient 001B       batteryLevel@batteryQuarter 000E                          postdec2 0FDD  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
               vfpfcnvrt@convarg 0015       batteryLevel@batteryVoltage 000D                       main@F14568 00B5  
                     ??_vfprintf 001D                  _initDCmotorsPWM 22CC                       ??_turnLeft 001C  
                      _PORTFbits 0F8E               setMotorPWM@negDuty 0016            ??i2_I2C_2_Master_Idle 0001  
                  move@turnSpeed 0029                __end_of_turnRight 1A84            ??i2_I2C_2_Master_Stop 0002  
                     main@RGBC_n 0091                     _color_detect 23D0                        _TRISAbits 0F81  
             setMotorPWM@posDuty 0015                        _TRISBbits 0F82                        _TRISCbits 0F83  
                      _TRISDbits 0F84                        _TRISEbits 0F85                        _TRISFbits 0F86  
                      _TRISGbits 0F87                        _TRISHbits 0F88                 white_Light@state 0005  
                   ??_Buggy_init 0005                 fullSpeedAhead@mL 0017                 fullSpeedAhead@mR 0018  
                    ?_color_read 0009         color_writetoaddr@address 0008          ??_I2C_2_Master_RepStart 0006  
       __end_of_reverseOneSquare 1716                 ?_Interrupts_init 0001                      _CCP1CONbits 0FAB  
                   _EUSART4RXbuf 003D                     _EUSART4TXbuf 0100                      _CCP2CONbits 0FA7  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
                     main@motorL 00A1                       main@motorR 00AB                   color_read@RGBC 0009  
                 _fullSpeedAhead 1FDC                   __end_of___lmul 24AE             turnLeft@turnDuration 001A  
                    vfpfcnvrt@ap 0011                      vfpfcnvrt@cp 0014                      vfpfcnvrt@fp 000F  
                 __end_of___wmul 280A               __end_of_Buggy_init 267A              start_initialization 26E2  
                    __end_of_abs 26E2                    _TxBufWriteCnt 0057          __end_of_initDCmotorsPWM 235C  
                    vfprintf@fmt 001B           __end_of_fullSpeedAhead 20AE               turnRight@cur_power 0021  
                       ??___lmul 000D                         ??___wmul 0009                   _putCharToRxBuf 280A  
                 _putCharToTxBuf 276A              color_normalise@RGBC 001F    i2I2C_2_Master_Write@data_byte 0002  
   reverseOneSquare@straightRamp 001B     __end_ofi2_I2C_2_Master_Start 296A     __end_ofi2_I2C_2_Master_Write 2938  
              turnLeft@cur_power 0021                      __pbssCOMRAM 003D                    __pcstackBANK0 0060  
                       ?_HighISR 0001                 ___lwdiv@dividend 000B           __end_of_putCharToRxBuf 2830  
         __end_of_putCharToTxBuf 2794                  ?_fullSpeedAhead 0017                        __pintcode 0008  
                       ?___aldiv 0011               turnRight@turnSpeed 0019                         ?___awdiv 0005  
                       ?___awmod 0005                         ?___lwdiv 000B           TxBufferedString@string 0006  
           I2C_2_Master_Read@ack 0007             I2C_2_Master_Read@tmp 0008                      __smallconst 0E00  
              _I2C_2_Master_Idle 2794                _I2C_2_Master_Init 2740                _I2C_2_Master_Read 25C4  
              turnLeft@turnSpeed 0019                _I2C_2_Master_Stop 2942                     _RxBufReadCnt 0058  
                       _ADC_init 28AC               ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0013               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000F         initDCmotorsPWM@PWMperiod 0005                         ?_sprintf 001E  
              ?_getCharFromTxBuf 0001               ??_getCharFromTxBuf 0001                move@straightSpeed 0026  
                ___aldiv@divisor 0015              ??_I2C_2_Master_Idle 0005                  ___aldiv@counter 0019  
            ??_I2C_2_Master_Init 0005              ??_I2C_2_Master_Read 0006                   ___wmul@product 0009  
                       _LATAbits 0F79              ??_I2C_2_Master_Stop 0006                         _LATCbits 0F7B  
                  _isDataInTxBuf 28C6                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                 _TxBufferedString 2514                         _LATGbits 0F7F  
                       _LATHbits 0F80                        _sendTxBuf 2892                         _IPR0bits 0E1F  
                       _PIE0bits 0E29                         _PIE4bits 0E2D                         i2u201_40 0022  
                       i2u201_41 001E                         i2u202_40 004A                         i2u202_41 0046  
                       i2u203_40 0060                         i2u203_41 005C                         i2u204_40 007C  
                       i2u204_41 0078                      turnRight@mL 0017                      turnRight@mR 0018  
                       i2u175_40 27CC                         i2u175_41 27C8                         _PIR0bits 0E33  
                       i2u176_40 27E2                         i2u176_41 27DE                         i2u195_40 2724  
                       i2u195_41 2720                         _PIR4bits 0E37                  ?_putCharToRxBuf 0001  
               ?_initDCmotorsPWM 0005                  ?_putCharToTxBuf 0001      fullSpeedAhead@straightSpeed 0019  
                       _SSP2CON2 0EDA                         _SSP2STAT 0ED8                     move@turnRamp 002B  
                      _vfpfcnvrt 1716                       _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 27BC  
      __end_of_I2C_2_Master_Init 276A        __end_of_I2C_2_Master_Read 2606                ___wmul@multiplier 0005  
      __end_of_I2C_2_Master_Stop 294C                     setMotorPWM@m 0012      I2C_2_Master_Write@data_byte 0006  
                      main@color 0090                     _TxBufReadCnt 0056                        _turnRight 18CE  
                     vfpfcnvrt@c 0019                     ??_color_read 000A                ___lmul@multiplier 0005  
                 ?_isDataInTxBuf 0001    __end_of_I2C_2_Master_RepStart 2942                ?_reverseOneSquare 0017  
            __end_of_setMotorPWM 1D8E                       ?_sendTxBuf 0001                     ??_initUSART4 0005  
           i2_I2C_2_Master_Start 2960  reverseOneSquare@reverseDuration 001A             i2_I2C_2_Master_Write 292C  
             ??_reverseOneSquare 001C                         __Hrparam 0000                ??_color_normalise 0028  
                     _ADC_getval 28DE                       vfprintf@ap 001C                         __Lrparam 0000  
                     vfprintf@fp 001A                    ??_white_Light 0005      __end_ofi2_I2C_2_Master_Idle 27E4  
    __end_ofi2_I2C_2_Master_Stop 2960                       ?_vfpfcnvrt 000F               __end_of_color_read 1388  
                     _ANSELBbits 0E9A                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                     sprintf@fmt 001F    reverseOneSquare@straightSpeed 0019                  ___lwdiv@divisor 000D  
             __end_of_initUSART4 2892                  ___lwdiv@counter 0011                turnRight@turnRamp 001B  
                     ?_turnRight 0017                         __ptext10 28C6                         __ptext11 0E38  
                       __ptext20 22CC                         __ptext12 18CE                         __ptext21 11B2  
                       __ptext13 1A84                         __ptext30 2920                         __ptext22 2938  
                       __ptext14 1552                         __ptext31 2942                         __ptext23 25C4  
                       __ptext15 1FDC                         __ptext40 276A                         __ptext32 294C  
                       __ptext24 1D8E                         __ptext16 1C3A                         __ptext41 290E  
                       __ptext33 2794                         __ptext25 2444                         __ptext17 27E4  
                       __ptext50 2714                         __ptext42 2644                         __ptext34 2740  
                       __ptext26 1ED0                         __ptext18 235C                         __ptext35 2576  
                       __ptext27 23D0                         __ptext19 2874                         __ptext44 28F6  
                       __ptext36 20AE                         __ptext28 24AE                         __ptext45 292C  
                       __ptext37 28AC                         __ptext29 2854                         __ptext46 2956  
                       __ptext38 28DE                         __ptext47 2960                         __ptext39 2514  
                       __ptext48 27BC                         __ptext49 280A                        move@color 0025  
                  ?_batteryLevel 0001                     _SSP2CON1bits 0ED9                     _SSP2CON2bits 0EDA  
               turnLeft@turnRamp 001B                       turnLeft@mL 0017                       turnLeft@mR 0018  
          ?i2_I2C_2_Master_Start 0001                 move@straightRamp 0028            ?i2_I2C_2_Master_Write 0001  
                     turnRight@i 001F                         isa$xinst 0000                       _RC4STAbits 0EE7  
                       main@RGBC 0099                         int$flags 005A                         _vfprintf 2606  
                       _turnLeft 1A84          fullSpeedAhead@cur_power 0020              __end_of_white_Light 2854  
                     _INTCONbits 0FF2                ??i2_isDataInTxBuf 0001        reverseOneSquare@cur_power 0021  
             reverseOneSquare@mL 0017               reverseOneSquare@mR 0018                 move@turnDuration 002A  
                 ??_batteryLevel 000D                      _setMotorPWM 1C3A                  ??_isDataInTxBuf 0005  
                       intlevel2 0000                        sprintf@ap 0030                 ??_fullSpeedAhead 001B  
                    ??_sendTxBuf 0005                        turnLeft@i 001F                      ?_ADC_getval 0001  
              main@straightSpeed 008A                      ??_vfpfcnvrt 0012                 _color_click_init 24AE  
       __end_of_TxBufferedString 2576                         sprintf@f 0031                         sprintf@s 001E  
                     _SSP2DATPPS 0E1D                       _SSP2CLKPPS 0E1C                     ___aldiv@sign 001A  
                    ??_turnRight 001C                 main@straightRamp 008B                       _TX4STAbits 0EE8  
         ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002                 ??_putCharToRxBuf 0001  
               ??_putCharToTxBuf 0005  
