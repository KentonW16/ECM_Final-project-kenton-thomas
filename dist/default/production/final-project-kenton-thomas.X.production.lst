

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 29 15:50:55 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 21/07/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F67K40 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     _TRISGbits	set	3975
    55   000000                     _TRISEbits	set	3973
    56   000000                     _TRISFbits	set	3974
    57   000000                     _TRISHbits	set	3976
    58   000000                     _RC7PPS	set	3689
    59   000000                     _RE2PPS	set	3700
    60   000000                     _ANSELFbits	set	3764
    61   000000                     _CCPR4H	set	3873
    62   000000                     _CCPR3H	set	3877
    63   000000                     _CCPR2H	set	4006
    64   000000                     _CCPR1H	set	4010
    65   000000                     _CCP1CONbits	set	4011
    66   000000                     _CCPTMRS0bits	set	4013
    67   000000                     _T2PR	set	4028
    68   000000                     _T2CONbits	set	4029
    69   000000                     _CCP2CONbits	set	4007
    70   000000                     _CCP3CONbits	set	3878
    71   000000                     _LATCbits	set	3963
    72   000000                     _LATDbits	set	3964
    73   000000                     _CCP4CONbits	set	3874
    74   000000                     _LATGbits	set	3967
    75   000000                     _LATEbits	set	3965
    76   000000                     _LATHbits	set	3968
    77   000000                     _TRISDbits	set	3972
    78   000000                     _TRISCbits	set	3971
    79   000000                     _PORTFbits	set	3982
    80   000000                     _RE4PPS	set	3702
    81   000000                     _RG6PPS	set	3720
    82   000000                     _T2CLKCONbits	set	4031
    83   000000                     _T2HLTbits	set	4030
    84                           
    85                           ; #config settings
    86                           
    87                           	psect	cinit
    88   0016C4                     __pcinit:
    89                           	callstack 0
    90   0016C4                     start_initialization:
    91                           	callstack 0
    92   0016C4                     __initialization:
    93                           	callstack 0
    94   0016C4                     end_of_initialization:
    95                           	callstack 0
    96   0016C4                     __end_of__initialization:
    97                           	callstack 0
    98   0016C4  0100               	movlb	0
    99   0016C6  EF6F  F009         	goto	_main	;jump to C main() function
   100                           
   101                           	psect	cstackCOMRAM
   102   000001                     __pcstackCOMRAM:
   103                           	callstack 0
   104   000001                     ?___wmul:
   105                           	callstack 0
   106   000001                     initDCmotorsPWM@PWMperiod:
   107                           	callstack 0
   108   000001                     ___wmul@multiplier:
   109                           	callstack 0
   110                           
   111                           ; 2 bytes @ 0x0
   112   000001                     	ds	2
   113   000003                     ___wmul@multiplicand:
   114                           	callstack 0
   115                           
   116                           ; 2 bytes @ 0x2
   117   000003                     	ds	2
   118   000005                     ___wmul@product:
   119                           	callstack 0
   120                           
   121                           ; 2 bytes @ 0x4
   122   000005                     	ds	2
   123   000007                     ?___lwdiv:
   124                           	callstack 0
   125   000007                     ___lwdiv@dividend:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x6
   129   000007                     	ds	2
   130   000009                     ___lwdiv@divisor:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x8
   134   000009                     	ds	2
   135   00000B                     ___lwdiv@quotient:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0xA
   139   00000B                     	ds	2
   140   00000D                     ___lwdiv@counter:
   141                           	callstack 0
   142                           
   143                           ; 1 bytes @ 0xC
   144   00000D                     	ds	1
   145   00000E                     setMotorPWM@m:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0xD
   149   00000E                     	ds	1
   150   00000F                     ??_setMotorPWM:
   151                           
   152                           ; 1 bytes @ 0xE
   153   00000F                     	ds	2
   154   000011                     setMotorPWM@posDuty:
   155                           	callstack 0
   156                           
   157                           ; 1 bytes @ 0x10
   158   000011                     	ds	1
   159   000012                     setMotorPWM@negDuty:
   160                           	callstack 0
   161                           
   162                           ; 1 bytes @ 0x11
   163   000012                     	ds	1
   164   000013                     turnLeft@mL:
   165                           	callstack 0
   166   000013                     turnRight@mL:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0x12
   170   000013                     	ds	1
   171   000014                     turnLeft@mR:
   172                           	callstack 0
   173   000014                     turnRight@mR:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0x13
   177   000014                     	ds	1
   178   000015                     turnLeft@turnSpeed:
   179                           	callstack 0
   180   000015                     turnRight@turnSpeed:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x14
   184   000015                     	ds	1
   185   000016                     turnLeft@turnDuration:
   186                           	callstack 0
   187   000016                     turnRight@turnDuration:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x15
   191   000016                     	ds	1
   192   000017                     turnLeft@turnRamp:
   193                           	callstack 0
   194   000017                     turnRight@turnRamp:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x16
   198   000017                     	ds	1
   199   000018                     ??_turnLeft:
   200   000018                     ??_turnRight:
   201                           
   202                           ; 1 bytes @ 0x17
   203   000018                     	ds	3
   204   00001B                     turnLeft@i:
   205                           	callstack 0
   206   00001B                     turnRight@i:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x1A
   210   00001B                     	ds	2
   211   00001D                     turnLeft@cur_power:
   212                           	callstack 0
   213   00001D                     turnRight@cur_power:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x1C
   217   00001D                     	ds	2
   218   00001F                     calibration@mL:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x1E
   222   00001F                     	ds	1
   223   000020                     calibration@mR:
   224                           	callstack 0
   225                           
   226                           ; 1 bytes @ 0x1F
   227   000020                     	ds	1
   228   000021                     calibration@turnSpeed:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x20
   232   000021                     	ds	1
   233   000022                     calibration@turnDuration:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x21
   237   000022                     	ds	1
   238   000023                     calibration@turnRamp:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0x22
   242   000023                     	ds	1
   243   000024                     ??_calibration:
   244                           
   245                           ; 1 bytes @ 0x23
   246   000024                     	ds	2
   247   000026                     ??_main:
   248                           
   249                           ; 1 bytes @ 0x25
   250   000026                     	ds	2
   251   000028                     main@turnSpeed:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0x27
   255   000028                     	ds	1
   256   000029                     main@turnRamp:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0x28
   260   000029                     	ds	1
   261   00002A                     main@turnDuration:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x29
   265   00002A                     	ds	1
   266   00002B                     main@motorL:
   267                           	callstack 0
   268                           
   269                           ; 10 bytes @ 0x2A
   270   00002B                     	ds	10
   271   000035                     main@motorR:
   272                           	callstack 0
   273                           
   274                           ; 10 bytes @ 0x34
   275   000035                     	ds	10
   276                           
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 13 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;  motorR         10   52[COMRAM] struct DC_motor
   287 ;;  motorL         10   42[COMRAM] struct DC_motor
   288 ;;  PWMcycle        2    0        unsigned int 
   289 ;;  turnDuration    1   41[COMRAM] unsigned char 
   290 ;;  turnRamp        1   40[COMRAM] unsigned char 
   291 ;;  turnSpeed       1   39[COMRAM] unsigned char 
   292 ;;  reverseDurat    1    0        unsigned char 
   293 ;;  straightRamp    1    0        unsigned char 
   294 ;;  straightSpee    1    0        unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   305 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   306 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   307 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   308 ;;Total ram usage:       25 bytes
   309 ;; Hardware stack levels required when called: 4
   310 ;; This function calls:
   311 ;;		_calibration
   312 ;;		_initDCmotorsPWM
   313 ;;		_turnLeft
   314 ;;		_turnRight
   315 ;; This function is called by:
   316 ;;		Startup code after reset
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320                           	psect	text0
   321   0012DE                     __ptext0:
   322                           	callstack 0
   323   0012DE                     _main:
   324                           	callstack 27
   325   0012DE                     
   326                           ;main.c: 15:     initDCmotorsPWM(PWMcycle);
   327   0012DE  0E00               	movlw	0
   328   0012E0  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   329   0012E2  0EC7               	movlw	199
   330   0012E4  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   331   0012E6  ECCD  F00A         	call	_initDCmotorsPWM	;wreg free
   332   0012EA                     
   333                           ;main.c: 17:     struct DC_motor motorL, motorR;;main.c: 19:     motorL.power=0;
   334   0012EA  0E00               	movlw	0
   335   0012EC  6E2B               	movwf	main@motorL^0,c
   336   0012EE                     
   337                           ;main.c: 20:     motorL.direction=1;
   338   0012EE  0E01               	movlw	1
   339   0012F0  6E2C               	movwf	(main@motorL+1)^0,c
   340   0012F2                     
   341                           ;main.c: 21:     motorL.brakemode=1;
   342   0012F2  0E01               	movlw	1
   343   0012F4  6E2D               	movwf	(main@motorL+2)^0,c
   344   0012F6                     
   345                           ;main.c: 22:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   346   0012F6  0EAA               	movlw	170
   347   0012F8  6E30               	movwf	(main@motorL+5)^0,c
   348   0012FA  0E0F               	movlw	15
   349   0012FC  6E31               	movwf	(main@motorL+6)^0,c
   350   0012FE                     
   351                           ;main.c: 23:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   352   0012FE  0EA6               	movlw	166
   353   001300  6E32               	movwf	(main@motorL+7)^0,c
   354   001302  0E0F               	movlw	15
   355   001304  6E33               	movwf	(main@motorL+8)^0,c
   356   001306                     
   357                           ;main.c: 24:     motorL.PWMperiod=PWMcycle;
   358   001306  0E00               	movlw	0
   359   001308  6E2F               	movwf	(main@motorL+4)^0,c
   360   00130A  0EC7               	movlw	199
   361   00130C  6E2E               	movwf	(main@motorL+3)^0,c
   362   00130E                     
   363                           ;main.c: 25:     motorL.compensation=3;
   364   00130E  0E03               	movlw	3
   365   001310  6E34               	movwf	(main@motorL+9)^0,c
   366   001312                     
   367                           ;main.c: 27:     motorR.power=0;
   368   001312  0E00               	movlw	0
   369   001314  6E35               	movwf	main@motorR^0,c
   370   001316                     
   371                           ;main.c: 28:     motorR.direction=1;
   372   001316  0E01               	movlw	1
   373   001318  6E36               	movwf	(main@motorR+1)^0,c
   374   00131A                     
   375                           ;main.c: 29:     motorR.brakemode=1;
   376   00131A  0E01               	movlw	1
   377   00131C  6E37               	movwf	(main@motorR+2)^0,c
   378   00131E                     
   379                           ;main.c: 30:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   380   00131E  0E25               	movlw	37
   381   001320  6E3A               	movwf	(main@motorR+5)^0,c
   382   001322  0E0F               	movlw	15
   383   001324  6E3B               	movwf	(main@motorR+6)^0,c
   384   001326                     
   385                           ;main.c: 31:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   386   001326  0E21               	movlw	33
   387   001328  6E3C               	movwf	(main@motorR+7)^0,c
   388   00132A  0E0F               	movlw	15
   389   00132C  6E3D               	movwf	(main@motorR+8)^0,c
   390   00132E                     
   391                           ;main.c: 32:     motorR.PWMperiod=PWMcycle;
   392   00132E  0E00               	movlw	0
   393   001330  6E39               	movwf	(main@motorR+4)^0,c
   394   001332  0EC7               	movlw	199
   395   001334  6E38               	movwf	(main@motorR+3)^0,c
   396   001336                     
   397                           ;main.c: 33:     motorR.compensation=0;
   398   001336  0E00               	movlw	0
   399   001338  6E3E               	movwf	(main@motorR+9)^0,c
   400   00133A                     
   401                           ;main.c: 41:     char turnSpeed=21;
   402   00133A  0E15               	movlw	21
   403   00133C  6E28               	movwf	main@turnSpeed^0,c
   404   00133E                     
   405                           ;main.c: 42:     unsigned char turnDuration=10;
   406   00133E  0E0A               	movlw	10
   407   001340  6E2A               	movwf	main@turnDuration^0,c
   408   001342                     
   409                           ;main.c: 43:     unsigned char turnRamp=4;
   410   001342  0E04               	movlw	4
   411   001344  6E29               	movwf	main@turnRamp^0,c
   412   001346                     
   413                           ;main.c: 46:     LATDbits.LATD7=0;
   414   001346  9E7C               	bcf	124,7,c	;volatile
   415   001348                     
   416                           ;main.c: 47:     TRISDbits.TRISD7=0;
   417   001348  9E84               	bcf	132,7,c	;volatile
   418   00134A                     
   419                           ;main.c: 48:     LATHbits.LATH3=0;
   420   00134A  9680               	bcf	128,3,c	;volatile
   421   00134C                     
   422                           ;main.c: 49:     TRISHbits.TRISH3=0;
   423   00134C  9688               	bcf	136,3,c	;volatile
   424   00134E                     
   425                           ;main.c: 52:     TRISFbits.TRISF2=1;
   426   00134E  8486               	bsf	134,2,c	;volatile
   427   001350                     
   428                           ;main.c: 53:     ANSELFbits.ANSELF2=0;
   429   001350  010E               	movlb	14	; () banked
   430   001352  95B4               	bcf	180,2,b	;volatile
   431   001354                     
   432                           ; BSR set to: 14
   433                           ;main.c: 54:     TRISFbits.TRISF3=1;
   434   001354  8686               	bsf	134,3,c	;volatile
   435   001356                     
   436                           ; BSR set to: 14
   437                           ;main.c: 55:     ANSELFbits.ANSELF3=0;
   438   001356  97B4               	bcf	180,3,b	;volatile
   439   001358                     l37:
   440   001358  B48E               	btfsc	142,2,c	;volatile
   441   00135A  EFB1  F009         	goto	u531
   442   00135E  EFB3  F009         	goto	u530
   443   001362                     u531:
   444   001362  EFAC  F009         	goto	l37
   445   001366                     u530:
   446   001366                     
   447                           ;main.c: 59:     _delay((unsigned long)((500)*(64000000/4000.0)));
   448   001366  0E29               	movlw	41
   449   001368  6E27               	movwf	(??_main+1)^0,c
   450   00136A  0E96               	movlw	150
   451   00136C  6E26               	movwf	??_main^0,c
   452   00136E  0E7F               	movlw	127
   453   001370                     u637:
   454   001370  2EE8               	decfsz	wreg,f,c
   455   001372  D7FE               	bra	u637
   456   001374  2E26               	decfsz	??_main^0,f,c
   457   001376  D7FC               	bra	u637
   458   001378  2E27               	decfsz	(??_main+1)^0,f,c
   459   00137A  D7FA               	bra	u637
   460   00137C  0000               	nop	
   461   00137E                     
   462                           ;main.c: 61:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
   463   00137E  0E2B               	movlw	low main@motorL
   464   001380  6E1F               	movwf	calibration@mL^0,c
   465   001382  0E35               	movlw	low main@motorR
   466   001384  6E20               	movwf	calibration@mR^0,c
   467   001386  0E15               	movlw	21
   468   001388  6E21               	movwf	calibration@turnSpeed^0,c
   469   00138A  0E2A               	movlw	low main@turnDuration
   470   00138C  6E22               	movwf	calibration@turnDuration^0,c
   471   00138E  0E04               	movlw	4
   472   001390  6E23               	movwf	calibration@turnRamp^0,c
   473   001392  ECB7  F008         	call	_calibration	;wreg free
   474   001396                     l1502:
   475                           
   476                           ;main.c: 65:         turnLeft(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   477   001396  0E2B               	movlw	low main@motorL
   478   001398  6E13               	movwf	turnLeft@mL^0,c
   479   00139A  0E35               	movlw	low main@motorR
   480   00139C  6E14               	movwf	turnLeft@mR^0,c
   481   00139E  C028  F015         	movff	main@turnSpeed,turnLeft@turnSpeed
   482   0013A2  C02A  F016         	movff	main@turnDuration,turnLeft@turnDuration
   483   0013A6  C029  F017         	movff	main@turnRamp,turnLeft@turnRamp
   484   0013AA  ECDC  F007         	call	_turnLeft	;wreg free
   485                           
   486                           ;main.c: 66:         _delay((unsigned long)((50)*(64000000/4000.0)));
   487   0013AE  0E05               	movlw	5
   488   0013B0  6E27               	movwf	(??_main+1)^0,c
   489   0013B2  0E0F               	movlw	15
   490   0013B4  6E26               	movwf	??_main^0,c
   491   0013B6  0EF1               	movlw	241
   492   0013B8                     u647:
   493   0013B8  2EE8               	decfsz	wreg,f,c
   494   0013BA  D7FE               	bra	u647
   495   0013BC  2E26               	decfsz	??_main^0,f,c
   496   0013BE  D7FC               	bra	u647
   497   0013C0  2E27               	decfsz	(??_main+1)^0,f,c
   498   0013C2  D7FA               	bra	u647
   499   0013C4  0000               	nop	
   500   0013C6                     
   501                           ;main.c: 67:         turnRight(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   502   0013C6  0E2B               	movlw	low main@motorL
   503   0013C8  6E13               	movwf	turnRight@mL^0,c
   504   0013CA  0E35               	movlw	low main@motorR
   505   0013CC  6E14               	movwf	turnRight@mR^0,c
   506   0013CE  C028  F015         	movff	main@turnSpeed,turnRight@turnSpeed
   507   0013D2  C02A  F016         	movff	main@turnDuration,turnRight@turnDuration
   508   0013D6  C029  F017         	movff	main@turnRamp,turnRight@turnRamp
   509   0013DA  EC01  F007         	call	_turnRight	;wreg free
   510   0013DE                     
   511                           ;main.c: 68:         _delay((unsigned long)((50)*(64000000/4000.0)));
   512   0013DE  0E05               	movlw	5
   513   0013E0  6E27               	movwf	(??_main+1)^0,c
   514   0013E2  0E0F               	movlw	15
   515   0013E4  6E26               	movwf	??_main^0,c
   516   0013E6  0EF1               	movlw	241
   517   0013E8                     u657:
   518   0013E8  2EE8               	decfsz	wreg,f,c
   519   0013EA  D7FE               	bra	u657
   520   0013EC  2E26               	decfsz	??_main^0,f,c
   521   0013EE  D7FC               	bra	u657
   522   0013F0  2E27               	decfsz	(??_main+1)^0,f,c
   523   0013F2  D7FA               	bra	u657
   524   0013F4  0000               	nop	
   525   0013F6                     
   526                           ;main.c: 70:         _delay((unsigned long)((50)*(64000000/4000.0)));
   527   0013F6  0E05               	movlw	5
   528   0013F8  6E27               	movwf	(??_main+1)^0,c
   529   0013FA  0E0F               	movlw	15
   530   0013FC  6E26               	movwf	??_main^0,c
   531   0013FE  0EF1               	movlw	241
   532   001400                     u667:
   533   001400  2EE8               	decfsz	wreg,f,c
   534   001402  D7FE               	bra	u667
   535   001404  2E26               	decfsz	??_main^0,f,c
   536   001406  D7FC               	bra	u667
   537   001408  2E27               	decfsz	(??_main+1)^0,f,c
   538   00140A  D7FA               	bra	u667
   539   00140C  0000               	nop	
   540   00140E                     
   541                           ;main.c: 72:         _delay((unsigned long)((50)*(64000000/4000.0)));
   542   00140E  0E05               	movlw	5
   543   001410  6E27               	movwf	(??_main+1)^0,c
   544   001412  0E0F               	movlw	15
   545   001414  6E26               	movwf	??_main^0,c
   546   001416  0EF1               	movlw	241
   547   001418                     u677:
   548   001418  2EE8               	decfsz	wreg,f,c
   549   00141A  D7FE               	bra	u677
   550   00141C  2E26               	decfsz	??_main^0,f,c
   551   00141E  D7FC               	bra	u677
   552   001420  2E27               	decfsz	(??_main+1)^0,f,c
   553   001422  D7FA               	bra	u677
   554   001424  0000               	nop	
   555   001426                     
   556                           ;main.c: 74:         _delay((unsigned long)((50)*(64000000/4000.0)));
   557   001426  0E05               	movlw	5
   558   001428  6E27               	movwf	(??_main+1)^0,c
   559   00142A  0E0F               	movlw	15
   560   00142C  6E26               	movwf	??_main^0,c
   561   00142E  0EF1               	movlw	241
   562   001430                     u687:
   563   001430  2EE8               	decfsz	wreg,f,c
   564   001432  D7FE               	bra	u687
   565   001434  2E26               	decfsz	??_main^0,f,c
   566   001436  D7FC               	bra	u687
   567   001438  2E27               	decfsz	(??_main+1)^0,f,c
   568   00143A  D7FA               	bra	u687
   569   00143C  0000               	nop	
   570   00143E  EFCB  F009         	goto	l1502
   571   001442  EF00  F000         	goto	start
   572   001446                     __end_of_main:
   573                           	callstack 0
   574                           
   575 ;; *************** function _initDCmotorsPWM *****************
   576 ;; Defined at:
   577 ;;		line 5 in file "dc_motor.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   580 ;; Auto vars:     Size  Location     Type
   581 ;;		None
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, status,2
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   595 ;;Total ram usage:        2 bytes
   596 ;; Hardware stack levels used: 1
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text1
   605   00159A                     __ptext1:
   606                           	callstack 0
   607   00159A                     _initDCmotorsPWM:
   608                           	callstack 30
   609   00159A                     
   610                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
   611   00159A  947D               	bcf	125,2,c	;volatile
   612                           
   613                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
   614   00159C  9485               	bcf	133,2,c	;volatile
   615                           
   616                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
   617   00159E  987D               	bcf	125,4,c	;volatile
   618                           
   619                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
   620   0015A0  9885               	bcf	133,4,c	;volatile
   621                           
   622                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
   623   0015A2  9E7B               	bcf	123,7,c	;volatile
   624                           
   625                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
   626   0015A4  9E83               	bcf	131,7,c	;volatile
   627                           
   628                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
   629   0015A6  9C7F               	bcf	127,6,c	;volatile
   630                           
   631                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
   632   0015A8  9C87               	bcf	135,6,c	;volatile
   633   0015AA                     
   634                           ;dc_motor.c: 18:     RE2PPS=0x05;
   635   0015AA  0E05               	movlw	5
   636   0015AC  010E               	movlb	14	; () banked
   637   0015AE  6F74               	movwf	116,b	;volatile
   638                           
   639                           ;dc_motor.c: 19:     RE4PPS=0x06;
   640   0015B0  0E06               	movlw	6
   641   0015B2  6F76               	movwf	118,b	;volatile
   642                           
   643                           ;dc_motor.c: 20:     RC7PPS=0x07;
   644   0015B4  0E07               	movlw	7
   645   0015B6  6F69               	movwf	105,b	;volatile
   646                           
   647                           ;dc_motor.c: 21:     RG6PPS=0x08;
   648   0015B8  0E08               	movlw	8
   649   0015BA  6F88               	movwf	136,b	;volatile
   650                           
   651                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
   652   0015BC  50BD               	movf	189,w,c	;volatile
   653   0015BE  0B8F               	andlw	-113
   654   0015C0  0930               	iorlw	48
   655   0015C2  6EBD               	movwf	189,c	;volatile
   656                           
   657                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   658   0015C4  0EE0               	movlw	-32
   659   0015C6  16BE               	andwf	190,f,c	;volatile
   660                           
   661                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   662   0015C8  50BF               	movf	191,w,c	;volatile
   663   0015CA  0BF0               	andlw	-16
   664   0015CC  0901               	iorlw	1
   665   0015CE  6EBF               	movwf	191,c	;volatile
   666   0015D0                     
   667                           ; BSR set to: 14
   668                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   669   0015D0  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   670   0015D4                     
   671                           ; BSR set to: 14
   672                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   673   0015D4  8EBD               	bsf	189,7,c	;volatile
   674                           
   675                           ;dc_motor.c: 35:     CCPR1H=0;
   676   0015D6  0E00               	movlw	0
   677   0015D8  6EAA               	movwf	170,c	;volatile
   678                           
   679                           ;dc_motor.c: 36:     CCPR2H=0;
   680   0015DA  0E00               	movlw	0
   681   0015DC  6EA6               	movwf	166,c	;volatile
   682                           
   683                           ;dc_motor.c: 37:     CCPR3H=0;
   684   0015DE  0E00               	movlw	0
   685   0015E0  010F               	movlb	15	; () banked
   686   0015E2  6F25               	movwf	37,b	;volatile
   687                           
   688                           ;dc_motor.c: 38:     CCPR4H=0;
   689   0015E4  0E00               	movlw	0
   690   0015E6  6F21               	movwf	33,b	;volatile
   691                           
   692                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   693   0015E8  0EFC               	movlw	-4
   694   0015EA  16AD               	andwf	173,f,c	;volatile
   695                           
   696                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   697   0015EC  0EF3               	movlw	-13
   698   0015EE  16AD               	andwf	173,f,c	;volatile
   699                           
   700                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   701   0015F0  0ECF               	movlw	-49
   702   0015F2  16AD               	andwf	173,f,c	;volatile
   703                           
   704                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   705   0015F4  0E3F               	movlw	-193
   706   0015F6  16AD               	andwf	173,f,c	;volatile
   707   0015F8                     
   708                           ; BSR set to: 15
   709                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   710   0015F8  88AB               	bsf	171,4,c	;volatile
   711                           
   712                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   713   0015FA  50AB               	movf	171,w,c	;volatile
   714   0015FC  0BF0               	andlw	-16
   715   0015FE  090C               	iorlw	12
   716   001600  6EAB               	movwf	171,c	;volatile
   717   001602                     
   718                           ; BSR set to: 15
   719                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   720   001602  8EAB               	bsf	171,7,c	;volatile
   721   001604                     
   722                           ; BSR set to: 15
   723                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   724   001604  88A7               	bsf	167,4,c	;volatile
   725                           
   726                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   727   001606  50A7               	movf	167,w,c	;volatile
   728   001608  0BF0               	andlw	-16
   729   00160A  090C               	iorlw	12
   730   00160C  6EA7               	movwf	167,c	;volatile
   731   00160E                     
   732                           ; BSR set to: 15
   733                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   734   00160E  8EA7               	bsf	167,7,c	;volatile
   735   001610                     
   736                           ; BSR set to: 15
   737                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   738   001610  8926               	bsf	38,4,b	;volatile
   739                           
   740                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   741   001612  5126               	movf	38,w,b	;volatile
   742   001614  0BF0               	andlw	-16
   743   001616  090C               	iorlw	12
   744   001618  6F26               	movwf	38,b	;volatile
   745   00161A                     
   746                           ; BSR set to: 15
   747                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   748   00161A  8F26               	bsf	38,7,b	;volatile
   749   00161C                     
   750                           ; BSR set to: 15
   751                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   752   00161C  8922               	bsf	34,4,b	;volatile
   753                           
   754                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   755   00161E  5122               	movf	34,w,b	;volatile
   756   001620  0BF0               	andlw	-16
   757   001622  090C               	iorlw	12
   758   001624  6F22               	movwf	34,b	;volatile
   759   001626                     
   760                           ; BSR set to: 15
   761                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   762   001626  8F22               	bsf	34,7,b	;volatile
   763   001628                     
   764                           ; BSR set to: 15
   765   001628  0012               	return		;funcret
   766   00162A                     __end_of_initDCmotorsPWM:
   767                           	callstack 0
   768                           
   769 ;; *************** function _calibration *****************
   770 ;; Defined at:
   771 ;;		line 222 in file "dc_motor.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  mL              1   30[COMRAM] PTR struct DC_motor
   774 ;;		 -> main@motorL(10), 
   775 ;;  mR              1   31[COMRAM] PTR struct DC_motor
   776 ;;		 -> main@motorR(10), 
   777 ;;  turnSpeed       1   32[COMRAM] unsigned char 
   778 ;;  turnDuration    1   33[COMRAM] PTR unsigned char 
   779 ;;		 -> main@turnDuration(1), 
   780 ;;  turnRamp        1   34[COMRAM] unsigned char 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   792 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;Total ram usage:        7 bytes
   797 ;; Hardware stack levels used: 1
   798 ;; Hardware stack levels required when called: 3
   799 ;; This function calls:
   800 ;;		_turnLeft
   801 ;;		_turnRight
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text2
   808   00116E                     __ptext2:
   809                           	callstack 0
   810   00116E                     _calibration:
   811                           	callstack 27
   812   00116E                     l1396:
   813                           
   814                           ;dc_motor.c: 222: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 223: {;dc_motor.c: 225:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
   815   00116E  C01F  F013         	movff	calibration@mL,turnLeft@mL
   816   001172  C020  F014         	movff	calibration@mR,turnLeft@mR
   817   001176  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
   818   00117A  5022               	movf	calibration@turnDuration^0,w,c
   819   00117C  6ED9               	movwf	fsr2l,c
   820   00117E  6ADA               	clrf	fsr2h,c
   821   001180  50DF               	movf	indf2,w,c
   822   001182  6E16               	movwf	turnLeft@turnDuration^0,c
   823   001184  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
   824   001188  ECDC  F007         	call	_turnLeft	;wreg free
   825   00118C                     
   826                           ;dc_motor.c: 226:     _delay((unsigned long)((50)*(64000000/4000.0)));
   827   00118C  0E05               	movlw	5
   828   00118E  6E25               	movwf	(??_calibration+1)^0,c
   829   001190  0E0F               	movlw	15
   830   001192  6E24               	movwf	??_calibration^0,c
   831   001194  0EF1               	movlw	241
   832   001196                     u697:
   833   001196  2EE8               	decfsz	wreg,f,c
   834   001198  D7FE               	bra	u697
   835   00119A  2E24               	decfsz	??_calibration^0,f,c
   836   00119C  D7FC               	bra	u697
   837   00119E  2E25               	decfsz	(??_calibration+1)^0,f,c
   838   0011A0  D7FA               	bra	u697
   839   0011A2  0000               	nop	
   840   0011A4                     
   841                           ;dc_motor.c: 227:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
   842   0011A4  C01F  F013         	movff	calibration@mL,turnLeft@mL
   843   0011A8  C020  F014         	movff	calibration@mR,turnLeft@mR
   844   0011AC  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
   845   0011B0  5022               	movf	calibration@turnDuration^0,w,c
   846   0011B2  6ED9               	movwf	fsr2l,c
   847   0011B4  6ADA               	clrf	fsr2h,c
   848   0011B6  50DF               	movf	indf2,w,c
   849   0011B8  6E16               	movwf	turnLeft@turnDuration^0,c
   850   0011BA  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
   851   0011BE  ECDC  F007         	call	_turnLeft	;wreg free
   852                           
   853                           ;dc_motor.c: 228:     _delay((unsigned long)((50)*(64000000/4000.0)));
   854   0011C2  0E05               	movlw	5
   855   0011C4  6E25               	movwf	(??_calibration+1)^0,c
   856   0011C6  0E0F               	movlw	15
   857   0011C8  6E24               	movwf	??_calibration^0,c
   858   0011CA  0EF1               	movlw	241
   859   0011CC                     u707:
   860   0011CC  2EE8               	decfsz	wreg,f,c
   861   0011CE  D7FE               	bra	u707
   862   0011D0  2E24               	decfsz	??_calibration^0,f,c
   863   0011D2  D7FC               	bra	u707
   864   0011D4  2E25               	decfsz	(??_calibration+1)^0,f,c
   865   0011D6  D7FA               	bra	u707
   866   0011D8  0000               	nop	
   867   0011DA                     
   868                           ;dc_motor.c: 229:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
   869   0011DA  C01F  F013         	movff	calibration@mL,turnRight@mL
   870   0011DE  C020  F014         	movff	calibration@mR,turnRight@mR
   871   0011E2  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
   872   0011E6  5022               	movf	calibration@turnDuration^0,w,c
   873   0011E8  6ED9               	movwf	fsr2l,c
   874   0011EA  6ADA               	clrf	fsr2h,c
   875   0011EC  50DF               	movf	indf2,w,c
   876   0011EE  6E16               	movwf	turnRight@turnDuration^0,c
   877   0011F0  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
   878   0011F4  EC01  F007         	call	_turnRight	;wreg free
   879   0011F8                     
   880                           ;dc_motor.c: 230:     _delay((unsigned long)((50)*(64000000/4000.0)));
   881   0011F8  0E05               	movlw	5
   882   0011FA  6E25               	movwf	(??_calibration+1)^0,c
   883   0011FC  0E0F               	movlw	15
   884   0011FE  6E24               	movwf	??_calibration^0,c
   885   001200  0EF1               	movlw	241
   886   001202                     u717:
   887   001202  2EE8               	decfsz	wreg,f,c
   888   001204  D7FE               	bra	u717
   889   001206  2E24               	decfsz	??_calibration^0,f,c
   890   001208  D7FC               	bra	u717
   891   00120A  2E25               	decfsz	(??_calibration+1)^0,f,c
   892   00120C  D7FA               	bra	u717
   893   00120E  0000               	nop	
   894                           
   895                           ;dc_motor.c: 231:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
   896   001210  C01F  F013         	movff	calibration@mL,turnRight@mL
   897   001214  C020  F014         	movff	calibration@mR,turnRight@mR
   898   001218  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
   899   00121C  5022               	movf	calibration@turnDuration^0,w,c
   900   00121E  6ED9               	movwf	fsr2l,c
   901   001220  6ADA               	clrf	fsr2h,c
   902   001222  50DF               	movf	indf2,w,c
   903   001224  6E16               	movwf	turnRight@turnDuration^0,c
   904   001226  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
   905   00122A  EC01  F007         	call	_turnRight	;wreg free
   906   00122E                     l179:
   907   00122E  A48E               	btfss	142,2,c	;volatile
   908   001230  EF1C  F009         	goto	u471
   909   001234  EF1E  F009         	goto	u470
   910   001238                     u471:
   911   001238  EF25  F009         	goto	l183
   912   00123C                     u470:
   913   00123C  B68E               	btfsc	142,3,c	;volatile
   914   00123E  EF23  F009         	goto	u481
   915   001242  EF25  F009         	goto	u480
   916   001246                     u481:
   917   001246  EF17  F009         	goto	l179
   918   00124A                     u480:
   919   00124A                     l183:
   920                           
   921                           ;dc_motor.c: 236:         if (!PORTFbits.RF2 && *turnDuration>0) {
   922   00124A  B48E               	btfsc	142,2,c	;volatile
   923   00124C  EF2A  F009         	goto	u491
   924   001250  EF2C  F009         	goto	u490
   925   001254                     u491:
   926   001254  EF3B  F009         	goto	l184
   927   001258                     u490:
   928   001258  5022               	movf	calibration@turnDuration^0,w,c
   929   00125A  6ED9               	movwf	fsr2l,c
   930   00125C  6ADA               	clrf	fsr2h,c
   931   00125E  50DF               	movf	indf2,w,c
   932   001260  B4D8               	btfsc	status,2,c
   933   001262  EF35  F009         	goto	u501
   934   001266  EF37  F009         	goto	u500
   935   00126A                     u501:
   936   00126A  EF3B  F009         	goto	l184
   937   00126E                     u500:
   938   00126E                     
   939                           ;dc_motor.c: 237:             *turnDuration--;
   940   00126E  0622               	decf	calibration@turnDuration^0,f,c
   941   001270                     
   942                           ;dc_motor.c: 238:             LATDbits.LATD7 = 1;
   943   001270  8E7C               	bsf	124,7,c	;volatile
   944                           
   945                           ;dc_motor.c: 239:         }
   946   001272  EF44  F009         	goto	l1418
   947   001276                     l184:
   948   001276  B68E               	btfsc	142,3,c	;volatile
   949   001278  EF40  F009         	goto	u511
   950   00127C  EF42  F009         	goto	u510
   951   001280                     u511:
   952   001280  EF44  F009         	goto	l1418
   953   001284                     u510:
   954   001284                     
   955                           ;dc_motor.c: 242:             *turnDuration++;
   956   001284  2A22               	incf	calibration@turnDuration^0,f,c
   957   001286                     
   958                           ;dc_motor.c: 243:             LATHbits.LATH3 = 1;
   959   001286  8680               	bsf	128,3,c	;volatile
   960   001288                     l1418:
   961                           
   962                           ;dc_motor.c: 246:         _delay((unsigned long)((500)*(64000000/4000.0)));
   963   001288  0E29               	movlw	41
   964   00128A  6E25               	movwf	(??_calibration+1)^0,c
   965   00128C  0E96               	movlw	150
   966   00128E  6E24               	movwf	??_calibration^0,c
   967   001290  0E7F               	movlw	127
   968   001292                     u727:
   969   001292  2EE8               	decfsz	wreg,f,c
   970   001294  D7FE               	bra	u727
   971   001296  2E24               	decfsz	??_calibration^0,f,c
   972   001298  D7FC               	bra	u727
   973   00129A  2E25               	decfsz	(??_calibration+1)^0,f,c
   974   00129C  D7FA               	bra	u727
   975   00129E  0000               	nop	
   976   0012A0                     
   977                           ;dc_motor.c: 248:         if (!PORTFbits.RF3) {
   978   0012A0  B68E               	btfsc	142,3,c	;volatile
   979   0012A2  EF55  F009         	goto	u521
   980   0012A6  EF57  F009         	goto	u520
   981   0012AA                     u521:
   982   0012AA  EF5A  F009         	goto	l187
   983   0012AE                     u520:
   984   0012AE                     
   985                           ;dc_motor.c: 249:             *turnDuration--;
   986   0012AE  0622               	decf	calibration@turnDuration^0,f,c
   987                           
   988                           ;dc_motor.c: 250:             break;
   989   0012B0  EF5E  F009         	goto	l188
   990   0012B4                     l187:
   991                           
   992                           ;dc_motor.c: 253:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
   993   0012B4  9680               	bcf	128,3,c	;volatile
   994   0012B6  9E7C               	bcf	124,7,c	;volatile
   995   0012B8  EFB7  F008         	goto	l1396
   996   0012BC                     l188:
   997                           
   998                           ;dc_motor.c: 267:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
   999   0012BC  8680               	bsf	128,3,c	;volatile
  1000   0012BE  8E7C               	bsf	124,7,c	;volatile
  1001   0012C0                     
  1002                           ;dc_motor.c: 268:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1003   0012C0  0E09               	movlw	9
  1004   0012C2  6E25               	movwf	(??_calibration+1)^0,c
  1005   0012C4  0E1E               	movlw	30
  1006   0012C6  6E24               	movwf	??_calibration^0,c
  1007   0012C8  0EE4               	movlw	228
  1008   0012CA                     u737:
  1009   0012CA  2EE8               	decfsz	wreg,f,c
  1010   0012CC  D7FE               	bra	u737
  1011   0012CE  2E24               	decfsz	??_calibration^0,f,c
  1012   0012D0  D7FC               	bra	u737
  1013   0012D2  2E25               	decfsz	(??_calibration+1)^0,f,c
  1014   0012D4  D7FA               	bra	u737
  1015   0012D6  D000               	nop2	
  1016   0012D8                     
  1017                           ;dc_motor.c: 269:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1018   0012D8  9680               	bcf	128,3,c	;volatile
  1019   0012DA  9E7C               	bcf	124,7,c	;volatile
  1020   0012DC  0012               	return		;funcret
  1021   0012DE                     __end_of_calibration:
  1022                           	callstack 0
  1023                           
  1024 ;; *************** function _turnRight *****************
  1025 ;; Defined at:
  1026 ;;		line 140 in file "dc_motor.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1029 ;;		 -> main@motorL(10), 
  1030 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1031 ;;		 -> main@motorR(10), 
  1032 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  1033 ;;  turnDuration    1   21[COMRAM] unsigned char 
  1034 ;;  turnRamp        1   22[COMRAM] unsigned char 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  cur_power       2   28[COMRAM] int 
  1037 ;;  i               2   26[COMRAM] int 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1047 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1048 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1049 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1050 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1051 ;;Total ram usage:       12 bytes
  1052 ;; Hardware stack levels used: 1
  1053 ;; Hardware stack levels required when called: 2
  1054 ;; This function calls:
  1055 ;;		_setMotorPWM
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;;		_calibration
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text3
  1063   000E02                     __ptext3:
  1064                           	callstack 0
  1065   000E02                     _turnRight:
  1066                           	callstack 28
  1067   000E02                     
  1068                           ;dc_motor.c: 140: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 141: {;dc_motor.c: 142:     mL->dir
      +                          ection = 1;
  1069   000E02  5013               	movf	turnRight@mL^0,w,c
  1070   000E04  6ED9               	movwf	fsr2l,c
  1071   000E06  6ADA               	clrf	fsr2h,c
  1072   000E08  0E01               	movlw	1
  1073   000E0A  26D9               	addwf	fsr2l,f,c
  1074   000E0C  0E01               	movlw	1
  1075   000E0E  6EDF               	movwf	indf2,c
  1076                           
  1077                           ;dc_motor.c: 143:     mR->direction = 0;
  1078   000E10  5014               	movf	turnRight@mR^0,w,c
  1079   000E12  6ED9               	movwf	fsr2l,c
  1080   000E14  6ADA               	clrf	fsr2h,c
  1081   000E16  0E01               	movlw	1
  1082   000E18  26D9               	addwf	fsr2l,f,c
  1083   000E1A  6ADF               	clrf	indf2,c
  1084   000E1C                     
  1085                           ;dc_motor.c: 144:     int i;;dc_motor.c: 145:     int cur_power;;dc_motor.c: 146:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1086   000E1C  0E00               	movlw	0
  1087   000E1E  6E1E               	movwf	(turnRight@cur_power+1)^0,c
  1088   000E20  0E01               	movlw	1
  1089   000E22  6E1D               	movwf	turnRight@cur_power^0,c
  1090   000E24  EF56  F007         	goto	l1344
  1091   000E28                     l1330:
  1092                           
  1093                           ;dc_motor.c: 147:         mL->power = cur_power+mL->compensation;
  1094   000E28  5013               	movf	turnRight@mL^0,w,c
  1095   000E2A  6ED9               	movwf	fsr2l,c
  1096   000E2C  6ADA               	clrf	fsr2h,c
  1097   000E2E  5013               	movf	turnRight@mL^0,w,c
  1098   000E30  6EE1               	movwf	fsr1l,c
  1099   000E32  6AE2               	clrf	fsr1h,c
  1100   000E34  0E09               	movlw	9
  1101   000E36  26E1               	addwf	fsr1l,f,c
  1102   000E38  50E7               	movf	indf1,w,c
  1103   000E3A  241D               	addwf	turnRight@cur_power^0,w,c
  1104   000E3C  6EDF               	movwf	indf2,c
  1105                           
  1106                           ;dc_motor.c: 148:         mR->power = cur_power+mR->compensation;
  1107   000E3E  5014               	movf	turnRight@mR^0,w,c
  1108   000E40  6ED9               	movwf	fsr2l,c
  1109   000E42  6ADA               	clrf	fsr2h,c
  1110   000E44  5014               	movf	turnRight@mR^0,w,c
  1111   000E46  6EE1               	movwf	fsr1l,c
  1112   000E48  6AE2               	clrf	fsr1h,c
  1113   000E4A  0E09               	movlw	9
  1114   000E4C  26E1               	addwf	fsr1l,f,c
  1115   000E4E  50E7               	movf	indf1,w,c
  1116   000E50  241D               	addwf	turnRight@cur_power^0,w,c
  1117   000E52  6EDF               	movwf	indf2,c
  1118   000E54                     
  1119                           ;dc_motor.c: 149:         setMotorPWM(mL);
  1120   000E54  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  1121   000E58  EC23  F00A         	call	_setMotorPWM	;wreg free
  1122   000E5C                     
  1123                           ;dc_motor.c: 150:         setMotorPWM(mR);
  1124   000E5C  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  1125   000E60  EC23  F00A         	call	_setMotorPWM	;wreg free
  1126   000E64                     
  1127                           ;dc_motor.c: 151:         for (i=0;i<turnRamp;i++) {
  1128   000E64  0E00               	movlw	0
  1129   000E66  6E1C               	movwf	(turnRight@i+1)^0,c
  1130   000E68  0E00               	movlw	0
  1131   000E6A  6E1B               	movwf	turnRight@i^0,c
  1132   000E6C  EF42  F007         	goto	l137
  1133   000E70                     l1338:
  1134                           
  1135                           ;dc_motor.c: 152:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1136   000E70  0E68               	movlw	104
  1137   000E72  6E18               	movwf	??_turnRight^0,c
  1138   000E74  0EE4               	movlw	228
  1139   000E76                     u747:
  1140   000E76  2EE8               	decfsz	wreg,f,c
  1141   000E78  D7FE               	bra	u747
  1142   000E7A  2E18               	decfsz	??_turnRight^0,f,c
  1143   000E7C  D7FC               	bra	u747
  1144   000E7E  D000               	nop2	
  1145   000E80                     
  1146                           ;dc_motor.c: 153:         }
  1147   000E80  4A1B               	infsnz	turnRight@i^0,f,c
  1148   000E82  2A1C               	incf	(turnRight@i+1)^0,f,c
  1149   000E84                     l137:
  1150   000E84  5017               	movf	turnRight@turnRamp^0,w,c
  1151   000E86  6E18               	movwf	??_turnRight^0,c
  1152   000E88  6A19               	clrf	(??_turnRight+1)^0,c
  1153   000E8A  5018               	movf	??_turnRight^0,w,c
  1154   000E8C  5C1B               	subwf	turnRight@i^0,w,c
  1155   000E8E  501C               	movf	(turnRight@i+1)^0,w,c
  1156   000E90  0A80               	xorlw	128
  1157   000E92  6E1A               	movwf	(??_turnRight+2)^0,c
  1158   000E94  5019               	movf	(??_turnRight+1)^0,w,c
  1159   000E96  0A80               	xorlw	128
  1160   000E98  581A               	subwfb	(??_turnRight+2)^0,w,c
  1161   000E9A  A0D8               	btfss	status,0,c
  1162   000E9C  EF52  F007         	goto	u421
  1163   000EA0  EF54  F007         	goto	u420
  1164   000EA4                     u421:
  1165   000EA4  EF38  F007         	goto	l1338
  1166   000EA8                     u420:
  1167   000EA8                     
  1168                           ;dc_motor.c: 154:     }
  1169   000EA8  4A1D               	infsnz	turnRight@cur_power^0,f,c
  1170   000EAA  2A1E               	incf	(turnRight@cur_power+1)^0,f,c
  1171   000EAC                     l1344:
  1172   000EAC  5015               	movf	turnRight@turnSpeed^0,w,c
  1173   000EAE  6E18               	movwf	??_turnRight^0,c
  1174   000EB0  6A19               	clrf	(??_turnRight+1)^0,c
  1175   000EB2  501D               	movf	turnRight@cur_power^0,w,c
  1176   000EB4  5C18               	subwf	??_turnRight^0,w,c
  1177   000EB6  5019               	movf	(??_turnRight+1)^0,w,c
  1178   000EB8  0A80               	xorlw	128
  1179   000EBA  6E1A               	movwf	(??_turnRight+2)^0,c
  1180   000EBC  501E               	movf	(turnRight@cur_power+1)^0,w,c
  1181   000EBE  0A80               	xorlw	128
  1182   000EC0  581A               	subwfb	(??_turnRight+2)^0,w,c
  1183   000EC2  B0D8               	btfsc	status,0,c
  1184   000EC4  EF66  F007         	goto	u431
  1185   000EC8  EF68  F007         	goto	u430
  1186   000ECC                     u431:
  1187   000ECC  EF14  F007         	goto	l1330
  1188   000ED0                     u430:
  1189   000ED0                     
  1190                           ;dc_motor.c: 156:     for (i=0;i<turnDuration;i++) {
  1191   000ED0  0E00               	movlw	0
  1192   000ED2  6E1C               	movwf	(turnRight@i+1)^0,c
  1193   000ED4  0E00               	movlw	0
  1194   000ED6  6E1B               	movwf	turnRight@i^0,c
  1195   000ED8  EF78  F007         	goto	l141
  1196   000EDC                     l1348:
  1197                           
  1198                           ;dc_motor.c: 157:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1199   000EDC  0E68               	movlw	104
  1200   000EDE  6E18               	movwf	??_turnRight^0,c
  1201   000EE0  0EE4               	movlw	228
  1202   000EE2                     u757:
  1203   000EE2  2EE8               	decfsz	wreg,f,c
  1204   000EE4  D7FE               	bra	u757
  1205   000EE6  2E18               	decfsz	??_turnRight^0,f,c
  1206   000EE8  D7FC               	bra	u757
  1207   000EEA  D000               	nop2	
  1208   000EEC                     
  1209                           ;dc_motor.c: 158:         }
  1210   000EEC  4A1B               	infsnz	turnRight@i^0,f,c
  1211   000EEE  2A1C               	incf	(turnRight@i+1)^0,f,c
  1212   000EF0                     l141:
  1213   000EF0  5016               	movf	turnRight@turnDuration^0,w,c
  1214   000EF2  6E18               	movwf	??_turnRight^0,c
  1215   000EF4  6A19               	clrf	(??_turnRight+1)^0,c
  1216   000EF6  5018               	movf	??_turnRight^0,w,c
  1217   000EF8  5C1B               	subwf	turnRight@i^0,w,c
  1218   000EFA  501C               	movf	(turnRight@i+1)^0,w,c
  1219   000EFC  0A80               	xorlw	128
  1220   000EFE  6E1A               	movwf	(??_turnRight+2)^0,c
  1221   000F00  5019               	movf	(??_turnRight+1)^0,w,c
  1222   000F02  0A80               	xorlw	128
  1223   000F04  581A               	subwfb	(??_turnRight+2)^0,w,c
  1224   000F06  A0D8               	btfss	status,0,c
  1225   000F08  EF88  F007         	goto	u441
  1226   000F0C  EF8A  F007         	goto	u440
  1227   000F10                     u441:
  1228   000F10  EF6E  F007         	goto	l1348
  1229   000F14                     u440:
  1230   000F14                     
  1231                           ;dc_motor.c: 160:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  1232   000F14  C015  F01D         	movff	turnRight@turnSpeed,turnRight@cur_power
  1233   000F18  6A1E               	clrf	(turnRight@cur_power+1)^0,c
  1234   000F1A                     l1352:
  1235   000F1A  BE1E               	btfsc	(turnRight@cur_power+1)^0,7,c
  1236   000F1C  EF94  F007         	goto	u450
  1237   000F20  EF92  F007         	goto	u451
  1238   000F24                     u451:
  1239   000F24  EF96  F007         	goto	l1356
  1240   000F28                     u450:
  1241   000F28  EFDB  F007         	goto	l149
  1242   000F2C                     l1356:
  1243                           
  1244                           ;dc_motor.c: 161:         mL->power = cur_power+mL->compensation;
  1245   000F2C  5013               	movf	turnRight@mL^0,w,c
  1246   000F2E  6ED9               	movwf	fsr2l,c
  1247   000F30  6ADA               	clrf	fsr2h,c
  1248   000F32  5013               	movf	turnRight@mL^0,w,c
  1249   000F34  6EE1               	movwf	fsr1l,c
  1250   000F36  6AE2               	clrf	fsr1h,c
  1251   000F38  0E09               	movlw	9
  1252   000F3A  26E1               	addwf	fsr1l,f,c
  1253   000F3C  50E7               	movf	indf1,w,c
  1254   000F3E  241D               	addwf	turnRight@cur_power^0,w,c
  1255   000F40  6EDF               	movwf	indf2,c
  1256                           
  1257                           ;dc_motor.c: 162:         mR->power = cur_power+mR->compensation;
  1258   000F42  5014               	movf	turnRight@mR^0,w,c
  1259   000F44  6ED9               	movwf	fsr2l,c
  1260   000F46  6ADA               	clrf	fsr2h,c
  1261   000F48  5014               	movf	turnRight@mR^0,w,c
  1262   000F4A  6EE1               	movwf	fsr1l,c
  1263   000F4C  6AE2               	clrf	fsr1h,c
  1264   000F4E  0E09               	movlw	9
  1265   000F50  26E1               	addwf	fsr1l,f,c
  1266   000F52  50E7               	movf	indf1,w,c
  1267   000F54  241D               	addwf	turnRight@cur_power^0,w,c
  1268   000F56  6EDF               	movwf	indf2,c
  1269   000F58                     
  1270                           ;dc_motor.c: 163:         setMotorPWM(mL);
  1271   000F58  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  1272   000F5C  EC23  F00A         	call	_setMotorPWM	;wreg free
  1273   000F60                     
  1274                           ;dc_motor.c: 164:         setMotorPWM(mR);
  1275   000F60  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  1276   000F64  EC23  F00A         	call	_setMotorPWM	;wreg free
  1277   000F68                     
  1278                           ;dc_motor.c: 165:         for (i=0;i<turnRamp;i++) {
  1279   000F68  0E00               	movlw	0
  1280   000F6A  6E1C               	movwf	(turnRight@i+1)^0,c
  1281   000F6C  0E00               	movlw	0
  1282   000F6E  6E1B               	movwf	turnRight@i^0,c
  1283   000F70  EFC4  F007         	goto	l146
  1284   000F74                     l1364:
  1285                           
  1286                           ;dc_motor.c: 166:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1287   000F74  0E68               	movlw	104
  1288   000F76  6E18               	movwf	??_turnRight^0,c
  1289   000F78  0EE4               	movlw	228
  1290   000F7A                     u767:
  1291   000F7A  2EE8               	decfsz	wreg,f,c
  1292   000F7C  D7FE               	bra	u767
  1293   000F7E  2E18               	decfsz	??_turnRight^0,f,c
  1294   000F80  D7FC               	bra	u767
  1295   000F82  D000               	nop2	
  1296   000F84                     
  1297                           ;dc_motor.c: 167:         }
  1298   000F84  4A1B               	infsnz	turnRight@i^0,f,c
  1299   000F86  2A1C               	incf	(turnRight@i+1)^0,f,c
  1300   000F88                     l146:
  1301   000F88  5017               	movf	turnRight@turnRamp^0,w,c
  1302   000F8A  6E18               	movwf	??_turnRight^0,c
  1303   000F8C  6A19               	clrf	(??_turnRight+1)^0,c
  1304   000F8E  5018               	movf	??_turnRight^0,w,c
  1305   000F90  5C1B               	subwf	turnRight@i^0,w,c
  1306   000F92  501C               	movf	(turnRight@i+1)^0,w,c
  1307   000F94  0A80               	xorlw	128
  1308   000F96  6E1A               	movwf	(??_turnRight+2)^0,c
  1309   000F98  5019               	movf	(??_turnRight+1)^0,w,c
  1310   000F9A  0A80               	xorlw	128
  1311   000F9C  581A               	subwfb	(??_turnRight+2)^0,w,c
  1312   000F9E  A0D8               	btfss	status,0,c
  1313   000FA0  EFD4  F007         	goto	u461
  1314   000FA4  EFD6  F007         	goto	u460
  1315   000FA8                     u461:
  1316   000FA8  EFBA  F007         	goto	l1364
  1317   000FAC                     u460:
  1318   000FAC                     
  1319                           ;dc_motor.c: 168:     }
  1320   000FAC  061D               	decf	turnRight@cur_power^0,f,c
  1321   000FAE  A0D8               	btfss	status,0,c
  1322   000FB0  061E               	decf	(turnRight@cur_power+1)^0,f,c
  1323   000FB2  EF8D  F007         	goto	l1352
  1324   000FB6                     l149:
  1325   000FB6  0012               	return		;funcret
  1326   000FB8                     __end_of_turnRight:
  1327                           	callstack 0
  1328                           
  1329 ;; *************** function _turnLeft *****************
  1330 ;; Defined at:
  1331 ;;		line 108 in file "dc_motor.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1334 ;;		 -> main@motorL(10), 
  1335 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1336 ;;		 -> main@motorR(10), 
  1337 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  1338 ;;  turnDuration    1   21[COMRAM] unsigned char 
  1339 ;;  turnRamp        1   22[COMRAM] unsigned char 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  cur_power       2   28[COMRAM] int 
  1342 ;;  i               2   26[COMRAM] int 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1352 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;Total ram usage:       12 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 2
  1359 ;; This function calls:
  1360 ;;		_setMotorPWM
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;;		_calibration
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text4
  1368   000FB8                     __ptext4:
  1369                           	callstack 0
  1370   000FB8                     _turnLeft:
  1371                           	callstack 28
  1372   000FB8                     
  1373                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 109: {;dc_motor.c: 110:     mL->dire
      +                          ction = 0;
  1374   000FB8  5013               	movf	turnLeft@mL^0,w,c
  1375   000FBA  6ED9               	movwf	fsr2l,c
  1376   000FBC  6ADA               	clrf	fsr2h,c
  1377   000FBE  0E01               	movlw	1
  1378   000FC0  26D9               	addwf	fsr2l,f,c
  1379   000FC2  6ADF               	clrf	indf2,c
  1380                           
  1381                           ;dc_motor.c: 111:     mR->direction = 1;
  1382   000FC4  5014               	movf	turnLeft@mR^0,w,c
  1383   000FC6  6ED9               	movwf	fsr2l,c
  1384   000FC8  6ADA               	clrf	fsr2h,c
  1385   000FCA  0E01               	movlw	1
  1386   000FCC  26D9               	addwf	fsr2l,f,c
  1387   000FCE  0E01               	movlw	1
  1388   000FD0  6EDF               	movwf	indf2,c
  1389   000FD2                     
  1390                           ;dc_motor.c: 112:     int i;;dc_motor.c: 113:     int cur_power;;dc_motor.c: 114:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1391   000FD2  0E00               	movlw	0
  1392   000FD4  6E1E               	movwf	(turnLeft@cur_power+1)^0,c
  1393   000FD6  0E01               	movlw	1
  1394   000FD8  6E1D               	movwf	turnLeft@cur_power^0,c
  1395   000FDA  EF31  F008         	goto	l1298
  1396   000FDE                     l1284:
  1397                           
  1398                           ;dc_motor.c: 115:         mL->power = cur_power+mL->compensation;
  1399   000FDE  5013               	movf	turnLeft@mL^0,w,c
  1400   000FE0  6ED9               	movwf	fsr2l,c
  1401   000FE2  6ADA               	clrf	fsr2h,c
  1402   000FE4  5013               	movf	turnLeft@mL^0,w,c
  1403   000FE6  6EE1               	movwf	fsr1l,c
  1404   000FE8  6AE2               	clrf	fsr1h,c
  1405   000FEA  0E09               	movlw	9
  1406   000FEC  26E1               	addwf	fsr1l,f,c
  1407   000FEE  50E7               	movf	indf1,w,c
  1408   000FF0  241D               	addwf	turnLeft@cur_power^0,w,c
  1409   000FF2  6EDF               	movwf	indf2,c
  1410                           
  1411                           ;dc_motor.c: 116:         mR->power = cur_power+mR->compensation;
  1412   000FF4  5014               	movf	turnLeft@mR^0,w,c
  1413   000FF6  6ED9               	movwf	fsr2l,c
  1414   000FF8  6ADA               	clrf	fsr2h,c
  1415   000FFA  5014               	movf	turnLeft@mR^0,w,c
  1416   000FFC  6EE1               	movwf	fsr1l,c
  1417   000FFE  6AE2               	clrf	fsr1h,c
  1418   001000  0E09               	movlw	9
  1419   001002  26E1               	addwf	fsr1l,f,c
  1420   001004  50E7               	movf	indf1,w,c
  1421   001006  241D               	addwf	turnLeft@cur_power^0,w,c
  1422   001008  6EDF               	movwf	indf2,c
  1423   00100A                     
  1424                           ;dc_motor.c: 117:         setMotorPWM(mL);
  1425   00100A  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1426   00100E  EC23  F00A         	call	_setMotorPWM	;wreg free
  1427   001012                     
  1428                           ;dc_motor.c: 118:         setMotorPWM(mR);
  1429   001012  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1430   001016  EC23  F00A         	call	_setMotorPWM	;wreg free
  1431   00101A                     
  1432                           ;dc_motor.c: 119:         for (i=0;i<turnRamp;i++) {
  1433   00101A  0E00               	movlw	0
  1434   00101C  6E1C               	movwf	(turnLeft@i+1)^0,c
  1435   00101E  0E00               	movlw	0
  1436   001020  6E1B               	movwf	turnLeft@i^0,c
  1437   001022  EF1D  F008         	goto	l120
  1438   001026                     l1292:
  1439                           
  1440                           ;dc_motor.c: 120:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1441   001026  0E68               	movlw	104
  1442   001028  6E18               	movwf	??_turnLeft^0,c
  1443   00102A  0EE4               	movlw	228
  1444   00102C                     u777:
  1445   00102C  2EE8               	decfsz	wreg,f,c
  1446   00102E  D7FE               	bra	u777
  1447   001030  2E18               	decfsz	??_turnLeft^0,f,c
  1448   001032  D7FC               	bra	u777
  1449   001034  D000               	nop2	
  1450   001036                     
  1451                           ;dc_motor.c: 121:         }
  1452   001036  4A1B               	infsnz	turnLeft@i^0,f,c
  1453   001038  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1454   00103A                     l120:
  1455   00103A  5017               	movf	turnLeft@turnRamp^0,w,c
  1456   00103C  6E18               	movwf	??_turnLeft^0,c
  1457   00103E  6A19               	clrf	(??_turnLeft+1)^0,c
  1458   001040  5018               	movf	??_turnLeft^0,w,c
  1459   001042  5C1B               	subwf	turnLeft@i^0,w,c
  1460   001044  501C               	movf	(turnLeft@i+1)^0,w,c
  1461   001046  0A80               	xorlw	128
  1462   001048  6E1A               	movwf	(??_turnLeft+2)^0,c
  1463   00104A  5019               	movf	(??_turnLeft+1)^0,w,c
  1464   00104C  0A80               	xorlw	128
  1465   00104E  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1466   001050  A0D8               	btfss	status,0,c
  1467   001052  EF2D  F008         	goto	u371
  1468   001056  EF2F  F008         	goto	u370
  1469   00105A                     u371:
  1470   00105A  EF13  F008         	goto	l1292
  1471   00105E                     u370:
  1472   00105E                     
  1473                           ;dc_motor.c: 122:     }
  1474   00105E  4A1D               	infsnz	turnLeft@cur_power^0,f,c
  1475   001060  2A1E               	incf	(turnLeft@cur_power+1)^0,f,c
  1476   001062                     l1298:
  1477   001062  5015               	movf	turnLeft@turnSpeed^0,w,c
  1478   001064  6E18               	movwf	??_turnLeft^0,c
  1479   001066  6A19               	clrf	(??_turnLeft+1)^0,c
  1480   001068  501D               	movf	turnLeft@cur_power^0,w,c
  1481   00106A  5C18               	subwf	??_turnLeft^0,w,c
  1482   00106C  5019               	movf	(??_turnLeft+1)^0,w,c
  1483   00106E  0A80               	xorlw	128
  1484   001070  6E1A               	movwf	(??_turnLeft+2)^0,c
  1485   001072  501E               	movf	(turnLeft@cur_power+1)^0,w,c
  1486   001074  0A80               	xorlw	128
  1487   001076  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1488   001078  B0D8               	btfsc	status,0,c
  1489   00107A  EF41  F008         	goto	u381
  1490   00107E  EF43  F008         	goto	u380
  1491   001082                     u381:
  1492   001082  EFEF  F007         	goto	l1284
  1493   001086                     u380:
  1494   001086                     
  1495                           ;dc_motor.c: 124:     for (i=0;i<turnDuration;i++) {
  1496   001086  0E00               	movlw	0
  1497   001088  6E1C               	movwf	(turnLeft@i+1)^0,c
  1498   00108A  0E00               	movlw	0
  1499   00108C  6E1B               	movwf	turnLeft@i^0,c
  1500   00108E  EF53  F008         	goto	l124
  1501   001092                     l1302:
  1502                           
  1503                           ;dc_motor.c: 125:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1504   001092  0E68               	movlw	104
  1505   001094  6E18               	movwf	??_turnLeft^0,c
  1506   001096  0EE4               	movlw	228
  1507   001098                     u787:
  1508   001098  2EE8               	decfsz	wreg,f,c
  1509   00109A  D7FE               	bra	u787
  1510   00109C  2E18               	decfsz	??_turnLeft^0,f,c
  1511   00109E  D7FC               	bra	u787
  1512   0010A0  D000               	nop2	
  1513   0010A2                     
  1514                           ;dc_motor.c: 126:         }
  1515   0010A2  4A1B               	infsnz	turnLeft@i^0,f,c
  1516   0010A4  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1517   0010A6                     l124:
  1518   0010A6  5016               	movf	turnLeft@turnDuration^0,w,c
  1519   0010A8  6E18               	movwf	??_turnLeft^0,c
  1520   0010AA  6A19               	clrf	(??_turnLeft+1)^0,c
  1521   0010AC  5018               	movf	??_turnLeft^0,w,c
  1522   0010AE  5C1B               	subwf	turnLeft@i^0,w,c
  1523   0010B0  501C               	movf	(turnLeft@i+1)^0,w,c
  1524   0010B2  0A80               	xorlw	128
  1525   0010B4  6E1A               	movwf	(??_turnLeft+2)^0,c
  1526   0010B6  5019               	movf	(??_turnLeft+1)^0,w,c
  1527   0010B8  0A80               	xorlw	128
  1528   0010BA  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1529   0010BC  A0D8               	btfss	status,0,c
  1530   0010BE  EF63  F008         	goto	u391
  1531   0010C2  EF65  F008         	goto	u390
  1532   0010C6                     u391:
  1533   0010C6  EF49  F008         	goto	l1302
  1534   0010CA                     u390:
  1535   0010CA                     
  1536                           ;dc_motor.c: 128:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  1537   0010CA  C015  F01D         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  1538   0010CE  6A1E               	clrf	(turnLeft@cur_power+1)^0,c
  1539   0010D0                     l1306:
  1540   0010D0  BE1E               	btfsc	(turnLeft@cur_power+1)^0,7,c
  1541   0010D2  EF6F  F008         	goto	u400
  1542   0010D6  EF6D  F008         	goto	u401
  1543   0010DA                     u401:
  1544   0010DA  EF71  F008         	goto	l1310
  1545   0010DE                     u400:
  1546   0010DE  EFB6  F008         	goto	l132
  1547   0010E2                     l1310:
  1548                           
  1549                           ;dc_motor.c: 129:         mL->power = cur_power+mL->compensation;
  1550   0010E2  5013               	movf	turnLeft@mL^0,w,c
  1551   0010E4  6ED9               	movwf	fsr2l,c
  1552   0010E6  6ADA               	clrf	fsr2h,c
  1553   0010E8  5013               	movf	turnLeft@mL^0,w,c
  1554   0010EA  6EE1               	movwf	fsr1l,c
  1555   0010EC  6AE2               	clrf	fsr1h,c
  1556   0010EE  0E09               	movlw	9
  1557   0010F0  26E1               	addwf	fsr1l,f,c
  1558   0010F2  50E7               	movf	indf1,w,c
  1559   0010F4  241D               	addwf	turnLeft@cur_power^0,w,c
  1560   0010F6  6EDF               	movwf	indf2,c
  1561                           
  1562                           ;dc_motor.c: 130:         mR->power = cur_power+mR->compensation;
  1563   0010F8  5014               	movf	turnLeft@mR^0,w,c
  1564   0010FA  6ED9               	movwf	fsr2l,c
  1565   0010FC  6ADA               	clrf	fsr2h,c
  1566   0010FE  5014               	movf	turnLeft@mR^0,w,c
  1567   001100  6EE1               	movwf	fsr1l,c
  1568   001102  6AE2               	clrf	fsr1h,c
  1569   001104  0E09               	movlw	9
  1570   001106  26E1               	addwf	fsr1l,f,c
  1571   001108  50E7               	movf	indf1,w,c
  1572   00110A  241D               	addwf	turnLeft@cur_power^0,w,c
  1573   00110C  6EDF               	movwf	indf2,c
  1574   00110E                     
  1575                           ;dc_motor.c: 131:         setMotorPWM(mL);
  1576   00110E  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1577   001112  EC23  F00A         	call	_setMotorPWM	;wreg free
  1578   001116                     
  1579                           ;dc_motor.c: 132:         setMotorPWM(mR);
  1580   001116  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1581   00111A  EC23  F00A         	call	_setMotorPWM	;wreg free
  1582   00111E                     
  1583                           ;dc_motor.c: 133:         for (i=0;i<turnRamp;i++) {
  1584   00111E  0E00               	movlw	0
  1585   001120  6E1C               	movwf	(turnLeft@i+1)^0,c
  1586   001122  0E00               	movlw	0
  1587   001124  6E1B               	movwf	turnLeft@i^0,c
  1588   001126  EF9F  F008         	goto	l129
  1589   00112A                     l1318:
  1590                           
  1591                           ;dc_motor.c: 134:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1592   00112A  0E68               	movlw	104
  1593   00112C  6E18               	movwf	??_turnLeft^0,c
  1594   00112E  0EE4               	movlw	228
  1595   001130                     u797:
  1596   001130  2EE8               	decfsz	wreg,f,c
  1597   001132  D7FE               	bra	u797
  1598   001134  2E18               	decfsz	??_turnLeft^0,f,c
  1599   001136  D7FC               	bra	u797
  1600   001138  D000               	nop2	
  1601   00113A                     
  1602                           ;dc_motor.c: 135:         }
  1603   00113A  4A1B               	infsnz	turnLeft@i^0,f,c
  1604   00113C  2A1C               	incf	(turnLeft@i+1)^0,f,c
  1605   00113E                     l129:
  1606   00113E  5017               	movf	turnLeft@turnRamp^0,w,c
  1607   001140  6E18               	movwf	??_turnLeft^0,c
  1608   001142  6A19               	clrf	(??_turnLeft+1)^0,c
  1609   001144  5018               	movf	??_turnLeft^0,w,c
  1610   001146  5C1B               	subwf	turnLeft@i^0,w,c
  1611   001148  501C               	movf	(turnLeft@i+1)^0,w,c
  1612   00114A  0A80               	xorlw	128
  1613   00114C  6E1A               	movwf	(??_turnLeft+2)^0,c
  1614   00114E  5019               	movf	(??_turnLeft+1)^0,w,c
  1615   001150  0A80               	xorlw	128
  1616   001152  581A               	subwfb	(??_turnLeft+2)^0,w,c
  1617   001154  A0D8               	btfss	status,0,c
  1618   001156  EFAF  F008         	goto	u411
  1619   00115A  EFB1  F008         	goto	u410
  1620   00115E                     u411:
  1621   00115E  EF95  F008         	goto	l1318
  1622   001162                     u410:
  1623   001162                     
  1624                           ;dc_motor.c: 136:     }
  1625   001162  061D               	decf	turnLeft@cur_power^0,f,c
  1626   001164  A0D8               	btfss	status,0,c
  1627   001166  061E               	decf	(turnLeft@cur_power+1)^0,f,c
  1628   001168  EF68  F008         	goto	l1306
  1629   00116C                     l132:
  1630   00116C  0012               	return		;funcret
  1631   00116E                     __end_of_turnLeft:
  1632                           	callstack 0
  1633                           
  1634 ;; *************** function _setMotorPWM *****************
  1635 ;; Defined at:
  1636 ;;		line 65 in file "dc_motor.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1639 ;;		 -> main@motorR(10), main@motorL(10), 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;  negDuty         1   17[COMRAM] unsigned char 
  1642 ;;  posDuty         1   16[COMRAM] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1652 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1655 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1656 ;;Total ram usage:        5 bytes
  1657 ;; Hardware stack levels used: 1
  1658 ;; Hardware stack levels required when called: 1
  1659 ;; This function calls:
  1660 ;;		___lwdiv
  1661 ;;		___wmul
  1662 ;; This function is called by:
  1663 ;;		_turnLeft
  1664 ;;		_turnRight
  1665 ;;		_stop
  1666 ;;		_fullSpeedAhead
  1667 ;;		_reverseOneSquare
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text5
  1672   001446                     __ptext5:
  1673                           	callstack 0
  1674   001446                     _setMotorPWM:
  1675                           	callstack 28
  1676   001446                     
  1677                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1678   001446  500E               	movf	setMotorPWM@m^0,w,c
  1679   001448  6ED9               	movwf	fsr2l,c
  1680   00144A  6ADA               	clrf	fsr2h,c
  1681   00144C  0E02               	movlw	2
  1682   00144E  26D9               	addwf	fsr2l,f,c
  1683   001450  50DF               	movf	indf2,w,c
  1684   001452  B4D8               	btfsc	status,2,c
  1685   001454  EF2E  F00A         	goto	u351
  1686   001458  EF30  F00A         	goto	u350
  1687   00145C                     u351:
  1688   00145C  EF60  F00A         	goto	l1270
  1689   001460                     u350:
  1690   001460                     
  1691                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1692   001460  500E               	movf	setMotorPWM@m^0,w,c
  1693   001462  6ED9               	movwf	fsr2l,c
  1694   001464  6ADA               	clrf	fsr2h,c
  1695   001466  50DF               	movf	indf2,w,c
  1696   001468  6E0F               	movwf	??_setMotorPWM^0,c
  1697   00146A  500F               	movf	??_setMotorPWM^0,w,c
  1698   00146C  6E01               	movwf	___wmul@multiplier^0,c
  1699   00146E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1700   001470  500E               	movf	setMotorPWM@m^0,w,c
  1701   001472  6ED9               	movwf	fsr2l,c
  1702   001474  6ADA               	clrf	fsr2h,c
  1703   001476  0E03               	movlw	3
  1704   001478  26D9               	addwf	fsr2l,f,c
  1705   00147A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1706   00147E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1707   001482  EC4F  F00B         	call	___wmul	;wreg free
  1708   001486  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1709   00148A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1710   00148E  0E00               	movlw	0
  1711   001490  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1712   001492  0E64               	movlw	100
  1713   001494  6E09               	movwf	___lwdiv@divisor^0,c
  1714   001496  EC15  F00B         	call	___lwdiv	;wreg free
  1715   00149A  500E               	movf	setMotorPWM@m^0,w,c
  1716   00149C  6ED9               	movwf	fsr2l,c
  1717   00149E  6ADA               	clrf	fsr2h,c
  1718   0014A0  0E03               	movlw	3
  1719   0014A2  26D9               	addwf	fsr2l,f,c
  1720   0014A4  50DF               	movf	indf2,w,c
  1721   0014A6  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1722   0014A8  5007               	movf	?___lwdiv^0,w,c
  1723   0014AA  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1724   0014AC  6E11               	movwf	setMotorPWM@posDuty^0,c
  1725   0014AE                     
  1726                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1727   0014AE  500E               	movf	setMotorPWM@m^0,w,c
  1728   0014B0  6ED9               	movwf	fsr2l,c
  1729   0014B2  6ADA               	clrf	fsr2h,c
  1730   0014B4  0E03               	movlw	3
  1731   0014B6  26D9               	addwf	fsr2l,f,c
  1732   0014B8  50DF               	movf	indf2,w,c
  1733   0014BA  6E12               	movwf	setMotorPWM@negDuty^0,c
  1734                           
  1735                           ;dc_motor.c: 72:     }
  1736   0014BC  EF81  F00A         	goto	l1274
  1737   0014C0                     l1270:
  1738                           
  1739                           ;dc_motor.c: 74:         posDuty=0;
  1740   0014C0  0E00               	movlw	0
  1741   0014C2  6E11               	movwf	setMotorPWM@posDuty^0,c
  1742   0014C4                     
  1743                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1744   0014C4  500E               	movf	setMotorPWM@m^0,w,c
  1745   0014C6  6ED9               	movwf	fsr2l,c
  1746   0014C8  6ADA               	clrf	fsr2h,c
  1747   0014CA  50DF               	movf	indf2,w,c
  1748   0014CC  6E0F               	movwf	??_setMotorPWM^0,c
  1749   0014CE  500F               	movf	??_setMotorPWM^0,w,c
  1750   0014D0  6E01               	movwf	___wmul@multiplier^0,c
  1751   0014D2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1752   0014D4  500E               	movf	setMotorPWM@m^0,w,c
  1753   0014D6  6ED9               	movwf	fsr2l,c
  1754   0014D8  6ADA               	clrf	fsr2h,c
  1755   0014DA  0E03               	movlw	3
  1756   0014DC  26D9               	addwf	fsr2l,f,c
  1757   0014DE  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1758   0014E2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1759   0014E6  EC4F  F00B         	call	___wmul	;wreg free
  1760   0014EA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1761   0014EE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1762   0014F2  0E00               	movlw	0
  1763   0014F4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1764   0014F6  0E64               	movlw	100
  1765   0014F8  6E09               	movwf	___lwdiv@divisor^0,c
  1766   0014FA  EC15  F00B         	call	___lwdiv	;wreg free
  1767   0014FE  5007               	movf	?___lwdiv^0,w,c
  1768   001500  6E12               	movwf	setMotorPWM@negDuty^0,c
  1769   001502                     l1274:
  1770                           
  1771                           ;dc_motor.c: 78:     if (m->direction) {
  1772   001502  500E               	movf	setMotorPWM@m^0,w,c
  1773   001504  6ED9               	movwf	fsr2l,c
  1774   001506  6ADA               	clrf	fsr2h,c
  1775   001508  0E01               	movlw	1
  1776   00150A  26D9               	addwf	fsr2l,f,c
  1777   00150C  50DF               	movf	indf2,w,c
  1778   00150E  B4D8               	btfsc	status,2,c
  1779   001510  EF8C  F00A         	goto	u361
  1780   001514  EF8E  F00A         	goto	u360
  1781   001518                     u361:
  1782   001518  EFAE  F00A         	goto	l1278
  1783   00151C                     u360:
  1784   00151C                     
  1785                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1786   00151C  500E               	movf	setMotorPWM@m^0,w,c
  1787   00151E  6ED9               	movwf	fsr2l,c
  1788   001520  6ADA               	clrf	fsr2h,c
  1789   001522  0E05               	movlw	5
  1790   001524  26D9               	addwf	fsr2l,f,c
  1791   001526  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1792   00152A  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1793   00152E  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1794   001532  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1795   001536  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1796                           
  1797                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1798   00153A  500E               	movf	setMotorPWM@m^0,w,c
  1799   00153C  6ED9               	movwf	fsr2l,c
  1800   00153E  6ADA               	clrf	fsr2h,c
  1801   001540  0E07               	movlw	7
  1802   001542  26D9               	addwf	fsr2l,f,c
  1803   001544  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1804   001548  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1805   00154C  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1806   001550  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1807   001554  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1808                           
  1809                           ;dc_motor.c: 81:     } else {
  1810   001558  EFCC  F00A         	goto	l107
  1811   00155C                     l1278:
  1812                           
  1813                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1814   00155C  500E               	movf	setMotorPWM@m^0,w,c
  1815   00155E  6ED9               	movwf	fsr2l,c
  1816   001560  6ADA               	clrf	fsr2h,c
  1817   001562  0E05               	movlw	5
  1818   001564  26D9               	addwf	fsr2l,f,c
  1819   001566  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1820   00156A  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1821   00156E  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1822   001572  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1823   001576  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1824                           
  1825                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1826   00157A  500E               	movf	setMotorPWM@m^0,w,c
  1827   00157C  6ED9               	movwf	fsr2l,c
  1828   00157E  6ADA               	clrf	fsr2h,c
  1829   001580  0E07               	movlw	7
  1830   001582  26D9               	addwf	fsr2l,f,c
  1831   001584  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1832   001588  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1833   00158C  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1834   001590  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1835   001594  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1836   001598                     l107:
  1837   001598  0012               	return		;funcret
  1838   00159A                     __end_of_setMotorPWM:
  1839                           	callstack 0
  1840                           
  1841 ;; *************** function ___wmul *****************
  1842 ;; Defined at:
  1843 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  multiplier      2    0[COMRAM] unsigned int 
  1846 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  product         2    4[COMRAM] unsigned int 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  2    0[COMRAM] unsigned int 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, prodl, prodh
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1858 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1861 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1862 ;;Total ram usage:        6 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_setMotorPWM
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text6
  1872   00169E                     __ptext6:
  1873                           	callstack 0
  1874   00169E                     ___wmul:
  1875                           	callstack 28
  1876   00169E  5001               	movf	___wmul@multiplier^0,w,c
  1877   0016A0  0203               	mulwf	___wmul@multiplicand^0,c
  1878   0016A2  CFF3 F005          	movff	prodl,___wmul@product
  1879   0016A6  CFF4 F006          	movff	prodh,___wmul@product+1
  1880   0016AA  5001               	movf	___wmul@multiplier^0,w,c
  1881   0016AC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1882   0016AE  50F3               	movf	243,w,c
  1883   0016B0  2606               	addwf	(___wmul@product+1)^0,f,c
  1884   0016B2  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1885   0016B4  0203               	mulwf	___wmul@multiplicand^0,c
  1886   0016B6  50F3               	movf	243,w,c
  1887   0016B8  2606               	addwf	(___wmul@product+1)^0,f,c
  1888   0016BA  C005  F001         	movff	___wmul@product,?___wmul
  1889   0016BE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1890   0016C2  0012               	return		;funcret
  1891   0016C4                     __end_of___wmul:
  1892                           	callstack 0
  1893                           
  1894 ;; *************** function ___lwdiv *****************
  1895 ;; Defined at:
  1896 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  dividend        2    6[COMRAM] unsigned int 
  1899 ;;  divisor         2    8[COMRAM] unsigned int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  quotient        2   10[COMRAM] unsigned int 
  1902 ;;  counter         1   12[COMRAM] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  2    6[COMRAM] unsigned int 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1915 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1916 ;;Total ram usage:        7 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_setMotorPWM
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text7
  1926   00162A                     __ptext7:
  1927                           	callstack 0
  1928   00162A                     ___lwdiv:
  1929                           	callstack 28
  1930   00162A  0E00               	movlw	0
  1931   00162C  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1932   00162E  0E00               	movlw	0
  1933   001630  6E0B               	movwf	___lwdiv@quotient^0,c
  1934   001632  5009               	movf	___lwdiv@divisor^0,w,c
  1935   001634  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1936   001636  B4D8               	btfsc	status,2,c
  1937   001638  EF20  F00B         	goto	u321
  1938   00163C  EF22  F00B         	goto	u320
  1939   001640                     u321:
  1940   001640  EF4A  F00B         	goto	l684
  1941   001644                     u320:
  1942   001644  0E01               	movlw	1
  1943   001646  6E0D               	movwf	___lwdiv@counter^0,c
  1944   001648  EF2A  F00B         	goto	l1250
  1945   00164C                     l1248:
  1946   00164C  90D8               	bcf	status,0,c
  1947   00164E  3609               	rlcf	___lwdiv@divisor^0,f,c
  1948   001650  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1949   001652  2A0D               	incf	___lwdiv@counter^0,f,c
  1950   001654                     l1250:
  1951   001654  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1952   001656  EF2F  F00B         	goto	u331
  1953   00165A  EF31  F00B         	goto	u330
  1954   00165E                     u331:
  1955   00165E  EF26  F00B         	goto	l1248
  1956   001662                     u330:
  1957   001662                     l1252:
  1958   001662  90D8               	bcf	status,0,c
  1959   001664  360B               	rlcf	___lwdiv@quotient^0,f,c
  1960   001666  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1961   001668  5009               	movf	___lwdiv@divisor^0,w,c
  1962   00166A  5C07               	subwf	___lwdiv@dividend^0,w,c
  1963   00166C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1964   00166E  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1965   001670  A0D8               	btfss	status,0,c
  1966   001672  EF3D  F00B         	goto	u341
  1967   001676  EF3F  F00B         	goto	u340
  1968   00167A                     u341:
  1969   00167A  EF44  F00B         	goto	l1260
  1970   00167E                     u340:
  1971   00167E  5009               	movf	___lwdiv@divisor^0,w,c
  1972   001680  5E07               	subwf	___lwdiv@dividend^0,f,c
  1973   001682  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1974   001684  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1975   001686  800B               	bsf	___lwdiv@quotient^0,0,c
  1976   001688                     l1260:
  1977   001688  90D8               	bcf	status,0,c
  1978   00168A  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1979   00168C  3209               	rrcf	___lwdiv@divisor^0,f,c
  1980   00168E  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1981   001690  EF31  F00B         	goto	l1252
  1982   001694                     l684:
  1983   001694  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1984   001698  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1985   00169C  0012               	return		;funcret
  1986   00169E                     __end_of___lwdiv:
  1987                           	callstack 0
  1988                           
  1989                           	psect	smallconst
  1990   000E00                     __psmallconst:
  1991                           	callstack 0
  1992   000E00  00                 	db	0
  1993   000E01  00                 	db	0	; dummy byte at the end
  1994   000000                     
  1995                           	psect	rparam
  1996   000000                     
  1997                           	psect	config
  1998                           
  1999                           ;Config register CONFIG1L @ 0x300000
  2000                           ;	External Oscillator mode Selection bits
  2001                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2002                           ;	Power-up default value for COSC bits
  2003                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2004   300000                     	org	3145728
  2005   300000  AA                 	db	170
  2006                           
  2007                           ;Config register CONFIG1H @ 0x300001
  2008                           ;	unspecified, using default values
  2009                           ;	Clock Out Enable bit
  2010                           ;	CLKOUTEN = 0x1, unprogrammed default
  2011                           ;	Clock Switch Enable bit
  2012                           ;	CSWEN = 0x1, unprogrammed default
  2013                           ;	Fail-Safe Clock Monitor Enable bit
  2014                           ;	FCMEN = 0x1, unprogrammed default
  2015   300001                     	org	3145729
  2016   300001  FF                 	db	255
  2017                           
  2018                           ;Config register CONFIG3L @ 0x300004
  2019                           ;	WDT Period Select bits
  2020                           ;	WDTCPS = 0x1F, unprogrammed default
  2021                           ;	WDT operating mode
  2022                           ;	WDTE = OFF, WDT Disabled
  2023   300004                     	org	3145732
  2024   300004  9F                 	db	159
  2025                           
  2026                           ;Config register CONFIG3H @ 0x300005
  2027                           ;	unspecified, using default values
  2028                           ;	WDT Window Select bits
  2029                           ;	WDTCWS = 0x7, unprogrammed default
  2030                           ;	WDT input clock selector
  2031                           ;	WDTCCS = 0x7, unprogrammed default
  2032   300005                     	org	3145733
  2033   300005  FF                 	db	255
  2034                           tosu	equ	0xFFF
  2035                           tosh	equ	0xFFE
  2036                           tosl	equ	0xFFD
  2037                           stkptr	equ	0xFFC
  2038                           pclatu	equ	0xFFB
  2039                           pclath	equ	0xFFA
  2040                           pcl	equ	0xFF9
  2041                           tblptru	equ	0xFF8
  2042                           tblptrh	equ	0xFF7
  2043                           tblptrl	equ	0xFF6
  2044                           tablat	equ	0xFF5
  2045                           prodh	equ	0xFF4
  2046                           prodl	equ	0xFF3
  2047                           indf0	equ	0xFEF
  2048                           postinc0	equ	0xFEE
  2049                           postdec0	equ	0xFED
  2050                           preinc0	equ	0xFEC
  2051                           plusw0	equ	0xFEB
  2052                           fsr0h	equ	0xFEA
  2053                           fsr0l	equ	0xFE9
  2054                           wreg	equ	0xFE8
  2055                           indf1	equ	0xFE7
  2056                           postinc1	equ	0xFE6
  2057                           postdec1	equ	0xFE5
  2058                           preinc1	equ	0xFE4
  2059                           plusw1	equ	0xFE3
  2060                           fsr1h	equ	0xFE2
  2061                           fsr1l	equ	0xFE1
  2062                           bsr	equ	0xFE0
  2063                           indf2	equ	0xFDF
  2064                           postinc2	equ	0xFDE
  2065                           postdec2	equ	0xFDD
  2066                           preinc2	equ	0xFDC
  2067                           plusw2	equ	0xFDB
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     62      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(COMRAM[1]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), main@motorR(COMRAM[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_calibration
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   21473
                                             37 COMRAM    25    25      0
                        _calibration
                    _initDCmotorsPWM
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   10951
                                             30 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                           12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                            12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _initDCmotorsPWM
   _turnLeft
   _turnRight

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     3E      3E       1       65.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhhhh     17      0       0      36        0.0%
BITBIGSFRllhhhh      5      0       0      37        0.0%
BITBIGSFRllhhlh      2      0       0      38        0.0%
BITBIGSFRllhhll      1      0       0      39        0.0%
BITBIGSFRllhl       54      0       0      40        0.0%
BITBIGSFRlllh        2      0       0      41        0.0%
BITBIGSFRllllh      6C      0       0      42        0.0%
BITBIGSFRlllllh     2B      0       0      43        0.0%
BITBIGSFRlllllh     11      0       0      44        0.0%
BITBIGSFRlllllh      1      0       0      45        0.0%
BITBIGSFRllllll      A      0       0      46        0.0%
BITBIGSFRllllll     7A      0       0      47        0.0%
ABS                  0      0       0      48        0.0%
BIGRAM             DE9      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 29 15:50:55 2024

                      l37 1358       ___wmul@multiplicand 0003          main@turnDuration 002A  
                     l100 1628                       l120 103A                       l107 1598  
                     l132 116C                       l124 10A6                       l141 0EF0  
                     l126 10CA                       l143 0F14                       l129 113E  
                     l137 0E84                       l146 0F88                       l149 0FB6  
                     l190 12DC                       l183 124A                       l184 1276  
                     l193 16C2                       l187 12B4                       l179 122E  
                     l188 12BC                       l691 169C                       l684 1694  
                     u320 1644                       u400 10DE                       u321 1640  
                     u401 10DA                       u330 1662                       u410 1162  
                     u331 165E                       u411 115E                       u340 167E  
                     u420 0EA8                       u500 126E                       u341 167A  
                     u421 0EA4                       u501 126A                       u350 1460  
                     u430 0ED0                       u510 1284                       u351 145C  
                     u431 0ECC                       u511 1280                       u360 151C  
                     u440 0F14                       u520 12AE                       u361 1518  
                     u441 0F10                       u521 12AA                       u370 105E  
                     u450 0F28                       u530 1366                       u371 105A  
                     u451 0F24                       u531 1362                       u380 1086  
                     u460 0FAC                       u381 1082                       u461 0FA8  
                     u390 10CA                       u470 123C                       u391 10C6  
                     u471 1238                       u480 124A                       u481 1246  
                     u490 1258                       u491 1254                       u707 11CC  
                     u717 1202                       u637 1370                       u727 1292  
                     u647 13B8                       u737 12CA                       u657 13E8  
                     u747 0E76                       u667 1400                       u757 0EE2  
                     u677 1418                       u767 0F7A                       u687 1430  
                     u777 102C                       u697 1196                       u787 1098  
                     u797 1130                       wreg 0FE8                      l1300 1086  
                    l1310 10E2                      l1302 1092                      l1320 113A  
                    l1312 110E                      l1304 10A2                      l1400 11A4  
                    l1250 1654                      l1242 162A                      l1322 1162  
                    l1314 1116                      l1306 10D0                      l1330 0E28  
                    l1410 126E                      l1402 11DA                      l1260 1688  
                    l1252 1662                      l1244 1632                      l1236 169E  
                    l1316 111E                      l1340 0E80                      l1332 0E54  
                    l1420 12A0                      l1412 1270                      l1404 11F8  
                    l1500 137E                      l1262 168E                      l1254 1668  
                    l1246 1644                      l1238 16BA                      l1270 14C0  
                    l1318 112A                      l1350 0EEC                      l1342 0EA8  
                    l1334 0E5C                      l1326 0E02                      l1422 12AE  
                    l1414 1284                      l1406 123C                      l1510 140E  
                    l1502 1396                      l1256 167E                      l1248 164C  
                    l1272 14C4                      l1264 1446                      l1280 0FB8  
                    l1360 0F60                      l1352 0F1A                      l1336 0E64  
                    l1344 0EAC                      l1328 0E1C                      l1416 1286  
                    l1408 1258                      l1512 1426                      l1504 13C6  
                    l1440 12DE                      l1258 1686                      l1274 1502  
                    l1266 1460                      l1290 101A                      l1282 0FD2  
                    l1362 0F68                      l1346 0ED0                      l1338 0E70  
                    l1434 12C0                      l1418 1288                      l1506 13DE  
                    l1450 12FE                      l1442 12EA                      l1276 151C  
                    l1268 14AE                      l1292 1026                      l1284 0FDE  
                    l1364 0F74                      l1356 0F2C                      l1348 0EDC  
                    l1436 12D8                      l1380 15F8                      l1372 159A  
                    l1508 13F6                      l1460 131A                      l1452 1306  
                    l1444 12EE                      l1278 155C                      l1294 1036  
                    l1286 100A                      l1366 0F84                      l1358 0F58  
                    l1390 161A                      l1382 1602                      l1374 15AA  
                    l1470 133A                      l1462 131E                      l1454 130E  
                    l1446 12F2                      l1438 12DE                      l1296 105E  
                    l1288 1012                      l1368 0FAC                      l1392 161C  
                    l1384 1604                      l1376 15D0                      l1480 1342  
                    l1472 133A                      l1464 1326                      l1456 1312  
                    l1448 12F6                      l1298 1062                      l1394 1626  
                    l1386 160E                      l1378 15D4                      l1490 134E  
                    l1482 1346                      l1474 133A                      l1466 132E  
                    l1458 1316                      l1396 116E                      l1388 1610  
                    l1492 1350                      l1484 1348                      l1476 133A  
                    l1468 1336                      l1398 118C                      l1494 1354  
                    l1486 134A                      l1478 133E                      l1496 1356  
                    l1488 134C                      l1498 1366                      _T2PR 0FBC  
                    _main 12DE                      fsr1h 0FE2                      fsr2h 0FDA  
                    indf1 0FE7                      indf2 0FDF                      fsr1l 0FE1  
                    fsr2l 0FD9                      prodh 0FF4                      prodl 0FF3  
                    start 0000              ___param_bank 0000                     ?_main 0001  
         __end_of___lwdiv 169E                     status 0FD8              main@turnRamp 0029  
         __initialization 16C4              __end_of_main 1446                    ??_main 0026  
           __activetblptr 0000             calibration@mL 001F             calibration@mR 0020  
            ?_setMotorPWM 000E                    _CCPR1H 0FAA                    _CCPR2H 0FA6  
                  _CCPR3H 0F25                    _CCPR4H 0F21                    _RE2PPS 0E74  
                  _RC7PPS 0E69                    _RE4PPS 0E76                    _RG6PPS 0E88  
     calibration@turnRamp 0023   calibration@turnDuration 0022              _CCPTMRS0bits 0FAD  
                  ___wmul 169E                 ??___lwdiv 000B                    isa$std 0001  
            __mediumconst 0000         ??_initDCmotorsPWM 0003          __end_of_turnLeft 116E  
              __accesstop 0060   __end_of__initialization 16C4             main@turnSpeed 0028  
           ___rparam_used 0001            __pcstackCOMRAM 0001              _T2CLKCONbits 0FBF  
                 ?___wmul 0001     turnRight@turnDuration 0016                   __Hparam 0000  
                 __Lparam 0000      calibration@turnSpeed 0021             ??_calibration 0024  
                 ___lwdiv 162A              __psmallconst 0E00                   __pcinit 16C4  
                 __ramtop 0E00                 ?_turnLeft 0013                   __ptext0 12DE  
                 __ptext1 159A                   __ptext2 116E                   __ptext3 0E02  
                 __ptext4 0FB8                   __ptext5 1446                   __ptext6 169E  
                 __ptext7 162A                 _T2CONbits 0FBD                 _T2HLTbits 0FBE  
    end_of_initialization 16C4                   postdec2 0FDD                   postinc2 0FDE  
         _initDCmotorsPWM 159A                ??_turnLeft 0018                 _PORTFbits 0F8E  
      setMotorPWM@negDuty 0012         __end_of_turnRight 0FB8       __end_of_calibration 12DE  
      setMotorPWM@posDuty 0011                 _TRISCbits 0F83                 _TRISDbits 0F84  
               _TRISEbits 0F85                 _TRISFbits 0F86                 _TRISGbits 0F87  
               _TRISHbits 0F88               _CCP1CONbits 0FAB               _CCP2CONbits 0FA7  
             _CCP3CONbits 0F26               _CCP4CONbits 0F22                main@motorL 002B  
              main@motorR 0035      turnLeft@turnDuration 0016            __end_of___wmul 16C4  
     start_initialization 16C4   __end_of_initDCmotorsPWM 162A        turnRight@cur_power 001D  
                ??___wmul 0005               _calibration 116E         turnLeft@cur_power 001D  
        ___lwdiv@dividend 0007        turnRight@turnSpeed 0015                  ?___lwdiv 0007  
             __smallconst 0E00         turnLeft@turnSpeed 0015             ??_setMotorPWM 000F  
        ___lwdiv@quotient 000B  initDCmotorsPWM@PWMperiod 0001            ___wmul@product 0005  
                _LATCbits 0F7B                  _LATDbits 0F7C                  _LATEbits 0F7D  
                _LATGbits 0F7F                  _LATHbits 0F80               turnRight@mL 0013  
             turnRight@mR 0014          ?_initDCmotorsPWM 0001         ___wmul@multiplier 0001  
            setMotorPWM@m 000E                 _turnRight 0E02       __end_of_setMotorPWM 159A  
                __Hrparam 0000                  __Lrparam 0000                _ANSELFbits 0EB4  
         ___lwdiv@divisor 0009           ___lwdiv@counter 000D         turnRight@turnRamp 0017  
              ?_turnRight 0013          turnLeft@turnRamp 0017                turnLeft@mL 0013  
              turnLeft@mR 0014                turnRight@i 001B                  isa$xinst 0000  
            ?_calibration 001F                  _turnLeft 0FB8               _setMotorPWM 1446  
               turnLeft@i 001B               ??_turnRight 0018  
