

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 29 17:26:04 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 21/07/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F67K40 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     _TRISGbits	set	3975
    58   000000                     _TRISEbits	set	3973
    59   000000                     _TRISFbits	set	3974
    60   000000                     _TRISHbits	set	3976
    61   000000                     _RC7PPS	set	3689
    62   000000                     _RE2PPS	set	3700
    63   000000                     _ANSELFbits	set	3764
    64   000000                     _CCPR4H	set	3873
    65   000000                     _CCPR3H	set	3877
    66   000000                     _CCPR2H	set	4006
    67   000000                     _CCPR1H	set	4010
    68   000000                     _CCP1CONbits	set	4011
    69   000000                     _CCPTMRS0bits	set	4013
    70   000000                     _T2PR	set	4028
    71   000000                     _T2CONbits	set	4029
    72   000000                     _CCP2CONbits	set	4007
    73   000000                     _CCP3CONbits	set	3878
    74   000000                     _LATCbits	set	3963
    75   000000                     _LATDbits	set	3964
    76   000000                     _CCP4CONbits	set	3874
    77   000000                     _LATGbits	set	3967
    78   000000                     _LATEbits	set	3965
    79   000000                     _LATHbits	set	3968
    80   000000                     _TRISDbits	set	3972
    81   000000                     _TRISCbits	set	3971
    82   000000                     _PORTFbits	set	3982
    83   000000                     _RE4PPS	set	3702
    84   000000                     _RG6PPS	set	3720
    85   000000                     _T2CLKCONbits	set	4031
    86   000000                     _T2HLTbits	set	4030
    87                           
    88                           ; #config settings
    89                           
    90                           	psect	cinit
    91   001A90                     __pcinit:
    92                           	callstack 0
    93   001A90                     start_initialization:
    94                           	callstack 0
    95   001A90                     __initialization:
    96                           	callstack 0
    97   001A90                     end_of_initialization:
    98                           	callstack 0
    99   001A90                     __end_of__initialization:
   100                           	callstack 0
   101   001A90  0100               	movlb	0
   102   001A92  EF99  F009         	goto	_main	;jump to C main() function
   103                           
   104                           	psect	cstackCOMRAM
   105   000001                     __pcstackCOMRAM:
   106                           	callstack 0
   107   000001                     ?___wmul:
   108                           	callstack 0
   109   000001                     initDCmotorsPWM@PWMperiod:
   110                           	callstack 0
   111   000001                     ___wmul@multiplier:
   112                           	callstack 0
   113                           
   114                           ; 2 bytes @ 0x0
   115   000001                     	ds	2
   116   000003                     ___wmul@multiplicand:
   117                           	callstack 0
   118                           
   119                           ; 2 bytes @ 0x2
   120   000003                     	ds	2
   121   000005                     ___wmul@product:
   122                           	callstack 0
   123                           
   124                           ; 2 bytes @ 0x4
   125   000005                     	ds	2
   126   000007                     ?___lwdiv:
   127                           	callstack 0
   128   000007                     ___lwdiv@dividend:
   129                           	callstack 0
   130                           
   131                           ; 2 bytes @ 0x6
   132   000007                     	ds	2
   133   000009                     ___lwdiv@divisor:
   134                           	callstack 0
   135                           
   136                           ; 2 bytes @ 0x8
   137   000009                     	ds	2
   138   00000B                     ___lwdiv@quotient:
   139                           	callstack 0
   140                           
   141                           ; 2 bytes @ 0xA
   142   00000B                     	ds	2
   143   00000D                     ___lwdiv@counter:
   144                           	callstack 0
   145                           
   146                           ; 1 bytes @ 0xC
   147   00000D                     	ds	1
   148   00000E                     setMotorPWM@m:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0xD
   152   00000E                     	ds	1
   153   00000F                     ??_setMotorPWM:
   154                           
   155                           ; 1 bytes @ 0xE
   156   00000F                     	ds	2
   157   000011                     setMotorPWM@posDuty:
   158                           	callstack 0
   159                           
   160                           ; 1 bytes @ 0x10
   161   000011                     	ds	1
   162   000012                     setMotorPWM@negDuty:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x11
   166   000012                     	ds	1
   167   000013                     stop@mL:
   168                           	callstack 0
   169   000013                     turnLeft@mL:
   170                           	callstack 0
   171   000013                     turnRight@mL:
   172                           	callstack 0
   173   000013                     fullSpeedAhead@mL:
   174                           	callstack 0
   175   000013                     reverseOneSquare@mL:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x12
   179   000013                     	ds	1
   180   000014                     stop@mR:
   181                           	callstack 0
   182   000014                     turnLeft@mR:
   183                           	callstack 0
   184   000014                     turnRight@mR:
   185                           	callstack 0
   186   000014                     fullSpeedAhead@mR:
   187                           	callstack 0
   188   000014                     reverseOneSquare@mR:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x13
   192   000014                     	ds	1
   193   000015                     stop@straightRamp:
   194                           	callstack 0
   195   000015                     turnLeft@turnSpeed:
   196                           	callstack 0
   197   000015                     turnRight@turnSpeed:
   198                           	callstack 0
   199   000015                     fullSpeedAhead@straightSpeed:
   200                           	callstack 0
   201   000015                     reverseOneSquare@straightSpeed:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x14
   205   000015                     	ds	1
   206   000016                     ??_stop:
   207   000016                     turnLeft@turnDuration:
   208                           	callstack 0
   209   000016                     turnRight@turnDuration:
   210                           	callstack 0
   211   000016                     fullSpeedAhead@straightRamp:
   212                           	callstack 0
   213   000016                     reverseOneSquare@reverseDuration:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x15
   217   000016                     	ds	1
   218   000017                     ??_fullSpeedAhead:
   219   000017                     turnLeft@turnRamp:
   220                           	callstack 0
   221   000017                     turnRight@turnRamp:
   222                           	callstack 0
   223   000017                     reverseOneSquare@straightRamp:
   224                           	callstack 0
   225                           
   226                           ; 1 bytes @ 0x16
   227   000017                     	ds	1
   228   000018                     ??_turnLeft:
   229   000018                     ??_turnRight:
   230   000018                     ??_reverseOneSquare:
   231                           
   232                           ; 1 bytes @ 0x17
   233   000018                     	ds	1
   234   000019                     stop@i:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x18
   238   000019                     	ds	1
   239   00001A                     fullSpeedAhead@i:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x19
   243   00001A                     	ds	1
   244   00001B                     stop@cur_power:
   245                           	callstack 0
   246   00001B                     turnLeft@i:
   247                           	callstack 0
   248   00001B                     turnRight@i:
   249                           	callstack 0
   250   00001B                     reverseOneSquare@i:
   251                           	callstack 0
   252                           
   253                           ; 2 bytes @ 0x1A
   254   00001B                     	ds	1
   255   00001C                     fullSpeedAhead@cur_power:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x1B
   259   00001C                     	ds	1
   260   00001D                     turnLeft@cur_power:
   261                           	callstack 0
   262   00001D                     turnRight@cur_power:
   263                           	callstack 0
   264   00001D                     reverseOneSquare@cur_power:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x1C
   268   00001D                     	ds	2
   269   00001F                     calibration@mL:
   270                           	callstack 0
   271                           
   272                           ; 1 bytes @ 0x1E
   273   00001F                     	ds	1
   274   000020                     calibration@mR:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0x1F
   278   000020                     	ds	1
   279   000021                     calibration@turnSpeed:
   280                           	callstack 0
   281                           
   282                           ; 1 bytes @ 0x20
   283   000021                     	ds	1
   284   000022                     calibration@turnDuration:
   285                           	callstack 0
   286                           
   287                           ; 1 bytes @ 0x21
   288   000022                     	ds	1
   289   000023                     calibration@turnRamp:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x22
   293   000023                     	ds	1
   294   000024                     ??_calibration:
   295                           
   296                           ; 1 bytes @ 0x23
   297   000024                     	ds	2
   298   000026                     ??_main:
   299                           
   300                           ; 1 bytes @ 0x25
   301   000026                     	ds	2
   302   000028                     main@reverseDuration:
   303                           	callstack 0
   304                           
   305                           ; 1 bytes @ 0x27
   306   000028                     	ds	1
   307   000029                     main@straightSpeed:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0x28
   311   000029                     	ds	1
   312   00002A                     main@straightRamp:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x29
   316   00002A                     	ds	1
   317   00002B                     main@turnSpeed:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x2A
   321   00002B                     	ds	1
   322   00002C                     main@turnRamp:
   323                           	callstack 0
   324                           
   325                           ; 1 bytes @ 0x2B
   326   00002C                     	ds	1
   327   00002D                     main@turnDuration:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0x2C
   331   00002D                     	ds	1
   332   00002E                     main@motorR:
   333                           	callstack 0
   334                           
   335                           ; 10 bytes @ 0x2D
   336   00002E                     	ds	10
   337   000038                     main@motorL:
   338                           	callstack 0
   339                           
   340                           ; 10 bytes @ 0x37
   341   000038                     	ds	10
   342                           
   343 ;;
   344 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   345 ;;
   346 ;; *************** function _main *****************
   347 ;; Defined at:
   348 ;;		line 13 in file "main.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;  motorL         10   55[COMRAM] struct DC_motor
   353 ;;  motorR         10   45[COMRAM] struct DC_motor
   354 ;;  PWMcycle        2    0        unsigned int 
   355 ;;  turnDuration    1   44[COMRAM] unsigned char 
   356 ;;  turnRamp        1   43[COMRAM] unsigned char 
   357 ;;  turnSpeed       1   42[COMRAM] unsigned char 
   358 ;;  straightRamp    1   41[COMRAM] unsigned char 
   359 ;;  straightSpee    1   40[COMRAM] unsigned char 
   360 ;;  reverseDurat    1   39[COMRAM] unsigned char 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   371 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   373 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   374 ;;Total ram usage:       28 bytes
   375 ;; Hardware stack levels required when called: 4
   376 ;; This function calls:
   377 ;;		_calibration
   378 ;;		_fullSpeedAhead
   379 ;;		_initDCmotorsPWM
   380 ;;		_reverseOneSquare
   381 ;;		_stop
   382 ;;		_turnLeft
   383 ;;		_turnRight
   384 ;; This function is called by:
   385 ;;		Startup code after reset
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           	psect	text0
   390   001332                     __ptext0:
   391                           	callstack 0
   392   001332                     _main:
   393                           	callstack 27
   394   001332                     
   395                           ;main.c: 15:     initDCmotorsPWM(PWMcycle);
   396   001332  0E00               	movlw	0
   397   001334  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   398   001336  0EC7               	movlw	199
   399   001338  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   400   00133A  ECB3  F00C         	call	_initDCmotorsPWM	;wreg free
   401   00133E                     
   402                           ;main.c: 17:     struct DC_motor motorL, motorR;;main.c: 19:     motorL.power=0;
   403   00133E  0E00               	movlw	0
   404   001340  6E38               	movwf	main@motorL^0,c
   405   001342                     
   406                           ;main.c: 20:     motorL.direction=1;
   407   001342  0E01               	movlw	1
   408   001344  6E39               	movwf	(main@motorL+1)^0,c
   409   001346                     
   410                           ;main.c: 21:     motorL.brakemode=1;
   411   001346  0E01               	movlw	1
   412   001348  6E3A               	movwf	(main@motorL+2)^0,c
   413   00134A                     
   414                           ;main.c: 22:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   415   00134A  0EAA               	movlw	170
   416   00134C  6E3D               	movwf	(main@motorL+5)^0,c
   417   00134E  0E0F               	movlw	15
   418   001350  6E3E               	movwf	(main@motorL+6)^0,c
   419   001352                     
   420                           ;main.c: 23:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   421   001352  0EA6               	movlw	166
   422   001354  6E3F               	movwf	(main@motorL+7)^0,c
   423   001356  0E0F               	movlw	15
   424   001358  6E40               	movwf	(main@motorL+8)^0,c
   425   00135A                     
   426                           ;main.c: 24:     motorL.PWMperiod=PWMcycle;
   427   00135A  0E00               	movlw	0
   428   00135C  6E3C               	movwf	(main@motorL+4)^0,c
   429   00135E  0EC7               	movlw	199
   430   001360  6E3B               	movwf	(main@motorL+3)^0,c
   431   001362                     
   432                           ;main.c: 25:     motorL.compensation=3;
   433   001362  0E03               	movlw	3
   434   001364  6E41               	movwf	(main@motorL+9)^0,c
   435   001366                     
   436                           ;main.c: 27:     motorR.power=0;
   437   001366  0E00               	movlw	0
   438   001368  6E2E               	movwf	main@motorR^0,c
   439   00136A                     
   440                           ;main.c: 28:     motorR.direction=1;
   441   00136A  0E01               	movlw	1
   442   00136C  6E2F               	movwf	(main@motorR+1)^0,c
   443   00136E                     
   444                           ;main.c: 29:     motorR.brakemode=1;
   445   00136E  0E01               	movlw	1
   446   001370  6E30               	movwf	(main@motorR+2)^0,c
   447   001372                     
   448                           ;main.c: 30:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   449   001372  0E25               	movlw	37
   450   001374  6E33               	movwf	(main@motorR+5)^0,c
   451   001376  0E0F               	movlw	15
   452   001378  6E34               	movwf	(main@motorR+6)^0,c
   453   00137A                     
   454                           ;main.c: 31:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   455   00137A  0E21               	movlw	33
   456   00137C  6E35               	movwf	(main@motorR+7)^0,c
   457   00137E  0E0F               	movlw	15
   458   001380  6E36               	movwf	(main@motorR+8)^0,c
   459   001382                     
   460                           ;main.c: 32:     motorR.PWMperiod=PWMcycle;
   461   001382  0E00               	movlw	0
   462   001384  6E32               	movwf	(main@motorR+4)^0,c
   463   001386  0EC7               	movlw	199
   464   001388  6E31               	movwf	(main@motorR+3)^0,c
   465   00138A                     
   466                           ;main.c: 33:     motorR.compensation=0;
   467   00138A  0E00               	movlw	0
   468   00138C  6E37               	movwf	(main@motorR+9)^0,c
   469   00138E                     
   470                           ;main.c: 36:     char straightSpeed=60;
   471   00138E  0E3C               	movlw	60
   472   001390  6E29               	movwf	main@straightSpeed^0,c
   473   001392                     
   474                           ;main.c: 37:     unsigned char straightRamp=2;
   475   001392  0E02               	movlw	2
   476   001394  6E2A               	movwf	main@straightRamp^0,c
   477   001396                     
   478                           ;main.c: 39:     unsigned char reverseDuration=10;
   479   001396  0E0A               	movlw	10
   480   001398  6E28               	movwf	main@reverseDuration^0,c
   481   00139A                     
   482                           ;main.c: 41:     char turnSpeed=21;
   483   00139A  0E15               	movlw	21
   484   00139C  6E2B               	movwf	main@turnSpeed^0,c
   485   00139E                     
   486                           ;main.c: 42:     unsigned char turnDuration=10;
   487   00139E  0E0A               	movlw	10
   488   0013A0  6E2D               	movwf	main@turnDuration^0,c
   489   0013A2                     
   490                           ;main.c: 43:     unsigned char turnRamp=4;
   491   0013A2  0E04               	movlw	4
   492   0013A4  6E2C               	movwf	main@turnRamp^0,c
   493   0013A6                     
   494                           ;main.c: 46:     LATDbits.LATD7=0;
   495   0013A6  9E7C               	bcf	124,7,c	;volatile
   496   0013A8                     
   497                           ;main.c: 47:     TRISDbits.TRISD7=0;
   498   0013A8  9E84               	bcf	132,7,c	;volatile
   499   0013AA                     
   500                           ;main.c: 48:     LATHbits.LATH3=0;
   501   0013AA  9680               	bcf	128,3,c	;volatile
   502   0013AC                     
   503                           ;main.c: 49:     TRISHbits.TRISH3=0;
   504   0013AC  9688               	bcf	136,3,c	;volatile
   505   0013AE                     
   506                           ;main.c: 52:     TRISFbits.TRISF2=1;
   507   0013AE  8486               	bsf	134,2,c	;volatile
   508   0013B0                     
   509                           ;main.c: 53:     ANSELFbits.ANSELF2=0;
   510   0013B0  010E               	movlb	14	; () banked
   511   0013B2  95B4               	bcf	180,2,b	;volatile
   512   0013B4                     
   513                           ; BSR set to: 14
   514                           ;main.c: 54:     TRISFbits.TRISF3=1;
   515   0013B4  8686               	bsf	134,3,c	;volatile
   516   0013B6                     
   517                           ; BSR set to: 14
   518                           ;main.c: 55:     ANSELFbits.ANSELF3=0;
   519   0013B6  97B4               	bcf	180,3,b	;volatile
   520   0013B8                     l43:
   521   0013B8  B48E               	btfsc	142,2,c	;volatile
   522   0013BA  EFE1  F009         	goto	u621
   523   0013BE  EFE3  F009         	goto	u620
   524   0013C2                     u621:
   525   0013C2  EFDC  F009         	goto	l43
   526   0013C6                     u620:
   527   0013C6                     
   528                           ;main.c: 59:     _delay((unsigned long)((500)*(64000000/4000.0)));
   529   0013C6  0E29               	movlw	41
   530   0013C8  6E27               	movwf	(??_main+1)^0,c
   531   0013CA  0E96               	movlw	150
   532   0013CC  6E26               	movwf	??_main^0,c
   533   0013CE  0E7F               	movlw	127
   534   0013D0                     u637:
   535   0013D0  2EE8               	decfsz	wreg,f,c
   536   0013D2  D7FE               	bra	u637
   537   0013D4  2E26               	decfsz	??_main^0,f,c
   538   0013D6  D7FC               	bra	u637
   539   0013D8  2E27               	decfsz	(??_main+1)^0,f,c
   540   0013DA  D7FA               	bra	u637
   541   0013DC  0000               	nop	
   542   0013DE                     
   543                           ;main.c: 61:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
   544   0013DE  0E38               	movlw	low main@motorL
   545   0013E0  6E1F               	movwf	calibration@mL^0,c
   546   0013E2  0E2E               	movlw	low main@motorR
   547   0013E4  6E20               	movwf	calibration@mR^0,c
   548   0013E6  0E15               	movlw	21
   549   0013E8  6E21               	movwf	calibration@turnSpeed^0,c
   550   0013EA  0E2D               	movlw	low main@turnDuration
   551   0013EC  6E22               	movwf	calibration@turnDuration^0,c
   552   0013EE  0E04               	movlw	4
   553   0013F0  6E23               	movwf	calibration@turnRamp^0,c
   554   0013F2  EC71  F00A         	call	_calibration	;wreg free
   555   0013F6                     l1602:
   556                           
   557                           ;main.c: 65:         turnLeft(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   558   0013F6  0E38               	movlw	low main@motorL
   559   0013F8  6E13               	movwf	turnLeft@mL^0,c
   560   0013FA  0E2E               	movlw	low main@motorR
   561   0013FC  6E14               	movwf	turnLeft@mR^0,c
   562   0013FE  C02B  F015         	movff	main@turnSpeed,turnLeft@turnSpeed
   563   001402  C02D  F016         	movff	main@turnDuration,turnLeft@turnDuration
   564   001406  C02C  F017         	movff	main@turnRamp,turnLeft@turnRamp
   565   00140A  ECBE  F008         	call	_turnLeft	;wreg free
   566                           
   567                           ;main.c: 66:         _delay((unsigned long)((50)*(64000000/4000.0)));
   568   00140E  0E05               	movlw	5
   569   001410  6E27               	movwf	(??_main+1)^0,c
   570   001412  0E0F               	movlw	15
   571   001414  6E26               	movwf	??_main^0,c
   572   001416  0EF1               	movlw	241
   573   001418                     u647:
   574   001418  2EE8               	decfsz	wreg,f,c
   575   00141A  D7FE               	bra	u647
   576   00141C  2E26               	decfsz	??_main^0,f,c
   577   00141E  D7FC               	bra	u647
   578   001420  2E27               	decfsz	(??_main+1)^0,f,c
   579   001422  D7FA               	bra	u647
   580   001424  0000               	nop	
   581   001426                     
   582                           ;main.c: 67:         turnRight(&motorL, &motorR, turnSpeed, turnDuration, turnRamp);
   583   001426  0E38               	movlw	low main@motorL
   584   001428  6E13               	movwf	turnRight@mL^0,c
   585   00142A  0E2E               	movlw	low main@motorR
   586   00142C  6E14               	movwf	turnRight@mR^0,c
   587   00142E  C02B  F015         	movff	main@turnSpeed,turnRight@turnSpeed
   588   001432  C02D  F016         	movff	main@turnDuration,turnRight@turnDuration
   589   001436  C02C  F017         	movff	main@turnRamp,turnRight@turnRamp
   590   00143A  ECE3  F007         	call	_turnRight	;wreg free
   591   00143E                     
   592                           ;main.c: 68:         _delay((unsigned long)((50)*(64000000/4000.0)));
   593   00143E  0E05               	movlw	5
   594   001440  6E27               	movwf	(??_main+1)^0,c
   595   001442  0E0F               	movlw	15
   596   001444  6E26               	movwf	??_main^0,c
   597   001446  0EF1               	movlw	241
   598   001448                     u657:
   599   001448  2EE8               	decfsz	wreg,f,c
   600   00144A  D7FE               	bra	u657
   601   00144C  2E26               	decfsz	??_main^0,f,c
   602   00144E  D7FC               	bra	u657
   603   001450  2E27               	decfsz	(??_main+1)^0,f,c
   604   001452  D7FA               	bra	u657
   605   001454  0000               	nop	
   606                           
   607                           ;main.c: 69:         fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
   608   001456  0E38               	movlw	low main@motorL
   609   001458  6E13               	movwf	fullSpeedAhead@mL^0,c
   610   00145A  0E2E               	movlw	low main@motorR
   611   00145C  6E14               	movwf	fullSpeedAhead@mR^0,c
   612   00145E  C029  F015         	movff	main@straightSpeed,fullSpeedAhead@straightSpeed
   613   001462  C02A  F016         	movff	main@straightRamp,fullSpeedAhead@straightRamp
   614   001466  EC4A  F00C         	call	_fullSpeedAhead	;wreg free
   615   00146A                     
   616                           ;main.c: 70:         _delay((unsigned long)((50)*(64000000/4000.0)));
   617   00146A  0E05               	movlw	5
   618   00146C  6E27               	movwf	(??_main+1)^0,c
   619   00146E  0E0F               	movlw	15
   620   001470  6E26               	movwf	??_main^0,c
   621   001472  0EF1               	movlw	241
   622   001474                     u667:
   623   001474  2EE8               	decfsz	wreg,f,c
   624   001476  D7FE               	bra	u667
   625   001478  2E26               	decfsz	??_main^0,f,c
   626   00147A  D7FC               	bra	u667
   627   00147C  2E27               	decfsz	(??_main+1)^0,f,c
   628   00147E  D7FA               	bra	u667
   629   001480  0000               	nop	
   630   001482                     
   631                           ;main.c: 71:         stop(&motorL, &motorR, straightRamp);
   632   001482  0E38               	movlw	low main@motorL
   633   001484  6E13               	movwf	stop@mL^0,c
   634   001486  0E2E               	movlw	low main@motorR
   635   001488  6E14               	movwf	stop@mR^0,c
   636   00148A  C02A  F015         	movff	main@straightRamp,stop@straightRamp
   637   00148E  ECD3  F00B         	call	_stop	;wreg free
   638                           
   639                           ;main.c: 72:         _delay((unsigned long)((50)*(64000000/4000.0)));
   640   001492  0E05               	movlw	5
   641   001494  6E27               	movwf	(??_main+1)^0,c
   642   001496  0E0F               	movlw	15
   643   001498  6E26               	movwf	??_main^0,c
   644   00149A  0EF1               	movlw	241
   645   00149C                     u677:
   646   00149C  2EE8               	decfsz	wreg,f,c
   647   00149E  D7FE               	bra	u677
   648   0014A0  2E26               	decfsz	??_main^0,f,c
   649   0014A2  D7FC               	bra	u677
   650   0014A4  2E27               	decfsz	(??_main+1)^0,f,c
   651   0014A6  D7FA               	bra	u677
   652   0014A8  0000               	nop	
   653   0014AA                     
   654                           ;main.c: 73:         reverseOneSquare(&motorL, &motorR, straightSpeed, reverseDuration, 
      +                          straightRamp);
   655   0014AA  0E38               	movlw	low main@motorL
   656   0014AC  6E13               	movwf	reverseOneSquare@mL^0,c
   657   0014AE  0E2E               	movlw	low main@motorR
   658   0014B0  6E14               	movwf	reverseOneSquare@mR^0,c
   659   0014B2  C029  F015         	movff	main@straightSpeed,reverseOneSquare@straightSpeed
   660   0014B6  C028  F016         	movff	main@reverseDuration,reverseOneSquare@reverseDuration
   661   0014BA  C02A  F017         	movff	main@straightRamp,reverseOneSquare@straightRamp
   662   0014BE  EC01  F007         	call	_reverseOneSquare	;wreg free
   663   0014C2                     
   664                           ;main.c: 74:         _delay((unsigned long)((50)*(64000000/4000.0)));
   665   0014C2  0E05               	movlw	5
   666   0014C4  6E27               	movwf	(??_main+1)^0,c
   667   0014C6  0E0F               	movlw	15
   668   0014C8  6E26               	movwf	??_main^0,c
   669   0014CA  0EF1               	movlw	241
   670   0014CC                     u687:
   671   0014CC  2EE8               	decfsz	wreg,f,c
   672   0014CE  D7FE               	bra	u687
   673   0014D0  2E26               	decfsz	??_main^0,f,c
   674   0014D2  D7FC               	bra	u687
   675   0014D4  2E27               	decfsz	(??_main+1)^0,f,c
   676   0014D6  D7FA               	bra	u687
   677   0014D8  0000               	nop	
   678   0014DA  EFFB  F009         	goto	l1602
   679   0014DE  EF00  F000         	goto	start
   680   0014E2                     __end_of_main:
   681                           	callstack 0
   682                           
   683 ;; *************** function _stop *****************
   684 ;; Defined at:
   685 ;;		line 88 in file "dc_motor.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   688 ;;		 -> main@motorL(10), 
   689 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   690 ;;		 -> main@motorR(10), 
   691 ;;  straightRamp    1   20[COMRAM] unsigned char 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  cur_power       2   26[COMRAM] int 
   694 ;;  i               2   24[COMRAM] int 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   704 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   705 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   706 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   707 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   708 ;;Total ram usage:       10 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; Hardware stack levels required when called: 2
   711 ;; This function calls:
   712 ;;		_setMotorPWM
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text1
   719   0017A6                     __ptext1:
   720                           	callstack 0
   721   0017A6                     _stop:
   722                           	callstack 28
   723   0017A6                     
   724                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_mo
      +                          tor.c: 89: {;dc_motor.c: 90:     mL->direction = 1;
   725   0017A6  5013               	movf	stop@mL^0,w,c
   726   0017A8  6ED9               	movwf	fsr2l,c
   727   0017AA  6ADA               	clrf	fsr2h,c
   728   0017AC  0E01               	movlw	1
   729   0017AE  26D9               	addwf	fsr2l,f,c
   730   0017B0  0E01               	movlw	1
   731   0017B2  6EDF               	movwf	indf2,c
   732                           
   733                           ;dc_motor.c: 91:     mR->direction = 1;
   734   0017B4  5014               	movf	stop@mR^0,w,c
   735   0017B6  6ED9               	movwf	fsr2l,c
   736   0017B8  6ADA               	clrf	fsr2h,c
   737   0017BA  0E01               	movlw	1
   738   0017BC  26D9               	addwf	fsr2l,f,c
   739   0017BE  0E01               	movlw	1
   740   0017C0  6EDF               	movwf	indf2,c
   741                           
   742                           ;dc_motor.c: 92:     int i;;dc_motor.c: 93:     int cur_power;;dc_motor.c: 94:     for (
      +                          cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
   743   0017C2  5013               	movf	stop@mL^0,w,c
   744   0017C4  6ED9               	movwf	fsr2l,c
   745   0017C6  6ADA               	clrf	fsr2h,c
   746   0017C8  50DF               	movf	indf2,w,c
   747   0017CA  6E16               	movwf	??_stop^0,c
   748   0017CC  5013               	movf	stop@mL^0,w,c
   749   0017CE  6ED9               	movwf	fsr2l,c
   750   0017D0  6ADA               	clrf	fsr2h,c
   751   0017D2  0E09               	movlw	9
   752   0017D4  26D9               	addwf	fsr2l,f,c
   753   0017D6  50DF               	movf	indf2,w,c
   754   0017D8  6E17               	movwf	(??_stop+1)^0,c
   755   0017DA  5017               	movf	(??_stop+1)^0,w,c
   756   0017DC  5C16               	subwf	??_stop^0,w,c
   757   0017DE  6E1B               	movwf	stop@cur_power^0,c
   758   0017E0  6A1C               	clrf	(stop@cur_power+1)^0,c
   759   0017E2  A0D8               	btfss	status,0,c
   760   0017E4  061C               	decf	(stop@cur_power+1)^0,f,c
   761   0017E6                     l1468:
   762   0017E6  BE1C               	btfsc	(stop@cur_power+1)^0,7,c
   763   0017E8  EFFA  F00B         	goto	u550
   764   0017EC  EFF8  F00B         	goto	u551
   765   0017F0                     u551:
   766   0017F0  EFFC  F00B         	goto	l1472
   767   0017F4                     u550:
   768   0017F4  EF41  F00C         	goto	l1488
   769   0017F8                     l1472:
   770                           
   771                           ;dc_motor.c: 95:         mL->power = cur_power+mL->compensation;
   772   0017F8  5013               	movf	stop@mL^0,w,c
   773   0017FA  6ED9               	movwf	fsr2l,c
   774   0017FC  6ADA               	clrf	fsr2h,c
   775   0017FE  5013               	movf	stop@mL^0,w,c
   776   001800  6EE1               	movwf	fsr1l,c
   777   001802  6AE2               	clrf	fsr1h,c
   778   001804  0E09               	movlw	9
   779   001806  26E1               	addwf	fsr1l,f,c
   780   001808  50E7               	movf	indf1,w,c
   781   00180A  241B               	addwf	stop@cur_power^0,w,c
   782   00180C  6EDF               	movwf	indf2,c
   783                           
   784                           ;dc_motor.c: 96:         mR->power = cur_power+mR->compensation;
   785   00180E  5014               	movf	stop@mR^0,w,c
   786   001810  6ED9               	movwf	fsr2l,c
   787   001812  6ADA               	clrf	fsr2h,c
   788   001814  5014               	movf	stop@mR^0,w,c
   789   001816  6EE1               	movwf	fsr1l,c
   790   001818  6AE2               	clrf	fsr1h,c
   791   00181A  0E09               	movlw	9
   792   00181C  26E1               	addwf	fsr1l,f,c
   793   00181E  50E7               	movf	indf1,w,c
   794   001820  241B               	addwf	stop@cur_power^0,w,c
   795   001822  6EDF               	movwf	indf2,c
   796   001824                     
   797                           ;dc_motor.c: 97:         setMotorPWM(mL);
   798   001824  C013  F00E         	movff	stop@mL,setMotorPWM@m
   799   001828  EC29  F00B         	call	_setMotorPWM	;wreg free
   800   00182C                     
   801                           ;dc_motor.c: 98:         setMotorPWM(mR);
   802   00182C  C014  F00E         	movff	stop@mR,setMotorPWM@m
   803   001830  EC29  F00B         	call	_setMotorPWM	;wreg free
   804   001834                     
   805                           ;dc_motor.c: 99:         for (i=0;i<straightRamp;i++) {
   806   001834  0E00               	movlw	0
   807   001836  6E1A               	movwf	(stop@i+1)^0,c
   808   001838  0E00               	movlw	0
   809   00183A  6E19               	movwf	stop@i^0,c
   810   00183C  EF2A  F00C         	goto	l118
   811   001840                     l1480:
   812                           
   813                           ;dc_motor.c: 100:             _delay((unsigned long)((5)*(64000000/4000.0)));
   814   001840  0E68               	movlw	104
   815   001842  6E16               	movwf	??_stop^0,c
   816   001844  0EE4               	movlw	228
   817   001846                     u697:
   818   001846  2EE8               	decfsz	wreg,f,c
   819   001848  D7FE               	bra	u697
   820   00184A  2E16               	decfsz	??_stop^0,f,c
   821   00184C  D7FC               	bra	u697
   822   00184E  D000               	nop2	
   823   001850                     
   824                           ;dc_motor.c: 101:         }
   825   001850  4A19               	infsnz	stop@i^0,f,c
   826   001852  2A1A               	incf	(stop@i+1)^0,f,c
   827   001854                     l118:
   828   001854  5015               	movf	stop@straightRamp^0,w,c
   829   001856  6E16               	movwf	??_stop^0,c
   830   001858  6A17               	clrf	(??_stop+1)^0,c
   831   00185A  5016               	movf	??_stop^0,w,c
   832   00185C  5C19               	subwf	stop@i^0,w,c
   833   00185E  501A               	movf	(stop@i+1)^0,w,c
   834   001860  0A80               	xorlw	128
   835   001862  6E18               	movwf	(??_stop+2)^0,c
   836   001864  5017               	movf	(??_stop+1)^0,w,c
   837   001866  0A80               	xorlw	128
   838   001868  5818               	subwfb	(??_stop+2)^0,w,c
   839   00186A  A0D8               	btfss	status,0,c
   840   00186C  EF3A  F00C         	goto	u561
   841   001870  EF3C  F00C         	goto	u560
   842   001874                     u561:
   843   001874  EF20  F00C         	goto	l1480
   844   001878                     u560:
   845   001878                     
   846                           ;dc_motor.c: 102:     }
   847   001878  061B               	decf	stop@cur_power^0,f,c
   848   00187A  A0D8               	btfss	status,0,c
   849   00187C  061C               	decf	(stop@cur_power+1)^0,f,c
   850   00187E  EFF3  F00B         	goto	l1468
   851   001882                     l1488:
   852                           
   853                           ;dc_motor.c: 103:     mL->power = 0;
   854   001882  5013               	movf	stop@mL^0,w,c
   855   001884  6ED9               	movwf	fsr2l,c
   856   001886  6ADA               	clrf	fsr2h,c
   857   001888  6ADF               	clrf	indf2,c
   858                           
   859                           ;dc_motor.c: 104:     mR->power = 0;
   860   00188A  5014               	movf	stop@mR^0,w,c
   861   00188C  6ED9               	movwf	fsr2l,c
   862   00188E  6ADA               	clrf	fsr2h,c
   863   001890  6ADF               	clrf	indf2,c
   864   001892  0012               	return		;funcret
   865   001894                     __end_of_stop:
   866                           	callstack 0
   867                           
   868 ;; *************** function _reverseOneSquare *****************
   869 ;; Defined at:
   870 ;;		line 189 in file "dc_motor.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   873 ;;		 -> main@motorL(10), 
   874 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   875 ;;		 -> main@motorR(10), 
   876 ;;  straightSpee    1   20[COMRAM] unsigned char 
   877 ;;  reverseDurat    1   21[COMRAM] unsigned char 
   878 ;;  straightRamp    1   22[COMRAM] unsigned char 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  cur_power       2   28[COMRAM] int 
   881 ;;  i               2   26[COMRAM] int 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   891 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   894 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;Total ram usage:       12 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; Hardware stack levels required when called: 2
   898 ;; This function calls:
   899 ;;		_setMotorPWM
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text2
   906   000E02                     __ptext2:
   907                           	callstack 0
   908   000E02                     _reverseOneSquare:
   909                           	callstack 28
   910   000E02                     
   911                           ;dc_motor.c: 189: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 190: {;dc_motor.c
      +                          : 191:     mL->direction = 0;
   912   000E02  5013               	movf	reverseOneSquare@mL^0,w,c
   913   000E04  6ED9               	movwf	fsr2l,c
   914   000E06  6ADA               	clrf	fsr2h,c
   915   000E08  0E01               	movlw	1
   916   000E0A  26D9               	addwf	fsr2l,f,c
   917   000E0C  6ADF               	clrf	indf2,c
   918                           
   919                           ;dc_motor.c: 192:     mR->direction = 0;
   920   000E0E  5014               	movf	reverseOneSquare@mR^0,w,c
   921   000E10  6ED9               	movwf	fsr2l,c
   922   000E12  6ADA               	clrf	fsr2h,c
   923   000E14  0E01               	movlw	1
   924   000E16  26D9               	addwf	fsr2l,f,c
   925   000E18  6ADF               	clrf	indf2,c
   926   000E1A                     
   927                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     int cur_power;;dc_motor.c: 195:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
   928   000E1A  0E00               	movlw	0
   929   000E1C  6E1E               	movwf	(reverseOneSquare@cur_power+1)^0,c
   930   000E1E  0E01               	movlw	1
   931   000E20  6E1D               	movwf	reverseOneSquare@cur_power^0,c
   932   000E22  EF55  F007         	goto	l1508
   933   000E26                     l1494:
   934                           
   935                           ;dc_motor.c: 196:         mL->power = cur_power+mL->compensation;
   936   000E26  5013               	movf	reverseOneSquare@mL^0,w,c
   937   000E28  6ED9               	movwf	fsr2l,c
   938   000E2A  6ADA               	clrf	fsr2h,c
   939   000E2C  5013               	movf	reverseOneSquare@mL^0,w,c
   940   000E2E  6EE1               	movwf	fsr1l,c
   941   000E30  6AE2               	clrf	fsr1h,c
   942   000E32  0E09               	movlw	9
   943   000E34  26E1               	addwf	fsr1l,f,c
   944   000E36  50E7               	movf	indf1,w,c
   945   000E38  241D               	addwf	reverseOneSquare@cur_power^0,w,c
   946   000E3A  6EDF               	movwf	indf2,c
   947                           
   948                           ;dc_motor.c: 197:         mR->power = cur_power+mR->compensation;
   949   000E3C  5014               	movf	reverseOneSquare@mR^0,w,c
   950   000E3E  6ED9               	movwf	fsr2l,c
   951   000E40  6ADA               	clrf	fsr2h,c
   952   000E42  5014               	movf	reverseOneSquare@mR^0,w,c
   953   000E44  6EE1               	movwf	fsr1l,c
   954   000E46  6AE2               	clrf	fsr1h,c
   955   000E48  0E09               	movlw	9
   956   000E4A  26E1               	addwf	fsr1l,f,c
   957   000E4C  50E7               	movf	indf1,w,c
   958   000E4E  241D               	addwf	reverseOneSquare@cur_power^0,w,c
   959   000E50  6EDF               	movwf	indf2,c
   960   000E52                     
   961                           ;dc_motor.c: 198:         setMotorPWM(mL);
   962   000E52  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
   963   000E56  EC29  F00B         	call	_setMotorPWM	;wreg free
   964   000E5A                     
   965                           ;dc_motor.c: 199:         setMotorPWM(mR);
   966   000E5A  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
   967   000E5E  EC29  F00B         	call	_setMotorPWM	;wreg free
   968   000E62                     
   969                           ;dc_motor.c: 200:         for (i=0;i<straightRamp;i++) {
   970   000E62  0E00               	movlw	0
   971   000E64  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
   972   000E66  0E00               	movlw	0
   973   000E68  6E1B               	movwf	reverseOneSquare@i^0,c
   974   000E6A  EF41  F007         	goto	l169
   975   000E6E                     l1502:
   976                           
   977                           ;dc_motor.c: 201:             _delay((unsigned long)((5)*(64000000/4000.0)));
   978   000E6E  0E68               	movlw	104
   979   000E70  6E18               	movwf	??_reverseOneSquare^0,c
   980   000E72  0EE4               	movlw	228
   981   000E74                     u707:
   982   000E74  2EE8               	decfsz	wreg,f,c
   983   000E76  D7FE               	bra	u707
   984   000E78  2E18               	decfsz	??_reverseOneSquare^0,f,c
   985   000E7A  D7FC               	bra	u707
   986   000E7C  D000               	nop2	
   987   000E7E                     
   988                           ;dc_motor.c: 202:         }
   989   000E7E  4A1B               	infsnz	reverseOneSquare@i^0,f,c
   990   000E80  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
   991   000E82                     l169:
   992   000E82  5017               	movf	reverseOneSquare@straightRamp^0,w,c
   993   000E84  6E18               	movwf	??_reverseOneSquare^0,c
   994   000E86  6A19               	clrf	(??_reverseOneSquare+1)^0,c
   995   000E88  5018               	movf	??_reverseOneSquare^0,w,c
   996   000E8A  5C1B               	subwf	reverseOneSquare@i^0,w,c
   997   000E8C  501C               	movf	(reverseOneSquare@i+1)^0,w,c
   998   000E8E  0A80               	xorlw	128
   999   000E90  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1000   000E92  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1001   000E94  0A80               	xorlw	128
  1002   000E96  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1003   000E98  A0D8               	btfss	status,0,c
  1004   000E9A  EF51  F007         	goto	u571
  1005   000E9E  EF53  F007         	goto	u570
  1006   000EA2                     u571:
  1007   000EA2  EF37  F007         	goto	l1502
  1008   000EA6                     u570:
  1009   000EA6                     
  1010                           ;dc_motor.c: 203:     }
  1011   000EA6  4A1D               	infsnz	reverseOneSquare@cur_power^0,f,c
  1012   000EA8  2A1E               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  1013   000EAA                     l1508:
  1014   000EAA  5015               	movf	reverseOneSquare@straightSpeed^0,w,c
  1015   000EAC  6E18               	movwf	??_reverseOneSquare^0,c
  1016   000EAE  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1017   000EB0  501D               	movf	reverseOneSquare@cur_power^0,w,c
  1018   000EB2  5C18               	subwf	??_reverseOneSquare^0,w,c
  1019   000EB4  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1020   000EB6  0A80               	xorlw	128
  1021   000EB8  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1022   000EBA  501E               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  1023   000EBC  0A80               	xorlw	128
  1024   000EBE  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1025   000EC0  B0D8               	btfsc	status,0,c
  1026   000EC2  EF65  F007         	goto	u581
  1027   000EC6  EF67  F007         	goto	u580
  1028   000ECA                     u581:
  1029   000ECA  EF13  F007         	goto	l1494
  1030   000ECE                     u580:
  1031   000ECE                     
  1032                           ;dc_motor.c: 205:     for (i=0;i<reverseDuration;i++) {
  1033   000ECE  0E00               	movlw	0
  1034   000ED0  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1035   000ED2  0E00               	movlw	0
  1036   000ED4  6E1B               	movwf	reverseOneSquare@i^0,c
  1037   000ED6  EF77  F007         	goto	l173
  1038   000EDA                     l1512:
  1039                           
  1040                           ;dc_motor.c: 206:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1041   000EDA  0E68               	movlw	104
  1042   000EDC  6E18               	movwf	??_reverseOneSquare^0,c
  1043   000EDE  0EE4               	movlw	228
  1044   000EE0                     u717:
  1045   000EE0  2EE8               	decfsz	wreg,f,c
  1046   000EE2  D7FE               	bra	u717
  1047   000EE4  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1048   000EE6  D7FC               	bra	u717
  1049   000EE8  D000               	nop2	
  1050   000EEA                     
  1051                           ;dc_motor.c: 207:         }
  1052   000EEA  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1053   000EEC  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1054   000EEE                     l173:
  1055   000EEE  5016               	movf	reverseOneSquare@reverseDuration^0,w,c
  1056   000EF0  6E18               	movwf	??_reverseOneSquare^0,c
  1057   000EF2  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1058   000EF4  5018               	movf	??_reverseOneSquare^0,w,c
  1059   000EF6  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1060   000EF8  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1061   000EFA  0A80               	xorlw	128
  1062   000EFC  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1063   000EFE  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1064   000F00  0A80               	xorlw	128
  1065   000F02  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1066   000F04  A0D8               	btfss	status,0,c
  1067   000F06  EF87  F007         	goto	u591
  1068   000F0A  EF89  F007         	goto	u590
  1069   000F0E                     u591:
  1070   000F0E  EF6D  F007         	goto	l1512
  1071   000F12                     u590:
  1072   000F12                     
  1073                           ;dc_motor.c: 209:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  1074   000F12  C015  F01D         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  1075   000F16  6A1E               	clrf	(reverseOneSquare@cur_power+1)^0,c
  1076   000F18                     l1516:
  1077   000F18  BE1E               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  1078   000F1A  EF93  F007         	goto	u600
  1079   000F1E  EF91  F007         	goto	u601
  1080   000F22                     u601:
  1081   000F22  EF95  F007         	goto	l1520
  1082   000F26                     u600:
  1083   000F26  EFDA  F007         	goto	l1536
  1084   000F2A                     l1520:
  1085                           
  1086                           ;dc_motor.c: 210:         mL->power = cur_power+mL->compensation;
  1087   000F2A  5013               	movf	reverseOneSquare@mL^0,w,c
  1088   000F2C  6ED9               	movwf	fsr2l,c
  1089   000F2E  6ADA               	clrf	fsr2h,c
  1090   000F30  5013               	movf	reverseOneSquare@mL^0,w,c
  1091   000F32  6EE1               	movwf	fsr1l,c
  1092   000F34  6AE2               	clrf	fsr1h,c
  1093   000F36  0E09               	movlw	9
  1094   000F38  26E1               	addwf	fsr1l,f,c
  1095   000F3A  50E7               	movf	indf1,w,c
  1096   000F3C  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1097   000F3E  6EDF               	movwf	indf2,c
  1098                           
  1099                           ;dc_motor.c: 211:         mR->power = cur_power+mR->compensation;
  1100   000F40  5014               	movf	reverseOneSquare@mR^0,w,c
  1101   000F42  6ED9               	movwf	fsr2l,c
  1102   000F44  6ADA               	clrf	fsr2h,c
  1103   000F46  5014               	movf	reverseOneSquare@mR^0,w,c
  1104   000F48  6EE1               	movwf	fsr1l,c
  1105   000F4A  6AE2               	clrf	fsr1h,c
  1106   000F4C  0E09               	movlw	9
  1107   000F4E  26E1               	addwf	fsr1l,f,c
  1108   000F50  50E7               	movf	indf1,w,c
  1109   000F52  241D               	addwf	reverseOneSquare@cur_power^0,w,c
  1110   000F54  6EDF               	movwf	indf2,c
  1111   000F56                     
  1112                           ;dc_motor.c: 212:         setMotorPWM(mL);
  1113   000F56  C013  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1114   000F5A  EC29  F00B         	call	_setMotorPWM	;wreg free
  1115   000F5E                     
  1116                           ;dc_motor.c: 213:         setMotorPWM(mR);
  1117   000F5E  C014  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1118   000F62  EC29  F00B         	call	_setMotorPWM	;wreg free
  1119   000F66                     
  1120                           ;dc_motor.c: 214:         for (i=0;i<straightRamp;i++) {
  1121   000F66  0E00               	movlw	0
  1122   000F68  6E1C               	movwf	(reverseOneSquare@i+1)^0,c
  1123   000F6A  0E00               	movlw	0
  1124   000F6C  6E1B               	movwf	reverseOneSquare@i^0,c
  1125   000F6E  EFC3  F007         	goto	l178
  1126   000F72                     l1528:
  1127                           
  1128                           ;dc_motor.c: 215:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1129   000F72  0E68               	movlw	104
  1130   000F74  6E18               	movwf	??_reverseOneSquare^0,c
  1131   000F76  0EE4               	movlw	228
  1132   000F78                     u727:
  1133   000F78  2EE8               	decfsz	wreg,f,c
  1134   000F7A  D7FE               	bra	u727
  1135   000F7C  2E18               	decfsz	??_reverseOneSquare^0,f,c
  1136   000F7E  D7FC               	bra	u727
  1137   000F80  D000               	nop2	
  1138   000F82                     
  1139                           ;dc_motor.c: 216:         }
  1140   000F82  4A1B               	infsnz	reverseOneSquare@i^0,f,c
  1141   000F84  2A1C               	incf	(reverseOneSquare@i+1)^0,f,c
  1142   000F86                     l178:
  1143   000F86  5017               	movf	reverseOneSquare@straightRamp^0,w,c
  1144   000F88  6E18               	movwf	??_reverseOneSquare^0,c
  1145   000F8A  6A19               	clrf	(??_reverseOneSquare+1)^0,c
  1146   000F8C  5018               	movf	??_reverseOneSquare^0,w,c
  1147   000F8E  5C1B               	subwf	reverseOneSquare@i^0,w,c
  1148   000F90  501C               	movf	(reverseOneSquare@i+1)^0,w,c
  1149   000F92  0A80               	xorlw	128
  1150   000F94  6E1A               	movwf	(??_reverseOneSquare+2)^0,c
  1151   000F96  5019               	movf	(??_reverseOneSquare+1)^0,w,c
  1152   000F98  0A80               	xorlw	128
  1153   000F9A  581A               	subwfb	(??_reverseOneSquare+2)^0,w,c
  1154   000F9C  A0D8               	btfss	status,0,c
  1155   000F9E  EFD3  F007         	goto	u611
  1156   000FA2  EFD5  F007         	goto	u610
  1157   000FA6                     u611:
  1158   000FA6  EFB9  F007         	goto	l1528
  1159   000FAA                     u610:
  1160   000FAA                     
  1161                           ;dc_motor.c: 217:     }
  1162   000FAA  061D               	decf	reverseOneSquare@cur_power^0,f,c
  1163   000FAC  A0D8               	btfss	status,0,c
  1164   000FAE  061E               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  1165   000FB0  EF8C  F007         	goto	l1516
  1166   000FB4                     l1536:
  1167                           
  1168                           ;dc_motor.c: 218:     mL->power = 0;
  1169   000FB4  5013               	movf	reverseOneSquare@mL^0,w,c
  1170   000FB6  6ED9               	movwf	fsr2l,c
  1171   000FB8  6ADA               	clrf	fsr2h,c
  1172   000FBA  6ADF               	clrf	indf2,c
  1173                           
  1174                           ;dc_motor.c: 219:     mR->power = 0;
  1175   000FBC  5014               	movf	reverseOneSquare@mR^0,w,c
  1176   000FBE  6ED9               	movwf	fsr2l,c
  1177   000FC0  6ADA               	clrf	fsr2h,c
  1178   000FC2  6ADF               	clrf	indf2,c
  1179   000FC4  0012               	return		;funcret
  1180   000FC6                     __end_of_reverseOneSquare:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _initDCmotorsPWM *****************
  1184 ;; Defined at:
  1185 ;;		line 5 in file "dc_motor.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1202 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;Total ram usage:        2 bytes
  1204 ;; Hardware stack levels used: 1
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text3
  1213   001966                     __ptext3:
  1214                           	callstack 0
  1215   001966                     _initDCmotorsPWM:
  1216                           	callstack 30
  1217   001966                     
  1218                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  1219   001966  947D               	bcf	125,2,c	;volatile
  1220                           
  1221                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  1222   001968  9485               	bcf	133,2,c	;volatile
  1223                           
  1224                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  1225   00196A  987D               	bcf	125,4,c	;volatile
  1226                           
  1227                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  1228   00196C  9885               	bcf	133,4,c	;volatile
  1229                           
  1230                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  1231   00196E  9E7B               	bcf	123,7,c	;volatile
  1232                           
  1233                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  1234   001970  9E83               	bcf	131,7,c	;volatile
  1235                           
  1236                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  1237   001972  9C7F               	bcf	127,6,c	;volatile
  1238                           
  1239                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  1240   001974  9C87               	bcf	135,6,c	;volatile
  1241   001976                     
  1242                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1243   001976  0E05               	movlw	5
  1244   001978  010E               	movlb	14	; () banked
  1245   00197A  6F74               	movwf	116,b	;volatile
  1246                           
  1247                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1248   00197C  0E06               	movlw	6
  1249   00197E  6F76               	movwf	118,b	;volatile
  1250                           
  1251                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1252   001980  0E07               	movlw	7
  1253   001982  6F69               	movwf	105,b	;volatile
  1254                           
  1255                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1256   001984  0E08               	movlw	8
  1257   001986  6F88               	movwf	136,b	;volatile
  1258                           
  1259                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  1260   001988  50BD               	movf	189,w,c	;volatile
  1261   00198A  0B8F               	andlw	-113
  1262   00198C  0930               	iorlw	48
  1263   00198E  6EBD               	movwf	189,c	;volatile
  1264                           
  1265                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1266   001990  0EE0               	movlw	-32
  1267   001992  16BE               	andwf	190,f,c	;volatile
  1268                           
  1269                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1270   001994  50BF               	movf	191,w,c	;volatile
  1271   001996  0BF0               	andlw	-16
  1272   001998  0901               	iorlw	1
  1273   00199A  6EBF               	movwf	191,c	;volatile
  1274   00199C                     
  1275                           ; BSR set to: 14
  1276                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1277   00199C  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1278   0019A0                     
  1279                           ; BSR set to: 14
  1280                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1281   0019A0  8EBD               	bsf	189,7,c	;volatile
  1282                           
  1283                           ;dc_motor.c: 35:     CCPR1H=0;
  1284   0019A2  0E00               	movlw	0
  1285   0019A4  6EAA               	movwf	170,c	;volatile
  1286                           
  1287                           ;dc_motor.c: 36:     CCPR2H=0;
  1288   0019A6  0E00               	movlw	0
  1289   0019A8  6EA6               	movwf	166,c	;volatile
  1290                           
  1291                           ;dc_motor.c: 37:     CCPR3H=0;
  1292   0019AA  0E00               	movlw	0
  1293   0019AC  010F               	movlb	15	; () banked
  1294   0019AE  6F25               	movwf	37,b	;volatile
  1295                           
  1296                           ;dc_motor.c: 38:     CCPR4H=0;
  1297   0019B0  0E00               	movlw	0
  1298   0019B2  6F21               	movwf	33,b	;volatile
  1299                           
  1300                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1301   0019B4  0EFC               	movlw	-4
  1302   0019B6  16AD               	andwf	173,f,c	;volatile
  1303                           
  1304                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1305   0019B8  0EF3               	movlw	-13
  1306   0019BA  16AD               	andwf	173,f,c	;volatile
  1307                           
  1308                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1309   0019BC  0ECF               	movlw	-49
  1310   0019BE  16AD               	andwf	173,f,c	;volatile
  1311                           
  1312                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1313   0019C0  0E3F               	movlw	-193
  1314   0019C2  16AD               	andwf	173,f,c	;volatile
  1315   0019C4                     
  1316                           ; BSR set to: 15
  1317                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1318   0019C4  88AB               	bsf	171,4,c	;volatile
  1319                           
  1320                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1321   0019C6  50AB               	movf	171,w,c	;volatile
  1322   0019C8  0BF0               	andlw	-16
  1323   0019CA  090C               	iorlw	12
  1324   0019CC  6EAB               	movwf	171,c	;volatile
  1325   0019CE                     
  1326                           ; BSR set to: 15
  1327                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1328   0019CE  8EAB               	bsf	171,7,c	;volatile
  1329   0019D0                     
  1330                           ; BSR set to: 15
  1331                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1332   0019D0  88A7               	bsf	167,4,c	;volatile
  1333                           
  1334                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1335   0019D2  50A7               	movf	167,w,c	;volatile
  1336   0019D4  0BF0               	andlw	-16
  1337   0019D6  090C               	iorlw	12
  1338   0019D8  6EA7               	movwf	167,c	;volatile
  1339   0019DA                     
  1340                           ; BSR set to: 15
  1341                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1342   0019DA  8EA7               	bsf	167,7,c	;volatile
  1343   0019DC                     
  1344                           ; BSR set to: 15
  1345                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1346   0019DC  8926               	bsf	38,4,b	;volatile
  1347                           
  1348                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1349   0019DE  5126               	movf	38,w,b	;volatile
  1350   0019E0  0BF0               	andlw	-16
  1351   0019E2  090C               	iorlw	12
  1352   0019E4  6F26               	movwf	38,b	;volatile
  1353   0019E6                     
  1354                           ; BSR set to: 15
  1355                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1356   0019E6  8F26               	bsf	38,7,b	;volatile
  1357   0019E8                     
  1358                           ; BSR set to: 15
  1359                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1360   0019E8  8922               	bsf	34,4,b	;volatile
  1361                           
  1362                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1363   0019EA  5122               	movf	34,w,b	;volatile
  1364   0019EC  0BF0               	andlw	-16
  1365   0019EE  090C               	iorlw	12
  1366   0019F0  6F22               	movwf	34,b	;volatile
  1367   0019F2                     
  1368                           ; BSR set to: 15
  1369                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1370   0019F2  8F22               	bsf	34,7,b	;volatile
  1371   0019F4                     
  1372                           ; BSR set to: 15
  1373   0019F4  0012               	return		;funcret
  1374   0019F6                     __end_of_initDCmotorsPWM:
  1375                           	callstack 0
  1376                           
  1377 ;; *************** function _fullSpeedAhead *****************
  1378 ;; Defined at:
  1379 ;;		line 172 in file "dc_motor.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1382 ;;		 -> main@motorL(10), 
  1383 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1384 ;;		 -> main@motorR(10), 
  1385 ;;  straightSpee    1   20[COMRAM] unsigned char 
  1386 ;;  straightRamp    1   21[COMRAM] unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  cur_power       2   27[COMRAM] int 
  1389 ;;  i               2   25[COMRAM] int 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1400 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1401 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1402 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1403 ;;Total ram usage:       11 bytes
  1404 ;; Hardware stack levels used: 1
  1405 ;; Hardware stack levels required when called: 2
  1406 ;; This function calls:
  1407 ;;		_setMotorPWM
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text4
  1414   001894                     __ptext4:
  1415                           	callstack 0
  1416   001894                     _fullSpeedAhead:
  1417                           	callstack 28
  1418   001894                     
  1419                           ;dc_motor.c: 172: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 173: {;dc_motor.c: 174:     mL->direction = 1;
  1420   001894  5013               	movf	fullSpeedAhead@mL^0,w,c
  1421   001896  6ED9               	movwf	fsr2l,c
  1422   001898  6ADA               	clrf	fsr2h,c
  1423   00189A  0E01               	movlw	1
  1424   00189C  26D9               	addwf	fsr2l,f,c
  1425   00189E  0E01               	movlw	1
  1426   0018A0  6EDF               	movwf	indf2,c
  1427                           
  1428                           ;dc_motor.c: 175:     mR->direction = 1;
  1429   0018A2  5014               	movf	fullSpeedAhead@mR^0,w,c
  1430   0018A4  6ED9               	movwf	fsr2l,c
  1431   0018A6  6ADA               	clrf	fsr2h,c
  1432   0018A8  0E01               	movlw	1
  1433   0018AA  26D9               	addwf	fsr2l,f,c
  1434   0018AC  0E01               	movlw	1
  1435   0018AE  6EDF               	movwf	indf2,c
  1436   0018B0                     
  1437                           ;dc_motor.c: 176:     int i;;dc_motor.c: 177:     int cur_power;;dc_motor.c: 178:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1438   0018B0  0E00               	movlw	0
  1439   0018B2  6E1D               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  1440   0018B4  0E01               	movlw	1
  1441   0018B6  6E1C               	movwf	fullSpeedAhead@cur_power^0,c
  1442   0018B8  EFA0  F00C         	goto	l1464
  1443   0018BC                     l1450:
  1444                           
  1445                           ;dc_motor.c: 179:         mL->power = cur_power+mL->compensation;
  1446   0018BC  5013               	movf	fullSpeedAhead@mL^0,w,c
  1447   0018BE  6ED9               	movwf	fsr2l,c
  1448   0018C0  6ADA               	clrf	fsr2h,c
  1449   0018C2  5013               	movf	fullSpeedAhead@mL^0,w,c
  1450   0018C4  6EE1               	movwf	fsr1l,c
  1451   0018C6  6AE2               	clrf	fsr1h,c
  1452   0018C8  0E09               	movlw	9
  1453   0018CA  26E1               	addwf	fsr1l,f,c
  1454   0018CC  50E7               	movf	indf1,w,c
  1455   0018CE  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1456   0018D0  6EDF               	movwf	indf2,c
  1457                           
  1458                           ;dc_motor.c: 180:         mR->power = cur_power+mR->compensation;
  1459   0018D2  5014               	movf	fullSpeedAhead@mR^0,w,c
  1460   0018D4  6ED9               	movwf	fsr2l,c
  1461   0018D6  6ADA               	clrf	fsr2h,c
  1462   0018D8  5014               	movf	fullSpeedAhead@mR^0,w,c
  1463   0018DA  6EE1               	movwf	fsr1l,c
  1464   0018DC  6AE2               	clrf	fsr1h,c
  1465   0018DE  0E09               	movlw	9
  1466   0018E0  26E1               	addwf	fsr1l,f,c
  1467   0018E2  50E7               	movf	indf1,w,c
  1468   0018E4  241C               	addwf	fullSpeedAhead@cur_power^0,w,c
  1469   0018E6  6EDF               	movwf	indf2,c
  1470   0018E8                     
  1471                           ;dc_motor.c: 181:         setMotorPWM(mL);
  1472   0018E8  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1473   0018EC  EC29  F00B         	call	_setMotorPWM	;wreg free
  1474   0018F0                     
  1475                           ;dc_motor.c: 182:         setMotorPWM(mR);
  1476   0018F0  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1477   0018F4  EC29  F00B         	call	_setMotorPWM	;wreg free
  1478   0018F8                     
  1479                           ;dc_motor.c: 183:         for (i=0;i<straightRamp;i++) {
  1480   0018F8  0E00               	movlw	0
  1481   0018FA  6E1B               	movwf	(fullSpeedAhead@i+1)^0,c
  1482   0018FC  0E00               	movlw	0
  1483   0018FE  6E1A               	movwf	fullSpeedAhead@i^0,c
  1484   001900  EF8C  F00C         	goto	l160
  1485   001904                     l1458:
  1486                           
  1487                           ;dc_motor.c: 184:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1488   001904  0E68               	movlw	104
  1489   001906  6E17               	movwf	??_fullSpeedAhead^0,c
  1490   001908  0EE4               	movlw	228
  1491   00190A                     u737:
  1492   00190A  2EE8               	decfsz	wreg,f,c
  1493   00190C  D7FE               	bra	u737
  1494   00190E  2E17               	decfsz	??_fullSpeedAhead^0,f,c
  1495   001910  D7FC               	bra	u737
  1496   001912  D000               	nop2	
  1497   001914                     
  1498                           ;dc_motor.c: 185:         }
  1499   001914  4A1A               	infsnz	fullSpeedAhead@i^0,f,c
  1500   001916  2A1B               	incf	(fullSpeedAhead@i+1)^0,f,c
  1501   001918                     l160:
  1502   001918  5016               	movf	fullSpeedAhead@straightRamp^0,w,c
  1503   00191A  6E17               	movwf	??_fullSpeedAhead^0,c
  1504   00191C  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1505   00191E  5017               	movf	??_fullSpeedAhead^0,w,c
  1506   001920  5C1A               	subwf	fullSpeedAhead@i^0,w,c
  1507   001922  501B               	movf	(fullSpeedAhead@i+1)^0,w,c
  1508   001924  0A80               	xorlw	128
  1509   001926  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1510   001928  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1511   00192A  0A80               	xorlw	128
  1512   00192C  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1513   00192E  A0D8               	btfss	status,0,c
  1514   001930  EF9C  F00C         	goto	u531
  1515   001934  EF9E  F00C         	goto	u530
  1516   001938                     u531:
  1517   001938  EF82  F00C         	goto	l1458
  1518   00193C                     u530:
  1519   00193C                     
  1520                           ;dc_motor.c: 186:     }
  1521   00193C  4A1C               	infsnz	fullSpeedAhead@cur_power^0,f,c
  1522   00193E  2A1D               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  1523   001940                     l1464:
  1524   001940  5015               	movf	fullSpeedAhead@straightSpeed^0,w,c
  1525   001942  6E17               	movwf	??_fullSpeedAhead^0,c
  1526   001944  6A18               	clrf	(??_fullSpeedAhead+1)^0,c
  1527   001946  501C               	movf	fullSpeedAhead@cur_power^0,w,c
  1528   001948  5C17               	subwf	??_fullSpeedAhead^0,w,c
  1529   00194A  5018               	movf	(??_fullSpeedAhead+1)^0,w,c
  1530   00194C  0A80               	xorlw	128
  1531   00194E  6E19               	movwf	(??_fullSpeedAhead+2)^0,c
  1532   001950  501D               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  1533   001952  0A80               	xorlw	128
  1534   001954  5819               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  1535   001956  B0D8               	btfsc	status,0,c
  1536   001958  EFB0  F00C         	goto	u541
  1537   00195C  EFB2  F00C         	goto	u540
  1538   001960                     u541:
  1539   001960  EF5E  F00C         	goto	l1450
  1540   001964                     u540:
  1541   001964  0012               	return		;funcret
  1542   001966                     __end_of_fullSpeedAhead:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _calibration *****************
  1546 ;; Defined at:
  1547 ;;		line 222 in file "dc_motor.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  1550 ;;		 -> main@motorL(10), 
  1551 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  1552 ;;		 -> main@motorR(10), 
  1553 ;;  turnSpeed       1   32[COMRAM] unsigned char 
  1554 ;;  turnDuration    1   33[COMRAM] PTR unsigned char 
  1555 ;;		 -> main@turnDuration(1), 
  1556 ;;  turnRamp        1   34[COMRAM] unsigned char 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1568 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;Total ram usage:        7 bytes
  1573 ;; Hardware stack levels used: 1
  1574 ;; Hardware stack levels required when called: 3
  1575 ;; This function calls:
  1576 ;;		_turnLeft
  1577 ;;		_turnRight
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text5
  1584   0014E2                     __ptext5:
  1585                           	callstack 0
  1586   0014E2                     _calibration:
  1587                           	callstack 27
  1588   0014E2                     l1404:
  1589                           
  1590                           ;dc_motor.c: 222: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 223: {;dc_motor.c: 225:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1591   0014E2  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1592   0014E6  C020  F014         	movff	calibration@mR,turnLeft@mR
  1593   0014EA  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1594   0014EE  5022               	movf	calibration@turnDuration^0,w,c
  1595   0014F0  6ED9               	movwf	fsr2l,c
  1596   0014F2  6ADA               	clrf	fsr2h,c
  1597   0014F4  50DF               	movf	indf2,w,c
  1598   0014F6  6E16               	movwf	turnLeft@turnDuration^0,c
  1599   0014F8  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1600   0014FC  ECBE  F008         	call	_turnLeft	;wreg free
  1601   001500                     
  1602                           ;dc_motor.c: 226:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1603   001500  0E05               	movlw	5
  1604   001502  6E25               	movwf	(??_calibration+1)^0,c
  1605   001504  0E0F               	movlw	15
  1606   001506  6E24               	movwf	??_calibration^0,c
  1607   001508  0EF1               	movlw	241
  1608   00150A                     u747:
  1609   00150A  2EE8               	decfsz	wreg,f,c
  1610   00150C  D7FE               	bra	u747
  1611   00150E  2E24               	decfsz	??_calibration^0,f,c
  1612   001510  D7FC               	bra	u747
  1613   001512  2E25               	decfsz	(??_calibration+1)^0,f,c
  1614   001514  D7FA               	bra	u747
  1615   001516  0000               	nop	
  1616   001518                     
  1617                           ;dc_motor.c: 227:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1618   001518  C01F  F013         	movff	calibration@mL,turnLeft@mL
  1619   00151C  C020  F014         	movff	calibration@mR,turnLeft@mR
  1620   001520  C021  F015         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  1621   001524  5022               	movf	calibration@turnDuration^0,w,c
  1622   001526  6ED9               	movwf	fsr2l,c
  1623   001528  6ADA               	clrf	fsr2h,c
  1624   00152A  50DF               	movf	indf2,w,c
  1625   00152C  6E16               	movwf	turnLeft@turnDuration^0,c
  1626   00152E  C023  F017         	movff	calibration@turnRamp,turnLeft@turnRamp
  1627   001532  ECBE  F008         	call	_turnLeft	;wreg free
  1628                           
  1629                           ;dc_motor.c: 228:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1630   001536  0E05               	movlw	5
  1631   001538  6E25               	movwf	(??_calibration+1)^0,c
  1632   00153A  0E0F               	movlw	15
  1633   00153C  6E24               	movwf	??_calibration^0,c
  1634   00153E  0EF1               	movlw	241
  1635   001540                     u757:
  1636   001540  2EE8               	decfsz	wreg,f,c
  1637   001542  D7FE               	bra	u757
  1638   001544  2E24               	decfsz	??_calibration^0,f,c
  1639   001546  D7FC               	bra	u757
  1640   001548  2E25               	decfsz	(??_calibration+1)^0,f,c
  1641   00154A  D7FA               	bra	u757
  1642   00154C  0000               	nop	
  1643   00154E                     
  1644                           ;dc_motor.c: 229:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1645   00154E  C01F  F013         	movff	calibration@mL,turnRight@mL
  1646   001552  C020  F014         	movff	calibration@mR,turnRight@mR
  1647   001556  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1648   00155A  5022               	movf	calibration@turnDuration^0,w,c
  1649   00155C  6ED9               	movwf	fsr2l,c
  1650   00155E  6ADA               	clrf	fsr2h,c
  1651   001560  50DF               	movf	indf2,w,c
  1652   001562  6E16               	movwf	turnRight@turnDuration^0,c
  1653   001564  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1654   001568  ECE3  F007         	call	_turnRight	;wreg free
  1655   00156C                     
  1656                           ;dc_motor.c: 230:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1657   00156C  0E05               	movlw	5
  1658   00156E  6E25               	movwf	(??_calibration+1)^0,c
  1659   001570  0E0F               	movlw	15
  1660   001572  6E24               	movwf	??_calibration^0,c
  1661   001574  0EF1               	movlw	241
  1662   001576                     u767:
  1663   001576  2EE8               	decfsz	wreg,f,c
  1664   001578  D7FE               	bra	u767
  1665   00157A  2E24               	decfsz	??_calibration^0,f,c
  1666   00157C  D7FC               	bra	u767
  1667   00157E  2E25               	decfsz	(??_calibration+1)^0,f,c
  1668   001580  D7FA               	bra	u767
  1669   001582  0000               	nop	
  1670                           
  1671                           ;dc_motor.c: 231:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  1672   001584  C01F  F013         	movff	calibration@mL,turnRight@mL
  1673   001588  C020  F014         	movff	calibration@mR,turnRight@mR
  1674   00158C  C021  F015         	movff	calibration@turnSpeed,turnRight@turnSpeed
  1675   001590  5022               	movf	calibration@turnDuration^0,w,c
  1676   001592  6ED9               	movwf	fsr2l,c
  1677   001594  6ADA               	clrf	fsr2h,c
  1678   001596  50DF               	movf	indf2,w,c
  1679   001598  6E16               	movwf	turnRight@turnDuration^0,c
  1680   00159A  C023  F017         	movff	calibration@turnRamp,turnRight@turnRamp
  1681   00159E  ECE3  F007         	call	_turnRight	;wreg free
  1682   0015A2                     l185:
  1683   0015A2  A48E               	btfss	142,2,c	;volatile
  1684   0015A4  EFD6  F00A         	goto	u471
  1685   0015A8  EFD8  F00A         	goto	u470
  1686   0015AC                     u471:
  1687   0015AC  EFDF  F00A         	goto	l189
  1688   0015B0                     u470:
  1689   0015B0  B68E               	btfsc	142,3,c	;volatile
  1690   0015B2  EFDD  F00A         	goto	u481
  1691   0015B6  EFDF  F00A         	goto	u480
  1692   0015BA                     u481:
  1693   0015BA  EFD1  F00A         	goto	l185
  1694   0015BE                     u480:
  1695   0015BE                     l189:
  1696                           
  1697                           ;dc_motor.c: 236:         if (!PORTFbits.RF2 && *turnDuration>0) {
  1698   0015BE  B48E               	btfsc	142,2,c	;volatile
  1699   0015C0  EFE4  F00A         	goto	u491
  1700   0015C4  EFE6  F00A         	goto	u490
  1701   0015C8                     u491:
  1702   0015C8  EFF5  F00A         	goto	l190
  1703   0015CC                     u490:
  1704   0015CC  5022               	movf	calibration@turnDuration^0,w,c
  1705   0015CE  6ED9               	movwf	fsr2l,c
  1706   0015D0  6ADA               	clrf	fsr2h,c
  1707   0015D2  50DF               	movf	indf2,w,c
  1708   0015D4  B4D8               	btfsc	status,2,c
  1709   0015D6  EFEF  F00A         	goto	u501
  1710   0015DA  EFF1  F00A         	goto	u500
  1711   0015DE                     u501:
  1712   0015DE  EFF5  F00A         	goto	l190
  1713   0015E2                     u500:
  1714   0015E2                     
  1715                           ;dc_motor.c: 237:             *turnDuration--;
  1716   0015E2  0622               	decf	calibration@turnDuration^0,f,c
  1717   0015E4                     
  1718                           ;dc_motor.c: 238:             LATDbits.LATD7 = 1;
  1719   0015E4  8E7C               	bsf	124,7,c	;volatile
  1720                           
  1721                           ;dc_motor.c: 239:         }
  1722   0015E6  EFFE  F00A         	goto	l1426
  1723   0015EA                     l190:
  1724   0015EA  B68E               	btfsc	142,3,c	;volatile
  1725   0015EC  EFFA  F00A         	goto	u511
  1726   0015F0  EFFC  F00A         	goto	u510
  1727   0015F4                     u511:
  1728   0015F4  EFFE  F00A         	goto	l1426
  1729   0015F8                     u510:
  1730   0015F8                     
  1731                           ;dc_motor.c: 242:             *turnDuration++;
  1732   0015F8  2A22               	incf	calibration@turnDuration^0,f,c
  1733   0015FA                     
  1734                           ;dc_motor.c: 243:             LATHbits.LATH3 = 1;
  1735   0015FA  8680               	bsf	128,3,c	;volatile
  1736   0015FC                     l1426:
  1737                           
  1738                           ;dc_motor.c: 246:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1739   0015FC  0E29               	movlw	41
  1740   0015FE  6E25               	movwf	(??_calibration+1)^0,c
  1741   001600  0E96               	movlw	150
  1742   001602  6E24               	movwf	??_calibration^0,c
  1743   001604  0E7F               	movlw	127
  1744   001606                     u777:
  1745   001606  2EE8               	decfsz	wreg,f,c
  1746   001608  D7FE               	bra	u777
  1747   00160A  2E24               	decfsz	??_calibration^0,f,c
  1748   00160C  D7FC               	bra	u777
  1749   00160E  2E25               	decfsz	(??_calibration+1)^0,f,c
  1750   001610  D7FA               	bra	u777
  1751   001612  0000               	nop	
  1752   001614                     
  1753                           ;dc_motor.c: 248:         if (!PORTFbits.RF3) {
  1754   001614  B68E               	btfsc	142,3,c	;volatile
  1755   001616  EF0F  F00B         	goto	u521
  1756   00161A  EF11  F00B         	goto	u520
  1757   00161E                     u521:
  1758   00161E  EF14  F00B         	goto	l193
  1759   001622                     u520:
  1760   001622                     
  1761                           ;dc_motor.c: 249:             *turnDuration--;
  1762   001622  0622               	decf	calibration@turnDuration^0,f,c
  1763                           
  1764                           ;dc_motor.c: 250:             break;
  1765   001624  EF18  F00B         	goto	l194
  1766   001628                     l193:
  1767                           
  1768                           ;dc_motor.c: 253:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1769   001628  9680               	bcf	128,3,c	;volatile
  1770   00162A  9E7C               	bcf	124,7,c	;volatile
  1771   00162C  EF71  F00A         	goto	l1404
  1772   001630                     l194:
  1773                           
  1774                           ;dc_motor.c: 267:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1775   001630  8680               	bsf	128,3,c	;volatile
  1776   001632  8E7C               	bsf	124,7,c	;volatile
  1777   001634                     
  1778                           ;dc_motor.c: 268:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1779   001634  0E09               	movlw	9
  1780   001636  6E25               	movwf	(??_calibration+1)^0,c
  1781   001638  0E1E               	movlw	30
  1782   00163A  6E24               	movwf	??_calibration^0,c
  1783   00163C  0EE4               	movlw	228
  1784   00163E                     u787:
  1785   00163E  2EE8               	decfsz	wreg,f,c
  1786   001640  D7FE               	bra	u787
  1787   001642  2E24               	decfsz	??_calibration^0,f,c
  1788   001644  D7FC               	bra	u787
  1789   001646  2E25               	decfsz	(??_calibration+1)^0,f,c
  1790   001648  D7FA               	bra	u787
  1791   00164A  D000               	nop2	
  1792   00164C                     
  1793                           ;dc_motor.c: 269:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1794   00164C  9680               	bcf	128,3,c	;volatile
  1795   00164E  9E7C               	bcf	124,7,c	;volatile
  1796   001650  0012               	return		;funcret
  1797   001652                     __end_of_calibration:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _turnRight *****************
  1801 ;; Defined at:
  1802 ;;		line 140 in file "dc_motor.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1805 ;;		 -> main@motorL(10), 
  1806 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1807 ;;		 -> main@motorR(10), 
  1808 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  1809 ;;  turnDuration    1   21[COMRAM] unsigned char 
  1810 ;;  turnRamp        1   22[COMRAM] unsigned char 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  cur_power       2   28[COMRAM] int 
  1813 ;;  i               2   26[COMRAM] int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1823 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;Total ram usage:       12 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 2
  1830 ;; This function calls:
  1831 ;;		_setMotorPWM
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;;		_calibration
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text6
  1839   000FC6                     __ptext6:
  1840                           	callstack 0
  1841   000FC6                     _turnRight:
  1842                           	callstack 28
  1843   000FC6                     
  1844                           ;dc_motor.c: 140: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 141: {;dc_motor.c: 142:     mL->dir
      +                          ection = 1;
  1845   000FC6  5013               	movf	turnRight@mL^0,w,c
  1846   000FC8  6ED9               	movwf	fsr2l,c
  1847   000FCA  6ADA               	clrf	fsr2h,c
  1848   000FCC  0E01               	movlw	1
  1849   000FCE  26D9               	addwf	fsr2l,f,c
  1850   000FD0  0E01               	movlw	1
  1851   000FD2  6EDF               	movwf	indf2,c
  1852                           
  1853                           ;dc_motor.c: 143:     mR->direction = 0;
  1854   000FD4  5014               	movf	turnRight@mR^0,w,c
  1855   000FD6  6ED9               	movwf	fsr2l,c
  1856   000FD8  6ADA               	clrf	fsr2h,c
  1857   000FDA  0E01               	movlw	1
  1858   000FDC  26D9               	addwf	fsr2l,f,c
  1859   000FDE  6ADF               	clrf	indf2,c
  1860   000FE0                     
  1861                           ;dc_motor.c: 144:     int i;;dc_motor.c: 145:     int cur_power;;dc_motor.c: 146:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  1862   000FE0  0E00               	movlw	0
  1863   000FE2  6E1E               	movwf	(turnRight@cur_power+1)^0,c
  1864   000FE4  0E01               	movlw	1
  1865   000FE6  6E1D               	movwf	turnRight@cur_power^0,c
  1866   000FE8  EF38  F008         	goto	l1352
  1867   000FEC                     l1338:
  1868                           
  1869                           ;dc_motor.c: 147:         mL->power = cur_power+mL->compensation;
  1870   000FEC  5013               	movf	turnRight@mL^0,w,c
  1871   000FEE  6ED9               	movwf	fsr2l,c
  1872   000FF0  6ADA               	clrf	fsr2h,c
  1873   000FF2  5013               	movf	turnRight@mL^0,w,c
  1874   000FF4  6EE1               	movwf	fsr1l,c
  1875   000FF6  6AE2               	clrf	fsr1h,c
  1876   000FF8  0E09               	movlw	9
  1877   000FFA  26E1               	addwf	fsr1l,f,c
  1878   000FFC  50E7               	movf	indf1,w,c
  1879   000FFE  241D               	addwf	turnRight@cur_power^0,w,c
  1880   001000  6EDF               	movwf	indf2,c
  1881                           
  1882                           ;dc_motor.c: 148:         mR->power = cur_power+mR->compensation;
  1883   001002  5014               	movf	turnRight@mR^0,w,c
  1884   001004  6ED9               	movwf	fsr2l,c
  1885   001006  6ADA               	clrf	fsr2h,c
  1886   001008  5014               	movf	turnRight@mR^0,w,c
  1887   00100A  6EE1               	movwf	fsr1l,c
  1888   00100C  6AE2               	clrf	fsr1h,c
  1889   00100E  0E09               	movlw	9
  1890   001010  26E1               	addwf	fsr1l,f,c
  1891   001012  50E7               	movf	indf1,w,c
  1892   001014  241D               	addwf	turnRight@cur_power^0,w,c
  1893   001016  6EDF               	movwf	indf2,c
  1894   001018                     
  1895                           ;dc_motor.c: 149:         setMotorPWM(mL);
  1896   001018  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  1897   00101C  EC29  F00B         	call	_setMotorPWM	;wreg free
  1898   001020                     
  1899                           ;dc_motor.c: 150:         setMotorPWM(mR);
  1900   001020  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  1901   001024  EC29  F00B         	call	_setMotorPWM	;wreg free
  1902   001028                     
  1903                           ;dc_motor.c: 151:         for (i=0;i<turnRamp;i++) {
  1904   001028  0E00               	movlw	0
  1905   00102A  6E1C               	movwf	(turnRight@i+1)^0,c
  1906   00102C  0E00               	movlw	0
  1907   00102E  6E1B               	movwf	turnRight@i^0,c
  1908   001030  EF24  F008         	goto	l143
  1909   001034                     l1346:
  1910                           
  1911                           ;dc_motor.c: 152:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1912   001034  0E68               	movlw	104
  1913   001036  6E18               	movwf	??_turnRight^0,c
  1914   001038  0EE4               	movlw	228
  1915   00103A                     u797:
  1916   00103A  2EE8               	decfsz	wreg,f,c
  1917   00103C  D7FE               	bra	u797
  1918   00103E  2E18               	decfsz	??_turnRight^0,f,c
  1919   001040  D7FC               	bra	u797
  1920   001042  D000               	nop2	
  1921   001044                     
  1922                           ;dc_motor.c: 153:         }
  1923   001044  4A1B               	infsnz	turnRight@i^0,f,c
  1924   001046  2A1C               	incf	(turnRight@i+1)^0,f,c
  1925   001048                     l143:
  1926   001048  5017               	movf	turnRight@turnRamp^0,w,c
  1927   00104A  6E18               	movwf	??_turnRight^0,c
  1928   00104C  6A19               	clrf	(??_turnRight+1)^0,c
  1929   00104E  5018               	movf	??_turnRight^0,w,c
  1930   001050  5C1B               	subwf	turnRight@i^0,w,c
  1931   001052  501C               	movf	(turnRight@i+1)^0,w,c
  1932   001054  0A80               	xorlw	128
  1933   001056  6E1A               	movwf	(??_turnRight+2)^0,c
  1934   001058  5019               	movf	(??_turnRight+1)^0,w,c
  1935   00105A  0A80               	xorlw	128
  1936   00105C  581A               	subwfb	(??_turnRight+2)^0,w,c
  1937   00105E  A0D8               	btfss	status,0,c
  1938   001060  EF34  F008         	goto	u421
  1939   001064  EF36  F008         	goto	u420
  1940   001068                     u421:
  1941   001068  EF1A  F008         	goto	l1346
  1942   00106C                     u420:
  1943   00106C                     
  1944                           ;dc_motor.c: 154:     }
  1945   00106C  4A1D               	infsnz	turnRight@cur_power^0,f,c
  1946   00106E  2A1E               	incf	(turnRight@cur_power+1)^0,f,c
  1947   001070                     l1352:
  1948   001070  5015               	movf	turnRight@turnSpeed^0,w,c
  1949   001072  6E18               	movwf	??_turnRight^0,c
  1950   001074  6A19               	clrf	(??_turnRight+1)^0,c
  1951   001076  501D               	movf	turnRight@cur_power^0,w,c
  1952   001078  5C18               	subwf	??_turnRight^0,w,c
  1953   00107A  5019               	movf	(??_turnRight+1)^0,w,c
  1954   00107C  0A80               	xorlw	128
  1955   00107E  6E1A               	movwf	(??_turnRight+2)^0,c
  1956   001080  501E               	movf	(turnRight@cur_power+1)^0,w,c
  1957   001082  0A80               	xorlw	128
  1958   001084  581A               	subwfb	(??_turnRight+2)^0,w,c
  1959   001086  B0D8               	btfsc	status,0,c
  1960   001088  EF48  F008         	goto	u431
  1961   00108C  EF4A  F008         	goto	u430
  1962   001090                     u431:
  1963   001090  EFF6  F007         	goto	l1338
  1964   001094                     u430:
  1965   001094                     
  1966                           ;dc_motor.c: 156:     for (i=0;i<turnDuration;i++) {
  1967   001094  0E00               	movlw	0
  1968   001096  6E1C               	movwf	(turnRight@i+1)^0,c
  1969   001098  0E00               	movlw	0
  1970   00109A  6E1B               	movwf	turnRight@i^0,c
  1971   00109C  EF5A  F008         	goto	l147
  1972   0010A0                     l1356:
  1973                           
  1974                           ;dc_motor.c: 157:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1975   0010A0  0E68               	movlw	104
  1976   0010A2  6E18               	movwf	??_turnRight^0,c
  1977   0010A4  0EE4               	movlw	228
  1978   0010A6                     u807:
  1979   0010A6  2EE8               	decfsz	wreg,f,c
  1980   0010A8  D7FE               	bra	u807
  1981   0010AA  2E18               	decfsz	??_turnRight^0,f,c
  1982   0010AC  D7FC               	bra	u807
  1983   0010AE  D000               	nop2	
  1984   0010B0                     
  1985                           ;dc_motor.c: 158:         }
  1986   0010B0  4A1B               	infsnz	turnRight@i^0,f,c
  1987   0010B2  2A1C               	incf	(turnRight@i+1)^0,f,c
  1988   0010B4                     l147:
  1989   0010B4  5016               	movf	turnRight@turnDuration^0,w,c
  1990   0010B6  6E18               	movwf	??_turnRight^0,c
  1991   0010B8  6A19               	clrf	(??_turnRight+1)^0,c
  1992   0010BA  5018               	movf	??_turnRight^0,w,c
  1993   0010BC  5C1B               	subwf	turnRight@i^0,w,c
  1994   0010BE  501C               	movf	(turnRight@i+1)^0,w,c
  1995   0010C0  0A80               	xorlw	128
  1996   0010C2  6E1A               	movwf	(??_turnRight+2)^0,c
  1997   0010C4  5019               	movf	(??_turnRight+1)^0,w,c
  1998   0010C6  0A80               	xorlw	128
  1999   0010C8  581A               	subwfb	(??_turnRight+2)^0,w,c
  2000   0010CA  A0D8               	btfss	status,0,c
  2001   0010CC  EF6A  F008         	goto	u441
  2002   0010D0  EF6C  F008         	goto	u440
  2003   0010D4                     u441:
  2004   0010D4  EF50  F008         	goto	l1356
  2005   0010D8                     u440:
  2006   0010D8                     
  2007                           ;dc_motor.c: 160:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2008   0010D8  C015  F01D         	movff	turnRight@turnSpeed,turnRight@cur_power
  2009   0010DC  6A1E               	clrf	(turnRight@cur_power+1)^0,c
  2010   0010DE                     l1360:
  2011   0010DE  BE1E               	btfsc	(turnRight@cur_power+1)^0,7,c
  2012   0010E0  EF76  F008         	goto	u450
  2013   0010E4  EF74  F008         	goto	u451
  2014   0010E8                     u451:
  2015   0010E8  EF78  F008         	goto	l1364
  2016   0010EC                     u450:
  2017   0010EC  EFBD  F008         	goto	l155
  2018   0010F0                     l1364:
  2019                           
  2020                           ;dc_motor.c: 161:         mL->power = cur_power+mL->compensation;
  2021   0010F0  5013               	movf	turnRight@mL^0,w,c
  2022   0010F2  6ED9               	movwf	fsr2l,c
  2023   0010F4  6ADA               	clrf	fsr2h,c
  2024   0010F6  5013               	movf	turnRight@mL^0,w,c
  2025   0010F8  6EE1               	movwf	fsr1l,c
  2026   0010FA  6AE2               	clrf	fsr1h,c
  2027   0010FC  0E09               	movlw	9
  2028   0010FE  26E1               	addwf	fsr1l,f,c
  2029   001100  50E7               	movf	indf1,w,c
  2030   001102  241D               	addwf	turnRight@cur_power^0,w,c
  2031   001104  6EDF               	movwf	indf2,c
  2032                           
  2033                           ;dc_motor.c: 162:         mR->power = cur_power+mR->compensation;
  2034   001106  5014               	movf	turnRight@mR^0,w,c
  2035   001108  6ED9               	movwf	fsr2l,c
  2036   00110A  6ADA               	clrf	fsr2h,c
  2037   00110C  5014               	movf	turnRight@mR^0,w,c
  2038   00110E  6EE1               	movwf	fsr1l,c
  2039   001110  6AE2               	clrf	fsr1h,c
  2040   001112  0E09               	movlw	9
  2041   001114  26E1               	addwf	fsr1l,f,c
  2042   001116  50E7               	movf	indf1,w,c
  2043   001118  241D               	addwf	turnRight@cur_power^0,w,c
  2044   00111A  6EDF               	movwf	indf2,c
  2045   00111C                     
  2046                           ;dc_motor.c: 163:         setMotorPWM(mL);
  2047   00111C  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  2048   001120  EC29  F00B         	call	_setMotorPWM	;wreg free
  2049   001124                     
  2050                           ;dc_motor.c: 164:         setMotorPWM(mR);
  2051   001124  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  2052   001128  EC29  F00B         	call	_setMotorPWM	;wreg free
  2053   00112C                     
  2054                           ;dc_motor.c: 165:         for (i=0;i<turnRamp;i++) {
  2055   00112C  0E00               	movlw	0
  2056   00112E  6E1C               	movwf	(turnRight@i+1)^0,c
  2057   001130  0E00               	movlw	0
  2058   001132  6E1B               	movwf	turnRight@i^0,c
  2059   001134  EFA6  F008         	goto	l152
  2060   001138                     l1372:
  2061                           
  2062                           ;dc_motor.c: 166:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2063   001138  0E68               	movlw	104
  2064   00113A  6E18               	movwf	??_turnRight^0,c
  2065   00113C  0EE4               	movlw	228
  2066   00113E                     u817:
  2067   00113E  2EE8               	decfsz	wreg,f,c
  2068   001140  D7FE               	bra	u817
  2069   001142  2E18               	decfsz	??_turnRight^0,f,c
  2070   001144  D7FC               	bra	u817
  2071   001146  D000               	nop2	
  2072   001148                     
  2073                           ;dc_motor.c: 167:         }
  2074   001148  4A1B               	infsnz	turnRight@i^0,f,c
  2075   00114A  2A1C               	incf	(turnRight@i+1)^0,f,c
  2076   00114C                     l152:
  2077   00114C  5017               	movf	turnRight@turnRamp^0,w,c
  2078   00114E  6E18               	movwf	??_turnRight^0,c
  2079   001150  6A19               	clrf	(??_turnRight+1)^0,c
  2080   001152  5018               	movf	??_turnRight^0,w,c
  2081   001154  5C1B               	subwf	turnRight@i^0,w,c
  2082   001156  501C               	movf	(turnRight@i+1)^0,w,c
  2083   001158  0A80               	xorlw	128
  2084   00115A  6E1A               	movwf	(??_turnRight+2)^0,c
  2085   00115C  5019               	movf	(??_turnRight+1)^0,w,c
  2086   00115E  0A80               	xorlw	128
  2087   001160  581A               	subwfb	(??_turnRight+2)^0,w,c
  2088   001162  A0D8               	btfss	status,0,c
  2089   001164  EFB6  F008         	goto	u461
  2090   001168  EFB8  F008         	goto	u460
  2091   00116C                     u461:
  2092   00116C  EF9C  F008         	goto	l1372
  2093   001170                     u460:
  2094   001170                     
  2095                           ;dc_motor.c: 168:     }
  2096   001170  061D               	decf	turnRight@cur_power^0,f,c
  2097   001172  A0D8               	btfss	status,0,c
  2098   001174  061E               	decf	(turnRight@cur_power+1)^0,f,c
  2099   001176  EF6F  F008         	goto	l1360
  2100   00117A                     l155:
  2101   00117A  0012               	return		;funcret
  2102   00117C                     __end_of_turnRight:
  2103                           	callstack 0
  2104                           
  2105 ;; *************** function _turnLeft *****************
  2106 ;; Defined at:
  2107 ;;		line 108 in file "dc_motor.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2110 ;;		 -> main@motorL(10), 
  2111 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2112 ;;		 -> main@motorR(10), 
  2113 ;;  turnSpeed       1   20[COMRAM] unsigned char 
  2114 ;;  turnDuration    1   21[COMRAM] unsigned char 
  2115 ;;  turnRamp        1   22[COMRAM] unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  cur_power       2   28[COMRAM] int 
  2118 ;;  i               2   26[COMRAM] int 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2128 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;Total ram usage:       12 bytes
  2133 ;; Hardware stack levels used: 1
  2134 ;; Hardware stack levels required when called: 2
  2135 ;; This function calls:
  2136 ;;		_setMotorPWM
  2137 ;; This function is called by:
  2138 ;;		_main
  2139 ;;		_calibration
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text7
  2144   00117C                     __ptext7:
  2145                           	callstack 0
  2146   00117C                     _turnLeft:
  2147                           	callstack 28
  2148   00117C                     
  2149                           ;dc_motor.c: 108: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 109: {;dc_motor.c: 110:     mL->dire
      +                          ction = 0;
  2150   00117C  5013               	movf	turnLeft@mL^0,w,c
  2151   00117E  6ED9               	movwf	fsr2l,c
  2152   001180  6ADA               	clrf	fsr2h,c
  2153   001182  0E01               	movlw	1
  2154   001184  26D9               	addwf	fsr2l,f,c
  2155   001186  6ADF               	clrf	indf2,c
  2156                           
  2157                           ;dc_motor.c: 111:     mR->direction = 1;
  2158   001188  5014               	movf	turnLeft@mR^0,w,c
  2159   00118A  6ED9               	movwf	fsr2l,c
  2160   00118C  6ADA               	clrf	fsr2h,c
  2161   00118E  0E01               	movlw	1
  2162   001190  26D9               	addwf	fsr2l,f,c
  2163   001192  0E01               	movlw	1
  2164   001194  6EDF               	movwf	indf2,c
  2165   001196                     
  2166                           ;dc_motor.c: 112:     int i;;dc_motor.c: 113:     int cur_power;;dc_motor.c: 114:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  2167   001196  0E00               	movlw	0
  2168   001198  6E1E               	movwf	(turnLeft@cur_power+1)^0,c
  2169   00119A  0E01               	movlw	1
  2170   00119C  6E1D               	movwf	turnLeft@cur_power^0,c
  2171   00119E  EF13  F009         	goto	l1306
  2172   0011A2                     l1292:
  2173                           
  2174                           ;dc_motor.c: 115:         mL->power = cur_power+mL->compensation;
  2175   0011A2  5013               	movf	turnLeft@mL^0,w,c
  2176   0011A4  6ED9               	movwf	fsr2l,c
  2177   0011A6  6ADA               	clrf	fsr2h,c
  2178   0011A8  5013               	movf	turnLeft@mL^0,w,c
  2179   0011AA  6EE1               	movwf	fsr1l,c
  2180   0011AC  6AE2               	clrf	fsr1h,c
  2181   0011AE  0E09               	movlw	9
  2182   0011B0  26E1               	addwf	fsr1l,f,c
  2183   0011B2  50E7               	movf	indf1,w,c
  2184   0011B4  241D               	addwf	turnLeft@cur_power^0,w,c
  2185   0011B6  6EDF               	movwf	indf2,c
  2186                           
  2187                           ;dc_motor.c: 116:         mR->power = cur_power+mR->compensation;
  2188   0011B8  5014               	movf	turnLeft@mR^0,w,c
  2189   0011BA  6ED9               	movwf	fsr2l,c
  2190   0011BC  6ADA               	clrf	fsr2h,c
  2191   0011BE  5014               	movf	turnLeft@mR^0,w,c
  2192   0011C0  6EE1               	movwf	fsr1l,c
  2193   0011C2  6AE2               	clrf	fsr1h,c
  2194   0011C4  0E09               	movlw	9
  2195   0011C6  26E1               	addwf	fsr1l,f,c
  2196   0011C8  50E7               	movf	indf1,w,c
  2197   0011CA  241D               	addwf	turnLeft@cur_power^0,w,c
  2198   0011CC  6EDF               	movwf	indf2,c
  2199   0011CE                     
  2200                           ;dc_motor.c: 117:         setMotorPWM(mL);
  2201   0011CE  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2202   0011D2  EC29  F00B         	call	_setMotorPWM	;wreg free
  2203   0011D6                     
  2204                           ;dc_motor.c: 118:         setMotorPWM(mR);
  2205   0011D6  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2206   0011DA  EC29  F00B         	call	_setMotorPWM	;wreg free
  2207   0011DE                     
  2208                           ;dc_motor.c: 119:         for (i=0;i<turnRamp;i++) {
  2209   0011DE  0E00               	movlw	0
  2210   0011E0  6E1C               	movwf	(turnLeft@i+1)^0,c
  2211   0011E2  0E00               	movlw	0
  2212   0011E4  6E1B               	movwf	turnLeft@i^0,c
  2213   0011E6  EFFF  F008         	goto	l126
  2214   0011EA                     l1300:
  2215                           
  2216                           ;dc_motor.c: 120:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2217   0011EA  0E68               	movlw	104
  2218   0011EC  6E18               	movwf	??_turnLeft^0,c
  2219   0011EE  0EE4               	movlw	228
  2220   0011F0                     u827:
  2221   0011F0  2EE8               	decfsz	wreg,f,c
  2222   0011F2  D7FE               	bra	u827
  2223   0011F4  2E18               	decfsz	??_turnLeft^0,f,c
  2224   0011F6  D7FC               	bra	u827
  2225   0011F8  D000               	nop2	
  2226   0011FA                     
  2227                           ;dc_motor.c: 121:         }
  2228   0011FA  4A1B               	infsnz	turnLeft@i^0,f,c
  2229   0011FC  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2230   0011FE                     l126:
  2231   0011FE  5017               	movf	turnLeft@turnRamp^0,w,c
  2232   001200  6E18               	movwf	??_turnLeft^0,c
  2233   001202  6A19               	clrf	(??_turnLeft+1)^0,c
  2234   001204  5018               	movf	??_turnLeft^0,w,c
  2235   001206  5C1B               	subwf	turnLeft@i^0,w,c
  2236   001208  501C               	movf	(turnLeft@i+1)^0,w,c
  2237   00120A  0A80               	xorlw	128
  2238   00120C  6E1A               	movwf	(??_turnLeft+2)^0,c
  2239   00120E  5019               	movf	(??_turnLeft+1)^0,w,c
  2240   001210  0A80               	xorlw	128
  2241   001212  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2242   001214  A0D8               	btfss	status,0,c
  2243   001216  EF0F  F009         	goto	u371
  2244   00121A  EF11  F009         	goto	u370
  2245   00121E                     u371:
  2246   00121E  EFF5  F008         	goto	l1300
  2247   001222                     u370:
  2248   001222                     
  2249                           ;dc_motor.c: 122:     }
  2250   001222  4A1D               	infsnz	turnLeft@cur_power^0,f,c
  2251   001224  2A1E               	incf	(turnLeft@cur_power+1)^0,f,c
  2252   001226                     l1306:
  2253   001226  5015               	movf	turnLeft@turnSpeed^0,w,c
  2254   001228  6E18               	movwf	??_turnLeft^0,c
  2255   00122A  6A19               	clrf	(??_turnLeft+1)^0,c
  2256   00122C  501D               	movf	turnLeft@cur_power^0,w,c
  2257   00122E  5C18               	subwf	??_turnLeft^0,w,c
  2258   001230  5019               	movf	(??_turnLeft+1)^0,w,c
  2259   001232  0A80               	xorlw	128
  2260   001234  6E1A               	movwf	(??_turnLeft+2)^0,c
  2261   001236  501E               	movf	(turnLeft@cur_power+1)^0,w,c
  2262   001238  0A80               	xorlw	128
  2263   00123A  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2264   00123C  B0D8               	btfsc	status,0,c
  2265   00123E  EF23  F009         	goto	u381
  2266   001242  EF25  F009         	goto	u380
  2267   001246                     u381:
  2268   001246  EFD1  F008         	goto	l1292
  2269   00124A                     u380:
  2270   00124A                     
  2271                           ;dc_motor.c: 124:     for (i=0;i<turnDuration;i++) {
  2272   00124A  0E00               	movlw	0
  2273   00124C  6E1C               	movwf	(turnLeft@i+1)^0,c
  2274   00124E  0E00               	movlw	0
  2275   001250  6E1B               	movwf	turnLeft@i^0,c
  2276   001252  EF35  F009         	goto	l130
  2277   001256                     l1310:
  2278                           
  2279                           ;dc_motor.c: 125:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2280   001256  0E68               	movlw	104
  2281   001258  6E18               	movwf	??_turnLeft^0,c
  2282   00125A  0EE4               	movlw	228
  2283   00125C                     u837:
  2284   00125C  2EE8               	decfsz	wreg,f,c
  2285   00125E  D7FE               	bra	u837
  2286   001260  2E18               	decfsz	??_turnLeft^0,f,c
  2287   001262  D7FC               	bra	u837
  2288   001264  D000               	nop2	
  2289   001266                     
  2290                           ;dc_motor.c: 126:         }
  2291   001266  4A1B               	infsnz	turnLeft@i^0,f,c
  2292   001268  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2293   00126A                     l130:
  2294   00126A  5016               	movf	turnLeft@turnDuration^0,w,c
  2295   00126C  6E18               	movwf	??_turnLeft^0,c
  2296   00126E  6A19               	clrf	(??_turnLeft+1)^0,c
  2297   001270  5018               	movf	??_turnLeft^0,w,c
  2298   001272  5C1B               	subwf	turnLeft@i^0,w,c
  2299   001274  501C               	movf	(turnLeft@i+1)^0,w,c
  2300   001276  0A80               	xorlw	128
  2301   001278  6E1A               	movwf	(??_turnLeft+2)^0,c
  2302   00127A  5019               	movf	(??_turnLeft+1)^0,w,c
  2303   00127C  0A80               	xorlw	128
  2304   00127E  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2305   001280  A0D8               	btfss	status,0,c
  2306   001282  EF45  F009         	goto	u391
  2307   001286  EF47  F009         	goto	u390
  2308   00128A                     u391:
  2309   00128A  EF2B  F009         	goto	l1310
  2310   00128E                     u390:
  2311   00128E                     
  2312                           ;dc_motor.c: 128:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  2313   00128E  C015  F01D         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  2314   001292  6A1E               	clrf	(turnLeft@cur_power+1)^0,c
  2315   001294                     l1314:
  2316   001294  BE1E               	btfsc	(turnLeft@cur_power+1)^0,7,c
  2317   001296  EF51  F009         	goto	u400
  2318   00129A  EF4F  F009         	goto	u401
  2319   00129E                     u401:
  2320   00129E  EF53  F009         	goto	l1318
  2321   0012A2                     u400:
  2322   0012A2  EF98  F009         	goto	l138
  2323   0012A6                     l1318:
  2324                           
  2325                           ;dc_motor.c: 129:         mL->power = cur_power+mL->compensation;
  2326   0012A6  5013               	movf	turnLeft@mL^0,w,c
  2327   0012A8  6ED9               	movwf	fsr2l,c
  2328   0012AA  6ADA               	clrf	fsr2h,c
  2329   0012AC  5013               	movf	turnLeft@mL^0,w,c
  2330   0012AE  6EE1               	movwf	fsr1l,c
  2331   0012B0  6AE2               	clrf	fsr1h,c
  2332   0012B2  0E09               	movlw	9
  2333   0012B4  26E1               	addwf	fsr1l,f,c
  2334   0012B6  50E7               	movf	indf1,w,c
  2335   0012B8  241D               	addwf	turnLeft@cur_power^0,w,c
  2336   0012BA  6EDF               	movwf	indf2,c
  2337                           
  2338                           ;dc_motor.c: 130:         mR->power = cur_power+mR->compensation;
  2339   0012BC  5014               	movf	turnLeft@mR^0,w,c
  2340   0012BE  6ED9               	movwf	fsr2l,c
  2341   0012C0  6ADA               	clrf	fsr2h,c
  2342   0012C2  5014               	movf	turnLeft@mR^0,w,c
  2343   0012C4  6EE1               	movwf	fsr1l,c
  2344   0012C6  6AE2               	clrf	fsr1h,c
  2345   0012C8  0E09               	movlw	9
  2346   0012CA  26E1               	addwf	fsr1l,f,c
  2347   0012CC  50E7               	movf	indf1,w,c
  2348   0012CE  241D               	addwf	turnLeft@cur_power^0,w,c
  2349   0012D0  6EDF               	movwf	indf2,c
  2350   0012D2                     
  2351                           ;dc_motor.c: 131:         setMotorPWM(mL);
  2352   0012D2  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  2353   0012D6  EC29  F00B         	call	_setMotorPWM	;wreg free
  2354   0012DA                     
  2355                           ;dc_motor.c: 132:         setMotorPWM(mR);
  2356   0012DA  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  2357   0012DE  EC29  F00B         	call	_setMotorPWM	;wreg free
  2358   0012E2                     
  2359                           ;dc_motor.c: 133:         for (i=0;i<turnRamp;i++) {
  2360   0012E2  0E00               	movlw	0
  2361   0012E4  6E1C               	movwf	(turnLeft@i+1)^0,c
  2362   0012E6  0E00               	movlw	0
  2363   0012E8  6E1B               	movwf	turnLeft@i^0,c
  2364   0012EA  EF81  F009         	goto	l135
  2365   0012EE                     l1326:
  2366                           
  2367                           ;dc_motor.c: 134:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2368   0012EE  0E68               	movlw	104
  2369   0012F0  6E18               	movwf	??_turnLeft^0,c
  2370   0012F2  0EE4               	movlw	228
  2371   0012F4                     u847:
  2372   0012F4  2EE8               	decfsz	wreg,f,c
  2373   0012F6  D7FE               	bra	u847
  2374   0012F8  2E18               	decfsz	??_turnLeft^0,f,c
  2375   0012FA  D7FC               	bra	u847
  2376   0012FC  D000               	nop2	
  2377   0012FE                     
  2378                           ;dc_motor.c: 135:         }
  2379   0012FE  4A1B               	infsnz	turnLeft@i^0,f,c
  2380   001300  2A1C               	incf	(turnLeft@i+1)^0,f,c
  2381   001302                     l135:
  2382   001302  5017               	movf	turnLeft@turnRamp^0,w,c
  2383   001304  6E18               	movwf	??_turnLeft^0,c
  2384   001306  6A19               	clrf	(??_turnLeft+1)^0,c
  2385   001308  5018               	movf	??_turnLeft^0,w,c
  2386   00130A  5C1B               	subwf	turnLeft@i^0,w,c
  2387   00130C  501C               	movf	(turnLeft@i+1)^0,w,c
  2388   00130E  0A80               	xorlw	128
  2389   001310  6E1A               	movwf	(??_turnLeft+2)^0,c
  2390   001312  5019               	movf	(??_turnLeft+1)^0,w,c
  2391   001314  0A80               	xorlw	128
  2392   001316  581A               	subwfb	(??_turnLeft+2)^0,w,c
  2393   001318  A0D8               	btfss	status,0,c
  2394   00131A  EF91  F009         	goto	u411
  2395   00131E  EF93  F009         	goto	u410
  2396   001322                     u411:
  2397   001322  EF77  F009         	goto	l1326
  2398   001326                     u410:
  2399   001326                     
  2400                           ;dc_motor.c: 136:     }
  2401   001326  061D               	decf	turnLeft@cur_power^0,f,c
  2402   001328  A0D8               	btfss	status,0,c
  2403   00132A  061E               	decf	(turnLeft@cur_power+1)^0,f,c
  2404   00132C  EF4A  F009         	goto	l1314
  2405   001330                     l138:
  2406   001330  0012               	return		;funcret
  2407   001332                     __end_of_turnLeft:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _setMotorPWM *****************
  2411 ;; Defined at:
  2412 ;;		line 65 in file "dc_motor.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2415 ;;		 -> main@motorR(10), main@motorL(10), 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  negDuty         1   17[COMRAM] unsigned char 
  2418 ;;  posDuty         1   16[COMRAM] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2428 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;Total ram usage:        5 bytes
  2433 ;; Hardware stack levels used: 1
  2434 ;; Hardware stack levels required when called: 1
  2435 ;; This function calls:
  2436 ;;		___lwdiv
  2437 ;;		___wmul
  2438 ;; This function is called by:
  2439 ;;		_stop
  2440 ;;		_turnLeft
  2441 ;;		_turnRight
  2442 ;;		_fullSpeedAhead
  2443 ;;		_reverseOneSquare
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text8
  2448   001652                     __ptext8:
  2449                           	callstack 0
  2450   001652                     _setMotorPWM:
  2451                           	callstack 28
  2452   001652                     
  2453                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  2454   001652  500E               	movf	setMotorPWM@m^0,w,c
  2455   001654  6ED9               	movwf	fsr2l,c
  2456   001656  6ADA               	clrf	fsr2h,c
  2457   001658  0E02               	movlw	2
  2458   00165A  26D9               	addwf	fsr2l,f,c
  2459   00165C  50DF               	movf	indf2,w,c
  2460   00165E  B4D8               	btfsc	status,2,c
  2461   001660  EF34  F00B         	goto	u351
  2462   001664  EF36  F00B         	goto	u350
  2463   001668                     u351:
  2464   001668  EF66  F00B         	goto	l1278
  2465   00166C                     u350:
  2466   00166C                     
  2467                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2468   00166C  500E               	movf	setMotorPWM@m^0,w,c
  2469   00166E  6ED9               	movwf	fsr2l,c
  2470   001670  6ADA               	clrf	fsr2h,c
  2471   001672  50DF               	movf	indf2,w,c
  2472   001674  6E0F               	movwf	??_setMotorPWM^0,c
  2473   001676  500F               	movf	??_setMotorPWM^0,w,c
  2474   001678  6E01               	movwf	___wmul@multiplier^0,c
  2475   00167A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2476   00167C  500E               	movf	setMotorPWM@m^0,w,c
  2477   00167E  6ED9               	movwf	fsr2l,c
  2478   001680  6ADA               	clrf	fsr2h,c
  2479   001682  0E03               	movlw	3
  2480   001684  26D9               	addwf	fsr2l,f,c
  2481   001686  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2482   00168A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2483   00168E  EC35  F00D         	call	___wmul	;wreg free
  2484   001692  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2485   001696  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2486   00169A  0E00               	movlw	0
  2487   00169C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2488   00169E  0E64               	movlw	100
  2489   0016A0  6E09               	movwf	___lwdiv@divisor^0,c
  2490   0016A2  ECFB  F00C         	call	___lwdiv	;wreg free
  2491   0016A6  500E               	movf	setMotorPWM@m^0,w,c
  2492   0016A8  6ED9               	movwf	fsr2l,c
  2493   0016AA  6ADA               	clrf	fsr2h,c
  2494   0016AC  0E03               	movlw	3
  2495   0016AE  26D9               	addwf	fsr2l,f,c
  2496   0016B0  50DF               	movf	indf2,w,c
  2497   0016B2  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2498   0016B4  5007               	movf	?___lwdiv^0,w,c
  2499   0016B6  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2500   0016B8  6E11               	movwf	setMotorPWM@posDuty^0,c
  2501   0016BA                     
  2502                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  2503   0016BA  500E               	movf	setMotorPWM@m^0,w,c
  2504   0016BC  6ED9               	movwf	fsr2l,c
  2505   0016BE  6ADA               	clrf	fsr2h,c
  2506   0016C0  0E03               	movlw	3
  2507   0016C2  26D9               	addwf	fsr2l,f,c
  2508   0016C4  50DF               	movf	indf2,w,c
  2509   0016C6  6E12               	movwf	setMotorPWM@negDuty^0,c
  2510                           
  2511                           ;dc_motor.c: 72:     }
  2512   0016C8  EF87  F00B         	goto	l1282
  2513   0016CC                     l1278:
  2514                           
  2515                           ;dc_motor.c: 74:         posDuty=0;
  2516   0016CC  0E00               	movlw	0
  2517   0016CE  6E11               	movwf	setMotorPWM@posDuty^0,c
  2518   0016D0                     
  2519                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2520   0016D0  500E               	movf	setMotorPWM@m^0,w,c
  2521   0016D2  6ED9               	movwf	fsr2l,c
  2522   0016D4  6ADA               	clrf	fsr2h,c
  2523   0016D6  50DF               	movf	indf2,w,c
  2524   0016D8  6E0F               	movwf	??_setMotorPWM^0,c
  2525   0016DA  500F               	movf	??_setMotorPWM^0,w,c
  2526   0016DC  6E01               	movwf	___wmul@multiplier^0,c
  2527   0016DE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2528   0016E0  500E               	movf	setMotorPWM@m^0,w,c
  2529   0016E2  6ED9               	movwf	fsr2l,c
  2530   0016E4  6ADA               	clrf	fsr2h,c
  2531   0016E6  0E03               	movlw	3
  2532   0016E8  26D9               	addwf	fsr2l,f,c
  2533   0016EA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2534   0016EE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2535   0016F2  EC35  F00D         	call	___wmul	;wreg free
  2536   0016F6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2537   0016FA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2538   0016FE  0E00               	movlw	0
  2539   001700  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2540   001702  0E64               	movlw	100
  2541   001704  6E09               	movwf	___lwdiv@divisor^0,c
  2542   001706  ECFB  F00C         	call	___lwdiv	;wreg free
  2543   00170A  5007               	movf	?___lwdiv^0,w,c
  2544   00170C  6E12               	movwf	setMotorPWM@negDuty^0,c
  2545   00170E                     l1282:
  2546                           
  2547                           ;dc_motor.c: 78:     if (m->direction) {
  2548   00170E  500E               	movf	setMotorPWM@m^0,w,c
  2549   001710  6ED9               	movwf	fsr2l,c
  2550   001712  6ADA               	clrf	fsr2h,c
  2551   001714  0E01               	movlw	1
  2552   001716  26D9               	addwf	fsr2l,f,c
  2553   001718  50DF               	movf	indf2,w,c
  2554   00171A  B4D8               	btfsc	status,2,c
  2555   00171C  EF92  F00B         	goto	u361
  2556   001720  EF94  F00B         	goto	u360
  2557   001724                     u361:
  2558   001724  EFB4  F00B         	goto	l1286
  2559   001728                     u360:
  2560   001728                     
  2561                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  2562   001728  500E               	movf	setMotorPWM@m^0,w,c
  2563   00172A  6ED9               	movwf	fsr2l,c
  2564   00172C  6ADA               	clrf	fsr2h,c
  2565   00172E  0E05               	movlw	5
  2566   001730  26D9               	addwf	fsr2l,f,c
  2567   001732  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2568   001736  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2569   00173A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2570   00173E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2571   001742  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2572                           
  2573                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  2574   001746  500E               	movf	setMotorPWM@m^0,w,c
  2575   001748  6ED9               	movwf	fsr2l,c
  2576   00174A  6ADA               	clrf	fsr2h,c
  2577   00174C  0E07               	movlw	7
  2578   00174E  26D9               	addwf	fsr2l,f,c
  2579   001750  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2580   001754  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2581   001758  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2582   00175C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2583   001760  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2584                           
  2585                           ;dc_motor.c: 81:     } else {
  2586   001764  EFD2  F00B         	goto	l113
  2587   001768                     l1286:
  2588                           
  2589                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  2590   001768  500E               	movf	setMotorPWM@m^0,w,c
  2591   00176A  6ED9               	movwf	fsr2l,c
  2592   00176C  6ADA               	clrf	fsr2h,c
  2593   00176E  0E05               	movlw	5
  2594   001770  26D9               	addwf	fsr2l,f,c
  2595   001772  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2596   001776  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2597   00177A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2598   00177E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2599   001782  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2600                           
  2601                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  2602   001786  500E               	movf	setMotorPWM@m^0,w,c
  2603   001788  6ED9               	movwf	fsr2l,c
  2604   00178A  6ADA               	clrf	fsr2h,c
  2605   00178C  0E07               	movlw	7
  2606   00178E  26D9               	addwf	fsr2l,f,c
  2607   001790  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2608   001794  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2609   001798  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2610   00179C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2611   0017A0  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2612   0017A4                     l113:
  2613   0017A4  0012               	return		;funcret
  2614   0017A6                     __end_of_setMotorPWM:
  2615                           	callstack 0
  2616                           
  2617 ;; *************** function ___wmul *****************
  2618 ;; Defined at:
  2619 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  multiplier      2    0[COMRAM] unsigned int 
  2622 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  product         2    4[COMRAM] unsigned int 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  2    0[COMRAM] unsigned int 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0, prodl, prodh
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2637 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2638 ;;Total ram usage:        6 bytes
  2639 ;; Hardware stack levels used: 1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_setMotorPWM
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text9
  2648   001A6A                     __ptext9:
  2649                           	callstack 0
  2650   001A6A                     ___wmul:
  2651                           	callstack 28
  2652   001A6A  5001               	movf	___wmul@multiplier^0,w,c
  2653   001A6C  0203               	mulwf	___wmul@multiplicand^0,c
  2654   001A6E  CFF3 F005          	movff	prodl,___wmul@product
  2655   001A72  CFF4 F006          	movff	prodh,___wmul@product+1
  2656   001A76  5001               	movf	___wmul@multiplier^0,w,c
  2657   001A78  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2658   001A7A  50F3               	movf	243,w,c
  2659   001A7C  2606               	addwf	(___wmul@product+1)^0,f,c
  2660   001A7E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2661   001A80  0203               	mulwf	___wmul@multiplicand^0,c
  2662   001A82  50F3               	movf	243,w,c
  2663   001A84  2606               	addwf	(___wmul@product+1)^0,f,c
  2664   001A86  C005  F001         	movff	___wmul@product,?___wmul
  2665   001A8A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2666   001A8E  0012               	return		;funcret
  2667   001A90                     __end_of___wmul:
  2668                           	callstack 0
  2669                           
  2670 ;; *************** function ___lwdiv *****************
  2671 ;; Defined at:
  2672 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  dividend        2    6[COMRAM] unsigned int 
  2675 ;;  divisor         2    8[COMRAM] unsigned int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  quotient        2   10[COMRAM] unsigned int 
  2678 ;;  counter         1   12[COMRAM] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  2    6[COMRAM] unsigned int 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2692 ;;Total ram usage:        7 bytes
  2693 ;; Hardware stack levels used: 1
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_setMotorPWM
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text10
  2702   0019F6                     __ptext10:
  2703                           	callstack 0
  2704   0019F6                     ___lwdiv:
  2705                           	callstack 28
  2706   0019F6  0E00               	movlw	0
  2707   0019F8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2708   0019FA  0E00               	movlw	0
  2709   0019FC  6E0B               	movwf	___lwdiv@quotient^0,c
  2710   0019FE  5009               	movf	___lwdiv@divisor^0,w,c
  2711   001A00  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2712   001A02  B4D8               	btfsc	status,2,c
  2713   001A04  EF06  F00D         	goto	u321
  2714   001A08  EF08  F00D         	goto	u320
  2715   001A0C                     u321:
  2716   001A0C  EF30  F00D         	goto	l690
  2717   001A10                     u320:
  2718   001A10  0E01               	movlw	1
  2719   001A12  6E0D               	movwf	___lwdiv@counter^0,c
  2720   001A14  EF10  F00D         	goto	l1258
  2721   001A18                     l1256:
  2722   001A18  90D8               	bcf	status,0,c
  2723   001A1A  3609               	rlcf	___lwdiv@divisor^0,f,c
  2724   001A1C  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2725   001A1E  2A0D               	incf	___lwdiv@counter^0,f,c
  2726   001A20                     l1258:
  2727   001A20  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2728   001A22  EF15  F00D         	goto	u331
  2729   001A26  EF17  F00D         	goto	u330
  2730   001A2A                     u331:
  2731   001A2A  EF0C  F00D         	goto	l1256
  2732   001A2E                     u330:
  2733   001A2E                     l1260:
  2734   001A2E  90D8               	bcf	status,0,c
  2735   001A30  360B               	rlcf	___lwdiv@quotient^0,f,c
  2736   001A32  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2737   001A34  5009               	movf	___lwdiv@divisor^0,w,c
  2738   001A36  5C07               	subwf	___lwdiv@dividend^0,w,c
  2739   001A38  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2740   001A3A  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2741   001A3C  A0D8               	btfss	status,0,c
  2742   001A3E  EF23  F00D         	goto	u341
  2743   001A42  EF25  F00D         	goto	u340
  2744   001A46                     u341:
  2745   001A46  EF2A  F00D         	goto	l1268
  2746   001A4A                     u340:
  2747   001A4A  5009               	movf	___lwdiv@divisor^0,w,c
  2748   001A4C  5E07               	subwf	___lwdiv@dividend^0,f,c
  2749   001A4E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2750   001A50  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2751   001A52  800B               	bsf	___lwdiv@quotient^0,0,c
  2752   001A54                     l1268:
  2753   001A54  90D8               	bcf	status,0,c
  2754   001A56  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2755   001A58  3209               	rrcf	___lwdiv@divisor^0,f,c
  2756   001A5A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2757   001A5C  EF17  F00D         	goto	l1260
  2758   001A60                     l690:
  2759   001A60  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2760   001A64  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2761   001A68  0012               	return		;funcret
  2762   001A6A                     __end_of___lwdiv:
  2763                           	callstack 0
  2764                           
  2765                           	psect	smallconst
  2766   000E00                     __psmallconst:
  2767                           	callstack 0
  2768   000E00  00                 	db	0
  2769   000E01  00                 	db	0	; dummy byte at the end
  2770   000000                     
  2771                           	psect	rparam
  2772   000000                     
  2773                           	psect	config
  2774                           
  2775                           ;Config register CONFIG1L @ 0x300000
  2776                           ;	External Oscillator mode Selection bits
  2777                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2778                           ;	Power-up default value for COSC bits
  2779                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2780   300000                     	org	3145728
  2781   300000  AA                 	db	170
  2782                           
  2783                           ;Config register CONFIG1H @ 0x300001
  2784                           ;	unspecified, using default values
  2785                           ;	Clock Out Enable bit
  2786                           ;	CLKOUTEN = 0x1, unprogrammed default
  2787                           ;	Clock Switch Enable bit
  2788                           ;	CSWEN = 0x1, unprogrammed default
  2789                           ;	Fail-Safe Clock Monitor Enable bit
  2790                           ;	FCMEN = 0x1, unprogrammed default
  2791   300001                     	org	3145729
  2792   300001  FF                 	db	255
  2793                           
  2794                           ;Config register CONFIG3L @ 0x300004
  2795                           ;	WDT Period Select bits
  2796                           ;	WDTCPS = 0x1F, unprogrammed default
  2797                           ;	WDT operating mode
  2798                           ;	WDTE = OFF, WDT Disabled
  2799   300004                     	org	3145732
  2800   300004  9F                 	db	159
  2801                           
  2802                           ;Config register CONFIG3H @ 0x300005
  2803                           ;	unspecified, using default values
  2804                           ;	WDT Window Select bits
  2805                           ;	WDTCWS = 0x7, unprogrammed default
  2806                           ;	WDT input clock selector
  2807                           ;	WDTCCS = 0x7, unprogrammed default
  2808   300005                     	org	3145733
  2809   300005  FF                 	db	255
  2810                           tosu	equ	0xFFF
  2811                           tosh	equ	0xFFE
  2812                           tosl	equ	0xFFD
  2813                           stkptr	equ	0xFFC
  2814                           pclatu	equ	0xFFB
  2815                           pclath	equ	0xFFA
  2816                           pcl	equ	0xFF9
  2817                           tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           prodh	equ	0xFF4
  2822                           prodl	equ	0xFF3
  2823                           indf0	equ	0xFEF
  2824                           postinc0	equ	0xFEE
  2825                           postdec0	equ	0xFED
  2826                           preinc0	equ	0xFEC
  2827                           plusw0	equ	0xFEB
  2828                           fsr0h	equ	0xFEA
  2829                           fsr0l	equ	0xFE9
  2830                           wreg	equ	0xFE8
  2831                           indf1	equ	0xFE7
  2832                           postinc1	equ	0xFE6
  2833                           postdec1	equ	0xFE5
  2834                           preinc1	equ	0xFE4
  2835                           plusw1	equ	0xFE3
  2836                           fsr1h	equ	0xFE2
  2837                           fsr1l	equ	0xFE1
  2838                           bsr	equ	0xFE0
  2839                           indf2	equ	0xFDF
  2840                           postinc2	equ	0xFDE
  2841                           postdec2	equ	0xFDD
  2842                           preinc2	equ	0xFDC
  2843                           plusw2	equ	0xFDB
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      65
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(COMRAM[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), main@motorR(COMRAM[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_calibration
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   30954
                                             37 COMRAM    28    28      0
                        _calibration
                     _fullSpeedAhead
                    _initDCmotorsPWM
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             18 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseOneSquare                                    12     7      5    3357
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                      11     7      4    2901
                                             18 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   10951
                                             30 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                           12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                            12     7      5    4833
                                             18 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _reverseOneSquare
     _setMotorPWM
   _stop
     _setMotorPWM
   _turnLeft
   _turnRight

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     41      41       1       68.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhhhh     17      0       0      36        0.0%
BITBIGSFRllhhhh      5      0       0      37        0.0%
BITBIGSFRllhhlh      2      0       0      38        0.0%
BITBIGSFRllhhll      1      0       0      39        0.0%
BITBIGSFRllhl       54      0       0      40        0.0%
BITBIGSFRlllh        2      0       0      41        0.0%
BITBIGSFRllllh      6C      0       0      42        0.0%
BITBIGSFRlllllh     2B      0       0      43        0.0%
BITBIGSFRlllllh     11      0       0      44        0.0%
BITBIGSFRlllllh      1      0       0      45        0.0%
BITBIGSFRllllll      A      0       0      46        0.0%
BITBIGSFRllllll     7A      0       0      47        0.0%
ABS                  0      0       0      48        0.0%
BIGRAM             DE9      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 29 17:26:04 2024

                             l43 13B8              ___wmul@multiplicand 0003                 main@turnDuration 002D  
                            l113 17A4                              l121 1892                              l130 126A  
                            l106 19F4                              l132 128E                              l126 11FE  
                            l118 1854                              l135 1302                              l143 1048  
                            l152 114C                              l160 1918                              l138 1330  
                            l155 117A                              l147 10B4                              l164 1964  
                            l149 10D8                              l181 0FC4                              l173 0EEE  
                            l190 15EA                              l175 0F12                              l193 1628  
                            l185 15A2                              l169 0E82                              l194 1630  
                            l178 0F86                              l196 1650                              l189 15BE  
                            l199 1A8E                              l690 1A60                              l697 1A68  
                            u320 1A10                              u400 12A2                              u321 1A0C  
                            u401 129E                              u330 1A2E                              u410 1326  
                            u331 1A2A                              u411 1322                              u340 1A4A  
                            u420 106C                              u500 15E2                              u341 1A46  
                            u421 1068                              u501 15DE                              u350 166C  
                            u430 1094                              u510 15F8                              u351 1668  
                            u431 1090                              u511 15F4                              u360 1728  
                            u440 10D8                              u520 1622                              u600 0F26  
                            u361 1724                              u441 10D4                              u521 161E  
                            u601 0F22                              u370 1222                              u450 10EC  
                            u530 193C                              u610 0FAA                              u371 121E  
                            u451 10E8                              u531 1938                              u611 0FA6  
                            u380 124A                              u460 1170                              u540 1964  
                            u620 13C6                              u381 1246                              u461 116C  
                            u541 1960                              u621 13C2                              u390 128E  
                            u470 15B0                              u550 17F4                              u391 128A  
                            u471 15AC                              u551 17F0                              u480 15BE  
                            u560 1878                              u481 15BA                              u561 1874  
                            u490 15CC                              u570 0EA6                              u491 15C8  
                            u571 0EA2                              u707 0E74                              u580 0ECE  
                            u717 0EE0                              u581 0ECA                              u637 13D0  
                            u590 0F12                              u807 10A6                              u727 0F78  
                            u591 0F0E                              u647 1418                              u817 113E  
                            u737 190A                              u657 1448                              u827 11F0  
                            u747 150A                              u667 1474                              u837 125C  
                            u757 1540                              u677 149C                              u847 12F4  
                            u767 1576                              u687 14CC                              u777 1606  
                            u697 1846                              u787 163E                              u797 103A  
                            wreg 0FE8                             l1300 11EA                             l1310 1256  
                           l1302 11FA                             l1320 12D2                             l1312 1266  
                           l1304 1222                             l1400 19E8                             l1250 19F6  
                           l1330 1326                             l1322 12DA                             l1314 1294  
                           l1306 1226                             l1410 154E                             l1402 19F2  
                           l1260 1A2E                             l1252 19FE                             l1244 1A6A  
                           l1324 12E2                             l1308 124A                             l1340 1018  
                           l1420 15E4                             l1412 156C                             l1404 14E2  
                           l1500 0E62                             l1270 1A5A                             l1262 1A34  
                           l1254 1A10                             l1246 1A86                             l1326 12EE  
                           l1318 12A6                             l1350 106C                             l1342 1020  
                           l1334 0FC6                             l1430 1622                             l1422 15F8  
                           l1414 15B0                             l1406 1500                             l1510 0ECE  
                           l1502 0E6E                             l1264 1A4A                             l1256 1A18  
                           l1280 16D0                             l1272 1652                             l1328 12FE  
                           l1360 10DE                             l1344 1028                             l1352 1070  
                           l1336 0FE0                             l1424 15FA                             l1416 15CC  
                           l1408 1518                             l1520 0F2A                             l1512 0EDA  
                           l1504 0E7E                             l1600 13DE                             l1266 1A52  
                           l1258 1A20                             l1282 170E                             l1274 166C  
                           l1290 1196                             l1370 112C                             l1354 1094  
                           l1346 1034                             l1338 0FEC                             l1442 1634  
                           l1426 15FC                             l1418 15E2                             l1450 18BC  
                           l1530 0F82                             l1522 0F56                             l1514 0EEA  
                           l1506 0EA6                             l1610 1482                             l1602 13F6  
                           l1268 1A54                             l1284 1728                             l1276 16BA  
                           l1292 11A2                             l1372 1138                             l1364 10F0  
                           l1356 10A0                             l1348 1044                             l1444 164C  
                           l1428 1614                             l1460 1914                             l1452 18E8  
                           l1380 1966                             l1532 0FAA                             l1524 0F5E  
                           l1516 0F18                             l1508 0EAA                             l1612 14AA  
                           l1604 1426                             l1540 1332                             l1286 1768  
                           l1278 16CC                             l1294 11CE                             l1374 1148  
                           l1366 111C                             l1358 10B0                             l1462 193C  
                           l1454 18F0                             l1446 1894                             l1390 19CE  
                           l1382 1976                             l1526 0F66                             l1614 14C2  
                           l1606 143E                             l1550 1352                             l1542 133E  
                           l1296 11D6                             l1288 117C                             l1376 1170  
                           l1368 1124                             l1456 18F8                             l1464 1940  
                           l1448 18B0                             l1392 19D0                             l1384 199C  
                           l1528 0F72                             l1536 0FB4                             l1480 1840  
                           l1472 17F8                             l1608 146A                             l1560 136E  
                           l1552 135A                             l1544 1342                             l1298 11DE  
                           l1458 1904                             l1394 19DA                             l1386 19A0  
                           l1490 0E02                             l1482 1850                             l1474 1824  
                           l1466 17A6                             l1570 138E                             l1562 1372  
                           l1554 1362                             l1546 1346                             l1538 1332  
                           l1396 19DC                             l1388 19C4                             l1492 0E1A  
                           l1484 1878                             l1476 182C                             l1468 17E6  
                           l1580 13A2                             l1572 1392                             l1564 137A  
                           l1556 1366                             l1548 134A                             l1398 19E6  
                           l1494 0E26                             l1478 1834                             l1590 13AE  
                           l1582 13A6                             l1574 1396                             l1566 1382  
                           l1558 136A                             l1496 0E52                             l1488 1882  
                           l1592 13B0                             l1584 13A8                             l1576 139A  
                           l1568 138A                             l1498 0E5A                             l1594 13B4  
                           l1586 13AA                             l1578 139E                             l1596 13B6  
                           l1588 13AC                             l1598 13C6                             _T2PR 0FBC  
                           _main 1332                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             _stop 17A6                             prodh 0FF4  
                           prodl 0FF3                             start 0000              main@reverseDuration 0028  
                   ___param_bank 0000                            ?_main 0001                            ?_stop 0013  
                __end_of___lwdiv 1A6A                            stop@i 0019                            status 0FD8  
                   main@turnRamp 002C                  __initialization 1A90                     __end_of_main 14E2  
                   __end_of_stop 1894                           ??_main 0026                           ??_stop 0016  
                  __activetblptr 0000                    calibration@mL 001F                    calibration@mR 0020  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                           _RE2PPS 0E74  
                         _RC7PPS 0E69                           _RE4PPS 0E76                           _RG6PPS 0E88  
            calibration@turnRamp 0023          calibration@turnDuration 0022                     _CCPTMRS0bits 0FAD  
                         ___wmul 1A6A                        ??___lwdiv 000B                           isa$std 0001  
                   __mediumconst 0000                           stop@mL 0013                           stop@mR 0014  
              ??_initDCmotorsPWM 0003                 __end_of_turnLeft 1332                       __accesstop 0060  
        __end_of__initialization 1A90                  fullSpeedAhead@i 001A                    main@turnSpeed 002B  
                  ___rparam_used 0001                   __pcstackCOMRAM 0001                 _reverseOneSquare 0E02  
                   _T2CLKCONbits 0FBF                          ?___wmul 0001       fullSpeedAhead@straightRamp 0016  
          turnRight@turnDuration 0016                          __Hparam 0000                          __Lparam 0000  
           calibration@turnSpeed 0021                    ??_calibration 0024                          ___lwdiv 19F6  
                   __psmallconst 0E00                          __pcinit 1A90                          __ramtop 0E00  
                      ?_turnLeft 0013                          __ptext0 1332                          __ptext1 17A6  
                        __ptext2 0E02                          __ptext3 1966                          __ptext4 1894  
                        __ptext5 14E2                          __ptext6 0FC6                          __ptext7 117C  
                        __ptext8 1652                          __ptext9 1A6A                        _T2CONbits 0FBD  
                      _T2HLTbits 0FBE             end_of_initialization 1A90                reverseOneSquare@i 001B  
                        postdec2 0FDD                          postinc2 0FDE                  _initDCmotorsPWM 1966  
                     ??_turnLeft 0018                        _PORTFbits 0F8E               setMotorPWM@negDuty 0012  
              __end_of_turnRight 117C              __end_of_calibration 1652               setMotorPWM@posDuty 0011  
                      _TRISCbits 0F83                        _TRISDbits 0F84                        _TRISEbits 0F85  
                      _TRISFbits 0F86                        _TRISGbits 0F87                        _TRISHbits 0F88  
               fullSpeedAhead@mL 0013                 fullSpeedAhead@mR 0014         __end_of_reverseOneSquare 0FC6  
                  stop@cur_power 001B                      _CCP1CONbits 0FAB                      _CCP2CONbits 0FA7  
                    _CCP3CONbits 0F26                      _CCP4CONbits 0F22                       main@motorL 0038  
                     main@motorR 002E                   _fullSpeedAhead 1894             turnLeft@turnDuration 0016  
                 __end_of___wmul 1A90              start_initialization 1A90          __end_of_initDCmotorsPWM 19F6  
         __end_of_fullSpeedAhead 1966               turnRight@cur_power 001D                         ??___wmul 0005  
                    _calibration 14E2     reverseOneSquare@straightRamp 0017                turnLeft@cur_power 001D  
               stop@straightRamp 0015                 ___lwdiv@dividend 0007                  ?_fullSpeedAhead 0013  
             turnRight@turnSpeed 0015                         ?___lwdiv 0007                      __smallconst 0E00  
              turnLeft@turnSpeed 0015                    ??_setMotorPWM 000F                 ___lwdiv@quotient 000B  
       initDCmotorsPWM@PWMperiod 0001                   ___wmul@product 0005                         _LATCbits 0F7B  
                       _LATDbits 0F7C                         _LATEbits 0F7D                         _LATGbits 0F7F  
                       _LATHbits 0F80                      turnRight@mL 0013                      turnRight@mR 0014  
               ?_initDCmotorsPWM 0001      fullSpeedAhead@straightSpeed 0015                ___wmul@multiplier 0001  
                   setMotorPWM@m 000E                        _turnRight 0FC6                ?_reverseOneSquare 0013  
            __end_of_setMotorPWM 17A6  reverseOneSquare@reverseDuration 0016               ??_reverseOneSquare 0018  
                       __Hrparam 0000                         __Lrparam 0000                       _ANSELFbits 0EB4  
  reverseOneSquare@straightSpeed 0015                  ___lwdiv@divisor 0009                  ___lwdiv@counter 000D  
              turnRight@turnRamp 0017                       ?_turnRight 0013                         __ptext10 19F6  
               turnLeft@turnRamp 0017                       turnLeft@mL 0013                       turnLeft@mR 0014  
                     turnRight@i 001B                         isa$xinst 0000                     ?_calibration 001F  
                       _turnLeft 117C          fullSpeedAhead@cur_power 001C        reverseOneSquare@cur_power 001D  
             reverseOneSquare@mL 0013               reverseOneSquare@mR 0014                      _setMotorPWM 1652  
               ??_fullSpeedAhead 0017                        turnLeft@i 001B                main@straightSpeed 0029  
                    ??_turnRight 0018                 main@straightRamp 002A  
