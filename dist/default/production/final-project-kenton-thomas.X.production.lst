

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 17:24:54 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Generated 21/07/2023 GMT
    70                           ; 
    71                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TRISCbits	set	3971
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _SP4BRGL	set	3813
   107   000000                     _TX4STAbits	set	3816
   108   000000                     _BAUD4CONbits	set	3817
   109   000000                     _TX4REG	set	3812
   110   000000                     _TRISBbits	set	3970
   111   000000                     _TRISAbits	set	3969
   112   000000                     _TRISEbits	set	3973
   113   000000                     _TRISGbits	set	3975
   114   000000                     _LATFbits	set	3966
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISHbits	set	3976
   117   000000                     _TRISDbits	set	3972
   118   000000                     _LATEbits	set	3965
   119   000000                     _LATGbits	set	3967
   120   000000                     _LATHbits	set	3968
   121   000000                     _SSP2CON2bits	set	3802
   122   000000                     _RX4PPS	set	3605
   123   000000                     _SSP2CLKPPS	set	3612
   124   000000                     _SSP2DATPPS	set	3613
   125   000000                     _ANSELDbits	set	3751
   126   000000                     _SSP2ADD	set	3798
   127   000000                     _SSP2CON1bits	set	3801
   128   000000                     _CCPR4H	set	3873
   129   000000                     _CCPR3H	set	3877
   130   000000                     _CCPR2H	set	4006
   131   000000                     _CCPR1H	set	4010
   132   000000                     _CCP1CONbits	set	4011
   133   000000                     _CCPTMRS0bits	set	4013
   134   000000                     _T2PR	set	4028
   135   000000                     _T2CONbits	set	4029
   136   000000                     _INTCONbits	set	4082
   137   000000                     _CCP2CONbits	set	4007
   138   000000                     _CCP3CONbits	set	3878
   139   000000                     _ADREFbits	set	3928
   140   000000                     _LATAbits	set	3961
   141   000000                     _LATDbits	set	3964
   142   000000                     _PORTFbits	set	3982
   143   000000                     _CCP4CONbits	set	3874
   144   000000                     _LATCbits	set	3963
   145   000000                     _RC4REG	set	3811
   146   000000                     _SSP2CON2	set	3802
   147   000000                     _SSP2STAT	set	3800
   148   000000                     _ANSELFbits	set	3764
   149   000000                     _SSP2BUF	set	3797
   150   000000                     _IPR0bits	set	3615
   151   000000                     _PIE0bits	set	3625
   152   000000                     _RD5PPS	set	3695
   153   000000                     _RE2PPS	set	3700
   154   000000                     _ANSELBbits	set	3738
   155   000000                     _RD6PPS	set	3696
   156   000000                     _PIE4bits	set	3629
   157   000000                     _PIR0bits	set	3635
   158   000000                     _PIR4bits	set	3639
   159   000000                     _RC0PPS	set	3682
   160   000000                     _RC7PPS	set	3689
   161   000000                     _ADPCH	set	3935
   162   000000                     _ADRESH	set	3940
   163   000000                     _ADCON0bits	set	3936
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _T2CLKCONbits	set	4031
   167   000000                     _T2HLTbits	set	4030
   168                           
   169                           	psect	smallconst
   170   000E00                     __psmallconst:
   171                           	callstack 0
   172   000E00  00                 	db	0
   173   000E01                     STR_3:
   174   000E01  72                 	db	114	;'r'
   175   000E02  3D                 	db	61	;'='
   176   000E03  25                 	db	37
   177   000E04  64                 	db	100	;'d'
   178   000E05  20                 	db	32
   179   000E06  67                 	db	103	;'g'
   180   000E07  3D                 	db	61	;'='
   181   000E08  25                 	db	37
   182   000E09  64                 	db	100	;'d'
   183   000E0A  20                 	db	32
   184   000E0B  62                 	db	98	;'b'
   185   000E0C  3D                 	db	61	;'='
   186   000E0D  25                 	db	37
   187   000E0E  64                 	db	100	;'d'
   188   000E0F  20                 	db	32
   189   000E10  63                 	db	99	;'c'
   190   000E11  3D                 	db	61	;'='
   191   000E12  25                 	db	37
   192   000E13  64                 	db	100	;'d'
   193   000E14  20                 	db	32
   194   000E15  20                 	db	32
   195   000E16  20                 	db	32
   196   000E17  6E                 	db	110	;'n'
   197   000E18  3A                 	db	58	;':'
   198   000E19  20                 	db	32
   199   000E1A  72                 	db	114	;'r'
   200   000E1B  3D                 	db	61	;'='
   201   000E1C  25                 	db	37
   202   000E1D  64                 	db	100	;'d'
   203   000E1E  20                 	db	32
   204   000E1F  67                 	db	103	;'g'
   205   000E20  3D                 	db	61	;'='
   206   000E21  25                 	db	37
   207   000E22  64                 	db	100	;'d'
   208   000E23  20                 	db	32
   209   000E24  62                 	db	98	;'b'
   210   000E25  3D                 	db	61	;'='
   211   000E26  25                 	db	37
   212   000E27  64                 	db	100	;'d'
   213   000E28  20                 	db	32
   214   000E29  20                 	db	32
   215   000E2A  63                 	db	99	;'c'
   216   000E2B  6F                 	db	111	;'o'
   217   000E2C  6C                 	db	108	;'l'
   218   000E2D  6F                 	db	111	;'o'
   219   000E2E  72                 	db	114	;'r'
   220   000E2F  3A                 	db	58	;':'
   221   000E30  20                 	db	32
   222   000E31  25                 	db	37
   223   000E32  64                 	db	100	;'d'
   224   000E33  20                 	db	32
   225   000E34  0D                 	db	13
   226   000E35  0A                 	db	10
   227   000E36  00                 	db	0
   228   000E37                     STR_5:
   229   000E37  72                 	db	114	;'r'
   230   000E38  3D                 	db	61	;'='
   231   000E39  25                 	db	37
   232   000E3A  64                 	db	100	;'d'
   233   000E3B  20                 	db	32
   234   000E3C  67                 	db	103	;'g'
   235   000E3D  3D                 	db	61	;'='
   236   000E3E  25                 	db	37
   237   000E3F  64                 	db	100	;'d'
   238   000E40  20                 	db	32
   239   000E41  62                 	db	98	;'b'
   240   000E42  3D                 	db	61	;'='
   241   000E43  25                 	db	37
   242   000E44  64                 	db	100	;'d'
   243   000E45  20                 	db	32
   244   000E46  63                 	db	99	;'c'
   245   000E47  3D                 	db	61	;'='
   246   000E48  25                 	db	37
   247   000E49  64                 	db	100	;'d'
   248   000E4A  20                 	db	32
   249   000E4B  20                 	db	32
   250   000E4C  20                 	db	32
   251   000E4D  6E                 	db	110	;'n'
   252   000E4E  3A                 	db	58	;':'
   253   000E4F  20                 	db	32
   254   000E50  72                 	db	114	;'r'
   255   000E51  3D                 	db	61	;'='
   256   000E52  25                 	db	37
   257   000E53  64                 	db	100	;'d'
   258   000E54  20                 	db	32
   259   000E55  67                 	db	103	;'g'
   260   000E56  3D                 	db	61	;'='
   261   000E57  25                 	db	37
   262   000E58  64                 	db	100	;'d'
   263   000E59  20                 	db	32
   264   000E5A  62                 	db	98	;'b'
   265   000E5B  3D                 	db	61	;'='
   266   000E5C  25                 	db	37
   267   000E5D  64                 	db	100	;'d'
   268   000E5E  20                 	db	32
   269   000E5F  0D                 	db	13
   270   000E60  0A                 	db	10
   271   000E61  00                 	db	0
   272   000E62                     STR_1:
   273   000E62  63                 	db	99	;'c'
   274   000E63  3D                 	db	61	;'='
   275   000E64  25                 	db	37
   276   000E65  64                 	db	100	;'d'
   277   000E66  20                 	db	32
   278   000E67  0D                 	db	13
   279   000E68  0A                 	db	10
   280   000E69  00                 	db	0
   281   000E6A  00                 	db	0	; dummy byte at the end
   282   000000                     
   283                           ; #config settings
   284                           
   285                           	psect	cinit
   286   002EF4                     __pcinit:
   287                           	callstack 0
   288   002EF4                     start_initialization:
   289                           	callstack 0
   290   002EF4                     __initialization:
   291                           	callstack 0
   292                           
   293                           ; Clear objects allocated to BANK1 (132 bytes)
   294   002EF4  EE01  F000         	lfsr	0,__pbssBANK1
   295   002EF8  0E84               	movlw	132
   296   002EFA                     clear_0:
   297   002EFA  6AEE               	clrf	postinc0,c
   298   002EFC  06E8               	decf	wreg,f,c
   299   002EFE  E1FD               	bnz	clear_0
   300                           
   301                           ; Clear objects allocated to COMRAM (29 bytes)
   302   002F00  EE00  F03D         	lfsr	0,__pbssCOMRAM
   303   002F04  0E1D               	movlw	29
   304   002F06                     clear_1:
   305   002F06  6AEE               	clrf	postinc0,c
   306   002F08  06E8               	decf	wreg,f,c
   307   002F0A  E1FD               	bnz	clear_1
   308   002F0C                     end_of_initialization:
   309                           	callstack 0
   310   002F0C                     __end_of__initialization:
   311                           	callstack 0
   312   002F0C  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   313   002F0E  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   314   002F10  0E00               	movlw	low (__Lmediumconst shr (0+16))
   315   002F12  6EF8               	movwf	tblptru,c
   316   002F14  0100               	movlb	0
   317   002F16  EF71  F00B         	goto	_main	;jump to C main() function
   318                           
   319                           	psect	bssCOMRAM
   320   00003D                     __pbssCOMRAM:
   321                           	callstack 0
   322   00003D                     _EUSART4RXbuf:
   323                           	callstack 0
   324   00003D                     	ds	20
   325   000051                     _width:
   326                           	callstack 0
   327   000051                     	ds	2
   328   000053                     _prec:
   329                           	callstack 0
   330   000053                     	ds	2
   331   000055                     _flags:
   332                           	callstack 0
   333   000055                     	ds	1
   334   000056                     _TxBufReadCnt:
   335                           	callstack 0
   336   000056                     	ds	1
   337   000057                     _TxBufWriteCnt:
   338                           	callstack 0
   339   000057                     	ds	1
   340   000058                     _RxBufReadCnt:
   341                           	callstack 0
   342   000058                     	ds	1
   343   000059                     _RxBufWriteCnt:
   344                           	callstack 0
   345   000059                     	ds	1
   346                           
   347                           	psect	bssBANK1
   348   000100                     __pbssBANK1:
   349                           	callstack 0
   350   000100                     _EUSART4TXbuf:
   351                           	callstack 0
   352   000100                     	ds	60
   353   00013C                     	ds	40
   354   000164                     _dbuf:
   355                           	callstack 0
   356   000164                     	ds	32
   357                           
   358                           	psect	cstackBANK0
   359   000060                     __pcstackBANK0:
   360                           	callstack 0
   361   000060                     ??_main:
   362                           
   363                           ; 1 bytes @ 0x0
   364   000060                     	ds	2
   365   000062                     main@buf:
   366                           	callstack 0
   367                           
   368                           ; 40 bytes @ 0x2
   369   000062                     	ds	40
   370   00008A                     main@reverseDuration:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x2A
   374   00008A                     	ds	1
   375   00008B                     main@turnSpeed:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x2B
   379   00008B                     	ds	1
   380   00008C                     main@turnDuration:
   381                           	callstack 0
   382                           
   383                           ; 1 bytes @ 0x2C
   384   00008C                     	ds	1
   385   00008D                     main@turnRamp:
   386                           	callstack 0
   387                           
   388                           ; 1 bytes @ 0x2D
   389   00008D                     	ds	1
   390   00008E                     main@red:
   391                           	callstack 0
   392                           
   393                           ; 6 bytes @ 0x2E
   394   00008E                     	ds	6
   395   000094                     main@green:
   396                           	callstack 0
   397                           
   398                           ; 6 bytes @ 0x34
   399   000094                     	ds	6
   400   00009A                     main@blue:
   401                           	callstack 0
   402                           
   403                           ; 6 bytes @ 0x3A
   404   00009A                     	ds	6
   405   0000A0                     main@yellow:
   406                           	callstack 0
   407                           
   408                           ; 6 bytes @ 0x40
   409   0000A0                     	ds	6
   410   0000A6                     main@pink:
   411                           	callstack 0
   412                           
   413                           ; 6 bytes @ 0x46
   414   0000A6                     	ds	6
   415   0000AC                     main@orange:
   416                           	callstack 0
   417                           
   418                           ; 6 bytes @ 0x4C
   419   0000AC                     	ds	6
   420   0000B2                     main@lightblue:
   421                           	callstack 0
   422                           
   423                           ; 6 bytes @ 0x52
   424   0000B2                     	ds	6
   425   0000B8                     main@white:
   426                           	callstack 0
   427                           
   428                           ; 6 bytes @ 0x58
   429   0000B8                     	ds	6
   430   0000BE                     main@straightSpeed:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x5E
   434   0000BE                     	ds	1
   435   0000BF                     main@color:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0x5F
   439   0000BF                     	ds	1
   440   0000C0                     main@straightRamp:
   441                           	callstack 0
   442                           
   443                           ; 1 bytes @ 0x60
   444   0000C0                     	ds	1
   445   0000C1                     main@RGBC_n:
   446                           	callstack 0
   447                           
   448                           ; 8 bytes @ 0x61
   449   0000C1                     	ds	8
   450   0000C9                     main@motorR:
   451                           	callstack 0
   452                           
   453                           ; 10 bytes @ 0x69
   454   0000C9                     	ds	10
   455   0000D3                     main@motorL:
   456                           	callstack 0
   457                           
   458                           ; 10 bytes @ 0x73
   459   0000D3                     	ds	10
   460   0000DD                     main@RGBC:
   461                           	callstack 0
   462                           
   463                           ; 8 bytes @ 0x7D
   464   0000DD                     	ds	8
   465                           
   466                           	psect	cstackCOMRAM
   467   000001                     __pcstackCOMRAM:
   468                           	callstack 0
   469   000001                     ??_getCharFromTxBuf:
   470   000001                     ??i2_I2C_2_Master_Idle:
   471   000001                     putCharToRxBuf@byte:
   472                           	callstack 0
   473   000001                     
   474                           ; 1 bytes @ 0x0
   475   000001                     	ds	1
   476   000002                     i2I2C_2_Master_Write@data_byte:
   477                           	callstack 0
   478                           
   479                           ; 1 bytes @ 0x1
   480   000002                     	ds	1
   481   000003                     ??_HighISR:
   482                           
   483                           ; 1 bytes @ 0x2
   484   000003                     	ds	2
   485   000005                     ??_I2C_2_Master_Idle:
   486   000005                     ?___wmul:
   487                           	callstack 0
   488   000005                     ?___awdiv:
   489                           	callstack 0
   490   000005                     ?___awmod:
   491                           	callstack 0
   492   000005                     ?___lmul:
   493                           	callstack 0
   494   000005                     white_Light@state:
   495                           	callstack 0
   496   000005                     putCharToTxBuf@byte:
   497                           	callstack 0
   498   000005                     ADC_getval@tmpval:
   499                           	callstack 0
   500   000005                     initDCmotorsPWM@PWMperiod:
   501                           	callstack 0
   502   000005                     ___wmul@multiplier:
   503                           	callstack 0
   504   000005                     ___awdiv@dividend:
   505                           	callstack 0
   506   000005                     ___awmod@dividend:
   507                           	callstack 0
   508   000005                     fputc@c:
   509                           	callstack 0
   510   000005                     ___lmul@multiplier:
   511                           	callstack 0
   512   000005                     color_detect@RGBC_n:
   513                           	callstack 0
   514                           
   515                           ; 8 bytes @ 0x4
   516   000005                     	ds	1
   517   000006                     ??_I2C_2_Master_Read:
   518   000006                     I2C_2_Master_Write@data_byte:
   519                           	callstack 0
   520   000006                     TxBufferedString@string:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x5
   524   000006                     	ds	1
   525   000007                     color_writetoaddr@value:
   526                           	callstack 0
   527   000007                     I2C_2_Master_Read@ack:
   528                           	callstack 0
   529   000007                     fputc@fp:
   530                           	callstack 0
   531   000007                     ___wmul@multiplicand:
   532                           	callstack 0
   533   000007                     ___awdiv@divisor:
   534                           	callstack 0
   535   000007                     ___awmod@divisor:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x6
   539   000007                     	ds	1
   540   000008                     ??_fputc:
   541   000008                     color_writetoaddr@address:
   542                           	callstack 0
   543   000008                     I2C_2_Master_Read@tmp:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x7
   547   000008                     	ds	1
   548   000009                     ??_color_click_init:
   549   000009                     color_read@RGBC:
   550                           	callstack 0
   551   000009                     ___awdiv@counter:
   552                           	callstack 0
   553   000009                     ___awmod@counter:
   554                           	callstack 0
   555   000009                     ___wmul@product:
   556                           	callstack 0
   557   000009                     ___lmul@multiplicand:
   558                           	callstack 0
   559                           
   560                           ; 4 bytes @ 0x8
   561   000009                     	ds	1
   562   00000A                     ??_color_read:
   563   00000A                     ___awdiv@sign:
   564                           	callstack 0
   565   00000A                     ___awmod@sign:
   566                           	callstack 0
   567                           
   568                           ; 1 bytes @ 0x9
   569   00000A                     	ds	1
   570   00000B                     ?_abs:
   571                           	callstack 0
   572   00000B                     ?___lwdiv:
   573                           	callstack 0
   574   00000B                     ___awdiv@quotient:
   575                           	callstack 0
   576   00000B                     ___lwdiv@dividend:
   577                           	callstack 0
   578   00000B                     abs@a:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0xA
   582   00000B                     	ds	2
   583   00000D                     ??_abs:
   584   00000D                     batteryLevel@batteryVoltage:
   585                           	callstack 0
   586   00000D                     ___lwdiv@divisor:
   587                           	callstack 0
   588   00000D                     ___lmul@product:
   589                           	callstack 0
   590                           
   591                           ; 4 bytes @ 0xC
   592   00000D                     	ds	1
   593   00000E                     batteryLevel@batteryQuarter:
   594                           	callstack 0
   595                           
   596                           ; 1 bytes @ 0xD
   597   00000E                     	ds	1
   598   00000F                     vfpfcnvrt@fp:
   599                           	callstack 0
   600   00000F                     ___lwdiv@quotient:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0xE
   604   00000F                     	ds	1
   605   000010                     vfpfcnvrt@fmt:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0xF
   609   000010                     	ds	1
   610   000011                     ?___aldiv:
   611                           	callstack 0
   612   000011                     ___lwdiv@counter:
   613                           	callstack 0
   614   000011                     vfpfcnvrt@ap:
   615                           	callstack 0
   616   000011                     ___aldiv@dividend:
   617                           	callstack 0
   618                           
   619                           ; 4 bytes @ 0x10
   620   000011                     	ds	1
   621   000012                     ??_vfpfcnvrt:
   622   000012                     setMotorPWM@m:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x11
   626   000012                     	ds	1
   627   000013                     ??_setMotorPWM:
   628   000013                     vfpfcnvrt@done:
   629                           	callstack 0
   630                           
   631                           ; 1 bytes @ 0x12
   632   000013                     	ds	1
   633   000014                     vfpfcnvrt@cp:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x13
   637   000014                     	ds	1
   638   000015                     setMotorPWM@posDuty:
   639                           	callstack 0
   640   000015                     ___aldiv@divisor:
   641                           	callstack 0
   642   000015                     vfpfcnvrt@convarg:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x14
   646   000015                     	ds	1
   647   000016                     setMotorPWM@negDuty:
   648                           	callstack 0
   649                           
   650                           ; 1 bytes @ 0x15
   651   000016                     	ds	1
   652   000017                     stop@mL:
   653                           	callstack 0
   654   000017                     turnLeft@mL:
   655                           	callstack 0
   656   000017                     turnRight@mL:
   657                           	callstack 0
   658   000017                     fullSpeedAhead@mL:
   659                           	callstack 0
   660   000017                     reverseOneSquare@mL:
   661                           	callstack 0
   662                           
   663                           ; 1 bytes @ 0x16
   664   000017                     	ds	1
   665   000018                     stop@mR:
   666                           	callstack 0
   667   000018                     turnLeft@mR:
   668                           	callstack 0
   669   000018                     turnRight@mR:
   670                           	callstack 0
   671   000018                     fullSpeedAhead@mR:
   672                           	callstack 0
   673   000018                     reverseOneSquare@mR:
   674                           	callstack 0
   675                           
   676                           ; 1 bytes @ 0x17
   677   000018                     	ds	1
   678   000019                     stop@straightRamp:
   679                           	callstack 0
   680   000019                     turnLeft@turnSpeed:
   681                           	callstack 0
   682   000019                     turnRight@turnSpeed:
   683                           	callstack 0
   684   000019                     fullSpeedAhead@straightSpeed:
   685                           	callstack 0
   686   000019                     reverseOneSquare@straightSpeed:
   687                           	callstack 0
   688   000019                     ___aldiv@counter:
   689                           	callstack 0
   690   000019                     vfpfcnvrt@c:
   691                           	callstack 0
   692                           
   693                           ; 1 bytes @ 0x18
   694   000019                     	ds	1
   695   00001A                     ??_stop:
   696   00001A                     ?_vfprintf:
   697                           	callstack 0
   698   00001A                     turnLeft@turnDuration:
   699                           	callstack 0
   700   00001A                     turnRight@turnDuration:
   701                           	callstack 0
   702   00001A                     fullSpeedAhead@straightRamp:
   703                           	callstack 0
   704   00001A                     reverseOneSquare@reverseDuration:
   705                           	callstack 0
   706   00001A                     ___aldiv@sign:
   707                           	callstack 0
   708   00001A                     vfprintf@fp:
   709                           	callstack 0
   710                           
   711                           ; 1 bytes @ 0x19
   712   00001A                     	ds	1
   713   00001B                     ??_fullSpeedAhead:
   714   00001B                     turnLeft@turnRamp:
   715                           	callstack 0
   716   00001B                     turnRight@turnRamp:
   717                           	callstack 0
   718   00001B                     reverseOneSquare@straightRamp:
   719                           	callstack 0
   720   00001B                     vfprintf@fmt:
   721                           	callstack 0
   722   00001B                     ___aldiv@quotient:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x1A
   726   00001B                     	ds	1
   727   00001C                     ??_turnRight:
   728   00001C                     ??_turnLeft:
   729   00001C                     ??_reverseOneSquare:
   730   00001C                     vfprintf@ap:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x1B
   734   00001C                     	ds	1
   735   00001D                     vfprintf@cfmt:
   736                           	callstack 0
   737   00001D                     stop@i:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x1C
   741   00001D                     	ds	1
   742   00001E                     ?_sprintf:
   743                           	callstack 0
   744   00001E                     sprintf@s:
   745                           	callstack 0
   746   00001E                     fullSpeedAhead@i:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x1D
   750   00001E                     	ds	1
   751   00001F                     sprintf@fmt:
   752                           	callstack 0
   753   00001F                     stop@cur_power:
   754                           	callstack 0
   755   00001F                     turnLeft@i:
   756                           	callstack 0
   757   00001F                     turnRight@i:
   758                           	callstack 0
   759   00001F                     reverseOneSquare@i:
   760                           	callstack 0
   761   00001F                     color_normalise@RGBC:
   762                           	callstack 0
   763                           
   764                           ; 8 bytes @ 0x1E
   765   00001F                     	ds	1
   766   000020                     fullSpeedAhead@cur_power:
   767                           	callstack 0
   768                           
   769                           ; 2 bytes @ 0x1F
   770   000020                     	ds	1
   771   000021                     turnLeft@cur_power:
   772                           	callstack 0
   773   000021                     turnRight@cur_power:
   774                           	callstack 0
   775   000021                     reverseOneSquare@cur_power:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x20
   779   000021                     	ds	2
   780   000023                     move@mL:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x22
   784   000023                     	ds	1
   785   000024                     move@mR:
   786                           	callstack 0
   787                           
   788                           ; 1 bytes @ 0x23
   789   000024                     	ds	1
   790   000025                     move@color:
   791                           	callstack 0
   792                           
   793                           ; 1 bytes @ 0x24
   794   000025                     	ds	1
   795   000026                     move@straightSpeed:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x25
   799   000026                     	ds	1
   800   000027                     color_normalise@RGBC_n:
   801                           	callstack 0
   802   000027                     move@reverseDuration:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x26
   806   000027                     	ds	1
   807   000028                     ??_color_normalise:
   808   000028                     move@straightRamp:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0x27
   812   000028                     	ds	1
   813   000029                     move@turnSpeed:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x28
   817   000029                     	ds	1
   818   00002A                     color_calibration@RGBC:
   819                           	callstack 0
   820   00002A                     move@turnDuration:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x29
   824   00002A                     	ds	1
   825   00002B                     color_calibration@RGBC_n:
   826                           	callstack 0
   827   00002B                     move@turnRamp:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x2A
   831   00002B                     	ds	1
   832   00002C                     ??_move:
   833   00002C                     color_calibration@red:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x2B
   837   00002C                     	ds	1
   838   00002D                     color_calibration@green:
   839                           	callstack 0
   840                           
   841                           ; 1 bytes @ 0x2C
   842   00002D                     	ds	1
   843   00002E                     color_calibration@blue:
   844                           	callstack 0
   845                           
   846                           ; 1 bytes @ 0x2D
   847   00002E                     	ds	1
   848   00002F                     color_calibration@yellow:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x2E
   852   00002F                     	ds	1
   853   000030                     color_calibration@pink:
   854                           	callstack 0
   855   000030                     sprintf@ap:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x2F
   859   000030                     	ds	1
   860   000031                     color_calibration@orange:
   861                           	callstack 0
   862   000031                     sprintf@f:
   863                           	callstack 0
   864                           
   865                           ; 12 bytes @ 0x30
   866   000031                     	ds	1
   867   000032                     color_calibration@lightblue:
   868                           	callstack 0
   869                           
   870                           ; 1 bytes @ 0x31
   871   000032                     	ds	1
   872   000033                     color_calibration@white:
   873                           	callstack 0
   874                           
   875                           ; 1 bytes @ 0x32
   876   000033                     	ds	1
   877   000034                     ??_color_calibration:
   878                           
   879                           ; 1 bytes @ 0x33
   880   000034                     	ds	9
   881                           
   882 ;;
   883 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   884 ;;
   885 ;; *************** function _main *****************
   886 ;; Defined at:
   887 ;;		line 23 in file "main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  buf            40    2[BANK0 ] unsigned char [40]
   892 ;;  motorL         10  115[BANK0 ] struct DC_motor
   893 ;;  motorR         10  105[BANK0 ] struct DC_motor
   894 ;;  RGBC            8  125[BANK0 ] struct RGBC_val
   895 ;;  RGBC_n          8   97[BANK0 ] struct RGBC_val
   896 ;;  white           6   88[BANK0 ] struct RGB_calib
   897 ;;  lightblue       6   82[BANK0 ] struct RGB_calib
   898 ;;  orange          6   76[BANK0 ] struct RGB_calib
   899 ;;  pink            6   70[BANK0 ] struct RGB_calib
   900 ;;  yellow          6   64[BANK0 ] struct RGB_calib
   901 ;;  blue            6   58[BANK0 ] struct RGB_calib
   902 ;;  green           6   52[BANK0 ] struct RGB_calib
   903 ;;  red             6   46[BANK0 ] struct RGB_calib
   904 ;;  PWMcycle        2    0        unsigned int 
   905 ;;  ambient         2    0        unsigned int 
   906 ;;  straightRamp    1   96[BANK0 ] unsigned char 
   907 ;;  color           1   95[BANK0 ] unsigned char 
   908 ;;  straightSpee    1   94[BANK0 ] unsigned char 
   909 ;;  turnRamp        1   45[BANK0 ] unsigned char 
   910 ;;  turnDuration    1   44[BANK0 ] unsigned char 
   911 ;;  turnSpeed       1   43[BANK0 ] unsigned char 
   912 ;;  reverseDurat    1   42[BANK0 ] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   923 ;;      Locals:         0     131       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   925 ;;      Totals:         0     133       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;Total ram usage:      133 bytes
   927 ;; Hardware stack levels required when called: 8
   928 ;; This function calls:
   929 ;;		_Buggy_init
   930 ;;		_Interrupts_init
   931 ;;		_TxBufferedString
   932 ;;		_batteryLevel
   933 ;;		_color_calibration
   934 ;;		_color_click_init
   935 ;;		_color_detect
   936 ;;		_color_normalise
   937 ;;		_color_read
   938 ;;		_fullSpeedAhead
   939 ;;		_initDCmotorsPWM
   940 ;;		_initUSART4
   941 ;;		_move
   942 ;;		_sendTxBuf
   943 ;;		_sprintf
   944 ;;		_stop
   945 ;;		_white_Light
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text0
   952   0016E2                     __ptext0:
   953                           	callstack 0
   954   0016E2                     _main:
   955                           	callstack 23
   956   0016E2                     
   957                           ;main.c: 24:     Buggy_init();
   958   0016E2  ECC3  F016         	call	_Buggy_init	;wreg free
   959   0016E6                     
   960                           ;main.c: 25:     color_click_init();
   961   0016E6  ECF8  F015         	call	_color_click_init	;wreg free
   962   0016EA                     
   963                           ;main.c: 26:     Interrupts_init();
   964   0016EA  EC22  F018         	call	_Interrupts_init	;wreg free
   965   0016EE                     
   966                           ;main.c: 27:     initUSART4();
   967   0016EE  ECD5  F017         	call	_initUSART4	;wreg free
   968   0016F2                     
   969                           ;main.c: 28:     char buf[40] = {0};
   970   0016F2  EE20  F062         	lfsr	2,main@buf
   971   0016F6  0E27               	movlw	39
   972   0016F8                     u2431:
   973   0016F8  6ADE               	clrf	postinc2,c
   974   0016FA  06E8               	decf	wreg,f,c
   975   0016FC  E2FD               	bc	u2431
   976   0016FE                     
   977                           ;main.c: 30:     initDCmotorsPWM(PWMcycle);
   978   0016FE  0E00               	movlw	0
   979   001700  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   980   001702  0EC7               	movlw	199
   981   001704  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   982   001706  EC41  F015         	call	_initDCmotorsPWM	;wreg free
   983   00170A                     
   984                           ;main.c: 31:     struct RGBC_val RGBC, RGBC_n;;main.c: 32:     unsigned char color;;main
      +                          .c: 35:     struct DC_motor motorL, motorR;;main.c: 37:     motorL.power=0;
   985   00170A  0E00               	movlw	0
   986   00170C  0100               	movlb	0	; () banked
   987   00170E  6FD3               	movwf	main@motorL& (0+255),b
   988   001710                     
   989                           ; BSR set to: 0
   990                           ;main.c: 38:     motorL.direction=1;
   991   001710  0E01               	movlw	1
   992   001712  6FD4               	movwf	(main@motorL+1)& (0+255),b
   993   001714                     
   994                           ; BSR set to: 0
   995                           ;main.c: 39:     motorL.brakemode=1;
   996   001714  0E01               	movlw	1
   997   001716  6FD5               	movwf	(main@motorL+2)& (0+255),b
   998   001718                     
   999                           ; BSR set to: 0
  1000                           ;main.c: 40:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1001   001718  0EAA               	movlw	170
  1002   00171A  6FD8               	movwf	(main@motorL+5)& (0+255),b
  1003   00171C  0E0F               	movlw	15
  1004   00171E  6FD9               	movwf	(main@motorL+6)& (0+255),b
  1005   001720                     
  1006                           ; BSR set to: 0
  1007                           ;main.c: 41:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1008   001720  0EA6               	movlw	166
  1009   001722  6FDA               	movwf	(main@motorL+7)& (0+255),b
  1010   001724  0E0F               	movlw	15
  1011   001726  6FDB               	movwf	(main@motorL+8)& (0+255),b
  1012   001728                     
  1013                           ; BSR set to: 0
  1014                           ;main.c: 42:     motorL.PWMperiod=PWMcycle;
  1015   001728  0E00               	movlw	0
  1016   00172A  6FD7               	movwf	(main@motorL+4)& (0+255),b
  1017   00172C  0EC7               	movlw	199
  1018   00172E  6FD6               	movwf	(main@motorL+3)& (0+255),b
  1019   001730                     
  1020                           ; BSR set to: 0
  1021                           ;main.c: 43:     motorL.compensation=3;
  1022   001730  0E03               	movlw	3
  1023   001732  6FDC               	movwf	(main@motorL+9)& (0+255),b
  1024   001734                     
  1025                           ; BSR set to: 0
  1026                           ;main.c: 45:     motorR.power=0;
  1027   001734  0E00               	movlw	0
  1028   001736  6FC9               	movwf	main@motorR& (0+255),b
  1029   001738                     
  1030                           ; BSR set to: 0
  1031                           ;main.c: 46:     motorR.direction=1;
  1032   001738  0E01               	movlw	1
  1033   00173A  6FCA               	movwf	(main@motorR+1)& (0+255),b
  1034   00173C                     
  1035                           ; BSR set to: 0
  1036                           ;main.c: 47:     motorR.brakemode=1;
  1037   00173C  0E01               	movlw	1
  1038   00173E  6FCB               	movwf	(main@motorR+2)& (0+255),b
  1039   001740                     
  1040                           ; BSR set to: 0
  1041                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1042   001740  0E25               	movlw	37
  1043   001742  6FCE               	movwf	(main@motorR+5)& (0+255),b
  1044   001744  0E0F               	movlw	15
  1045   001746  6FCF               	movwf	(main@motorR+6)& (0+255),b
  1046   001748                     
  1047                           ; BSR set to: 0
  1048                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1049   001748  0E21               	movlw	33
  1050   00174A  6FD0               	movwf	(main@motorR+7)& (0+255),b
  1051   00174C  0E0F               	movlw	15
  1052   00174E  6FD1               	movwf	(main@motorR+8)& (0+255),b
  1053   001750                     
  1054                           ; BSR set to: 0
  1055                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
  1056   001750  0E00               	movlw	0
  1057   001752  6FCD               	movwf	(main@motorR+4)& (0+255),b
  1058   001754  0EC7               	movlw	199
  1059   001756  6FCC               	movwf	(main@motorR+3)& (0+255),b
  1060   001758                     
  1061                           ; BSR set to: 0
  1062                           ;main.c: 51:     motorR.compensation=0;
  1063   001758  0E00               	movlw	0
  1064   00175A  6FD2               	movwf	(main@motorR+9)& (0+255),b
  1065   00175C                     
  1066                           ; BSR set to: 0
  1067                           ;main.c: 54:     char straightSpeed=50;
  1068   00175C  0E32               	movlw	50
  1069   00175E  6FBE               	movwf	main@straightSpeed& (0+255),b
  1070   001760                     
  1071                           ; BSR set to: 0
  1072                           ;main.c: 55:     unsigned char straightRamp=2;
  1073   001760  0E02               	movlw	2
  1074   001762  6FC0               	movwf	main@straightRamp& (0+255),b
  1075   001764                     
  1076                           ; BSR set to: 0
  1077                           ;main.c: 57:     unsigned char reverseDuration=10;
  1078   001764  0E0A               	movlw	10
  1079   001766  6F8A               	movwf	main@reverseDuration& (0+255),b
  1080   001768                     
  1081                           ; BSR set to: 0
  1082                           ;main.c: 59:     char turnSpeed=21;
  1083   001768  0E15               	movlw	21
  1084   00176A  6F8B               	movwf	main@turnSpeed& (0+255),b
  1085   00176C                     
  1086                           ; BSR set to: 0
  1087                           ;main.c: 60:     unsigned char turnDuration=10;
  1088   00176C  0E0A               	movlw	10
  1089   00176E  6F8C               	movwf	main@turnDuration& (0+255),b
  1090   001770                     
  1091                           ; BSR set to: 0
  1092                           ;main.c: 61:     unsigned char turnRamp=4;
  1093   001770  0E04               	movlw	4
  1094   001772  6F8D               	movwf	main@turnRamp& (0+255),b
  1095   001774                     
  1096                           ; BSR set to: 0
  1097                           ;main.c: 64:     batteryLevel();
  1098   001774  EC5C  F016         	call	_batteryLevel	;wreg free
  1099   001778                     l69:
  1100   001778  B48E               	btfsc	142,2,c	;volatile
  1101   00177A  EFC1  F00B         	goto	u2441
  1102   00177E  EFC3  F00B         	goto	u2440
  1103   001782                     u2441:
  1104   001782  EFBC  F00B         	goto	l69
  1105   001786                     u2440:
  1106   001786                     
  1107                           ;main.c: 68:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1108   001786  9680               	bcf	128,3,c	;volatile
  1109   001788  9E7C               	bcf	124,7,c	;volatile
  1110                           
  1111                           ;main.c: 90:     LATHbits.LATH1=LATDbits.LATD3=1;
  1112   00178A  867C               	bsf	124,3,c	;volatile
  1113   00178C  8280               	bsf	128,1,c	;volatile
  1114   00178E                     
  1115                           ;main.c: 91:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1116   00178E  0E29               	movlw	41
  1117   001790  0100               	movlb	0	; () banked
  1118   001792  6F61               	movwf	(??_main+1)& (0+255),b
  1119   001794  0E96               	movlw	150
  1120   001796  6F60               	movwf	??_main& (0+255),b
  1121   001798  0E7F               	movlw	127
  1122   00179A                     u2517:
  1123   00179A  2EE8               	decfsz	wreg,f,c
  1124   00179C  D7FE               	bra	u2517
  1125   00179E  2F60               	decfsz	??_main& (0+255),f,b
  1126   0017A0  D7FC               	bra	u2517
  1127   0017A2  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1128   0017A4  D7FA               	bra	u2517
  1129   0017A6                     
  1130                           ;main.c: 97:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1131   0017A6  8680               	bsf	128,3,c	;volatile
  1132   0017A8  8E7C               	bsf	124,7,c	;volatile
  1133   0017AA                     
  1134                           ;main.c: 98:      white_Light(1);
  1135   0017AA  0E01               	movlw	1
  1136   0017AC  ECB3  F017         	call	_white_Light
  1137   0017B0                     
  1138                           ;main.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1139   0017B0  0E29               	movlw	41
  1140   0017B2  0100               	movlb	0	; () banked
  1141   0017B4  6F61               	movwf	(??_main+1)& (0+255),b
  1142   0017B6  0E96               	movlw	150
  1143   0017B8  6F60               	movwf	??_main& (0+255),b
  1144   0017BA  0E7F               	movlw	127
  1145   0017BC                     u2527:
  1146   0017BC  2EE8               	decfsz	wreg,f,c
  1147   0017BE  D7FE               	bra	u2527
  1148   0017C0  2F60               	decfsz	??_main& (0+255),f,b
  1149   0017C2  D7FC               	bra	u2527
  1150   0017C4  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1151   0017C6  D7FA               	bra	u2527
  1152   0017C8                     
  1153                           ;main.c: 100:     unsigned int ambient;;main.c: 101:     color_read(&RGBC);
  1154   0017C8  0EDD               	movlw	low main@RGBC
  1155   0017CA  6E09               	movwf	color_read@RGBC^0,c
  1156   0017CC  EC1C  F00D         	call	_color_read	;wreg free
  1157   0017D0                     
  1158                           ;main.c: 103:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1159   0017D0  9680               	bcf	128,3,c	;volatile
  1160   0017D2  9E7C               	bcf	124,7,c	;volatile
  1161   0017D4                     
  1162                           ;main.c: 107:     struct RGB_calib red, green, blue, yellow, pink, orange, lightblue, wh
      +                          ite;;main.c: 108:     color_calibration(&RGBC, &RGBC_n, &red, &green, &blue, &yellow, &p
      +                          ink, &orange, &lightblue, &white);
  1163   0017D4  0EDD               	movlw	low main@RGBC
  1164   0017D6  6E2A               	movwf	color_calibration@RGBC^0,c
  1165   0017D8  0EC1               	movlw	low main@RGBC_n
  1166   0017DA  6E2B               	movwf	color_calibration@RGBC_n^0,c
  1167   0017DC  0E8E               	movlw	low main@red
  1168   0017DE  6E2C               	movwf	color_calibration@red^0,c
  1169   0017E0  0E94               	movlw	low main@green
  1170   0017E2  6E2D               	movwf	color_calibration@green^0,c
  1171   0017E4  0E9A               	movlw	low main@blue
  1172   0017E6  6E2E               	movwf	color_calibration@blue^0,c
  1173   0017E8  0EA0               	movlw	low main@yellow
  1174   0017EA  6E2F               	movwf	color_calibration@yellow^0,c
  1175   0017EC  0EA6               	movlw	low main@pink
  1176   0017EE  6E30               	movwf	color_calibration@pink^0,c
  1177   0017F0  0EAC               	movlw	low main@orange
  1178   0017F2  6E31               	movwf	color_calibration@orange^0,c
  1179   0017F4  0EB2               	movlw	low main@lightblue
  1180   0017F6  6E32               	movwf	color_calibration@lightblue^0,c
  1181   0017F8  0EB8               	movlw	low main@white
  1182   0017FA  6E33               	movwf	color_calibration@white^0,c
  1183   0017FC  EC36  F007         	call	_color_calibration	;wreg free
  1184   001800                     
  1185                           ;main.c: 113:     sprintf(buf,"c=%d \r\n", RGBC.C);
  1186   001800  0E62               	movlw	low main@buf
  1187   001802  6E1E               	movwf	sprintf@s^0,c
  1188   001804  0E62               	movlw	low STR_1
  1189   001806  6E1F               	movwf	sprintf@fmt^0,c
  1190   001808  C0E3  F020         	movff	main@RGBC+6,?_sprintf+2
  1191   00180C  C0E4  F021         	movff	main@RGBC+7,?_sprintf+3
  1192   001810  ECDE  F016         	call	_sprintf	;wreg free
  1193   001814                     
  1194                           ;main.c: 115:     sendTxBuf();
  1195   001814  ECE4  F017         	call	_sendTxBuf	;wreg free
  1196   001818                     
  1197                           ;main.c: 116:     TxBufferedString(buf);
  1198   001818  0E62               	movlw	low main@buf
  1199   00181A  6E06               	movwf	TxBufferedString@string^0,c
  1200   00181C  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1201   00181E  EC2B  F016         	call	_TxBufferedString	;wreg free
  1202   001822                     
  1203                           ;main.c: 117:     sendTxBuf();
  1204   001822  ECE4  F017         	call	_sendTxBuf	;wreg free
  1205   001826                     
  1206                           ;main.c: 118:     TxBufferedString("");
  1207   001826  0E36               	movlw	low (STR_3+53)
  1208   001828  6E06               	movwf	TxBufferedString@string^0,c
  1209   00182A  5006               	movf	TxBufferedString@string^0,w,c
  1210   00182C  A4D8               	btfss	status,2,c
  1211   00182E  0E0E               	movlw	high __smallconst
  1212   001830  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1213   001832  EC2B  F016         	call	_TxBufferedString	;wreg free
  1214   001836                     
  1215                           ;main.c: 119:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1216   001836  0E19               	movlw	25
  1217   001838  0100               	movlb	0	; () banked
  1218   00183A  6F61               	movwf	(??_main+1)& (0+255),b
  1219   00183C  0E5A               	movlw	90
  1220   00183E  6F60               	movwf	??_main& (0+255),b
  1221   001840  0EB1               	movlw	177
  1222   001842                     u2537:
  1223   001842  2EE8               	decfsz	wreg,f,c
  1224   001844  D7FE               	bra	u2537
  1225   001846  2F60               	decfsz	??_main& (0+255),f,b
  1226   001848  D7FC               	bra	u2537
  1227   00184A  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1228   00184C  D7FA               	bra	u2537
  1229   00184E  D000               	nop2	
  1230   001850                     
  1231                           ;main.c: 122:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1232   001850  0ED3               	movlw	low main@motorL
  1233   001852  6E17               	movwf	fullSpeedAhead@mL^0,c
  1234   001854  0EC9               	movlw	low main@motorR
  1235   001856  6E18               	movwf	fullSpeedAhead@mR^0,c
  1236   001858  0E32               	movlw	50
  1237   00185A  6E19               	movwf	fullSpeedAhead@straightSpeed^0,c
  1238   00185C  0E02               	movlw	2
  1239   00185E  6E1A               	movwf	fullSpeedAhead@straightRamp^0,c
  1240   001860  ECC9  F013         	call	_fullSpeedAhead	;wreg free
  1241   001864                     l3559:
  1242                           
  1243                           ;main.c: 125:         color_read(&RGBC);
  1244   001864  0EDD               	movlw	low main@RGBC
  1245   001866  6E09               	movwf	color_read@RGBC^0,c
  1246   001868  EC1C  F00D         	call	_color_read	;wreg free
  1247   00186C                     
  1248                           ;main.c: 127:         if (RGBC.C < 500 || RGBC.C > 800 ){
  1249   00186C  0EF4               	movlw	244
  1250   00186E  0100               	movlb	0	; () banked
  1251   001870  5DE3               	subwf	(main@RGBC+6)& (0+255),w,b
  1252   001872  0E01               	movlw	1
  1253   001874  59E4               	subwfb	(main@RGBC+7)& (0+255),w,b
  1254   001876  A0D8               	btfss	status,0,c
  1255   001878  EF40  F00C         	goto	u2451
  1256   00187C  EF42  F00C         	goto	u2450
  1257   001880                     u2451:
  1258   001880  EF4D  F00C         	goto	l3565
  1259   001884                     u2450:
  1260   001884                     
  1261                           ; BSR set to: 0
  1262   001884  0E21               	movlw	33
  1263   001886  5DE3               	subwf	(main@RGBC+6)& (0+255),w,b
  1264   001888  0E03               	movlw	3
  1265   00188A  59E4               	subwfb	(main@RGBC+7)& (0+255),w,b
  1266   00188C  A0D8               	btfss	status,0,c
  1267   00188E  EF4B  F00C         	goto	u2461
  1268   001892  EF4D  F00C         	goto	u2460
  1269   001896                     u2461:
  1270   001896  EFD4  F00C         	goto	l3589
  1271   00189A                     u2460:
  1272   00189A                     l3565:
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;main.c: 128:             stop(&motorL, &motorR, straightRamp);
  1276   00189A  0ED3               	movlw	low main@motorL
  1277   00189C  6E17               	movwf	stop@mL^0,c
  1278   00189E  0EC9               	movlw	low main@motorR
  1279   0018A0  6E18               	movwf	stop@mR^0,c
  1280   0018A2  C0C0  F019         	movff	main@straightRamp,stop@straightRamp
  1281   0018A6  EC52  F013         	call	_stop	;wreg free
  1282   0018AA                     
  1283                           ;main.c: 129:             color_read(&RGBC);
  1284   0018AA  0EDD               	movlw	low main@RGBC
  1285   0018AC  6E09               	movwf	color_read@RGBC^0,c
  1286   0018AE  EC1C  F00D         	call	_color_read	;wreg free
  1287   0018B2                     
  1288                           ;main.c: 130:             color_normalise(RGBC, &RGBC_n);
  1289   0018B2  EE20  F0DD         	lfsr	2,main@RGBC
  1290   0018B6  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1291   0018BA  0E07               	movlw	7
  1292   0018BC                     u2471:
  1293   0018BC  CFDB FFEB          	movff	plusw2,plusw0
  1294   0018C0  06E8               	decf	wreg,f,c
  1295   0018C2  E2FC               	bc	u2471
  1296   0018C4  0EC1               	movlw	low main@RGBC_n
  1297   0018C6  6E27               	movwf	color_normalise@RGBC_n^0,c
  1298   0018C8  EC2B  F012         	call	_color_normalise	;wreg free
  1299   0018CC                     
  1300                           ;main.c: 131:             color = color_detect(RGBC_n);
  1301   0018CC  EE20  F0C1         	lfsr	2,main@RGBC_n
  1302   0018D0  EE00  F005         	lfsr	0,color_detect@RGBC_n
  1303   0018D4  0E07               	movlw	7
  1304   0018D6                     u2481:
  1305   0018D6  CFDB FFEB          	movff	plusw2,plusw0
  1306   0018DA  06E8               	decf	wreg,f,c
  1307   0018DC  E2FC               	bc	u2481
  1308   0018DE  EC50  F018         	call	_color_detect	;wreg free
  1309   0018E2  0100               	movlb	0	; () banked
  1310   0018E4  6FBF               	movwf	main@color& (0+255),b
  1311   0018E6                     
  1312                           ; BSR set to: 0
  1313                           ;main.c: 132:             if (color !=0){
  1314   0018E6  51BF               	movf	main@color& (0+255),w,b
  1315   0018E8  B4D8               	btfsc	status,2,c
  1316   0018EA  EF79  F00C         	goto	u2491
  1317   0018EE  EF7B  F00C         	goto	u2490
  1318   0018F2                     u2491:
  1319   0018F2  EF8F  F00C         	goto	l3577
  1320   0018F6                     u2490:
  1321   0018F6                     
  1322                           ; BSR set to: 0
  1323                           ;main.c: 133:                 move(&motorL, &motorR, color, straightSpeed, reverseDurati
      +                          on, straightRamp, turnSpeed, turnDuration, turnRamp);
  1324   0018F6  0ED3               	movlw	low main@motorL
  1325   0018F8  6E23               	movwf	move@mL^0,c
  1326   0018FA  0EC9               	movlw	low main@motorR
  1327   0018FC  6E24               	movwf	move@mR^0,c
  1328   0018FE  C0BF  F025         	movff	main@color,move@color
  1329   001902  C0BE  F026         	movff	main@straightSpeed,move@straightSpeed
  1330   001906  C08A  F027         	movff	main@reverseDuration,move@reverseDuration
  1331   00190A  C0C0  F028         	movff	main@straightRamp,move@straightRamp
  1332   00190E  C08B  F029         	movff	main@turnSpeed,move@turnSpeed
  1333   001912  C08C  F02A         	movff	main@turnDuration,move@turnDuration
  1334   001916  C08D  F02B         	movff	main@turnRamp,move@turnRamp
  1335   00191A  ECB4  F009         	call	_move	;wreg free
  1336   00191E                     l3577:
  1337                           
  1338                           ;main.c: 138:             sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d  color: %
      +                          d \r\n",RGBC.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B,color);
  1339   00191E  0E62               	movlw	low main@buf
  1340   001920  6E1E               	movwf	sprintf@s^0,c
  1341   001922  0E01               	movlw	low STR_3
  1342   001924  6E1F               	movwf	sprintf@fmt^0,c
  1343   001926  C0DD  F020         	movff	main@RGBC,?_sprintf+2
  1344   00192A  C0DE  F021         	movff	main@RGBC+1,?_sprintf+3
  1345   00192E  C0DF  F022         	movff	main@RGBC+2,?_sprintf+4
  1346   001932  C0E0  F023         	movff	main@RGBC+3,?_sprintf+5
  1347   001936  C0E1  F024         	movff	main@RGBC+4,?_sprintf+6
  1348   00193A  C0E2  F025         	movff	main@RGBC+5,?_sprintf+7
  1349   00193E  C0E3  F026         	movff	main@RGBC+6,?_sprintf+8
  1350   001942  C0E4  F027         	movff	main@RGBC+7,?_sprintf+9
  1351   001946  C0C1  F028         	movff	main@RGBC_n,?_sprintf+10
  1352   00194A  C0C2  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1353   00194E  C0C3  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1354   001952  C0C4  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1355   001956  C0C5  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1356   00195A  C0C6  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1357   00195E  C0BF  F02E         	movff	main@color,?_sprintf+16
  1358   001962  6A2F               	clrf	(?_sprintf+17)^0,c
  1359   001964  ECDE  F016         	call	_sprintf	;wreg free
  1360   001968                     
  1361                           ;main.c: 139:             sendTxBuf();
  1362   001968  ECE4  F017         	call	_sendTxBuf	;wreg free
  1363   00196C                     
  1364                           ;main.c: 140:             TxBufferedString(buf);
  1365   00196C  0E62               	movlw	low main@buf
  1366   00196E  6E06               	movwf	TxBufferedString@string^0,c
  1367   001970  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1368   001972  EC2B  F016         	call	_TxBufferedString	;wreg free
  1369   001976                     
  1370                           ;main.c: 141:             sendTxBuf();
  1371   001976  ECE4  F017         	call	_sendTxBuf	;wreg free
  1372   00197A                     
  1373                           ;main.c: 142:             TxBufferedString("");
  1374   00197A  0E36               	movlw	low (STR_3+53)
  1375   00197C  6E06               	movwf	TxBufferedString@string^0,c
  1376   00197E  5006               	movf	TxBufferedString@string^0,w,c
  1377   001980  A4D8               	btfss	status,2,c
  1378   001982  0E0E               	movlw	high __smallconst
  1379   001984  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1380   001986  EC2B  F016         	call	_TxBufferedString	;wreg free
  1381   00198A                     l3587:
  1382                           
  1383                           ;main.c: 143:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1384   00198A  0E19               	movlw	25
  1385   00198C  0100               	movlb	0	; () banked
  1386   00198E  6F61               	movwf	(??_main+1)& (0+255),b
  1387   001990  0E5A               	movlw	90
  1388   001992  6F60               	movwf	??_main& (0+255),b
  1389   001994  0EB1               	movlw	177
  1390   001996                     u2547:
  1391   001996  2EE8               	decfsz	wreg,f,c
  1392   001998  D7FE               	bra	u2547
  1393   00199A  2F60               	decfsz	??_main& (0+255),f,b
  1394   00199C  D7FC               	bra	u2547
  1395   00199E  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1396   0019A0  D7FA               	bra	u2547
  1397   0019A2  D000               	nop2	
  1398                           
  1399                           ;main.c: 145:         }
  1400   0019A4  EF32  F00C         	goto	l3559
  1401   0019A8                     l3589:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;main.c: 148:             color_read(&RGBC);
  1405   0019A8  0EDD               	movlw	low main@RGBC
  1406   0019AA  6E09               	movwf	color_read@RGBC^0,c
  1407   0019AC  EC1C  F00D         	call	_color_read	;wreg free
  1408   0019B0                     
  1409                           ;main.c: 152:             color_normalise(RGBC, &RGBC_n);
  1410   0019B0  EE20  F0DD         	lfsr	2,main@RGBC
  1411   0019B4  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1412   0019B8  0E07               	movlw	7
  1413   0019BA                     u2501:
  1414   0019BA  CFDB FFEB          	movff	plusw2,plusw0
  1415   0019BE  06E8               	decf	wreg,f,c
  1416   0019C0  E2FC               	bc	u2501
  1417   0019C2  0EC1               	movlw	low main@RGBC_n
  1418   0019C4  6E27               	movwf	color_normalise@RGBC_n^0,c
  1419   0019C6  EC2B  F012         	call	_color_normalise	;wreg free
  1420   0019CA                     
  1421                           ;main.c: 153:             sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d \r\n",RGB
      +                          C.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B);
  1422   0019CA  0E62               	movlw	low main@buf
  1423   0019CC  6E1E               	movwf	sprintf@s^0,c
  1424   0019CE  0E37               	movlw	low STR_5
  1425   0019D0  6E1F               	movwf	sprintf@fmt^0,c
  1426   0019D2  C0DD  F020         	movff	main@RGBC,?_sprintf+2
  1427   0019D6  C0DE  F021         	movff	main@RGBC+1,?_sprintf+3
  1428   0019DA  C0DF  F022         	movff	main@RGBC+2,?_sprintf+4
  1429   0019DE  C0E0  F023         	movff	main@RGBC+3,?_sprintf+5
  1430   0019E2  C0E1  F024         	movff	main@RGBC+4,?_sprintf+6
  1431   0019E6  C0E2  F025         	movff	main@RGBC+5,?_sprintf+7
  1432   0019EA  C0E3  F026         	movff	main@RGBC+6,?_sprintf+8
  1433   0019EE  C0E4  F027         	movff	main@RGBC+7,?_sprintf+9
  1434   0019F2  C0C1  F028         	movff	main@RGBC_n,?_sprintf+10
  1435   0019F6  C0C2  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1436   0019FA  C0C3  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1437   0019FE  C0C4  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1438   001A02  C0C5  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1439   001A06  C0C6  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1440   001A0A  ECDE  F016         	call	_sprintf	;wreg free
  1441   001A0E                     
  1442                           ;main.c: 154:             sendTxBuf();
  1443   001A0E  ECE4  F017         	call	_sendTxBuf	;wreg free
  1444   001A12                     
  1445                           ;main.c: 155:             TxBufferedString(buf);
  1446   001A12  0E62               	movlw	low main@buf
  1447   001A14  6E06               	movwf	TxBufferedString@string^0,c
  1448   001A16  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1449   001A18  EC2B  F016         	call	_TxBufferedString	;wreg free
  1450   001A1C                     
  1451                           ;main.c: 156:             sendTxBuf();
  1452   001A1C  ECE4  F017         	call	_sendTxBuf	;wreg free
  1453   001A20                     
  1454                           ;main.c: 157:             TxBufferedString("");
  1455   001A20  0E36               	movlw	low (STR_3+53)
  1456   001A22  6E06               	movwf	TxBufferedString@string^0,c
  1457   001A24  5006               	movf	TxBufferedString@string^0,w,c
  1458   001A26  A4D8               	btfss	status,2,c
  1459   001A28  0E0E               	movlw	high __smallconst
  1460   001A2A  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1461   001A2C  EC2B  F016         	call	_TxBufferedString	;wreg free
  1462   001A30  EFC5  F00C         	goto	l3587
  1463   001A34  EF46  F000         	goto	start
  1464   001A38                     __end_of_main:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _stop *****************
  1468 ;; Defined at:
  1469 ;;		line 162 in file "dc_motor.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  1472 ;;		 -> main@motorL(10), 
  1473 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  1474 ;;		 -> main@motorR(10), 
  1475 ;;  straightRamp    1   24[COMRAM] unsigned char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  cur_power       2   30[COMRAM] int 
  1478 ;;  i               2   28[COMRAM] int 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1488 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1491 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1492 ;;Total ram usage:       10 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 5
  1495 ;; This function calls:
  1496 ;;		_setMotorPWM
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text1
  1503   0026A4                     __ptext1:
  1504                           	callstack 0
  1505   0026A4                     _stop:
  1506                           	callstack 25
  1507   0026A4                     
  1508                           ;dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 163: {;dc_motor.c: 164:     mL->direction = 1;
  1509   0026A4  5017               	movf	stop@mL^0,w,c
  1510   0026A6  6ED9               	movwf	fsr2l,c
  1511   0026A8  6ADA               	clrf	fsr2h,c
  1512   0026AA  0E01               	movlw	1
  1513   0026AC  26D9               	addwf	fsr2l,f,c
  1514   0026AE  0E01               	movlw	1
  1515   0026B0  6EDF               	movwf	indf2,c
  1516                           
  1517                           ;dc_motor.c: 165:     mR->direction = 1;
  1518   0026B2  5018               	movf	stop@mR^0,w,c
  1519   0026B4  6ED9               	movwf	fsr2l,c
  1520   0026B6  6ADA               	clrf	fsr2h,c
  1521   0026B8  0E01               	movlw	1
  1522   0026BA  26D9               	addwf	fsr2l,f,c
  1523   0026BC  0E01               	movlw	1
  1524   0026BE  6EDF               	movwf	indf2,c
  1525                           
  1526                           ;dc_motor.c: 166:     int i;;dc_motor.c: 167:     int cur_power;;dc_motor.c: 168:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  1527   0026C0  5017               	movf	stop@mL^0,w,c
  1528   0026C2  6ED9               	movwf	fsr2l,c
  1529   0026C4  6ADA               	clrf	fsr2h,c
  1530   0026C6  50DF               	movf	indf2,w,c
  1531   0026C8  6E1A               	movwf	??_stop^0,c
  1532   0026CA  5017               	movf	stop@mL^0,w,c
  1533   0026CC  6ED9               	movwf	fsr2l,c
  1534   0026CE  6ADA               	clrf	fsr2h,c
  1535   0026D0  0E09               	movlw	9
  1536   0026D2  26D9               	addwf	fsr2l,f,c
  1537   0026D4  50DF               	movf	indf2,w,c
  1538   0026D6  6E1B               	movwf	(??_stop+1)^0,c
  1539   0026D8  501B               	movf	(??_stop+1)^0,w,c
  1540   0026DA  5C1A               	subwf	??_stop^0,w,c
  1541   0026DC  6E1F               	movwf	stop@cur_power^0,c
  1542   0026DE  6A20               	clrf	(stop@cur_power+1)^0,c
  1543   0026E0  A0D8               	btfss	status,0,c
  1544   0026E2  0620               	decf	(stop@cur_power+1)^0,f,c
  1545   0026E4                     l3147:
  1546   0026E4  BE20               	btfsc	(stop@cur_power+1)^0,7,c
  1547   0026E6  EF79  F013         	goto	u2150
  1548   0026EA  EF77  F013         	goto	u2151
  1549   0026EE                     u2151:
  1550   0026EE  EF7B  F013         	goto	l3151
  1551   0026F2                     u2150:
  1552   0026F2  EFC0  F013         	goto	l3167
  1553   0026F6                     l3151:
  1554                           
  1555                           ;dc_motor.c: 169:         mL->power = cur_power+mL->compensation;
  1556   0026F6  5017               	movf	stop@mL^0,w,c
  1557   0026F8  6ED9               	movwf	fsr2l,c
  1558   0026FA  6ADA               	clrf	fsr2h,c
  1559   0026FC  5017               	movf	stop@mL^0,w,c
  1560   0026FE  6EE1               	movwf	fsr1l,c
  1561   002700  6AE2               	clrf	fsr1h,c
  1562   002702  0E09               	movlw	9
  1563   002704  26E1               	addwf	fsr1l,f,c
  1564   002706  50E7               	movf	indf1,w,c
  1565   002708  241F               	addwf	stop@cur_power^0,w,c
  1566   00270A  6EDF               	movwf	indf2,c
  1567                           
  1568                           ;dc_motor.c: 170:         mR->power = cur_power+mR->compensation;
  1569   00270C  5018               	movf	stop@mR^0,w,c
  1570   00270E  6ED9               	movwf	fsr2l,c
  1571   002710  6ADA               	clrf	fsr2h,c
  1572   002712  5018               	movf	stop@mR^0,w,c
  1573   002714  6EE1               	movwf	fsr1l,c
  1574   002716  6AE2               	clrf	fsr1h,c
  1575   002718  0E09               	movlw	9
  1576   00271A  26E1               	addwf	fsr1l,f,c
  1577   00271C  50E7               	movf	indf1,w,c
  1578   00271E  241F               	addwf	stop@cur_power^0,w,c
  1579   002720  6EDF               	movwf	indf2,c
  1580   002722                     
  1581                           ;dc_motor.c: 171:         setMotorPWM(mL);
  1582   002722  C017  F012         	movff	stop@mL,setMotorPWM@m
  1583   002726  EC81  F011         	call	_setMotorPWM	;wreg free
  1584   00272A                     
  1585                           ;dc_motor.c: 172:         setMotorPWM(mR);
  1586   00272A  C018  F012         	movff	stop@mR,setMotorPWM@m
  1587   00272E  EC81  F011         	call	_setMotorPWM	;wreg free
  1588   002732                     
  1589                           ;dc_motor.c: 173:         for (i=0;i<straightRamp;i++) {
  1590   002732  0E00               	movlw	0
  1591   002734  6E1E               	movwf	(stop@i+1)^0,c
  1592   002736  0E00               	movlw	0
  1593   002738  6E1D               	movwf	stop@i^0,c
  1594   00273A  EFA9  F013         	goto	l486
  1595   00273E                     l3159:
  1596                           
  1597                           ;dc_motor.c: 174:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1598   00273E  0E68               	movlw	104
  1599   002740  6E1A               	movwf	??_stop^0,c
  1600   002742  0EE4               	movlw	228
  1601   002744                     u2557:
  1602   002744  2EE8               	decfsz	wreg,f,c
  1603   002746  D7FE               	bra	u2557
  1604   002748  2E1A               	decfsz	??_stop^0,f,c
  1605   00274A  D7FC               	bra	u2557
  1606   00274C  D000               	nop2	
  1607   00274E                     
  1608                           ;dc_motor.c: 175:         }
  1609   00274E  4A1D               	infsnz	stop@i^0,f,c
  1610   002750  2A1E               	incf	(stop@i+1)^0,f,c
  1611   002752                     l486:
  1612   002752  5019               	movf	stop@straightRamp^0,w,c
  1613   002754  6E1A               	movwf	??_stop^0,c
  1614   002756  6A1B               	clrf	(??_stop+1)^0,c
  1615   002758  501A               	movf	??_stop^0,w,c
  1616   00275A  5C1D               	subwf	stop@i^0,w,c
  1617   00275C  501E               	movf	(stop@i+1)^0,w,c
  1618   00275E  0A80               	xorlw	128
  1619   002760  6E1C               	movwf	(??_stop+2)^0,c
  1620   002762  501B               	movf	(??_stop+1)^0,w,c
  1621   002764  0A80               	xorlw	128
  1622   002766  581C               	subwfb	(??_stop+2)^0,w,c
  1623   002768  A0D8               	btfss	status,0,c
  1624   00276A  EFB9  F013         	goto	u2161
  1625   00276E  EFBB  F013         	goto	u2160
  1626   002772                     u2161:
  1627   002772  EF9F  F013         	goto	l3159
  1628   002776                     u2160:
  1629   002776                     
  1630                           ;dc_motor.c: 176:     }
  1631   002776  061F               	decf	stop@cur_power^0,f,c
  1632   002778  A0D8               	btfss	status,0,c
  1633   00277A  0620               	decf	(stop@cur_power+1)^0,f,c
  1634   00277C  EF72  F013         	goto	l3147
  1635   002780                     l3167:
  1636                           
  1637                           ;dc_motor.c: 177:     mL->power = 0;
  1638   002780  5017               	movf	stop@mL^0,w,c
  1639   002782  6ED9               	movwf	fsr2l,c
  1640   002784  6ADA               	clrf	fsr2h,c
  1641   002786  6ADF               	clrf	indf2,c
  1642                           
  1643                           ;dc_motor.c: 178:     mR->power = 0;
  1644   002788  5018               	movf	stop@mR^0,w,c
  1645   00278A  6ED9               	movwf	fsr2l,c
  1646   00278C  6ADA               	clrf	fsr2h,c
  1647   00278E  6ADF               	clrf	indf2,c
  1648   002790  0012               	return		;funcret
  1649   002792                     __end_of_stop:
  1650                           	callstack 0
  1651                           
  1652 ;; *************** function _sprintf *****************
  1653 ;; Defined at:
  1654 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  s               1   29[COMRAM] PTR unsigned char 
  1657 ;;		 -> main@buf(40), 
  1658 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1659 ;;		 -> STR_5(43), STR_3(54), STR_1(8), 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  f              12   48[COMRAM] struct _IO_FILE
  1662 ;;  ret             2    0        int 
  1663 ;;  ap              1   47[COMRAM] PTR void [1]
  1664 ;;		 -> ?_sprintf(2), 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  2   29[COMRAM] int 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1674 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1675 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1677 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;Total ram usage:       31 bytes
  1679 ;; Hardware stack levels used: 1
  1680 ;; Hardware stack levels required when called: 7
  1681 ;; This function calls:
  1682 ;;		_vfprintf
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text2
  1689   002DBC                     __ptext2:
  1690                           	callstack 0
  1691   002DBC                     _sprintf:
  1692                           	callstack 23
  1693   002DBC  0E20               	movlw	low (?_sprintf+2)
  1694   002DBE  6E30               	movwf	sprintf@ap^0,c
  1695   002DC0  C01E  F031         	movff	sprintf@s,sprintf@f
  1696   002DC4  0E00               	movlw	0
  1697   002DC6  6E35               	movwf	(sprintf@f+4)^0,c
  1698   002DC8  0E00               	movlw	0
  1699   002DCA  6E34               	movwf	(sprintf@f+3)^0,c
  1700   002DCC  0E00               	movlw	0
  1701   002DCE  6E3C               	movwf	(sprintf@f+11)^0,c
  1702   002DD0  0E00               	movlw	0
  1703   002DD2  6E3B               	movwf	(sprintf@f+10)^0,c
  1704   002DD4  0E31               	movlw	low sprintf@f
  1705   002DD6  6E1A               	movwf	vfprintf@fp^0,c
  1706   002DD8  C01F  F01B         	movff	sprintf@fmt,vfprintf@fmt
  1707   002DDC  0E30               	movlw	low sprintf@ap
  1708   002DDE  6E1C               	movwf	vfprintf@ap^0,c
  1709   002DE0  ECA4  F016         	call	_vfprintf	;wreg free
  1710   002DE4  501E               	movf	sprintf@s^0,w,c
  1711   002DE6  2434               	addwf	(sprintf@f+3)^0,w,c
  1712   002DE8  6ED9               	movwf	fsr2l,c
  1713   002DEA  6ADA               	clrf	fsr2h,c
  1714   002DEC  6ADF               	clrf	indf2,c
  1715   002DEE  0012               	return		;funcret
  1716   002DF0                     __end_of_sprintf:
  1717                           	callstack 0
  1718                           
  1719 ;; *************** function _vfprintf *****************
  1720 ;; Defined at:
  1721 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  1724 ;;		 -> sprintf@f(12), 
  1725 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1726 ;;		 -> STR_5(43), STR_3(54), STR_1(8), 
  1727 ;;  ap              1   27[COMRAM] PTR PTR void 
  1728 ;;		 -> sprintf@ap(1), 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  cfmt            1   28[COMRAM] PTR unsigned char 
  1731 ;;		 -> STR_5(43), STR_3(54), STR_1(8), 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  2   25[COMRAM] int 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1741 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;Total ram usage:        4 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 6
  1748 ;; This function calls:
  1749 ;;		_vfpfcnvrt
  1750 ;; This function is called by:
  1751 ;;		_sprintf
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text3
  1756   002D48                     __ptext3:
  1757                           	callstack 0
  1758   002D48                     _vfprintf:
  1759                           	callstack 23
  1760   002D48                     
  1761                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1762   002D48  C01B  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  1763                           
  1764                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1765   002D4C  EFB0  F016         	goto	l2925
  1766   002D50                     l2923:
  1767                           
  1768                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1769   002D50  C01A  F00F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1770   002D54  0E1D               	movlw	low vfprintf@cfmt
  1771   002D56  6E10               	movwf	vfpfcnvrt@fmt^0,c
  1772   002D58  C01C  F011         	movff	vfprintf@ap,vfpfcnvrt@ap
  1773   002D5C  EC07  F00E         	call	_vfpfcnvrt	;wreg free
  1774   002D60                     l2925:
  1775                           
  1776                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1777   002D60  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1778   002D64                     	if	1	;There is more than 1 active tblptr byte
  1779   002D64  0E0E               	movlw	high __smallconst
  1780   002D66  6EF7               	movwf	tblptrh,c
  1781   002D68                     	endif
  1782   002D68                     	if	0	;tblptru may be non-zero
  1783   002D68                     	endif
  1784   002D68                     	if	0	;tblptru may be non-zero
  1785   002D68                     	endif
  1786   002D68  0008               	tblrd		*
  1787   002D6A  50F5               	movf	tablat,w,c
  1788   002D6C  0900               	iorlw	0
  1789   002D6E  A4D8               	btfss	status,2,c
  1790   002D70  EFBC  F016         	goto	u1901
  1791   002D74  EFBE  F016         	goto	u1900
  1792   002D78                     u1901:
  1793   002D78  EFA8  F016         	goto	l2923
  1794   002D7C                     u1900:
  1795   002D7C                     
  1796                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1797   002D7C  0E00               	movlw	0
  1798   002D7E  6E1B               	movwf	(?_vfprintf+1)^0,c
  1799   002D80  0E00               	movlw	0
  1800   002D82  6E1A               	movwf	?_vfprintf^0,c
  1801   002D84  0012               	return		;funcret
  1802   002D86                     __end_of_vfprintf:
  1803                           	callstack 0
  1804                           
  1805 ;; *************** function _vfpfcnvrt *****************
  1806 ;; Defined at:
  1807 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1810 ;;		 -> sprintf@f(12), 
  1811 ;;  fmt             1   15[COMRAM] PTR PTR unsigned char 
  1812 ;;		 -> vfprintf@cfmt(1), 
  1813 ;;  ap              1   16[COMRAM] PTR PTR void 
  1814 ;;		 -> sprintf@ap(1), 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  convarg         4   20[COMRAM] struct .
  1817 ;;  c               1   24[COMRAM] unsigned char 
  1818 ;;  cp              1   19[COMRAM] PTR unsigned char 
  1819 ;;		 -> STR_5(43), STR_3(54), STR_1(8), 
  1820 ;;  done            1   18[COMRAM] _Bool 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1830 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;Total ram usage:       11 bytes
  1835 ;; Hardware stack levels used: 1
  1836 ;; Hardware stack levels required when called: 5
  1837 ;; This function calls:
  1838 ;;		___awdiv
  1839 ;;		___awmod
  1840 ;;		_abs
  1841 ;;		_fputc
  1842 ;; This function is called by:
  1843 ;;		_vfprintf
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text4
  1848   001C0E                     __ptext4:
  1849                           	callstack 0
  1850   001C0E                     _vfpfcnvrt:
  1851                           	callstack 23
  1852   001C0E                     
  1853                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1854   001C0E  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1855   001C10  6ED9               	movwf	fsr2l,c
  1856   001C12  6ADA               	clrf	fsr2h,c
  1857   001C14  CFDF FFF6          	movff	indf2,tblptrl
  1858   001C18                     	if	1	;There is more than 1 active tblptr byte
  1859   001C18  0E0E               	movlw	high __smallconst
  1860   001C1A  6EF7               	movwf	tblptrh,c
  1861   001C1C                     	endif
  1862   001C1C                     	if	0	;tblptru may be non-zero
  1863   001C1C                     	endif
  1864   001C1C                     	if	0	;tblptru may be non-zero
  1865   001C1C                     	endif
  1866   001C1C  0008               	tblrd		*
  1867   001C1E  50F5               	movf	tablat,w,c
  1868   001C20  0A25               	xorlw	37
  1869   001C22  A4D8               	btfss	status,2,c
  1870   001C24  EF16  F00E         	goto	u1581
  1871   001C28  EF18  F00E         	goto	u1580
  1872   001C2C                     u1581:
  1873   001C2C  EFD7  F00E         	goto	l2683
  1874   001C30                     u1580:
  1875   001C30                     
  1876                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1877   001C30  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1878   001C32  6ED9               	movwf	fsr2l,c
  1879   001C34  6ADA               	clrf	fsr2h,c
  1880   001C36  2ADF               	incf	indf2,f,c
  1881   001C38                     
  1882                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1883   001C38  0E00               	movlw	0
  1884   001C3A  6E52               	movwf	(_width+1)^0,c
  1885   001C3C  0E00               	movlw	0
  1886   001C3E  6E51               	movwf	_width^0,c
  1887   001C40  C051  F055         	movff	_width,_flags
  1888   001C44                     
  1889                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1890   001C44  6853               	setf	_prec^0,c
  1891   001C46  6854               	setf	(_prec+1)^0,c
  1892   001C48                     
  1893                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1894   001C48  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1895   001C4A  6ED9               	movwf	fsr2l,c
  1896   001C4C  6ADA               	clrf	fsr2h,c
  1897   001C4E  50DF               	movf	indf2,w,c
  1898   001C50  6E14               	movwf	vfpfcnvrt@cp^0,c
  1899   001C52                     
  1900                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1901   001C52  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1902   001C56                     	if	1	;There is more than 1 active tblptr byte
  1903   001C56  0E0E               	movlw	high __smallconst
  1904   001C58  6EF7               	movwf	tblptrh,c
  1905   001C5A                     	endif
  1906   001C5A                     	if	0	;tblptru may be non-zero
  1907   001C5A                     	endif
  1908   001C5A                     	if	0	;tblptru may be non-zero
  1909   001C5A                     	endif
  1910   001C5A  0008               	tblrd		*
  1911   001C5C  50F5               	movf	tablat,w,c
  1912   001C5E  0A64               	xorlw	100
  1913   001C60  B4D8               	btfsc	status,2,c
  1914   001C62  EF35  F00E         	goto	u1591
  1915   001C66  EF37  F00E         	goto	u1590
  1916   001C6A                     u1591:
  1917   001C6A  EF45  F00E         	goto	l2653
  1918   001C6E                     u1590:
  1919   001C6E  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1920   001C72                     	if	1	;There is more than 1 active tblptr byte
  1921   001C72  0E0E               	movlw	high __smallconst
  1922   001C74  6EF7               	movwf	tblptrh,c
  1923   001C76                     	endif
  1924   001C76                     	if	0	;tblptru may be non-zero
  1925   001C76                     	endif
  1926   001C76                     	if	0	;tblptru may be non-zero
  1927   001C76                     	endif
  1928   001C76  0008               	tblrd		*
  1929   001C78  50F5               	movf	tablat,w,c
  1930   001C7A  0A69               	xorlw	105
  1931   001C7C  A4D8               	btfss	status,2,c
  1932   001C7E  EF43  F00E         	goto	u1601
  1933   001C82  EF45  F00E         	goto	u1600
  1934   001C86                     u1601:
  1935   001C86  EFD1  F00E         	goto	l2679
  1936   001C8A                     u1600:
  1937   001C8A                     l2653:
  1938                           
  1939                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1940   001C8A  5011               	movf	vfpfcnvrt@ap^0,w,c
  1941   001C8C  6ED9               	movwf	fsr2l,c
  1942   001C8E  6ADA               	clrf	fsr2h,c
  1943   001C90  0E02               	movlw	2
  1944   001C92  26DF               	addwf	indf2,f,c
  1945   001C94  5CDF               	subwf	indf2,w,c
  1946   001C96  6ED9               	movwf	fsr2l,c
  1947   001C98  6ADA               	clrf	fsr2h,c
  1948   001C9A  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg
  1949   001C9E  CFDE F016          	movff	postinc2,vfpfcnvrt@convarg+1
  1950   001CA2                     
  1951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1952   001CA2  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1953   001CA4  6ED9               	movwf	fsr2l,c
  1954   001CA6  6ADA               	clrf	fsr2h,c
  1955   001CA8  2814               	incf	vfpfcnvrt@cp^0,w,c
  1956   001CAA  6EDF               	movwf	indf2,c
  1957   001CAC                     
  1958                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1959   001CAC  0E20               	movlw	32
  1960   001CAE  6E19               	movwf	vfpfcnvrt@c^0,c
  1961                           
  1962                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1963   001CB0  BE16               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1964   001CB2  EF5D  F00E         	goto	u1611
  1965   001CB6  EF60  F00E         	goto	u1610
  1966   001CBA                     u1611:
  1967   001CBA  0E01               	movlw	1
  1968   001CBC  EF61  F00E         	goto	u1620
  1969   001CC0                     u1610:
  1970   001CC0  0E00               	movlw	0
  1971   001CC2                     u1620:
  1972   001CC2  6E13               	movwf	vfpfcnvrt@done^0,c
  1973   001CC4                     l2659:
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1976   001CC4  0619               	decf	vfpfcnvrt@c^0,f,c
  1977   001CC6  0E64               	movlw	low _dbuf
  1978   001CC8  2419               	addwf	vfpfcnvrt@c^0,w,c
  1979   001CCA  6ED9               	movwf	fsr2l,c
  1980   001CCC  6ADA               	clrf	fsr2h,c
  1981   001CCE  0E01               	movlw	high _dbuf
  1982   001CD0  22DA               	addwfc	fsr2h,f,c
  1983   001CD2  C015  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1984   001CD6  C016  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1985   001CDA  0E00               	movlw	0
  1986   001CDC  6E08               	movwf	(___awmod@divisor+1)^0,c
  1987   001CDE  0E0A               	movlw	10
  1988   001CE0  6E07               	movwf	___awmod@divisor^0,c
  1989   001CE2  EC94  F014         	call	___awmod	;wreg free
  1990   001CE6  C005  F00B         	movff	?___awmod,abs@a
  1991   001CEA  C006  F00C         	movff	?___awmod+1,abs@a+1
  1992   001CEE  ECF8  F016         	call	_abs	;wreg free
  1993   001CF2  500B               	movf	?_abs^0,w,c
  1994   001CF4  0F30               	addlw	48
  1995   001CF6  6EDF               	movwf	indf2,c
  1996   001CF8                     
  1997                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1998   001CF8  C015  F005         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1999   001CFC  C016  F006         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2000   001D00  0E00               	movlw	0
  2001   001D02  6E08               	movwf	(___awdiv@divisor+1)^0,c
  2002   001D04  0E0A               	movlw	10
  2003   001D06  6E07               	movwf	___awdiv@divisor^0,c
  2004   001D08  EC32  F014         	call	___awdiv	;wreg free
  2005   001D0C  C005  F015         	movff	?___awdiv,vfpfcnvrt@convarg
  2006   001D10  C006  F016         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2007   001D14                     
  2008                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2009   001D14  5015               	movf	vfpfcnvrt@convarg^0,w,c
  2010   001D16  1016               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2011   001D18  B4D8               	btfsc	status,2,c
  2012   001D1A  EF91  F00E         	goto	u1631
  2013   001D1E  EF93  F00E         	goto	u1630
  2014   001D22                     u1631:
  2015   001D22  EF9B  F00E         	goto	l2667
  2016   001D26                     u1630:
  2017   001D26  5019               	movf	vfpfcnvrt@c^0,w,c
  2018   001D28  A4D8               	btfss	status,2,c
  2019   001D2A  EF99  F00E         	goto	u1641
  2020   001D2E  EF9B  F00E         	goto	u1640
  2021   001D32                     u1641:
  2022   001D32  EF62  F00E         	goto	l2659
  2023   001D36                     u1640:
  2024   001D36                     l2667:
  2025                           
  2026                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2027   001D36  5019               	movf	vfpfcnvrt@c^0,w,c
  2028   001D38  B4D8               	btfsc	status,2,c
  2029   001D3A  EFA1  F00E         	goto	u1651
  2030   001D3E  EFA3  F00E         	goto	u1650
  2031   001D42                     u1651:
  2032   001D42  EFC6  F00E         	goto	l2677
  2033   001D46                     u1650:
  2034   001D46  5013               	movf	vfpfcnvrt@done^0,w,c
  2035   001D48  B4D8               	btfsc	status,2,c
  2036   001D4A  EFA9  F00E         	goto	u1661
  2037   001D4E  EFAB  F00E         	goto	u1660
  2038   001D52                     u1661:
  2039   001D52  EFC6  F00E         	goto	l2677
  2040   001D56                     u1660:
  2041   001D56                     
  2042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2043   001D56  0619               	decf	vfpfcnvrt@c^0,f,c
  2044   001D58  0E64               	movlw	low _dbuf
  2045   001D5A  2419               	addwf	vfpfcnvrt@c^0,w,c
  2046   001D5C  6ED9               	movwf	fsr2l,c
  2047   001D5E  6ADA               	clrf	fsr2h,c
  2048   001D60  0E01               	movlw	high _dbuf
  2049   001D62  22DA               	addwfc	fsr2h,f,c
  2050   001D64  0E2D               	movlw	45
  2051   001D66  6EDF               	movwf	indf2,c
  2052   001D68  EFC6  F00E         	goto	l2677
  2053   001D6C                     l2673:
  2054                           
  2055                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2056   001D6C  0E64               	movlw	low _dbuf
  2057   001D6E  2419               	addwf	vfpfcnvrt@c^0,w,c
  2058   001D70  6ED9               	movwf	fsr2l,c
  2059   001D72  6ADA               	clrf	fsr2h,c
  2060   001D74  0E01               	movlw	high _dbuf
  2061   001D76  22DA               	addwfc	fsr2h,f,c
  2062   001D78  50DF               	movf	indf2,w,c
  2063   001D7A  6E12               	movwf	??_vfpfcnvrt^0,c
  2064   001D7C  5012               	movf	??_vfpfcnvrt^0,w,c
  2065   001D7E  6E05               	movwf	fputc@c^0,c
  2066   001D80  6A06               	clrf	(fputc@c+1)^0,c
  2067   001D82  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2068   001D86  ECEC  F014         	call	_fputc	;wreg free
  2069   001D8A  2A19               	incf	vfpfcnvrt@c^0,f,c
  2070   001D8C                     l2677:
  2071                           
  2072                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2073   001D8C  0E20               	movlw	32
  2074   001D8E  1819               	xorwf	vfpfcnvrt@c^0,w,c
  2075   001D90  A4D8               	btfss	status,2,c
  2076   001D92  EFCD  F00E         	goto	u1671
  2077   001D96  EFCF  F00E         	goto	u1670
  2078   001D9A                     u1671:
  2079   001D9A  EFB6  F00E         	goto	l2673
  2080   001D9E                     u1670:
  2081   001D9E  EFE8  F00E         	goto	l1283
  2082   001DA2                     l2679:
  2083                           
  2084                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2085   001DA2  5010               	movf	vfpfcnvrt@fmt^0,w,c
  2086   001DA4  6ED9               	movwf	fsr2l,c
  2087   001DA6  6ADA               	clrf	fsr2h,c
  2088   001DA8  2ADF               	incf	indf2,f,c
  2089   001DAA  EFE8  F00E         	goto	l1283
  2090   001DAE                     l2683:
  2091                           
  2092                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2093   001DAE  5010               	movf	vfpfcnvrt@fmt^0,w,c
  2094   001DB0  6ED9               	movwf	fsr2l,c
  2095   001DB2  6ADA               	clrf	fsr2h,c
  2096   001DB4  CFDF FFF6          	movff	indf2,tblptrl
  2097   001DB8                     	if	1	;There is more than 1 active tblptr byte
  2098   001DB8  0E0E               	movlw	high __smallconst
  2099   001DBA  6EF7               	movwf	tblptrh,c
  2100   001DBC                     	endif
  2101   001DBC                     	if	0	;tblptru may be non-zero
  2102   001DBC                     	endif
  2103   001DBC                     	if	0	;tblptru may be non-zero
  2104   001DBC                     	endif
  2105   001DBC  0008               	tblrd		*
  2106   001DBE  50F5               	movf	tablat,w,c
  2107   001DC0  6E05               	movwf	fputc@c^0,c
  2108   001DC2  6A06               	clrf	(fputc@c+1)^0,c
  2109   001DC4  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2110   001DC8  ECEC  F014         	call	_fputc	;wreg free
  2111   001DCC  EFD1  F00E         	goto	l2679
  2112   001DD0                     l1283:
  2113   001DD0  0012               	return		;funcret
  2114   001DD2                     __end_of_vfpfcnvrt:
  2115                           	callstack 0
  2116                           
  2117 ;; *************** function _fputc *****************
  2118 ;; Defined at:
  2119 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  c               2    4[COMRAM] int 
  2122 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  2123 ;;		 -> sprintf@f(12), 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  2    4[COMRAM] int 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2135 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2137 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2138 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2139 ;;Total ram usage:        8 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; Hardware stack levels required when called: 4
  2142 ;; This function calls:
  2143 ;;		_putch
  2144 ;; This function is called by:
  2145 ;;		_vfpfcnvrt
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text5
  2150   0029D8                     __ptext5:
  2151                           	callstack 0
  2152   0029D8                     _fputc:
  2153                           	callstack 23
  2154   0029D8  5007               	movf	fputc@fp^0,w,c
  2155   0029DA  B4D8               	btfsc	status,2,c
  2156   0029DC  EFF2  F014         	goto	u1411
  2157   0029E0  EFF4  F014         	goto	u1410
  2158   0029E4                     u1411:
  2159   0029E4  EFFC  F014         	goto	l2525
  2160   0029E8                     u1410:
  2161   0029E8  5007               	movf	fputc@fp^0,w,c
  2162   0029EA  A4D8               	btfss	status,2,c
  2163   0029EC  EFFA  F014         	goto	u1421
  2164   0029F0  EFFC  F014         	goto	u1420
  2165   0029F4                     u1421:
  2166   0029F4  EF01  F015         	goto	l2527
  2167   0029F8                     u1420:
  2168   0029F8                     l2525:
  2169   0029F8  5005               	movf	fputc@c^0,w,c
  2170   0029FA  EC52  F018         	call	_putch
  2171   0029FE  EF40  F015         	goto	l1308
  2172   002A02                     l2527:
  2173   002A02  5007               	movf	fputc@fp^0,w,c
  2174   002A04  6ED9               	movwf	fsr2l,c
  2175   002A06  6ADA               	clrf	fsr2h,c
  2176   002A08  0E0A               	movlw	10
  2177   002A0A  26D9               	addwf	fsr2l,f,c
  2178   002A0C  50DE               	movf	postinc2,w,c
  2179   002A0E  10DE               	iorwf	postinc2,w,c
  2180   002A10  B4D8               	btfsc	status,2,c
  2181   002A12  EF0D  F015         	goto	u1431
  2182   002A16  EF0F  F015         	goto	u1430
  2183   002A1A                     u1431:
  2184   002A1A  EF28  F015         	goto	l2531
  2185   002A1E                     u1430:
  2186   002A1E  5007               	movf	fputc@fp^0,w,c
  2187   002A20  6ED9               	movwf	fsr2l,c
  2188   002A22  6ADA               	clrf	fsr2h,c
  2189   002A24  0E0A               	movlw	10
  2190   002A26  26D9               	addwf	fsr2l,f,c
  2191   002A28  5007               	movf	fputc@fp^0,w,c
  2192   002A2A  6EE1               	movwf	fsr1l,c
  2193   002A2C  6AE2               	clrf	fsr1h,c
  2194   002A2E  0E03               	movlw	3
  2195   002A30  26E1               	addwf	fsr1l,f,c
  2196   002A32  50DE               	movf	postinc2,w,c
  2197   002A34  5CE6               	subwf	postinc1,w,c
  2198   002A36  50E6               	movf	postinc1,w,c
  2199   002A38  0A80               	xorlw	128
  2200   002A3A  6E0C               	movwf	(??_fputc+4)^0,c
  2201   002A3C  50DE               	movf	postinc2,w,c
  2202   002A3E  0A80               	xorlw	128
  2203   002A40  580C               	subwfb	(??_fputc+4)^0,w,c
  2204   002A42  B0D8               	btfsc	status,0,c
  2205   002A44  EF26  F015         	goto	u1441
  2206   002A48  EF28  F015         	goto	u1440
  2207   002A4C                     u1441:
  2208   002A4C  EF40  F015         	goto	l1308
  2209   002A50                     u1440:
  2210   002A50                     l2531:
  2211   002A50  5007               	movf	fputc@fp^0,w,c
  2212   002A52  6ED9               	movwf	fsr2l,c
  2213   002A54  6ADA               	clrf	fsr2h,c
  2214   002A56  0E03               	movlw	3
  2215   002A58  26D9               	addwf	fsr2l,f,c
  2216   002A5A  50DF               	movf	indf2,w,c
  2217   002A5C  6E08               	movwf	??_fputc^0,c
  2218   002A5E  5007               	movf	fputc@fp^0,w,c
  2219   002A60  6ED9               	movwf	fsr2l,c
  2220   002A62  6ADA               	clrf	fsr2h,c
  2221   002A64  50DF               	movf	indf2,w,c
  2222   002A66  2408               	addwf	??_fputc^0,w,c
  2223   002A68  6ED9               	movwf	fsr2l,c
  2224   002A6A  6ADA               	clrf	fsr2h,c
  2225   002A6C  C005  FFDF         	movff	fputc@c,indf2
  2226   002A70  5007               	movf	fputc@fp^0,w,c
  2227   002A72  6ED9               	movwf	fsr2l,c
  2228   002A74  6ADA               	clrf	fsr2h,c
  2229   002A76  0E03               	movlw	3
  2230   002A78  26D9               	addwf	fsr2l,f,c
  2231   002A7A  2ADE               	incf	postinc2,f,c
  2232   002A7C  0E00               	movlw	0
  2233   002A7E  22DD               	addwfc	postdec2,f,c
  2234   002A80                     l1308:
  2235   002A80  0012               	return		;funcret
  2236   002A82                     __end_of_fputc:
  2237                           	callstack 0
  2238                           
  2239 ;; *************** function _putch *****************
  2240 ;; Defined at:
  2241 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  c               1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  c               1    0[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used: 1
  2261 ;; Hardware stack levels required when called: 3
  2262 ;; This function calls:
  2263 ;;		Nothing
  2264 ;; This function is called by:
  2265 ;;		_fputc
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text6
  2270   0030A4                     __ptext6:
  2271                           	callstack 0
  2272   0030A4                     _putch:
  2273                           	callstack 23
  2274   0030A4  0012               	return		;funcret
  2275   0030A6                     __end_of_putch:
  2276                           	callstack 0
  2277                           
  2278 ;; *************** function _abs *****************
  2279 ;; Defined at:
  2280 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  a               2   10[COMRAM] int 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  2   10[COMRAM] int 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2298 ;;Total ram usage:        4 bytes
  2299 ;; Hardware stack levels used: 1
  2300 ;; Hardware stack levels required when called: 3
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_vfpfcnvrt
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text7
  2309   002DF0                     __ptext7:
  2310                           	callstack 0
  2311   002DF0                     _abs:
  2312                           	callstack 24
  2313   002DF0  BE0C               	btfsc	(abs@a+1)^0,7,c
  2314   002DF2  EFFD  F016         	goto	u1451
  2315   002DF6  EFFF  F016         	goto	u1450
  2316   002DFA                     u1451:
  2317   002DFA  EF05  F017         	goto	l1293
  2318   002DFE                     u1450:
  2319   002DFE  C00B  F00B         	movff	abs@a,?_abs
  2320   002E02  C00C  F00C         	movff	abs@a+1,?_abs+1
  2321   002E06  EF11  F017         	goto	l1296
  2322   002E0A                     l1293:
  2323   002E0A  C00B  F00D         	movff	abs@a,??_abs
  2324   002E0E  C00C  F00E         	movff	abs@a+1,??_abs+1
  2325   002E12  1E0D               	comf	??_abs^0,f,c
  2326   002E14  1E0E               	comf	(??_abs+1)^0,f,c
  2327   002E16  4A0D               	infsnz	??_abs^0,f,c
  2328   002E18  2A0E               	incf	(??_abs+1)^0,f,c
  2329   002E1A  C00D  F00B         	movff	??_abs,?_abs
  2330   002E1E  C00E  F00C         	movff	??_abs+1,?_abs+1
  2331   002E22                     l1296:
  2332   002E22  0012               	return		;funcret
  2333   002E24                     __end_of_abs:
  2334                           	callstack 0
  2335                           
  2336 ;; *************** function ___awmod *****************
  2337 ;; Defined at:
  2338 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  dividend        2    4[COMRAM] int 
  2341 ;;  divisor         2    6[COMRAM] int 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  sign            1    9[COMRAM] unsigned char 
  2344 ;;  counter         1    8[COMRAM] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  2    4[COMRAM] int 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;Total ram usage:        6 bytes
  2359 ;; Hardware stack levels used: 1
  2360 ;; Hardware stack levels required when called: 3
  2361 ;; This function calls:
  2362 ;;		Nothing
  2363 ;; This function is called by:
  2364 ;;		_vfpfcnvrt
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text8
  2369   002928                     __ptext8:
  2370                           	callstack 0
  2371   002928                     ___awmod:
  2372                           	callstack 24
  2373   002928  0E00               	movlw	0
  2374   00292A  6E0A               	movwf	___awmod@sign^0,c
  2375   00292C  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  2376   00292E  EF9D  F014         	goto	u1320
  2377   002932  EF9B  F014         	goto	u1321
  2378   002936                     u1321:
  2379   002936  EFA3  F014         	goto	l2471
  2380   00293A                     u1320:
  2381   00293A  6C05               	negf	___awmod@dividend^0,c
  2382   00293C  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2383   00293E  B0D8               	btfsc	status,0,c
  2384   002940  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2385   002942  0E01               	movlw	1
  2386   002944  6E0A               	movwf	___awmod@sign^0,c
  2387   002946                     l2471:
  2388   002946  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  2389   002948  EFAA  F014         	goto	u1330
  2390   00294C  EFA8  F014         	goto	u1331
  2391   002950                     u1331:
  2392   002950  EFAE  F014         	goto	l2475
  2393   002954                     u1330:
  2394   002954  6C07               	negf	___awmod@divisor^0,c
  2395   002956  1E08               	comf	(___awmod@divisor+1)^0,f,c
  2396   002958  B0D8               	btfsc	status,0,c
  2397   00295A  2A08               	incf	(___awmod@divisor+1)^0,f,c
  2398   00295C                     l2475:
  2399   00295C  5007               	movf	___awmod@divisor^0,w,c
  2400   00295E  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  2401   002960  B4D8               	btfsc	status,2,c
  2402   002962  EFB5  F014         	goto	u1341
  2403   002966  EFB7  F014         	goto	u1340
  2404   00296A                     u1341:
  2405   00296A  EFDB  F014         	goto	l2491
  2406   00296E                     u1340:
  2407   00296E  0E01               	movlw	1
  2408   002970  6E09               	movwf	___awmod@counter^0,c
  2409   002972  EFBF  F014         	goto	l2481
  2410   002976                     l2479:
  2411   002976  90D8               	bcf	status,0,c
  2412   002978  3607               	rlcf	___awmod@divisor^0,f,c
  2413   00297A  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  2414   00297C  2A09               	incf	___awmod@counter^0,f,c
  2415   00297E                     l2481:
  2416   00297E  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  2417   002980  EFC4  F014         	goto	u1351
  2418   002984  EFC6  F014         	goto	u1350
  2419   002988                     u1351:
  2420   002988  EFBB  F014         	goto	l2479
  2421   00298C                     u1350:
  2422   00298C                     l2483:
  2423   00298C  5007               	movf	___awmod@divisor^0,w,c
  2424   00298E  5C05               	subwf	___awmod@dividend^0,w,c
  2425   002990  5008               	movf	(___awmod@divisor+1)^0,w,c
  2426   002992  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  2427   002994  A0D8               	btfss	status,0,c
  2428   002996  EFCF  F014         	goto	u1361
  2429   00299A  EFD1  F014         	goto	u1360
  2430   00299E                     u1361:
  2431   00299E  EFD5  F014         	goto	l2487
  2432   0029A2                     u1360:
  2433   0029A2  5007               	movf	___awmod@divisor^0,w,c
  2434   0029A4  5E05               	subwf	___awmod@dividend^0,f,c
  2435   0029A6  5008               	movf	(___awmod@divisor+1)^0,w,c
  2436   0029A8  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  2437   0029AA                     l2487:
  2438   0029AA  90D8               	bcf	status,0,c
  2439   0029AC  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  2440   0029AE  3207               	rrcf	___awmod@divisor^0,f,c
  2441   0029B0  2E09               	decfsz	___awmod@counter^0,f,c
  2442   0029B2  EFC6  F014         	goto	l2483
  2443   0029B6                     l2491:
  2444   0029B6  500A               	movf	___awmod@sign^0,w,c
  2445   0029B8  B4D8               	btfsc	status,2,c
  2446   0029BA  EFE1  F014         	goto	u1371
  2447   0029BE  EFE3  F014         	goto	u1370
  2448   0029C2                     u1371:
  2449   0029C2  EFE7  F014         	goto	l2495
  2450   0029C6                     u1370:
  2451   0029C6  6C05               	negf	___awmod@dividend^0,c
  2452   0029C8  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2453   0029CA  B0D8               	btfsc	status,0,c
  2454   0029CC  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2455   0029CE                     l2495:
  2456   0029CE  C005  F005         	movff	___awmod@dividend,?___awmod
  2457   0029D2  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2458   0029D6  0012               	return		;funcret
  2459   0029D8                     __end_of___awmod:
  2460                           	callstack 0
  2461                           
  2462 ;; *************** function _sendTxBuf *****************
  2463 ;; Defined at:
  2464 ;;		line 74 in file "serial.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;Total ram usage:        0 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 4
  2485 ;; This function calls:
  2486 ;;		_isDataInTxBuf
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text9
  2493   002FC8                     __ptext9:
  2494                           	callstack 0
  2495   002FC8                     _sendTxBuf:
  2496                           	callstack 26
  2497   002FC8                     
  2498                           ;serial.c: 75:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2499   002FC8  ECFE  F017         	call	_isDataInTxBuf	;wreg free
  2500   002FCC  0900               	iorlw	0
  2501   002FCE  B4D8               	btfsc	status,2,c
  2502   002FD0  EFEC  F017         	goto	u2111
  2503   002FD4  EFEE  F017         	goto	u2110
  2504   002FD8                     u2111:
  2505   002FD8  EFF0  F017         	goto	l355
  2506   002FDC                     u2110:
  2507   002FDC  010E               	movlb	14	; () banked
  2508   002FDE  852D               	bsf	45,2,b	;volatile
  2509   002FE0                     l355:
  2510   002FE0  0012               	return		;funcret
  2511   002FE2                     __end_of_sendTxBuf:
  2512                           	callstack 0
  2513                           
  2514 ;; *************** function _isDataInTxBuf *****************
  2515 ;; Defined at:
  2516 ;;		line 61 in file "serial.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      unsigned char 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;Total ram usage:        0 bytes
  2535 ;; Hardware stack levels used: 1
  2536 ;; Hardware stack levels required when called: 3
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_sendTxBuf
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text10
  2545   002FFC                     __ptext10:
  2546                           	callstack 0
  2547   002FFC                     _isDataInTxBuf:
  2548                           	callstack 26
  2549   002FFC                     
  2550                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  2551   002FFC  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  2552   002FFE  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2553   003000  A4D8               	btfss	status,2,c
  2554   003002  EF05  F018         	goto	u1711
  2555   003006  EF08  F018         	goto	u1710
  2556   00300A                     u1711:
  2557   00300A  0E01               	movlw	1
  2558   00300C  EF09  F018         	goto	u1720
  2559   003010                     u1710:
  2560   003010  0E00               	movlw	0
  2561   003012                     u1720:
  2562   003012  0012               	return		;funcret
  2563   003014                     __end_of_isDataInTxBuf:
  2564                           	callstack 0
  2565                           
  2566 ;; *************** function _move *****************
  2567 ;; Defined at:
  2568 ;;		line 87 in file "dc_motor.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  2571 ;;		 -> main@motorL(10), 
  2572 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  2573 ;;		 -> main@motorR(10), 
  2574 ;;  color           1   36[COMRAM] unsigned char 
  2575 ;;  straightSpee    1   37[COMRAM] unsigned char 
  2576 ;;  reverseDurat    1   38[COMRAM] unsigned char 
  2577 ;;  straightRamp    1   39[COMRAM] unsigned char 
  2578 ;;  turnSpeed       1   40[COMRAM] unsigned char 
  2579 ;;  turnDuration    1   41[COMRAM] unsigned char 
  2580 ;;  turnRamp        1   42[COMRAM] unsigned char 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2592 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;Total ram usage:       11 bytes
  2597 ;; Hardware stack levels used: 1
  2598 ;; Hardware stack levels required when called: 6
  2599 ;; This function calls:
  2600 ;;		_fullSpeedAhead
  2601 ;;		_reverseOneSquare
  2602 ;;		_turnLeft
  2603 ;;		_turnRight
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text11
  2610   001368                     __ptext11:
  2611                           	callstack 0
  2612   001368                     _move:
  2613                           	callstack 24
  2614   001368                     
  2615                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  2616   001368  0425               	decf	move@color^0,w,c
  2617   00136A  A4D8               	btfss	status,2,c
  2618   00136C  EFBA  F009         	goto	u2171
  2619   001370  EFBC  F009         	goto	u2170
  2620   001374                     u2171:
  2621   001374  EFF8  F009         	goto	l3183
  2622   001378                     u2170:
  2623   001378                     
  2624                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2625   001378  C023  F017         	movff	move@mL,turnRight@mL
  2626   00137C  C024  F018         	movff	move@mR,turnRight@mR
  2627   001380  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2628   001384  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2629   001388  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2630   00138C  ECCB  F00F         	call	_turnRight	;wreg free
  2631   001390                     
  2632                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2633   001390  0E05               	movlw	5
  2634   001392  6E2D               	movwf	(??_move+1)^0,c
  2635   001394  0E0F               	movlw	15
  2636   001396  6E2C               	movwf	??_move^0,c
  2637   001398  0EF1               	movlw	241
  2638   00139A                     u2567:
  2639   00139A  2EE8               	decfsz	wreg,f,c
  2640   00139C  D7FE               	bra	u2567
  2641   00139E  2E2C               	decfsz	??_move^0,f,c
  2642   0013A0  D7FC               	bra	u2567
  2643   0013A2  2E2D               	decfsz	(??_move+1)^0,f,c
  2644   0013A4  D7FA               	bra	u2567
  2645   0013A6  0000               	nop	
  2646   0013A8                     
  2647                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2648   0013A8  C023  F017         	movff	move@mL,turnRight@mL
  2649   0013AC  C024  F018         	movff	move@mR,turnRight@mR
  2650   0013B0  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2651   0013B4  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2652   0013B8  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2653   0013BC  ECCB  F00F         	call	_turnRight	;wreg free
  2654                           
  2655                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2656   0013C0  0E05               	movlw	5
  2657   0013C2  6E2D               	movwf	(??_move+1)^0,c
  2658   0013C4  0E0F               	movlw	15
  2659   0013C6  6E2C               	movwf	??_move^0,c
  2660   0013C8  0EF1               	movlw	241
  2661   0013CA                     u2577:
  2662   0013CA  2EE8               	decfsz	wreg,f,c
  2663   0013CC  D7FE               	bra	u2577
  2664   0013CE  2E2C               	decfsz	??_move^0,f,c
  2665   0013D0  D7FC               	bra	u2577
  2666   0013D2  2E2D               	decfsz	(??_move+1)^0,f,c
  2667   0013D4  D7FA               	bra	u2577
  2668   0013D6  0000               	nop	
  2669   0013D8                     l3181:
  2670                           
  2671                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2672   0013D8  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2673   0013DC  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2674   0013E0  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2675   0013E4  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2676   0013E8  ECC9  F013         	call	_fullSpeedAhead	;wreg free
  2677                           
  2678                           ;dc_motor.c: 95:     }
  2679   0013EC  EF70  F00B         	goto	l481
  2680   0013F0                     l3183:
  2681   0013F0  0E02               	movlw	2
  2682   0013F2  1825               	xorwf	move@color^0,w,c
  2683   0013F4  A4D8               	btfss	status,2,c
  2684   0013F6  EFFF  F009         	goto	u2181
  2685   0013FA  EF01  F00A         	goto	u2180
  2686   0013FE                     u2181:
  2687   0013FE  EF33  F00A         	goto	l3193
  2688   001402                     u2180:
  2689   001402                     
  2690                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2691   001402  C023  F017         	movff	move@mL,turnLeft@mL
  2692   001406  C024  F018         	movff	move@mR,turnLeft@mR
  2693   00140A  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2694   00140E  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2695   001412  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2696   001416  ECA6  F010         	call	_turnLeft	;wreg free
  2697   00141A                     
  2698                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2699   00141A  0E05               	movlw	5
  2700   00141C  6E2D               	movwf	(??_move+1)^0,c
  2701   00141E  0E0F               	movlw	15
  2702   001420  6E2C               	movwf	??_move^0,c
  2703   001422  0EF1               	movlw	241
  2704   001424                     u2587:
  2705   001424  2EE8               	decfsz	wreg,f,c
  2706   001426  D7FE               	bra	u2587
  2707   001428  2E2C               	decfsz	??_move^0,f,c
  2708   00142A  D7FC               	bra	u2587
  2709   00142C  2E2D               	decfsz	(??_move+1)^0,f,c
  2710   00142E  D7FA               	bra	u2587
  2711   001430  0000               	nop	
  2712   001432                     
  2713                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2714   001432  C023  F017         	movff	move@mL,turnLeft@mL
  2715   001436  C024  F018         	movff	move@mR,turnLeft@mR
  2716   00143A  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2717   00143E  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2718   001442  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2719   001446  ECA6  F010         	call	_turnLeft	;wreg free
  2720                           
  2721                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2722   00144A  0E05               	movlw	5
  2723   00144C  6E2D               	movwf	(??_move+1)^0,c
  2724   00144E  0E0F               	movlw	15
  2725   001450  6E2C               	movwf	??_move^0,c
  2726   001452  0EF1               	movlw	241
  2727   001454                     u2597:
  2728   001454  2EE8               	decfsz	wreg,f,c
  2729   001456  D7FE               	bra	u2597
  2730   001458  2E2C               	decfsz	??_move^0,f,c
  2731   00145A  D7FC               	bra	u2597
  2732   00145C  2E2D               	decfsz	(??_move+1)^0,f,c
  2733   00145E  D7FA               	bra	u2597
  2734   001460  0000               	nop	
  2735   001462  EFEC  F009         	goto	l3181
  2736   001466                     l3193:
  2737   001466  0E03               	movlw	3
  2738   001468  1825               	xorwf	move@color^0,w,c
  2739   00146A  A4D8               	btfss	status,2,c
  2740   00146C  EF3A  F00A         	goto	u2191
  2741   001470  EF3C  F00A         	goto	u2190
  2742   001474                     u2191:
  2743   001474  EF9E  F00A         	goto	l3209
  2744   001478                     u2190:
  2745   001478                     
  2746                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2747   001478  C023  F017         	movff	move@mL,turnLeft@mL
  2748   00147C  C024  F018         	movff	move@mR,turnLeft@mR
  2749   001480  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2750   001484  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2751   001488  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2752   00148C  ECA6  F010         	call	_turnLeft	;wreg free
  2753   001490                     
  2754                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2755   001490  0E05               	movlw	5
  2756   001492  6E2D               	movwf	(??_move+1)^0,c
  2757   001494  0E0F               	movlw	15
  2758   001496  6E2C               	movwf	??_move^0,c
  2759   001498  0EF1               	movlw	241
  2760   00149A                     u2607:
  2761   00149A  2EE8               	decfsz	wreg,f,c
  2762   00149C  D7FE               	bra	u2607
  2763   00149E  2E2C               	decfsz	??_move^0,f,c
  2764   0014A0  D7FC               	bra	u2607
  2765   0014A2  2E2D               	decfsz	(??_move+1)^0,f,c
  2766   0014A4  D7FA               	bra	u2607
  2767   0014A6  0000               	nop	
  2768   0014A8                     
  2769                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2770   0014A8  C023  F017         	movff	move@mL,turnLeft@mL
  2771   0014AC  C024  F018         	movff	move@mR,turnLeft@mR
  2772   0014B0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2773   0014B4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2774   0014B8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2775   0014BC  ECA6  F010         	call	_turnLeft	;wreg free
  2776                           
  2777                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2778   0014C0  0E05               	movlw	5
  2779   0014C2  6E2D               	movwf	(??_move+1)^0,c
  2780   0014C4  0E0F               	movlw	15
  2781   0014C6  6E2C               	movwf	??_move^0,c
  2782   0014C8  0EF1               	movlw	241
  2783   0014CA                     u2617:
  2784   0014CA  2EE8               	decfsz	wreg,f,c
  2785   0014CC  D7FE               	bra	u2617
  2786   0014CE  2E2C               	decfsz	??_move^0,f,c
  2787   0014D0  D7FC               	bra	u2617
  2788   0014D2  2E2D               	decfsz	(??_move+1)^0,f,c
  2789   0014D4  D7FA               	bra	u2617
  2790   0014D6  0000               	nop	
  2791   0014D8                     
  2792                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2793   0014D8  C023  F017         	movff	move@mL,turnLeft@mL
  2794   0014DC  C024  F018         	movff	move@mR,turnLeft@mR
  2795   0014E0  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2796   0014E4  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2797   0014E8  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2798   0014EC  ECA6  F010         	call	_turnLeft	;wreg free
  2799   0014F0                     
  2800                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2801   0014F0  0E05               	movlw	5
  2802   0014F2  6E2D               	movwf	(??_move+1)^0,c
  2803   0014F4  0E0F               	movlw	15
  2804   0014F6  6E2C               	movwf	??_move^0,c
  2805   0014F8  0EF1               	movlw	241
  2806   0014FA                     u2627:
  2807   0014FA  2EE8               	decfsz	wreg,f,c
  2808   0014FC  D7FE               	bra	u2627
  2809   0014FE  2E2C               	decfsz	??_move^0,f,c
  2810   001500  D7FC               	bra	u2627
  2811   001502  2E2D               	decfsz	(??_move+1)^0,f,c
  2812   001504  D7FA               	bra	u2627
  2813   001506  0000               	nop	
  2814                           
  2815                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2816   001508  C023  F017         	movff	move@mL,turnLeft@mL
  2817   00150C  C024  F018         	movff	move@mR,turnLeft@mR
  2818   001510  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2819   001514  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2820   001518  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2821   00151C  ECA6  F010         	call	_turnLeft	;wreg free
  2822   001520                     
  2823                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2824   001520  0E05               	movlw	5
  2825   001522  6E2D               	movwf	(??_move+1)^0,c
  2826   001524  0E0F               	movlw	15
  2827   001526  6E2C               	movwf	??_move^0,c
  2828   001528  0EF1               	movlw	241
  2829   00152A                     u2637:
  2830   00152A  2EE8               	decfsz	wreg,f,c
  2831   00152C  D7FE               	bra	u2637
  2832   00152E  2E2C               	decfsz	??_move^0,f,c
  2833   001530  D7FC               	bra	u2637
  2834   001532  2E2D               	decfsz	(??_move+1)^0,f,c
  2835   001534  D7FA               	bra	u2637
  2836   001536  0000               	nop	
  2837   001538  EFEC  F009         	goto	l3181
  2838   00153C                     l3209:
  2839   00153C  0E04               	movlw	4
  2840   00153E  1825               	xorwf	move@color^0,w,c
  2841   001540  A4D8               	btfss	status,2,c
  2842   001542  EFA5  F00A         	goto	u2201
  2843   001546  EFA7  F00A         	goto	u2200
  2844   00154A                     u2201:
  2845   00154A  EFFB  F00A         	goto	l3221
  2846   00154E                     u2200:
  2847   00154E                     
  2848                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2849   00154E  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2850   001552  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2851   001556  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2852   00155A  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2853   00155E  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2854   001562  ECE9  F00E         	call	_reverseOneSquare	;wreg free
  2855   001566                     l3213:
  2856                           
  2857                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2858   001566  0E05               	movlw	5
  2859   001568  6E2D               	movwf	(??_move+1)^0,c
  2860   00156A  0E0F               	movlw	15
  2861   00156C  6E2C               	movwf	??_move^0,c
  2862   00156E  0EF1               	movlw	241
  2863   001570                     u2647:
  2864   001570  2EE8               	decfsz	wreg,f,c
  2865   001572  D7FE               	bra	u2647
  2866   001574  2E2C               	decfsz	??_move^0,f,c
  2867   001576  D7FC               	bra	u2647
  2868   001578  2E2D               	decfsz	(??_move+1)^0,f,c
  2869   00157A  D7FA               	bra	u2647
  2870   00157C  0000               	nop	
  2871   00157E                     
  2872                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2873   00157E  C023  F017         	movff	move@mL,turnRight@mL
  2874   001582  C024  F018         	movff	move@mR,turnRight@mR
  2875   001586  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2876   00158A  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2877   00158E  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2878   001592  ECCB  F00F         	call	_turnRight	;wreg free
  2879                           
  2880                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2881   001596  0E05               	movlw	5
  2882   001598  6E2D               	movwf	(??_move+1)^0,c
  2883   00159A  0E0F               	movlw	15
  2884   00159C  6E2C               	movwf	??_move^0,c
  2885   00159E  0EF1               	movlw	241
  2886   0015A0                     u2657:
  2887   0015A0  2EE8               	decfsz	wreg,f,c
  2888   0015A2  D7FE               	bra	u2657
  2889   0015A4  2E2C               	decfsz	??_move^0,f,c
  2890   0015A6  D7FC               	bra	u2657
  2891   0015A8  2E2D               	decfsz	(??_move+1)^0,f,c
  2892   0015AA  D7FA               	bra	u2657
  2893   0015AC  0000               	nop	
  2894   0015AE                     
  2895                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2896   0015AE  C023  F017         	movff	move@mL,turnRight@mL
  2897   0015B2  C024  F018         	movff	move@mR,turnRight@mR
  2898   0015B6  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2899   0015BA  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2900   0015BE  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2901   0015C2  ECCB  F00F         	call	_turnRight	;wreg free
  2902   0015C6                     l3219:
  2903                           
  2904                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2905   0015C6  0E05               	movlw	5
  2906   0015C8  6E2D               	movwf	(??_move+1)^0,c
  2907   0015CA  0E0F               	movlw	15
  2908   0015CC  6E2C               	movwf	??_move^0,c
  2909   0015CE  0EF1               	movlw	241
  2910   0015D0                     u2667:
  2911   0015D0  2EE8               	decfsz	wreg,f,c
  2912   0015D2  D7FE               	bra	u2667
  2913   0015D4  2E2C               	decfsz	??_move^0,f,c
  2914   0015D6  D7FC               	bra	u2667
  2915   0015D8  2E2D               	decfsz	(??_move+1)^0,f,c
  2916   0015DA  D7FA               	bra	u2667
  2917   0015DC  0000               	nop	
  2918                           
  2919                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2920   0015DE  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2921   0015E2  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2922   0015E6  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2923   0015EA  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2924   0015EE  ECC9  F013         	call	_fullSpeedAhead	;wreg free
  2925                           
  2926                           ;dc_motor.c: 125:     }
  2927   0015F2  EF70  F00B         	goto	l481
  2928   0015F6                     l3221:
  2929   0015F6  0E05               	movlw	5
  2930   0015F8  1825               	xorwf	move@color^0,w,c
  2931   0015FA  A4D8               	btfss	status,2,c
  2932   0015FC  EF02  F00B         	goto	u2211
  2933   001600  EF04  F00B         	goto	u2210
  2934   001604                     u2211:
  2935   001604  EF42  F00B         	goto	l3233
  2936   001608                     u2210:
  2937   001608                     
  2938                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2939   001608  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2940   00160C  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2941   001610  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2942   001614  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2943   001618  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2944   00161C  ECE9  F00E         	call	_reverseOneSquare	;wreg free
  2945   001620                     l3225:
  2946                           
  2947                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2948   001620  0E05               	movlw	5
  2949   001622  6E2D               	movwf	(??_move+1)^0,c
  2950   001624  0E0F               	movlw	15
  2951   001626  6E2C               	movwf	??_move^0,c
  2952   001628  0EF1               	movlw	241
  2953   00162A                     u2677:
  2954   00162A  2EE8               	decfsz	wreg,f,c
  2955   00162C  D7FE               	bra	u2677
  2956   00162E  2E2C               	decfsz	??_move^0,f,c
  2957   001630  D7FC               	bra	u2677
  2958   001632  2E2D               	decfsz	(??_move+1)^0,f,c
  2959   001634  D7FA               	bra	u2677
  2960   001636  0000               	nop	
  2961   001638                     
  2962                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2963   001638  C023  F017         	movff	move@mL,turnLeft@mL
  2964   00163C  C024  F018         	movff	move@mR,turnLeft@mR
  2965   001640  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2966   001644  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2967   001648  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2968   00164C  ECA6  F010         	call	_turnLeft	;wreg free
  2969                           
  2970                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2971   001650  0E05               	movlw	5
  2972   001652  6E2D               	movwf	(??_move+1)^0,c
  2973   001654  0E0F               	movlw	15
  2974   001656  6E2C               	movwf	??_move^0,c
  2975   001658  0EF1               	movlw	241
  2976   00165A                     u2687:
  2977   00165A  2EE8               	decfsz	wreg,f,c
  2978   00165C  D7FE               	bra	u2687
  2979   00165E  2E2C               	decfsz	??_move^0,f,c
  2980   001660  D7FC               	bra	u2687
  2981   001662  2E2D               	decfsz	(??_move+1)^0,f,c
  2982   001664  D7FA               	bra	u2687
  2983   001666  0000               	nop	
  2984   001668                     
  2985                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2986   001668  C023  F017         	movff	move@mL,turnLeft@mL
  2987   00166C  C024  F018         	movff	move@mR,turnLeft@mR
  2988   001670  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2989   001674  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2990   001678  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2991   00167C  ECA6  F010         	call	_turnLeft	;wreg free
  2992   001680  EFE3  F00A         	goto	l3219
  2993   001684                     l3233:
  2994   001684  0E06               	movlw	6
  2995   001686  1825               	xorwf	move@color^0,w,c
  2996   001688  A4D8               	btfss	status,2,c
  2997   00168A  EF49  F00B         	goto	u2221
  2998   00168E  EF4B  F00B         	goto	u2220
  2999   001692                     u2221:
  3000   001692  EF59  F00B         	goto	l3245
  3001   001696                     u2220:
  3002   001696                     
  3003                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3004   001696  C023  F017         	movff	move@mL,turnRight@mL
  3005   00169A  C024  F018         	movff	move@mR,turnRight@mR
  3006   00169E  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  3007   0016A2  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  3008   0016A6  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  3009   0016AA  ECCB  F00F         	call	_turnRight	;wreg free
  3010   0016AE  EFB3  F00A         	goto	l3213
  3011   0016B2                     l3245:
  3012   0016B2  0E07               	movlw	7
  3013   0016B4  1825               	xorwf	move@color^0,w,c
  3014   0016B6  A4D8               	btfss	status,2,c
  3015   0016B8  EF60  F00B         	goto	u2231
  3016   0016BC  EF62  F00B         	goto	u2230
  3017   0016C0                     u2231:
  3018   0016C0  EF70  F00B         	goto	l479
  3019   0016C4                     u2230:
  3020   0016C4                     
  3021                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3022   0016C4  C023  F017         	movff	move@mL,turnLeft@mL
  3023   0016C8  C024  F018         	movff	move@mR,turnLeft@mR
  3024   0016CC  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  3025   0016D0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  3026   0016D4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  3027   0016D8  ECA6  F010         	call	_turnLeft	;wreg free
  3028   0016DC  EF10  F00B         	goto	l3225
  3029   0016E0                     l479:
  3030   0016E0                     l481:
  3031   0016E0  0012               	return		;funcret
  3032   0016E2                     __end_of_move:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _turnRight *****************
  3036 ;; Defined at:
  3037 ;;		line 214 in file "dc_motor.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3040 ;;		 -> main@motorL(10), 
  3041 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3042 ;;		 -> main@motorR(10), 
  3043 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  3044 ;;  turnDuration    1   25[COMRAM] unsigned char 
  3045 ;;  turnRamp        1   26[COMRAM] unsigned char 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  cur_power       2   32[COMRAM] int 
  3048 ;;  i               2   30[COMRAM] int 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3058 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3059 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3060 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3061 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3062 ;;Total ram usage:       12 bytes
  3063 ;; Hardware stack levels used: 1
  3064 ;; Hardware stack levels required when called: 5
  3065 ;; This function calls:
  3066 ;;		_setMotorPWM
  3067 ;; This function is called by:
  3068 ;;		_move
  3069 ;;		_calibration
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text12
  3074   001F96                     __ptext12:
  3075                           	callstack 0
  3076   001F96                     _turnRight:
  3077                           	callstack 24
  3078   001F96                     
  3079                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  3080   001F96  5017               	movf	turnRight@mL^0,w,c
  3081   001F98  6ED9               	movwf	fsr2l,c
  3082   001F9A  6ADA               	clrf	fsr2h,c
  3083   001F9C  0E01               	movlw	1
  3084   001F9E  26D9               	addwf	fsr2l,f,c
  3085   001FA0  0E01               	movlw	1
  3086   001FA2  6EDF               	movwf	indf2,c
  3087                           
  3088                           ;dc_motor.c: 217:     mR->direction = 0;
  3089   001FA4  5018               	movf	turnRight@mR^0,w,c
  3090   001FA6  6ED9               	movwf	fsr2l,c
  3091   001FA8  6ADA               	clrf	fsr2h,c
  3092   001FAA  0E01               	movlw	1
  3093   001FAC  26D9               	addwf	fsr2l,f,c
  3094   001FAE  6ADF               	clrf	indf2,c
  3095   001FB0                     
  3096                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3097   001FB0  0E00               	movlw	0
  3098   001FB2  6E22               	movwf	(turnRight@cur_power+1)^0,c
  3099   001FB4  0E01               	movlw	1
  3100   001FB6  6E21               	movwf	turnRight@cur_power^0,c
  3101   001FB8  EF20  F010         	goto	l2799
  3102   001FBC                     l2785:
  3103                           
  3104                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  3105   001FBC  5017               	movf	turnRight@mL^0,w,c
  3106   001FBE  6ED9               	movwf	fsr2l,c
  3107   001FC0  6ADA               	clrf	fsr2h,c
  3108   001FC2  5017               	movf	turnRight@mL^0,w,c
  3109   001FC4  6EE1               	movwf	fsr1l,c
  3110   001FC6  6AE2               	clrf	fsr1h,c
  3111   001FC8  0E09               	movlw	9
  3112   001FCA  26E1               	addwf	fsr1l,f,c
  3113   001FCC  50E7               	movf	indf1,w,c
  3114   001FCE  2421               	addwf	turnRight@cur_power^0,w,c
  3115   001FD0  6EDF               	movwf	indf2,c
  3116                           
  3117                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  3118   001FD2  5018               	movf	turnRight@mR^0,w,c
  3119   001FD4  6ED9               	movwf	fsr2l,c
  3120   001FD6  6ADA               	clrf	fsr2h,c
  3121   001FD8  5018               	movf	turnRight@mR^0,w,c
  3122   001FDA  6EE1               	movwf	fsr1l,c
  3123   001FDC  6AE2               	clrf	fsr1h,c
  3124   001FDE  0E09               	movlw	9
  3125   001FE0  26E1               	addwf	fsr1l,f,c
  3126   001FE2  50E7               	movf	indf1,w,c
  3127   001FE4  2421               	addwf	turnRight@cur_power^0,w,c
  3128   001FE6  6EDF               	movwf	indf2,c
  3129   001FE8                     
  3130                           ;dc_motor.c: 223:         setMotorPWM(mL);
  3131   001FE8  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  3132   001FEC  EC81  F011         	call	_setMotorPWM	;wreg free
  3133   001FF0                     
  3134                           ;dc_motor.c: 224:         setMotorPWM(mR);
  3135   001FF0  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  3136   001FF4  EC81  F011         	call	_setMotorPWM	;wreg free
  3137   001FF8                     
  3138                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  3139   001FF8  0E00               	movlw	0
  3140   001FFA  6E20               	movwf	(turnRight@i+1)^0,c
  3141   001FFC  0E00               	movlw	0
  3142   001FFE  6E1F               	movwf	turnRight@i^0,c
  3143   002000  EF0C  F010         	goto	l511
  3144   002004                     l2793:
  3145                           
  3146                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3147   002004  0E68               	movlw	104
  3148   002006  6E1C               	movwf	??_turnRight^0,c
  3149   002008  0EE4               	movlw	228
  3150   00200A                     u2697:
  3151   00200A  2EE8               	decfsz	wreg,f,c
  3152   00200C  D7FE               	bra	u2697
  3153   00200E  2E1C               	decfsz	??_turnRight^0,f,c
  3154   002010  D7FC               	bra	u2697
  3155   002012  D000               	nop2	
  3156   002014                     
  3157                           ;dc_motor.c: 227:         }
  3158   002014  4A1F               	infsnz	turnRight@i^0,f,c
  3159   002016  2A20               	incf	(turnRight@i+1)^0,f,c
  3160   002018                     l511:
  3161   002018  501B               	movf	turnRight@turnRamp^0,w,c
  3162   00201A  6E1C               	movwf	??_turnRight^0,c
  3163   00201C  6A1D               	clrf	(??_turnRight+1)^0,c
  3164   00201E  501C               	movf	??_turnRight^0,w,c
  3165   002020  5C1F               	subwf	turnRight@i^0,w,c
  3166   002022  5020               	movf	(turnRight@i+1)^0,w,c
  3167   002024  0A80               	xorlw	128
  3168   002026  6E1E               	movwf	(??_turnRight+2)^0,c
  3169   002028  501D               	movf	(??_turnRight+1)^0,w,c
  3170   00202A  0A80               	xorlw	128
  3171   00202C  581E               	subwfb	(??_turnRight+2)^0,w,c
  3172   00202E  A0D8               	btfss	status,0,c
  3173   002030  EF1C  F010         	goto	u1751
  3174   002034  EF1E  F010         	goto	u1750
  3175   002038                     u1751:
  3176   002038  EF02  F010         	goto	l2793
  3177   00203C                     u1750:
  3178   00203C                     
  3179                           ;dc_motor.c: 228:     }
  3180   00203C  4A21               	infsnz	turnRight@cur_power^0,f,c
  3181   00203E  2A22               	incf	(turnRight@cur_power+1)^0,f,c
  3182   002040                     l2799:
  3183   002040  5019               	movf	turnRight@turnSpeed^0,w,c
  3184   002042  6E1C               	movwf	??_turnRight^0,c
  3185   002044  6A1D               	clrf	(??_turnRight+1)^0,c
  3186   002046  5021               	movf	turnRight@cur_power^0,w,c
  3187   002048  5C1C               	subwf	??_turnRight^0,w,c
  3188   00204A  501D               	movf	(??_turnRight+1)^0,w,c
  3189   00204C  0A80               	xorlw	128
  3190   00204E  6E1E               	movwf	(??_turnRight+2)^0,c
  3191   002050  5022               	movf	(turnRight@cur_power+1)^0,w,c
  3192   002052  0A80               	xorlw	128
  3193   002054  581E               	subwfb	(??_turnRight+2)^0,w,c
  3194   002056  B0D8               	btfsc	status,0,c
  3195   002058  EF30  F010         	goto	u1761
  3196   00205C  EF32  F010         	goto	u1760
  3197   002060                     u1761:
  3198   002060  EFDE  F00F         	goto	l2785
  3199   002064                     u1760:
  3200   002064                     
  3201                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  3202   002064  0E00               	movlw	0
  3203   002066  6E20               	movwf	(turnRight@i+1)^0,c
  3204   002068  0E00               	movlw	0
  3205   00206A  6E1F               	movwf	turnRight@i^0,c
  3206   00206C  EF42  F010         	goto	l515
  3207   002070                     l2803:
  3208                           
  3209                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3210   002070  0E68               	movlw	104
  3211   002072  6E1C               	movwf	??_turnRight^0,c
  3212   002074  0EE4               	movlw	228
  3213   002076                     u2707:
  3214   002076  2EE8               	decfsz	wreg,f,c
  3215   002078  D7FE               	bra	u2707
  3216   00207A  2E1C               	decfsz	??_turnRight^0,f,c
  3217   00207C  D7FC               	bra	u2707
  3218   00207E  D000               	nop2	
  3219   002080                     
  3220                           ;dc_motor.c: 232:         }
  3221   002080  4A1F               	infsnz	turnRight@i^0,f,c
  3222   002082  2A20               	incf	(turnRight@i+1)^0,f,c
  3223   002084                     l515:
  3224   002084  501A               	movf	turnRight@turnDuration^0,w,c
  3225   002086  6E1C               	movwf	??_turnRight^0,c
  3226   002088  6A1D               	clrf	(??_turnRight+1)^0,c
  3227   00208A  501C               	movf	??_turnRight^0,w,c
  3228   00208C  5C1F               	subwf	turnRight@i^0,w,c
  3229   00208E  5020               	movf	(turnRight@i+1)^0,w,c
  3230   002090  0A80               	xorlw	128
  3231   002092  6E1E               	movwf	(??_turnRight+2)^0,c
  3232   002094  501D               	movf	(??_turnRight+1)^0,w,c
  3233   002096  0A80               	xorlw	128
  3234   002098  581E               	subwfb	(??_turnRight+2)^0,w,c
  3235   00209A  A0D8               	btfss	status,0,c
  3236   00209C  EF52  F010         	goto	u1771
  3237   0020A0  EF54  F010         	goto	u1770
  3238   0020A4                     u1771:
  3239   0020A4  EF38  F010         	goto	l2803
  3240   0020A8                     u1770:
  3241   0020A8                     
  3242                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3243   0020A8  C019  F021         	movff	turnRight@turnSpeed,turnRight@cur_power
  3244   0020AC  6A22               	clrf	(turnRight@cur_power+1)^0,c
  3245   0020AE                     l2807:
  3246   0020AE  BE22               	btfsc	(turnRight@cur_power+1)^0,7,c
  3247   0020B0  EF5E  F010         	goto	u1780
  3248   0020B4  EF5C  F010         	goto	u1781
  3249   0020B8                     u1781:
  3250   0020B8  EF60  F010         	goto	l2811
  3251   0020BC                     u1780:
  3252   0020BC  EFA5  F010         	goto	l523
  3253   0020C0                     l2811:
  3254                           
  3255                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  3256   0020C0  5017               	movf	turnRight@mL^0,w,c
  3257   0020C2  6ED9               	movwf	fsr2l,c
  3258   0020C4  6ADA               	clrf	fsr2h,c
  3259   0020C6  5017               	movf	turnRight@mL^0,w,c
  3260   0020C8  6EE1               	movwf	fsr1l,c
  3261   0020CA  6AE2               	clrf	fsr1h,c
  3262   0020CC  0E09               	movlw	9
  3263   0020CE  26E1               	addwf	fsr1l,f,c
  3264   0020D0  50E7               	movf	indf1,w,c
  3265   0020D2  2421               	addwf	turnRight@cur_power^0,w,c
  3266   0020D4  6EDF               	movwf	indf2,c
  3267                           
  3268                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  3269   0020D6  5018               	movf	turnRight@mR^0,w,c
  3270   0020D8  6ED9               	movwf	fsr2l,c
  3271   0020DA  6ADA               	clrf	fsr2h,c
  3272   0020DC  5018               	movf	turnRight@mR^0,w,c
  3273   0020DE  6EE1               	movwf	fsr1l,c
  3274   0020E0  6AE2               	clrf	fsr1h,c
  3275   0020E2  0E09               	movlw	9
  3276   0020E4  26E1               	addwf	fsr1l,f,c
  3277   0020E6  50E7               	movf	indf1,w,c
  3278   0020E8  2421               	addwf	turnRight@cur_power^0,w,c
  3279   0020EA  6EDF               	movwf	indf2,c
  3280   0020EC                     
  3281                           ;dc_motor.c: 237:         setMotorPWM(mL);
  3282   0020EC  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  3283   0020F0  EC81  F011         	call	_setMotorPWM	;wreg free
  3284   0020F4                     
  3285                           ;dc_motor.c: 238:         setMotorPWM(mR);
  3286   0020F4  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  3287   0020F8  EC81  F011         	call	_setMotorPWM	;wreg free
  3288   0020FC                     
  3289                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  3290   0020FC  0E00               	movlw	0
  3291   0020FE  6E20               	movwf	(turnRight@i+1)^0,c
  3292   002100  0E00               	movlw	0
  3293   002102  6E1F               	movwf	turnRight@i^0,c
  3294   002104  EF8E  F010         	goto	l520
  3295   002108                     l2819:
  3296                           
  3297                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3298   002108  0E68               	movlw	104
  3299   00210A  6E1C               	movwf	??_turnRight^0,c
  3300   00210C  0EE4               	movlw	228
  3301   00210E                     u2717:
  3302   00210E  2EE8               	decfsz	wreg,f,c
  3303   002110  D7FE               	bra	u2717
  3304   002112  2E1C               	decfsz	??_turnRight^0,f,c
  3305   002114  D7FC               	bra	u2717
  3306   002116  D000               	nop2	
  3307   002118                     
  3308                           ;dc_motor.c: 241:         }
  3309   002118  4A1F               	infsnz	turnRight@i^0,f,c
  3310   00211A  2A20               	incf	(turnRight@i+1)^0,f,c
  3311   00211C                     l520:
  3312   00211C  501B               	movf	turnRight@turnRamp^0,w,c
  3313   00211E  6E1C               	movwf	??_turnRight^0,c
  3314   002120  6A1D               	clrf	(??_turnRight+1)^0,c
  3315   002122  501C               	movf	??_turnRight^0,w,c
  3316   002124  5C1F               	subwf	turnRight@i^0,w,c
  3317   002126  5020               	movf	(turnRight@i+1)^0,w,c
  3318   002128  0A80               	xorlw	128
  3319   00212A  6E1E               	movwf	(??_turnRight+2)^0,c
  3320   00212C  501D               	movf	(??_turnRight+1)^0,w,c
  3321   00212E  0A80               	xorlw	128
  3322   002130  581E               	subwfb	(??_turnRight+2)^0,w,c
  3323   002132  A0D8               	btfss	status,0,c
  3324   002134  EF9E  F010         	goto	u1791
  3325   002138  EFA0  F010         	goto	u1790
  3326   00213C                     u1791:
  3327   00213C  EF84  F010         	goto	l2819
  3328   002140                     u1790:
  3329   002140                     
  3330                           ;dc_motor.c: 242:     }
  3331   002140  0621               	decf	turnRight@cur_power^0,f,c
  3332   002142  A0D8               	btfss	status,0,c
  3333   002144  0622               	decf	(turnRight@cur_power+1)^0,f,c
  3334   002146  EF57  F010         	goto	l2807
  3335   00214A                     l523:
  3336   00214A  0012               	return		;funcret
  3337   00214C                     __end_of_turnRight:
  3338                           	callstack 0
  3339                           
  3340 ;; *************** function _turnLeft *****************
  3341 ;; Defined at:
  3342 ;;		line 182 in file "dc_motor.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3345 ;;		 -> main@motorL(10), 
  3346 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3347 ;;		 -> main@motorR(10), 
  3348 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  3349 ;;  turnDuration    1   25[COMRAM] unsigned char 
  3350 ;;  turnRamp        1   26[COMRAM] unsigned char 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  cur_power       2   32[COMRAM] int 
  3353 ;;  i               2   30[COMRAM] int 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3363 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3365 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3366 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3367 ;;Total ram usage:       12 bytes
  3368 ;; Hardware stack levels used: 1
  3369 ;; Hardware stack levels required when called: 5
  3370 ;; This function calls:
  3371 ;;		_setMotorPWM
  3372 ;; This function is called by:
  3373 ;;		_move
  3374 ;;		_calibration
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text13
  3379   00214C                     __ptext13:
  3380                           	callstack 0
  3381   00214C                     _turnLeft:
  3382                           	callstack 24
  3383   00214C                     
  3384                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  3385   00214C  5017               	movf	turnLeft@mL^0,w,c
  3386   00214E  6ED9               	movwf	fsr2l,c
  3387   002150  6ADA               	clrf	fsr2h,c
  3388   002152  0E01               	movlw	1
  3389   002154  26D9               	addwf	fsr2l,f,c
  3390   002156  6ADF               	clrf	indf2,c
  3391                           
  3392                           ;dc_motor.c: 185:     mR->direction = 1;
  3393   002158  5018               	movf	turnLeft@mR^0,w,c
  3394   00215A  6ED9               	movwf	fsr2l,c
  3395   00215C  6ADA               	clrf	fsr2h,c
  3396   00215E  0E01               	movlw	1
  3397   002160  26D9               	addwf	fsr2l,f,c
  3398   002162  0E01               	movlw	1
  3399   002164  6EDF               	movwf	indf2,c
  3400   002166                     
  3401                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  3402   002166  0E00               	movlw	0
  3403   002168  6E22               	movwf	(turnLeft@cur_power+1)^0,c
  3404   00216A  0E01               	movlw	1
  3405   00216C  6E21               	movwf	turnLeft@cur_power^0,c
  3406   00216E  EFFB  F010         	goto	l2845
  3407   002172                     l2831:
  3408                           
  3409                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  3410   002172  5017               	movf	turnLeft@mL^0,w,c
  3411   002174  6ED9               	movwf	fsr2l,c
  3412   002176  6ADA               	clrf	fsr2h,c
  3413   002178  5017               	movf	turnLeft@mL^0,w,c
  3414   00217A  6EE1               	movwf	fsr1l,c
  3415   00217C  6AE2               	clrf	fsr1h,c
  3416   00217E  0E09               	movlw	9
  3417   002180  26E1               	addwf	fsr1l,f,c
  3418   002182  50E7               	movf	indf1,w,c
  3419   002184  2421               	addwf	turnLeft@cur_power^0,w,c
  3420   002186  6EDF               	movwf	indf2,c
  3421                           
  3422                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  3423   002188  5018               	movf	turnLeft@mR^0,w,c
  3424   00218A  6ED9               	movwf	fsr2l,c
  3425   00218C  6ADA               	clrf	fsr2h,c
  3426   00218E  5018               	movf	turnLeft@mR^0,w,c
  3427   002190  6EE1               	movwf	fsr1l,c
  3428   002192  6AE2               	clrf	fsr1h,c
  3429   002194  0E09               	movlw	9
  3430   002196  26E1               	addwf	fsr1l,f,c
  3431   002198  50E7               	movf	indf1,w,c
  3432   00219A  2421               	addwf	turnLeft@cur_power^0,w,c
  3433   00219C  6EDF               	movwf	indf2,c
  3434   00219E                     
  3435                           ;dc_motor.c: 191:         setMotorPWM(mL);
  3436   00219E  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  3437   0021A2  EC81  F011         	call	_setMotorPWM	;wreg free
  3438   0021A6                     
  3439                           ;dc_motor.c: 192:         setMotorPWM(mR);
  3440   0021A6  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  3441   0021AA  EC81  F011         	call	_setMotorPWM	;wreg free
  3442   0021AE                     
  3443                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  3444   0021AE  0E00               	movlw	0
  3445   0021B0  6E20               	movwf	(turnLeft@i+1)^0,c
  3446   0021B2  0E00               	movlw	0
  3447   0021B4  6E1F               	movwf	turnLeft@i^0,c
  3448   0021B6  EFE7  F010         	goto	l494
  3449   0021BA                     l2839:
  3450                           
  3451                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3452   0021BA  0E68               	movlw	104
  3453   0021BC  6E1C               	movwf	??_turnLeft^0,c
  3454   0021BE  0EE4               	movlw	228
  3455   0021C0                     u2727:
  3456   0021C0  2EE8               	decfsz	wreg,f,c
  3457   0021C2  D7FE               	bra	u2727
  3458   0021C4  2E1C               	decfsz	??_turnLeft^0,f,c
  3459   0021C6  D7FC               	bra	u2727
  3460   0021C8  D000               	nop2	
  3461   0021CA                     
  3462                           ;dc_motor.c: 195:         }
  3463   0021CA  4A1F               	infsnz	turnLeft@i^0,f,c
  3464   0021CC  2A20               	incf	(turnLeft@i+1)^0,f,c
  3465   0021CE                     l494:
  3466   0021CE  501B               	movf	turnLeft@turnRamp^0,w,c
  3467   0021D0  6E1C               	movwf	??_turnLeft^0,c
  3468   0021D2  6A1D               	clrf	(??_turnLeft+1)^0,c
  3469   0021D4  501C               	movf	??_turnLeft^0,w,c
  3470   0021D6  5C1F               	subwf	turnLeft@i^0,w,c
  3471   0021D8  5020               	movf	(turnLeft@i+1)^0,w,c
  3472   0021DA  0A80               	xorlw	128
  3473   0021DC  6E1E               	movwf	(??_turnLeft+2)^0,c
  3474   0021DE  501D               	movf	(??_turnLeft+1)^0,w,c
  3475   0021E0  0A80               	xorlw	128
  3476   0021E2  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3477   0021E4  A0D8               	btfss	status,0,c
  3478   0021E6  EFF7  F010         	goto	u1801
  3479   0021EA  EFF9  F010         	goto	u1800
  3480   0021EE                     u1801:
  3481   0021EE  EFDD  F010         	goto	l2839
  3482   0021F2                     u1800:
  3483   0021F2                     
  3484                           ;dc_motor.c: 196:     }
  3485   0021F2  4A21               	infsnz	turnLeft@cur_power^0,f,c
  3486   0021F4  2A22               	incf	(turnLeft@cur_power+1)^0,f,c
  3487   0021F6                     l2845:
  3488   0021F6  5019               	movf	turnLeft@turnSpeed^0,w,c
  3489   0021F8  6E1C               	movwf	??_turnLeft^0,c
  3490   0021FA  6A1D               	clrf	(??_turnLeft+1)^0,c
  3491   0021FC  5021               	movf	turnLeft@cur_power^0,w,c
  3492   0021FE  5C1C               	subwf	??_turnLeft^0,w,c
  3493   002200  501D               	movf	(??_turnLeft+1)^0,w,c
  3494   002202  0A80               	xorlw	128
  3495   002204  6E1E               	movwf	(??_turnLeft+2)^0,c
  3496   002206  5022               	movf	(turnLeft@cur_power+1)^0,w,c
  3497   002208  0A80               	xorlw	128
  3498   00220A  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3499   00220C  B0D8               	btfsc	status,0,c
  3500   00220E  EF0B  F011         	goto	u1811
  3501   002212  EF0D  F011         	goto	u1810
  3502   002216                     u1811:
  3503   002216  EFB9  F010         	goto	l2831
  3504   00221A                     u1810:
  3505   00221A                     
  3506                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  3507   00221A  0E00               	movlw	0
  3508   00221C  6E20               	movwf	(turnLeft@i+1)^0,c
  3509   00221E  0E00               	movlw	0
  3510   002220  6E1F               	movwf	turnLeft@i^0,c
  3511   002222  EF1D  F011         	goto	l498
  3512   002226                     l2849:
  3513                           
  3514                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3515   002226  0E68               	movlw	104
  3516   002228  6E1C               	movwf	??_turnLeft^0,c
  3517   00222A  0EE4               	movlw	228
  3518   00222C                     u2737:
  3519   00222C  2EE8               	decfsz	wreg,f,c
  3520   00222E  D7FE               	bra	u2737
  3521   002230  2E1C               	decfsz	??_turnLeft^0,f,c
  3522   002232  D7FC               	bra	u2737
  3523   002234  D000               	nop2	
  3524   002236                     
  3525                           ;dc_motor.c: 200:         }
  3526   002236  4A1F               	infsnz	turnLeft@i^0,f,c
  3527   002238  2A20               	incf	(turnLeft@i+1)^0,f,c
  3528   00223A                     l498:
  3529   00223A  501A               	movf	turnLeft@turnDuration^0,w,c
  3530   00223C  6E1C               	movwf	??_turnLeft^0,c
  3531   00223E  6A1D               	clrf	(??_turnLeft+1)^0,c
  3532   002240  501C               	movf	??_turnLeft^0,w,c
  3533   002242  5C1F               	subwf	turnLeft@i^0,w,c
  3534   002244  5020               	movf	(turnLeft@i+1)^0,w,c
  3535   002246  0A80               	xorlw	128
  3536   002248  6E1E               	movwf	(??_turnLeft+2)^0,c
  3537   00224A  501D               	movf	(??_turnLeft+1)^0,w,c
  3538   00224C  0A80               	xorlw	128
  3539   00224E  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3540   002250  A0D8               	btfss	status,0,c
  3541   002252  EF2D  F011         	goto	u1821
  3542   002256  EF2F  F011         	goto	u1820
  3543   00225A                     u1821:
  3544   00225A  EF13  F011         	goto	l2849
  3545   00225E                     u1820:
  3546   00225E                     
  3547                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  3548   00225E  C019  F021         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  3549   002262  6A22               	clrf	(turnLeft@cur_power+1)^0,c
  3550   002264                     l2853:
  3551   002264  BE22               	btfsc	(turnLeft@cur_power+1)^0,7,c
  3552   002266  EF39  F011         	goto	u1830
  3553   00226A  EF37  F011         	goto	u1831
  3554   00226E                     u1831:
  3555   00226E  EF3B  F011         	goto	l2857
  3556   002272                     u1830:
  3557   002272  EF80  F011         	goto	l506
  3558   002276                     l2857:
  3559                           
  3560                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  3561   002276  5017               	movf	turnLeft@mL^0,w,c
  3562   002278  6ED9               	movwf	fsr2l,c
  3563   00227A  6ADA               	clrf	fsr2h,c
  3564   00227C  5017               	movf	turnLeft@mL^0,w,c
  3565   00227E  6EE1               	movwf	fsr1l,c
  3566   002280  6AE2               	clrf	fsr1h,c
  3567   002282  0E09               	movlw	9
  3568   002284  26E1               	addwf	fsr1l,f,c
  3569   002286  50E7               	movf	indf1,w,c
  3570   002288  2421               	addwf	turnLeft@cur_power^0,w,c
  3571   00228A  6EDF               	movwf	indf2,c
  3572                           
  3573                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  3574   00228C  5018               	movf	turnLeft@mR^0,w,c
  3575   00228E  6ED9               	movwf	fsr2l,c
  3576   002290  6ADA               	clrf	fsr2h,c
  3577   002292  5018               	movf	turnLeft@mR^0,w,c
  3578   002294  6EE1               	movwf	fsr1l,c
  3579   002296  6AE2               	clrf	fsr1h,c
  3580   002298  0E09               	movlw	9
  3581   00229A  26E1               	addwf	fsr1l,f,c
  3582   00229C  50E7               	movf	indf1,w,c
  3583   00229E  2421               	addwf	turnLeft@cur_power^0,w,c
  3584   0022A0  6EDF               	movwf	indf2,c
  3585   0022A2                     
  3586                           ;dc_motor.c: 205:         setMotorPWM(mL);
  3587   0022A2  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  3588   0022A6  EC81  F011         	call	_setMotorPWM	;wreg free
  3589   0022AA                     
  3590                           ;dc_motor.c: 206:         setMotorPWM(mR);
  3591   0022AA  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  3592   0022AE  EC81  F011         	call	_setMotorPWM	;wreg free
  3593   0022B2                     
  3594                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  3595   0022B2  0E00               	movlw	0
  3596   0022B4  6E20               	movwf	(turnLeft@i+1)^0,c
  3597   0022B6  0E00               	movlw	0
  3598   0022B8  6E1F               	movwf	turnLeft@i^0,c
  3599   0022BA  EF69  F011         	goto	l503
  3600   0022BE                     l2865:
  3601                           
  3602                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3603   0022BE  0E68               	movlw	104
  3604   0022C0  6E1C               	movwf	??_turnLeft^0,c
  3605   0022C2  0EE4               	movlw	228
  3606   0022C4                     u2747:
  3607   0022C4  2EE8               	decfsz	wreg,f,c
  3608   0022C6  D7FE               	bra	u2747
  3609   0022C8  2E1C               	decfsz	??_turnLeft^0,f,c
  3610   0022CA  D7FC               	bra	u2747
  3611   0022CC  D000               	nop2	
  3612   0022CE                     
  3613                           ;dc_motor.c: 209:         }
  3614   0022CE  4A1F               	infsnz	turnLeft@i^0,f,c
  3615   0022D0  2A20               	incf	(turnLeft@i+1)^0,f,c
  3616   0022D2                     l503:
  3617   0022D2  501B               	movf	turnLeft@turnRamp^0,w,c
  3618   0022D4  6E1C               	movwf	??_turnLeft^0,c
  3619   0022D6  6A1D               	clrf	(??_turnLeft+1)^0,c
  3620   0022D8  501C               	movf	??_turnLeft^0,w,c
  3621   0022DA  5C1F               	subwf	turnLeft@i^0,w,c
  3622   0022DC  5020               	movf	(turnLeft@i+1)^0,w,c
  3623   0022DE  0A80               	xorlw	128
  3624   0022E0  6E1E               	movwf	(??_turnLeft+2)^0,c
  3625   0022E2  501D               	movf	(??_turnLeft+1)^0,w,c
  3626   0022E4  0A80               	xorlw	128
  3627   0022E6  581E               	subwfb	(??_turnLeft+2)^0,w,c
  3628   0022E8  A0D8               	btfss	status,0,c
  3629   0022EA  EF79  F011         	goto	u1841
  3630   0022EE  EF7B  F011         	goto	u1840
  3631   0022F2                     u1841:
  3632   0022F2  EF5F  F011         	goto	l2865
  3633   0022F6                     u1840:
  3634   0022F6                     
  3635                           ;dc_motor.c: 210:     }
  3636   0022F6  0621               	decf	turnLeft@cur_power^0,f,c
  3637   0022F8  A0D8               	btfss	status,0,c
  3638   0022FA  0622               	decf	(turnLeft@cur_power+1)^0,f,c
  3639   0022FC  EF32  F011         	goto	l2853
  3640   002300                     l506:
  3641   002300  0012               	return		;funcret
  3642   002302                     __end_of_turnLeft:
  3643                           	callstack 0
  3644                           
  3645 ;; *************** function _reverseOneSquare *****************
  3646 ;; Defined at:
  3647 ;;		line 263 in file "dc_motor.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3650 ;;		 -> main@motorL(10), 
  3651 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3652 ;;		 -> main@motorR(10), 
  3653 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3654 ;;  reverseDurat    1   25[COMRAM] unsigned char 
  3655 ;;  straightRamp    1   26[COMRAM] unsigned char 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  cur_power       2   32[COMRAM] int 
  3658 ;;  i               2   30[COMRAM] int 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3668 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;Total ram usage:       12 bytes
  3673 ;; Hardware stack levels used: 1
  3674 ;; Hardware stack levels required when called: 5
  3675 ;; This function calls:
  3676 ;;		_setMotorPWM
  3677 ;; This function is called by:
  3678 ;;		_move
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text14
  3683   001DD2                     __ptext14:
  3684                           	callstack 0
  3685   001DD2                     _reverseOneSquare:
  3686                           	callstack 24
  3687   001DD2                     
  3688                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  3689   001DD2  5017               	movf	reverseOneSquare@mL^0,w,c
  3690   001DD4  6ED9               	movwf	fsr2l,c
  3691   001DD6  6ADA               	clrf	fsr2h,c
  3692   001DD8  0E01               	movlw	1
  3693   001DDA  26D9               	addwf	fsr2l,f,c
  3694   001DDC  6ADF               	clrf	indf2,c
  3695                           
  3696                           ;dc_motor.c: 266:     mR->direction = 0;
  3697   001DDE  5018               	movf	reverseOneSquare@mR^0,w,c
  3698   001DE0  6ED9               	movwf	fsr2l,c
  3699   001DE2  6ADA               	clrf	fsr2h,c
  3700   001DE4  0E01               	movlw	1
  3701   001DE6  26D9               	addwf	fsr2l,f,c
  3702   001DE8  6ADF               	clrf	indf2,c
  3703   001DEA                     
  3704                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3705   001DEA  0E00               	movlw	0
  3706   001DEC  6E22               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3707   001DEE  0E01               	movlw	1
  3708   001DF0  6E21               	movwf	reverseOneSquare@cur_power^0,c
  3709   001DF2  EF3D  F00F         	goto	l2891
  3710   001DF6                     l2877:
  3711                           
  3712                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  3713   001DF6  5017               	movf	reverseOneSquare@mL^0,w,c
  3714   001DF8  6ED9               	movwf	fsr2l,c
  3715   001DFA  6ADA               	clrf	fsr2h,c
  3716   001DFC  5017               	movf	reverseOneSquare@mL^0,w,c
  3717   001DFE  6EE1               	movwf	fsr1l,c
  3718   001E00  6AE2               	clrf	fsr1h,c
  3719   001E02  0E09               	movlw	9
  3720   001E04  26E1               	addwf	fsr1l,f,c
  3721   001E06  50E7               	movf	indf1,w,c
  3722   001E08  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3723   001E0A  6EDF               	movwf	indf2,c
  3724                           
  3725                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  3726   001E0C  5018               	movf	reverseOneSquare@mR^0,w,c
  3727   001E0E  6ED9               	movwf	fsr2l,c
  3728   001E10  6ADA               	clrf	fsr2h,c
  3729   001E12  5018               	movf	reverseOneSquare@mR^0,w,c
  3730   001E14  6EE1               	movwf	fsr1l,c
  3731   001E16  6AE2               	clrf	fsr1h,c
  3732   001E18  0E09               	movlw	9
  3733   001E1A  26E1               	addwf	fsr1l,f,c
  3734   001E1C  50E7               	movf	indf1,w,c
  3735   001E1E  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3736   001E20  6EDF               	movwf	indf2,c
  3737   001E22                     
  3738                           ;dc_motor.c: 272:         setMotorPWM(mL);
  3739   001E22  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3740   001E26  EC81  F011         	call	_setMotorPWM	;wreg free
  3741   001E2A                     
  3742                           ;dc_motor.c: 273:         setMotorPWM(mR);
  3743   001E2A  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3744   001E2E  EC81  F011         	call	_setMotorPWM	;wreg free
  3745   001E32                     
  3746                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  3747   001E32  0E00               	movlw	0
  3748   001E34  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3749   001E36  0E00               	movlw	0
  3750   001E38  6E1F               	movwf	reverseOneSquare@i^0,c
  3751   001E3A  EF29  F00F         	goto	l537
  3752   001E3E                     l2885:
  3753                           
  3754                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3755   001E3E  0E68               	movlw	104
  3756   001E40  6E1C               	movwf	??_reverseOneSquare^0,c
  3757   001E42  0EE4               	movlw	228
  3758   001E44                     u2757:
  3759   001E44  2EE8               	decfsz	wreg,f,c
  3760   001E46  D7FE               	bra	u2757
  3761   001E48  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3762   001E4A  D7FC               	bra	u2757
  3763   001E4C  D000               	nop2	
  3764   001E4E                     
  3765                           ;dc_motor.c: 276:         }
  3766   001E4E  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3767   001E50  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3768   001E52                     l537:
  3769   001E52  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3770   001E54  6E1C               	movwf	??_reverseOneSquare^0,c
  3771   001E56  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3772   001E58  501C               	movf	??_reverseOneSquare^0,w,c
  3773   001E5A  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3774   001E5C  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3775   001E5E  0A80               	xorlw	128
  3776   001E60  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3777   001E62  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3778   001E64  0A80               	xorlw	128
  3779   001E66  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3780   001E68  A0D8               	btfss	status,0,c
  3781   001E6A  EF39  F00F         	goto	u1851
  3782   001E6E  EF3B  F00F         	goto	u1850
  3783   001E72                     u1851:
  3784   001E72  EF1F  F00F         	goto	l2885
  3785   001E76                     u1850:
  3786   001E76                     
  3787                           ;dc_motor.c: 277:     }
  3788   001E76  4A21               	infsnz	reverseOneSquare@cur_power^0,f,c
  3789   001E78  2A22               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3790   001E7A                     l2891:
  3791   001E7A  5019               	movf	reverseOneSquare@straightSpeed^0,w,c
  3792   001E7C  6E1C               	movwf	??_reverseOneSquare^0,c
  3793   001E7E  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3794   001E80  5021               	movf	reverseOneSquare@cur_power^0,w,c
  3795   001E82  5C1C               	subwf	??_reverseOneSquare^0,w,c
  3796   001E84  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3797   001E86  0A80               	xorlw	128
  3798   001E88  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3799   001E8A  5022               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3800   001E8C  0A80               	xorlw	128
  3801   001E8E  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3802   001E90  B0D8               	btfsc	status,0,c
  3803   001E92  EF4D  F00F         	goto	u1861
  3804   001E96  EF4F  F00F         	goto	u1860
  3805   001E9A                     u1861:
  3806   001E9A  EFFB  F00E         	goto	l2877
  3807   001E9E                     u1860:
  3808   001E9E                     
  3809                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  3810   001E9E  0E00               	movlw	0
  3811   001EA0  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3812   001EA2  0E00               	movlw	0
  3813   001EA4  6E1F               	movwf	reverseOneSquare@i^0,c
  3814   001EA6  EF5F  F00F         	goto	l541
  3815   001EAA                     l2895:
  3816                           
  3817                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3818   001EAA  0E68               	movlw	104
  3819   001EAC  6E1C               	movwf	??_reverseOneSquare^0,c
  3820   001EAE  0EE4               	movlw	228
  3821   001EB0                     u2767:
  3822   001EB0  2EE8               	decfsz	wreg,f,c
  3823   001EB2  D7FE               	bra	u2767
  3824   001EB4  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3825   001EB6  D7FC               	bra	u2767
  3826   001EB8  D000               	nop2	
  3827   001EBA                     
  3828                           ;dc_motor.c: 281:         }
  3829   001EBA  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3830   001EBC  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3831   001EBE                     l541:
  3832   001EBE  501A               	movf	reverseOneSquare@reverseDuration^0,w,c
  3833   001EC0  6E1C               	movwf	??_reverseOneSquare^0,c
  3834   001EC2  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3835   001EC4  501C               	movf	??_reverseOneSquare^0,w,c
  3836   001EC6  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3837   001EC8  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3838   001ECA  0A80               	xorlw	128
  3839   001ECC  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3840   001ECE  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3841   001ED0  0A80               	xorlw	128
  3842   001ED2  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3843   001ED4  A0D8               	btfss	status,0,c
  3844   001ED6  EF6F  F00F         	goto	u1871
  3845   001EDA  EF71  F00F         	goto	u1870
  3846   001EDE                     u1871:
  3847   001EDE  EF55  F00F         	goto	l2895
  3848   001EE2                     u1870:
  3849   001EE2                     
  3850                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3851   001EE2  C019  F021         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  3852   001EE6  6A22               	clrf	(reverseOneSquare@cur_power+1)^0,c
  3853   001EE8                     l2899:
  3854   001EE8  BE22               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  3855   001EEA  EF7B  F00F         	goto	u1880
  3856   001EEE  EF79  F00F         	goto	u1881
  3857   001EF2                     u1881:
  3858   001EF2  EF7D  F00F         	goto	l2903
  3859   001EF6                     u1880:
  3860   001EF6  EFC2  F00F         	goto	l2919
  3861   001EFA                     l2903:
  3862                           
  3863                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  3864   001EFA  5017               	movf	reverseOneSquare@mL^0,w,c
  3865   001EFC  6ED9               	movwf	fsr2l,c
  3866   001EFE  6ADA               	clrf	fsr2h,c
  3867   001F00  5017               	movf	reverseOneSquare@mL^0,w,c
  3868   001F02  6EE1               	movwf	fsr1l,c
  3869   001F04  6AE2               	clrf	fsr1h,c
  3870   001F06  0E09               	movlw	9
  3871   001F08  26E1               	addwf	fsr1l,f,c
  3872   001F0A  50E7               	movf	indf1,w,c
  3873   001F0C  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3874   001F0E  6EDF               	movwf	indf2,c
  3875                           
  3876                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  3877   001F10  5018               	movf	reverseOneSquare@mR^0,w,c
  3878   001F12  6ED9               	movwf	fsr2l,c
  3879   001F14  6ADA               	clrf	fsr2h,c
  3880   001F16  5018               	movf	reverseOneSquare@mR^0,w,c
  3881   001F18  6EE1               	movwf	fsr1l,c
  3882   001F1A  6AE2               	clrf	fsr1h,c
  3883   001F1C  0E09               	movlw	9
  3884   001F1E  26E1               	addwf	fsr1l,f,c
  3885   001F20  50E7               	movf	indf1,w,c
  3886   001F22  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3887   001F24  6EDF               	movwf	indf2,c
  3888   001F26                     
  3889                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3890   001F26  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3891   001F2A  EC81  F011         	call	_setMotorPWM	;wreg free
  3892   001F2E                     
  3893                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3894   001F2E  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3895   001F32  EC81  F011         	call	_setMotorPWM	;wreg free
  3896   001F36                     
  3897                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  3898   001F36  0E00               	movlw	0
  3899   001F38  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3900   001F3A  0E00               	movlw	0
  3901   001F3C  6E1F               	movwf	reverseOneSquare@i^0,c
  3902   001F3E  EFAB  F00F         	goto	l546
  3903   001F42                     l2911:
  3904                           
  3905                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3906   001F42  0E68               	movlw	104
  3907   001F44  6E1C               	movwf	??_reverseOneSquare^0,c
  3908   001F46  0EE4               	movlw	228
  3909   001F48                     u2777:
  3910   001F48  2EE8               	decfsz	wreg,f,c
  3911   001F4A  D7FE               	bra	u2777
  3912   001F4C  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3913   001F4E  D7FC               	bra	u2777
  3914   001F50  D000               	nop2	
  3915   001F52                     
  3916                           ;dc_motor.c: 290:         }
  3917   001F52  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3918   001F54  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3919   001F56                     l546:
  3920   001F56  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3921   001F58  6E1C               	movwf	??_reverseOneSquare^0,c
  3922   001F5A  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3923   001F5C  501C               	movf	??_reverseOneSquare^0,w,c
  3924   001F5E  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3925   001F60  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3926   001F62  0A80               	xorlw	128
  3927   001F64  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3928   001F66  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3929   001F68  0A80               	xorlw	128
  3930   001F6A  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3931   001F6C  A0D8               	btfss	status,0,c
  3932   001F6E  EFBB  F00F         	goto	u1891
  3933   001F72  EFBD  F00F         	goto	u1890
  3934   001F76                     u1891:
  3935   001F76  EFA1  F00F         	goto	l2911
  3936   001F7A                     u1890:
  3937   001F7A                     
  3938                           ;dc_motor.c: 291:     }
  3939   001F7A  0621               	decf	reverseOneSquare@cur_power^0,f,c
  3940   001F7C  A0D8               	btfss	status,0,c
  3941   001F7E  0622               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  3942   001F80  EF74  F00F         	goto	l2899
  3943   001F84                     l2919:
  3944                           
  3945                           ;dc_motor.c: 292:     mL->power = 0;
  3946   001F84  5017               	movf	reverseOneSquare@mL^0,w,c
  3947   001F86  6ED9               	movwf	fsr2l,c
  3948   001F88  6ADA               	clrf	fsr2h,c
  3949   001F8A  6ADF               	clrf	indf2,c
  3950                           
  3951                           ;dc_motor.c: 293:     mR->power = 0;
  3952   001F8C  5018               	movf	reverseOneSquare@mR^0,w,c
  3953   001F8E  6ED9               	movwf	fsr2l,c
  3954   001F90  6ADA               	clrf	fsr2h,c
  3955   001F92  6ADF               	clrf	indf2,c
  3956   001F94  0012               	return		;funcret
  3957   001F96                     __end_of_reverseOneSquare:
  3958                           	callstack 0
  3959                           
  3960 ;; *************** function _fullSpeedAhead *****************
  3961 ;; Defined at:
  3962 ;;		line 246 in file "dc_motor.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3965 ;;		 -> main@motorL(10), 
  3966 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3967 ;;		 -> main@motorR(10), 
  3968 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3969 ;;  straightRamp    1   25[COMRAM] unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  cur_power       2   31[COMRAM] int 
  3972 ;;  i               2   29[COMRAM] int 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3983 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3984 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3985 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3986 ;;Total ram usage:       11 bytes
  3987 ;; Hardware stack levels used: 1
  3988 ;; Hardware stack levels required when called: 5
  3989 ;; This function calls:
  3990 ;;		_setMotorPWM
  3991 ;; This function is called by:
  3992 ;;		_main
  3993 ;;		_move
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text15
  3998   002792                     __ptext15:
  3999                           	callstack 0
  4000   002792                     _fullSpeedAhead:
  4001                           	callstack 24
  4002   002792                     
  4003                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  4004   002792  5017               	movf	fullSpeedAhead@mL^0,w,c
  4005   002794  6ED9               	movwf	fsr2l,c
  4006   002796  6ADA               	clrf	fsr2h,c
  4007   002798  0E01               	movlw	1
  4008   00279A  26D9               	addwf	fsr2l,f,c
  4009   00279C  0E01               	movlw	1
  4010   00279E  6EDF               	movwf	indf2,c
  4011                           
  4012                           ;dc_motor.c: 249:     mR->direction = 1;
  4013   0027A0  5018               	movf	fullSpeedAhead@mR^0,w,c
  4014   0027A2  6ED9               	movwf	fsr2l,c
  4015   0027A4  6ADA               	clrf	fsr2h,c
  4016   0027A6  0E01               	movlw	1
  4017   0027A8  26D9               	addwf	fsr2l,f,c
  4018   0027AA  0E01               	movlw	1
  4019   0027AC  6EDF               	movwf	indf2,c
  4020   0027AE                     
  4021                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  4022   0027AE  0E00               	movlw	0
  4023   0027B0  6E21               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  4024   0027B2  0E01               	movlw	1
  4025   0027B4  6E20               	movwf	fullSpeedAhead@cur_power^0,c
  4026   0027B6  EF1F  F014         	goto	l2729
  4027   0027BA                     l2715:
  4028                           
  4029                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  4030   0027BA  5017               	movf	fullSpeedAhead@mL^0,w,c
  4031   0027BC  6ED9               	movwf	fsr2l,c
  4032   0027BE  6ADA               	clrf	fsr2h,c
  4033   0027C0  5017               	movf	fullSpeedAhead@mL^0,w,c
  4034   0027C2  6EE1               	movwf	fsr1l,c
  4035   0027C4  6AE2               	clrf	fsr1h,c
  4036   0027C6  0E09               	movlw	9
  4037   0027C8  26E1               	addwf	fsr1l,f,c
  4038   0027CA  50E7               	movf	indf1,w,c
  4039   0027CC  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  4040   0027CE  6EDF               	movwf	indf2,c
  4041                           
  4042                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  4043   0027D0  5018               	movf	fullSpeedAhead@mR^0,w,c
  4044   0027D2  6ED9               	movwf	fsr2l,c
  4045   0027D4  6ADA               	clrf	fsr2h,c
  4046   0027D6  5018               	movf	fullSpeedAhead@mR^0,w,c
  4047   0027D8  6EE1               	movwf	fsr1l,c
  4048   0027DA  6AE2               	clrf	fsr1h,c
  4049   0027DC  0E09               	movlw	9
  4050   0027DE  26E1               	addwf	fsr1l,f,c
  4051   0027E0  50E7               	movf	indf1,w,c
  4052   0027E2  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  4053   0027E4  6EDF               	movwf	indf2,c
  4054   0027E6                     
  4055                           ;dc_motor.c: 255:         setMotorPWM(mL);
  4056   0027E6  C017  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4057   0027EA  EC81  F011         	call	_setMotorPWM	;wreg free
  4058   0027EE                     
  4059                           ;dc_motor.c: 256:         setMotorPWM(mR);
  4060   0027EE  C018  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4061   0027F2  EC81  F011         	call	_setMotorPWM	;wreg free
  4062   0027F6                     
  4063                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  4064   0027F6  0E00               	movlw	0
  4065   0027F8  6E1F               	movwf	(fullSpeedAhead@i+1)^0,c
  4066   0027FA  0E00               	movlw	0
  4067   0027FC  6E1E               	movwf	fullSpeedAhead@i^0,c
  4068   0027FE  EF0B  F014         	goto	l528
  4069   002802                     l2723:
  4070                           
  4071                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4072   002802  0E68               	movlw	104
  4073   002804  6E1B               	movwf	??_fullSpeedAhead^0,c
  4074   002806  0EE4               	movlw	228
  4075   002808                     u2787:
  4076   002808  2EE8               	decfsz	wreg,f,c
  4077   00280A  D7FE               	bra	u2787
  4078   00280C  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  4079   00280E  D7FC               	bra	u2787
  4080   002810  D000               	nop2	
  4081   002812                     
  4082                           ;dc_motor.c: 259:         }
  4083   002812  4A1E               	infsnz	fullSpeedAhead@i^0,f,c
  4084   002814  2A1F               	incf	(fullSpeedAhead@i+1)^0,f,c
  4085   002816                     l528:
  4086   002816  501A               	movf	fullSpeedAhead@straightRamp^0,w,c
  4087   002818  6E1B               	movwf	??_fullSpeedAhead^0,c
  4088   00281A  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  4089   00281C  501B               	movf	??_fullSpeedAhead^0,w,c
  4090   00281E  5C1E               	subwf	fullSpeedAhead@i^0,w,c
  4091   002820  501F               	movf	(fullSpeedAhead@i+1)^0,w,c
  4092   002822  0A80               	xorlw	128
  4093   002824  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  4094   002826  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  4095   002828  0A80               	xorlw	128
  4096   00282A  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4097   00282C  A0D8               	btfss	status,0,c
  4098   00282E  EF1B  F014         	goto	u1691
  4099   002832  EF1D  F014         	goto	u1690
  4100   002836                     u1691:
  4101   002836  EF01  F014         	goto	l2723
  4102   00283A                     u1690:
  4103   00283A                     
  4104                           ;dc_motor.c: 260:     }
  4105   00283A  4A20               	infsnz	fullSpeedAhead@cur_power^0,f,c
  4106   00283C  2A21               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  4107   00283E                     l2729:
  4108   00283E  5019               	movf	fullSpeedAhead@straightSpeed^0,w,c
  4109   002840  6E1B               	movwf	??_fullSpeedAhead^0,c
  4110   002842  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  4111   002844  5020               	movf	fullSpeedAhead@cur_power^0,w,c
  4112   002846  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  4113   002848  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  4114   00284A  0A80               	xorlw	128
  4115   00284C  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  4116   00284E  5021               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  4117   002850  0A80               	xorlw	128
  4118   002852  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  4119   002854  B0D8               	btfsc	status,0,c
  4120   002856  EF2F  F014         	goto	u1701
  4121   00285A  EF31  F014         	goto	u1700
  4122   00285E                     u1701:
  4123   00285E  EFDD  F013         	goto	l2715
  4124   002862                     u1700:
  4125   002862  0012               	return		;funcret
  4126   002864                     __end_of_fullSpeedAhead:
  4127                           	callstack 0
  4128                           
  4129 ;; *************** function _setMotorPWM *****************
  4130 ;; Defined at:
  4131 ;;		line 65 in file "dc_motor.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  m               1   17[COMRAM] PTR struct DC_motor
  4134 ;;		 -> main@motorR(10), main@motorL(10), 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  negDuty         1   21[COMRAM] unsigned char 
  4137 ;;  posDuty         1   20[COMRAM] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4147 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;Total ram usage:        5 bytes
  4152 ;; Hardware stack levels used: 1
  4153 ;; Hardware stack levels required when called: 4
  4154 ;; This function calls:
  4155 ;;		___lwdiv
  4156 ;;		___wmul
  4157 ;; This function is called by:
  4158 ;;		_stop
  4159 ;;		_turnLeft
  4160 ;;		_turnRight
  4161 ;;		_fullSpeedAhead
  4162 ;;		_reverseOneSquare
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text16
  4167   002302                     __ptext16:
  4168                           	callstack 0
  4169   002302                     _setMotorPWM:
  4170                           	callstack 25
  4171   002302                     
  4172                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  4173   002302  5012               	movf	setMotorPWM@m^0,w,c
  4174   002304  6ED9               	movwf	fsr2l,c
  4175   002306  6ADA               	clrf	fsr2h,c
  4176   002308  0E02               	movlw	2
  4177   00230A  26D9               	addwf	fsr2l,f,c
  4178   00230C  50DF               	movf	indf2,w,c
  4179   00230E  B4D8               	btfsc	status,2,c
  4180   002310  EF8C  F011         	goto	u1481
  4181   002314  EF8E  F011         	goto	u1480
  4182   002318                     u1481:
  4183   002318  EFBE  F011         	goto	l2575
  4184   00231C                     u1480:
  4185   00231C                     
  4186                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  4187   00231C  5012               	movf	setMotorPWM@m^0,w,c
  4188   00231E  6ED9               	movwf	fsr2l,c
  4189   002320  6ADA               	clrf	fsr2h,c
  4190   002322  50DF               	movf	indf2,w,c
  4191   002324  6E13               	movwf	??_setMotorPWM^0,c
  4192   002326  5013               	movf	??_setMotorPWM^0,w,c
  4193   002328  6E05               	movwf	___wmul@multiplier^0,c
  4194   00232A  6A06               	clrf	(___wmul@multiplier+1)^0,c
  4195   00232C  5012               	movf	setMotorPWM@m^0,w,c
  4196   00232E  6ED9               	movwf	fsr2l,c
  4197   002330  6ADA               	clrf	fsr2h,c
  4198   002332  0E03               	movlw	3
  4199   002334  26D9               	addwf	fsr2l,f,c
  4200   002336  CFDE F007          	movff	postinc2,___wmul@multiplicand
  4201   00233A  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  4202   00233E  EC8D  F017         	call	___wmul	;wreg free
  4203   002342  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4204   002346  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4205   00234A  0E00               	movlw	0
  4206   00234C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  4207   00234E  0E64               	movlw	100
  4208   002350  6E0D               	movwf	___lwdiv@divisor^0,c
  4209   002352  EC89  F015         	call	___lwdiv	;wreg free
  4210   002356  5012               	movf	setMotorPWM@m^0,w,c
  4211   002358  6ED9               	movwf	fsr2l,c
  4212   00235A  6ADA               	clrf	fsr2h,c
  4213   00235C  0E03               	movlw	3
  4214   00235E  26D9               	addwf	fsr2l,f,c
  4215   002360  50DF               	movf	indf2,w,c
  4216   002362  6E14               	movwf	(??_setMotorPWM+1)^0,c
  4217   002364  500B               	movf	?___lwdiv^0,w,c
  4218   002366  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  4219   002368  6E15               	movwf	setMotorPWM@posDuty^0,c
  4220   00236A                     
  4221                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  4222   00236A  5012               	movf	setMotorPWM@m^0,w,c
  4223   00236C  6ED9               	movwf	fsr2l,c
  4224   00236E  6ADA               	clrf	fsr2h,c
  4225   002370  0E03               	movlw	3
  4226   002372  26D9               	addwf	fsr2l,f,c
  4227   002374  50DF               	movf	indf2,w,c
  4228   002376  6E16               	movwf	setMotorPWM@negDuty^0,c
  4229                           
  4230                           ;dc_motor.c: 72:     }
  4231   002378  EFDF  F011         	goto	l2579
  4232   00237C                     l2575:
  4233                           
  4234                           ;dc_motor.c: 74:         posDuty=0;
  4235   00237C  0E00               	movlw	0
  4236   00237E  6E15               	movwf	setMotorPWM@posDuty^0,c
  4237   002380                     
  4238                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4239   002380  5012               	movf	setMotorPWM@m^0,w,c
  4240   002382  6ED9               	movwf	fsr2l,c
  4241   002384  6ADA               	clrf	fsr2h,c
  4242   002386  50DF               	movf	indf2,w,c
  4243   002388  6E13               	movwf	??_setMotorPWM^0,c
  4244   00238A  5013               	movf	??_setMotorPWM^0,w,c
  4245   00238C  6E05               	movwf	___wmul@multiplier^0,c
  4246   00238E  6A06               	clrf	(___wmul@multiplier+1)^0,c
  4247   002390  5012               	movf	setMotorPWM@m^0,w,c
  4248   002392  6ED9               	movwf	fsr2l,c
  4249   002394  6ADA               	clrf	fsr2h,c
  4250   002396  0E03               	movlw	3
  4251   002398  26D9               	addwf	fsr2l,f,c
  4252   00239A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  4253   00239E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  4254   0023A2  EC8D  F017         	call	___wmul	;wreg free
  4255   0023A6  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4256   0023AA  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4257   0023AE  0E00               	movlw	0
  4258   0023B0  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  4259   0023B2  0E64               	movlw	100
  4260   0023B4  6E0D               	movwf	___lwdiv@divisor^0,c
  4261   0023B6  EC89  F015         	call	___lwdiv	;wreg free
  4262   0023BA  500B               	movf	?___lwdiv^0,w,c
  4263   0023BC  6E16               	movwf	setMotorPWM@negDuty^0,c
  4264   0023BE                     l2579:
  4265                           
  4266                           ;dc_motor.c: 78:     if (m->direction) {
  4267   0023BE  5012               	movf	setMotorPWM@m^0,w,c
  4268   0023C0  6ED9               	movwf	fsr2l,c
  4269   0023C2  6ADA               	clrf	fsr2h,c
  4270   0023C4  0E01               	movlw	1
  4271   0023C6  26D9               	addwf	fsr2l,f,c
  4272   0023C8  50DF               	movf	indf2,w,c
  4273   0023CA  B4D8               	btfsc	status,2,c
  4274   0023CC  EFEA  F011         	goto	u1491
  4275   0023D0  EFEC  F011         	goto	u1490
  4276   0023D4                     u1491:
  4277   0023D4  EF0C  F012         	goto	l2583
  4278   0023D8                     u1490:
  4279   0023D8                     
  4280                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  4281   0023D8  5012               	movf	setMotorPWM@m^0,w,c
  4282   0023DA  6ED9               	movwf	fsr2l,c
  4283   0023DC  6ADA               	clrf	fsr2h,c
  4284   0023DE  0E05               	movlw	5
  4285   0023E0  26D9               	addwf	fsr2l,f,c
  4286   0023E2  CFDE F013          	movff	postinc2,??_setMotorPWM
  4287   0023E6  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4288   0023EA  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4289   0023EE  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4290   0023F2  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  4291                           
  4292                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  4293   0023F6  5012               	movf	setMotorPWM@m^0,w,c
  4294   0023F8  6ED9               	movwf	fsr2l,c
  4295   0023FA  6ADA               	clrf	fsr2h,c
  4296   0023FC  0E07               	movlw	7
  4297   0023FE  26D9               	addwf	fsr2l,f,c
  4298   002400  CFDE F013          	movff	postinc2,??_setMotorPWM
  4299   002404  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4300   002408  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4301   00240C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4302   002410  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  4303                           
  4304                           ;dc_motor.c: 81:     } else {
  4305   002414  EF2A  F012         	goto	l463
  4306   002418                     l2583:
  4307                           
  4308                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  4309   002418  5012               	movf	setMotorPWM@m^0,w,c
  4310   00241A  6ED9               	movwf	fsr2l,c
  4311   00241C  6ADA               	clrf	fsr2h,c
  4312   00241E  0E05               	movlw	5
  4313   002420  26D9               	addwf	fsr2l,f,c
  4314   002422  CFDE F013          	movff	postinc2,??_setMotorPWM
  4315   002426  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4316   00242A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4317   00242E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4318   002432  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  4319                           
  4320                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  4321   002436  5012               	movf	setMotorPWM@m^0,w,c
  4322   002438  6ED9               	movwf	fsr2l,c
  4323   00243A  6ADA               	clrf	fsr2h,c
  4324   00243C  0E07               	movlw	7
  4325   00243E  26D9               	addwf	fsr2l,f,c
  4326   002440  CFDE F013          	movff	postinc2,??_setMotorPWM
  4327   002444  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  4328   002448  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  4329   00244C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4330   002450  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  4331   002454                     l463:
  4332   002454  0012               	return		;funcret
  4333   002456                     __end_of_setMotorPWM:
  4334                           	callstack 0
  4335                           
  4336 ;; *************** function ___wmul *****************
  4337 ;; Defined at:
  4338 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  multiplier      2    4[COMRAM] unsigned int 
  4341 ;;  multiplicand    2    6[COMRAM] unsigned int 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  product         2    8[COMRAM] unsigned int 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  2    4[COMRAM] unsigned int 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, prodl, prodh
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;Total ram usage:        6 bytes
  4358 ;; Hardware stack levels used: 1
  4359 ;; Hardware stack levels required when called: 3
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_setMotorPWM
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text17
  4368   002F1A                     __ptext17:
  4369                           	callstack 0
  4370   002F1A                     ___wmul:
  4371                           	callstack 25
  4372   002F1A  5005               	movf	___wmul@multiplier^0,w,c
  4373   002F1C  0207               	mulwf	___wmul@multiplicand^0,c
  4374   002F1E  CFF3 F009          	movff	prodl,___wmul@product
  4375   002F22  CFF4 F00A          	movff	prodh,___wmul@product+1
  4376   002F26  5005               	movf	___wmul@multiplier^0,w,c
  4377   002F28  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  4378   002F2A  50F3               	movf	243,w,c
  4379   002F2C  260A               	addwf	(___wmul@product+1)^0,f,c
  4380   002F2E  5006               	movf	(___wmul@multiplier+1)^0,w,c
  4381   002F30  0207               	mulwf	___wmul@multiplicand^0,c
  4382   002F32  50F3               	movf	243,w,c
  4383   002F34  260A               	addwf	(___wmul@product+1)^0,f,c
  4384   002F36  C009  F005         	movff	___wmul@product,?___wmul
  4385   002F3A  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  4386   002F3E  0012               	return		;funcret
  4387   002F40                     __end_of___wmul:
  4388                           	callstack 0
  4389                           
  4390 ;; *************** function ___lwdiv *****************
  4391 ;; Defined at:
  4392 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  dividend        2   10[COMRAM] unsigned int 
  4395 ;;  divisor         2   12[COMRAM] unsigned int 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  quotient        2   14[COMRAM] unsigned int 
  4398 ;;  counter         1   16[COMRAM] unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  2   10[COMRAM] unsigned int 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4409 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4411 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4412 ;;Total ram usage:        7 bytes
  4413 ;; Hardware stack levels used: 1
  4414 ;; Hardware stack levels required when called: 3
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_setMotorPWM
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text18
  4423   002B12                     __ptext18:
  4424                           	callstack 0
  4425   002B12                     ___lwdiv:
  4426                           	callstack 25
  4427   002B12  0E00               	movlw	0
  4428   002B14  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  4429   002B16  0E00               	movlw	0
  4430   002B18  6E0F               	movwf	___lwdiv@quotient^0,c
  4431   002B1A  500D               	movf	___lwdiv@divisor^0,w,c
  4432   002B1C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4433   002B1E  B4D8               	btfsc	status,2,c
  4434   002B20  EF94  F015         	goto	u1381
  4435   002B24  EF96  F015         	goto	u1380
  4436   002B28                     u1381:
  4437   002B28  EFBE  F015         	goto	l1058
  4438   002B2C                     u1380:
  4439   002B2C  0E01               	movlw	1
  4440   002B2E  6E11               	movwf	___lwdiv@counter^0,c
  4441   002B30  EF9E  F015         	goto	l2507
  4442   002B34                     l2505:
  4443   002B34  90D8               	bcf	status,0,c
  4444   002B36  360D               	rlcf	___lwdiv@divisor^0,f,c
  4445   002B38  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4446   002B3A  2A11               	incf	___lwdiv@counter^0,f,c
  4447   002B3C                     l2507:
  4448   002B3C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  4449   002B3E  EFA3  F015         	goto	u1391
  4450   002B42  EFA5  F015         	goto	u1390
  4451   002B46                     u1391:
  4452   002B46  EF9A  F015         	goto	l2505
  4453   002B4A                     u1390:
  4454   002B4A                     l2509:
  4455   002B4A  90D8               	bcf	status,0,c
  4456   002B4C  360F               	rlcf	___lwdiv@quotient^0,f,c
  4457   002B4E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4458   002B50  500D               	movf	___lwdiv@divisor^0,w,c
  4459   002B52  5C0B               	subwf	___lwdiv@dividend^0,w,c
  4460   002B54  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  4461   002B56  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4462   002B58  A0D8               	btfss	status,0,c
  4463   002B5A  EFB1  F015         	goto	u1401
  4464   002B5E  EFB3  F015         	goto	u1400
  4465   002B62                     u1401:
  4466   002B62  EFB8  F015         	goto	l2517
  4467   002B66                     u1400:
  4468   002B66  500D               	movf	___lwdiv@divisor^0,w,c
  4469   002B68  5E0B               	subwf	___lwdiv@dividend^0,f,c
  4470   002B6A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  4471   002B6C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4472   002B6E  800F               	bsf	___lwdiv@quotient^0,0,c
  4473   002B70                     l2517:
  4474   002B70  90D8               	bcf	status,0,c
  4475   002B72  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4476   002B74  320D               	rrcf	___lwdiv@divisor^0,f,c
  4477   002B76  2E11               	decfsz	___lwdiv@counter^0,f,c
  4478   002B78  EFA5  F015         	goto	l2509
  4479   002B7C                     l1058:
  4480   002B7C  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4481   002B80  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4482   002B84  0012               	return		;funcret
  4483   002B86                     __end_of___lwdiv:
  4484                           	callstack 0
  4485                           
  4486 ;; *************** function _initUSART4 *****************
  4487 ;; Defined at:
  4488 ;;		line 4 in file "serial.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used: 1
  4508 ;; Hardware stack levels required when called: 3
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text19
  4517   002FAA                     __ptext19:
  4518                           	callstack 0
  4519   002FAA                     _initUSART4:
  4520                           	callstack 27
  4521   002FAA                     
  4522                           ;serial.c: 7:     RC0PPS = 0x12;
  4523   002FAA  0E12               	movlw	18
  4524   002FAC  010E               	movlb	14	; () banked
  4525   002FAE  6F62               	movwf	98,b	;volatile
  4526                           
  4527                           ;serial.c: 8:     RX4PPS = 0x11;
  4528   002FB0  0E11               	movlw	17
  4529   002FB2  6F15               	movwf	21,b	;volatile
  4530   002FB4                     
  4531                           ; BSR set to: 14
  4532                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  4533   002FB4  97E9               	bcf	233,3,b	;volatile
  4534   002FB6                     
  4535                           ; BSR set to: 14
  4536                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  4537   002FB6  95E8               	bcf	232,2,b	;volatile
  4538                           
  4539                           ;serial.c: 13:     SP4BRGL = 51;
  4540   002FB8  0E33               	movlw	51
  4541   002FBA  6FE5               	movwf	229,b	;volatile
  4542                           
  4543                           ;serial.c: 14:     SP4BRGH = 0;
  4544   002FBC  0E00               	movlw	0
  4545   002FBE  6FE6               	movwf	230,b	;volatile
  4546   002FC0                     
  4547                           ; BSR set to: 14
  4548                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  4549   002FC0  89E7               	bsf	231,4,b	;volatile
  4550   002FC2                     
  4551                           ; BSR set to: 14
  4552                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  4553   002FC2  8BE8               	bsf	232,5,b	;volatile
  4554   002FC4                     
  4555                           ; BSR set to: 14
  4556                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  4557   002FC4  8FE7               	bsf	231,7,b	;volatile
  4558   002FC6                     
  4559                           ; BSR set to: 14
  4560   002FC6  0012               	return		;funcret
  4561   002FC8                     __end_of_initUSART4:
  4562                           	callstack 0
  4563                           
  4564 ;; *************** function _initDCmotorsPWM *****************
  4565 ;; Defined at:
  4566 ;;		line 5 in file "dc_motor.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4584 ;;Total ram usage:        2 bytes
  4585 ;; Hardware stack levels used: 1
  4586 ;; Hardware stack levels required when called: 3
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_main
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text20
  4595   002A82                     __ptext20:
  4596                           	callstack 0
  4597   002A82                     _initDCmotorsPWM:
  4598                           	callstack 27
  4599   002A82                     
  4600                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  4601   002A82  947D               	bcf	125,2,c	;volatile
  4602                           
  4603                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  4604   002A84  9485               	bcf	133,2,c	;volatile
  4605                           
  4606                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  4607   002A86  987D               	bcf	125,4,c	;volatile
  4608                           
  4609                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  4610   002A88  9885               	bcf	133,4,c	;volatile
  4611                           
  4612                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  4613   002A8A  9E7B               	bcf	123,7,c	;volatile
  4614                           
  4615                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  4616   002A8C  9E83               	bcf	131,7,c	;volatile
  4617                           
  4618                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  4619   002A8E  9C7F               	bcf	127,6,c	;volatile
  4620                           
  4621                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  4622   002A90  9C87               	bcf	135,6,c	;volatile
  4623   002A92                     
  4624                           ;dc_motor.c: 18:     RE2PPS=0x05;
  4625   002A92  0E05               	movlw	5
  4626   002A94  010E               	movlb	14	; () banked
  4627   002A96  6F74               	movwf	116,b	;volatile
  4628                           
  4629                           ;dc_motor.c: 19:     RE4PPS=0x06;
  4630   002A98  0E06               	movlw	6
  4631   002A9A  6F76               	movwf	118,b	;volatile
  4632                           
  4633                           ;dc_motor.c: 20:     RC7PPS=0x07;
  4634   002A9C  0E07               	movlw	7
  4635   002A9E  6F69               	movwf	105,b	;volatile
  4636                           
  4637                           ;dc_motor.c: 21:     RG6PPS=0x08;
  4638   002AA0  0E08               	movlw	8
  4639   002AA2  6F88               	movwf	136,b	;volatile
  4640                           
  4641                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  4642   002AA4  50BD               	movf	189,w,c	;volatile
  4643   002AA6  0B8F               	andlw	-113
  4644   002AA8  0930               	iorlw	48
  4645   002AAA  6EBD               	movwf	189,c	;volatile
  4646                           
  4647                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  4648   002AAC  0EE0               	movlw	-32
  4649   002AAE  16BE               	andwf	190,f,c	;volatile
  4650                           
  4651                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  4652   002AB0  50BF               	movf	191,w,c	;volatile
  4653   002AB2  0BF0               	andlw	-16
  4654   002AB4  0901               	iorlw	1
  4655   002AB6  6EBF               	movwf	191,c	;volatile
  4656   002AB8                     
  4657                           ; BSR set to: 14
  4658                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  4659   002AB8  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4660   002ABC                     
  4661                           ; BSR set to: 14
  4662                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  4663   002ABC  8EBD               	bsf	189,7,c	;volatile
  4664                           
  4665                           ;dc_motor.c: 35:     CCPR1H=0;
  4666   002ABE  0E00               	movlw	0
  4667   002AC0  6EAA               	movwf	170,c	;volatile
  4668                           
  4669                           ;dc_motor.c: 36:     CCPR2H=0;
  4670   002AC2  0E00               	movlw	0
  4671   002AC4  6EA6               	movwf	166,c	;volatile
  4672                           
  4673                           ;dc_motor.c: 37:     CCPR3H=0;
  4674   002AC6  0E00               	movlw	0
  4675   002AC8  010F               	movlb	15	; () banked
  4676   002ACA  6F25               	movwf	37,b	;volatile
  4677                           
  4678                           ;dc_motor.c: 38:     CCPR4H=0;
  4679   002ACC  0E00               	movlw	0
  4680   002ACE  6F21               	movwf	33,b	;volatile
  4681                           
  4682                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  4683   002AD0  0EFC               	movlw	-4
  4684   002AD2  16AD               	andwf	173,f,c	;volatile
  4685                           
  4686                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  4687   002AD4  0EF3               	movlw	-13
  4688   002AD6  16AD               	andwf	173,f,c	;volatile
  4689                           
  4690                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  4691   002AD8  0ECF               	movlw	-49
  4692   002ADA  16AD               	andwf	173,f,c	;volatile
  4693                           
  4694                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  4695   002ADC  0E3F               	movlw	-193
  4696   002ADE  16AD               	andwf	173,f,c	;volatile
  4697   002AE0                     
  4698                           ; BSR set to: 15
  4699                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  4700   002AE0  88AB               	bsf	171,4,c	;volatile
  4701                           
  4702                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  4703   002AE2  50AB               	movf	171,w,c	;volatile
  4704   002AE4  0BF0               	andlw	-16
  4705   002AE6  090C               	iorlw	12
  4706   002AE8  6EAB               	movwf	171,c	;volatile
  4707   002AEA                     
  4708                           ; BSR set to: 15
  4709                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  4710   002AEA  8EAB               	bsf	171,7,c	;volatile
  4711   002AEC                     
  4712                           ; BSR set to: 15
  4713                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  4714   002AEC  88A7               	bsf	167,4,c	;volatile
  4715                           
  4716                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  4717   002AEE  50A7               	movf	167,w,c	;volatile
  4718   002AF0  0BF0               	andlw	-16
  4719   002AF2  090C               	iorlw	12
  4720   002AF4  6EA7               	movwf	167,c	;volatile
  4721   002AF6                     
  4722                           ; BSR set to: 15
  4723                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  4724   002AF6  8EA7               	bsf	167,7,c	;volatile
  4725   002AF8                     
  4726                           ; BSR set to: 15
  4727                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  4728   002AF8  8926               	bsf	38,4,b	;volatile
  4729                           
  4730                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  4731   002AFA  5126               	movf	38,w,b	;volatile
  4732   002AFC  0BF0               	andlw	-16
  4733   002AFE  090C               	iorlw	12
  4734   002B00  6F26               	movwf	38,b	;volatile
  4735   002B02                     
  4736                           ; BSR set to: 15
  4737                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  4738   002B02  8F26               	bsf	38,7,b	;volatile
  4739   002B04                     
  4740                           ; BSR set to: 15
  4741                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  4742   002B04  8922               	bsf	34,4,b	;volatile
  4743                           
  4744                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  4745   002B06  5122               	movf	34,w,b	;volatile
  4746   002B08  0BF0               	andlw	-16
  4747   002B0A  090C               	iorlw	12
  4748   002B0C  6F22               	movwf	34,b	;volatile
  4749   002B0E                     
  4750                           ; BSR set to: 15
  4751                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  4752   002B0E  8F22               	bsf	34,7,b	;volatile
  4753   002B10                     
  4754                           ; BSR set to: 15
  4755   002B10  0012               	return		;funcret
  4756   002B12                     __end_of_initDCmotorsPWM:
  4757                           	callstack 0
  4758                           
  4759 ;; *************** function _color_detect *****************
  4760 ;; Defined at:
  4761 ;;		line 121 in file "color.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  RGBC_n          8    4[COMRAM] struct RGBC_val
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  color           1    0        unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      unsigned char 
  4768 ;; Registers used:
  4769 ;;		wreg
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4775 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;Total ram usage:        8 bytes
  4780 ;; Hardware stack levels used: 1
  4781 ;; Hardware stack levels required when called: 3
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_main
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text21
  4790   0030A0                     __ptext21:
  4791                           	callstack 0
  4792   0030A0                     _color_detect:
  4793                           	callstack 27
  4794   0030A0                     
  4795                           ;color.c: 167:     return color;
  4796   0030A0  0E00               	movlw	0
  4797   0030A2  0012               	return		;funcret
  4798   0030A4                     __end_of_color_detect:
  4799                           	callstack 0
  4800                           
  4801 ;; *************** function _color_click_init *****************
  4802 ;; Defined at:
  4803 ;;		line 7 in file "color.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      void 
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0, cstack
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4821 ;;Total ram usage:        1 bytes
  4822 ;; Hardware stack levels used: 1
  4823 ;; Hardware stack levels required when called: 6
  4824 ;; This function calls:
  4825 ;;		_I2C_2_Master_Init
  4826 ;;		_color_writetoaddr
  4827 ;; This function is called by:
  4828 ;;		_main
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text22
  4833   002BF0                     __ptext22:
  4834                           	callstack 0
  4835   002BF0                     _color_click_init:
  4836                           	callstack 24
  4837   002BF0                     
  4838                           ;color.c: 10:     I2C_2_Master_Init();
  4839   002BF0  EC28  F017         	call	_I2C_2_Master_Init	;wreg free
  4840   002BF4                     
  4841                           ;color.c: 13:   color_writetoaddr(0x00, 0x01);
  4842   002BF4  0E01               	movlw	1
  4843   002BF6  6E07               	movwf	color_writetoaddr@value^0,c
  4844   002BF8  0E00               	movlw	0
  4845   002BFA  ECC5  F017         	call	_color_writetoaddr
  4846   002BFE                     
  4847                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4848   002BFE  0E3F               	movlw	63
  4849   002C00  6E09               	movwf	??_color_click_init^0,c
  4850   002C02  0E55               	movlw	85
  4851   002C04                     u2797:
  4852   002C04  2EE8               	decfsz	wreg,f,c
  4853   002C06  D7FE               	bra	u2797
  4854   002C08  2E09               	decfsz	??_color_click_init^0,f,c
  4855   002C0A  D7FC               	bra	u2797
  4856   002C0C  0000               	nop	
  4857   002C0E                     
  4858                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  4859   002C0E  0E03               	movlw	3
  4860   002C10  6E07               	movwf	color_writetoaddr@value^0,c
  4861   002C12  0E00               	movlw	0
  4862   002C14  ECC5  F017         	call	_color_writetoaddr
  4863   002C18                     
  4864                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  4865   002C18  0ED5               	movlw	213
  4866   002C1A  6E07               	movwf	color_writetoaddr@value^0,c
  4867   002C1C  0E01               	movlw	1
  4868   002C1E  ECC5  F017         	call	_color_writetoaddr
  4869   002C22                     
  4870                           ;color.c: 23:  color_writetoaddr(0x00, 0x13);
  4871   002C22  0E13               	movlw	19
  4872   002C24  6E07               	movwf	color_writetoaddr@value^0,c
  4873   002C26  0E00               	movlw	0
  4874   002C28  ECC5  F017         	call	_color_writetoaddr
  4875   002C2C                     
  4876                           ;color.c: 24:     color_writetoaddr(0x07, 0x07);
  4877   002C2C  0E07               	movlw	7
  4878   002C2E  6E07               	movwf	color_writetoaddr@value^0,c
  4879   002C30  0E07               	movlw	7
  4880   002C32  ECC5  F017         	call	_color_writetoaddr
  4881   002C36                     
  4882                           ;color.c: 25:     color_writetoaddr(0x06, 0xD0);
  4883   002C36  0ED0               	movlw	208
  4884   002C38  6E07               	movwf	color_writetoaddr@value^0,c
  4885   002C3A  0E06               	movlw	6
  4886   002C3C  ECC5  F017         	call	_color_writetoaddr
  4887   002C40                     
  4888                           ;color.c: 26:     color_writetoaddr(0x05, 0x00);
  4889   002C40  0E00               	movlw	0
  4890   002C42  6E07               	movwf	color_writetoaddr@value^0,c
  4891   002C44  0E05               	movlw	5
  4892   002C46  ECC5  F017         	call	_color_writetoaddr
  4893   002C4A                     
  4894                           ;color.c: 27:     color_writetoaddr(0x04, 0x00);
  4895   002C4A  0E00               	movlw	0
  4896   002C4C  6E07               	movwf	color_writetoaddr@value^0,c
  4897   002C4E  0E04               	movlw	4
  4898   002C50  ECC5  F017         	call	_color_writetoaddr
  4899   002C54  0012               	return		;funcret
  4900   002C56                     __end_of_color_click_init:
  4901                           	callstack 0
  4902                           
  4903 ;; *************** function _color_writetoaddr *****************
  4904 ;; Defined at:
  4905 ;;		line 33 in file "color.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  address         1    wreg     unsigned char 
  4908 ;;  value           1    6[COMRAM] unsigned char 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  address         1    7[COMRAM] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4920 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4923 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;Total ram usage:        2 bytes
  4925 ;; Hardware stack levels used: 1
  4926 ;; Hardware stack levels required when called: 5
  4927 ;; This function calls:
  4928 ;;		_I2C_2_Master_Start
  4929 ;;		_I2C_2_Master_Stop
  4930 ;;		_I2C_2_Master_Write
  4931 ;; This function is called by:
  4932 ;;		_color_click_init
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text23
  4937   002F8A                     __ptext23:
  4938                           	callstack 0
  4939   002F8A                     _color_writetoaddr:
  4940                           	callstack 24
  4941                           
  4942                           ;incstack = 0
  4943                           ;color_writetoaddr@address stored from wreg
  4944   002F8A  6E08               	movwf	color_writetoaddr@address^0,c
  4945   002F8C                     
  4946                           ;color.c: 34:     I2C_2_Master_Start();
  4947   002F8C  EC3C  F018         	call	_I2C_2_Master_Start	;wreg free
  4948                           
  4949                           ;color.c: 35:     I2C_2_Master_Write(0x52 | 0x00);
  4950   002F90  0E52               	movlw	82
  4951   002F92  EC2B  F018         	call	_I2C_2_Master_Write
  4952                           
  4953                           ;color.c: 36:     I2C_2_Master_Write(0x80 | address);
  4954   002F96  5008               	movf	color_writetoaddr@address^0,w,c
  4955   002F98  0980               	iorlw	128
  4956   002F9A  EC2B  F018         	call	_I2C_2_Master_Write
  4957                           
  4958                           ;color.c: 37:     I2C_2_Master_Write(value);
  4959   002F9E  5007               	movf	color_writetoaddr@value^0,w,c
  4960   002FA0  EC2B  F018         	call	_I2C_2_Master_Write
  4961                           
  4962                           ;color.c: 38:     I2C_2_Master_Stop();
  4963   002FA4  EC37  F018         	call	_I2C_2_Master_Stop	;wreg free
  4964   002FA8  0012               	return		;funcret
  4965   002FAA                     __end_of_color_writetoaddr:
  4966                           	callstack 0
  4967                           
  4968 ;; *************** function _I2C_2_Master_Init *****************
  4969 ;; Defined at:
  4970 ;;		line 4 in file "i2c.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, status,2
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4988 ;;Total ram usage:        0 bytes
  4989 ;; Hardware stack levels used: 1
  4990 ;; Hardware stack levels required when called: 3
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_color_click_init
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text24
  4999   002E50                     __ptext24:
  5000                           	callstack 0
  5001   002E50                     _I2C_2_Master_Init:
  5002                           	callstack 26
  5003   002E50                     
  5004                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5005   002E50  010E               	movlb	14	; () banked
  5006   002E52  51D9               	movf	217,w,b	;volatile
  5007   002E54  0BF0               	andlw	-16
  5008   002E56  0908               	iorlw	8
  5009   002E58  6FD9               	movwf	217,b	;volatile
  5010   002E5A                     
  5011                           ; BSR set to: 14
  5012                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5013   002E5A  8BD9               	bsf	217,5,b	;volatile
  5014                           
  5015                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5016   002E5C  0E9F               	movlw	159
  5017   002E5E  6FD6               	movwf	214,b	;volatile
  5018   002E60                     
  5019                           ; BSR set to: 14
  5020                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5021   002E60  8A84               	bsf	132,5,c	;volatile
  5022   002E62                     
  5023                           ; BSR set to: 14
  5024                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5025   002E62  8C84               	bsf	132,6,c	;volatile
  5026   002E64                     
  5027                           ; BSR set to: 14
  5028                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5029   002E64  9BA7               	bcf	167,5,b	;volatile
  5030   002E66                     
  5031                           ; BSR set to: 14
  5032                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5033   002E66  9DA7               	bcf	167,6,b	;volatile
  5034                           
  5035                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5036   002E68  0E1D               	movlw	29
  5037   002E6A  6F1D               	movwf	29,b	;volatile
  5038                           
  5039                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5040   002E6C  0E1E               	movlw	30
  5041   002E6E  6F1C               	movwf	28,b	;volatile
  5042                           
  5043                           ;i2c.c: 18:   RD5PPS=0x1C;
  5044   002E70  0E1C               	movlw	28
  5045   002E72  6F6F               	movwf	111,b	;volatile
  5046                           
  5047                           ;i2c.c: 19:   RD6PPS=0x1B;
  5048   002E74  0E1B               	movlw	27
  5049   002E76  6F70               	movwf	112,b	;volatile
  5050   002E78                     
  5051                           ; BSR set to: 14
  5052   002E78  0012               	return		;funcret
  5053   002E7A                     __end_of_I2C_2_Master_Init:
  5054                           	callstack 0
  5055                           
  5056 ;; *************** function _color_calibration *****************
  5057 ;; Defined at:
  5058 ;;		line 171 in file "color.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  RGBC            1   41[COMRAM] PTR struct RGBC_val
  5061 ;;		 -> main@RGBC(8), 
  5062 ;;  RGBC_n          1   42[COMRAM] PTR struct RGBC_val
  5063 ;;		 -> main@RGBC_n(8), 
  5064 ;;  red             1   43[COMRAM] PTR struct RGB_calib
  5065 ;;		 -> main@red(6), 
  5066 ;;  green           1   44[COMRAM] PTR struct RGB_calib
  5067 ;;		 -> main@green(6), 
  5068 ;;  blue            1   45[COMRAM] PTR struct RGB_calib
  5069 ;;		 -> main@blue(6), 
  5070 ;;  yellow          1   46[COMRAM] PTR struct RGB_calib
  5071 ;;		 -> main@yellow(6), 
  5072 ;;  pink            1   47[COMRAM] PTR struct RGB_calib
  5073 ;;		 -> main@pink(6), 
  5074 ;;  orange          1   48[COMRAM] PTR struct RGB_calib
  5075 ;;		 -> main@orange(6), 
  5076 ;;  lightblue       1   49[COMRAM] PTR struct RGB_calib
  5077 ;;		 -> main@lightblue(6), 
  5078 ;;  white           1   50[COMRAM] PTR struct RGB_calib
  5079 ;;		 -> main@white(6), 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5091 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5094 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5095 ;;Total ram usage:       12 bytes
  5096 ;; Hardware stack levels used: 1
  5097 ;; Hardware stack levels required when called: 6
  5098 ;; This function calls:
  5099 ;;		_color_normalise
  5100 ;;		_color_read
  5101 ;;		_white_Light
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text25
  5108   000E6C                     __ptext25:
  5109                           	callstack 0
  5110   000E6C                     _color_calibration:
  5111                           	callstack 24
  5112   000E6C                     
  5113                           ;color.c: 171: void color_calibration(RGBC_val *RGBC, RGBC_val *RGBC_n, RGB_calib *red, 
      +                          RGB_calib *green, RGB_calib *blue, RGB_calib *yellow, RGB_calib *pink, RGB_calib *orange
      +                          , RGB_calib *lightblue, RGB_calib *white);color.c: 172: {;color.c: 173:     white_Light(
      +                          1);
  5114   000E6C  0E01               	movlw	1
  5115   000E6E  ECB3  F017         	call	_white_Light
  5116   000E72                     
  5117                           ;color.c: 174:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5118   000E72  8680               	bsf	128,3,c	;volatile
  5119   000E74  8E7C               	bsf	124,7,c	;volatile
  5120   000E76                     l131:
  5121   000E76  B48E               	btfsc	142,2,c	;volatile
  5122   000E78  EF40  F007         	goto	u1951
  5123   000E7C  EF42  F007         	goto	u1950
  5124   000E80                     u1951:
  5125   000E80  EF3B  F007         	goto	l131
  5126   000E84                     u1950:
  5127   000E84                     
  5128                           ;color.c: 177:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5129   000E84  9680               	bcf	128,3,c	;volatile
  5130   000E86  9E7C               	bcf	124,7,c	;volatile
  5131   000E88                     
  5132                           ;color.c: 178:     color_read(RGBC);
  5133   000E88  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5134   000E8C  EC1C  F00D         	call	_color_read	;wreg free
  5135   000E90                     
  5136                           ;color.c: 179:     color_normalise(*RGBC, RGBC_n);
  5137   000E90  502A               	movf	color_calibration@RGBC^0,w,c
  5138   000E92  6ED9               	movwf	fsr2l,c
  5139   000E94  6ADA               	clrf	fsr2h,c
  5140   000E96  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5141   000E9A  0E07               	movlw	7
  5142   000E9C                     u1961:
  5143   000E9C  CFDB FFEB          	movff	plusw2,plusw0
  5144   000EA0  06E8               	decf	wreg,f,c
  5145   000EA2  E2FC               	bc	u1961
  5146   000EA4  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5147   000EA8  EC2B  F012         	call	_color_normalise	;wreg free
  5148   000EAC                     
  5149                           ;color.c: 180:     red->R = RGBC_n->R;
  5150   000EAC  502B               	movf	color_calibration@RGBC_n^0,w,c
  5151   000EAE  6ED9               	movwf	fsr2l,c
  5152   000EB0  6ADA               	clrf	fsr2h,c
  5153   000EB2  502C               	movf	color_calibration@red^0,w,c
  5154   000EB4  6EE1               	movwf	fsr1l,c
  5155   000EB6  6AE2               	clrf	fsr1h,c
  5156   000EB8  CFDE FFE6          	movff	postinc2,postinc1
  5157   000EBC  CFDD FFE5          	movff	postdec2,postdec1
  5158   000EC0                     
  5159                           ;color.c: 181:     red->G = RGBC_n->G;
  5160   000EC0  502B               	movf	color_calibration@RGBC_n^0,w,c
  5161   000EC2  6ED9               	movwf	fsr2l,c
  5162   000EC4  6ADA               	clrf	fsr2h,c
  5163   000EC6  0E02               	movlw	2
  5164   000EC8  26D9               	addwf	fsr2l,f,c
  5165   000ECA  502C               	movf	color_calibration@red^0,w,c
  5166   000ECC  6EE1               	movwf	fsr1l,c
  5167   000ECE  6AE2               	clrf	fsr1h,c
  5168   000ED0  0E02               	movlw	2
  5169   000ED2  26E1               	addwf	fsr1l,f,c
  5170   000ED4  CFDE FFE6          	movff	postinc2,postinc1
  5171   000ED8  CFDD FFE5          	movff	postdec2,postdec1
  5172   000EDC                     
  5173                           ;color.c: 182:     red->B = RGBC_n->B;
  5174   000EDC  502B               	movf	color_calibration@RGBC_n^0,w,c
  5175   000EDE  6ED9               	movwf	fsr2l,c
  5176   000EE0  6ADA               	clrf	fsr2h,c
  5177   000EE2  0E04               	movlw	4
  5178   000EE4  26D9               	addwf	fsr2l,f,c
  5179   000EE6  502C               	movf	color_calibration@red^0,w,c
  5180   000EE8  6EE1               	movwf	fsr1l,c
  5181   000EEA  6AE2               	clrf	fsr1h,c
  5182   000EEC  0E04               	movlw	4
  5183   000EEE  26E1               	addwf	fsr1l,f,c
  5184   000EF0  CFDE FFE6          	movff	postinc2,postinc1
  5185   000EF4  CFDD FFE5          	movff	postdec2,postdec1
  5186   000EF8                     
  5187                           ;color.c: 184:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5188   000EF8  0E29               	movlw	41
  5189   000EFA  6E35               	movwf	(??_color_calibration+1)^0,c
  5190   000EFC  0E96               	movlw	150
  5191   000EFE  6E34               	movwf	??_color_calibration^0,c
  5192   000F00  0E7F               	movlw	127
  5193   000F02                     u2807:
  5194   000F02  2EE8               	decfsz	wreg,f,c
  5195   000F04  D7FE               	bra	u2807
  5196   000F06  2E34               	decfsz	??_color_calibration^0,f,c
  5197   000F08  D7FC               	bra	u2807
  5198   000F0A  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5199   000F0C  D7FA               	bra	u2807
  5200   000F0E  0000               	nop	
  5201   000F10                     
  5202                           ;color.c: 185:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5203   000F10  8680               	bsf	128,3,c	;volatile
  5204   000F12  8E7C               	bsf	124,7,c	;volatile
  5205   000F14                     l134:
  5206   000F14  B48E               	btfsc	142,2,c	;volatile
  5207   000F16  EF8F  F007         	goto	u1971
  5208   000F1A  EF91  F007         	goto	u1970
  5209   000F1E                     u1971:
  5210   000F1E  EF8A  F007         	goto	l134
  5211   000F22                     u1970:
  5212   000F22                     
  5213                           ;color.c: 188:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5214   000F22  9680               	bcf	128,3,c	;volatile
  5215   000F24  9E7C               	bcf	124,7,c	;volatile
  5216   000F26                     
  5217                           ;color.c: 189:     color_read(RGBC);
  5218   000F26  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5219   000F2A  EC1C  F00D         	call	_color_read	;wreg free
  5220   000F2E                     
  5221                           ;color.c: 190:     color_normalise(*RGBC, RGBC_n);
  5222   000F2E  502A               	movf	color_calibration@RGBC^0,w,c
  5223   000F30  6ED9               	movwf	fsr2l,c
  5224   000F32  6ADA               	clrf	fsr2h,c
  5225   000F34  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5226   000F38  0E07               	movlw	7
  5227   000F3A                     u1981:
  5228   000F3A  CFDB FFEB          	movff	plusw2,plusw0
  5229   000F3E  06E8               	decf	wreg,f,c
  5230   000F40  E2FC               	bc	u1981
  5231   000F42  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5232   000F46  EC2B  F012         	call	_color_normalise	;wreg free
  5233   000F4A                     
  5234                           ;color.c: 191:     green->R = RGBC_n->R;
  5235   000F4A  502B               	movf	color_calibration@RGBC_n^0,w,c
  5236   000F4C  6ED9               	movwf	fsr2l,c
  5237   000F4E  6ADA               	clrf	fsr2h,c
  5238   000F50  502D               	movf	color_calibration@green^0,w,c
  5239   000F52  6EE1               	movwf	fsr1l,c
  5240   000F54  6AE2               	clrf	fsr1h,c
  5241   000F56  CFDE FFE6          	movff	postinc2,postinc1
  5242   000F5A  CFDD FFE5          	movff	postdec2,postdec1
  5243   000F5E                     
  5244                           ;color.c: 192:     green->G = RGBC_n->G;
  5245   000F5E  502B               	movf	color_calibration@RGBC_n^0,w,c
  5246   000F60  6ED9               	movwf	fsr2l,c
  5247   000F62  6ADA               	clrf	fsr2h,c
  5248   000F64  0E02               	movlw	2
  5249   000F66  26D9               	addwf	fsr2l,f,c
  5250   000F68  502D               	movf	color_calibration@green^0,w,c
  5251   000F6A  6EE1               	movwf	fsr1l,c
  5252   000F6C  6AE2               	clrf	fsr1h,c
  5253   000F6E  0E02               	movlw	2
  5254   000F70  26E1               	addwf	fsr1l,f,c
  5255   000F72  CFDE FFE6          	movff	postinc2,postinc1
  5256   000F76  CFDD FFE5          	movff	postdec2,postdec1
  5257   000F7A                     
  5258                           ;color.c: 193:     green->B = RGBC_n->B;
  5259   000F7A  502B               	movf	color_calibration@RGBC_n^0,w,c
  5260   000F7C  6ED9               	movwf	fsr2l,c
  5261   000F7E  6ADA               	clrf	fsr2h,c
  5262   000F80  0E04               	movlw	4
  5263   000F82  26D9               	addwf	fsr2l,f,c
  5264   000F84  502D               	movf	color_calibration@green^0,w,c
  5265   000F86  6EE1               	movwf	fsr1l,c
  5266   000F88  6AE2               	clrf	fsr1h,c
  5267   000F8A  0E04               	movlw	4
  5268   000F8C  26E1               	addwf	fsr1l,f,c
  5269   000F8E  CFDE FFE6          	movff	postinc2,postinc1
  5270   000F92  CFDD FFE5          	movff	postdec2,postdec1
  5271   000F96                     
  5272                           ;color.c: 195:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5273   000F96  0E29               	movlw	41
  5274   000F98  6E35               	movwf	(??_color_calibration+1)^0,c
  5275   000F9A  0E96               	movlw	150
  5276   000F9C  6E34               	movwf	??_color_calibration^0,c
  5277   000F9E  0E7F               	movlw	127
  5278   000FA0                     u2817:
  5279   000FA0  2EE8               	decfsz	wreg,f,c
  5280   000FA2  D7FE               	bra	u2817
  5281   000FA4  2E34               	decfsz	??_color_calibration^0,f,c
  5282   000FA6  D7FC               	bra	u2817
  5283   000FA8  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5284   000FAA  D7FA               	bra	u2817
  5285   000FAC  0000               	nop	
  5286   000FAE                     
  5287                           ;color.c: 196:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5288   000FAE  8680               	bsf	128,3,c	;volatile
  5289   000FB0  8E7C               	bsf	124,7,c	;volatile
  5290   000FB2                     l137:
  5291   000FB2  B48E               	btfsc	142,2,c	;volatile
  5292   000FB4  EFDE  F007         	goto	u1991
  5293   000FB8  EFE0  F007         	goto	u1990
  5294   000FBC                     u1991:
  5295   000FBC  EFD9  F007         	goto	l137
  5296   000FC0                     u1990:
  5297   000FC0                     
  5298                           ;color.c: 199:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5299   000FC0  9680               	bcf	128,3,c	;volatile
  5300   000FC2  9E7C               	bcf	124,7,c	;volatile
  5301   000FC4                     
  5302                           ;color.c: 200:     color_read(RGBC);
  5303   000FC4  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5304   000FC8  EC1C  F00D         	call	_color_read	;wreg free
  5305   000FCC                     
  5306                           ;color.c: 201:     color_normalise(*RGBC, RGBC_n);
  5307   000FCC  502A               	movf	color_calibration@RGBC^0,w,c
  5308   000FCE  6ED9               	movwf	fsr2l,c
  5309   000FD0  6ADA               	clrf	fsr2h,c
  5310   000FD2  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5311   000FD6  0E07               	movlw	7
  5312   000FD8                     u2001:
  5313   000FD8  CFDB FFEB          	movff	plusw2,plusw0
  5314   000FDC  06E8               	decf	wreg,f,c
  5315   000FDE  E2FC               	bc	u2001
  5316   000FE0  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5317   000FE4  EC2B  F012         	call	_color_normalise	;wreg free
  5318   000FE8                     
  5319                           ;color.c: 202:     blue->R = RGBC_n->R;
  5320   000FE8  502B               	movf	color_calibration@RGBC_n^0,w,c
  5321   000FEA  6ED9               	movwf	fsr2l,c
  5322   000FEC  6ADA               	clrf	fsr2h,c
  5323   000FEE  502E               	movf	color_calibration@blue^0,w,c
  5324   000FF0  6EE1               	movwf	fsr1l,c
  5325   000FF2  6AE2               	clrf	fsr1h,c
  5326   000FF4  CFDE FFE6          	movff	postinc2,postinc1
  5327   000FF8  CFDD FFE5          	movff	postdec2,postdec1
  5328   000FFC                     
  5329                           ;color.c: 203:     blue->G = RGBC_n->G;
  5330   000FFC  502B               	movf	color_calibration@RGBC_n^0,w,c
  5331   000FFE  6ED9               	movwf	fsr2l,c
  5332   001000  6ADA               	clrf	fsr2h,c
  5333   001002  0E02               	movlw	2
  5334   001004  26D9               	addwf	fsr2l,f,c
  5335   001006  502E               	movf	color_calibration@blue^0,w,c
  5336   001008  6EE1               	movwf	fsr1l,c
  5337   00100A  6AE2               	clrf	fsr1h,c
  5338   00100C  0E02               	movlw	2
  5339   00100E  26E1               	addwf	fsr1l,f,c
  5340   001010  CFDE FFE6          	movff	postinc2,postinc1
  5341   001014  CFDD FFE5          	movff	postdec2,postdec1
  5342   001018                     
  5343                           ;color.c: 204:     blue->B = RGBC_n->B;
  5344   001018  502B               	movf	color_calibration@RGBC_n^0,w,c
  5345   00101A  6ED9               	movwf	fsr2l,c
  5346   00101C  6ADA               	clrf	fsr2h,c
  5347   00101E  0E04               	movlw	4
  5348   001020  26D9               	addwf	fsr2l,f,c
  5349   001022  502E               	movf	color_calibration@blue^0,w,c
  5350   001024  6EE1               	movwf	fsr1l,c
  5351   001026  6AE2               	clrf	fsr1h,c
  5352   001028  0E04               	movlw	4
  5353   00102A  26E1               	addwf	fsr1l,f,c
  5354   00102C  CFDE FFE6          	movff	postinc2,postinc1
  5355   001030  CFDD FFE5          	movff	postdec2,postdec1
  5356   001034                     
  5357                           ;color.c: 206:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5358   001034  0E29               	movlw	41
  5359   001036  6E35               	movwf	(??_color_calibration+1)^0,c
  5360   001038  0E96               	movlw	150
  5361   00103A  6E34               	movwf	??_color_calibration^0,c
  5362   00103C  0E7F               	movlw	127
  5363   00103E                     u2827:
  5364   00103E  2EE8               	decfsz	wreg,f,c
  5365   001040  D7FE               	bra	u2827
  5366   001042  2E34               	decfsz	??_color_calibration^0,f,c
  5367   001044  D7FC               	bra	u2827
  5368   001046  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5369   001048  D7FA               	bra	u2827
  5370   00104A  0000               	nop	
  5371   00104C                     
  5372                           ;color.c: 207:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5373   00104C  8680               	bsf	128,3,c	;volatile
  5374   00104E  8E7C               	bsf	124,7,c	;volatile
  5375   001050                     l140:
  5376   001050  B48E               	btfsc	142,2,c	;volatile
  5377   001052  EF2D  F008         	goto	u2011
  5378   001056  EF2F  F008         	goto	u2010
  5379   00105A                     u2011:
  5380   00105A  EF28  F008         	goto	l140
  5381   00105E                     u2010:
  5382   00105E                     
  5383                           ;color.c: 210:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5384   00105E  9680               	bcf	128,3,c	;volatile
  5385   001060  9E7C               	bcf	124,7,c	;volatile
  5386   001062                     
  5387                           ;color.c: 211:     color_read(RGBC);
  5388   001062  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5389   001066  EC1C  F00D         	call	_color_read	;wreg free
  5390   00106A                     
  5391                           ;color.c: 212:     color_normalise(*RGBC, RGBC_n);
  5392   00106A  502A               	movf	color_calibration@RGBC^0,w,c
  5393   00106C  6ED9               	movwf	fsr2l,c
  5394   00106E  6ADA               	clrf	fsr2h,c
  5395   001070  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5396   001074  0E07               	movlw	7
  5397   001076                     u2021:
  5398   001076  CFDB FFEB          	movff	plusw2,plusw0
  5399   00107A  06E8               	decf	wreg,f,c
  5400   00107C  E2FC               	bc	u2021
  5401   00107E  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5402   001082  EC2B  F012         	call	_color_normalise	;wreg free
  5403   001086                     
  5404                           ;color.c: 213:     yellow->R = RGBC_n->R;
  5405   001086  502B               	movf	color_calibration@RGBC_n^0,w,c
  5406   001088  6ED9               	movwf	fsr2l,c
  5407   00108A  6ADA               	clrf	fsr2h,c
  5408   00108C  502F               	movf	color_calibration@yellow^0,w,c
  5409   00108E  6EE1               	movwf	fsr1l,c
  5410   001090  6AE2               	clrf	fsr1h,c
  5411   001092  CFDE FFE6          	movff	postinc2,postinc1
  5412   001096  CFDD FFE5          	movff	postdec2,postdec1
  5413   00109A                     
  5414                           ;color.c: 214:     yellow->G = RGBC_n->G;
  5415   00109A  502B               	movf	color_calibration@RGBC_n^0,w,c
  5416   00109C  6ED9               	movwf	fsr2l,c
  5417   00109E  6ADA               	clrf	fsr2h,c
  5418   0010A0  0E02               	movlw	2
  5419   0010A2  26D9               	addwf	fsr2l,f,c
  5420   0010A4  502F               	movf	color_calibration@yellow^0,w,c
  5421   0010A6  6EE1               	movwf	fsr1l,c
  5422   0010A8  6AE2               	clrf	fsr1h,c
  5423   0010AA  0E02               	movlw	2
  5424   0010AC  26E1               	addwf	fsr1l,f,c
  5425   0010AE  CFDE FFE6          	movff	postinc2,postinc1
  5426   0010B2  CFDD FFE5          	movff	postdec2,postdec1
  5427   0010B6                     
  5428                           ;color.c: 215:     yellow->B = RGBC_n->B;
  5429   0010B6  502B               	movf	color_calibration@RGBC_n^0,w,c
  5430   0010B8  6ED9               	movwf	fsr2l,c
  5431   0010BA  6ADA               	clrf	fsr2h,c
  5432   0010BC  0E04               	movlw	4
  5433   0010BE  26D9               	addwf	fsr2l,f,c
  5434   0010C0  502F               	movf	color_calibration@yellow^0,w,c
  5435   0010C2  6EE1               	movwf	fsr1l,c
  5436   0010C4  6AE2               	clrf	fsr1h,c
  5437   0010C6  0E04               	movlw	4
  5438   0010C8  26E1               	addwf	fsr1l,f,c
  5439   0010CA  CFDE FFE6          	movff	postinc2,postinc1
  5440   0010CE  CFDD FFE5          	movff	postdec2,postdec1
  5441   0010D2                     
  5442                           ;color.c: 217:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5443   0010D2  0E29               	movlw	41
  5444   0010D4  6E35               	movwf	(??_color_calibration+1)^0,c
  5445   0010D6  0E96               	movlw	150
  5446   0010D8  6E34               	movwf	??_color_calibration^0,c
  5447   0010DA  0E7F               	movlw	127
  5448   0010DC                     u2837:
  5449   0010DC  2EE8               	decfsz	wreg,f,c
  5450   0010DE  D7FE               	bra	u2837
  5451   0010E0  2E34               	decfsz	??_color_calibration^0,f,c
  5452   0010E2  D7FC               	bra	u2837
  5453   0010E4  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5454   0010E6  D7FA               	bra	u2837
  5455   0010E8  0000               	nop	
  5456   0010EA                     
  5457                           ;color.c: 218:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5458   0010EA  8680               	bsf	128,3,c	;volatile
  5459   0010EC  8E7C               	bsf	124,7,c	;volatile
  5460   0010EE                     l143:
  5461   0010EE  B48E               	btfsc	142,2,c	;volatile
  5462   0010F0  EF7C  F008         	goto	u2031
  5463   0010F4  EF7E  F008         	goto	u2030
  5464   0010F8                     u2031:
  5465   0010F8  EF77  F008         	goto	l143
  5466   0010FC                     u2030:
  5467   0010FC                     
  5468                           ;color.c: 221:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5469   0010FC  9680               	bcf	128,3,c	;volatile
  5470   0010FE  9E7C               	bcf	124,7,c	;volatile
  5471   001100                     
  5472                           ;color.c: 222:     color_read(RGBC);
  5473   001100  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5474   001104  EC1C  F00D         	call	_color_read	;wreg free
  5475   001108                     
  5476                           ;color.c: 223:     color_normalise(*RGBC, RGBC_n);
  5477   001108  502A               	movf	color_calibration@RGBC^0,w,c
  5478   00110A  6ED9               	movwf	fsr2l,c
  5479   00110C  6ADA               	clrf	fsr2h,c
  5480   00110E  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5481   001112  0E07               	movlw	7
  5482   001114                     u2041:
  5483   001114  CFDB FFEB          	movff	plusw2,plusw0
  5484   001118  06E8               	decf	wreg,f,c
  5485   00111A  E2FC               	bc	u2041
  5486   00111C  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5487   001120  EC2B  F012         	call	_color_normalise	;wreg free
  5488   001124                     
  5489                           ;color.c: 224:     pink->R = RGBC_n->R;
  5490   001124  502B               	movf	color_calibration@RGBC_n^0,w,c
  5491   001126  6ED9               	movwf	fsr2l,c
  5492   001128  6ADA               	clrf	fsr2h,c
  5493   00112A  5030               	movf	color_calibration@pink^0,w,c
  5494   00112C  6EE1               	movwf	fsr1l,c
  5495   00112E  6AE2               	clrf	fsr1h,c
  5496   001130  CFDE FFE6          	movff	postinc2,postinc1
  5497   001134  CFDD FFE5          	movff	postdec2,postdec1
  5498   001138                     
  5499                           ;color.c: 225:     pink->G = RGBC_n->G;
  5500   001138  502B               	movf	color_calibration@RGBC_n^0,w,c
  5501   00113A  6ED9               	movwf	fsr2l,c
  5502   00113C  6ADA               	clrf	fsr2h,c
  5503   00113E  0E02               	movlw	2
  5504   001140  26D9               	addwf	fsr2l,f,c
  5505   001142  5030               	movf	color_calibration@pink^0,w,c
  5506   001144  6EE1               	movwf	fsr1l,c
  5507   001146  6AE2               	clrf	fsr1h,c
  5508   001148  0E02               	movlw	2
  5509   00114A  26E1               	addwf	fsr1l,f,c
  5510   00114C  CFDE FFE6          	movff	postinc2,postinc1
  5511   001150  CFDD FFE5          	movff	postdec2,postdec1
  5512   001154                     
  5513                           ;color.c: 226:     pink->B = RGBC_n->B;
  5514   001154  502B               	movf	color_calibration@RGBC_n^0,w,c
  5515   001156  6ED9               	movwf	fsr2l,c
  5516   001158  6ADA               	clrf	fsr2h,c
  5517   00115A  0E04               	movlw	4
  5518   00115C  26D9               	addwf	fsr2l,f,c
  5519   00115E  5030               	movf	color_calibration@pink^0,w,c
  5520   001160  6EE1               	movwf	fsr1l,c
  5521   001162  6AE2               	clrf	fsr1h,c
  5522   001164  0E04               	movlw	4
  5523   001166  26E1               	addwf	fsr1l,f,c
  5524   001168  CFDE FFE6          	movff	postinc2,postinc1
  5525   00116C  CFDD FFE5          	movff	postdec2,postdec1
  5526   001170                     
  5527                           ;color.c: 228:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5528   001170  0E29               	movlw	41
  5529   001172  6E35               	movwf	(??_color_calibration+1)^0,c
  5530   001174  0E96               	movlw	150
  5531   001176  6E34               	movwf	??_color_calibration^0,c
  5532   001178  0E7F               	movlw	127
  5533   00117A                     u2847:
  5534   00117A  2EE8               	decfsz	wreg,f,c
  5535   00117C  D7FE               	bra	u2847
  5536   00117E  2E34               	decfsz	??_color_calibration^0,f,c
  5537   001180  D7FC               	bra	u2847
  5538   001182  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5539   001184  D7FA               	bra	u2847
  5540   001186  0000               	nop	
  5541   001188                     
  5542                           ;color.c: 229:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5543   001188  8680               	bsf	128,3,c	;volatile
  5544   00118A  8E7C               	bsf	124,7,c	;volatile
  5545   00118C                     l146:
  5546   00118C  B48E               	btfsc	142,2,c	;volatile
  5547   00118E  EFCB  F008         	goto	u2051
  5548   001192  EFCD  F008         	goto	u2050
  5549   001196                     u2051:
  5550   001196  EFC6  F008         	goto	l146
  5551   00119A                     u2050:
  5552   00119A                     
  5553                           ;color.c: 232:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5554   00119A  9680               	bcf	128,3,c	;volatile
  5555   00119C  9E7C               	bcf	124,7,c	;volatile
  5556   00119E                     
  5557                           ;color.c: 233:     color_read(RGBC);
  5558   00119E  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5559   0011A2  EC1C  F00D         	call	_color_read	;wreg free
  5560   0011A6                     
  5561                           ;color.c: 234:     color_normalise(*RGBC, RGBC_n);
  5562   0011A6  502A               	movf	color_calibration@RGBC^0,w,c
  5563   0011A8  6ED9               	movwf	fsr2l,c
  5564   0011AA  6ADA               	clrf	fsr2h,c
  5565   0011AC  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5566   0011B0  0E07               	movlw	7
  5567   0011B2                     u2061:
  5568   0011B2  CFDB FFEB          	movff	plusw2,plusw0
  5569   0011B6  06E8               	decf	wreg,f,c
  5570   0011B8  E2FC               	bc	u2061
  5571   0011BA  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5572   0011BE  EC2B  F012         	call	_color_normalise	;wreg free
  5573   0011C2                     
  5574                           ;color.c: 235:     orange->R = RGBC_n->R;
  5575   0011C2  502B               	movf	color_calibration@RGBC_n^0,w,c
  5576   0011C4  6ED9               	movwf	fsr2l,c
  5577   0011C6  6ADA               	clrf	fsr2h,c
  5578   0011C8  5031               	movf	color_calibration@orange^0,w,c
  5579   0011CA  6EE1               	movwf	fsr1l,c
  5580   0011CC  6AE2               	clrf	fsr1h,c
  5581   0011CE  CFDE FFE6          	movff	postinc2,postinc1
  5582   0011D2  CFDD FFE5          	movff	postdec2,postdec1
  5583   0011D6                     
  5584                           ;color.c: 236:     orange->G = RGBC_n->G;
  5585   0011D6  502B               	movf	color_calibration@RGBC_n^0,w,c
  5586   0011D8  6ED9               	movwf	fsr2l,c
  5587   0011DA  6ADA               	clrf	fsr2h,c
  5588   0011DC  0E02               	movlw	2
  5589   0011DE  26D9               	addwf	fsr2l,f,c
  5590   0011E0  5031               	movf	color_calibration@orange^0,w,c
  5591   0011E2  6EE1               	movwf	fsr1l,c
  5592   0011E4  6AE2               	clrf	fsr1h,c
  5593   0011E6  0E02               	movlw	2
  5594   0011E8  26E1               	addwf	fsr1l,f,c
  5595   0011EA  CFDE FFE6          	movff	postinc2,postinc1
  5596   0011EE  CFDD FFE5          	movff	postdec2,postdec1
  5597   0011F2                     
  5598                           ;color.c: 237:     orange->B = RGBC_n->B;
  5599   0011F2  502B               	movf	color_calibration@RGBC_n^0,w,c
  5600   0011F4  6ED9               	movwf	fsr2l,c
  5601   0011F6  6ADA               	clrf	fsr2h,c
  5602   0011F8  0E04               	movlw	4
  5603   0011FA  26D9               	addwf	fsr2l,f,c
  5604   0011FC  5031               	movf	color_calibration@orange^0,w,c
  5605   0011FE  6EE1               	movwf	fsr1l,c
  5606   001200  6AE2               	clrf	fsr1h,c
  5607   001202  0E04               	movlw	4
  5608   001204  26E1               	addwf	fsr1l,f,c
  5609   001206  CFDE FFE6          	movff	postinc2,postinc1
  5610   00120A  CFDD FFE5          	movff	postdec2,postdec1
  5611   00120E                     
  5612                           ;color.c: 239:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5613   00120E  0E29               	movlw	41
  5614   001210  6E35               	movwf	(??_color_calibration+1)^0,c
  5615   001212  0E96               	movlw	150
  5616   001214  6E34               	movwf	??_color_calibration^0,c
  5617   001216  0E7F               	movlw	127
  5618   001218                     u2857:
  5619   001218  2EE8               	decfsz	wreg,f,c
  5620   00121A  D7FE               	bra	u2857
  5621   00121C  2E34               	decfsz	??_color_calibration^0,f,c
  5622   00121E  D7FC               	bra	u2857
  5623   001220  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5624   001222  D7FA               	bra	u2857
  5625   001224  0000               	nop	
  5626   001226                     
  5627                           ;color.c: 240:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5628   001226  8680               	bsf	128,3,c	;volatile
  5629   001228  8E7C               	bsf	124,7,c	;volatile
  5630   00122A                     l149:
  5631   00122A  B48E               	btfsc	142,2,c	;volatile
  5632   00122C  EF1A  F009         	goto	u2071
  5633   001230  EF1C  F009         	goto	u2070
  5634   001234                     u2071:
  5635   001234  EF15  F009         	goto	l149
  5636   001238                     u2070:
  5637   001238                     
  5638                           ;color.c: 243:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5639   001238  9680               	bcf	128,3,c	;volatile
  5640   00123A  9E7C               	bcf	124,7,c	;volatile
  5641   00123C                     
  5642                           ;color.c: 244:     color_read(RGBC);
  5643   00123C  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5644   001240  EC1C  F00D         	call	_color_read	;wreg free
  5645   001244                     
  5646                           ;color.c: 245:     color_normalise(*RGBC, RGBC_n);
  5647   001244  502A               	movf	color_calibration@RGBC^0,w,c
  5648   001246  6ED9               	movwf	fsr2l,c
  5649   001248  6ADA               	clrf	fsr2h,c
  5650   00124A  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5651   00124E  0E07               	movlw	7
  5652   001250                     u2081:
  5653   001250  CFDB FFEB          	movff	plusw2,plusw0
  5654   001254  06E8               	decf	wreg,f,c
  5655   001256  E2FC               	bc	u2081
  5656   001258  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5657   00125C  EC2B  F012         	call	_color_normalise	;wreg free
  5658   001260                     
  5659                           ;color.c: 246:     lightblue->R = RGBC_n->R;
  5660   001260  502B               	movf	color_calibration@RGBC_n^0,w,c
  5661   001262  6ED9               	movwf	fsr2l,c
  5662   001264  6ADA               	clrf	fsr2h,c
  5663   001266  5032               	movf	color_calibration@lightblue^0,w,c
  5664   001268  6EE1               	movwf	fsr1l,c
  5665   00126A  6AE2               	clrf	fsr1h,c
  5666   00126C  CFDE FFE6          	movff	postinc2,postinc1
  5667   001270  CFDD FFE5          	movff	postdec2,postdec1
  5668   001274                     
  5669                           ;color.c: 247:     lightblue->G = RGBC_n->G;
  5670   001274  502B               	movf	color_calibration@RGBC_n^0,w,c
  5671   001276  6ED9               	movwf	fsr2l,c
  5672   001278  6ADA               	clrf	fsr2h,c
  5673   00127A  0E02               	movlw	2
  5674   00127C  26D9               	addwf	fsr2l,f,c
  5675   00127E  5032               	movf	color_calibration@lightblue^0,w,c
  5676   001280  6EE1               	movwf	fsr1l,c
  5677   001282  6AE2               	clrf	fsr1h,c
  5678   001284  0E02               	movlw	2
  5679   001286  26E1               	addwf	fsr1l,f,c
  5680   001288  CFDE FFE6          	movff	postinc2,postinc1
  5681   00128C  CFDD FFE5          	movff	postdec2,postdec1
  5682   001290                     
  5683                           ;color.c: 248:     lightblue->B = RGBC_n->B;
  5684   001290  502B               	movf	color_calibration@RGBC_n^0,w,c
  5685   001292  6ED9               	movwf	fsr2l,c
  5686   001294  6ADA               	clrf	fsr2h,c
  5687   001296  0E04               	movlw	4
  5688   001298  26D9               	addwf	fsr2l,f,c
  5689   00129A  5032               	movf	color_calibration@lightblue^0,w,c
  5690   00129C  6EE1               	movwf	fsr1l,c
  5691   00129E  6AE2               	clrf	fsr1h,c
  5692   0012A0  0E04               	movlw	4
  5693   0012A2  26E1               	addwf	fsr1l,f,c
  5694   0012A4  CFDE FFE6          	movff	postinc2,postinc1
  5695   0012A8  CFDD FFE5          	movff	postdec2,postdec1
  5696   0012AC                     
  5697                           ;color.c: 250:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5698   0012AC  0E29               	movlw	41
  5699   0012AE  6E35               	movwf	(??_color_calibration+1)^0,c
  5700   0012B0  0E96               	movlw	150
  5701   0012B2  6E34               	movwf	??_color_calibration^0,c
  5702   0012B4  0E7F               	movlw	127
  5703   0012B6                     u2867:
  5704   0012B6  2EE8               	decfsz	wreg,f,c
  5705   0012B8  D7FE               	bra	u2867
  5706   0012BA  2E34               	decfsz	??_color_calibration^0,f,c
  5707   0012BC  D7FC               	bra	u2867
  5708   0012BE  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5709   0012C0  D7FA               	bra	u2867
  5710   0012C2  0000               	nop	
  5711   0012C4                     
  5712                           ;color.c: 251:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5713   0012C4  8680               	bsf	128,3,c	;volatile
  5714   0012C6  8E7C               	bsf	124,7,c	;volatile
  5715   0012C8                     l152:
  5716   0012C8  B48E               	btfsc	142,2,c	;volatile
  5717   0012CA  EF69  F009         	goto	u2091
  5718   0012CE  EF6B  F009         	goto	u2090
  5719   0012D2                     u2091:
  5720   0012D2  EF64  F009         	goto	l152
  5721   0012D6                     u2090:
  5722   0012D6                     
  5723                           ;color.c: 254:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5724   0012D6  9680               	bcf	128,3,c	;volatile
  5725   0012D8  9E7C               	bcf	124,7,c	;volatile
  5726   0012DA                     
  5727                           ;color.c: 255:     color_read(RGBC);
  5728   0012DA  C02A  F009         	movff	color_calibration@RGBC,color_read@RGBC
  5729   0012DE  EC1C  F00D         	call	_color_read	;wreg free
  5730   0012E2                     
  5731                           ;color.c: 256:     color_normalise(*RGBC, RGBC_n);
  5732   0012E2  502A               	movf	color_calibration@RGBC^0,w,c
  5733   0012E4  6ED9               	movwf	fsr2l,c
  5734   0012E6  6ADA               	clrf	fsr2h,c
  5735   0012E8  EE00  F01F         	lfsr	0,color_normalise@RGBC
  5736   0012EC  0E07               	movlw	7
  5737   0012EE                     u2101:
  5738   0012EE  CFDB FFEB          	movff	plusw2,plusw0
  5739   0012F2  06E8               	decf	wreg,f,c
  5740   0012F4  E2FC               	bc	u2101
  5741   0012F6  C02B  F027         	movff	color_calibration@RGBC_n,color_normalise@RGBC_n
  5742   0012FA  EC2B  F012         	call	_color_normalise	;wreg free
  5743   0012FE                     
  5744                           ;color.c: 257:     white->R = RGBC_n->R;
  5745   0012FE  502B               	movf	color_calibration@RGBC_n^0,w,c
  5746   001300  6ED9               	movwf	fsr2l,c
  5747   001302  6ADA               	clrf	fsr2h,c
  5748   001304  5033               	movf	color_calibration@white^0,w,c
  5749   001306  6EE1               	movwf	fsr1l,c
  5750   001308  6AE2               	clrf	fsr1h,c
  5751   00130A  CFDE FFE6          	movff	postinc2,postinc1
  5752   00130E  CFDD FFE5          	movff	postdec2,postdec1
  5753   001312                     
  5754                           ;color.c: 258:     white->G = RGBC_n->G;
  5755   001312  502B               	movf	color_calibration@RGBC_n^0,w,c
  5756   001314  6ED9               	movwf	fsr2l,c
  5757   001316  6ADA               	clrf	fsr2h,c
  5758   001318  0E02               	movlw	2
  5759   00131A  26D9               	addwf	fsr2l,f,c
  5760   00131C  5033               	movf	color_calibration@white^0,w,c
  5761   00131E  6EE1               	movwf	fsr1l,c
  5762   001320  6AE2               	clrf	fsr1h,c
  5763   001322  0E02               	movlw	2
  5764   001324  26E1               	addwf	fsr1l,f,c
  5765   001326  CFDE FFE6          	movff	postinc2,postinc1
  5766   00132A  CFDD FFE5          	movff	postdec2,postdec1
  5767   00132E                     
  5768                           ;color.c: 259:     white->B = RGBC_n->B;
  5769   00132E  502B               	movf	color_calibration@RGBC_n^0,w,c
  5770   001330  6ED9               	movwf	fsr2l,c
  5771   001332  6ADA               	clrf	fsr2h,c
  5772   001334  0E04               	movlw	4
  5773   001336  26D9               	addwf	fsr2l,f,c
  5774   001338  5033               	movf	color_calibration@white^0,w,c
  5775   00133A  6EE1               	movwf	fsr1l,c
  5776   00133C  6AE2               	clrf	fsr1h,c
  5777   00133E  0E04               	movlw	4
  5778   001340  26E1               	addwf	fsr1l,f,c
  5779   001342  CFDE FFE6          	movff	postinc2,postinc1
  5780   001346  CFDD FFE5          	movff	postdec2,postdec1
  5781   00134A                     
  5782                           ;color.c: 261:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5783   00134A  0E29               	movlw	41
  5784   00134C  6E35               	movwf	(??_color_calibration+1)^0,c
  5785   00134E  0E96               	movlw	150
  5786   001350  6E34               	movwf	??_color_calibration^0,c
  5787   001352  0E7F               	movlw	127
  5788   001354                     u2877:
  5789   001354  2EE8               	decfsz	wreg,f,c
  5790   001356  D7FE               	bra	u2877
  5791   001358  2E34               	decfsz	??_color_calibration^0,f,c
  5792   00135A  D7FC               	bra	u2877
  5793   00135C  2E35               	decfsz	(??_color_calibration+1)^0,f,c
  5794   00135E  D7FA               	bra	u2877
  5795   001360  0000               	nop	
  5796   001362                     
  5797                           ;color.c: 262:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5798   001362  8680               	bsf	128,3,c	;volatile
  5799   001364  8E7C               	bsf	124,7,c	;volatile
  5800   001366  0012               	return		;funcret
  5801   001368                     __end_of_color_calibration:
  5802                           	callstack 0
  5803                           
  5804 ;; *************** function _white_Light *****************
  5805 ;; Defined at:
  5806 ;;		line 42 in file "color.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;  state           1    wreg     unsigned char 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  state           1    4[COMRAM] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;Total ram usage:        1 bytes
  5825 ;; Hardware stack levels used: 1
  5826 ;; Hardware stack levels required when called: 3
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_main
  5831 ;;		_color_calibration
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text26
  5836   002F66                     __ptext26:
  5837                           	callstack 0
  5838   002F66                     _white_Light:
  5839                           	callstack 27
  5840                           
  5841                           ;incstack = 0
  5842                           ;white_Light@state stored from wreg
  5843   002F66  6E05               	movwf	white_Light@state^0,c
  5844   002F68                     
  5845                           ;color.c: 42: void white_Light(char state);color.c: 43: {;color.c: 44:     if (state){
  5846   002F68  5005               	movf	white_Light@state^0,w,c
  5847   002F6A  B4D8               	btfsc	status,2,c
  5848   002F6C  EFBA  F017         	goto	u1681
  5849   002F70  EFBC  F017         	goto	u1680
  5850   002F74                     u1681:
  5851   002F74  EFC1  F017         	goto	l117
  5852   002F78                     u1680:
  5853   002F78                     
  5854                           ;color.c: 45:         LATGbits.LATG0 = 1;
  5855   002F78  807F               	bsf	127,0,c	;volatile
  5856                           
  5857                           ;color.c: 46:         LATEbits.LATE7 = 1;
  5858   002F7A  8E7D               	bsf	125,7,c	;volatile
  5859                           
  5860                           ;color.c: 47:         LATAbits.LATA3 = 1;
  5861   002F7C  8679               	bsf	121,3,c	;volatile
  5862                           
  5863                           ;color.c: 48:     }
  5864   002F7E  EFC4  F017         	goto	l119
  5865   002F82                     l117:
  5866                           
  5867                           ;color.c: 50:         LATGbits.LATG0 = 0;
  5868   002F82  907F               	bcf	127,0,c	;volatile
  5869                           
  5870                           ;color.c: 51:         LATEbits.LATE7 = 0;
  5871   002F84  9E7D               	bcf	125,7,c	;volatile
  5872                           
  5873                           ;color.c: 52:         LATAbits.LATA3 = 0;
  5874   002F86  9679               	bcf	121,3,c	;volatile
  5875   002F88                     l119:
  5876   002F88  0012               	return		;funcret
  5877   002F8A                     __end_of_white_Light:
  5878                           	callstack 0
  5879                           
  5880 ;; *************** function _color_read *****************
  5881 ;; Defined at:
  5882 ;;		line 57 in file "color.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  RGBC            1    8[COMRAM] PTR struct RGBC_val
  5885 ;;		 -> main@RGBC(8), 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5897 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5899 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;Total ram usage:        8 bytes
  5902 ;; Hardware stack levels used: 1
  5903 ;; Hardware stack levels required when called: 5
  5904 ;; This function calls:
  5905 ;;		_I2C_2_Master_Read
  5906 ;;		_I2C_2_Master_RepStart
  5907 ;;		_I2C_2_Master_Start
  5908 ;;		_I2C_2_Master_Stop
  5909 ;;		_I2C_2_Master_Write
  5910 ;; This function is called by:
  5911 ;;		_main
  5912 ;;		_color_calibration
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text27
  5917   001A38                     __ptext27:
  5918                           	callstack 0
  5919   001A38                     _color_read:
  5920                           	callstack 25
  5921   001A38                     
  5922                           ;color.c: 57: void color_read(RGBC_val *RGBC);color.c: 58: {;color.c: 59:  I2C_2_Master_
      +                          Start();
  5923   001A38  EC3C  F018         	call	_I2C_2_Master_Start	;wreg free
  5924                           
  5925                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  5926   001A3C  0E52               	movlw	82
  5927   001A3E  EC2B  F018         	call	_I2C_2_Master_Write
  5928                           
  5929                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x16);
  5930   001A42  0EB6               	movlw	182
  5931   001A44  EC2B  F018         	call	_I2C_2_Master_Write
  5932                           
  5933                           ;color.c: 62:  I2C_2_Master_RepStart();
  5934   001A48  EC41  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5935                           
  5936                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  5937   001A4C  0E53               	movlw	83
  5938   001A4E  EC2B  F018         	call	_I2C_2_Master_Write
  5939   001A52                     
  5940                           ;color.c: 64:  RGBC->R=I2C_2_Master_Read(1);
  5941   001A52  0E01               	movlw	1
  5942   001A54  EC83  F016         	call	_I2C_2_Master_Read
  5943   001A58  6E0A               	movwf	??_color_read^0,c
  5944   001A5A  6A0B               	clrf	(??_color_read+1)^0,c
  5945   001A5C  5009               	movf	color_read@RGBC^0,w,c
  5946   001A5E  6ED9               	movwf	fsr2l,c
  5947   001A60  6ADA               	clrf	fsr2h,c
  5948   001A62  C00A  FFDE         	movff	??_color_read,postinc2
  5949   001A66  C00B  FFDD         	movff	??_color_read+1,postdec2
  5950   001A6A                     
  5951                           ;color.c: 65:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  5952   001A6A  5009               	movf	color_read@RGBC^0,w,c
  5953   001A6C  6ED9               	movwf	fsr2l,c
  5954   001A6E  6ADA               	clrf	fsr2h,c
  5955   001A70  CFDE F00A          	movff	postinc2,??_color_read
  5956   001A74  CFDD F00B          	movff	postdec2,??_color_read+1
  5957   001A78  0E00               	movlw	0
  5958   001A7A  EC83  F016         	call	_I2C_2_Master_Read
  5959   001A7E  6E0C               	movwf	(??_color_read+2)^0,c
  5960   001A80  500C               	movf	(??_color_read+2)^0,w,c
  5961   001A82  6E0E               	movwf	(??_color_read+4)^0,c
  5962   001A84  6A0D               	clrf	(??_color_read+3)^0,c
  5963   001A86  500A               	movf	??_color_read^0,w,c
  5964   001A88  100D               	iorwf	(??_color_read+3)^0,w,c
  5965   001A8A  6E0F               	movwf	(??_color_read+5)^0,c
  5966   001A8C  500B               	movf	(??_color_read+1)^0,w,c
  5967   001A8E  100E               	iorwf	(??_color_read+4)^0,w,c
  5968   001A90  6E10               	movwf	(??_color_read+6)^0,c
  5969   001A92  5009               	movf	color_read@RGBC^0,w,c
  5970   001A94  6ED9               	movwf	fsr2l,c
  5971   001A96  6ADA               	clrf	fsr2h,c
  5972   001A98  C00F  FFDE         	movff	??_color_read+5,postinc2
  5973   001A9C  C010  FFDD         	movff	??_color_read+6,postdec2
  5974                           
  5975                           ;color.c: 66:  I2C_2_Master_Stop();
  5976   001AA0  EC37  F018         	call	_I2C_2_Master_Stop	;wreg free
  5977                           
  5978                           ;color.c: 68:     I2C_2_Master_Start();
  5979   001AA4  EC3C  F018         	call	_I2C_2_Master_Start	;wreg free
  5980                           
  5981                           ;color.c: 69:  I2C_2_Master_Write(0x52 | 0x00);
  5982   001AA8  0E52               	movlw	82
  5983   001AAA  EC2B  F018         	call	_I2C_2_Master_Write
  5984                           
  5985                           ;color.c: 70:  I2C_2_Master_Write(0xA0 | 0x18);
  5986   001AAE  0EB8               	movlw	184
  5987   001AB0  EC2B  F018         	call	_I2C_2_Master_Write
  5988                           
  5989                           ;color.c: 71:  I2C_2_Master_RepStart();
  5990   001AB4  EC41  F018         	call	_I2C_2_Master_RepStart	;wreg free
  5991                           
  5992                           ;color.c: 72:  I2C_2_Master_Write(0x52 | 0x01);
  5993   001AB8  0E53               	movlw	83
  5994   001ABA  EC2B  F018         	call	_I2C_2_Master_Write
  5995   001ABE                     
  5996                           ;color.c: 73:  RGBC->G=I2C_2_Master_Read(1);
  5997   001ABE  0E01               	movlw	1
  5998   001AC0  EC83  F016         	call	_I2C_2_Master_Read
  5999   001AC4  6E0A               	movwf	??_color_read^0,c
  6000   001AC6  6A0B               	clrf	(??_color_read+1)^0,c
  6001   001AC8  5009               	movf	color_read@RGBC^0,w,c
  6002   001ACA  6ED9               	movwf	fsr2l,c
  6003   001ACC  6ADA               	clrf	fsr2h,c
  6004   001ACE  0E02               	movlw	2
  6005   001AD0  26D9               	addwf	fsr2l,f,c
  6006   001AD2  C00A  FFDE         	movff	??_color_read,postinc2
  6007   001AD6  C00B  FFDD         	movff	??_color_read+1,postdec2
  6008   001ADA                     
  6009                           ;color.c: 74:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  6010   001ADA  5009               	movf	color_read@RGBC^0,w,c
  6011   001ADC  6ED9               	movwf	fsr2l,c
  6012   001ADE  6ADA               	clrf	fsr2h,c
  6013   001AE0  0E02               	movlw	2
  6014   001AE2  26D9               	addwf	fsr2l,f,c
  6015   001AE4  CFDE F00A          	movff	postinc2,??_color_read
  6016   001AE8  CFDD F00B          	movff	postdec2,??_color_read+1
  6017   001AEC  0E00               	movlw	0
  6018   001AEE  EC83  F016         	call	_I2C_2_Master_Read
  6019   001AF2  6E0C               	movwf	(??_color_read+2)^0,c
  6020   001AF4  500C               	movf	(??_color_read+2)^0,w,c
  6021   001AF6  6E0E               	movwf	(??_color_read+4)^0,c
  6022   001AF8  6A0D               	clrf	(??_color_read+3)^0,c
  6023   001AFA  500A               	movf	??_color_read^0,w,c
  6024   001AFC  100D               	iorwf	(??_color_read+3)^0,w,c
  6025   001AFE  6E0F               	movwf	(??_color_read+5)^0,c
  6026   001B00  500B               	movf	(??_color_read+1)^0,w,c
  6027   001B02  100E               	iorwf	(??_color_read+4)^0,w,c
  6028   001B04  6E10               	movwf	(??_color_read+6)^0,c
  6029   001B06  5009               	movf	color_read@RGBC^0,w,c
  6030   001B08  6ED9               	movwf	fsr2l,c
  6031   001B0A  6ADA               	clrf	fsr2h,c
  6032   001B0C  0E02               	movlw	2
  6033   001B0E  26D9               	addwf	fsr2l,f,c
  6034   001B10  C00F  FFDE         	movff	??_color_read+5,postinc2
  6035   001B14  C010  FFDD         	movff	??_color_read+6,postdec2
  6036                           
  6037                           ;color.c: 75:  I2C_2_Master_Stop();
  6038   001B18  EC37  F018         	call	_I2C_2_Master_Stop	;wreg free
  6039                           
  6040                           ;color.c: 77:     I2C_2_Master_Start();
  6041   001B1C  EC3C  F018         	call	_I2C_2_Master_Start	;wreg free
  6042                           
  6043                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x00);
  6044   001B20  0E52               	movlw	82
  6045   001B22  EC2B  F018         	call	_I2C_2_Master_Write
  6046                           
  6047                           ;color.c: 79:  I2C_2_Master_Write(0xA0 | 0x1A);
  6048   001B26  0EBA               	movlw	186
  6049   001B28  EC2B  F018         	call	_I2C_2_Master_Write
  6050                           
  6051                           ;color.c: 80:  I2C_2_Master_RepStart();
  6052   001B2C  EC41  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6053                           
  6054                           ;color.c: 81:  I2C_2_Master_Write(0x52 | 0x01);
  6055   001B30  0E53               	movlw	83
  6056   001B32  EC2B  F018         	call	_I2C_2_Master_Write
  6057   001B36                     
  6058                           ;color.c: 82:  RGBC->B=I2C_2_Master_Read(1);
  6059   001B36  0E01               	movlw	1
  6060   001B38  EC83  F016         	call	_I2C_2_Master_Read
  6061   001B3C  6E0A               	movwf	??_color_read^0,c
  6062   001B3E  6A0B               	clrf	(??_color_read+1)^0,c
  6063   001B40  5009               	movf	color_read@RGBC^0,w,c
  6064   001B42  6ED9               	movwf	fsr2l,c
  6065   001B44  6ADA               	clrf	fsr2h,c
  6066   001B46  0E04               	movlw	4
  6067   001B48  26D9               	addwf	fsr2l,f,c
  6068   001B4A  C00A  FFDE         	movff	??_color_read,postinc2
  6069   001B4E  C00B  FFDD         	movff	??_color_read+1,postdec2
  6070   001B52                     
  6071                           ;color.c: 83:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  6072   001B52  5009               	movf	color_read@RGBC^0,w,c
  6073   001B54  6ED9               	movwf	fsr2l,c
  6074   001B56  6ADA               	clrf	fsr2h,c
  6075   001B58  0E04               	movlw	4
  6076   001B5A  26D9               	addwf	fsr2l,f,c
  6077   001B5C  CFDE F00A          	movff	postinc2,??_color_read
  6078   001B60  CFDD F00B          	movff	postdec2,??_color_read+1
  6079   001B64  0E00               	movlw	0
  6080   001B66  EC83  F016         	call	_I2C_2_Master_Read
  6081   001B6A  6E0C               	movwf	(??_color_read+2)^0,c
  6082   001B6C  500C               	movf	(??_color_read+2)^0,w,c
  6083   001B6E  6E0E               	movwf	(??_color_read+4)^0,c
  6084   001B70  6A0D               	clrf	(??_color_read+3)^0,c
  6085   001B72  500A               	movf	??_color_read^0,w,c
  6086   001B74  100D               	iorwf	(??_color_read+3)^0,w,c
  6087   001B76  6E0F               	movwf	(??_color_read+5)^0,c
  6088   001B78  500B               	movf	(??_color_read+1)^0,w,c
  6089   001B7A  100E               	iorwf	(??_color_read+4)^0,w,c
  6090   001B7C  6E10               	movwf	(??_color_read+6)^0,c
  6091   001B7E  5009               	movf	color_read@RGBC^0,w,c
  6092   001B80  6ED9               	movwf	fsr2l,c
  6093   001B82  6ADA               	clrf	fsr2h,c
  6094   001B84  0E04               	movlw	4
  6095   001B86  26D9               	addwf	fsr2l,f,c
  6096   001B88  C00F  FFDE         	movff	??_color_read+5,postinc2
  6097   001B8C  C010  FFDD         	movff	??_color_read+6,postdec2
  6098                           
  6099                           ;color.c: 84:  I2C_2_Master_Stop();
  6100   001B90  EC37  F018         	call	_I2C_2_Master_Stop	;wreg free
  6101                           
  6102                           ;color.c: 86:     I2C_2_Master_Start();
  6103   001B94  EC3C  F018         	call	_I2C_2_Master_Start	;wreg free
  6104                           
  6105                           ;color.c: 87:  I2C_2_Master_Write(0x52 | 0x00);
  6106   001B98  0E52               	movlw	82
  6107   001B9A  EC2B  F018         	call	_I2C_2_Master_Write
  6108                           
  6109                           ;color.c: 88:  I2C_2_Master_Write(0xA0 | 0x14);
  6110   001B9E  0EB4               	movlw	180
  6111   001BA0  EC2B  F018         	call	_I2C_2_Master_Write
  6112                           
  6113                           ;color.c: 89:  I2C_2_Master_RepStart();
  6114   001BA4  EC41  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6115                           
  6116                           ;color.c: 90:  I2C_2_Master_Write(0x52 | 0x01);
  6117   001BA8  0E53               	movlw	83
  6118   001BAA  EC2B  F018         	call	_I2C_2_Master_Write
  6119   001BAE                     
  6120                           ;color.c: 91:  RGBC->C=I2C_2_Master_Read(1);
  6121   001BAE  0E01               	movlw	1
  6122   001BB0  EC83  F016         	call	_I2C_2_Master_Read
  6123   001BB4  6E0A               	movwf	??_color_read^0,c
  6124   001BB6  6A0B               	clrf	(??_color_read+1)^0,c
  6125   001BB8  5009               	movf	color_read@RGBC^0,w,c
  6126   001BBA  6ED9               	movwf	fsr2l,c
  6127   001BBC  6ADA               	clrf	fsr2h,c
  6128   001BBE  0E06               	movlw	6
  6129   001BC0  26D9               	addwf	fsr2l,f,c
  6130   001BC2  C00A  FFDE         	movff	??_color_read,postinc2
  6131   001BC6  C00B  FFDD         	movff	??_color_read+1,postdec2
  6132   001BCA                     
  6133                           ;color.c: 92:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  6134   001BCA  5009               	movf	color_read@RGBC^0,w,c
  6135   001BCC  6ED9               	movwf	fsr2l,c
  6136   001BCE  6ADA               	clrf	fsr2h,c
  6137   001BD0  0E06               	movlw	6
  6138   001BD2  26D9               	addwf	fsr2l,f,c
  6139   001BD4  CFDE F00A          	movff	postinc2,??_color_read
  6140   001BD8  CFDD F00B          	movff	postdec2,??_color_read+1
  6141   001BDC  0E00               	movlw	0
  6142   001BDE  EC83  F016         	call	_I2C_2_Master_Read
  6143   001BE2  6E0C               	movwf	(??_color_read+2)^0,c
  6144   001BE4  500C               	movf	(??_color_read+2)^0,w,c
  6145   001BE6  6E0E               	movwf	(??_color_read+4)^0,c
  6146   001BE8  6A0D               	clrf	(??_color_read+3)^0,c
  6147   001BEA  500A               	movf	??_color_read^0,w,c
  6148   001BEC  100D               	iorwf	(??_color_read+3)^0,w,c
  6149   001BEE  6E0F               	movwf	(??_color_read+5)^0,c
  6150   001BF0  500B               	movf	(??_color_read+1)^0,w,c
  6151   001BF2  100E               	iorwf	(??_color_read+4)^0,w,c
  6152   001BF4  6E10               	movwf	(??_color_read+6)^0,c
  6153   001BF6  5009               	movf	color_read@RGBC^0,w,c
  6154   001BF8  6ED9               	movwf	fsr2l,c
  6155   001BFA  6ADA               	clrf	fsr2h,c
  6156   001BFC  0E06               	movlw	6
  6157   001BFE  26D9               	addwf	fsr2l,f,c
  6158   001C00  C00F  FFDE         	movff	??_color_read+5,postinc2
  6159   001C04  C010  FFDD         	movff	??_color_read+6,postdec2
  6160                           
  6161                           ;color.c: 93:  I2C_2_Master_Stop();
  6162   001C08  EC37  F018         	call	_I2C_2_Master_Stop	;wreg free
  6163   001C0C  0012               	return		;funcret
  6164   001C0E                     __end_of_color_read:
  6165                           	callstack 0
  6166                           
  6167 ;; *************** function _I2C_2_Master_Write *****************
  6168 ;; Defined at:
  6169 ;;		line 45 in file "i2c.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  data_byte       1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  data_byte       1    5[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6187 ;;Total ram usage:        1 bytes
  6188 ;; Hardware stack levels used: 1
  6189 ;; Hardware stack levels required when called: 4
  6190 ;; This function calls:
  6191 ;;		_I2C_2_Master_Idle
  6192 ;; This function is called by:
  6193 ;;		_color_writetoaddr
  6194 ;;		_color_read
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text28
  6199   003056                     __ptext28:
  6200                           	callstack 0
  6201   003056                     _I2C_2_Master_Write:
  6202                           	callstack 25
  6203                           
  6204                           ;incstack = 0
  6205                           ;I2C_2_Master_Write@data_byte stored from wreg
  6206   003056  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  6207   003058                     
  6208                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6209   003058  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6210   00305C                     
  6211                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6212   00305C  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6213   003060  0012               	return		;funcret
  6214   003062                     __end_of_I2C_2_Master_Write:
  6215                           	callstack 0
  6216                           
  6217 ;; *************** function _I2C_2_Master_Stop *****************
  6218 ;; Defined at:
  6219 ;;		line 39 in file "i2c.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6237 ;;Total ram usage:        0 bytes
  6238 ;; Hardware stack levels used: 1
  6239 ;; Hardware stack levels required when called: 4
  6240 ;; This function calls:
  6241 ;;		_I2C_2_Master_Idle
  6242 ;; This function is called by:
  6243 ;;		_color_writetoaddr
  6244 ;;		_color_read
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text29
  6249   00306E                     __ptext29:
  6250                           	callstack 0
  6251   00306E                     _I2C_2_Master_Stop:
  6252                           	callstack 25
  6253   00306E                     
  6254                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6255   00306E  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6256   003072                     
  6257                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6258   003072  010E               	movlb	14	; () banked
  6259   003074  85DA               	bsf	218,2,b	;volatile
  6260   003076                     
  6261                           ; BSR set to: 14
  6262   003076  0012               	return		;funcret
  6263   003078                     __end_of_I2C_2_Master_Stop:
  6264                           	callstack 0
  6265                           
  6266 ;; *************** function _I2C_2_Master_Start *****************
  6267 ;; Defined at:
  6268 ;;		line 27 in file "i2c.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 4
  6289 ;; This function calls:
  6290 ;;		_I2C_2_Master_Idle
  6291 ;; This function is called by:
  6292 ;;		_color_writetoaddr
  6293 ;;		_color_read
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text30
  6298   003078                     __ptext30:
  6299                           	callstack 0
  6300   003078                     _I2C_2_Master_Start:
  6301                           	callstack 25
  6302   003078                     
  6303                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6304   003078  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6305   00307C                     
  6306                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6307   00307C  010E               	movlb	14	; () banked
  6308   00307E  81DA               	bsf	218,0,b	;volatile
  6309   003080                     
  6310                           ; BSR set to: 14
  6311   003080  0012               	return		;funcret
  6312   003082                     __end_of_I2C_2_Master_Start:
  6313                           	callstack 0
  6314                           
  6315 ;; *************** function _I2C_2_Master_RepStart *****************
  6316 ;; Defined at:
  6317 ;;		line 33 in file "i2c.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;		None
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      void 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;Total ram usage:        0 bytes
  6336 ;; Hardware stack levels used: 1
  6337 ;; Hardware stack levels required when called: 4
  6338 ;; This function calls:
  6339 ;;		_I2C_2_Master_Idle
  6340 ;; This function is called by:
  6341 ;;		_color_read
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text31
  6346   003082                     __ptext31:
  6347                           	callstack 0
  6348   003082                     _I2C_2_Master_RepStart:
  6349                           	callstack 25
  6350   003082                     
  6351                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6352   003082  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6353   003086                     
  6354                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6355   003086  010E               	movlb	14	; () banked
  6356   003088  83DA               	bsf	218,1,b	;volatile
  6357   00308A                     
  6358                           ; BSR set to: 14
  6359   00308A  0012               	return		;funcret
  6360   00308C                     __end_of_I2C_2_Master_RepStart:
  6361                           	callstack 0
  6362                           
  6363 ;; *************** function _I2C_2_Master_Read *****************
  6364 ;; Defined at:
  6365 ;;		line 51 in file "i2c.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  ack             1    wreg     unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  ack             1    6[COMRAM] unsigned char 
  6370 ;;  tmp             1    7[COMRAM] unsigned char 
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      unsigned char 
  6373 ;; Registers used:
  6374 ;;		wreg, status,2, status,0, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6384 ;;Total ram usage:        3 bytes
  6385 ;; Hardware stack levels used: 1
  6386 ;; Hardware stack levels required when called: 4
  6387 ;; This function calls:
  6388 ;;		_I2C_2_Master_Idle
  6389 ;; This function is called by:
  6390 ;;		_color_read
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text32
  6395   002D06                     __ptext32:
  6396                           	callstack 0
  6397   002D06                     _I2C_2_Master_Read:
  6398                           	callstack 25
  6399                           
  6400                           ; BSR set to: 14
  6401                           ;incstack = 0
  6402                           ;I2C_2_Master_Read@ack stored from wreg
  6403   002D06  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6404   002D08                     
  6405                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6406   002D08  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6407   002D0C                     
  6408                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6409   002D0C  010E               	movlb	14	; () banked
  6410   002D0E  87DA               	bsf	218,3,b	;volatile
  6411                           
  6412                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6413   002D10  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6414   002D14                     
  6415                           ;i2c.c: 57:   tmp = SSP2BUF;
  6416   002D14  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6417                           
  6418                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6419   002D18  EC52  F017         	call	_I2C_2_Master_Idle	;wreg free
  6420   002D1C                     
  6421                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6422   002D1C  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  6423   002D1E  B4D8               	btfsc	status,2,c
  6424   002D20  EF94  F016         	goto	u1461
  6425   002D24  EF98  F016         	goto	u1460
  6426   002D28                     u1461:
  6427   002D28  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6428   002D2A  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  6429   002D2C  EF99  F016         	goto	u1478
  6430   002D30                     u1460:
  6431   002D30  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6432   002D32                     u1478:
  6433   002D32  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  6434   002D34  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  6435   002D36  010E               	movlb	14	; () banked
  6436   002D38  51DA               	movf	218,w,b	;volatile
  6437   002D3A  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6438   002D3C  0BDF               	andlw	-33
  6439   002D3E  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6440   002D40  6FDA               	movwf	218,b	;volatile
  6441   002D42                     
  6442                           ; BSR set to: 14
  6443                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6444   002D42  89DA               	bsf	218,4,b	;volatile
  6445   002D44                     
  6446                           ; BSR set to: 14
  6447                           ;i2c.c: 61:   return tmp;
  6448   002D44  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  6449   002D46                     
  6450                           ; BSR set to: 14
  6451   002D46  0012               	return		;funcret
  6452   002D48                     __end_of_I2C_2_Master_Read:
  6453                           	callstack 0
  6454                           
  6455 ;; *************** function _I2C_2_Master_Idle *****************
  6456 ;; Defined at:
  6457 ;;		line 22 in file "i2c.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;Total ram usage:        1 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 3
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_I2C_2_Master_Start
  6482 ;;		_I2C_2_Master_RepStart
  6483 ;;		_I2C_2_Master_Stop
  6484 ;;		_I2C_2_Master_Write
  6485 ;;		_I2C_2_Master_Read
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text33
  6490   002EA4                     __ptext33:
  6491                           	callstack 0
  6492   002EA4                     _I2C_2_Master_Idle:
  6493                           	callstack 25
  6494   002EA4                     l185:
  6495   002EA4  010E               	movlb	14	; () banked
  6496   002EA6  B5D8               	btfsc	216,2,b	;volatile
  6497   002EA8  EF58  F017         	goto	u1241
  6498   002EAC  EF5A  F017         	goto	u1240
  6499   002EB0                     u1241:
  6500   002EB0  EF52  F017         	goto	l185
  6501   002EB4                     u1240:
  6502   002EB4                     
  6503                           ; BSR set to: 14
  6504   002EB4  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6505   002EB8  0E1F               	movlw	31
  6506   002EBA  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  6507   002EBC  A4D8               	btfss	status,2,c
  6508   002EBE  EF63  F017         	goto	u1251
  6509   002EC2  EF65  F017         	goto	u1250
  6510   002EC6                     u1251:
  6511   002EC6  EF52  F017         	goto	l185
  6512   002ECA                     u1250:
  6513   002ECA                     
  6514                           ; BSR set to: 14
  6515   002ECA  0012               	return		;funcret
  6516   002ECC                     __end_of_I2C_2_Master_Idle:
  6517                           	callstack 0
  6518                           
  6519 ;; *************** function _color_normalise *****************
  6520 ;; Defined at:
  6521 ;;		line 97 in file "color.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  RGBC            8   30[COMRAM] struct RGBC_val
  6524 ;;  RGBC_n          1   38[COMRAM] PTR struct RGBC_val
  6525 ;;		 -> main@RGBC_n(8), 
  6526 ;; Auto vars:     Size  Location     Type
  6527 ;;		None
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  1    wreg      void 
  6530 ;; Registers used:
  6531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6532 ;; Tracked objects:
  6533 ;;		On entry : 0/0
  6534 ;;		On exit  : 0/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6537 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6540 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6541 ;;Total ram usage:       11 bytes
  6542 ;; Hardware stack levels used: 1
  6543 ;; Hardware stack levels required when called: 4
  6544 ;; This function calls:
  6545 ;;		___aldiv
  6546 ;;		___lmul
  6547 ;; This function is called by:
  6548 ;;		_main
  6549 ;;		_color_calibration
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text34
  6554   002456                     __ptext34:
  6555                           	callstack 0
  6556   002456                     _color_normalise:
  6557                           	callstack 26
  6558   002456                     
  6559                           ;color.c: 115:     RGBC_n->C = RGBC.C;
  6560   002456  5027               	movf	color_normalise@RGBC_n^0,w,c
  6561   002458  6ED9               	movwf	fsr2l,c
  6562   00245A  6ADA               	clrf	fsr2h,c
  6563   00245C  0E06               	movlw	6
  6564   00245E  26D9               	addwf	fsr2l,f,c
  6565   002460  C025  FFDE         	movff	color_normalise@RGBC+6,postinc2
  6566   002464  C026  FFDD         	movff	color_normalise@RGBC+7,postdec2
  6567   002468                     
  6568                           ;color.c: 116:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  6569   002468  C01F  F005         	movff	color_normalise@RGBC,___lmul@multiplier
  6570   00246C  C020  F006         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  6571   002470  6A07               	clrf	(___lmul@multiplier+2)^0,c
  6572   002472  6A08               	clrf	(___lmul@multiplier+3)^0,c
  6573   002474  0EE8               	movlw	232
  6574   002476  6E09               	movwf	___lmul@multiplicand^0,c
  6575   002478  0E03               	movlw	3
  6576   00247A  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  6577   00247C  0E00               	movlw	0
  6578   00247E  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  6579   002480  0E00               	movlw	0
  6580   002482  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  6581   002484  ECC3  F015         	call	___lmul	;wreg free
  6582   002488  C005  F011         	movff	?___lmul,___aldiv@dividend
  6583   00248C  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  6584   002490  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  6585   002494  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  6586   002498  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  6587   00249A  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  6588   00249C  6E28               	movwf	??_color_normalise^0,c
  6589   00249E  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  6590   0024A0  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  6591   0024A2  6E29               	movwf	(??_color_normalise+1)^0,c
  6592   0024A4  501F               	movf	color_normalise@RGBC^0,w,c
  6593   0024A6  2628               	addwf	??_color_normalise^0,f,c
  6594   0024A8  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  6595   0024AA  2229               	addwfc	(??_color_normalise+1)^0,f,c
  6596   0024AC  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  6597   0024B0  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  6598   0024B4  6A17               	clrf	(___aldiv@divisor+2)^0,c
  6599   0024B6  6A18               	clrf	(___aldiv@divisor+3)^0,c
  6600   0024B8  ECCC  F012         	call	___aldiv	;wreg free
  6601   0024BC  5027               	movf	color_normalise@RGBC_n^0,w,c
  6602   0024BE  6ED9               	movwf	fsr2l,c
  6603   0024C0  6ADA               	clrf	fsr2h,c
  6604   0024C2  C011  FFDE         	movff	?___aldiv,postinc2
  6605   0024C6  C012  FFDD         	movff	?___aldiv+1,postdec2
  6606   0024CA                     
  6607                           ;color.c: 117:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  6608   0024CA  C021  F005         	movff	color_normalise@RGBC+2,___lmul@multiplier
  6609   0024CE  C022  F006         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  6610   0024D2  6A07               	clrf	(___lmul@multiplier+2)^0,c
  6611   0024D4  6A08               	clrf	(___lmul@multiplier+3)^0,c
  6612   0024D6  0EE8               	movlw	232
  6613   0024D8  6E09               	movwf	___lmul@multiplicand^0,c
  6614   0024DA  0E03               	movlw	3
  6615   0024DC  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  6616   0024DE  0E00               	movlw	0
  6617   0024E0  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  6618   0024E2  0E00               	movlw	0
  6619   0024E4  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  6620   0024E6  ECC3  F015         	call	___lmul	;wreg free
  6621   0024EA  C005  F011         	movff	?___lmul,___aldiv@dividend
  6622   0024EE  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  6623   0024F2  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  6624   0024F6  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  6625   0024FA  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  6626   0024FC  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  6627   0024FE  6E28               	movwf	??_color_normalise^0,c
  6628   002500  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  6629   002502  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  6630   002504  6E29               	movwf	(??_color_normalise+1)^0,c
  6631   002506  501F               	movf	color_normalise@RGBC^0,w,c
  6632   002508  2628               	addwf	??_color_normalise^0,f,c
  6633   00250A  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  6634   00250C  2229               	addwfc	(??_color_normalise+1)^0,f,c
  6635   00250E  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  6636   002512  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  6637   002516  6A17               	clrf	(___aldiv@divisor+2)^0,c
  6638   002518  6A18               	clrf	(___aldiv@divisor+3)^0,c
  6639   00251A  ECCC  F012         	call	___aldiv	;wreg free
  6640   00251E  5027               	movf	color_normalise@RGBC_n^0,w,c
  6641   002520  6ED9               	movwf	fsr2l,c
  6642   002522  6ADA               	clrf	fsr2h,c
  6643   002524  0E02               	movlw	2
  6644   002526  26D9               	addwf	fsr2l,f,c
  6645   002528  C011  FFDE         	movff	?___aldiv,postinc2
  6646   00252C  C012  FFDD         	movff	?___aldiv+1,postdec2
  6647   002530                     
  6648                           ;color.c: 118:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  6649   002530  C023  F005         	movff	color_normalise@RGBC+4,___lmul@multiplier
  6650   002534  C024  F006         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  6651   002538  6A07               	clrf	(___lmul@multiplier+2)^0,c
  6652   00253A  6A08               	clrf	(___lmul@multiplier+3)^0,c
  6653   00253C  0EE8               	movlw	232
  6654   00253E  6E09               	movwf	___lmul@multiplicand^0,c
  6655   002540  0E03               	movlw	3
  6656   002542  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  6657   002544  0E00               	movlw	0
  6658   002546  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  6659   002548  0E00               	movlw	0
  6660   00254A  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  6661   00254C  ECC3  F015         	call	___lmul	;wreg free
  6662   002550  C005  F011         	movff	?___lmul,___aldiv@dividend
  6663   002554  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  6664   002558  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  6665   00255C  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  6666   002560  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  6667   002562  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  6668   002564  6E28               	movwf	??_color_normalise^0,c
  6669   002566  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  6670   002568  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  6671   00256A  6E29               	movwf	(??_color_normalise+1)^0,c
  6672   00256C  501F               	movf	color_normalise@RGBC^0,w,c
  6673   00256E  2628               	addwf	??_color_normalise^0,f,c
  6674   002570  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  6675   002572  2229               	addwfc	(??_color_normalise+1)^0,f,c
  6676   002574  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  6677   002578  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  6678   00257C  6A17               	clrf	(___aldiv@divisor+2)^0,c
  6679   00257E  6A18               	clrf	(___aldiv@divisor+3)^0,c
  6680   002580  ECCC  F012         	call	___aldiv	;wreg free
  6681   002584  5027               	movf	color_normalise@RGBC_n^0,w,c
  6682   002586  6ED9               	movwf	fsr2l,c
  6683   002588  6ADA               	clrf	fsr2h,c
  6684   00258A  0E04               	movlw	4
  6685   00258C  26D9               	addwf	fsr2l,f,c
  6686   00258E  C011  FFDE         	movff	?___aldiv,postinc2
  6687   002592  C012  FFDD         	movff	?___aldiv+1,postdec2
  6688   002596  0012               	return		;funcret
  6689   002598                     __end_of_color_normalise:
  6690                           	callstack 0
  6691                           
  6692 ;; *************** function ___lmul *****************
  6693 ;; Defined at:
  6694 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  multiplier      4    4[COMRAM] unsigned long 
  6697 ;;  multiplicand    4    8[COMRAM] unsigned long 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  product         4   12[COMRAM] unsigned long 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  4    4[COMRAM] unsigned long 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2, status,0
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6709 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;Total ram usage:       12 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 3
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_color_normalise
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text35
  6724   002B86                     __ptext35:
  6725                           	callstack 0
  6726   002B86                     ___lmul:
  6727                           	callstack 26
  6728   002B86  0E00               	movlw	0
  6729   002B88  6E0D               	movwf	___lmul@product^0,c
  6730   002B8A  0E00               	movlw	0
  6731   002B8C  6E0E               	movwf	(___lmul@product+1)^0,c
  6732   002B8E  0E00               	movlw	0
  6733   002B90  6E0F               	movwf	(___lmul@product+2)^0,c
  6734   002B92  0E00               	movlw	0
  6735   002B94  6E10               	movwf	(___lmul@product+3)^0,c
  6736   002B96                     l2587:
  6737   002B96  A005               	btfss	___lmul@multiplier^0,0,c
  6738   002B98  EFD0  F015         	goto	u1501
  6739   002B9C  EFD2  F015         	goto	u1500
  6740   002BA0                     u1501:
  6741   002BA0  EFDA  F015         	goto	l2591
  6742   002BA4                     u1500:
  6743   002BA4  5009               	movf	___lmul@multiplicand^0,w,c
  6744   002BA6  260D               	addwf	___lmul@product^0,f,c
  6745   002BA8  500A               	movf	(___lmul@multiplicand+1)^0,w,c
  6746   002BAA  220E               	addwfc	(___lmul@product+1)^0,f,c
  6747   002BAC  500B               	movf	(___lmul@multiplicand+2)^0,w,c
  6748   002BAE  220F               	addwfc	(___lmul@product+2)^0,f,c
  6749   002BB0  500C               	movf	(___lmul@multiplicand+3)^0,w,c
  6750   002BB2  2210               	addwfc	(___lmul@product+3)^0,f,c
  6751   002BB4                     l2591:
  6752   002BB4  90D8               	bcf	status,0,c
  6753   002BB6  3609               	rlcf	___lmul@multiplicand^0,f,c
  6754   002BB8  360A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6755   002BBA  360B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6756   002BBC  360C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6757   002BBE  90D8               	bcf	status,0,c
  6758   002BC0  3208               	rrcf	(___lmul@multiplier+3)^0,f,c
  6759   002BC2  3207               	rrcf	(___lmul@multiplier+2)^0,f,c
  6760   002BC4  3206               	rrcf	(___lmul@multiplier+1)^0,f,c
  6761   002BC6  3205               	rrcf	___lmul@multiplier^0,f,c
  6762   002BC8  5005               	movf	___lmul@multiplier^0,w,c
  6763   002BCA  1006               	iorwf	(___lmul@multiplier+1)^0,w,c
  6764   002BCC  1007               	iorwf	(___lmul@multiplier+2)^0,w,c
  6765   002BCE  1008               	iorwf	(___lmul@multiplier+3)^0,w,c
  6766   002BD0  A4D8               	btfss	status,2,c
  6767   002BD2  EFED  F015         	goto	u1511
  6768   002BD6  EFEF  F015         	goto	u1510
  6769   002BDA                     u1511:
  6770   002BDA  EFCB  F015         	goto	l2587
  6771   002BDE                     u1510:
  6772   002BDE  C00D  F005         	movff	___lmul@product,?___lmul
  6773   002BE2  C00E  F006         	movff	___lmul@product+1,?___lmul+1
  6774   002BE6  C00F  F007         	movff	___lmul@product+2,?___lmul+2
  6775   002BEA  C010  F008         	movff	___lmul@product+3,?___lmul+3
  6776   002BEE  0012               	return		;funcret
  6777   002BF0                     __end_of___lmul:
  6778                           	callstack 0
  6779                           
  6780 ;; *************** function ___aldiv *****************
  6781 ;; Defined at:
  6782 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  dividend        4   16[COMRAM] long 
  6785 ;;  divisor         4   20[COMRAM] long 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  quotient        4   26[COMRAM] long 
  6788 ;;  sign            1   25[COMRAM] unsigned char 
  6789 ;;  counter         1   24[COMRAM] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  4   16[COMRAM] long 
  6792 ;; Registers used:
  6793 ;;		wreg, status,2, status,0
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6799 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;Total ram usage:       14 bytes
  6804 ;; Hardware stack levels used: 1
  6805 ;; Hardware stack levels required when called: 3
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_color_normalise
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text36
  6814   002598                     __ptext36:
  6815                           	callstack 0
  6816   002598                     ___aldiv:
  6817                           	callstack 26
  6818   002598  0E00               	movlw	0
  6819   00259A  6E1A               	movwf	___aldiv@sign^0,c
  6820   00259C  BE18               	btfsc	(___aldiv@divisor+3)^0,7,c
  6821   00259E  EFD5  F012         	goto	u1520
  6822   0025A2  EFD3  F012         	goto	u1521
  6823   0025A6                     u1521:
  6824   0025A6  EFDF  F012         	goto	l2603
  6825   0025AA                     u1520:
  6826   0025AA  1E18               	comf	(___aldiv@divisor+3)^0,f,c
  6827   0025AC  1E17               	comf	(___aldiv@divisor+2)^0,f,c
  6828   0025AE  1E16               	comf	(___aldiv@divisor+1)^0,f,c
  6829   0025B0  6C15               	negf	___aldiv@divisor^0,c
  6830   0025B2  0E00               	movlw	0
  6831   0025B4  2216               	addwfc	(___aldiv@divisor+1)^0,f,c
  6832   0025B6  2217               	addwfc	(___aldiv@divisor+2)^0,f,c
  6833   0025B8  2218               	addwfc	(___aldiv@divisor+3)^0,f,c
  6834   0025BA  0E01               	movlw	1
  6835   0025BC  6E1A               	movwf	___aldiv@sign^0,c
  6836   0025BE                     l2603:
  6837   0025BE  BE14               	btfsc	(___aldiv@dividend+3)^0,7,c
  6838   0025C0  EFE6  F012         	goto	u1530
  6839   0025C4  EFE4  F012         	goto	u1531
  6840   0025C8                     u1531:
  6841   0025C8  EFF0  F012         	goto	l2609
  6842   0025CC                     u1530:
  6843   0025CC  1E14               	comf	(___aldiv@dividend+3)^0,f,c
  6844   0025CE  1E13               	comf	(___aldiv@dividend+2)^0,f,c
  6845   0025D0  1E12               	comf	(___aldiv@dividend+1)^0,f,c
  6846   0025D2  6C11               	negf	___aldiv@dividend^0,c
  6847   0025D4  0E00               	movlw	0
  6848   0025D6  2212               	addwfc	(___aldiv@dividend+1)^0,f,c
  6849   0025D8  2213               	addwfc	(___aldiv@dividend+2)^0,f,c
  6850   0025DA  2214               	addwfc	(___aldiv@dividend+3)^0,f,c
  6851   0025DC  0E01               	movlw	1
  6852   0025DE  1A1A               	xorwf	___aldiv@sign^0,f,c
  6853   0025E0                     l2609:
  6854   0025E0  0E00               	movlw	0
  6855   0025E2  6E1B               	movwf	___aldiv@quotient^0,c
  6856   0025E4  0E00               	movlw	0
  6857   0025E6  6E1C               	movwf	(___aldiv@quotient+1)^0,c
  6858   0025E8  0E00               	movlw	0
  6859   0025EA  6E1D               	movwf	(___aldiv@quotient+2)^0,c
  6860   0025EC  0E00               	movlw	0
  6861   0025EE  6E1E               	movwf	(___aldiv@quotient+3)^0,c
  6862   0025F0  5015               	movf	___aldiv@divisor^0,w,c
  6863   0025F2  1016               	iorwf	(___aldiv@divisor+1)^0,w,c
  6864   0025F4  1017               	iorwf	(___aldiv@divisor+2)^0,w,c
  6865   0025F6  1018               	iorwf	(___aldiv@divisor+3)^0,w,c
  6866   0025F8  B4D8               	btfsc	status,2,c
  6867   0025FA  EF01  F013         	goto	u1541
  6868   0025FE  EF03  F013         	goto	u1540
  6869   002602                     u1541:
  6870   002602  EF39  F013         	goto	l2631
  6871   002606                     u1540:
  6872   002606  0E01               	movlw	1
  6873   002608  6E19               	movwf	___aldiv@counter^0,c
  6874   00260A  EF0D  F013         	goto	l2617
  6875   00260E                     l2615:
  6876   00260E  90D8               	bcf	status,0,c
  6877   002610  3615               	rlcf	___aldiv@divisor^0,f,c
  6878   002612  3616               	rlcf	(___aldiv@divisor+1)^0,f,c
  6879   002614  3617               	rlcf	(___aldiv@divisor+2)^0,f,c
  6880   002616  3618               	rlcf	(___aldiv@divisor+3)^0,f,c
  6881   002618  2A19               	incf	___aldiv@counter^0,f,c
  6882   00261A                     l2617:
  6883   00261A  AE18               	btfss	(___aldiv@divisor+3)^0,7,c
  6884   00261C  EF12  F013         	goto	u1551
  6885   002620  EF14  F013         	goto	u1550
  6886   002624                     u1551:
  6887   002624  EF07  F013         	goto	l2615
  6888   002628                     u1550:
  6889   002628                     l2619:
  6890   002628  90D8               	bcf	status,0,c
  6891   00262A  361B               	rlcf	___aldiv@quotient^0,f,c
  6892   00262C  361C               	rlcf	(___aldiv@quotient+1)^0,f,c
  6893   00262E  361D               	rlcf	(___aldiv@quotient+2)^0,f,c
  6894   002630  361E               	rlcf	(___aldiv@quotient+3)^0,f,c
  6895   002632  5015               	movf	___aldiv@divisor^0,w,c
  6896   002634  5C11               	subwf	___aldiv@dividend^0,w,c
  6897   002636  5016               	movf	(___aldiv@divisor+1)^0,w,c
  6898   002638  5812               	subwfb	(___aldiv@dividend+1)^0,w,c
  6899   00263A  5017               	movf	(___aldiv@divisor+2)^0,w,c
  6900   00263C  5813               	subwfb	(___aldiv@dividend+2)^0,w,c
  6901   00263E  5018               	movf	(___aldiv@divisor+3)^0,w,c
  6902   002640  5814               	subwfb	(___aldiv@dividend+3)^0,w,c
  6903   002642  A0D8               	btfss	status,0,c
  6904   002644  EF26  F013         	goto	u1561
  6905   002648  EF28  F013         	goto	u1560
  6906   00264C                     u1561:
  6907   00264C  EF31  F013         	goto	l2627
  6908   002650                     u1560:
  6909   002650  5015               	movf	___aldiv@divisor^0,w,c
  6910   002652  5E11               	subwf	___aldiv@dividend^0,f,c
  6911   002654  5016               	movf	(___aldiv@divisor+1)^0,w,c
  6912   002656  5A12               	subwfb	(___aldiv@dividend+1)^0,f,c
  6913   002658  5017               	movf	(___aldiv@divisor+2)^0,w,c
  6914   00265A  5A13               	subwfb	(___aldiv@dividend+2)^0,f,c
  6915   00265C  5018               	movf	(___aldiv@divisor+3)^0,w,c
  6916   00265E  5A14               	subwfb	(___aldiv@dividend+3)^0,f,c
  6917   002660  801B               	bsf	___aldiv@quotient^0,0,c
  6918   002662                     l2627:
  6919   002662  90D8               	bcf	status,0,c
  6920   002664  3218               	rrcf	(___aldiv@divisor+3)^0,f,c
  6921   002666  3217               	rrcf	(___aldiv@divisor+2)^0,f,c
  6922   002668  3216               	rrcf	(___aldiv@divisor+1)^0,f,c
  6923   00266A  3215               	rrcf	___aldiv@divisor^0,f,c
  6924   00266C  2E19               	decfsz	___aldiv@counter^0,f,c
  6925   00266E  EF14  F013         	goto	l2619
  6926   002672                     l2631:
  6927   002672  501A               	movf	___aldiv@sign^0,w,c
  6928   002674  B4D8               	btfsc	status,2,c
  6929   002676  EF3F  F013         	goto	u1571
  6930   00267A  EF41  F013         	goto	u1570
  6931   00267E                     u1571:
  6932   00267E  EF49  F013         	goto	l2635
  6933   002682                     u1570:
  6934   002682  1E1E               	comf	(___aldiv@quotient+3)^0,f,c
  6935   002684  1E1D               	comf	(___aldiv@quotient+2)^0,f,c
  6936   002686  1E1C               	comf	(___aldiv@quotient+1)^0,f,c
  6937   002688  6C1B               	negf	___aldiv@quotient^0,c
  6938   00268A  0E00               	movlw	0
  6939   00268C  221C               	addwfc	(___aldiv@quotient+1)^0,f,c
  6940   00268E  221D               	addwfc	(___aldiv@quotient+2)^0,f,c
  6941   002690  221E               	addwfc	(___aldiv@quotient+3)^0,f,c
  6942   002692                     l2635:
  6943   002692  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  6944   002696  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  6945   00269A  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  6946   00269E  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  6947   0026A2  0012               	return		;funcret
  6948   0026A4                     __end_of___aldiv:
  6949                           	callstack 0
  6950                           
  6951 ;; *************** function _batteryLevel *****************
  6952 ;; Defined at:
  6953 ;;		line 6 in file "battery.c"
  6954 ;; Parameters:    Size  Location     Type
  6955 ;;		None
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  batteryQuart    1   13[COMRAM] unsigned char 
  6958 ;;  batteryVolta    1   12[COMRAM] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, status,2, status,0, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6972 ;;Total ram usage:        2 bytes
  6973 ;; Hardware stack levels used: 1
  6974 ;; Hardware stack levels required when called: 4
  6975 ;; This function calls:
  6976 ;;		_ADC_getval
  6977 ;;		_ADC_init
  6978 ;;		___awdiv
  6979 ;; This function is called by:
  6980 ;;		_main
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text37
  6985   002CB8                     __ptext37:
  6986                           	callstack 0
  6987   002CB8                     _batteryLevel:
  6988                           	callstack 26
  6989   002CB8                     
  6990                           ;battery.c: 7:     ADC_init();
  6991   002CB8  ECF1  F017         	call	_ADC_init	;wreg free
  6992                           
  6993                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6994   002CBC  EC0A  F018         	call	_ADC_getval	;wreg free
  6995   002CC0  6E0D               	movwf	batteryLevel@batteryVoltage^0,c
  6996   002CC2                     
  6997                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6998   002CC2  C00D  F005         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6999   002CC6  6A06               	clrf	(___awdiv@dividend+1)^0,c
  7000   002CC8  0E00               	movlw	0
  7001   002CCA  6E08               	movwf	(___awdiv@divisor+1)^0,c
  7002   002CCC  0E18               	movlw	24
  7003   002CCE  6E07               	movwf	___awdiv@divisor^0,c
  7004   002CD0  EC32  F014         	call	___awdiv	;wreg free
  7005   002CD4  5005               	movf	?___awdiv^0,w,c
  7006   002CD6  6E0E               	movwf	batteryLevel@batteryQuarter^0,c
  7007   002CD8                     
  7008                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  7009   002CD8  A20E               	btfss	batteryLevel@batteryQuarter^0,1,c
  7010   002CDA  EF71  F016         	goto	u1931
  7011   002CDE  EF73  F016         	goto	u1930
  7012   002CE2                     u1931:
  7013   002CE2  EF76  F016         	goto	l387
  7014   002CE6                     u1930:
  7015   002CE6  8E7C               	bsf	124,7,c	;volatile
  7016   002CE8  EF77  F016         	goto	l388
  7017   002CEC                     l387:
  7018   002CEC  9E7C               	bcf	124,7,c	;volatile
  7019   002CEE                     l388:
  7020                           
  7021                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  7022   002CEE  A00E               	btfss	batteryLevel@batteryQuarter^0,0,c
  7023   002CF0  EF7C  F016         	goto	u1941
  7024   002CF4  EF7E  F016         	goto	u1940
  7025   002CF8                     u1941:
  7026   002CF8  EF81  F016         	goto	l389
  7027   002CFC                     u1940:
  7028   002CFC  8680               	bsf	128,3,c	;volatile
  7029   002CFE  EF82  F016         	goto	l391
  7030   002D02                     l389:
  7031   002D02  9680               	bcf	128,3,c	;volatile
  7032   002D04                     l391:
  7033   002D04  0012               	return		;funcret
  7034   002D06                     __end_of_batteryLevel:
  7035                           	callstack 0
  7036                           
  7037 ;; *************** function ___awdiv *****************
  7038 ;; Defined at:
  7039 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  dividend        2    4[COMRAM] int 
  7042 ;;  divisor         2    6[COMRAM] int 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  quotient        2   10[COMRAM] int 
  7045 ;;  sign            1    9[COMRAM] unsigned char 
  7046 ;;  counter         1    8[COMRAM] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  2    4[COMRAM] int 
  7049 ;; Registers used:
  7050 ;;		wreg, status,2, status,0
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7057 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7059 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7060 ;;Total ram usage:        8 bytes
  7061 ;; Hardware stack levels used: 1
  7062 ;; Hardware stack levels required when called: 3
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_batteryLevel
  7067 ;;		_vfpfcnvrt
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text38
  7072   002864                     __ptext38:
  7073                           	callstack 0
  7074   002864                     ___awdiv:
  7075                           	callstack 24
  7076   002864  0E00               	movlw	0
  7077   002866  6E0A               	movwf	___awdiv@sign^0,c
  7078   002868  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  7079   00286A  EF3B  F014         	goto	u1260
  7080   00286E  EF39  F014         	goto	u1261
  7081   002872                     u1261:
  7082   002872  EF41  F014         	goto	l2427
  7083   002876                     u1260:
  7084   002876  6C07               	negf	___awdiv@divisor^0,c
  7085   002878  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  7086   00287A  B0D8               	btfsc	status,0,c
  7087   00287C  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  7088   00287E  0E01               	movlw	1
  7089   002880  6E0A               	movwf	___awdiv@sign^0,c
  7090   002882                     l2427:
  7091   002882  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  7092   002884  EF48  F014         	goto	u1270
  7093   002888  EF46  F014         	goto	u1271
  7094   00288C                     u1271:
  7095   00288C  EF4E  F014         	goto	l2433
  7096   002890                     u1270:
  7097   002890  6C05               	negf	___awdiv@dividend^0,c
  7098   002892  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  7099   002894  B0D8               	btfsc	status,0,c
  7100   002896  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  7101   002898  0E01               	movlw	1
  7102   00289A  1A0A               	xorwf	___awdiv@sign^0,f,c
  7103   00289C                     l2433:
  7104   00289C  0E00               	movlw	0
  7105   00289E  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  7106   0028A0  0E00               	movlw	0
  7107   0028A2  6E0B               	movwf	___awdiv@quotient^0,c
  7108   0028A4  5007               	movf	___awdiv@divisor^0,w,c
  7109   0028A6  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  7110   0028A8  B4D8               	btfsc	status,2,c
  7111   0028AA  EF59  F014         	goto	u1281
  7112   0028AE  EF5B  F014         	goto	u1280
  7113   0028B2                     u1281:
  7114   0028B2  EF83  F014         	goto	l2455
  7115   0028B6                     u1280:
  7116   0028B6  0E01               	movlw	1
  7117   0028B8  6E09               	movwf	___awdiv@counter^0,c
  7118   0028BA  EF63  F014         	goto	l2441
  7119   0028BE                     l2439:
  7120   0028BE  90D8               	bcf	status,0,c
  7121   0028C0  3607               	rlcf	___awdiv@divisor^0,f,c
  7122   0028C2  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  7123   0028C4  2A09               	incf	___awdiv@counter^0,f,c
  7124   0028C6                     l2441:
  7125   0028C6  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  7126   0028C8  EF68  F014         	goto	u1291
  7127   0028CC  EF6A  F014         	goto	u1290
  7128   0028D0                     u1291:
  7129   0028D0  EF5F  F014         	goto	l2439
  7130   0028D4                     u1290:
  7131   0028D4                     l2443:
  7132   0028D4  90D8               	bcf	status,0,c
  7133   0028D6  360B               	rlcf	___awdiv@quotient^0,f,c
  7134   0028D8  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  7135   0028DA  5007               	movf	___awdiv@divisor^0,w,c
  7136   0028DC  5C05               	subwf	___awdiv@dividend^0,w,c
  7137   0028DE  5008               	movf	(___awdiv@divisor+1)^0,w,c
  7138   0028E0  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  7139   0028E2  A0D8               	btfss	status,0,c
  7140   0028E4  EF76  F014         	goto	u1301
  7141   0028E8  EF78  F014         	goto	u1300
  7142   0028EC                     u1301:
  7143   0028EC  EF7D  F014         	goto	l2451
  7144   0028F0                     u1300:
  7145   0028F0  5007               	movf	___awdiv@divisor^0,w,c
  7146   0028F2  5E05               	subwf	___awdiv@dividend^0,f,c
  7147   0028F4  5008               	movf	(___awdiv@divisor+1)^0,w,c
  7148   0028F6  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  7149   0028F8  800B               	bsf	___awdiv@quotient^0,0,c
  7150   0028FA                     l2451:
  7151   0028FA  90D8               	bcf	status,0,c
  7152   0028FC  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  7153   0028FE  3207               	rrcf	___awdiv@divisor^0,f,c
  7154   002900  2E09               	decfsz	___awdiv@counter^0,f,c
  7155   002902  EF6A  F014         	goto	l2443
  7156   002906                     l2455:
  7157   002906  500A               	movf	___awdiv@sign^0,w,c
  7158   002908  B4D8               	btfsc	status,2,c
  7159   00290A  EF89  F014         	goto	u1311
  7160   00290E  EF8B  F014         	goto	u1310
  7161   002912                     u1311:
  7162   002912  EF8F  F014         	goto	l2459
  7163   002916                     u1310:
  7164   002916  6C0B               	negf	___awdiv@quotient^0,c
  7165   002918  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  7166   00291A  B0D8               	btfsc	status,0,c
  7167   00291C  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  7168   00291E                     l2459:
  7169   00291E  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  7170   002922  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  7171   002926  0012               	return		;funcret
  7172   002928                     __end_of___awdiv:
  7173                           	callstack 0
  7174                           
  7175 ;; *************** function _ADC_init *****************
  7176 ;; Defined at:
  7177 ;;		line 9 in file "ADC.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;Total ram usage:        0 bytes
  7196 ;; Hardware stack levels used: 1
  7197 ;; Hardware stack levels required when called: 3
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_batteryLevel
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text39
  7206   002FE2                     __ptext39:
  7207                           	callstack 0
  7208   002FE2                     _ADC_init:
  7209                           	callstack 26
  7210   002FE2                     
  7211                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  7212   002FE2  8C86               	bsf	134,6,c	;volatile
  7213                           
  7214                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  7215   002FE4  010E               	movlb	14	; () banked
  7216   002FE6  8DB4               	bsf	180,6,b	;volatile
  7217                           
  7218                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  7219   002FE8  010F               	movlb	15	; () banked
  7220   002FEA  9958               	bcf	88,4,b	;volatile
  7221   002FEC                     
  7222                           ; BSR set to: 15
  7223                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  7224   002FEC  0EFC               	movlw	-4
  7225   002FEE  1758               	andwf	88,f,b	;volatile
  7226                           
  7227                           ;ADC.c: 17:     ADPCH=0b101110;
  7228   002FF0  0E2E               	movlw	46
  7229   002FF2  6F5F               	movwf	95,b	;volatile
  7230   002FF4                     
  7231                           ; BSR set to: 15
  7232                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  7233   002FF4  9460               	bcf	96,2,c	;volatile
  7234   002FF6                     
  7235                           ; BSR set to: 15
  7236                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  7237   002FF6  8860               	bsf	96,4,c	;volatile
  7238   002FF8                     
  7239                           ; BSR set to: 15
  7240                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  7241   002FF8  8E60               	bsf	96,7,c	;volatile
  7242   002FFA                     
  7243                           ; BSR set to: 15
  7244   002FFA  0012               	return		;funcret
  7245   002FFC                     __end_of_ADC_init:
  7246                           	callstack 0
  7247                           
  7248 ;; *************** function _ADC_getval *****************
  7249 ;; Defined at:
  7250 ;;		line 23 in file "ADC.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;		None
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  tmpval          1    4[COMRAM] unsigned char 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  1    wreg      unsigned char 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7268 ;;Total ram usage:        1 bytes
  7269 ;; Hardware stack levels used: 1
  7270 ;; Hardware stack levels required when called: 3
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_batteryLevel
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text40
  7279   003014                     __ptext40:
  7280                           	callstack 0
  7281   003014                     _ADC_getval:
  7282                           	callstack 26
  7283   003014                     
  7284                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  7285   003014  8060               	bsf	96,0,c	;volatile
  7286   003016                     l373:
  7287   003016  B060               	btfsc	96,0,c	;volatile
  7288   003018  EF10  F018         	goto	u1741
  7289   00301C  EF12  F018         	goto	u1740
  7290   003020                     u1741:
  7291   003020  EF0B  F018         	goto	l373
  7292   003024                     u1740:
  7293   003024                     
  7294                           ;ADC.c: 31:     tmpval = ADRESH;
  7295   003024  CF64 F005          	movff	3940,ADC_getval@tmpval	;volatile
  7296   003028                     
  7297                           ;ADC.c: 35:     return tmpval;
  7298   003028  5005               	movf	ADC_getval@tmpval^0,w,c
  7299   00302A  0012               	return		;funcret
  7300   00302C                     __end_of_ADC_getval:
  7301                           	callstack 0
  7302                           
  7303 ;; *************** function _TxBufferedString *****************
  7304 ;; Defined at:
  7305 ;;		line 66 in file "serial.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  string          2    5[COMRAM] PTR unsigned char 
  7308 ;;		 -> STR_6(1), STR_4(1), STR_2(1), main@buf(40), 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;Total ram usage:        2 bytes
  7325 ;; Hardware stack levels used: 1
  7326 ;; Hardware stack levels required when called: 4
  7327 ;; This function calls:
  7328 ;;		_putCharToTxBuf
  7329 ;; This function is called by:
  7330 ;;		_main
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text41
  7335   002C56                     __ptext41:
  7336                           	callstack 0
  7337   002C56                     _TxBufferedString:
  7338                           	callstack 26
  7339   002C56                     
  7340                           ;serial.c: 67:     while(*string != 0){
  7341   002C56  EF42  F016         	goto	l3143
  7342   002C5A                     l3139:
  7343                           
  7344                           ;serial.c: 68:   putCharToTxBuf(*string++);
  7345   002C5A  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  7346   002C5E  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  7347   002C62  0E00               	movlw	low (__smallconst shr (0+16))
  7348   002C64  6EF8               	movwf	tblptru,c
  7349   002C66  0E0D               	movlw	(high __ramtop+-1)
  7350   002C68  64F7               	cpfsgt	tblptrh,c
  7351   002C6A  D003               	bra	u2127
  7352   002C6C  0008               	tblrd		*
  7353   002C6E  50F5               	movf	tablat,w,c
  7354   002C70  D005               	bra	u2120
  7355   002C72                     u2127:
  7356   002C72  CFF6 FFE9          	movff	tblptrl,fsr0l
  7357   002C76  CFF7 FFEA          	movff	tblptrh,fsr0h
  7358   002C7A  50EF               	movf	indf0,w,c
  7359   002C7C                     u2120:
  7360   002C7C  EC3D  F017         	call	_putCharToTxBuf
  7361   002C80  4A06               	infsnz	TxBufferedString@string^0,f,c
  7362   002C82  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  7363   002C84                     l3143:
  7364                           
  7365                           ;serial.c: 67:     while(*string != 0){
  7366   002C84  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  7367   002C88  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  7368   002C8C  0E00               	movlw	low (__smallconst shr (0+16))
  7369   002C8E  6EF8               	movwf	tblptru,c
  7370   002C90  0E0D               	movlw	(high __ramtop+-1)
  7371   002C92  64F7               	cpfsgt	tblptrh,c
  7372   002C94  D003               	bra	u2137
  7373   002C96  0008               	tblrd		*
  7374   002C98  50F5               	movf	tablat,w,c
  7375   002C9A  D005               	bra	u2130
  7376   002C9C                     u2137:
  7377   002C9C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7378   002CA0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7379   002CA4  50EF               	movf	indf0,w,c
  7380   002CA6                     u2130:
  7381   002CA6  0900               	iorlw	0
  7382   002CA8  A4D8               	btfss	status,2,c
  7383   002CAA  EF59  F016         	goto	u2141
  7384   002CAE  EF5B  F016         	goto	u2140
  7385   002CB2                     u2141:
  7386   002CB2  EF2D  F016         	goto	l3139
  7387   002CB6                     u2140:
  7388   002CB6  0012               	return		;funcret
  7389   002CB8                     __end_of_TxBufferedString:
  7390                           	callstack 0
  7391                           
  7392 ;; *************** function _putCharToTxBuf *****************
  7393 ;; Defined at:
  7394 ;;		line 53 in file "serial.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  byte            1    wreg     unsigned char 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  byte            1    4[COMRAM] unsigned char 
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7412 ;;Total ram usage:        1 bytes
  7413 ;; Hardware stack levels used: 1
  7414 ;; Hardware stack levels required when called: 3
  7415 ;; This function calls:
  7416 ;;		Nothing
  7417 ;; This function is called by:
  7418 ;;		_TxBufferedString
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text42
  7423   002E7A                     __ptext42:
  7424                           	callstack 0
  7425   002E7A                     _putCharToTxBuf:
  7426                           	callstack 26
  7427                           
  7428                           ;incstack = 0
  7429                           ;putCharToTxBuf@byte stored from wreg
  7430   002E7A  6E05               	movwf	putCharToTxBuf@byte^0,c
  7431   002E7C                     
  7432                           ;serial.c: 54:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  7433   002E7C  0E3B               	movlw	59
  7434   002E7E  6457               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  7435   002E80  EF44  F017         	goto	u1731
  7436   002E84  EF46  F017         	goto	u1730
  7437   002E88                     u1731:
  7438   002E88  EF48  F017         	goto	l2761
  7439   002E8C                     u1730:
  7440   002E8C  0E00               	movlw	0
  7441   002E8E  6E57               	movwf	_TxBufWriteCnt^0,c	;volatile
  7442   002E90                     l2761:
  7443                           
  7444                           ;serial.c: 55:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  7445   002E90  0E00               	movlw	low _EUSART4TXbuf
  7446   002E92  2457               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  7447   002E94  6ED9               	movwf	fsr2l,c
  7448   002E96  6ADA               	clrf	fsr2h,c
  7449   002E98  0E01               	movlw	high _EUSART4TXbuf
  7450   002E9A  22DA               	addwfc	fsr2h,f,c
  7451   002E9C  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  7452   002EA0  2A57               	incf	_TxBufWriteCnt^0,f,c	;volatile
  7453   002EA2  0012               	return		;funcret
  7454   002EA4                     __end_of_putCharToTxBuf:
  7455                           	callstack 0
  7456                           
  7457 ;; *************** function _Interrupts_init *****************
  7458 ;; Defined at:
  7459 ;;		line 10 in file "interrupts.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		None
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used: 1
  7479 ;; Hardware stack levels required when called: 3
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_main
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text43
  7488   003044                     __ptext43:
  7489                           	callstack 0
  7490   003044                     _Interrupts_init:
  7491                           	callstack 27
  7492   003044                     
  7493                           ;interrupts.c: 12:  TRISBbits.TRISB0=1;
  7494   003044  8082               	bsf	130,0,c	;volatile
  7495                           
  7496                           ;interrupts.c: 13:     ANSELBbits.ANSELB0=0;
  7497   003046  010E               	movlb	14	; () banked
  7498   003048  919A               	bcf	154,0,b	;volatile
  7499                           
  7500                           ;interrupts.c: 14:     PIE0bits.INT0IE=1;
  7501   00304A  8129               	bsf	41,0,b	;volatile
  7502                           
  7503                           ;interrupts.c: 15:     IPR0bits.INT0IP=1;
  7504   00304C  811F               	bsf	31,0,b	;volatile
  7505                           
  7506                           ;interrupts.c: 19:     PIE4bits.RC4IE=1;
  7507   00304E  872D               	bsf	45,3,b	;volatile
  7508                           
  7509                           ;interrupts.c: 20:     INTCONbits.PEIE=1;
  7510   003050  8CF2               	bsf	242,6,c	;volatile
  7511                           
  7512                           ;interrupts.c: 21:     INTCONbits.GIE=1;
  7513   003052  8EF2               	bsf	242,7,c	;volatile
  7514   003054                     
  7515                           ; BSR set to: 14
  7516   003054  0012               	return		;funcret
  7517   003056                     __end_of_Interrupts_init:
  7518                           	callstack 0
  7519                           
  7520 ;; *************** function _Buggy_init *****************
  7521 ;; Defined at:
  7522 ;;		line 7 in file "buggysetup.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		None
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used: 1
  7542 ;; Hardware stack levels required when called: 3
  7543 ;; This function calls:
  7544 ;;		Nothing
  7545 ;; This function is called by:
  7546 ;;		_main
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text44
  7551   002D86                     __ptext44:
  7552                           	callstack 0
  7553   002D86                     _Buggy_init:
  7554                           	callstack 27
  7555   002D86                     
  7556                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  7557   002D86  9E7C               	bcf	124,7,c	;volatile
  7558                           
  7559                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  7560   002D88  9E84               	bcf	132,7,c	;volatile
  7561                           
  7562                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  7563   002D8A  9680               	bcf	128,3,c	;volatile
  7564                           
  7565                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  7566   002D8C  9688               	bcf	136,3,c	;volatile
  7567                           
  7568                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  7569   002D8E  8486               	bsf	134,2,c	;volatile
  7570                           
  7571                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  7572   002D90  010E               	movlb	14	; () banked
  7573   002D92  95B4               	bcf	180,2,b	;volatile
  7574                           
  7575                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  7576   002D94  8686               	bsf	134,3,c	;volatile
  7577                           
  7578                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  7579   002D96  97B4               	bcf	180,3,b	;volatile
  7580                           
  7581                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  7582   002D98  9280               	bcf	128,1,c	;volatile
  7583                           
  7584                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  7585   002D9A  9288               	bcf	136,1,c	;volatile
  7586                           
  7587                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  7588   002D9C  987C               	bcf	124,4,c	;volatile
  7589                           
  7590                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  7591   002D9E  9884               	bcf	132,4,c	;volatile
  7592                           
  7593                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  7594   002DA0  967C               	bcf	124,3,c	;volatile
  7595                           
  7596                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  7597   002DA2  9684               	bcf	132,3,c	;volatile
  7598                           
  7599                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  7600   002DA4  97A7               	bcf	167,3,b	;volatile
  7601                           
  7602                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  7603   002DA6  9080               	bcf	128,0,c	;volatile
  7604                           
  7605                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  7606   002DA8  9088               	bcf	136,0,c	;volatile
  7607                           
  7608                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  7609   002DAA  907E               	bcf	126,0,c	;volatile
  7610                           
  7611                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  7612   002DAC  9086               	bcf	134,0,c	;volatile
  7613                           
  7614                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  7615   002DAE  907F               	bcf	127,0,c	;volatile
  7616                           
  7617                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  7618   002DB0  9087               	bcf	135,0,c	;volatile
  7619                           
  7620                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  7621   002DB2  9E7D               	bcf	125,7,c	;volatile
  7622                           
  7623                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  7624   002DB4  9E85               	bcf	133,7,c	;volatile
  7625                           
  7626                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  7627   002DB6  9679               	bcf	121,3,c	;volatile
  7628                           
  7629                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  7630   002DB8  9681               	bcf	129,3,c	;volatile
  7631   002DBA                     
  7632                           ; BSR set to: 14
  7633   002DBA  0012               	return		;funcret
  7634   002DBC                     __end_of_Buggy_init:
  7635                           	callstack 0
  7636                           
  7637 ;; *************** function _HighISR *****************
  7638 ;; Defined at:
  7639 ;;		line 29 in file "interrupts.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7657 ;;Total ram usage:        2 bytes
  7658 ;; Hardware stack levels used: 1
  7659 ;; Hardware stack levels required when called: 2
  7660 ;; This function calls:
  7661 ;;		_getCharFromTxBuf
  7662 ;;		_putCharToRxBuf
  7663 ;;		i2_I2C_2_Master_Start
  7664 ;;		i2_I2C_2_Master_Stop
  7665 ;;		i2_I2C_2_Master_Write
  7666 ;;		i2_isDataInTxBuf
  7667 ;; This function is called by:
  7668 ;;		Interrupt level 2
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	intcode
  7673   000008                     __pintcode:
  7674                           	callstack 0
  7675   000008                     _HighISR:
  7676                           	callstack 23
  7677                           
  7678                           ; BSR set to: 14
  7679                           ;incstack = 0
  7680   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7681   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  7682   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  7683   000012                     
  7684                           ;interrupts.c: 33:     if(PIR0bits.INT0IF){
  7685   000012  010E               	movlb	14	; () banked
  7686   000014  A133               	btfss	51,0,b	;volatile
  7687   000016  EF0F  F000         	goto	i2u233_41
  7688   00001A  EF11  F000         	goto	i2u233_40
  7689   00001E                     i2u233_41:
  7690   00001E  EF1E  F000         	goto	i2l3419
  7691   000022                     i2u233_40:
  7692   000022                     
  7693                           ; BSR set to: 14
  7694                           ;interrupts.c: 34:  LATHbits.LATH3 = 1;
  7695   000022  8680               	bsf	128,3,c	;volatile
  7696   000024                     
  7697                           ; BSR set to: 14
  7698                           ;interrupts.c: 36:     I2C_2_Master_Start();
  7699   000024  EC4B  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7700                           
  7701                           ;interrupts.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  7702   000028  0E52               	movlw	82
  7703   00002A  EC31  F018         	call	i2_I2C_2_Master_Write
  7704                           
  7705                           ;interrupts.c: 38:  I2C_2_Master_Write(0b11100110);
  7706   00002E  0EE6               	movlw	230
  7707   000030  EC31  F018         	call	i2_I2C_2_Master_Write
  7708                           
  7709                           ;interrupts.c: 39:  I2C_2_Master_Stop();
  7710   000034  EC46  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7711   000038                     
  7712                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  7713   000038  010E               	movlb	14	; () banked
  7714   00003A  9133               	bcf	51,0,b	;volatile
  7715   00003C                     i2l3419:
  7716                           
  7717                           ; BSR set to: 14
  7718                           ;interrupts.c: 44:     if(PIR4bits.RC4IF){
  7719   00003C  A737               	btfss	55,3,b	;volatile
  7720   00003E  EF23  F000         	goto	i2u234_41
  7721   000042  EF25  F000         	goto	i2u234_40
  7722   000046                     i2u234_41:
  7723   000046  EF28  F000         	goto	i2l3423
  7724   00004A                     i2u234_40:
  7725   00004A                     
  7726                           ; BSR set to: 14
  7727                           ;interrupts.c: 46:     putCharToRxBuf(RC4REG);
  7728   00004A  51E3               	movf	227,w,b	;volatile
  7729   00004C  ECA0  F017         	call	_putCharToRxBuf
  7730   000050                     i2l3423:
  7731                           
  7732                           ;interrupts.c: 50:     if(PIR4bits.TX4IF){
  7733   000050  010E               	movlb	14	; () banked
  7734   000052  A537               	btfss	55,2,b	;volatile
  7735   000054  EF2E  F000         	goto	i2u235_41
  7736   000058  EF30  F000         	goto	i2u235_40
  7737   00005C                     i2u235_41:
  7738   00005C  EF40  F000         	goto	i2l292
  7739   000060                     i2u235_40:
  7740   000060                     
  7741                           ; BSR set to: 14
  7742                           ;interrupts.c: 52:     TX4REG = getCharFromTxBuf();
  7743   000060  EC12  F017         	call	_getCharFromTxBuf	;wreg free
  7744   000064  010E               	movlb	14	; () banked
  7745   000066  6FE4               	movwf	228,b	;volatile
  7746   000068                     
  7747                           ; BSR set to: 14
  7748                           ;interrupts.c: 53:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  7749   000068  EC16  F018         	call	i2_isDataInTxBuf	;wreg free
  7750   00006C  0900               	iorlw	0
  7751   00006E  A4D8               	btfss	status,2,c
  7752   000070  EF3C  F000         	goto	i2u236_41
  7753   000074  EF3E  F000         	goto	i2u236_40
  7754   000078                     i2u236_41:
  7755   000078  EF40  F000         	goto	i2l292
  7756   00007C                     i2u236_40:
  7757   00007C  010E               	movlb	14	; () banked
  7758   00007E  952D               	bcf	45,2,b	;volatile
  7759   000080                     i2l292:
  7760   000080  C004  FFDA         	movff	??_HighISR+1,fsr2h
  7761   000084  C003  FFD9         	movff	??_HighISR,fsr2l
  7762   000088  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7763   00008A  0011               	retfie		f
  7764   00008C                     __end_of_HighISR:
  7765                           	callstack 0
  7766                           
  7767 ;; *************** function i2_isDataInTxBuf *****************
  7768 ;; Defined at:
  7769 ;;		line 61 in file "serial.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;		None
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      unsigned char 
  7776 ;; Registers used:
  7777 ;;		wreg, status,2, status,0
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7787 ;;Total ram usage:        0 bytes
  7788 ;; Hardware stack levels used: 1
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_HighISR
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text46
  7797   00302C                     __ptext46:
  7798                           	callstack 0
  7799   00302C                     i2_isDataInTxBuf:
  7800                           	callstack 24
  7801   00302C                     
  7802                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  7803   00302C  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  7804   00302E  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  7805   003030  A4D8               	btfss	status,2,c
  7806   003032  EF1D  F018         	goto	i2u103_41
  7807   003036  EF20  F018         	goto	i2u103_40
  7808   00303A                     i2u103_41:
  7809   00303A  0E01               	movlw	1
  7810   00303C  EF21  F018         	goto	i2u104_40
  7811   003040                     i2u103_40:
  7812   003040  0E00               	movlw	0
  7813   003042                     i2u104_40:
  7814   003042  0012               	return		;funcret
  7815   003044                     __end_ofi2_isDataInTxBuf:
  7816                           	callstack 0
  7817                           
  7818 ;; *************** function i2_I2C_2_Master_Write *****************
  7819 ;; Defined at:
  7820 ;;		line 45 in file "i2c.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  data_byte       1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  data_byte       1    1[COMRAM] unsigned char 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      void 
  7827 ;; Registers used:
  7828 ;;		wreg, status,2, status,0, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7837 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7838 ;;Total ram usage:        1 bytes
  7839 ;; Hardware stack levels used: 1
  7840 ;; Hardware stack levels required when called: 1
  7841 ;; This function calls:
  7842 ;;		i2_I2C_2_Master_Idle
  7843 ;; This function is called by:
  7844 ;;		_HighISR
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           	psect	text47
  7849   003062                     __ptext47:
  7850                           	callstack 0
  7851   003062                     i2_I2C_2_Master_Write:
  7852                           	callstack 23
  7853                           
  7854                           ;incstack = 0
  7855                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7856   003062  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7857   003064                     
  7858                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7859   003064  EC66  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7860   003068                     
  7861                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7862   003068  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7863   00306C  0012               	return		;funcret
  7864   00306E                     __end_ofi2_I2C_2_Master_Write:
  7865                           	callstack 0
  7866                           
  7867 ;; *************** function i2_I2C_2_Master_Stop *****************
  7868 ;; Defined at:
  7869 ;;		line 39 in file "i2c.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;		None
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;		None
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  1    wreg      void 
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, status,0, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7887 ;;Total ram usage:        0 bytes
  7888 ;; Hardware stack levels used: 1
  7889 ;; Hardware stack levels required when called: 1
  7890 ;; This function calls:
  7891 ;;		i2_I2C_2_Master_Idle
  7892 ;; This function is called by:
  7893 ;;		_HighISR
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text48
  7898   00308C                     __ptext48:
  7899                           	callstack 0
  7900   00308C                     i2_I2C_2_Master_Stop:
  7901                           	callstack 23
  7902   00308C                     
  7903                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7904   00308C  EC66  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7905   003090                     
  7906                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7907   003090  010E               	movlb	14	; () banked
  7908   003092  85DA               	bsf	218,2,b	;volatile
  7909   003094                     
  7910                           ; BSR set to: 14
  7911   003094  0012               	return		;funcret
  7912   003096                     __end_ofi2_I2C_2_Master_Stop:
  7913                           	callstack 0
  7914                           
  7915 ;; *************** function i2_I2C_2_Master_Start *****************
  7916 ;; Defined at:
  7917 ;;		line 27 in file "i2c.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;		None
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;		None
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      void 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7935 ;;Total ram usage:        0 bytes
  7936 ;; Hardware stack levels used: 1
  7937 ;; Hardware stack levels required when called: 1
  7938 ;; This function calls:
  7939 ;;		i2_I2C_2_Master_Idle
  7940 ;; This function is called by:
  7941 ;;		_HighISR
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text49
  7946   003096                     __ptext49:
  7947                           	callstack 0
  7948   003096                     i2_I2C_2_Master_Start:
  7949                           	callstack 23
  7950   003096                     
  7951                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7952   003096  EC66  F017         	call	i2_I2C_2_Master_Idle	;wreg free
  7953   00309A                     
  7954                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7955   00309A  010E               	movlb	14	; () banked
  7956   00309C  81DA               	bsf	218,0,b	;volatile
  7957   00309E                     
  7958                           ; BSR set to: 14
  7959   00309E  0012               	return		;funcret
  7960   0030A0                     __end_ofi2_I2C_2_Master_Start:
  7961                           	callstack 0
  7962                           
  7963 ;; *************** function i2_I2C_2_Master_Idle *****************
  7964 ;; Defined at:
  7965 ;;		line 22 in file "i2c.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  1    wreg      void 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7983 ;;Total ram usage:        1 bytes
  7984 ;; Hardware stack levels used: 1
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		i2_I2C_2_Master_Start
  7989 ;;		i2_I2C_2_Master_Stop
  7990 ;;		i2_I2C_2_Master_Write
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           	psect	text50
  7995   002ECC                     __ptext50:
  7996                           	callstack 0
  7997   002ECC                     i2_I2C_2_Master_Idle:
  7998                           	callstack 23
  7999   002ECC                     i2l185:
  8000   002ECC  010E               	movlb	14	; () banked
  8001   002ECE  B5D8               	btfsc	216,2,b	;volatile
  8002   002ED0  EF6C  F017         	goto	i2u191_41
  8003   002ED4  EF6E  F017         	goto	i2u191_40
  8004   002ED8                     i2u191_41:
  8005   002ED8  EF66  F017         	goto	i2l185
  8006   002EDC                     i2u191_40:
  8007   002EDC                     
  8008                           ; BSR set to: 14
  8009   002EDC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8010   002EE0  0E1F               	movlw	31
  8011   002EE2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8012   002EE4  A4D8               	btfss	status,2,c
  8013   002EE6  EF77  F017         	goto	i2u192_41
  8014   002EEA  EF79  F017         	goto	i2u192_40
  8015   002EEE                     i2u192_41:
  8016   002EEE  EF66  F017         	goto	i2l185
  8017   002EF2                     i2u192_40:
  8018   002EF2                     
  8019                           ; BSR set to: 14
  8020   002EF2  0012               	return		;funcret
  8021   002EF4                     __end_ofi2_I2C_2_Master_Idle:
  8022                           	callstack 0
  8023                           
  8024 ;; *************** function _putCharToRxBuf *****************
  8025 ;; Defined at:
  8026 ;;		line 33 in file "serial.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  byte            1    wreg     unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  byte            1    0[COMRAM] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8043 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8044 ;;Total ram usage:        1 bytes
  8045 ;; Hardware stack levels used: 1
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_HighISR
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text51
  8054   002F40                     __ptext51:
  8055                           	callstack 0
  8056   002F40                     _putCharToRxBuf:
  8057                           	callstack 24
  8058                           
  8059                           ; BSR set to: 14
  8060                           ;incstack = 0
  8061                           ;putCharToRxBuf@byte stored from wreg
  8062   002F40  6E01               	movwf	putCharToRxBuf@byte^0,c
  8063   002F42                     
  8064                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  8065   002F42  0E13               	movlw	19
  8066   002F44  6459               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  8067   002F46  EFA7  F017         	goto	i2u101_41
  8068   002F4A  EFA9  F017         	goto	i2u101_40
  8069   002F4E                     i2u101_41:
  8070   002F4E  EFAB  F017         	goto	i2l2175
  8071   002F52                     i2u101_40:
  8072   002F52  0E00               	movlw	0
  8073   002F54  6E59               	movwf	_RxBufWriteCnt^0,c	;volatile
  8074   002F56                     i2l2175:
  8075                           
  8076                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  8077   002F56  5059               	movf	_RxBufWriteCnt^0,w,c
  8078   002F58  0F3D               	addlw	low _EUSART4RXbuf
  8079   002F5A  6ED9               	movwf	fsr2l,c
  8080   002F5C  6ADA               	clrf	fsr2h,c
  8081   002F5E  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  8082   002F62  2A59               	incf	_RxBufWriteCnt^0,f,c	;volatile
  8083   002F64  0012               	return		;funcret
  8084   002F66                     __end_of_putCharToRxBuf:
  8085                           	callstack 0
  8086                           
  8087 ;; *************** function _getCharFromTxBuf *****************
  8088 ;; Defined at:
  8089 ;;		line 47 in file "serial.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;		None
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;		None
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  1    wreg      unsigned char 
  8096 ;; Registers used:
  8097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8107 ;;Total ram usage:        2 bytes
  8108 ;; Hardware stack levels used: 1
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_HighISR
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text52
  8117   002E24                     __ptext52:
  8118                           	callstack 0
  8119   002E24                     _getCharFromTxBuf:
  8120                           	callstack 24
  8121   002E24                     
  8122                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  8123   002E24  0E3B               	movlw	59
  8124   002E26  6456               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  8125   002E28  EF18  F017         	goto	i2u224_41
  8126   002E2C  EF1A  F017         	goto	i2u224_40
  8127   002E30                     i2u224_41:
  8128   002E30  EF1C  F017         	goto	i2l3263
  8129   002E34                     i2u224_40:
  8130   002E34  0E00               	movlw	0
  8131   002E36  6E56               	movwf	_TxBufReadCnt^0,c	;volatile
  8132   002E38                     i2l3263:
  8133                           
  8134                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  8135   002E38  2A56               	incf	_TxBufReadCnt^0,f,c	;volatile
  8136   002E3A  0456               	decf	_TxBufReadCnt^0,w,c	;volatile
  8137   002E3C  6E01               	movwf	??_getCharFromTxBuf^0,c
  8138   002E3E  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  8139   002E40  0E00               	movlw	low _EUSART4TXbuf
  8140   002E42  2401               	addwf	??_getCharFromTxBuf^0,w,c
  8141   002E44  6ED9               	movwf	fsr2l,c
  8142   002E46  0E01               	movlw	high _EUSART4TXbuf
  8143   002E48  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  8144   002E4A  6EDA               	movwf	fsr2h,c
  8145   002E4C  50DF               	movf	indf2,w,c
  8146   002E4E  0012               	return		;funcret
  8147   002E50                     __end_of_getCharFromTxBuf:
  8148                           	callstack 0
  8149                           
  8150                           	psect	rparam
  8151   000000                     
  8152                           	psect	temp
  8153   00005A                     btemp:
  8154                           	callstack 0
  8155   00005A                     	ds	1
  8156   000000                     int$flags	set	btemp
  8157   000000                     wtemp8	set	btemp+1
  8158   000000                     ttemp5	set	btemp+1
  8159   000000                     ttemp6	set	btemp+4
  8160   000000                     ttemp7	set	btemp+8
  8161                           
  8162                           	psect	config
  8163                           
  8164                           ;Config register CONFIG1L @ 0x300000
  8165                           ;	External Oscillator mode Selection bits
  8166                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8167                           ;	Power-up default value for COSC bits
  8168                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8169   300000                     	org	3145728
  8170   300000  AA                 	db	170
  8171                           
  8172                           ;Config register CONFIG1H @ 0x300001
  8173                           ;	unspecified, using default values
  8174                           ;	Clock Out Enable bit
  8175                           ;	CLKOUTEN = 0x1, unprogrammed default
  8176                           ;	Clock Switch Enable bit
  8177                           ;	CSWEN = 0x1, unprogrammed default
  8178                           ;	Fail-Safe Clock Monitor Enable bit
  8179                           ;	FCMEN = 0x1, unprogrammed default
  8180   300001                     	org	3145729
  8181   300001  FF                 	db	255
  8182                           
  8183                           ;Config register CONFIG3L @ 0x300004
  8184                           ;	WDT Period Select bits
  8185                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8186                           ;	WDT operating mode
  8187                           ;	WDTE = OFF, WDT Disabled
  8188   300004                     	org	3145732
  8189   300004  9F                 	db	159
  8190                           
  8191                           ;Config register CONFIG3H @ 0x300005
  8192                           ;	unspecified, using default values
  8193                           ;	WDT Window Select bits
  8194                           ;	WDTCWS = 0x7, unprogrammed default
  8195                           ;	WDT input clock selector
  8196                           ;	WDTCCS = 0x7, unprogrammed default
  8197   300005                     	org	3145733
  8198   300005  FF                 	db	255
  8199                           tosu	equ	0xFFF
  8200                           tosh	equ	0xFFE
  8201                           tosl	equ	0xFFD
  8202                           stkptr	equ	0xFFC
  8203                           pclatu	equ	0xFFB
  8204                           pclath	equ	0xFFA
  8205                           pcl	equ	0xFF9
  8206                           tblptru	equ	0xFF8
  8207                           tblptrh	equ	0xFF7
  8208                           tblptrl	equ	0xFF6
  8209                           tablat	equ	0xFF5
  8210                           prodh	equ	0xFF4
  8211                           prodl	equ	0xFF3
  8212                           indf0	equ	0xFEF
  8213                           postinc0	equ	0xFEE
  8214                           postdec0	equ	0xFED
  8215                           preinc0	equ	0xFEC
  8216                           plusw0	equ	0xFEB
  8217                           fsr0h	equ	0xFEA
  8218                           fsr0l	equ	0xFE9
  8219                           wreg	equ	0xFE8
  8220                           indf1	equ	0xFE7
  8221                           postinc1	equ	0xFE6
  8222                           postdec1	equ	0xFE5
  8223                           preinc1	equ	0xFE4
  8224                           plusw1	equ	0xFE3
  8225                           fsr1h	equ	0xFE2
  8226                           fsr1l	equ	0xFE1
  8227                           bsr	equ	0xFE0
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           postdec2	equ	0xFDD
  8231                           preinc2	equ	0xFDC
  8232                           plusw2	equ	0xFDB
  8233                           fsr2h	equ	0xFDA
  8234                           fsr2l	equ	0xFD9
  8235                           status	equ	0xFD8

Data Sizes:
    Strings     105
    Constant    0
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160    133     133
    BANK1           256      0     132
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_calibration@blue	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@blue(BANK0[6]), 

    color_calibration@green	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@green(BANK0[6]), 

    color_calibration@lightblue	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@lightblue(BANK0[6]), 

    color_calibration@orange	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@orange(BANK0[6]), 

    color_calibration@pink	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@pink(BANK0[6]), 

    color_calibration@red	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@red(BANK0[6]), 

    color_calibration@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    color_calibration@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_calibration@white	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@white(BANK0[6]), 

    color_calibration@yellow	PTR struct RGB_calib size(1) Largest target is 6
		 -> main@yellow(BANK0[6]), 

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    S3093$buffer	PTR unsigned char  size(2) Largest target is 0

    S3093$source	PTR const unsigned char  size(2) Largest target is 0

    S50DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S50DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[8]), STR_3(CODE[54]), STR_5(CODE[43]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 40
		 -> main@buf(BANK0[40]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), STR_2(CODE[1]), STR_4(CODE[1]), STR_6(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[8]), STR_3(CODE[54]), STR_5(CODE[43]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[8]), STR_3(CODE[54]), STR_5(CODE[43]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[8]), STR_3(CODE[54]), STR_5(CODE[43]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _color_calibration->_color_normalise
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _batteryLevel->___awdiv
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf
    _HighISR->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   56656
                                              0 BANK0    133   133      0
                         _Buggy_init
                    _Interrupts_init
                   _TxBufferedString
                       _batteryLevel
                  _color_calibration
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                          _sendTxBuf
                            _sprintf
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             22 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             33    15     18    3743
                                             29 COMRAM    31    13     18
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    3088
                                             25 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2738
                                             14 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   28188
                                             34 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    5029
                                             22 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             17 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8      99
                                              4 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     674
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_calibration                                   12     2     10    6942
                                             41 COMRAM    12     2     10
                    _color_normalise
                         _color_read
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1    1243
                                              8 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    3333
                                             30 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     695
                                             12 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     523
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      37
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _TxBufferedString
     _putCharToTxBuf
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _color_calibration
     _color_normalise
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _color_read
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _white_Light
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_detect
   _color_normalise
   _color_read
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _stop
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_I2C_2_Master_Start
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Write
     i2_I2C_2_Master_Idle
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      84       7       51.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     85      85       5       83.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllll     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      50        0.0%
BITBIGSFRllllll      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      61        0.0%
BITBIGSFRllllhl      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllll      3      0       0      60        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRllllll      1      0       0      62        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     162      65        0.0%
DATA                 0      0     162       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 17:24:54 2024

                    _white_Light 2F66          color_calibration@RGBC_n 002B                               l71 1786  
                             l69 1778                     ___awdiv@sign 000A              ___wmul@multiplicand 0007  
               main@turnDuration 008C                ??_Interrupts_init 0005                              l111 2C54  
                            l200 3060                              l122 1C0C                              l114 2FA8  
                            l203 2D46                              l131 0E76                              l140 1050  
                            l125 2596                              l117 2F82                              l133 0E84  
                            l142 105E                              l134 0F14                              l119 2F88  
                            l151 1238                              l143 10EE                              l152 12C8  
                            l136 0F22                              l128 30A2                              l145 10FC  
                            l137 0FB2                              l234 2DBA                              l154 12D6  
                            l146 118C                              l155 1366                              l139 0FC0  
                            l323 2FC6                              l148 119A                              l500 225E  
                            l149 122A                              l342 2EA2                              l182 2E78  
                            l351 2CB6                              l191 3080                              l503 22D2  
                            l511 2018                              l520 211C                              l185 2EA4  
                            l345 3012                              l370 2FFA                              l194 308A  
                            l506 2300                              l283 3054                              l523 214A  
                            l515 2084                              l355 2FE0                              l188 2ECA  
                            l532 2862                              l373 3016                              l197 3076  
                            l541 1EBE                              l517 20A8                              l375 3024  
                            l391 2D04                              l463 2454                              l543 1EE2  
                            l376 302A                              l456 2B10                              l528 2816  
                            l537 1E52                              l481 16E0                              l546 1F56  
                            l387 2CEC                              l811 29D6                              l388 2CEE  
                            l389 2D02                              l549 1F94                              l646 26A2  
                            l494 21CE                              l486 2752                              l567 2F3E  
                            l479 16E0                              l489 2790                              l578 2BDE  
                            l498 223A                              l579 2BEE                              l798 2926  
                            _abs 2DF0                     ___awmod@sign 000A                    ?_color_detect 0005  
                            wreg 0FE8                  _color_normalise 2456                             ?_abs 000B  
                           l3001 2CE6                             l1065 2B84                             l1058 2B7C  
                           l3003 2CFC                             l3011 0E90                             l1308 2A80  
                           l3101 1290                             l3021 0F10                             l3013 0EAC  
                           l3005 0E6C                             l1245 2DEE                             l3111 12FE  
                           l3103 12AC                             l3031 0F7A                             l3023 0F26  
                           l3015 0EC0                             l3007 0E72                             l1319 30A4  
                           l3113 1312                             l3105 12C4                             l3041 0FE8  
                           l3033 0F96                             l3025 0F2E                             l3017 0EDC  
                           l3009 0E88                             l3201 14D8                             l3121 2DBC  
                           l2411 2EB4                             l3115 132E                             l3107 12DA  
                           l3051 1062                             l3043 0FFC                             l3035 0FAE  
                           l3027 0F4A                             l3019 0EF8                             l3211 154E  
                           l3203 14F0                             l1283 1DD0                             l3123 2DC4  
                           l3141 2C80                             l2421 2868                             l3117 134A  
                           l3109 12E2                             l3061 10D2                             l3053 106A  
                           l3045 1018                             l3037 0FC4                             l3029 0F5E  
                           l2501 2B1A                             l2413 2F1A                             l3213 1566  
                           l3221 15F6                             l3205 1520                             l3133 2FC8  
                           l1293 2E0A                             l3125 2DCC                             l3143 2C84  
                           l2431 2898                             l2423 2876                             l3119 1362  
                           l3071 1138                             l3063 10EA                             l3055 1086  
                           l3047 1034                             l3039 0FCC                             l2511 2B50  
                           l2503 2B2C                             l2415 2F36                             l3223 1608  
                           l3215 157E                             l3135 2FDC                             l3127 2DD4  
                           l3151 26F6                             l1296 2E22                             l3137 2C56  
                           l2441 28C6                             l2433 289C                             l2425 287E  
                           l2601 25BA                             l2409 2EA4                             l3081 11A6  
                           l3073 1154                             l3065 1100                             l3057 109A  
                           l3049 104C                             l2513 2B66                             l2505 2B34  
                           l3225 1620                             l3233 1684                             l3217 15AE  
                           l3209 153C                             l2521 29D8                             l1289 2D84  
                           l3129 2DE4                             l3161 274E                             l3153 2722  
                           l3145 26A4                             l3139 2C5A                             l2451 28FA  
                           l2443 28D4                             l2435 28A4                             l2427 2882  
                           l2419 2864                             l2611 25F0                             l2603 25BE  
                           l3091 1226                             l3083 11C2                             l3075 1170  
                           l3067 1108                             l3059 10B6                             l2515 2B6E  
                           l2507 2B3C                             l3235 1696                             l3227 1638  
                           l3219 15C6                             l2531 2A50                             l2523 29E8  
                           l3163 2776                             l3155 272A                             l3147 26E4  
                           l2453 2900                             l2445 28DA                             l2437 28B6  
                           l2429 2890                             l2621 2632                             l2613 2606  
                           l2605 25CC                             l2541 307C                             l2701 1ADA  
                           l3093 123C                             l3085 11D6                             l3077 1188  
                           l3069 1124                             l2517 2B70                             l2509 2B4A  
                           l3245 16B2                             l3229 1668                             l3181 13D8  
                           l3173 1368                             l2525 29F8                             l3157 2732  
                           l3501 1734                             l2447 28F0                             l2439 28BE  
                           l2455 2906                             l2623 2650                             l2615 260E  
                           l2631 2672                             l2607 25DC                             l2551 3082  
                           l2543 3058                             l2703 1B36                             l3095 1244  
                           l3087 11F2                             l3079 119E                             l2519 2B76  
                           l2711 2792                             l3247 16C4                             l3175 1378  
                           l3183 13F0                             l2471 2946                             l2463 2928  
                           l2535 2DF0                             l2527 2A02                             l3159 273E  
                           l3167 2780                             l3511 1750                             l3503 1738  
                           l2457 2916                             l2449 28F8                             l2633 2682  
                           l2625 2660                             l2617 261A                             l2609 25E0  
                           l2561 2D1C                             l2553 3086                             l2545 305C  
                           l2705 1B52                             l3097 1260                             l3089 120E  
                           l3169 30A0                             l2721 27F6                             l2713 27AE  
                           l2801 2064                             l3185 1402                             l3193 1466  
                           l3177 1390                             l2481 297E                             l2473 2954  
                           l2465 292C                             l2537 2DFE                             l2529 2A1E  
                           l2641 1C30                             l3601 1A20                             l3521 1768  
                           l3513 1758                             l3505 173C                             l2459 291E  
                           l2635 2692                             l2627 2662                             l2619 2628  
                           l2731 2456                             l2563 2D42                             l2555 2D08  
                           l2539 3078                             l2547 306E                             l2707 1BAE  
                           l3099 1274                             l2571 231C                             l2723 2802  
                           l2715 27BA                             l2811 20C0                             l2803 2070  
                           l3195 1478                             l3187 141A                             l3179 13A8  
                           l2483 298C                             l2491 29B6                             l2475 295C  
                           l2467 293A                             l2651 1C6E                             l2643 1C38  
                           l3531 17A6                             l3523 176C                             l3515 175C  
                           l3507 1740                             l2629 266C                             l2733 2468  
                           l2565 2D44                             l2557 2D0C                             l2549 3072  
                           l2709 1BCA                             l2741 2E5A                             l2581 23D8  
                           l2573 236A                             l2725 2812                             l2717 27E6  
                           l2821 2118                             l2813 20EC                             l2805 2080  
                           l3197 1490                             l3189 1432                             l2493 29C6  
                           l2485 29A2                             l2477 296E                             l2469 2942  
                           l2661 1CF8                             l2653 1C8A                             l2645 1C44  
                           l3541 17D0                             l3533 17AA                             l3525 1770  
                           l3517 1760                             l3509 1748                             l2591 2BB4  
                           l2735 24CA                             l2559 2D14                             l2743 2E60  
                           l2751 2F8C                             l2583 2418                             l2575 237C  
                           l2727 283A                             l2719 27EE                             l2911 1F42  
                           l2903 1EFA                             l2831 2172                             l2823 2140  
                           l2815 20F4                             l2807 20AE                             l3199 14A8  
                           l2495 29CE                             l2487 29AA                             l2479 2976  
                           l2671 1D56                             l2663 1D14                             l2655 1CA2  
                           l2647 1C48                             l2639 1C0E                             l3551 1822  
                           l3543 17D4                             l3535 17B0                             l3527 1774  
                           l3519 1764                             l2761 2E90                             l2593 2BBE  
                           l2585 2B86                             l2737 2530                             l2745 2E62  
                           l2577 2380                             l2569 2302                             l2729 283E  
                           l2913 1F52                             l2905 1F26                             l2841 21CA  
                           l2833 219E                             l2817 20FC                             l2753 2FFC  
                           l2489 29B0                             l2673 1D6C                             l2665 1D26  
                           l2657 1CAC                             l2649 1C52                             l2921 2D48  
                           l3561 186C                             l3553 1826                             l3545 1800  
                           l3537 17C8                             l3529 178E                             l3481 16F2  
                           l3473 16E2                             l2763 2EA0                             l2771 2FF6  
                           l2595 2598                             l2587 2B96                             l2691 2F78  
                           l2747 2E64                             l2739 2E50                             l2499 2B12  
                           l2579 23BE                             l2915 1F7A                             l2907 1F2E  
                           l2851 2236                             l2843 21F2                             l2835 21A6  
                           l2827 214C                             l2819 2108                             l2675 1D8A  
                           l2667 1D36                             l2659 1CC4                             l2683 1DAE  
                           l2923 2D50                             l3571 18CC                             l3563 1884  
                           l3555 1836                             l3547 1814                             l3539 17D0  
                           l3491 1714                             l3483 16FE                             l3475 16E6  
                           l2757 2E7C                             l2773 2FF8                             l2765 2FE2  
                           l2597 259C                             l2589 2BA4                             l2693 1A38  
                           l2749 2E66                             l2941 2BFE                             l2909 1F36  
                           l2861 22AA                             l2853 2264                             l2837 21AE  
                           l2845 21F6                             l2829 2166                             l2781 1F96  
                           l2669 1D46                             l2677 1D8C                             l2925 2D60  
                           l3581 196C                             l3573 18E6                             l3565 189A  
                           l3557 1850                             l3549 1818                             l3493 1718  
                           l3485 16FE                             l3477 16EA                             l2935 2D86  
                           l2759 2E8C                             l2775 3014                             l2767 2FEC  
                           l2599 25AA                             l2695 1A52                             l2951 2C36  
                           l2943 2C0E                             l2919 1F84                             l2863 22B2  
                           l2847 221A                             l2839 21BA                             l2791 1FF8  
                           l2783 1FB0                             l2679 1DA2                             l2927 2D7C  
                           l3591 19B0                             l3583 1976                             l3575 18F6  
                           l3567 18AA                             l3559 1864                             l3495 1720  
                           l3487 170A                             l3479 16EE                             l2777 3028  
                           l2769 2FF4                             l2697 1A6A                             l2689 2F68  
                           l2953 2C40                             l2945 2C18                             l2937 2BF0  
                           l2961 2FB4                             l2881 1E2A                             l2873 1DD2  
                           l2865 22BE                             l2857 2276                             l2849 2226  
                           l2793 2004                             l2785 1FBC                             l3593 19CA  
                           l3585 197A                             l3577 191E                             l3569 18B2  
                           l3497 1728                             l3489 1710                             l2699 1ABE  
                           l2955 2C4A                             l2947 2C22                             l2939 2BF4  
                           l2971 2A82                             l2963 2FB6                             l2883 1E32  
                           l2891 1E7A                             l2875 1DEA                             l2867 22CE  
                           l2859 22A2                             l2795 2014                             l2787 1FE8  
                           l3595 1A0E                             l3587 198A                             l3579 1968  
                           l3499 1730                             l2957 3044                             l2949 2C2C  
                           l2981 2AEA                             l2973 2A92                             l2965 2FC0  
                           l2893 1E9E                             l2885 1E3E                             l2877 1DF6  
                           l2869 22F6                             l2797 203C                             l2789 1FF0  
                           l3597 1A12                             l3589 19A8                             l2991 2B04  
                           l2983 2AEC                             l2975 2AB8                             l2967 2FC2  
                           l2959 2FAA                             l2895 1EAA                             l2887 1E4E  
                           l2879 1E22                             l2799 2040                             l3599 1A1C  
                           l2993 2B0E                             l2985 2AF6                             l2977 2ABC  
                           l2969 2FC4                             l2897 1EBA                             l2889 1E76  
                           l2995 2CB8                             l2987 2AF8                             l2979 2AE0  
                           l2899 1EE8                             l2997 2CC2                             l2989 2B02  
                           l2999 2CD8                             STR_1 0E62                             STR_2 0E36  
                           STR_3 0E01                             STR_4 0E36                             STR_5 0E37  
                           STR_6 0E36                             u2001 0FD8                             u2010 105E  
                           u2011 105A                             u1300 28F0                             u1301 28EC  
                           u2101 12EE                             u2021 1076                             u1310 2916  
                           u2030 10FC                             u2110 2FDC                             u1311 2912  
                           u2031 10F8                             u2111 2FD8                             u2120 2C7C  
                           u1240 2EB4                             u1400 2B66                             u2200 154E  
                           u1320 293A                             u1241 2EB0                             u2041 1114  
                           u1401 2B62                             u2201 154A                             u1321 2936  
                           u2130 2CA6                             u1250 2ECA                             u2050 119A  
                           u2210 1608                             u1330 2954                             u1410 29E8  
                           u1251 2EC6                             u2051 1196                             u2211 1604  
                           u1331 2950                             u1411 29E4                             u2140 2CB6  
                           u1260 2876                             u1500 2BA4                             u2220 1696  
                           u1340 296E                             u1420 29F8                             u2141 2CB2  
                           u1261 2872                             u1501 2BA0                             u2061 11B2  
                           u2221 1692                             u1341 296A                             u1421 29F4  
                           u1270 2890                             u1510 2BDE                             u2070 1238  
                           u2230 16C4                             u1350 298C                             u1430 2A1E  
                           u2150 26F2                             u2127 2C72                             u1271 288C  
                           u1511 2BDA                             u2071 1234                             u2231 16C0  
                           u1351 2988                             u1431 2A1A                             u2151 26EE  
                           u1280 28B6                             u1520 25AA                             u1360 29A2  
                           u1440 2A50                             u1600 1C8A                             u2160 2776  
        color_calibration@orange 0031                     _BAUD4CONbits 0EE9                             u2137 2C9C  
                           u1281 28B2                             u1521 25A6                             u2081 1250  
                           u1361 299E                             u1441 2A4C                             u1601 1C86  
                           u2161 2772                             u1290 28D4                             u1530 25CC  
                           u2090 12D6                             u2170 1378                             u1370 29C6  
                           u1450 2DFE                             u1610 1CC0                             u1291 28D0  
                           u1531 25C8                             u2091 12D2                             u2171 1374  
                           u1371 29C2                             u1451 2DFA                             u1611 1CBA  
                           u1540 2606                             u1460 2D30                             u1380 2B2C  
                           u1700 2862                             u2180 1402                             u1620 1CC2  
                           u1541 2602                             u1461 2D28                             u1381 2B28  
                           u1701 285E                             u2181 13FE                             u2501 19BA  
                           u1550 2628                             u1390 2B4A                             u2190 1478  
                           u1710 3010                             u1630 1D26                             u1551 2624  
                           u1391 2B46                             u2191 1474                             u1711 300A  
                           u1631 1D22                             u2431 16F8                             u1560 2650  
                           u1480 231C                             u1800 21F2                             u1720 3012  
                           u1640 1D36                             u2440 1786                             u1561 264C  
                           u1481 2318                             u1801 21EE                             u1641 1D32  
                           u2441 1782                             u1730 2E8C                             u1570 2682  
                           u1490 23D8                             u1810 221A                             u1650 1D46  
                           u2450 1884                             _T2PR 0FBC                             u1731 2E88  
                           u1571 267E                             u1491 23D4                             u1811 2216  
                           u1651 1D42                             u2451 1880                             u1740 3024  
                           u1820 225E                             u1660 1D56                             u1580 1C30  
                           u1900 2D7C                             u2460 189A                             u1741 3020  
                           u1821 225A                             u1661 1D52                             u1581 1C2C  
                           u1901 2D78                             u2461 1896                             u2517 179A  
                           u1478 2D32                             u1830 2272                             u1750 203C  
                           u1670 1D9E                             u1590 1C6E                             u1831 226E  
                           u1751 2038                             u2607 149A                             u1671 1D9A  
                           u1591 1C6A                             u2471 18BC                             u2527 17BC  
                           u1680 2F78                             u1840 22F6                             u1760 2064  
                           u1681 2F74                             u1841 22F2                             u1761 2060  
                           u2617 14CA                             u2481 18D6                             u2537 1842  
                           u1930 2CE6                             u1690 283A                             u1850 1E76  
                           u1770 20A8                             u2490 18F6                             u1931 2CE2  
                           u1691 2836                             u1851 1E72                             u1771 20A4  
                           u2707 2076                             u2627 14FA                             u2547 1996  
                           u2491 18F2                             u1940 2CFC                             u1860 1E9E  
                           u1780 20BC                             u1941 2CF8                             u1861 1E9A  
                           u2717 210E                             u1781 20B8                             u2637 152A  
                           u2557 2744                             u1950 0E84                             u1870 1EE2  
                           u1790 2140                             u2807 0F02                             u1951 0E80  
                           u1871 1EDE                             u2727 21C0                             u1791 213C  
                           u2647 1570                             u2567 139A                             u1880 1EF6  
                           u2817 0FA0                             u1961 0E9C                             u1881 1EF2  
                           u2737 222C                             u2657 15A0                             u2577 13CA  
                           u1970 0F22                             u1890 1F7A                             u2827 103E  
                           u1971 0F1E                             u1891 1F76                             u2747 22C4  
                           u2667 15D0                             u2587 1424                             u2837 10DC  
                           u1981 0F3A                             u2757 1E44                             u2677 162A  
                           u2597 1454                             u1990 0FC0                             u2847 117A  
                           u1991 0FBC                             u2767 1EB0                             u2687 165A  
                           u2857 1218                             u2777 1F48                             u2697 200A  
                           u2867 12B6                             u2787 2808                             u2877 1354  
                           u2797 2C04          color_calibration@yellow 002F                             abs@a 000B  
                           _dbuf 0164                             _main 16E2                             _prec 0053  
                           _move 1368                             fsr0h 0FEA                             fsr1h 0FE2  
                           indf0 0FEF                             fsr2h 0FDA                             fsr0l 0FE9  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005A                             _stop 26A4  
                           prodh 0FF4                             prodl 0FF3                             start 008C  
            main@reverseDuration 008A                 __end_of_ADC_init 2FFC                  __end_of_HighISR 008C  
                   ___param_bank 0000                            ??_abs 000D             __end_of_batteryLevel 2D06  
                __end_of___aldiv 26A4                            ?_main 0001                            _ADPCH 0F5F  
                __end_of___awdiv 2928                            ?_move 0023                  __end_of___awmod 29D8  
                          ?_stop 0017                  ___awdiv@divisor 0007                  __end_of___lwdiv 2B86  
                          i2l200 306C                            i2l331 2F64                            i2l191 309E  
                          i2l185 2ECC                            i2l345 3042                            i2l338 2E4E  
                          i2l188 2EF2                            i2l292 0080                            i2l197 3094  
                ___awdiv@counter 0009                   ??_color_detect 000D                     vfpfcnvrt@fmt 0010  
            ___lmul@multiplicand 0009       __end_of_I2C_2_Master_Start 3082       __end_of_I2C_2_Master_Write 3062  
                          _flags 0055                       _Buggy_init 2D86       color_calibration@lightblue 0032  
                          _fputc 29D8                            _width 0051                            _putch 30A4  
                          tablat 0FF5                            plusw0 0FEB                            plusw2 0FDB  
                          ttemp5 005B                            ttemp6 005E                            ttemp7 0062  
                          stop@i 001D                            status 0FD8                            wtemp8 005B  
                __end_of_sprintf 2DF0                     main@turnRamp 008D            _I2C_2_Master_RepStart 3082  
             putCharToRxBuf@byte 0001                  __initialization 2EF4                     __end_of_main 1A38  
                   __end_of_move 16E2                  i2_isDataInTxBuf 302C                     __end_of_stop 2792  
             putCharToTxBuf@byte 0005              move@reverseDuration 0027                           ??_main 0060  
                         ??_move 002C                           ??_stop 001A                    __activetblptr 0002  
        __end_of_color_normalise 2598                     ?_setMotorPWM 0012                           ?_fputc 0005  
                         _ADRESH 0F64                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                 ___awdiv@dividend 0005  
                         ?_putch 0001                           _RC0PPS 0E62                           _RC4REG 0EE3  
                         _RE2PPS 0E74                           _RC7PPS 0E69                           _RD5PPS 0E6F  
                         _RE4PPS 0E76                           _RD6PPS 0E70                           i2l2171 2F42  
                         i2l2173 2F52                           i2l2175 2F56                           i2l2177 2F62  
                         i2l3411 0012                           i2l3261 2E34                           i2l3421 004A  
                         i2l3413 0022                           i2l3263 2E38                           i2l3271 308C  
                         i2l2199 302C                           i2l3423 0050                           i2l3415 0024  
                         i2l3273 3090                           i2l3425 0060                           i2l3417 0038  
                         i2l3259 2E24                           i2l3267 3096                           i2l3275 3064  
                         i2l3427 0068                           i2l3419 003C                           i2l3269 309A  
                         i2l3277 3068                           i2l3429 007C                           i2l2931 2ECC  
                         i2l2933 2EDC                           _RG6PPS 0E88                    vfpfcnvrt@done 0013  
                      ??_HighISR 0003         __end_of_color_click_init 2C56                           _RX4PPS 0E15  
                         _TX4REG 0EE4                    main@lightblue 00B2                     ??_ADC_getval 0005  
                   _CCPTMRS0bits 0FAD                     vfprintf@cfmt 001D                 _getCharFromTxBuf 2E24  
                         ___lmul 2B86                        ??___aldiv 0019                           ___wmul 2F1A  
                      ??___awdiv 0009                        ??___awmod 0009                        ??___lwdiv 000F  
             color_detect@RGBC_n 0005                           clear_0 2EFA                           clear_1 2F06  
               ___awdiv@quotient 000B                  ___awmod@divisor 0007                           isa$std 0001  
                ___awmod@counter 0009                           fputc@c 0005                ?_TxBufferedString 0006  
                         move@mL 0023                           move@mR 0024                     __mediumconst 0000  
                         tblptrh 0FF7                           tblptrl 0FF6                           tblptru 0FF8  
                      ?_ADC_init 0001               ??_TxBufferedString 0008                           putch@c 0001  
               __end_of_vfprintf 2D86                           stop@mL 0017                           stop@mR 0018  
                    ?_Buggy_init 0001                ??_initDCmotorsPWM 0007                        ??_sprintf 0030  
             __end_of_ADC_getval 302C                 __end_of_turnLeft 2302            __end_of_isDataInTxBuf 3014  
                     __accesstop 0060          __end_of__initialization 2F0C                  fullSpeedAhead@i 001E  
                  main@turnSpeed 008B           ?_I2C_2_Master_RepStart 0001          __end_ofi2_isDataInTxBuf 3044  
                  ___rparam_used 0001             __end_of_color_detect 30A4                  _Interrupts_init 3044  
                 __pcstackCOMRAM 0001                     ?_white_Light 0001                    __end_of_fputc 2A82  
                  __end_of_putch 30A6                 _reverseOneSquare 1DD2                 ?_color_normalise 001F  
                     ??_ADC_init 0005                          ??_fputc 0008                          ??_putch 0005  
                   _batteryLevel 2CB8                       __pbssBANK1 0100                _color_writetoaddr 2F8A  
                   _T2CLKCONbits 0FBF               ?_color_writetoaddr 0007                          ?___lmul 0005  
                        ?___wmul 0005                   ___lmul@product 000D              ??_color_writetoaddr 0008  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5       fullSpeedAhead@straightRamp 001A  
          turnRight@turnDuration 001A                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
                     _color_read 1A38          __end_of_Interrupts_init 3056           color_writetoaddr@value 0007  
                        _HighISR 0008        __end_of_color_writetoaddr 2FAA                 ?i2_isDataInTxBuf 0001  
                      _ADREFbits 0F58               _I2C_2_Master_Start 3078                       _initUSART4 2FAA  
            i2_I2C_2_Master_Idle 2ECC               _I2C_2_Master_Write 3056                          __Hparam 0000  
            i2_I2C_2_Master_Stop 308C                          __Lparam 0000                          ___aldiv 2598  
                        ___awdiv 2864                          ___awmod 2928              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 2B12              ?_I2C_2_Master_Write 0001                        ?_vfprintf 001A  
                   __psmallconst 0E00                          __pcinit 2EF4                          __ramtop 0E00  
                      ?_turnLeft 0017                          __ptext0 16E2                          __ptext1 26A4  
                        __ptext2 2DBC                          __ptext3 2D48                          __ptext4 1C0E  
                        __ptext5 29D8                          __ptext6 30A4                          __ptext7 2DF0  
                        __ptext8 2928                          __ptext9 2FC8             ?i2_I2C_2_Master_Idle 0001  
                      _T2CONbits 0FBD             ?i2_I2C_2_Master_Stop 0001                 ___awmod@dividend 0005  
               ___aldiv@dividend 0011                        _T2HLTbits 0FBE                    _RxBufWriteCnt 0059  
       __end_of_getCharFromTxBuf 2E50                          main@buf 0062                          _sprintf 2DBC  
                        main@red 008E             ??_I2C_2_Master_Start 0006             ??_I2C_2_Master_Write 0006  
          color_normalise@RGBC_n 0027             end_of_initialization 2F0C                __end_of_sendTxBuf 2FE2  
               ADC_getval@tmpval 0005                reverseOneSquare@i 001F                          fputc@fp 0007  
                  __Lmediumconst 0000                ?_color_click_init 0001               ??_color_click_init 0009  
              __end_of_vfpfcnvrt 1DD2                 ___aldiv@quotient 001B       batteryLevel@batteryQuarter 000E  
                        postdec1 0FE5                          postdec2 0FDD                          postinc0 0FEE  
                        postinc1 0FE6                          postinc2 0FDE                 vfpfcnvrt@convarg 0015  
     batteryLevel@batteryVoltage 000D                       main@F14580 013C                       ??_vfprintf 001D  
                _initDCmotorsPWM 2A82                       ??_turnLeft 001C                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0016            ??i2_I2C_2_Master_Idle 0001                    move@turnSpeed 0029  
              __end_of_turnRight 214C            ??i2_I2C_2_Master_Stop 0002                       main@RGBC_n 00C1  
                   _color_detect 30A0                        _TRISAbits 0F81               setMotorPWM@posDuty 0015  
                      _TRISBbits 0F82                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 white_Light@state 0005                     ??_Buggy_init 0005  
               fullSpeedAhead@mL 0017                 fullSpeedAhead@mR 0018                      ?_color_read 0009  
       color_writetoaddr@address 0008          ??_I2C_2_Master_RepStart 0006         __end_of_reverseOneSquare 1F96  
               ?_Interrupts_init 0001                    stop@cur_power 001F                      _CCP1CONbits 0FAB  
         color_calibration@green 002D                     _EUSART4RXbuf 003D                     _EUSART4TXbuf 0100  
                    _CCP2CONbits 0FA7           color_calibration@white 0033                      _CCP3CONbits 0F26  
                    ?_initUSART4 0001                       main@orange 00AC                      _CCP4CONbits 0F22  
                     main@motorL 00D3                       main@motorR 00C9                       main@yellow 00A0  
                 color_read@RGBC 0009                   _fullSpeedAhead 2792                   __end_of___lmul 2BF0  
           turnLeft@turnDuration 001A                      vfpfcnvrt@ap 0011                      vfpfcnvrt@cp 0014  
                    vfpfcnvrt@fp 000F                   __end_of___wmul 2F40               __end_of_Buggy_init 2DBC  
            start_initialization 2EF4                      __end_of_abs 2E24                    _TxBufWriteCnt 0057  
        __end_of_initDCmotorsPWM 2B12                      vfprintf@fmt 001B           __end_of_fullSpeedAhead 2864  
             turnRight@cur_power 0021                         ??___lmul 000D                         ??___wmul 0009  
                 _putCharToRxBuf 2F40                   _putCharToTxBuf 2E7A              color_normalise@RGBC 001F  
  i2I2C_2_Master_Write@data_byte 0002     reverseOneSquare@straightRamp 001B     __end_ofi2_I2C_2_Master_Start 30A0  
   __end_ofi2_I2C_2_Master_Write 306E                turnLeft@cur_power 0021                      __pbssCOMRAM 003D  
                  __pcstackBANK0 0060                         ?_HighISR 0001                 stop@straightRamp 0019  
               ___lwdiv@dividend 000B           __end_of_putCharToRxBuf 2F66           __end_of_putCharToTxBuf 2EA4  
                ?_fullSpeedAhead 0017                        __pintcode 0008                         ?___aldiv 0011  
             turnRight@turnSpeed 0019                         ?___awdiv 0005                         ?___awmod 0005  
                       ?___lwdiv 000B           TxBufferedString@string 0006             I2C_2_Master_Read@ack 0007  
           I2C_2_Master_Read@tmp 0008                      __smallconst 0E00                _I2C_2_Master_Idle 2EA4  
              _I2C_2_Master_Init 2E50                _I2C_2_Master_Read 2D06                turnLeft@turnSpeed 0019  
              _I2C_2_Master_Stop 306E                     _RxBufReadCnt 0058                         _ADC_init 2FE2  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0013               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000F  
       initDCmotorsPWM@PWMperiod 0005                         ?_sprintf 001E                ?_getCharFromTxBuf 0001  
             ??_getCharFromTxBuf 0001                move@straightSpeed 0026                  ___aldiv@divisor 0015  
            ??_I2C_2_Master_Idle 0005                  ___aldiv@counter 0019              ??_I2C_2_Master_Init 0005  
            ??_I2C_2_Master_Read 0006                   ___wmul@product 0009                         _LATAbits 0F79  
            ??_I2C_2_Master_Stop 0006                         _LATCbits 0F7B                    _isDataInTxBuf 2FFC  
                       _LATDbits 0F7C                         _LATEbits 0F7D                         _LATFbits 0F7E  
               _TxBufferedString 2C56                         _LATGbits 0F7F                         _LATHbits 0F80  
                      _sendTxBuf 2FC8                         _IPR0bits 0E1F                         _PIE0bits 0E29  
                       _PIE4bits 0E2D                         i2u101_40 2F52                         i2u101_41 2F4E  
                       i2u103_40 3040                         i2u103_41 303A                         i2u104_40 3042  
                    turnRight@mL 0017                      turnRight@mR 0018                         i2u224_40 2E34  
                       i2u224_41 2E30                         i2u233_40 0022                         i2u233_41 001E  
                       i2u234_40 004A                         i2u234_41 0046                         i2u235_40 0060  
                       i2u235_41 005C                         i2u236_40 007C                         i2u236_41 0078  
                       i2u191_40 2EDC                         i2u191_41 2ED8                         _PIR0bits 0E33  
                       i2u192_40 2EF2                         i2u192_41 2EEE                         _PIR4bits 0E37  
                ?_putCharToRxBuf 0001                 ?_initDCmotorsPWM 0005                  ?_putCharToTxBuf 0001  
    fullSpeedAhead@straightSpeed 0019                         _SSP2CON2 0EDA                         _SSP2STAT 0ED8  
                   move@turnRamp 002B                        _vfpfcnvrt 1C0E                       _ADCON0bits 0F60  
      __end_of_I2C_2_Master_Idle 2ECC            color_calibration@RGBC 002A        __end_of_I2C_2_Master_Init 2E7A  
      __end_of_I2C_2_Master_Read 2D48                ___wmul@multiplier 0005        __end_of_I2C_2_Master_Stop 3078  
                   setMotorPWM@m 0012      I2C_2_Master_Write@data_byte 0006            color_calibration@blue 002E  
                      main@color 00BF            color_calibration@pink 0030                        main@green 0094  
                      main@white 00B8                     _TxBufReadCnt 0056                        _turnRight 1F96  
                     vfpfcnvrt@c 0019                     ??_color_read 000A                ___lmul@multiplier 0005  
                 ?_isDataInTxBuf 0001    __end_of_I2C_2_Master_RepStart 308C                ?_reverseOneSquare 0017  
            __end_of_setMotorPWM 2456                       ?_sendTxBuf 0001                     ??_initUSART4 0005  
           i2_I2C_2_Master_Start 3096  reverseOneSquare@reverseDuration 001A             i2_I2C_2_Master_Write 3062  
             ??_reverseOneSquare 001C                         __Hrparam 0000                ??_color_normalise 0028  
                     _ADC_getval 3014                       vfprintf@ap 001C                         __Lrparam 0000  
                     vfprintf@fp 001A                    ??_white_Light 0005      __end_ofi2_I2C_2_Master_Idle 2EF4  
    __end_ofi2_I2C_2_Master_Stop 3096                       ?_vfpfcnvrt 000F               __end_of_color_read 1C0E  
                     _ANSELBbits 0E9A                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                     sprintf@fmt 001F                _color_calibration 0E6C    reverseOneSquare@straightSpeed 0019  
                ___lwdiv@divisor 000D               __end_of_initUSART4 2FC8                  ___lwdiv@counter 0011  
              turnRight@turnRamp 001B                       ?_turnRight 0017                         __ptext10 2FFC  
                       __ptext11 1368                         __ptext20 2A82                         __ptext12 1F96  
                       __ptext21 30A0                         __ptext13 214C                         __ptext30 3078  
                       __ptext22 2BF0                         __ptext14 1DD2                         __ptext31 3082  
                       __ptext23 2F8A                         __ptext15 2792                         __ptext40 3014  
                       __ptext32 2D06                         __ptext24 2E50                         __ptext16 2302  
                       __ptext41 2C56                         __ptext33 2EA4                         __ptext25 0E6C  
                       __ptext17 2F1A                         __ptext50 2ECC                         __ptext42 2E7A  
                       __ptext34 2456                         __ptext26 2F66                         __ptext18 2B12  
                       __ptext51 2F40                         __ptext43 3044                         __ptext35 2B86  
                       __ptext27 1A38                         __ptext19 2FAA                         __ptext52 2E24  
                       __ptext44 2D86                         __ptext36 2598                         __ptext28 3056  
                       __ptext37 2CB8                         __ptext29 306E                         __ptext46 302C  
                       __ptext38 2864                         __ptext47 3062                         __ptext39 2FE2  
                       __ptext48 308C                         __ptext49 3096                        move@color 0025  
             ?_color_calibration 002A                    ?_batteryLevel 0001                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                 turnLeft@turnRamp 001B                       turnLeft@mL 0017  
                     turnLeft@mR 0018              ??_color_calibration 0034            ?i2_I2C_2_Master_Start 0001  
               move@straightRamp 0028            ?i2_I2C_2_Master_Write 0001                       turnRight@i 001F  
                       isa$xinst 0000                       _RC4STAbits 0EE7                         main@RGBC 00DD  
                       int$flags 005A                         _vfprintf 2D48                         main@blue 009A  
           color_calibration@red 002C                         main@pink 00A6                         _turnLeft 214C  
        fullSpeedAhead@cur_power 0020              __end_of_white_Light 2F8A        __end_of_color_calibration 1368  
                     _INTCONbits 0FF2                ??i2_isDataInTxBuf 0001        reverseOneSquare@cur_power 0021  
             reverseOneSquare@mL 0017               reverseOneSquare@mR 0018                 move@turnDuration 002A  
                 ??_batteryLevel 000D                      _setMotorPWM 2302                  ??_isDataInTxBuf 0005  
                       intlevel2 0000                        sprintf@ap 0030                 ??_fullSpeedAhead 001B  
                    ??_sendTxBuf 0005                        turnLeft@i 001F                      ?_ADC_getval 0001  
              main@straightSpeed 00BE                      ??_vfpfcnvrt 0012                 _color_click_init 2BF0  
       __end_of_TxBufferedString 2CB8                         sprintf@f 0031                         sprintf@s 001E  
                     _SSP2DATPPS 0E1D                       _SSP2CLKPPS 0E1C                     ___aldiv@sign 001A  
                    ??_turnRight 001C                 main@straightRamp 00C0                       _TX4STAbits 0EE8  
         ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002                 ??_putCharToRxBuf 0001  
               ??_putCharToTxBuf 0005  
