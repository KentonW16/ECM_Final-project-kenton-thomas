

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 22:10:49 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 21/07/2023 GMT
    71                           ; 
    72                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F67K40 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     _TRISCbits	set	3971
   105   000000                     _RC4STAbits	set	3815
   106   000000                     _SP4BRGH	set	3814
   107   000000                     _SP4BRGL	set	3813
   108   000000                     _TX4STAbits	set	3816
   109   000000                     _BAUD4CONbits	set	3817
   110   000000                     _TX4REG	set	3812
   111   000000                     _TRISBbits	set	3970
   112   000000                     _TRISAbits	set	3969
   113   000000                     _TRISEbits	set	3973
   114   000000                     _TRISGbits	set	3975
   115   000000                     _LATFbits	set	3966
   116   000000                     _TRISFbits	set	3974
   117   000000                     _TRISHbits	set	3976
   118   000000                     _TRISDbits	set	3972
   119   000000                     _LATEbits	set	3965
   120   000000                     _LATGbits	set	3967
   121   000000                     _LATHbits	set	3968
   122   000000                     _SSP2CON2bits	set	3802
   123   000000                     _RX4PPS	set	3605
   124   000000                     _SSP2CLKPPS	set	3612
   125   000000                     _SSP2DATPPS	set	3613
   126   000000                     _ANSELDbits	set	3751
   127   000000                     _SSP2ADD	set	3798
   128   000000                     _SSP2CON1bits	set	3801
   129   000000                     _CCPR4H	set	3873
   130   000000                     _CCPR3H	set	3877
   131   000000                     _CCPR2H	set	4006
   132   000000                     _CCPR1H	set	4010
   133   000000                     _CCP1CONbits	set	4011
   134   000000                     _CCPTMRS0bits	set	4013
   135   000000                     _T2PR	set	4028
   136   000000                     _T2CONbits	set	4029
   137   000000                     _INTCONbits	set	4082
   138   000000                     _CCP2CONbits	set	4007
   139   000000                     _CCP3CONbits	set	3878
   140   000000                     _ADREFbits	set	3928
   141   000000                     _LATAbits	set	3961
   142   000000                     _LATDbits	set	3964
   143   000000                     _PORTFbits	set	3982
   144   000000                     _CCP4CONbits	set	3874
   145   000000                     _LATCbits	set	3963
   146   000000                     _RC4REG	set	3811
   147   000000                     _SSP2CON2	set	3802
   148   000000                     _SSP2STAT	set	3800
   149   000000                     _ANSELFbits	set	3764
   150   000000                     _SSP2BUF	set	3797
   151   000000                     _IPR0bits	set	3615
   152   000000                     _PIE0bits	set	3625
   153   000000                     _RD5PPS	set	3695
   154   000000                     _RE2PPS	set	3700
   155   000000                     _ANSELBbits	set	3738
   156   000000                     _RD6PPS	set	3696
   157   000000                     _PIE4bits	set	3629
   158   000000                     _PIR0bits	set	3635
   159   000000                     _PIR4bits	set	3639
   160   000000                     _RC0PPS	set	3682
   161   000000                     _RC7PPS	set	3689
   162   000000                     _ADPCH	set	3935
   163   000000                     _ADRESH	set	3940
   164   000000                     _ADCON0bits	set	3936
   165   000000                     _RE4PPS	set	3702
   166   000000                     _RG6PPS	set	3720
   167   000000                     _T2CLKCONbits	set	4031
   168   000000                     _T2HLTbits	set	4030
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01                     STR_1:
   175   000E01  72                 	db	114	;'r'
   176   000E02  3D                 	db	61	;'='
   177   000E03  25                 	db	37
   178   000E04  64                 	db	100	;'d'
   179   000E05  20                 	db	32
   180   000E06  67                 	db	103	;'g'
   181   000E07  3D                 	db	61	;'='
   182   000E08  25                 	db	37
   183   000E09  64                 	db	100	;'d'
   184   000E0A  20                 	db	32
   185   000E0B  62                 	db	98	;'b'
   186   000E0C  3D                 	db	61	;'='
   187   000E0D  25                 	db	37
   188   000E0E  64                 	db	100	;'d'
   189   000E0F  20                 	db	32
   190   000E10  63                 	db	99	;'c'
   191   000E11  3D                 	db	61	;'='
   192   000E12  25                 	db	37
   193   000E13  64                 	db	100	;'d'
   194   000E14  20                 	db	32
   195   000E15  20                 	db	32
   196   000E16  20                 	db	32
   197   000E17  6E                 	db	110	;'n'
   198   000E18  3A                 	db	58	;':'
   199   000E19  20                 	db	32
   200   000E1A  72                 	db	114	;'r'
   201   000E1B  3D                 	db	61	;'='
   202   000E1C  25                 	db	37
   203   000E1D  64                 	db	100	;'d'
   204   000E1E  20                 	db	32
   205   000E1F  67                 	db	103	;'g'
   206   000E20  3D                 	db	61	;'='
   207   000E21  25                 	db	37
   208   000E22  64                 	db	100	;'d'
   209   000E23  20                 	db	32
   210   000E24  62                 	db	98	;'b'
   211   000E25  3D                 	db	61	;'='
   212   000E26  25                 	db	37
   213   000E27  64                 	db	100	;'d'
   214   000E28  20                 	db	32
   215   000E29  20                 	db	32
   216   000E2A  63                 	db	99	;'c'
   217   000E2B  6F                 	db	111	;'o'
   218   000E2C  6C                 	db	108	;'l'
   219   000E2D  6F                 	db	111	;'o'
   220   000E2E  72                 	db	114	;'r'
   221   000E2F  3A                 	db	58	;':'
   222   000E30  20                 	db	32
   223   000E31  25                 	db	37
   224   000E32  64                 	db	100	;'d'
   225   000E33  20                 	db	32
   226   000E34  0D                 	db	13
   227   000E35  0A                 	db	10
   228   000E36  00                 	db	0
   229   000E37                     STR_3:
   230   000E37  72                 	db	114	;'r'
   231   000E38  3D                 	db	61	;'='
   232   000E39  25                 	db	37
   233   000E3A  64                 	db	100	;'d'
   234   000E3B  20                 	db	32
   235   000E3C  67                 	db	103	;'g'
   236   000E3D  3D                 	db	61	;'='
   237   000E3E  25                 	db	37
   238   000E3F  64                 	db	100	;'d'
   239   000E40  20                 	db	32
   240   000E41  62                 	db	98	;'b'
   241   000E42  3D                 	db	61	;'='
   242   000E43  25                 	db	37
   243   000E44  64                 	db	100	;'d'
   244   000E45  20                 	db	32
   245   000E46  63                 	db	99	;'c'
   246   000E47  3D                 	db	61	;'='
   247   000E48  25                 	db	37
   248   000E49  64                 	db	100	;'d'
   249   000E4A  20                 	db	32
   250   000E4B  20                 	db	32
   251   000E4C  20                 	db	32
   252   000E4D  6E                 	db	110	;'n'
   253   000E4E  3A                 	db	58	;':'
   254   000E4F  20                 	db	32
   255   000E50  72                 	db	114	;'r'
   256   000E51  3D                 	db	61	;'='
   257   000E52  25                 	db	37
   258   000E53  64                 	db	100	;'d'
   259   000E54  20                 	db	32
   260   000E55  67                 	db	103	;'g'
   261   000E56  3D                 	db	61	;'='
   262   000E57  25                 	db	37
   263   000E58  64                 	db	100	;'d'
   264   000E59  20                 	db	32
   265   000E5A  62                 	db	98	;'b'
   266   000E5B  3D                 	db	61	;'='
   267   000E5C  25                 	db	37
   268   000E5D  64                 	db	100	;'d'
   269   000E5E  20                 	db	32
   270   000E5F  0D                 	db	13
   271   000E60  0A                 	db	10
   272   000E61  00                 	db	0
   273   000E62  00                 	db	0	; dummy byte at the end
   274   000000                     
   275                           ; #config settings
   276                           
   277                           	psect	cinit
   278   002AC4                     __pcinit:
   279                           	callstack 0
   280   002AC4                     start_initialization:
   281                           	callstack 0
   282   002AC4                     __initialization:
   283                           	callstack 0
   284                           
   285                           ; Clear objects allocated to BANK1 (60 bytes)
   286   002AC4  EE01  F000         	lfsr	0,__pbssBANK1
   287   002AC8  0E3C               	movlw	60
   288   002ACA                     clear_0:
   289   002ACA  6AEE               	clrf	postinc0,c
   290   002ACC  06E8               	decf	wreg,f,c
   291   002ACE  E1FD               	bnz	clear_0
   292                           
   293                           ; Clear objects allocated to BANK0 (72 bytes)
   294   002AD0  EE00  F0B7         	lfsr	0,__pbssBANK0
   295   002AD4  0E48               	movlw	72
   296   002AD6                     clear_1:
   297   002AD6  6AEE               	clrf	postinc0,c
   298   002AD8  06E8               	decf	wreg,f,c
   299   002ADA  E1FD               	bnz	clear_1
   300                           
   301                           ; Clear objects allocated to COMRAM (29 bytes)
   302   002ADC  EE00  F03D         	lfsr	0,__pbssCOMRAM
   303   002AE0  0E1D               	movlw	29
   304   002AE2                     clear_2:
   305   002AE2  6AEE               	clrf	postinc0,c
   306   002AE4  06E8               	decf	wreg,f,c
   307   002AE6  E1FD               	bnz	clear_2
   308   002AE8                     end_of_initialization:
   309                           	callstack 0
   310   002AE8                     __end_of__initialization:
   311                           	callstack 0
   312   002AE8  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   313   002AEA  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   314   002AEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   315   002AEE  6EF8               	movwf	tblptru,c
   316   002AF0  0100               	movlb	0
   317   002AF2  EFEF  F008         	goto	_main	;jump to C main() function
   318                           
   319                           	psect	bssCOMRAM
   320   00003D                     __pbssCOMRAM:
   321                           	callstack 0
   322   00003D                     _EUSART4RXbuf:
   323                           	callstack 0
   324   00003D                     	ds	20
   325   000051                     _width:
   326                           	callstack 0
   327   000051                     	ds	2
   328   000053                     _prec:
   329                           	callstack 0
   330   000053                     	ds	2
   331   000055                     _flags:
   332                           	callstack 0
   333   000055                     	ds	1
   334   000056                     _TxBufReadCnt:
   335                           	callstack 0
   336   000056                     	ds	1
   337   000057                     _TxBufWriteCnt:
   338                           	callstack 0
   339   000057                     	ds	1
   340   000058                     _RxBufReadCnt:
   341                           	callstack 0
   342   000058                     	ds	1
   343   000059                     _RxBufWriteCnt:
   344                           	callstack 0
   345   000059                     	ds	1
   346                           
   347                           	psect	bssBANK0
   348   0000B7                     __pbssBANK0:
   349                           	callstack 0
   350   0000B7                     	ds	40
   351   0000DF                     _dbuf:
   352                           	callstack 0
   353   0000DF                     	ds	32
   354                           
   355                           	psect	bssBANK1
   356   000100                     __pbssBANK1:
   357                           	callstack 0
   358   000100                     _EUSART4TXbuf:
   359                           	callstack 0
   360   000100                     	ds	60
   361                           
   362                           	psect	cstackBANK0
   363   000060                     __pcstackBANK0:
   364                           	callstack 0
   365   000060                     ??_main:
   366                           
   367                           ; 1 bytes @ 0x0
   368   000060                     	ds	2
   369   000062                     main@buf:
   370                           	callstack 0
   371                           
   372                           ; 40 bytes @ 0x2
   373   000062                     	ds	40
   374   00008A                     main@reverseDuration:
   375                           	callstack 0
   376                           
   377                           ; 1 bytes @ 0x2A
   378   00008A                     	ds	1
   379   00008B                     main@ambient:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x2B
   383   00008B                     	ds	2
   384   00008D                     main@straightSpeed:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x2D
   388   00008D                     	ds	1
   389   00008E                     main@turnSpeed:
   390                           	callstack 0
   391                           
   392                           ; 1 bytes @ 0x2E
   393   00008E                     	ds	1
   394   00008F                     main@turnRamp:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x2F
   398   00008F                     	ds	1
   399   000090                     main@color:
   400                           	callstack 0
   401                           
   402                           ; 1 bytes @ 0x30
   403   000090                     	ds	1
   404   000091                     main@straightRamp:
   405                           	callstack 0
   406                           
   407                           ; 1 bytes @ 0x31
   408   000091                     	ds	1
   409   000092                     main@turnDuration:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x32
   413   000092                     	ds	1
   414   000093                     main@RGBC_n:
   415                           	callstack 0
   416                           
   417                           ; 8 bytes @ 0x33
   418   000093                     	ds	8
   419   00009B                     main@RGBC:
   420                           	callstack 0
   421                           
   422                           ; 8 bytes @ 0x3B
   423   00009B                     	ds	8
   424   0000A3                     main@motorR:
   425                           	callstack 0
   426                           
   427                           ; 10 bytes @ 0x43
   428   0000A3                     	ds	10
   429   0000AD                     main@motorL:
   430                           	callstack 0
   431                           
   432                           ; 10 bytes @ 0x4D
   433   0000AD                     	ds	10
   434                           
   435                           	psect	cstackCOMRAM
   436   000001                     __pcstackCOMRAM:
   437                           	callstack 0
   438   000001                     ??_getCharFromTxBuf:
   439   000001                     ??i2_I2C_2_Master_Idle:
   440   000001                     putCharToRxBuf@byte:
   441                           	callstack 0
   442   000001                     
   443                           ; 1 bytes @ 0x0
   444   000001                     	ds	1
   445   000002                     i2I2C_2_Master_Write@data_byte:
   446                           	callstack 0
   447                           
   448                           ; 1 bytes @ 0x1
   449   000002                     	ds	1
   450   000003                     ??_HighISR:
   451                           
   452                           ; 1 bytes @ 0x2
   453   000003                     	ds	2
   454   000005                     ??_I2C_2_Master_Idle:
   455   000005                     ?___wmul:
   456                           	callstack 0
   457   000005                     ?___awdiv:
   458                           	callstack 0
   459   000005                     ?___awmod:
   460                           	callstack 0
   461   000005                     ?___lmul:
   462                           	callstack 0
   463   000005                     white_Light@state:
   464                           	callstack 0
   465   000005                     putCharToTxBuf@byte:
   466                           	callstack 0
   467   000005                     ADC_getval@tmpval:
   468                           	callstack 0
   469   000005                     initDCmotorsPWM@PWMperiod:
   470                           	callstack 0
   471   000005                     ___wmul@multiplier:
   472                           	callstack 0
   473   000005                     ___awdiv@dividend:
   474                           	callstack 0
   475   000005                     ___awmod@dividend:
   476                           	callstack 0
   477   000005                     fputc@c:
   478                           	callstack 0
   479   000005                     ___lmul@multiplier:
   480                           	callstack 0
   481   000005                     color_detect@RGBC_n:
   482                           	callstack 0
   483                           
   484                           ; 8 bytes @ 0x4
   485   000005                     	ds	1
   486   000006                     ??_I2C_2_Master_Read:
   487   000006                     I2C_2_Master_Write@data_byte:
   488                           	callstack 0
   489   000006                     TxBufferedString@string:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x5
   493   000006                     	ds	1
   494   000007                     color_writetoaddr@value:
   495                           	callstack 0
   496   000007                     I2C_2_Master_Read@ack:
   497                           	callstack 0
   498   000007                     fputc@fp:
   499                           	callstack 0
   500   000007                     ___wmul@multiplicand:
   501                           	callstack 0
   502   000007                     ___awdiv@divisor:
   503                           	callstack 0
   504   000007                     ___awmod@divisor:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x6
   508   000007                     	ds	1
   509   000008                     ??_fputc:
   510   000008                     color_writetoaddr@address:
   511                           	callstack 0
   512   000008                     I2C_2_Master_Read@tmp:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x7
   516   000008                     	ds	1
   517   000009                     ??_color_click_init:
   518   000009                     color_read@RGBC:
   519                           	callstack 0
   520   000009                     ___awdiv@counter:
   521                           	callstack 0
   522   000009                     ___awmod@counter:
   523                           	callstack 0
   524   000009                     ___wmul@product:
   525                           	callstack 0
   526   000009                     ___lmul@multiplicand:
   527                           	callstack 0
   528                           
   529                           ; 4 bytes @ 0x8
   530   000009                     	ds	1
   531   00000A                     ??_color_read:
   532   00000A                     ___awdiv@sign:
   533                           	callstack 0
   534   00000A                     ___awmod@sign:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x9
   538   00000A                     	ds	1
   539   00000B                     ?_abs:
   540                           	callstack 0
   541   00000B                     ?___lwdiv:
   542                           	callstack 0
   543   00000B                     ___awdiv@quotient:
   544                           	callstack 0
   545   00000B                     ___lwdiv@dividend:
   546                           	callstack 0
   547   00000B                     abs@a:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0xA
   551   00000B                     	ds	2
   552   00000D                     ??_abs:
   553   00000D                     color_detect@color:
   554                           	callstack 0
   555   00000D                     batteryLevel@batteryVoltage:
   556                           	callstack 0
   557   00000D                     ___lwdiv@divisor:
   558                           	callstack 0
   559   00000D                     ___lmul@product:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0xC
   563   00000D                     	ds	1
   564   00000E                     batteryLevel@batteryQuarter:
   565                           	callstack 0
   566                           
   567                           ; 1 bytes @ 0xD
   568   00000E                     	ds	1
   569   00000F                     vfpfcnvrt@fp:
   570                           	callstack 0
   571   00000F                     ___lwdiv@quotient:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0xE
   575   00000F                     	ds	1
   576   000010                     vfpfcnvrt@fmt:
   577                           	callstack 0
   578                           
   579                           ; 1 bytes @ 0xF
   580   000010                     	ds	1
   581   000011                     ?___aldiv:
   582                           	callstack 0
   583   000011                     ___lwdiv@counter:
   584                           	callstack 0
   585   000011                     vfpfcnvrt@ap:
   586                           	callstack 0
   587   000011                     ___aldiv@dividend:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x10
   591   000011                     	ds	1
   592   000012                     ??_vfpfcnvrt:
   593   000012                     setMotorPWM@m:
   594                           	callstack 0
   595                           
   596                           ; 1 bytes @ 0x11
   597   000012                     	ds	1
   598   000013                     ??_setMotorPWM:
   599   000013                     vfpfcnvrt@done:
   600                           	callstack 0
   601                           
   602                           ; 1 bytes @ 0x12
   603   000013                     	ds	1
   604   000014                     vfpfcnvrt@cp:
   605                           	callstack 0
   606                           
   607                           ; 1 bytes @ 0x13
   608   000014                     	ds	1
   609   000015                     setMotorPWM@posDuty:
   610                           	callstack 0
   611   000015                     ___aldiv@divisor:
   612                           	callstack 0
   613   000015                     vfpfcnvrt@convarg:
   614                           	callstack 0
   615                           
   616                           ; 4 bytes @ 0x14
   617   000015                     	ds	1
   618   000016                     setMotorPWM@negDuty:
   619                           	callstack 0
   620                           
   621                           ; 1 bytes @ 0x15
   622   000016                     	ds	1
   623   000017                     stop@mL:
   624                           	callstack 0
   625   000017                     turnLeft@mL:
   626                           	callstack 0
   627   000017                     turnRight@mL:
   628                           	callstack 0
   629   000017                     fullSpeedAhead@mL:
   630                           	callstack 0
   631   000017                     reverseOneSquare@mL:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x16
   635   000017                     	ds	1
   636   000018                     stop@mR:
   637                           	callstack 0
   638   000018                     turnLeft@mR:
   639                           	callstack 0
   640   000018                     turnRight@mR:
   641                           	callstack 0
   642   000018                     fullSpeedAhead@mR:
   643                           	callstack 0
   644   000018                     reverseOneSquare@mR:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0x17
   648   000018                     	ds	1
   649   000019                     stop@straightRamp:
   650                           	callstack 0
   651   000019                     turnLeft@turnSpeed:
   652                           	callstack 0
   653   000019                     turnRight@turnSpeed:
   654                           	callstack 0
   655   000019                     fullSpeedAhead@straightSpeed:
   656                           	callstack 0
   657   000019                     reverseOneSquare@straightSpeed:
   658                           	callstack 0
   659   000019                     ___aldiv@counter:
   660                           	callstack 0
   661   000019                     vfpfcnvrt@c:
   662                           	callstack 0
   663                           
   664                           ; 1 bytes @ 0x18
   665   000019                     	ds	1
   666   00001A                     ??_stop:
   667   00001A                     ?_vfprintf:
   668                           	callstack 0
   669   00001A                     turnLeft@turnDuration:
   670                           	callstack 0
   671   00001A                     turnRight@turnDuration:
   672                           	callstack 0
   673   00001A                     fullSpeedAhead@straightRamp:
   674                           	callstack 0
   675   00001A                     reverseOneSquare@reverseDuration:
   676                           	callstack 0
   677   00001A                     ___aldiv@sign:
   678                           	callstack 0
   679   00001A                     vfprintf@fp:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0x19
   683   00001A                     	ds	1
   684   00001B                     ??_fullSpeedAhead:
   685   00001B                     turnLeft@turnRamp:
   686                           	callstack 0
   687   00001B                     turnRight@turnRamp:
   688                           	callstack 0
   689   00001B                     reverseOneSquare@straightRamp:
   690                           	callstack 0
   691   00001B                     vfprintf@fmt:
   692                           	callstack 0
   693   00001B                     ___aldiv@quotient:
   694                           	callstack 0
   695                           
   696                           ; 4 bytes @ 0x1A
   697   00001B                     	ds	1
   698   00001C                     ??_turnRight:
   699   00001C                     ??_turnLeft:
   700   00001C                     ??_reverseOneSquare:
   701   00001C                     vfprintf@ap:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x1B
   705   00001C                     	ds	1
   706   00001D                     vfprintf@cfmt:
   707                           	callstack 0
   708   00001D                     stop@i:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x1C
   712   00001D                     	ds	1
   713   00001E                     ?_sprintf:
   714                           	callstack 0
   715   00001E                     sprintf@s:
   716                           	callstack 0
   717   00001E                     fullSpeedAhead@i:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x1D
   721   00001E                     	ds	1
   722   00001F                     sprintf@fmt:
   723                           	callstack 0
   724   00001F                     stop@cur_power:
   725                           	callstack 0
   726   00001F                     turnLeft@i:
   727                           	callstack 0
   728   00001F                     turnRight@i:
   729                           	callstack 0
   730   00001F                     reverseOneSquare@i:
   731                           	callstack 0
   732   00001F                     color_normalise@RGBC:
   733                           	callstack 0
   734                           
   735                           ; 8 bytes @ 0x1E
   736   00001F                     	ds	1
   737   000020                     fullSpeedAhead@cur_power:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x1F
   741   000020                     	ds	1
   742   000021                     turnLeft@cur_power:
   743                           	callstack 0
   744   000021                     turnRight@cur_power:
   745                           	callstack 0
   746   000021                     reverseOneSquare@cur_power:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x20
   750   000021                     	ds	2
   751   000023                     move@mL:
   752                           	callstack 0
   753   000023                     calibration@mL:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x22
   757   000023                     	ds	1
   758   000024                     move@mR:
   759                           	callstack 0
   760   000024                     calibration@mR:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x23
   764   000024                     	ds	1
   765   000025                     move@color:
   766                           	callstack 0
   767   000025                     calibration@turnSpeed:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x24
   771   000025                     	ds	1
   772   000026                     move@straightSpeed:
   773                           	callstack 0
   774   000026                     calibration@turnDuration:
   775                           	callstack 0
   776                           
   777                           ; 1 bytes @ 0x25
   778   000026                     	ds	1
   779   000027                     color_normalise@RGBC_n:
   780                           	callstack 0
   781   000027                     move@reverseDuration:
   782                           	callstack 0
   783   000027                     calibration@turnRamp:
   784                           	callstack 0
   785                           
   786                           ; 1 bytes @ 0x26
   787   000027                     	ds	1
   788   000028                     ??_calibration:
   789   000028                     ??_color_normalise:
   790   000028                     move@straightRamp:
   791                           	callstack 0
   792                           
   793                           ; 1 bytes @ 0x27
   794   000028                     	ds	1
   795   000029                     move@turnSpeed:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x28
   799   000029                     	ds	1
   800   00002A                     move@turnDuration:
   801                           	callstack 0
   802                           
   803                           ; 1 bytes @ 0x29
   804   00002A                     	ds	1
   805   00002B                     move@turnRamp:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x2A
   809   00002B                     	ds	1
   810   00002C                     ??_move:
   811                           
   812                           ; 1 bytes @ 0x2B
   813   00002C                     	ds	4
   814   000030                     sprintf@ap:
   815                           	callstack 0
   816                           
   817                           ; 1 bytes @ 0x2F
   818   000030                     	ds	1
   819   000031                     sprintf@f:
   820                           	callstack 0
   821                           
   822                           ; 12 bytes @ 0x30
   823   000031                     	ds	12
   824                           
   825 ;;
   826 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   827 ;;
   828 ;; *************** function _main *****************
   829 ;; Defined at:
   830 ;;		line 23 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  buf            40    2[BANK0 ] unsigned char [40]
   835 ;;  motorL         10   77[BANK0 ] struct DC_motor
   836 ;;  motorR         10   67[BANK0 ] struct DC_motor
   837 ;;  RGBC            8   59[BANK0 ] struct RGBC_val
   838 ;;  RGBC_n          8   51[BANK0 ] struct RGBC_val
   839 ;;  PWMcycle        2    0        unsigned int 
   840 ;;  ambient         2   43[BANK0 ] unsigned int 
   841 ;;  turnDuration    1   50[BANK0 ] unsigned char 
   842 ;;  straightRamp    1   49[BANK0 ] unsigned char 
   843 ;;  color           1   48[BANK0 ] unsigned char 
   844 ;;  turnRamp        1   47[BANK0 ] unsigned char 
   845 ;;  turnSpeed       1   46[BANK0 ] unsigned char 
   846 ;;  straightSpee    1   45[BANK0 ] unsigned char 
   847 ;;  reverseDurat    1   42[BANK0 ] unsigned char 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;Total ram usage:       87 bytes
   862 ;; Hardware stack levels required when called: 8
   863 ;; This function calls:
   864 ;;		_Buggy_init
   865 ;;		_Interrupts_init
   866 ;;		_TxBufferedString
   867 ;;		_batteryLevel
   868 ;;		_calibration
   869 ;;		_color_click_init
   870 ;;		_color_detect
   871 ;;		_color_normalise
   872 ;;		_color_read
   873 ;;		_fullSpeedAhead
   874 ;;		_initDCmotorsPWM
   875 ;;		_initUSART4
   876 ;;		_move
   877 ;;		_sendTxBuf
   878 ;;		_sprintf
   879 ;;		_stop
   880 ;;		_white_Light
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text0
   887   0011DE                     __ptext0:
   888                           	callstack 0
   889   0011DE                     _main:
   890                           	callstack 23
   891   0011DE                     
   892                           ;main.c: 24:     Buggy_init();
   893   0011DE  EC13  F015         	call	_Buggy_init	;wreg free
   894   0011E2                     
   895                           ;main.c: 25:     color_click_init();
   896   0011E2  EC19  F014         	call	_color_click_init	;wreg free
   897   0011E6                     
   898                           ;main.c: 26:     Interrupts_init();
   899   0011E6  EC78  F016         	call	_Interrupts_init	;wreg free
   900   0011EA                     
   901                           ;main.c: 27:     initUSART4();
   902   0011EA  EC2B  F016         	call	_initUSART4	;wreg free
   903   0011EE                     
   904                           ;main.c: 28:     char buf[40] = {0};
   905   0011EE  EE20  F062         	lfsr	2,main@buf
   906   0011F2  0E27               	movlw	39
   907   0011F4                     u2211:
   908   0011F4  6ADE               	clrf	postinc2,c
   909   0011F6  06E8               	decf	wreg,f,c
   910   0011F8  E2FD               	bc	u2211
   911   0011FA                     
   912                           ;main.c: 30:     initDCmotorsPWM(PWMcycle);
   913   0011FA  0E00               	movlw	0
   914   0011FC  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   915   0011FE  0EC7               	movlw	199
   916   001200  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   917   001202  EC62  F013         	call	_initDCmotorsPWM	;wreg free
   918   001206                     
   919                           ;main.c: 31:     struct RGBC_val RGBC, RGBC_n;;main.c: 32:     unsigned char color;;main
      +                          .c: 35:     struct DC_motor motorL, motorR;;main.c: 37:     motorL.power=0;
   920   001206  0E00               	movlw	0
   921   001208  0100               	movlb	0	; () banked
   922   00120A  6FAD               	movwf	main@motorL& (0+255),b
   923   00120C                     
   924                           ; BSR set to: 0
   925                           ;main.c: 38:     motorL.direction=1;
   926   00120C  0E01               	movlw	1
   927   00120E  6FAE               	movwf	(main@motorL+1)& (0+255),b
   928   001210                     
   929                           ; BSR set to: 0
   930                           ;main.c: 39:     motorL.brakemode=1;
   931   001210  0E01               	movlw	1
   932   001212  6FAF               	movwf	(main@motorL+2)& (0+255),b
   933   001214                     
   934                           ; BSR set to: 0
   935                           ;main.c: 40:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   936   001214  0EAA               	movlw	170
   937   001216  6FB2               	movwf	(main@motorL+5)& (0+255),b
   938   001218  0E0F               	movlw	15
   939   00121A  6FB3               	movwf	(main@motorL+6)& (0+255),b
   940   00121C                     
   941                           ; BSR set to: 0
   942                           ;main.c: 41:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   943   00121C  0EA6               	movlw	166
   944   00121E  6FB4               	movwf	(main@motorL+7)& (0+255),b
   945   001220  0E0F               	movlw	15
   946   001222  6FB5               	movwf	(main@motorL+8)& (0+255),b
   947   001224                     
   948                           ; BSR set to: 0
   949                           ;main.c: 42:     motorL.PWMperiod=PWMcycle;
   950   001224  0E00               	movlw	0
   951   001226  6FB1               	movwf	(main@motorL+4)& (0+255),b
   952   001228  0EC7               	movlw	199
   953   00122A  6FB0               	movwf	(main@motorL+3)& (0+255),b
   954   00122C                     
   955                           ; BSR set to: 0
   956                           ;main.c: 43:     motorL.compensation=3;
   957   00122C  0E03               	movlw	3
   958   00122E  6FB6               	movwf	(main@motorL+9)& (0+255),b
   959   001230                     
   960                           ; BSR set to: 0
   961                           ;main.c: 45:     motorR.power=0;
   962   001230  0E00               	movlw	0
   963   001232  6FA3               	movwf	main@motorR& (0+255),b
   964   001234                     
   965                           ; BSR set to: 0
   966                           ;main.c: 46:     motorR.direction=1;
   967   001234  0E01               	movlw	1
   968   001236  6FA4               	movwf	(main@motorR+1)& (0+255),b
   969   001238                     
   970                           ; BSR set to: 0
   971                           ;main.c: 47:     motorR.brakemode=1;
   972   001238  0E01               	movlw	1
   973   00123A  6FA5               	movwf	(main@motorR+2)& (0+255),b
   974   00123C                     
   975                           ; BSR set to: 0
   976                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   977   00123C  0E25               	movlw	37
   978   00123E  6FA8               	movwf	(main@motorR+5)& (0+255),b
   979   001240  0E0F               	movlw	15
   980   001242  6FA9               	movwf	(main@motorR+6)& (0+255),b
   981   001244                     
   982                           ; BSR set to: 0
   983                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   984   001244  0E21               	movlw	33
   985   001246  6FAA               	movwf	(main@motorR+7)& (0+255),b
   986   001248  0E0F               	movlw	15
   987   00124A  6FAB               	movwf	(main@motorR+8)& (0+255),b
   988   00124C                     
   989                           ; BSR set to: 0
   990                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
   991   00124C  0E00               	movlw	0
   992   00124E  6FA7               	movwf	(main@motorR+4)& (0+255),b
   993   001250  0EC7               	movlw	199
   994   001252  6FA6               	movwf	(main@motorR+3)& (0+255),b
   995   001254                     
   996                           ; BSR set to: 0
   997                           ;main.c: 51:     motorR.compensation=0;
   998   001254  0E00               	movlw	0
   999   001256  6FAC               	movwf	(main@motorR+9)& (0+255),b
  1000   001258                     
  1001                           ; BSR set to: 0
  1002                           ;main.c: 54:     char straightSpeed=50;
  1003   001258  0E32               	movlw	50
  1004   00125A  6F8D               	movwf	main@straightSpeed& (0+255),b
  1005   00125C                     
  1006                           ; BSR set to: 0
  1007                           ;main.c: 55:     unsigned char straightRamp=2;
  1008   00125C  0E02               	movlw	2
  1009   00125E  6F91               	movwf	main@straightRamp& (0+255),b
  1010   001260                     
  1011                           ; BSR set to: 0
  1012                           ;main.c: 57:     unsigned char reverseDuration=10;
  1013   001260  0E0A               	movlw	10
  1014   001262  6F8A               	movwf	main@reverseDuration& (0+255),b
  1015   001264                     
  1016                           ; BSR set to: 0
  1017                           ;main.c: 59:     char turnSpeed=21;
  1018   001264  0E15               	movlw	21
  1019   001266  6F8E               	movwf	main@turnSpeed& (0+255),b
  1020   001268                     
  1021                           ; BSR set to: 0
  1022                           ;main.c: 60:     unsigned char turnDuration=10;
  1023   001268  0E0A               	movlw	10
  1024   00126A  6F92               	movwf	main@turnDuration& (0+255),b
  1025   00126C                     
  1026                           ; BSR set to: 0
  1027                           ;main.c: 61:     unsigned char turnRamp=4;
  1028   00126C  0E04               	movlw	4
  1029   00126E  6F8F               	movwf	main@turnRamp& (0+255),b
  1030   001270                     
  1031                           ; BSR set to: 0
  1032                           ;main.c: 64:     batteryLevel();
  1033   001270  ECAC  F014         	call	_batteryLevel	;wreg free
  1034   001274                     l69:
  1035   001274  B48E               	btfsc	142,2,c	;volatile
  1036   001276  EF3F  F009         	goto	u2221
  1037   00127A  EF41  F009         	goto	u2220
  1038   00127E                     u2221:
  1039   00127E  EF3A  F009         	goto	l69
  1040   001282                     u2220:
  1041   001282                     
  1042                           ;main.c: 68:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1043   001282  9680               	bcf	128,3,c	;volatile
  1044   001284  9E7C               	bcf	124,7,c	;volatile
  1045                           
  1046                           ;main.c: 90:     LATHbits.LATH1=LATDbits.LATD3=1;
  1047   001286  867C               	bsf	124,3,c	;volatile
  1048   001288  8280               	bsf	128,1,c	;volatile
  1049   00128A                     
  1050                           ;main.c: 91:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1051   00128A  0E29               	movlw	41
  1052   00128C  0100               	movlb	0	; () banked
  1053   00128E  6F61               	movwf	(??_main+1)& (0+255),b
  1054   001290  0E96               	movlw	150
  1055   001292  6F60               	movwf	??_main& (0+255),b
  1056   001294  0E7F               	movlw	127
  1057   001296                     u2317:
  1058   001296  2EE8               	decfsz	wreg,f,c
  1059   001298  D7FE               	bra	u2317
  1060   00129A  2F60               	decfsz	??_main& (0+255),f,b
  1061   00129C  D7FC               	bra	u2317
  1062   00129E  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1063   0012A0  D7FA               	bra	u2317
  1064   0012A2                     
  1065                           ;main.c: 93:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
  1066   0012A2  0EAD               	movlw	low main@motorL
  1067   0012A4  6E23               	movwf	calibration@mL^0,c
  1068   0012A6  0EA3               	movlw	low main@motorR
  1069   0012A8  6E24               	movwf	calibration@mR^0,c
  1070   0012AA  0E15               	movlw	21
  1071   0012AC  6E25               	movwf	calibration@turnSpeed^0,c
  1072   0012AE  0E92               	movlw	low main@turnDuration
  1073   0012B0  6E26               	movwf	calibration@turnDuration^0,c
  1074   0012B2  0E04               	movlw	4
  1075   0012B4  6E27               	movwf	calibration@turnRamp^0,c
  1076   0012B6  ECEA  F00E         	call	_calibration	;wreg free
  1077   0012BA                     
  1078                           ;main.c: 96:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  1079   0012BA  8680               	bsf	128,3,c	;volatile
  1080   0012BC  8E7C               	bsf	124,7,c	;volatile
  1081   0012BE                     
  1082                           ;main.c: 97:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1083   0012BE  0E29               	movlw	41
  1084   0012C0  0100               	movlb	0	; () banked
  1085   0012C2  6F61               	movwf	(??_main+1)& (0+255),b
  1086   0012C4  0E96               	movlw	150
  1087   0012C6  6F60               	movwf	??_main& (0+255),b
  1088   0012C8  0E7F               	movlw	127
  1089   0012CA                     u2327:
  1090   0012CA  2EE8               	decfsz	wreg,f,c
  1091   0012CC  D7FE               	bra	u2327
  1092   0012CE  2F60               	decfsz	??_main& (0+255),f,b
  1093   0012D0  D7FC               	bra	u2327
  1094   0012D2  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1095   0012D4  D7FA               	bra	u2327
  1096   0012D6                     
  1097                           ;main.c: 98:     unsigned int ambient;;main.c: 99:     color_read(&RGBC);
  1098   0012D6  0E9B               	movlw	low main@RGBC
  1099   0012D8  6E09               	movwf	color_read@RGBC^0,c
  1100   0012DA  EC8B  F00A         	call	_color_read	;wreg free
  1101   0012DE                     
  1102                           ;main.c: 100:     ambient=RGBC.C;
  1103   0012DE  C0A1  F08B         	movff	main@RGBC+6,main@ambient
  1104   0012E2  C0A2  F08C         	movff	main@RGBC+7,main@ambient+1
  1105   0012E6                     
  1106                           ;main.c: 101:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1107   0012E6  9680               	bcf	128,3,c	;volatile
  1108   0012E8  9E7C               	bcf	124,7,c	;volatile
  1109   0012EA                     
  1110                           ;main.c: 104:     white_Light(1);
  1111   0012EA  0E01               	movlw	1
  1112   0012EC  EC09  F016         	call	_white_Light
  1113   0012F0                     
  1114                           ;main.c: 106:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1115   0012F0  0EAD               	movlw	low main@motorL
  1116   0012F2  6E17               	movwf	fullSpeedAhead@mL^0,c
  1117   0012F4  0EA3               	movlw	low main@motorR
  1118   0012F6  6E18               	movwf	fullSpeedAhead@mR^0,c
  1119   0012F8  0E32               	movlw	50
  1120   0012FA  6E19               	movwf	fullSpeedAhead@straightSpeed^0,c
  1121   0012FC  0E02               	movlw	2
  1122   0012FE  6E1A               	movwf	fullSpeedAhead@straightRamp^0,c
  1123   001300  ECEA  F011         	call	_fullSpeedAhead	;wreg free
  1124   001304                     l3291:
  1125                           
  1126                           ;main.c: 109:         color_read(&RGBC);
  1127   001304  0E9B               	movlw	low main@RGBC
  1128   001306  6E09               	movwf	color_read@RGBC^0,c
  1129   001308  EC8B  F00A         	call	_color_read	;wreg free
  1130   00130C                     
  1131                           ;main.c: 111:         if (RGBC.C < ambient-40 || RGBC.C > ambient+40 ){
  1132   00130C  0ED8               	movlw	216
  1133   00130E  0100               	movlb	0	; () banked
  1134   001310  258B               	addwf	main@ambient& (0+255),w,b
  1135   001312  6F60               	movwf	??_main& (0+255),b
  1136   001314  0EFF               	movlw	255
  1137   001316  218C               	addwfc	(main@ambient+1)& (0+255),w,b
  1138   001318  6F61               	movwf	(??_main+1)& (0+255),b
  1139   00131A  5160               	movf	??_main& (0+255),w,b
  1140   00131C  5DA1               	subwf	(main@RGBC+6)& (0+255),w,b
  1141   00131E  5161               	movf	(??_main+1)& (0+255),w,b
  1142   001320  59A2               	subwfb	(main@RGBC+7)& (0+255),w,b
  1143   001322  A0D8               	btfss	status,0,c
  1144   001324  EF96  F009         	goto	u2231
  1145   001328  EF98  F009         	goto	u2230
  1146   00132C                     u2231:
  1147   00132C  EFA9  F009         	goto	l3297
  1148   001330                     u2230:
  1149   001330                     
  1150                           ; BSR set to: 0
  1151   001330  0E28               	movlw	40
  1152   001332  258B               	addwf	main@ambient& (0+255),w,b
  1153   001334  6F60               	movwf	??_main& (0+255),b
  1154   001336  0E00               	movlw	0
  1155   001338  218C               	addwfc	(main@ambient+1)& (0+255),w,b
  1156   00133A  6F61               	movwf	(??_main+1)& (0+255),b
  1157   00133C  51A1               	movf	(main@RGBC+6)& (0+255),w,b
  1158   00133E  5D60               	subwf	??_main& (0+255),w,b
  1159   001340  51A2               	movf	(main@RGBC+7)& (0+255),w,b
  1160   001342  5961               	subwfb	(??_main+1)& (0+255),w,b
  1161   001344  B0D8               	btfsc	status,0,c
  1162   001346  EFA7  F009         	goto	u2241
  1163   00134A  EFA9  F009         	goto	u2240
  1164   00134E                     u2241:
  1165   00134E  EF30  F00A         	goto	l3321
  1166   001352                     u2240:
  1167   001352                     l3297:
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 112:             stop(&motorL, &motorR, straightRamp);
  1171   001352  0EAD               	movlw	low main@motorL
  1172   001354  6E17               	movwf	stop@mL^0,c
  1173   001356  0EA3               	movlw	low main@motorR
  1174   001358  6E18               	movwf	stop@mR^0,c
  1175   00135A  C091  F019         	movff	main@straightRamp,stop@straightRamp
  1176   00135E  EC73  F011         	call	_stop	;wreg free
  1177   001362                     
  1178                           ;main.c: 113:             color_read(&RGBC);
  1179   001362  0E9B               	movlw	low main@RGBC
  1180   001364  6E09               	movwf	color_read@RGBC^0,c
  1181   001366  EC8B  F00A         	call	_color_read	;wreg free
  1182   00136A                     
  1183                           ;main.c: 114:             color_normalise(RGBC, &RGBC_n);
  1184   00136A  EE20  F09B         	lfsr	2,main@RGBC
  1185   00136E  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1186   001372  0E07               	movlw	7
  1187   001374                     u2251:
  1188   001374  CFDB FFEB          	movff	plusw2,plusw0
  1189   001378  06E8               	decf	wreg,f,c
  1190   00137A  E2FC               	bc	u2251
  1191   00137C  0E93               	movlw	low main@RGBC_n
  1192   00137E  6E27               	movwf	color_normalise@RGBC_n^0,c
  1193   001380  EC4C  F010         	call	_color_normalise	;wreg free
  1194   001384                     
  1195                           ;main.c: 115:             color = color_detect(RGBC_n);
  1196   001384  EE20  F093         	lfsr	2,main@RGBC_n
  1197   001388  EE00  F005         	lfsr	0,color_detect@RGBC_n
  1198   00138C  0E07               	movlw	7
  1199   00138E                     u2261:
  1200   00138E  CFDB FFEB          	movff	plusw2,plusw0
  1201   001392  06E8               	decf	wreg,f,c
  1202   001394  E2FC               	bc	u2261
  1203   001396  EC7D  F014         	call	_color_detect	;wreg free
  1204   00139A  0100               	movlb	0	; () banked
  1205   00139C  6F90               	movwf	main@color& (0+255),b
  1206   00139E                     
  1207                           ; BSR set to: 0
  1208                           ;main.c: 116:             if (color !=0){
  1209   00139E  5190               	movf	main@color& (0+255),w,b
  1210   0013A0  B4D8               	btfsc	status,2,c
  1211   0013A2  EFD5  F009         	goto	u2271
  1212   0013A6  EFD7  F009         	goto	u2270
  1213   0013AA                     u2271:
  1214   0013AA  EFEB  F009         	goto	l3309
  1215   0013AE                     u2270:
  1216   0013AE                     
  1217                           ; BSR set to: 0
  1218                           ;main.c: 117:                 move(&motorL, &motorR, color, straightSpeed, reverseDurati
      +                          on, straightRamp, turnSpeed, turnDuration, turnRamp);
  1219   0013AE  0EAD               	movlw	low main@motorL
  1220   0013B0  6E23               	movwf	move@mL^0,c
  1221   0013B2  0EA3               	movlw	low main@motorR
  1222   0013B4  6E24               	movwf	move@mR^0,c
  1223   0013B6  C090  F025         	movff	main@color,move@color
  1224   0013BA  C08D  F026         	movff	main@straightSpeed,move@straightSpeed
  1225   0013BE  C08A  F027         	movff	main@reverseDuration,move@reverseDuration
  1226   0013C2  C091  F028         	movff	main@straightRamp,move@straightRamp
  1227   0013C6  C08E  F029         	movff	main@turnSpeed,move@turnSpeed
  1228   0013CA  C092  F02A         	movff	main@turnDuration,move@turnDuration
  1229   0013CE  C08F  F02B         	movff	main@turnRamp,move@turnRamp
  1230   0013D2  EC32  F007         	call	_move	;wreg free
  1231   0013D6                     l3309:
  1232                           
  1233                           ;main.c: 122:             sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d  color: %
      +                          d \r\n",RGBC.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B,color);
  1234   0013D6  0E62               	movlw	low main@buf
  1235   0013D8  6E1E               	movwf	sprintf@s^0,c
  1236   0013DA  0E01               	movlw	low STR_1
  1237   0013DC  6E1F               	movwf	sprintf@fmt^0,c
  1238   0013DE  C09B  F020         	movff	main@RGBC,?_sprintf+2
  1239   0013E2  C09C  F021         	movff	main@RGBC+1,?_sprintf+3
  1240   0013E6  C09D  F022         	movff	main@RGBC+2,?_sprintf+4
  1241   0013EA  C09E  F023         	movff	main@RGBC+3,?_sprintf+5
  1242   0013EE  C09F  F024         	movff	main@RGBC+4,?_sprintf+6
  1243   0013F2  C0A0  F025         	movff	main@RGBC+5,?_sprintf+7
  1244   0013F6  C0A1  F026         	movff	main@RGBC+6,?_sprintf+8
  1245   0013FA  C0A2  F027         	movff	main@RGBC+7,?_sprintf+9
  1246   0013FE  C093  F028         	movff	main@RGBC_n,?_sprintf+10
  1247   001402  C094  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1248   001406  C095  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1249   00140A  C096  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1250   00140E  C097  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1251   001412  C098  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1252   001416  C090  F02E         	movff	main@color,?_sprintf+16
  1253   00141A  6A2F               	clrf	(?_sprintf+17)^0,c
  1254   00141C  EC2E  F015         	call	_sprintf	;wreg free
  1255   001420                     
  1256                           ;main.c: 123:             sendTxBuf();
  1257   001420  EC3A  F016         	call	_sendTxBuf	;wreg free
  1258   001424                     
  1259                           ;main.c: 124:             TxBufferedString(buf);
  1260   001424  0E62               	movlw	low main@buf
  1261   001426  6E06               	movwf	TxBufferedString@string^0,c
  1262   001428  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1263   00142A  EC4C  F014         	call	_TxBufferedString	;wreg free
  1264   00142E                     
  1265                           ;main.c: 125:             sendTxBuf();
  1266   00142E  EC3A  F016         	call	_sendTxBuf	;wreg free
  1267   001432                     
  1268                           ;main.c: 126:             TxBufferedString("");
  1269   001432  0E36               	movlw	low (STR_1+53)
  1270   001434  6E06               	movwf	TxBufferedString@string^0,c
  1271   001436  5006               	movf	TxBufferedString@string^0,w,c
  1272   001438  A4D8               	btfss	status,2,c
  1273   00143A  0E0E               	movlw	high __smallconst
  1274   00143C  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1275   00143E  EC4C  F014         	call	_TxBufferedString	;wreg free
  1276   001442                     l3319:
  1277                           
  1278                           ;main.c: 127:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1279   001442  0E19               	movlw	25
  1280   001444  0100               	movlb	0	; () banked
  1281   001446  6F61               	movwf	(??_main+1)& (0+255),b
  1282   001448  0E5A               	movlw	90
  1283   00144A  6F60               	movwf	??_main& (0+255),b
  1284   00144C  0EB1               	movlw	177
  1285   00144E                     u2337:
  1286   00144E  2EE8               	decfsz	wreg,f,c
  1287   001450  D7FE               	bra	u2337
  1288   001452  2F60               	decfsz	??_main& (0+255),f,b
  1289   001454  D7FC               	bra	u2337
  1290   001456  2F61               	decfsz	(??_main+1)& (0+255),f,b
  1291   001458  D7FA               	bra	u2337
  1292   00145A  D000               	nop2	
  1293                           
  1294                           ;main.c: 128:         }
  1295   00145C  EF82  F009         	goto	l3291
  1296   001460                     l3321:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 131:             color_read(&RGBC);
  1300   001460  0E9B               	movlw	low main@RGBC
  1301   001462  6E09               	movwf	color_read@RGBC^0,c
  1302   001464  EC8B  F00A         	call	_color_read	;wreg free
  1303   001468                     
  1304                           ;main.c: 132:             LATDbits.LATD7 = !LATDbits.LATD7;
  1305   001468  AE7C               	btfss	124,7,c	;volatile
  1306   00146A  EF39  F00A         	goto	u2281
  1307   00146E  EF3E  F00A         	goto	u2280
  1308   001472                     u2281:
  1309   001472  0100               	movlb	0	; () banked
  1310   001474  6B60               	clrf	??_main& (0+255),b
  1311   001476  2B60               	incf	??_main& (0+255),f,b
  1312   001478  EF40  F00A         	goto	u2298
  1313   00147C                     u2280:
  1314   00147C  0100               	movlb	0	; () banked
  1315   00147E  6B60               	clrf	??_main& (0+255),b
  1316   001480                     u2298:
  1317   001480  3360               	rrcf	??_main& (0+255),f,b
  1318   001482  3360               	rrcf	??_main& (0+255),f,b
  1319   001484  507C               	movf	124,w,c	;volatile
  1320   001486  1960               	xorwf	??_main& (0+255),w,b
  1321   001488  0B7F               	andlw	-129
  1322   00148A  1960               	xorwf	??_main& (0+255),w,b
  1323   00148C  6E7C               	movwf	124,c	;volatile
  1324   00148E                     
  1325                           ; BSR set to: 0
  1326                           ;main.c: 135:             color_normalise(RGBC, &RGBC_n);
  1327   00148E  EE20  F09B         	lfsr	2,main@RGBC
  1328   001492  EE00  F01F         	lfsr	0,color_normalise@RGBC
  1329   001496  0E07               	movlw	7
  1330   001498                     u2301:
  1331   001498  CFDB FFEB          	movff	plusw2,plusw0
  1332   00149C  06E8               	decf	wreg,f,c
  1333   00149E  E2FC               	bc	u2301
  1334   0014A0  0E93               	movlw	low main@RGBC_n
  1335   0014A2  6E27               	movwf	color_normalise@RGBC_n^0,c
  1336   0014A4  EC4C  F010         	call	_color_normalise	;wreg free
  1337   0014A8                     
  1338                           ;main.c: 136:             sprintf(buf,"r=%d g=%d b=%d c=%d   n: r=%d g=%d b=%d \r\n",RGB
      +                          C.R,RGBC.G,RGBC.B,RGBC.C, RGBC_n.R,RGBC_n.G,RGBC_n.B);
  1339   0014A8  0E62               	movlw	low main@buf
  1340   0014AA  6E1E               	movwf	sprintf@s^0,c
  1341   0014AC  0E37               	movlw	low STR_3
  1342   0014AE  6E1F               	movwf	sprintf@fmt^0,c
  1343   0014B0  C09B  F020         	movff	main@RGBC,?_sprintf+2
  1344   0014B4  C09C  F021         	movff	main@RGBC+1,?_sprintf+3
  1345   0014B8  C09D  F022         	movff	main@RGBC+2,?_sprintf+4
  1346   0014BC  C09E  F023         	movff	main@RGBC+3,?_sprintf+5
  1347   0014C0  C09F  F024         	movff	main@RGBC+4,?_sprintf+6
  1348   0014C4  C0A0  F025         	movff	main@RGBC+5,?_sprintf+7
  1349   0014C8  C0A1  F026         	movff	main@RGBC+6,?_sprintf+8
  1350   0014CC  C0A2  F027         	movff	main@RGBC+7,?_sprintf+9
  1351   0014D0  C093  F028         	movff	main@RGBC_n,?_sprintf+10
  1352   0014D4  C094  F029         	movff	main@RGBC_n+1,?_sprintf+11
  1353   0014D8  C095  F02A         	movff	main@RGBC_n+2,?_sprintf+12
  1354   0014DC  C096  F02B         	movff	main@RGBC_n+3,?_sprintf+13
  1355   0014E0  C097  F02C         	movff	main@RGBC_n+4,?_sprintf+14
  1356   0014E4  C098  F02D         	movff	main@RGBC_n+5,?_sprintf+15
  1357   0014E8  EC2E  F015         	call	_sprintf	;wreg free
  1358   0014EC                     
  1359                           ;main.c: 137:             sendTxBuf();
  1360   0014EC  EC3A  F016         	call	_sendTxBuf	;wreg free
  1361   0014F0                     
  1362                           ;main.c: 138:             TxBufferedString(buf);
  1363   0014F0  0E62               	movlw	low main@buf
  1364   0014F2  6E06               	movwf	TxBufferedString@string^0,c
  1365   0014F4  6A07               	clrf	(TxBufferedString@string+1)^0,c
  1366   0014F6  EC4C  F014         	call	_TxBufferedString	;wreg free
  1367   0014FA                     
  1368                           ;main.c: 139:             sendTxBuf();
  1369   0014FA  EC3A  F016         	call	_sendTxBuf	;wreg free
  1370   0014FE                     
  1371                           ;main.c: 140:             TxBufferedString("");
  1372   0014FE  0E36               	movlw	low (STR_1+53)
  1373   001500  6E06               	movwf	TxBufferedString@string^0,c
  1374   001502  5006               	movf	TxBufferedString@string^0,w,c
  1375   001504  A4D8               	btfss	status,2,c
  1376   001506  0E0E               	movlw	high __smallconst
  1377   001508  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1378   00150A  EC4C  F014         	call	_TxBufferedString	;wreg free
  1379   00150E  EF21  F00A         	goto	l3319
  1380   001512  EF46  F000         	goto	start
  1381   001516                     __end_of_main:
  1382                           	callstack 0
  1383                           
  1384 ;; *************** function _white_Light *****************
  1385 ;; Defined at:
  1386 ;;		line 40 in file "color.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  state           1    wreg     unsigned char 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  state           1    4[COMRAM] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1404 ;;Total ram usage:        1 bytes
  1405 ;; Hardware stack levels used: 1
  1406 ;; Hardware stack levels required when called: 3
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text1
  1415   002C12                     __ptext1:
  1416                           	callstack 0
  1417   002C12                     _white_Light:
  1418                           	callstack 27
  1419                           
  1420                           ;incstack = 0
  1421                           ;white_Light@state stored from wreg
  1422   002C12  6E05               	movwf	white_Light@state^0,c
  1423   002C14                     
  1424                           ;color.c: 40: void white_Light(char state);color.c: 41: {;color.c: 42:     if (state){
  1425   002C14  5005               	movf	white_Light@state^0,w,c
  1426   002C16  B4D8               	btfsc	status,2,c
  1427   002C18  EF10  F016         	goto	u1891
  1428   002C1C  EF12  F016         	goto	u1890
  1429   002C20                     u1891:
  1430   002C20  EF17  F016         	goto	l111
  1431   002C24                     u1890:
  1432   002C24                     
  1433                           ;color.c: 43:         LATGbits.LATG0 = 1;
  1434   002C24  807F               	bsf	127,0,c	;volatile
  1435                           
  1436                           ;color.c: 44:         LATEbits.LATE7 = 1;
  1437   002C26  8E7D               	bsf	125,7,c	;volatile
  1438                           
  1439                           ;color.c: 45:         LATAbits.LATA3 = 1;
  1440   002C28  8679               	bsf	121,3,c	;volatile
  1441                           
  1442                           ;color.c: 46:     }
  1443   002C2A  EF1A  F016         	goto	l113
  1444   002C2E                     l111:
  1445                           
  1446                           ;color.c: 48:         LATGbits.LATG0 = 0;
  1447   002C2E  907F               	bcf	127,0,c	;volatile
  1448                           
  1449                           ;color.c: 49:         LATEbits.LATE7 = 0;
  1450   002C30  9E7D               	bcf	125,7,c	;volatile
  1451                           
  1452                           ;color.c: 50:         LATAbits.LATA3 = 0;
  1453   002C32  9679               	bcf	121,3,c	;volatile
  1454   002C34                     l113:
  1455   002C34  0012               	return		;funcret
  1456   002C36                     __end_of_white_Light:
  1457                           	callstack 0
  1458                           
  1459 ;; *************** function _stop *****************
  1460 ;; Defined at:
  1461 ;;		line 162 in file "dc_motor.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  1464 ;;		 -> main@motorL(10), 
  1465 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  1466 ;;		 -> main@motorR(10), 
  1467 ;;  straightRamp    1   24[COMRAM] unsigned char 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  cur_power       2   30[COMRAM] int 
  1470 ;;  i               2   28[COMRAM] int 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1480 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1482 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1483 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;Total ram usage:       10 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; Hardware stack levels required when called: 5
  1487 ;; This function calls:
  1488 ;;		_setMotorPWM
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text2
  1495   0022E6                     __ptext2:
  1496                           	callstack 0
  1497   0022E6                     _stop:
  1498                           	callstack 25
  1499   0022E6                     
  1500                           ;dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 163: {;dc_motor.c: 164:     mL->direction = 1;
  1501   0022E6  5017               	movf	stop@mL^0,w,c
  1502   0022E8  6ED9               	movwf	fsr2l,c
  1503   0022EA  6ADA               	clrf	fsr2h,c
  1504   0022EC  0E01               	movlw	1
  1505   0022EE  26D9               	addwf	fsr2l,f,c
  1506   0022F0  0E01               	movlw	1
  1507   0022F2  6EDF               	movwf	indf2,c
  1508                           
  1509                           ;dc_motor.c: 165:     mR->direction = 1;
  1510   0022F4  5018               	movf	stop@mR^0,w,c
  1511   0022F6  6ED9               	movwf	fsr2l,c
  1512   0022F8  6ADA               	clrf	fsr2h,c
  1513   0022FA  0E01               	movlw	1
  1514   0022FC  26D9               	addwf	fsr2l,f,c
  1515   0022FE  0E01               	movlw	1
  1516   002300  6EDF               	movwf	indf2,c
  1517                           
  1518                           ;dc_motor.c: 166:     int i;;dc_motor.c: 167:     int cur_power;;dc_motor.c: 168:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  1519   002302  5017               	movf	stop@mL^0,w,c
  1520   002304  6ED9               	movwf	fsr2l,c
  1521   002306  6ADA               	clrf	fsr2h,c
  1522   002308  50DF               	movf	indf2,w,c
  1523   00230A  6E1A               	movwf	??_stop^0,c
  1524   00230C  5017               	movf	stop@mL^0,w,c
  1525   00230E  6ED9               	movwf	fsr2l,c
  1526   002310  6ADA               	clrf	fsr2h,c
  1527   002312  0E09               	movlw	9
  1528   002314  26D9               	addwf	fsr2l,f,c
  1529   002316  50DF               	movf	indf2,w,c
  1530   002318  6E1B               	movwf	(??_stop+1)^0,c
  1531   00231A  501B               	movf	(??_stop+1)^0,w,c
  1532   00231C  5C1A               	subwf	??_stop^0,w,c
  1533   00231E  6E1F               	movwf	stop@cur_power^0,c
  1534   002320  6A20               	clrf	(stop@cur_power+1)^0,c
  1535   002322  A0D8               	btfss	status,0,c
  1536   002324  0620               	decf	(stop@cur_power+1)^0,f,c
  1537   002326                     l2899:
  1538   002326  BE20               	btfsc	(stop@cur_power+1)^0,7,c
  1539   002328  EF9A  F011         	goto	u1900
  1540   00232C  EF98  F011         	goto	u1901
  1541   002330                     u1901:
  1542   002330  EF9C  F011         	goto	l2903
  1543   002334                     u1900:
  1544   002334  EFE1  F011         	goto	l2919
  1545   002338                     l2903:
  1546                           
  1547                           ;dc_motor.c: 169:         mL->power = cur_power+mL->compensation;
  1548   002338  5017               	movf	stop@mL^0,w,c
  1549   00233A  6ED9               	movwf	fsr2l,c
  1550   00233C  6ADA               	clrf	fsr2h,c
  1551   00233E  5017               	movf	stop@mL^0,w,c
  1552   002340  6EE1               	movwf	fsr1l,c
  1553   002342  6AE2               	clrf	fsr1h,c
  1554   002344  0E09               	movlw	9
  1555   002346  26E1               	addwf	fsr1l,f,c
  1556   002348  50E7               	movf	indf1,w,c
  1557   00234A  241F               	addwf	stop@cur_power^0,w,c
  1558   00234C  6EDF               	movwf	indf2,c
  1559                           
  1560                           ;dc_motor.c: 170:         mR->power = cur_power+mR->compensation;
  1561   00234E  5018               	movf	stop@mR^0,w,c
  1562   002350  6ED9               	movwf	fsr2l,c
  1563   002352  6ADA               	clrf	fsr2h,c
  1564   002354  5018               	movf	stop@mR^0,w,c
  1565   002356  6EE1               	movwf	fsr1l,c
  1566   002358  6AE2               	clrf	fsr1h,c
  1567   00235A  0E09               	movlw	9
  1568   00235C  26E1               	addwf	fsr1l,f,c
  1569   00235E  50E7               	movf	indf1,w,c
  1570   002360  241F               	addwf	stop@cur_power^0,w,c
  1571   002362  6EDF               	movwf	indf2,c
  1572   002364                     
  1573                           ;dc_motor.c: 171:         setMotorPWM(mL);
  1574   002364  C017  F012         	movff	stop@mL,setMotorPWM@m
  1575   002368  ECA2  F00F         	call	_setMotorPWM	;wreg free
  1576   00236C                     
  1577                           ;dc_motor.c: 172:         setMotorPWM(mR);
  1578   00236C  C018  F012         	movff	stop@mR,setMotorPWM@m
  1579   002370  ECA2  F00F         	call	_setMotorPWM	;wreg free
  1580   002374                     
  1581                           ;dc_motor.c: 173:         for (i=0;i<straightRamp;i++) {
  1582   002374  0E00               	movlw	0
  1583   002376  6E1E               	movwf	(stop@i+1)^0,c
  1584   002378  0E00               	movlw	0
  1585   00237A  6E1D               	movwf	stop@i^0,c
  1586   00237C  EFCA  F011         	goto	l458
  1587   002380                     l2911:
  1588                           
  1589                           ;dc_motor.c: 174:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1590   002380  0E68               	movlw	104
  1591   002382  6E1A               	movwf	??_stop^0,c
  1592   002384  0EE4               	movlw	228
  1593   002386                     u2347:
  1594   002386  2EE8               	decfsz	wreg,f,c
  1595   002388  D7FE               	bra	u2347
  1596   00238A  2E1A               	decfsz	??_stop^0,f,c
  1597   00238C  D7FC               	bra	u2347
  1598   00238E  D000               	nop2	
  1599   002390                     
  1600                           ;dc_motor.c: 175:         }
  1601   002390  4A1D               	infsnz	stop@i^0,f,c
  1602   002392  2A1E               	incf	(stop@i+1)^0,f,c
  1603   002394                     l458:
  1604   002394  5019               	movf	stop@straightRamp^0,w,c
  1605   002396  6E1A               	movwf	??_stop^0,c
  1606   002398  6A1B               	clrf	(??_stop+1)^0,c
  1607   00239A  501A               	movf	??_stop^0,w,c
  1608   00239C  5C1D               	subwf	stop@i^0,w,c
  1609   00239E  501E               	movf	(stop@i+1)^0,w,c
  1610   0023A0  0A80               	xorlw	128
  1611   0023A2  6E1C               	movwf	(??_stop+2)^0,c
  1612   0023A4  501B               	movf	(??_stop+1)^0,w,c
  1613   0023A6  0A80               	xorlw	128
  1614   0023A8  581C               	subwfb	(??_stop+2)^0,w,c
  1615   0023AA  A0D8               	btfss	status,0,c
  1616   0023AC  EFDA  F011         	goto	u1911
  1617   0023B0  EFDC  F011         	goto	u1910
  1618   0023B4                     u1911:
  1619   0023B4  EFC0  F011         	goto	l2911
  1620   0023B8                     u1910:
  1621   0023B8                     
  1622                           ;dc_motor.c: 176:     }
  1623   0023B8  061F               	decf	stop@cur_power^0,f,c
  1624   0023BA  A0D8               	btfss	status,0,c
  1625   0023BC  0620               	decf	(stop@cur_power+1)^0,f,c
  1626   0023BE  EF93  F011         	goto	l2899
  1627   0023C2                     l2919:
  1628                           
  1629                           ;dc_motor.c: 177:     mL->power = 0;
  1630   0023C2  5017               	movf	stop@mL^0,w,c
  1631   0023C4  6ED9               	movwf	fsr2l,c
  1632   0023C6  6ADA               	clrf	fsr2h,c
  1633   0023C8  6ADF               	clrf	indf2,c
  1634                           
  1635                           ;dc_motor.c: 178:     mR->power = 0;
  1636   0023CA  5018               	movf	stop@mR^0,w,c
  1637   0023CC  6ED9               	movwf	fsr2l,c
  1638   0023CE  6ADA               	clrf	fsr2h,c
  1639   0023D0  6ADF               	clrf	indf2,c
  1640   0023D2  0012               	return		;funcret
  1641   0023D4                     __end_of_stop:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _sprintf *****************
  1645 ;; Defined at:
  1646 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  s               1   29[COMRAM] PTR unsigned char 
  1649 ;;		 -> main@buf(40), 
  1650 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1651 ;;		 -> STR_3(43), STR_1(54), 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  f              12   48[COMRAM] struct _IO_FILE
  1654 ;;  ret             2    0        int 
  1655 ;;  ap              1   47[COMRAM] PTR void [1]
  1656 ;;		 -> ?_sprintf(2), 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2   29[COMRAM] int 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1666 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1669 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;Total ram usage:       31 bytes
  1671 ;; Hardware stack levels used: 1
  1672 ;; Hardware stack levels required when called: 7
  1673 ;; This function calls:
  1674 ;;		_vfprintf
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text3
  1681   002A5C                     __ptext3:
  1682                           	callstack 0
  1683   002A5C                     _sprintf:
  1684                           	callstack 23
  1685   002A5C  0E20               	movlw	low (?_sprintf+2)
  1686   002A5E  6E30               	movwf	sprintf@ap^0,c
  1687   002A60  C01E  F031         	movff	sprintf@s,sprintf@f
  1688   002A64  0E00               	movlw	0
  1689   002A66  6E35               	movwf	(sprintf@f+4)^0,c
  1690   002A68  0E00               	movlw	0
  1691   002A6A  6E34               	movwf	(sprintf@f+3)^0,c
  1692   002A6C  0E00               	movlw	0
  1693   002A6E  6E3C               	movwf	(sprintf@f+11)^0,c
  1694   002A70  0E00               	movlw	0
  1695   002A72  6E3B               	movwf	(sprintf@f+10)^0,c
  1696   002A74  0E31               	movlw	low sprintf@f
  1697   002A76  6E1A               	movwf	vfprintf@fp^0,c
  1698   002A78  C01F  F01B         	movff	sprintf@fmt,vfprintf@fmt
  1699   002A7C  0E30               	movlw	low sprintf@ap
  1700   002A7E  6E1C               	movwf	vfprintf@ap^0,c
  1701   002A80  ECF4  F014         	call	_vfprintf	;wreg free
  1702   002A84  501E               	movf	sprintf@s^0,w,c
  1703   002A86  2434               	addwf	(sprintf@f+3)^0,w,c
  1704   002A88  6ED9               	movwf	fsr2l,c
  1705   002A8A  6ADA               	clrf	fsr2h,c
  1706   002A8C  6ADF               	clrf	indf2,c
  1707   002A8E  0012               	return		;funcret
  1708   002A90                     __end_of_sprintf:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function _vfprintf *****************
  1712 ;; Defined at:
  1713 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  1716 ;;		 -> sprintf@f(12), 
  1717 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1718 ;;		 -> STR_3(43), STR_1(54), 
  1719 ;;  ap              1   27[COMRAM] PTR PTR void 
  1720 ;;		 -> sprintf@ap(1), 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  cfmt            1   28[COMRAM] PTR unsigned char 
  1723 ;;		 -> STR_3(43), STR_1(54), 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  2   25[COMRAM] int 
  1726 ;; Registers used:
  1727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1733 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;Total ram usage:        4 bytes
  1738 ;; Hardware stack levels used: 1
  1739 ;; Hardware stack levels required when called: 6
  1740 ;; This function calls:
  1741 ;;		_vfpfcnvrt
  1742 ;; This function is called by:
  1743 ;;		_sprintf
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text4
  1748   0029E8                     __ptext4:
  1749                           	callstack 0
  1750   0029E8                     _vfprintf:
  1751                           	callstack 23
  1752   0029E8                     
  1753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1754   0029E8  C01B  F01D         	movff	vfprintf@fmt,vfprintf@cfmt
  1755                           
  1756                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1757   0029EC  EF00  F015         	goto	l2753
  1758   0029F0                     l2751:
  1759                           
  1760                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1761   0029F0  C01A  F00F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1762   0029F4  0E1D               	movlw	low vfprintf@cfmt
  1763   0029F6  6E10               	movwf	vfpfcnvrt@fmt^0,c
  1764   0029F8  C01C  F011         	movff	vfprintf@ap,vfpfcnvrt@ap
  1765   0029FC  EC58  F00C         	call	_vfpfcnvrt	;wreg free
  1766   002A00                     l2753:
  1767                           
  1768                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1769   002A00  C01D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1770   002A04                     	if	1	;There is more than 1 active tblptr byte
  1771   002A04  0E0E               	movlw	high __smallconst
  1772   002A06  6EF7               	movwf	tblptrh,c
  1773   002A08                     	endif
  1774   002A08                     	if	0	;tblptru may be non-zero
  1775   002A08                     	endif
  1776   002A08                     	if	0	;tblptru may be non-zero
  1777   002A08                     	endif
  1778   002A08  0008               	tblrd		*
  1779   002A0A  50F5               	movf	tablat,w,c
  1780   002A0C  0900               	iorlw	0
  1781   002A0E  A4D8               	btfss	status,2,c
  1782   002A10  EF0C  F015         	goto	u1781
  1783   002A14  EF0E  F015         	goto	u1780
  1784   002A18                     u1781:
  1785   002A18  EFF8  F014         	goto	l2751
  1786   002A1C                     u1780:
  1787   002A1C                     
  1788                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1789   002A1C  0E00               	movlw	0
  1790   002A1E  6E1B               	movwf	(?_vfprintf+1)^0,c
  1791   002A20  0E00               	movlw	0
  1792   002A22  6E1A               	movwf	?_vfprintf^0,c
  1793   002A24  0012               	return		;funcret
  1794   002A26                     __end_of_vfprintf:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _vfpfcnvrt *****************
  1798 ;; Defined at:
  1799 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1802 ;;		 -> sprintf@f(12), 
  1803 ;;  fmt             1   15[COMRAM] PTR PTR unsigned char 
  1804 ;;		 -> vfprintf@cfmt(1), 
  1805 ;;  ap              1   16[COMRAM] PTR PTR void 
  1806 ;;		 -> sprintf@ap(1), 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  convarg         4   20[COMRAM] struct .
  1809 ;;  c               1   24[COMRAM] unsigned char 
  1810 ;;  cp              1   19[COMRAM] PTR unsigned char 
  1811 ;;		 -> STR_3(43), STR_1(54), 
  1812 ;;  done            1   18[COMRAM] _Bool 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1822 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1823 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;Total ram usage:       11 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 5
  1829 ;; This function calls:
  1830 ;;		___awdiv
  1831 ;;		___awmod
  1832 ;;		_abs
  1833 ;;		_fputc
  1834 ;; This function is called by:
  1835 ;;		_vfprintf
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text5
  1840   0018B0                     __ptext5:
  1841                           	callstack 0
  1842   0018B0                     _vfpfcnvrt:
  1843                           	callstack 23
  1844   0018B0                     
  1845                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1846   0018B0  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1847   0018B2  6ED9               	movwf	fsr2l,c
  1848   0018B4  6ADA               	clrf	fsr2h,c
  1849   0018B6  CFDF FFF6          	movff	indf2,tblptrl
  1850   0018BA                     	if	1	;There is more than 1 active tblptr byte
  1851   0018BA  0E0E               	movlw	high __smallconst
  1852   0018BC  6EF7               	movwf	tblptrh,c
  1853   0018BE                     	endif
  1854   0018BE                     	if	0	;tblptru may be non-zero
  1855   0018BE                     	endif
  1856   0018BE                     	if	0	;tblptru may be non-zero
  1857   0018BE                     	endif
  1858   0018BE  0008               	tblrd		*
  1859   0018C0  50F5               	movf	tablat,w,c
  1860   0018C2  0A25               	xorlw	37
  1861   0018C4  A4D8               	btfss	status,2,c
  1862   0018C6  EF67  F00C         	goto	u1371
  1863   0018CA  EF69  F00C         	goto	u1370
  1864   0018CE                     u1371:
  1865   0018CE  EF22  F00D         	goto	l2469
  1866   0018D2                     u1370:
  1867   0018D2                     
  1868                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1869   0018D2  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1870   0018D4  6ED9               	movwf	fsr2l,c
  1871   0018D6  6ADA               	clrf	fsr2h,c
  1872   0018D8  2ADF               	incf	indf2,f,c
  1873   0018DA                     
  1874                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1875   0018DA  0E00               	movlw	0
  1876   0018DC  6E52               	movwf	(_width+1)^0,c
  1877   0018DE  0E00               	movlw	0
  1878   0018E0  6E51               	movwf	_width^0,c
  1879   0018E2  C051  F055         	movff	_width,_flags
  1880   0018E6                     
  1881                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1882   0018E6  6853               	setf	_prec^0,c
  1883   0018E8  6854               	setf	(_prec+1)^0,c
  1884   0018EA                     
  1885                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1886   0018EA  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1887   0018EC  6ED9               	movwf	fsr2l,c
  1888   0018EE  6ADA               	clrf	fsr2h,c
  1889   0018F0  50DF               	movf	indf2,w,c
  1890   0018F2  6E14               	movwf	vfpfcnvrt@cp^0,c
  1891   0018F4                     
  1892                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1893   0018F4  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1894   0018F8                     	if	1	;There is more than 1 active tblptr byte
  1895   0018F8  0E0E               	movlw	high __smallconst
  1896   0018FA  6EF7               	movwf	tblptrh,c
  1897   0018FC                     	endif
  1898   0018FC                     	if	0	;tblptru may be non-zero
  1899   0018FC                     	endif
  1900   0018FC                     	if	0	;tblptru may be non-zero
  1901   0018FC                     	endif
  1902   0018FC  0008               	tblrd		*
  1903   0018FE  50F5               	movf	tablat,w,c
  1904   001900  0A64               	xorlw	100
  1905   001902  B4D8               	btfsc	status,2,c
  1906   001904  EF86  F00C         	goto	u1381
  1907   001908  EF88  F00C         	goto	u1380
  1908   00190C                     u1381:
  1909   00190C  EF96  F00C         	goto	l2439
  1910   001910                     u1380:
  1911   001910  C014  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1912   001914                     	if	1	;There is more than 1 active tblptr byte
  1913   001914  0E0E               	movlw	high __smallconst
  1914   001916  6EF7               	movwf	tblptrh,c
  1915   001918                     	endif
  1916   001918                     	if	0	;tblptru may be non-zero
  1917   001918                     	endif
  1918   001918                     	if	0	;tblptru may be non-zero
  1919   001918                     	endif
  1920   001918  0008               	tblrd		*
  1921   00191A  50F5               	movf	tablat,w,c
  1922   00191C  0A69               	xorlw	105
  1923   00191E  A4D8               	btfss	status,2,c
  1924   001920  EF94  F00C         	goto	u1391
  1925   001924  EF96  F00C         	goto	u1390
  1926   001928                     u1391:
  1927   001928  EF1C  F00D         	goto	l2465
  1928   00192C                     u1390:
  1929   00192C                     l2439:
  1930                           
  1931                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1932   00192C  5011               	movf	vfpfcnvrt@ap^0,w,c
  1933   00192E  6ED9               	movwf	fsr2l,c
  1934   001930  6ADA               	clrf	fsr2h,c
  1935   001932  0E02               	movlw	2
  1936   001934  26DF               	addwf	indf2,f,c
  1937   001936  5CDF               	subwf	indf2,w,c
  1938   001938  6ED9               	movwf	fsr2l,c
  1939   00193A  6ADA               	clrf	fsr2h,c
  1940   00193C  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg
  1941   001940  CFDE F016          	movff	postinc2,vfpfcnvrt@convarg+1
  1942   001944                     
  1943                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1944   001944  5010               	movf	vfpfcnvrt@fmt^0,w,c
  1945   001946  6ED9               	movwf	fsr2l,c
  1946   001948  6ADA               	clrf	fsr2h,c
  1947   00194A  2814               	incf	vfpfcnvrt@cp^0,w,c
  1948   00194C  6EDF               	movwf	indf2,c
  1949   00194E                     
  1950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1951   00194E  0E20               	movlw	32
  1952   001950  6E19               	movwf	vfpfcnvrt@c^0,c
  1953                           
  1954                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1955   001952  BE16               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1956   001954  EFAE  F00C         	goto	u1401
  1957   001958  EFB1  F00C         	goto	u1400
  1958   00195C                     u1401:
  1959   00195C  0E01               	movlw	1
  1960   00195E  EFB2  F00C         	goto	u1410
  1961   001962                     u1400:
  1962   001962  0E00               	movlw	0
  1963   001964                     u1410:
  1964   001964  6E13               	movwf	vfpfcnvrt@done^0,c
  1965   001966                     l2445:
  1966                           
  1967                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1968   001966  0619               	decf	vfpfcnvrt@c^0,f,c
  1969   001968  5019               	movf	vfpfcnvrt@c^0,w,c
  1970   00196A  0FDF               	addlw	low _dbuf
  1971   00196C  6ED9               	movwf	fsr2l,c
  1972   00196E  6ADA               	clrf	fsr2h,c
  1973   001970  C015  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1974   001974  C016  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1975   001978  0E00               	movlw	0
  1976   00197A  6E08               	movwf	(___awmod@divisor+1)^0,c
  1977   00197C  0E0A               	movlw	10
  1978   00197E  6E07               	movwf	___awmod@divisor^0,c
  1979   001980  ECB5  F012         	call	___awmod	;wreg free
  1980   001984  C005  F00B         	movff	?___awmod,abs@a
  1981   001988  C006  F00C         	movff	?___awmod+1,abs@a+1
  1982   00198C  EC48  F015         	call	_abs	;wreg free
  1983   001990  500B               	movf	?_abs^0,w,c
  1984   001992  0F30               	addlw	48
  1985   001994  6EDF               	movwf	indf2,c
  1986   001996                     
  1987                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1988   001996  C015  F005         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1989   00199A  C016  F006         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1990   00199E  0E00               	movlw	0
  1991   0019A0  6E08               	movwf	(___awdiv@divisor+1)^0,c
  1992   0019A2  0E0A               	movlw	10
  1993   0019A4  6E07               	movwf	___awdiv@divisor^0,c
  1994   0019A6  EC53  F012         	call	___awdiv	;wreg free
  1995   0019AA  C005  F015         	movff	?___awdiv,vfpfcnvrt@convarg
  1996   0019AE  C006  F016         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1997   0019B2                     
  1998                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1999   0019B2  5015               	movf	vfpfcnvrt@convarg^0,w,c
  2000   0019B4  1016               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2001   0019B6  B4D8               	btfsc	status,2,c
  2002   0019B8  EFE0  F00C         	goto	u1421
  2003   0019BC  EFE2  F00C         	goto	u1420
  2004   0019C0                     u1421:
  2005   0019C0  EFEA  F00C         	goto	l2453
  2006   0019C4                     u1420:
  2007   0019C4  5019               	movf	vfpfcnvrt@c^0,w,c
  2008   0019C6  A4D8               	btfss	status,2,c
  2009   0019C8  EFE8  F00C         	goto	u1431
  2010   0019CC  EFEA  F00C         	goto	u1430
  2011   0019D0                     u1431:
  2012   0019D0  EFB3  F00C         	goto	l2445
  2013   0019D4                     u1430:
  2014   0019D4                     l2453:
  2015                           
  2016                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2017   0019D4  5019               	movf	vfpfcnvrt@c^0,w,c
  2018   0019D6  B4D8               	btfsc	status,2,c
  2019   0019D8  EFF0  F00C         	goto	u1441
  2020   0019DC  EFF2  F00C         	goto	u1440
  2021   0019E0                     u1441:
  2022   0019E0  EF11  F00D         	goto	l2463
  2023   0019E4                     u1440:
  2024   0019E4  5013               	movf	vfpfcnvrt@done^0,w,c
  2025   0019E6  B4D8               	btfsc	status,2,c
  2026   0019E8  EFF8  F00C         	goto	u1451
  2027   0019EC  EFFA  F00C         	goto	u1450
  2028   0019F0                     u1451:
  2029   0019F0  EF11  F00D         	goto	l2463
  2030   0019F4                     u1450:
  2031   0019F4                     
  2032                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2033   0019F4  0619               	decf	vfpfcnvrt@c^0,f,c
  2034   0019F6  5019               	movf	vfpfcnvrt@c^0,w,c
  2035   0019F8  0FDF               	addlw	low _dbuf
  2036   0019FA  6ED9               	movwf	fsr2l,c
  2037   0019FC  6ADA               	clrf	fsr2h,c
  2038   0019FE  0E2D               	movlw	45
  2039   001A00  6EDF               	movwf	indf2,c
  2040   001A02  EF11  F00D         	goto	l2463
  2041   001A06                     l2459:
  2042                           
  2043                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2044   001A06  5019               	movf	vfpfcnvrt@c^0,w,c
  2045   001A08  0FDF               	addlw	low _dbuf
  2046   001A0A  6ED9               	movwf	fsr2l,c
  2047   001A0C  6ADA               	clrf	fsr2h,c
  2048   001A0E  50DF               	movf	indf2,w,c
  2049   001A10  6E12               	movwf	??_vfpfcnvrt^0,c
  2050   001A12  5012               	movf	??_vfpfcnvrt^0,w,c
  2051   001A14  6E05               	movwf	fputc@c^0,c
  2052   001A16  6A06               	clrf	(fputc@c+1)^0,c
  2053   001A18  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2054   001A1C  EC0D  F013         	call	_fputc	;wreg free
  2055   001A20  2A19               	incf	vfpfcnvrt@c^0,f,c
  2056   001A22                     l2463:
  2057                           
  2058                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2059   001A22  0E20               	movlw	32
  2060   001A24  1819               	xorwf	vfpfcnvrt@c^0,w,c
  2061   001A26  A4D8               	btfss	status,2,c
  2062   001A28  EF18  F00D         	goto	u1461
  2063   001A2C  EF1A  F00D         	goto	u1460
  2064   001A30                     u1461:
  2065   001A30  EF03  F00D         	goto	l2459
  2066   001A34                     u1460:
  2067   001A34  EF33  F00D         	goto	l1255
  2068   001A38                     l2465:
  2069                           
  2070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2071   001A38  5010               	movf	vfpfcnvrt@fmt^0,w,c
  2072   001A3A  6ED9               	movwf	fsr2l,c
  2073   001A3C  6ADA               	clrf	fsr2h,c
  2074   001A3E  2ADF               	incf	indf2,f,c
  2075   001A40  EF33  F00D         	goto	l1255
  2076   001A44                     l2469:
  2077                           
  2078                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2079   001A44  5010               	movf	vfpfcnvrt@fmt^0,w,c
  2080   001A46  6ED9               	movwf	fsr2l,c
  2081   001A48  6ADA               	clrf	fsr2h,c
  2082   001A4A  CFDF FFF6          	movff	indf2,tblptrl
  2083   001A4E                     	if	1	;There is more than 1 active tblptr byte
  2084   001A4E  0E0E               	movlw	high __smallconst
  2085   001A50  6EF7               	movwf	tblptrh,c
  2086   001A52                     	endif
  2087   001A52                     	if	0	;tblptru may be non-zero
  2088   001A52                     	endif
  2089   001A52                     	if	0	;tblptru may be non-zero
  2090   001A52                     	endif
  2091   001A52  0008               	tblrd		*
  2092   001A54  50F5               	movf	tablat,w,c
  2093   001A56  6E05               	movwf	fputc@c^0,c
  2094   001A58  6A06               	clrf	(fputc@c+1)^0,c
  2095   001A5A  C00F  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2096   001A5E  EC0D  F013         	call	_fputc	;wreg free
  2097   001A62  EF1C  F00D         	goto	l2465
  2098   001A66                     l1255:
  2099   001A66  0012               	return		;funcret
  2100   001A68                     __end_of_vfpfcnvrt:
  2101                           	callstack 0
  2102                           
  2103 ;; *************** function _fputc *****************
  2104 ;; Defined at:
  2105 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  c               2    4[COMRAM] int 
  2108 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  2109 ;;		 -> sprintf@f(12), 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  2    4[COMRAM] int 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2123 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2124 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2125 ;;Total ram usage:        8 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 4
  2128 ;; This function calls:
  2129 ;;		_putch
  2130 ;; This function is called by:
  2131 ;;		_vfpfcnvrt
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text6
  2136   00261A                     __ptext6:
  2137                           	callstack 0
  2138   00261A                     _fputc:
  2139                           	callstack 23
  2140   00261A  5007               	movf	fputc@fp^0,w,c
  2141   00261C  B4D8               	btfsc	status,2,c
  2142   00261E  EF13  F013         	goto	u1301
  2143   002622  EF15  F013         	goto	u1300
  2144   002626                     u1301:
  2145   002626  EF1D  F013         	goto	l2383
  2146   00262A                     u1300:
  2147   00262A  5007               	movf	fputc@fp^0,w,c
  2148   00262C  A4D8               	btfss	status,2,c
  2149   00262E  EF1B  F013         	goto	u1311
  2150   002632  EF1D  F013         	goto	u1310
  2151   002636                     u1311:
  2152   002636  EF22  F013         	goto	l2385
  2153   00263A                     u1310:
  2154   00263A                     l2383:
  2155   00263A  5005               	movf	fputc@c^0,w,c
  2156   00263C  ECA6  F016         	call	_putch
  2157   002640  EF61  F013         	goto	l1280
  2158   002644                     l2385:
  2159   002644  5007               	movf	fputc@fp^0,w,c
  2160   002646  6ED9               	movwf	fsr2l,c
  2161   002648  6ADA               	clrf	fsr2h,c
  2162   00264A  0E0A               	movlw	10
  2163   00264C  26D9               	addwf	fsr2l,f,c
  2164   00264E  50DE               	movf	postinc2,w,c
  2165   002650  10DE               	iorwf	postinc2,w,c
  2166   002652  B4D8               	btfsc	status,2,c
  2167   002654  EF2E  F013         	goto	u1321
  2168   002658  EF30  F013         	goto	u1320
  2169   00265C                     u1321:
  2170   00265C  EF49  F013         	goto	l2389
  2171   002660                     u1320:
  2172   002660  5007               	movf	fputc@fp^0,w,c
  2173   002662  6ED9               	movwf	fsr2l,c
  2174   002664  6ADA               	clrf	fsr2h,c
  2175   002666  0E0A               	movlw	10
  2176   002668  26D9               	addwf	fsr2l,f,c
  2177   00266A  5007               	movf	fputc@fp^0,w,c
  2178   00266C  6EE1               	movwf	fsr1l,c
  2179   00266E  6AE2               	clrf	fsr1h,c
  2180   002670  0E03               	movlw	3
  2181   002672  26E1               	addwf	fsr1l,f,c
  2182   002674  50DE               	movf	postinc2,w,c
  2183   002676  5CE6               	subwf	postinc1,w,c
  2184   002678  50E6               	movf	postinc1,w,c
  2185   00267A  0A80               	xorlw	128
  2186   00267C  6E0C               	movwf	(??_fputc+4)^0,c
  2187   00267E  50DE               	movf	postinc2,w,c
  2188   002680  0A80               	xorlw	128
  2189   002682  580C               	subwfb	(??_fputc+4)^0,w,c
  2190   002684  B0D8               	btfsc	status,0,c
  2191   002686  EF47  F013         	goto	u1331
  2192   00268A  EF49  F013         	goto	u1330
  2193   00268E                     u1331:
  2194   00268E  EF61  F013         	goto	l1280
  2195   002692                     u1330:
  2196   002692                     l2389:
  2197   002692  5007               	movf	fputc@fp^0,w,c
  2198   002694  6ED9               	movwf	fsr2l,c
  2199   002696  6ADA               	clrf	fsr2h,c
  2200   002698  0E03               	movlw	3
  2201   00269A  26D9               	addwf	fsr2l,f,c
  2202   00269C  50DF               	movf	indf2,w,c
  2203   00269E  6E08               	movwf	??_fputc^0,c
  2204   0026A0  5007               	movf	fputc@fp^0,w,c
  2205   0026A2  6ED9               	movwf	fsr2l,c
  2206   0026A4  6ADA               	clrf	fsr2h,c
  2207   0026A6  50DF               	movf	indf2,w,c
  2208   0026A8  2408               	addwf	??_fputc^0,w,c
  2209   0026AA  6ED9               	movwf	fsr2l,c
  2210   0026AC  6ADA               	clrf	fsr2h,c
  2211   0026AE  C005  FFDF         	movff	fputc@c,indf2
  2212   0026B2  5007               	movf	fputc@fp^0,w,c
  2213   0026B4  6ED9               	movwf	fsr2l,c
  2214   0026B6  6ADA               	clrf	fsr2h,c
  2215   0026B8  0E03               	movlw	3
  2216   0026BA  26D9               	addwf	fsr2l,f,c
  2217   0026BC  2ADE               	incf	postinc2,f,c
  2218   0026BE  0E00               	movlw	0
  2219   0026C0  22DD               	addwfc	postdec2,f,c
  2220   0026C2                     l1280:
  2221   0026C2  0012               	return		;funcret
  2222   0026C4                     __end_of_fputc:
  2223                           	callstack 0
  2224                           
  2225 ;; *************** function _putch *****************
  2226 ;; Defined at:
  2227 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  c               1    wreg     unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  c               1    0[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2245 ;;Total ram usage:        0 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; Hardware stack levels required when called: 3
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_fputc
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text7
  2256   002D4C                     __ptext7:
  2257                           	callstack 0
  2258   002D4C                     _putch:
  2259                           	callstack 23
  2260   002D4C  0012               	return		;funcret
  2261   002D4E                     __end_of_putch:
  2262                           	callstack 0
  2263                           
  2264 ;; *************** function _abs *****************
  2265 ;; Defined at:
  2266 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  a               2   10[COMRAM] int 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  2   10[COMRAM] int 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;Total ram usage:        4 bytes
  2285 ;; Hardware stack levels used: 1
  2286 ;; Hardware stack levels required when called: 3
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_vfpfcnvrt
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text8
  2295   002A90                     __ptext8:
  2296                           	callstack 0
  2297   002A90                     _abs:
  2298                           	callstack 24
  2299   002A90  BE0C               	btfsc	(abs@a+1)^0,7,c
  2300   002A92  EF4D  F015         	goto	u1341
  2301   002A96  EF4F  F015         	goto	u1340
  2302   002A9A                     u1341:
  2303   002A9A  EF55  F015         	goto	l1265
  2304   002A9E                     u1340:
  2305   002A9E  C00B  F00B         	movff	abs@a,?_abs
  2306   002AA2  C00C  F00C         	movff	abs@a+1,?_abs+1
  2307   002AA6  EF61  F015         	goto	l1268
  2308   002AAA                     l1265:
  2309   002AAA  C00B  F00D         	movff	abs@a,??_abs
  2310   002AAE  C00C  F00E         	movff	abs@a+1,??_abs+1
  2311   002AB2  1E0D               	comf	??_abs^0,f,c
  2312   002AB4  1E0E               	comf	(??_abs+1)^0,f,c
  2313   002AB6  4A0D               	infsnz	??_abs^0,f,c
  2314   002AB8  2A0E               	incf	(??_abs+1)^0,f,c
  2315   002ABA  C00D  F00B         	movff	??_abs,?_abs
  2316   002ABE  C00E  F00C         	movff	??_abs+1,?_abs+1
  2317   002AC2                     l1268:
  2318   002AC2  0012               	return		;funcret
  2319   002AC4                     __end_of_abs:
  2320                           	callstack 0
  2321                           
  2322 ;; *************** function ___awmod *****************
  2323 ;; Defined at:
  2324 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  dividend        2    4[COMRAM] int 
  2327 ;;  divisor         2    6[COMRAM] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  sign            1    9[COMRAM] unsigned char 
  2330 ;;  counter         1    8[COMRAM] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  2    4[COMRAM] int 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2344 ;;Total ram usage:        6 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; Hardware stack levels required when called: 3
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		_vfpfcnvrt
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text9
  2355   00256A                     __ptext9:
  2356                           	callstack 0
  2357   00256A                     ___awmod:
  2358                           	callstack 24
  2359   00256A  0E00               	movlw	0
  2360   00256C  6E0A               	movwf	___awmod@sign^0,c
  2361   00256E  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  2362   002570  EFBE  F012         	goto	u1210
  2363   002574  EFBC  F012         	goto	u1211
  2364   002578                     u1211:
  2365   002578  EFC4  F012         	goto	l2329
  2366   00257C                     u1210:
  2367   00257C  6C05               	negf	___awmod@dividend^0,c
  2368   00257E  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2369   002580  B0D8               	btfsc	status,0,c
  2370   002582  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2371   002584  0E01               	movlw	1
  2372   002586  6E0A               	movwf	___awmod@sign^0,c
  2373   002588                     l2329:
  2374   002588  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  2375   00258A  EFCB  F012         	goto	u1220
  2376   00258E  EFC9  F012         	goto	u1221
  2377   002592                     u1221:
  2378   002592  EFCF  F012         	goto	l2333
  2379   002596                     u1220:
  2380   002596  6C07               	negf	___awmod@divisor^0,c
  2381   002598  1E08               	comf	(___awmod@divisor+1)^0,f,c
  2382   00259A  B0D8               	btfsc	status,0,c
  2383   00259C  2A08               	incf	(___awmod@divisor+1)^0,f,c
  2384   00259E                     l2333:
  2385   00259E  5007               	movf	___awmod@divisor^0,w,c
  2386   0025A0  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  2387   0025A2  B4D8               	btfsc	status,2,c
  2388   0025A4  EFD6  F012         	goto	u1231
  2389   0025A8  EFD8  F012         	goto	u1230
  2390   0025AC                     u1231:
  2391   0025AC  EFFC  F012         	goto	l2349
  2392   0025B0                     u1230:
  2393   0025B0  0E01               	movlw	1
  2394   0025B2  6E09               	movwf	___awmod@counter^0,c
  2395   0025B4  EFE0  F012         	goto	l2339
  2396   0025B8                     l2337:
  2397   0025B8  90D8               	bcf	status,0,c
  2398   0025BA  3607               	rlcf	___awmod@divisor^0,f,c
  2399   0025BC  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  2400   0025BE  2A09               	incf	___awmod@counter^0,f,c
  2401   0025C0                     l2339:
  2402   0025C0  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  2403   0025C2  EFE5  F012         	goto	u1241
  2404   0025C6  EFE7  F012         	goto	u1240
  2405   0025CA                     u1241:
  2406   0025CA  EFDC  F012         	goto	l2337
  2407   0025CE                     u1240:
  2408   0025CE                     l2341:
  2409   0025CE  5007               	movf	___awmod@divisor^0,w,c
  2410   0025D0  5C05               	subwf	___awmod@dividend^0,w,c
  2411   0025D2  5008               	movf	(___awmod@divisor+1)^0,w,c
  2412   0025D4  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  2413   0025D6  A0D8               	btfss	status,0,c
  2414   0025D8  EFF0  F012         	goto	u1251
  2415   0025DC  EFF2  F012         	goto	u1250
  2416   0025E0                     u1251:
  2417   0025E0  EFF6  F012         	goto	l2345
  2418   0025E4                     u1250:
  2419   0025E4  5007               	movf	___awmod@divisor^0,w,c
  2420   0025E6  5E05               	subwf	___awmod@dividend^0,f,c
  2421   0025E8  5008               	movf	(___awmod@divisor+1)^0,w,c
  2422   0025EA  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  2423   0025EC                     l2345:
  2424   0025EC  90D8               	bcf	status,0,c
  2425   0025EE  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  2426   0025F0  3207               	rrcf	___awmod@divisor^0,f,c
  2427   0025F2  2E09               	decfsz	___awmod@counter^0,f,c
  2428   0025F4  EFE7  F012         	goto	l2341
  2429   0025F8                     l2349:
  2430   0025F8  500A               	movf	___awmod@sign^0,w,c
  2431   0025FA  B4D8               	btfsc	status,2,c
  2432   0025FC  EF02  F013         	goto	u1261
  2433   002600  EF04  F013         	goto	u1260
  2434   002604                     u1261:
  2435   002604  EF08  F013         	goto	l2353
  2436   002608                     u1260:
  2437   002608  6C05               	negf	___awmod@dividend^0,c
  2438   00260A  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2439   00260C  B0D8               	btfsc	status,0,c
  2440   00260E  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2441   002610                     l2353:
  2442   002610  C005  F005         	movff	___awmod@dividend,?___awmod
  2443   002614  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2444   002618  0012               	return		;funcret
  2445   00261A                     __end_of___awmod:
  2446                           	callstack 0
  2447                           
  2448 ;; *************** function _sendTxBuf *****************
  2449 ;; Defined at:
  2450 ;;		line 74 in file "serial.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;Total ram usage:        0 bytes
  2469 ;; Hardware stack levels used: 1
  2470 ;; Hardware stack levels required when called: 4
  2471 ;; This function calls:
  2472 ;;		_isDataInTxBuf
  2473 ;; This function is called by:
  2474 ;;		_main
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text10
  2479   002C74                     __ptext10:
  2480                           	callstack 0
  2481   002C74                     _sendTxBuf:
  2482                           	callstack 26
  2483   002C74                     
  2484                           ;serial.c: 75:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2485   002C74  EC54  F016         	call	_isDataInTxBuf	;wreg free
  2486   002C78  0900               	iorlw	0
  2487   002C7A  B4D8               	btfsc	status,2,c
  2488   002C7C  EF42  F016         	goto	u2021
  2489   002C80  EF44  F016         	goto	u2020
  2490   002C84                     u2021:
  2491   002C84  EF46  F016         	goto	l327
  2492   002C88                     u2020:
  2493   002C88  010E               	movlb	14	; () banked
  2494   002C8A  852D               	bsf	45,2,b	;volatile
  2495   002C8C                     l327:
  2496   002C8C  0012               	return		;funcret
  2497   002C8E                     __end_of_sendTxBuf:
  2498                           	callstack 0
  2499                           
  2500 ;; *************** function _isDataInTxBuf *****************
  2501 ;; Defined at:
  2502 ;;		line 61 in file "serial.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      unsigned char 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; Hardware stack levels required when called: 3
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_sendTxBuf
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text11
  2531   002CA8                     __ptext11:
  2532                           	callstack 0
  2533   002CA8                     _isDataInTxBuf:
  2534                           	callstack 26
  2535   002CA8                     
  2536                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  2537   002CA8  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  2538   002CAA  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2539   002CAC  A4D8               	btfss	status,2,c
  2540   002CAE  EF5B  F016         	goto	u1511
  2541   002CB2  EF5E  F016         	goto	u1510
  2542   002CB6                     u1511:
  2543   002CB6  0E01               	movlw	1
  2544   002CB8  EF5F  F016         	goto	u1520
  2545   002CBC                     u1510:
  2546   002CBC  0E00               	movlw	0
  2547   002CBE                     u1520:
  2548   002CBE  0012               	return		;funcret
  2549   002CC0                     __end_of_isDataInTxBuf:
  2550                           	callstack 0
  2551                           
  2552 ;; *************** function _move *****************
  2553 ;; Defined at:
  2554 ;;		line 87 in file "dc_motor.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  2557 ;;		 -> main@motorL(10), 
  2558 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  2559 ;;		 -> main@motorR(10), 
  2560 ;;  color           1   36[COMRAM] unsigned char 
  2561 ;;  straightSpee    1   37[COMRAM] unsigned char 
  2562 ;;  reverseDurat    1   38[COMRAM] unsigned char 
  2563 ;;  straightRamp    1   39[COMRAM] unsigned char 
  2564 ;;  turnSpeed       1   40[COMRAM] unsigned char 
  2565 ;;  turnDuration    1   41[COMRAM] unsigned char 
  2566 ;;  turnRamp        1   42[COMRAM] unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2578 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2581 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2582 ;;Total ram usage:       11 bytes
  2583 ;; Hardware stack levels used: 1
  2584 ;; Hardware stack levels required when called: 6
  2585 ;; This function calls:
  2586 ;;		_fullSpeedAhead
  2587 ;;		_reverseOneSquare
  2588 ;;		_turnLeft
  2589 ;;		_turnRight
  2590 ;; This function is called by:
  2591 ;;		_main
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text12
  2596   000E64                     __ptext12:
  2597                           	callstack 0
  2598   000E64                     _move:
  2599                           	callstack 24
  2600   000E64                     
  2601                           ;dc_motor.c: 87: void move(DC_motor *mL, DC_motor *mR, char color ,char straightSpeed, u
      +                          nsigned char reverseDuration, unsigned char straightRamp, char turnSpeed, unsigned char 
      +                          turnDuration, unsigned char turnRamp);dc_motor.c: 88: {;dc_motor.c: 89:     if (color ==
      +                           1) {
  2602   000E64  0425               	decf	move@color^0,w,c
  2603   000E66  A4D8               	btfss	status,2,c
  2604   000E68  EF38  F007         	goto	u1951
  2605   000E6C  EF3A  F007         	goto	u1950
  2606   000E70                     u1951:
  2607   000E70  EF76  F007         	goto	l2955
  2608   000E74                     u1950:
  2609   000E74                     
  2610                           ;dc_motor.c: 90:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2611   000E74  C023  F017         	movff	move@mL,turnRight@mL
  2612   000E78  C024  F018         	movff	move@mR,turnRight@mR
  2613   000E7C  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2614   000E80  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2615   000E84  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2616   000E88  EC34  F00D         	call	_turnRight	;wreg free
  2617   000E8C                     
  2618                           ;dc_motor.c: 91:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2619   000E8C  0E05               	movlw	5
  2620   000E8E  6E2D               	movwf	(??_move+1)^0,c
  2621   000E90  0E0F               	movlw	15
  2622   000E92  6E2C               	movwf	??_move^0,c
  2623   000E94  0EF1               	movlw	241
  2624   000E96                     u2357:
  2625   000E96  2EE8               	decfsz	wreg,f,c
  2626   000E98  D7FE               	bra	u2357
  2627   000E9A  2E2C               	decfsz	??_move^0,f,c
  2628   000E9C  D7FC               	bra	u2357
  2629   000E9E  2E2D               	decfsz	(??_move+1)^0,f,c
  2630   000EA0  D7FA               	bra	u2357
  2631   000EA2  0000               	nop	
  2632   000EA4                     
  2633                           ;dc_motor.c: 92:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2634   000EA4  C023  F017         	movff	move@mL,turnRight@mL
  2635   000EA8  C024  F018         	movff	move@mR,turnRight@mR
  2636   000EAC  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2637   000EB0  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2638   000EB4  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2639   000EB8  EC34  F00D         	call	_turnRight	;wreg free
  2640                           
  2641                           ;dc_motor.c: 93:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2642   000EBC  0E05               	movlw	5
  2643   000EBE  6E2D               	movwf	(??_move+1)^0,c
  2644   000EC0  0E0F               	movlw	15
  2645   000EC2  6E2C               	movwf	??_move^0,c
  2646   000EC4  0EF1               	movlw	241
  2647   000EC6                     u2367:
  2648   000EC6  2EE8               	decfsz	wreg,f,c
  2649   000EC8  D7FE               	bra	u2367
  2650   000ECA  2E2C               	decfsz	??_move^0,f,c
  2651   000ECC  D7FC               	bra	u2367
  2652   000ECE  2E2D               	decfsz	(??_move+1)^0,f,c
  2653   000ED0  D7FA               	bra	u2367
  2654   000ED2  0000               	nop	
  2655   000ED4                     l2953:
  2656                           
  2657                           ;dc_motor.c: 94:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2658   000ED4  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2659   000ED8  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2660   000EDC  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2661   000EE0  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2662   000EE4  ECEA  F011         	call	_fullSpeedAhead	;wreg free
  2663                           
  2664                           ;dc_motor.c: 95:     }
  2665   000EE8  EFEE  F008         	goto	l453
  2666   000EEC                     l2955:
  2667   000EEC  0E02               	movlw	2
  2668   000EEE  1825               	xorwf	move@color^0,w,c
  2669   000EF0  A4D8               	btfss	status,2,c
  2670   000EF2  EF7D  F007         	goto	u1961
  2671   000EF6  EF7F  F007         	goto	u1960
  2672   000EFA                     u1961:
  2673   000EFA  EFB1  F007         	goto	l2965
  2674   000EFE                     u1960:
  2675   000EFE                     
  2676                           ;dc_motor.c: 98:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2677   000EFE  C023  F017         	movff	move@mL,turnLeft@mL
  2678   000F02  C024  F018         	movff	move@mR,turnLeft@mR
  2679   000F06  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2680   000F0A  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2681   000F0E  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2682   000F12  EC0F  F00E         	call	_turnLeft	;wreg free
  2683   000F16                     
  2684                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2685   000F16  0E05               	movlw	5
  2686   000F18  6E2D               	movwf	(??_move+1)^0,c
  2687   000F1A  0E0F               	movlw	15
  2688   000F1C  6E2C               	movwf	??_move^0,c
  2689   000F1E  0EF1               	movlw	241
  2690   000F20                     u2377:
  2691   000F20  2EE8               	decfsz	wreg,f,c
  2692   000F22  D7FE               	bra	u2377
  2693   000F24  2E2C               	decfsz	??_move^0,f,c
  2694   000F26  D7FC               	bra	u2377
  2695   000F28  2E2D               	decfsz	(??_move+1)^0,f,c
  2696   000F2A  D7FA               	bra	u2377
  2697   000F2C  0000               	nop	
  2698   000F2E                     
  2699                           ;dc_motor.c: 100:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2700   000F2E  C023  F017         	movff	move@mL,turnLeft@mL
  2701   000F32  C024  F018         	movff	move@mR,turnLeft@mR
  2702   000F36  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2703   000F3A  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2704   000F3E  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2705   000F42  EC0F  F00E         	call	_turnLeft	;wreg free
  2706                           
  2707                           ;dc_motor.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2708   000F46  0E05               	movlw	5
  2709   000F48  6E2D               	movwf	(??_move+1)^0,c
  2710   000F4A  0E0F               	movlw	15
  2711   000F4C  6E2C               	movwf	??_move^0,c
  2712   000F4E  0EF1               	movlw	241
  2713   000F50                     u2387:
  2714   000F50  2EE8               	decfsz	wreg,f,c
  2715   000F52  D7FE               	bra	u2387
  2716   000F54  2E2C               	decfsz	??_move^0,f,c
  2717   000F56  D7FC               	bra	u2387
  2718   000F58  2E2D               	decfsz	(??_move+1)^0,f,c
  2719   000F5A  D7FA               	bra	u2387
  2720   000F5C  0000               	nop	
  2721   000F5E  EF6A  F007         	goto	l2953
  2722   000F62                     l2965:
  2723   000F62  0E03               	movlw	3
  2724   000F64  1825               	xorwf	move@color^0,w,c
  2725   000F66  A4D8               	btfss	status,2,c
  2726   000F68  EFB8  F007         	goto	u1971
  2727   000F6C  EFBA  F007         	goto	u1970
  2728   000F70                     u1971:
  2729   000F70  EF1C  F008         	goto	l2981
  2730   000F74                     u1970:
  2731   000F74                     
  2732                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2733   000F74  C023  F017         	movff	move@mL,turnLeft@mL
  2734   000F78  C024  F018         	movff	move@mR,turnLeft@mR
  2735   000F7C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2736   000F80  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2737   000F84  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2738   000F88  EC0F  F00E         	call	_turnLeft	;wreg free
  2739   000F8C                     
  2740                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2741   000F8C  0E05               	movlw	5
  2742   000F8E  6E2D               	movwf	(??_move+1)^0,c
  2743   000F90  0E0F               	movlw	15
  2744   000F92  6E2C               	movwf	??_move^0,c
  2745   000F94  0EF1               	movlw	241
  2746   000F96                     u2397:
  2747   000F96  2EE8               	decfsz	wreg,f,c
  2748   000F98  D7FE               	bra	u2397
  2749   000F9A  2E2C               	decfsz	??_move^0,f,c
  2750   000F9C  D7FC               	bra	u2397
  2751   000F9E  2E2D               	decfsz	(??_move+1)^0,f,c
  2752   000FA0  D7FA               	bra	u2397
  2753   000FA2  0000               	nop	
  2754   000FA4                     
  2755                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2756   000FA4  C023  F017         	movff	move@mL,turnLeft@mL
  2757   000FA8  C024  F018         	movff	move@mR,turnLeft@mR
  2758   000FAC  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2759   000FB0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2760   000FB4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2761   000FB8  EC0F  F00E         	call	_turnLeft	;wreg free
  2762                           
  2763                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2764   000FBC  0E05               	movlw	5
  2765   000FBE  6E2D               	movwf	(??_move+1)^0,c
  2766   000FC0  0E0F               	movlw	15
  2767   000FC2  6E2C               	movwf	??_move^0,c
  2768   000FC4  0EF1               	movlw	241
  2769   000FC6                     u2407:
  2770   000FC6  2EE8               	decfsz	wreg,f,c
  2771   000FC8  D7FE               	bra	u2407
  2772   000FCA  2E2C               	decfsz	??_move^0,f,c
  2773   000FCC  D7FC               	bra	u2407
  2774   000FCE  2E2D               	decfsz	(??_move+1)^0,f,c
  2775   000FD0  D7FA               	bra	u2407
  2776   000FD2  0000               	nop	
  2777   000FD4                     
  2778                           ;dc_motor.c: 110:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2779   000FD4  C023  F017         	movff	move@mL,turnLeft@mL
  2780   000FD8  C024  F018         	movff	move@mR,turnLeft@mR
  2781   000FDC  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2782   000FE0  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2783   000FE4  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2784   000FE8  EC0F  F00E         	call	_turnLeft	;wreg free
  2785   000FEC                     
  2786                           ;dc_motor.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2787   000FEC  0E05               	movlw	5
  2788   000FEE  6E2D               	movwf	(??_move+1)^0,c
  2789   000FF0  0E0F               	movlw	15
  2790   000FF2  6E2C               	movwf	??_move^0,c
  2791   000FF4  0EF1               	movlw	241
  2792   000FF6                     u2417:
  2793   000FF6  2EE8               	decfsz	wreg,f,c
  2794   000FF8  D7FE               	bra	u2417
  2795   000FFA  2E2C               	decfsz	??_move^0,f,c
  2796   000FFC  D7FC               	bra	u2417
  2797   000FFE  2E2D               	decfsz	(??_move+1)^0,f,c
  2798   001000  D7FA               	bra	u2417
  2799   001002  0000               	nop	
  2800                           
  2801                           ;dc_motor.c: 112:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2802   001004  C023  F017         	movff	move@mL,turnLeft@mL
  2803   001008  C024  F018         	movff	move@mR,turnLeft@mR
  2804   00100C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2805   001010  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2806   001014  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2807   001018  EC0F  F00E         	call	_turnLeft	;wreg free
  2808   00101C                     
  2809                           ;dc_motor.c: 113:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2810   00101C  0E05               	movlw	5
  2811   00101E  6E2D               	movwf	(??_move+1)^0,c
  2812   001020  0E0F               	movlw	15
  2813   001022  6E2C               	movwf	??_move^0,c
  2814   001024  0EF1               	movlw	241
  2815   001026                     u2427:
  2816   001026  2EE8               	decfsz	wreg,f,c
  2817   001028  D7FE               	bra	u2427
  2818   00102A  2E2C               	decfsz	??_move^0,f,c
  2819   00102C  D7FC               	bra	u2427
  2820   00102E  2E2D               	decfsz	(??_move+1)^0,f,c
  2821   001030  D7FA               	bra	u2427
  2822   001032  0000               	nop	
  2823   001034  EF6A  F007         	goto	l2953
  2824   001038                     l2981:
  2825   001038  0E04               	movlw	4
  2826   00103A  1825               	xorwf	move@color^0,w,c
  2827   00103C  A4D8               	btfss	status,2,c
  2828   00103E  EF23  F008         	goto	u1981
  2829   001042  EF25  F008         	goto	u1980
  2830   001046                     u1981:
  2831   001046  EF79  F008         	goto	l2993
  2832   00104A                     u1980:
  2833   00104A                     
  2834                           ;dc_motor.c: 118:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2835   00104A  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2836   00104E  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2837   001052  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2838   001056  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2839   00105A  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2840   00105E  EC76  F00B         	call	_reverseOneSquare	;wreg free
  2841   001062                     l2985:
  2842                           
  2843                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2844   001062  0E05               	movlw	5
  2845   001064  6E2D               	movwf	(??_move+1)^0,c
  2846   001066  0E0F               	movlw	15
  2847   001068  6E2C               	movwf	??_move^0,c
  2848   00106A  0EF1               	movlw	241
  2849   00106C                     u2437:
  2850   00106C  2EE8               	decfsz	wreg,f,c
  2851   00106E  D7FE               	bra	u2437
  2852   001070  2E2C               	decfsz	??_move^0,f,c
  2853   001072  D7FC               	bra	u2437
  2854   001074  2E2D               	decfsz	(??_move+1)^0,f,c
  2855   001076  D7FA               	bra	u2437
  2856   001078  0000               	nop	
  2857   00107A                     
  2858                           ;dc_motor.c: 120:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2859   00107A  C023  F017         	movff	move@mL,turnRight@mL
  2860   00107E  C024  F018         	movff	move@mR,turnRight@mR
  2861   001082  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2862   001086  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2863   00108A  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2864   00108E  EC34  F00D         	call	_turnRight	;wreg free
  2865                           
  2866                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2867   001092  0E05               	movlw	5
  2868   001094  6E2D               	movwf	(??_move+1)^0,c
  2869   001096  0E0F               	movlw	15
  2870   001098  6E2C               	movwf	??_move^0,c
  2871   00109A  0EF1               	movlw	241
  2872   00109C                     u2447:
  2873   00109C  2EE8               	decfsz	wreg,f,c
  2874   00109E  D7FE               	bra	u2447
  2875   0010A0  2E2C               	decfsz	??_move^0,f,c
  2876   0010A2  D7FC               	bra	u2447
  2877   0010A4  2E2D               	decfsz	(??_move+1)^0,f,c
  2878   0010A6  D7FA               	bra	u2447
  2879   0010A8  0000               	nop	
  2880   0010AA                     
  2881                           ;dc_motor.c: 122:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2882   0010AA  C023  F017         	movff	move@mL,turnRight@mL
  2883   0010AE  C024  F018         	movff	move@mR,turnRight@mR
  2884   0010B2  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2885   0010B6  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2886   0010BA  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2887   0010BE  EC34  F00D         	call	_turnRight	;wreg free
  2888   0010C2                     l2991:
  2889                           
  2890                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2891   0010C2  0E05               	movlw	5
  2892   0010C4  6E2D               	movwf	(??_move+1)^0,c
  2893   0010C6  0E0F               	movlw	15
  2894   0010C8  6E2C               	movwf	??_move^0,c
  2895   0010CA  0EF1               	movlw	241
  2896   0010CC                     u2457:
  2897   0010CC  2EE8               	decfsz	wreg,f,c
  2898   0010CE  D7FE               	bra	u2457
  2899   0010D0  2E2C               	decfsz	??_move^0,f,c
  2900   0010D2  D7FC               	bra	u2457
  2901   0010D4  2E2D               	decfsz	(??_move+1)^0,f,c
  2902   0010D6  D7FA               	bra	u2457
  2903   0010D8  0000               	nop	
  2904                           
  2905                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  2906   0010DA  C023  F017         	movff	move@mL,fullSpeedAhead@mL
  2907   0010DE  C024  F018         	movff	move@mR,fullSpeedAhead@mR
  2908   0010E2  C026  F019         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  2909   0010E6  C028  F01A         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  2910   0010EA  ECEA  F011         	call	_fullSpeedAhead	;wreg free
  2911                           
  2912                           ;dc_motor.c: 125:     }
  2913   0010EE  EFEE  F008         	goto	l453
  2914   0010F2                     l2993:
  2915   0010F2  0E05               	movlw	5
  2916   0010F4  1825               	xorwf	move@color^0,w,c
  2917   0010F6  A4D8               	btfss	status,2,c
  2918   0010F8  EF80  F008         	goto	u1991
  2919   0010FC  EF82  F008         	goto	u1990
  2920   001100                     u1991:
  2921   001100  EFC0  F008         	goto	l3005
  2922   001104                     u1990:
  2923   001104                     
  2924                           ;dc_motor.c: 128:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  2925   001104  C023  F017         	movff	move@mL,reverseOneSquare@mL
  2926   001108  C024  F018         	movff	move@mR,reverseOneSquare@mR
  2927   00110C  C026  F019         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  2928   001110  C027  F01A         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  2929   001114  C028  F01B         	movff	move@straightRamp,reverseOneSquare@straightRamp
  2930   001118  EC76  F00B         	call	_reverseOneSquare	;wreg free
  2931   00111C                     l2997:
  2932                           
  2933                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2934   00111C  0E05               	movlw	5
  2935   00111E  6E2D               	movwf	(??_move+1)^0,c
  2936   001120  0E0F               	movlw	15
  2937   001122  6E2C               	movwf	??_move^0,c
  2938   001124  0EF1               	movlw	241
  2939   001126                     u2467:
  2940   001126  2EE8               	decfsz	wreg,f,c
  2941   001128  D7FE               	bra	u2467
  2942   00112A  2E2C               	decfsz	??_move^0,f,c
  2943   00112C  D7FC               	bra	u2467
  2944   00112E  2E2D               	decfsz	(??_move+1)^0,f,c
  2945   001130  D7FA               	bra	u2467
  2946   001132  0000               	nop	
  2947   001134                     
  2948                           ;dc_motor.c: 130:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2949   001134  C023  F017         	movff	move@mL,turnLeft@mL
  2950   001138  C024  F018         	movff	move@mR,turnLeft@mR
  2951   00113C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2952   001140  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2953   001144  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2954   001148  EC0F  F00E         	call	_turnLeft	;wreg free
  2955                           
  2956                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2957   00114C  0E05               	movlw	5
  2958   00114E  6E2D               	movwf	(??_move+1)^0,c
  2959   001150  0E0F               	movlw	15
  2960   001152  6E2C               	movwf	??_move^0,c
  2961   001154  0EF1               	movlw	241
  2962   001156                     u2477:
  2963   001156  2EE8               	decfsz	wreg,f,c
  2964   001158  D7FE               	bra	u2477
  2965   00115A  2E2C               	decfsz	??_move^0,f,c
  2966   00115C  D7FC               	bra	u2477
  2967   00115E  2E2D               	decfsz	(??_move+1)^0,f,c
  2968   001160  D7FA               	bra	u2477
  2969   001162  0000               	nop	
  2970   001164                     
  2971                           ;dc_motor.c: 132:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  2972   001164  C023  F017         	movff	move@mL,turnLeft@mL
  2973   001168  C024  F018         	movff	move@mR,turnLeft@mR
  2974   00116C  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  2975   001170  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  2976   001174  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  2977   001178  EC0F  F00E         	call	_turnLeft	;wreg free
  2978   00117C  EF61  F008         	goto	l2991
  2979   001180                     l3005:
  2980   001180  0E06               	movlw	6
  2981   001182  1825               	xorwf	move@color^0,w,c
  2982   001184  A4D8               	btfss	status,2,c
  2983   001186  EFC7  F008         	goto	u2001
  2984   00118A  EFC9  F008         	goto	u2000
  2985   00118E                     u2001:
  2986   00118E  EFD7  F008         	goto	l3017
  2987   001192                     u2000:
  2988   001192                     
  2989                           ;dc_motor.c: 138:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  2990   001192  C023  F017         	movff	move@mL,turnRight@mL
  2991   001196  C024  F018         	movff	move@mR,turnRight@mR
  2992   00119A  C029  F019         	movff	move@turnSpeed,turnRight@turnSpeed
  2993   00119E  C02A  F01A         	movff	move@turnDuration,turnRight@turnDuration
  2994   0011A2  C02B  F01B         	movff	move@turnRamp,turnRight@turnRamp
  2995   0011A6  EC34  F00D         	call	_turnRight	;wreg free
  2996   0011AA  EF31  F008         	goto	l2985
  2997   0011AE                     l3017:
  2998   0011AE  0E07               	movlw	7
  2999   0011B0  1825               	xorwf	move@color^0,w,c
  3000   0011B2  A4D8               	btfss	status,2,c
  3001   0011B4  EFDE  F008         	goto	u2011
  3002   0011B8  EFE0  F008         	goto	u2010
  3003   0011BC                     u2011:
  3004   0011BC  EFEE  F008         	goto	l451
  3005   0011C0                     u2010:
  3006   0011C0                     
  3007                           ;dc_motor.c: 148:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3008   0011C0  C023  F017         	movff	move@mL,turnLeft@mL
  3009   0011C4  C024  F018         	movff	move@mR,turnLeft@mR
  3010   0011C8  C029  F019         	movff	move@turnSpeed,turnLeft@turnSpeed
  3011   0011CC  C02A  F01A         	movff	move@turnDuration,turnLeft@turnDuration
  3012   0011D0  C02B  F01B         	movff	move@turnRamp,turnLeft@turnRamp
  3013   0011D4  EC0F  F00E         	call	_turnLeft	;wreg free
  3014   0011D8  EF8E  F008         	goto	l2997
  3015   0011DC                     l451:
  3016   0011DC                     l453:
  3017   0011DC  0012               	return		;funcret
  3018   0011DE                     __end_of_move:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _reverseOneSquare *****************
  3022 ;; Defined at:
  3023 ;;		line 263 in file "dc_motor.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3026 ;;		 -> main@motorL(10), 
  3027 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3028 ;;		 -> main@motorR(10), 
  3029 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3030 ;;  reverseDurat    1   25[COMRAM] unsigned char 
  3031 ;;  straightRamp    1   26[COMRAM] unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  cur_power       2   32[COMRAM] int 
  3034 ;;  i               2   30[COMRAM] int 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3044 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3047 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;Total ram usage:       12 bytes
  3049 ;; Hardware stack levels used: 1
  3050 ;; Hardware stack levels required when called: 5
  3051 ;; This function calls:
  3052 ;;		_setMotorPWM
  3053 ;; This function is called by:
  3054 ;;		_move
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text13
  3059   0016EC                     __ptext13:
  3060                           	callstack 0
  3061   0016EC                     _reverseOneSquare:
  3062                           	callstack 24
  3063   0016EC                     
  3064                           ;dc_motor.c: 263: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 264: {;dc_motor.c
      +                          : 265:     mL->direction = 0;
  3065   0016EC  5017               	movf	reverseOneSquare@mL^0,w,c
  3066   0016EE  6ED9               	movwf	fsr2l,c
  3067   0016F0  6ADA               	clrf	fsr2h,c
  3068   0016F2  0E01               	movlw	1
  3069   0016F4  26D9               	addwf	fsr2l,f,c
  3070   0016F6  6ADF               	clrf	indf2,c
  3071                           
  3072                           ;dc_motor.c: 266:     mR->direction = 0;
  3073   0016F8  5018               	movf	reverseOneSquare@mR^0,w,c
  3074   0016FA  6ED9               	movwf	fsr2l,c
  3075   0016FC  6ADA               	clrf	fsr2h,c
  3076   0016FE  0E01               	movlw	1
  3077   001700  26D9               	addwf	fsr2l,f,c
  3078   001702  6ADF               	clrf	indf2,c
  3079   001704                     
  3080                           ;dc_motor.c: 267:     int i;;dc_motor.c: 268:     int cur_power;;dc_motor.c: 269:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3081   001704  0E00               	movlw	0
  3082   001706  6E22               	movwf	(reverseOneSquare@cur_power+1)^0,c
  3083   001708  0E01               	movlw	1
  3084   00170A  6E21               	movwf	reverseOneSquare@cur_power^0,c
  3085   00170C  EFCA  F00B         	goto	l2665
  3086   001710                     l2651:
  3087                           
  3088                           ;dc_motor.c: 270:         mL->power = cur_power+mL->compensation;
  3089   001710  5017               	movf	reverseOneSquare@mL^0,w,c
  3090   001712  6ED9               	movwf	fsr2l,c
  3091   001714  6ADA               	clrf	fsr2h,c
  3092   001716  5017               	movf	reverseOneSquare@mL^0,w,c
  3093   001718  6EE1               	movwf	fsr1l,c
  3094   00171A  6AE2               	clrf	fsr1h,c
  3095   00171C  0E09               	movlw	9
  3096   00171E  26E1               	addwf	fsr1l,f,c
  3097   001720  50E7               	movf	indf1,w,c
  3098   001722  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3099   001724  6EDF               	movwf	indf2,c
  3100                           
  3101                           ;dc_motor.c: 271:         mR->power = cur_power+mR->compensation;
  3102   001726  5018               	movf	reverseOneSquare@mR^0,w,c
  3103   001728  6ED9               	movwf	fsr2l,c
  3104   00172A  6ADA               	clrf	fsr2h,c
  3105   00172C  5018               	movf	reverseOneSquare@mR^0,w,c
  3106   00172E  6EE1               	movwf	fsr1l,c
  3107   001730  6AE2               	clrf	fsr1h,c
  3108   001732  0E09               	movlw	9
  3109   001734  26E1               	addwf	fsr1l,f,c
  3110   001736  50E7               	movf	indf1,w,c
  3111   001738  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3112   00173A  6EDF               	movwf	indf2,c
  3113   00173C                     
  3114                           ;dc_motor.c: 272:         setMotorPWM(mL);
  3115   00173C  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3116   001740  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3117   001744                     
  3118                           ;dc_motor.c: 273:         setMotorPWM(mR);
  3119   001744  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3120   001748  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3121   00174C                     
  3122                           ;dc_motor.c: 274:         for (i=0;i<straightRamp;i++) {
  3123   00174C  0E00               	movlw	0
  3124   00174E  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3125   001750  0E00               	movlw	0
  3126   001752  6E1F               	movwf	reverseOneSquare@i^0,c
  3127   001754  EFB6  F00B         	goto	l509
  3128   001758                     l2659:
  3129                           
  3130                           ;dc_motor.c: 275:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3131   001758  0E68               	movlw	104
  3132   00175A  6E1C               	movwf	??_reverseOneSquare^0,c
  3133   00175C  0EE4               	movlw	228
  3134   00175E                     u2487:
  3135   00175E  2EE8               	decfsz	wreg,f,c
  3136   001760  D7FE               	bra	u2487
  3137   001762  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3138   001764  D7FC               	bra	u2487
  3139   001766  D000               	nop2	
  3140   001768                     
  3141                           ;dc_motor.c: 276:         }
  3142   001768  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3143   00176A  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3144   00176C                     l509:
  3145   00176C  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3146   00176E  6E1C               	movwf	??_reverseOneSquare^0,c
  3147   001770  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3148   001772  501C               	movf	??_reverseOneSquare^0,w,c
  3149   001774  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3150   001776  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3151   001778  0A80               	xorlw	128
  3152   00177A  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3153   00177C  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3154   00177E  0A80               	xorlw	128
  3155   001780  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3156   001782  A0D8               	btfss	status,0,c
  3157   001784  EFC6  F00B         	goto	u1651
  3158   001788  EFC8  F00B         	goto	u1650
  3159   00178C                     u1651:
  3160   00178C  EFAC  F00B         	goto	l2659
  3161   001790                     u1650:
  3162   001790                     
  3163                           ;dc_motor.c: 277:     }
  3164   001790  4A21               	infsnz	reverseOneSquare@cur_power^0,f,c
  3165   001792  2A22               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  3166   001794                     l2665:
  3167   001794  5019               	movf	reverseOneSquare@straightSpeed^0,w,c
  3168   001796  6E1C               	movwf	??_reverseOneSquare^0,c
  3169   001798  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3170   00179A  5021               	movf	reverseOneSquare@cur_power^0,w,c
  3171   00179C  5C1C               	subwf	??_reverseOneSquare^0,w,c
  3172   00179E  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3173   0017A0  0A80               	xorlw	128
  3174   0017A2  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3175   0017A4  5022               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  3176   0017A6  0A80               	xorlw	128
  3177   0017A8  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3178   0017AA  B0D8               	btfsc	status,0,c
  3179   0017AC  EFDA  F00B         	goto	u1661
  3180   0017B0  EFDC  F00B         	goto	u1660
  3181   0017B4                     u1661:
  3182   0017B4  EF88  F00B         	goto	l2651
  3183   0017B8                     u1660:
  3184   0017B8                     
  3185                           ;dc_motor.c: 279:     for (i=0;i<reverseDuration;i++) {
  3186   0017B8  0E00               	movlw	0
  3187   0017BA  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3188   0017BC  0E00               	movlw	0
  3189   0017BE  6E1F               	movwf	reverseOneSquare@i^0,c
  3190   0017C0  EFEC  F00B         	goto	l513
  3191   0017C4                     l2669:
  3192                           
  3193                           ;dc_motor.c: 280:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3194   0017C4  0E68               	movlw	104
  3195   0017C6  6E1C               	movwf	??_reverseOneSquare^0,c
  3196   0017C8  0EE4               	movlw	228
  3197   0017CA                     u2497:
  3198   0017CA  2EE8               	decfsz	wreg,f,c
  3199   0017CC  D7FE               	bra	u2497
  3200   0017CE  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3201   0017D0  D7FC               	bra	u2497
  3202   0017D2  D000               	nop2	
  3203   0017D4                     
  3204                           ;dc_motor.c: 281:         }
  3205   0017D4  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3206   0017D6  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3207   0017D8                     l513:
  3208   0017D8  501A               	movf	reverseOneSquare@reverseDuration^0,w,c
  3209   0017DA  6E1C               	movwf	??_reverseOneSquare^0,c
  3210   0017DC  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3211   0017DE  501C               	movf	??_reverseOneSquare^0,w,c
  3212   0017E0  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3213   0017E2  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3214   0017E4  0A80               	xorlw	128
  3215   0017E6  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3216   0017E8  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3217   0017EA  0A80               	xorlw	128
  3218   0017EC  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3219   0017EE  A0D8               	btfss	status,0,c
  3220   0017F0  EFFC  F00B         	goto	u1671
  3221   0017F4  EFFE  F00B         	goto	u1670
  3222   0017F8                     u1671:
  3223   0017F8  EFE2  F00B         	goto	l2669
  3224   0017FC                     u1670:
  3225   0017FC                     
  3226                           ;dc_motor.c: 283:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  3227   0017FC  C019  F021         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  3228   001800  6A22               	clrf	(reverseOneSquare@cur_power+1)^0,c
  3229   001802                     l2673:
  3230   001802  BE22               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  3231   001804  EF08  F00C         	goto	u1680
  3232   001808  EF06  F00C         	goto	u1681
  3233   00180C                     u1681:
  3234   00180C  EF0A  F00C         	goto	l2677
  3235   001810                     u1680:
  3236   001810  EF4F  F00C         	goto	l2693
  3237   001814                     l2677:
  3238                           
  3239                           ;dc_motor.c: 284:         mL->power = cur_power+mL->compensation;
  3240   001814  5017               	movf	reverseOneSquare@mL^0,w,c
  3241   001816  6ED9               	movwf	fsr2l,c
  3242   001818  6ADA               	clrf	fsr2h,c
  3243   00181A  5017               	movf	reverseOneSquare@mL^0,w,c
  3244   00181C  6EE1               	movwf	fsr1l,c
  3245   00181E  6AE2               	clrf	fsr1h,c
  3246   001820  0E09               	movlw	9
  3247   001822  26E1               	addwf	fsr1l,f,c
  3248   001824  50E7               	movf	indf1,w,c
  3249   001826  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3250   001828  6EDF               	movwf	indf2,c
  3251                           
  3252                           ;dc_motor.c: 285:         mR->power = cur_power+mR->compensation;
  3253   00182A  5018               	movf	reverseOneSquare@mR^0,w,c
  3254   00182C  6ED9               	movwf	fsr2l,c
  3255   00182E  6ADA               	clrf	fsr2h,c
  3256   001830  5018               	movf	reverseOneSquare@mR^0,w,c
  3257   001832  6EE1               	movwf	fsr1l,c
  3258   001834  6AE2               	clrf	fsr1h,c
  3259   001836  0E09               	movlw	9
  3260   001838  26E1               	addwf	fsr1l,f,c
  3261   00183A  50E7               	movf	indf1,w,c
  3262   00183C  2421               	addwf	reverseOneSquare@cur_power^0,w,c
  3263   00183E  6EDF               	movwf	indf2,c
  3264   001840                     
  3265                           ;dc_motor.c: 286:         setMotorPWM(mL);
  3266   001840  C017  F012         	movff	reverseOneSquare@mL,setMotorPWM@m
  3267   001844  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3268   001848                     
  3269                           ;dc_motor.c: 287:         setMotorPWM(mR);
  3270   001848  C018  F012         	movff	reverseOneSquare@mR,setMotorPWM@m
  3271   00184C  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3272   001850                     
  3273                           ;dc_motor.c: 288:         for (i=0;i<straightRamp;i++) {
  3274   001850  0E00               	movlw	0
  3275   001852  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  3276   001854  0E00               	movlw	0
  3277   001856  6E1F               	movwf	reverseOneSquare@i^0,c
  3278   001858  EF38  F00C         	goto	l518
  3279   00185C                     l2685:
  3280                           
  3281                           ;dc_motor.c: 289:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3282   00185C  0E68               	movlw	104
  3283   00185E  6E1C               	movwf	??_reverseOneSquare^0,c
  3284   001860  0EE4               	movlw	228
  3285   001862                     u2507:
  3286   001862  2EE8               	decfsz	wreg,f,c
  3287   001864  D7FE               	bra	u2507
  3288   001866  2E1C               	decfsz	??_reverseOneSquare^0,f,c
  3289   001868  D7FC               	bra	u2507
  3290   00186A  D000               	nop2	
  3291   00186C                     
  3292                           ;dc_motor.c: 290:         }
  3293   00186C  4A1F               	infsnz	reverseOneSquare@i^0,f,c
  3294   00186E  2A20               	incf	(reverseOneSquare@i+1)^0,f,c
  3295   001870                     l518:
  3296   001870  501B               	movf	reverseOneSquare@straightRamp^0,w,c
  3297   001872  6E1C               	movwf	??_reverseOneSquare^0,c
  3298   001874  6A1D               	clrf	(??_reverseOneSquare+1)^0,c
  3299   001876  501C               	movf	??_reverseOneSquare^0,w,c
  3300   001878  5C1F               	subwf	reverseOneSquare@i^0,w,c
  3301   00187A  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  3302   00187C  0A80               	xorlw	128
  3303   00187E  6E1E               	movwf	(??_reverseOneSquare+2)^0,c
  3304   001880  501D               	movf	(??_reverseOneSquare+1)^0,w,c
  3305   001882  0A80               	xorlw	128
  3306   001884  581E               	subwfb	(??_reverseOneSquare+2)^0,w,c
  3307   001886  A0D8               	btfss	status,0,c
  3308   001888  EF48  F00C         	goto	u1691
  3309   00188C  EF4A  F00C         	goto	u1690
  3310   001890                     u1691:
  3311   001890  EF2E  F00C         	goto	l2685
  3312   001894                     u1690:
  3313   001894                     
  3314                           ;dc_motor.c: 291:     }
  3315   001894  0621               	decf	reverseOneSquare@cur_power^0,f,c
  3316   001896  A0D8               	btfss	status,0,c
  3317   001898  0622               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  3318   00189A  EF01  F00C         	goto	l2673
  3319   00189E                     l2693:
  3320                           
  3321                           ;dc_motor.c: 292:     mL->power = 0;
  3322   00189E  5017               	movf	reverseOneSquare@mL^0,w,c
  3323   0018A0  6ED9               	movwf	fsr2l,c
  3324   0018A2  6ADA               	clrf	fsr2h,c
  3325   0018A4  6ADF               	clrf	indf2,c
  3326                           
  3327                           ;dc_motor.c: 293:     mR->power = 0;
  3328   0018A6  5018               	movf	reverseOneSquare@mR^0,w,c
  3329   0018A8  6ED9               	movwf	fsr2l,c
  3330   0018AA  6ADA               	clrf	fsr2h,c
  3331   0018AC  6ADF               	clrf	indf2,c
  3332   0018AE  0012               	return		;funcret
  3333   0018B0                     __end_of_reverseOneSquare:
  3334                           	callstack 0
  3335                           
  3336 ;; *************** function _fullSpeedAhead *****************
  3337 ;; Defined at:
  3338 ;;		line 246 in file "dc_motor.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  3341 ;;		 -> main@motorL(10), 
  3342 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  3343 ;;		 -> main@motorR(10), 
  3344 ;;  straightSpee    1   24[COMRAM] unsigned char 
  3345 ;;  straightRamp    1   25[COMRAM] unsigned char 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  cur_power       2   31[COMRAM] int 
  3348 ;;  i               2   29[COMRAM] int 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3359 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3360 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;Total ram usage:       11 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 5
  3365 ;; This function calls:
  3366 ;;		_setMotorPWM
  3367 ;; This function is called by:
  3368 ;;		_main
  3369 ;;		_move
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text14
  3374   0023D4                     __ptext14:
  3375                           	callstack 0
  3376   0023D4                     _fullSpeedAhead:
  3377                           	callstack 24
  3378   0023D4                     
  3379                           ;dc_motor.c: 246: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 247: {;dc_motor.c: 248:     mL->direction = 1;
  3380   0023D4  5017               	movf	fullSpeedAhead@mL^0,w,c
  3381   0023D6  6ED9               	movwf	fsr2l,c
  3382   0023D8  6ADA               	clrf	fsr2h,c
  3383   0023DA  0E01               	movlw	1
  3384   0023DC  26D9               	addwf	fsr2l,f,c
  3385   0023DE  0E01               	movlw	1
  3386   0023E0  6EDF               	movwf	indf2,c
  3387                           
  3388                           ;dc_motor.c: 249:     mR->direction = 1;
  3389   0023E2  5018               	movf	fullSpeedAhead@mR^0,w,c
  3390   0023E4  6ED9               	movwf	fsr2l,c
  3391   0023E6  6ADA               	clrf	fsr2h,c
  3392   0023E8  0E01               	movlw	1
  3393   0023EA  26D9               	addwf	fsr2l,f,c
  3394   0023EC  0E01               	movlw	1
  3395   0023EE  6EDF               	movwf	indf2,c
  3396   0023F0                     
  3397                           ;dc_motor.c: 250:     int i;;dc_motor.c: 251:     int cur_power;;dc_motor.c: 252:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  3398   0023F0  0E00               	movlw	0
  3399   0023F2  6E21               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  3400   0023F4  0E01               	movlw	1
  3401   0023F6  6E20               	movwf	fullSpeedAhead@cur_power^0,c
  3402   0023F8  EF40  F012         	goto	l2493
  3403   0023FC                     l2479:
  3404                           
  3405                           ;dc_motor.c: 253:         mL->power = cur_power+mL->compensation;
  3406   0023FC  5017               	movf	fullSpeedAhead@mL^0,w,c
  3407   0023FE  6ED9               	movwf	fsr2l,c
  3408   002400  6ADA               	clrf	fsr2h,c
  3409   002402  5017               	movf	fullSpeedAhead@mL^0,w,c
  3410   002404  6EE1               	movwf	fsr1l,c
  3411   002406  6AE2               	clrf	fsr1h,c
  3412   002408  0E09               	movlw	9
  3413   00240A  26E1               	addwf	fsr1l,f,c
  3414   00240C  50E7               	movf	indf1,w,c
  3415   00240E  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3416   002410  6EDF               	movwf	indf2,c
  3417                           
  3418                           ;dc_motor.c: 254:         mR->power = cur_power+mR->compensation;
  3419   002412  5018               	movf	fullSpeedAhead@mR^0,w,c
  3420   002414  6ED9               	movwf	fsr2l,c
  3421   002416  6ADA               	clrf	fsr2h,c
  3422   002418  5018               	movf	fullSpeedAhead@mR^0,w,c
  3423   00241A  6EE1               	movwf	fsr1l,c
  3424   00241C  6AE2               	clrf	fsr1h,c
  3425   00241E  0E09               	movlw	9
  3426   002420  26E1               	addwf	fsr1l,f,c
  3427   002422  50E7               	movf	indf1,w,c
  3428   002424  2420               	addwf	fullSpeedAhead@cur_power^0,w,c
  3429   002426  6EDF               	movwf	indf2,c
  3430   002428                     
  3431                           ;dc_motor.c: 255:         setMotorPWM(mL);
  3432   002428  C017  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3433   00242C  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3434   002430                     
  3435                           ;dc_motor.c: 256:         setMotorPWM(mR);
  3436   002430  C018  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3437   002434  ECA2  F00F         	call	_setMotorPWM	;wreg free
  3438   002438                     
  3439                           ;dc_motor.c: 257:         for (i=0;i<straightRamp;i++) {
  3440   002438  0E00               	movlw	0
  3441   00243A  6E1F               	movwf	(fullSpeedAhead@i+1)^0,c
  3442   00243C  0E00               	movlw	0
  3443   00243E  6E1E               	movwf	fullSpeedAhead@i^0,c
  3444   002440  EF2C  F012         	goto	l500
  3445   002444                     l2487:
  3446                           
  3447                           ;dc_motor.c: 258:             _delay((unsigned long)((5)*(64000000/4000.0)));
  3448   002444  0E68               	movlw	104
  3449   002446  6E1B               	movwf	??_fullSpeedAhead^0,c
  3450   002448  0EE4               	movlw	228
  3451   00244A                     u2517:
  3452   00244A  2EE8               	decfsz	wreg,f,c
  3453   00244C  D7FE               	bra	u2517
  3454   00244E  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  3455   002450  D7FC               	bra	u2517
  3456   002452  D000               	nop2	
  3457   002454                     
  3458                           ;dc_motor.c: 259:         }
  3459   002454  4A1E               	infsnz	fullSpeedAhead@i^0,f,c
  3460   002456  2A1F               	incf	(fullSpeedAhead@i+1)^0,f,c
  3461   002458                     l500:
  3462   002458  501A               	movf	fullSpeedAhead@straightRamp^0,w,c
  3463   00245A  6E1B               	movwf	??_fullSpeedAhead^0,c
  3464   00245C  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3465   00245E  501B               	movf	??_fullSpeedAhead^0,w,c
  3466   002460  5C1E               	subwf	fullSpeedAhead@i^0,w,c
  3467   002462  501F               	movf	(fullSpeedAhead@i+1)^0,w,c
  3468   002464  0A80               	xorlw	128
  3469   002466  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3470   002468  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3471   00246A  0A80               	xorlw	128
  3472   00246C  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3473   00246E  A0D8               	btfss	status,0,c
  3474   002470  EF3C  F012         	goto	u1471
  3475   002474  EF3E  F012         	goto	u1470
  3476   002478                     u1471:
  3477   002478  EF22  F012         	goto	l2487
  3478   00247C                     u1470:
  3479   00247C                     
  3480                           ;dc_motor.c: 260:     }
  3481   00247C  4A20               	infsnz	fullSpeedAhead@cur_power^0,f,c
  3482   00247E  2A21               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  3483   002480                     l2493:
  3484   002480  5019               	movf	fullSpeedAhead@straightSpeed^0,w,c
  3485   002482  6E1B               	movwf	??_fullSpeedAhead^0,c
  3486   002484  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  3487   002486  5020               	movf	fullSpeedAhead@cur_power^0,w,c
  3488   002488  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  3489   00248A  501C               	movf	(??_fullSpeedAhead+1)^0,w,c
  3490   00248C  0A80               	xorlw	128
  3491   00248E  6E1D               	movwf	(??_fullSpeedAhead+2)^0,c
  3492   002490  5021               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  3493   002492  0A80               	xorlw	128
  3494   002494  581D               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  3495   002496  B0D8               	btfsc	status,0,c
  3496   002498  EF50  F012         	goto	u1481
  3497   00249C  EF52  F012         	goto	u1480
  3498   0024A0                     u1481:
  3499   0024A0  EFFE  F011         	goto	l2479
  3500   0024A4                     u1480:
  3501   0024A4  0012               	return		;funcret
  3502   0024A6                     __end_of_fullSpeedAhead:
  3503                           	callstack 0
  3504                           
  3505 ;; *************** function _initUSART4 *****************
  3506 ;; Defined at:
  3507 ;;		line 4 in file "serial.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;		None
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3525 ;;Total ram usage:        0 bytes
  3526 ;; Hardware stack levels used: 1
  3527 ;; Hardware stack levels required when called: 3
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_main
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text15
  3536   002C56                     __ptext15:
  3537                           	callstack 0
  3538   002C56                     _initUSART4:
  3539                           	callstack 27
  3540   002C56                     
  3541                           ;serial.c: 7:     RC0PPS = 0x12;
  3542   002C56  0E12               	movlw	18
  3543   002C58  010E               	movlb	14	; () banked
  3544   002C5A  6F62               	movwf	98,b	;volatile
  3545                           
  3546                           ;serial.c: 8:     RX4PPS = 0x11;
  3547   002C5C  0E11               	movlw	17
  3548   002C5E  6F15               	movwf	21,b	;volatile
  3549   002C60                     
  3550                           ; BSR set to: 14
  3551                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  3552   002C60  97E9               	bcf	233,3,b	;volatile
  3553   002C62                     
  3554                           ; BSR set to: 14
  3555                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  3556   002C62  95E8               	bcf	232,2,b	;volatile
  3557                           
  3558                           ;serial.c: 13:     SP4BRGL = 51;
  3559   002C64  0E33               	movlw	51
  3560   002C66  6FE5               	movwf	229,b	;volatile
  3561                           
  3562                           ;serial.c: 14:     SP4BRGH = 0;
  3563   002C68  0E00               	movlw	0
  3564   002C6A  6FE6               	movwf	230,b	;volatile
  3565   002C6C                     
  3566                           ; BSR set to: 14
  3567                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  3568   002C6C  89E7               	bsf	231,4,b	;volatile
  3569   002C6E                     
  3570                           ; BSR set to: 14
  3571                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  3572   002C6E  8BE8               	bsf	232,5,b	;volatile
  3573   002C70                     
  3574                           ; BSR set to: 14
  3575                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  3576   002C70  8FE7               	bsf	231,7,b	;volatile
  3577   002C72                     
  3578                           ; BSR set to: 14
  3579   002C72  0012               	return		;funcret
  3580   002C74                     __end_of_initUSART4:
  3581                           	callstack 0
  3582                           
  3583 ;; *************** function _initDCmotorsPWM *****************
  3584 ;; Defined at:
  3585 ;;		line 5 in file "dc_motor.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      void 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3603 ;;Total ram usage:        2 bytes
  3604 ;; Hardware stack levels used: 1
  3605 ;; Hardware stack levels required when called: 3
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_main
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text16
  3614   0026C4                     __ptext16:
  3615                           	callstack 0
  3616   0026C4                     _initDCmotorsPWM:
  3617                           	callstack 27
  3618   0026C4                     
  3619                           ;dc_motor.c: 8:     LATEbits.LATE2=0;
  3620   0026C4  947D               	bcf	125,2,c	;volatile
  3621                           
  3622                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
  3623   0026C6  9485               	bcf	133,2,c	;volatile
  3624                           
  3625                           ;dc_motor.c: 10:     LATEbits.LATE4=0;
  3626   0026C8  987D               	bcf	125,4,c	;volatile
  3627                           
  3628                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
  3629   0026CA  9885               	bcf	133,4,c	;volatile
  3630                           
  3631                           ;dc_motor.c: 12:     LATCbits.LATC7=0;
  3632   0026CC  9E7B               	bcf	123,7,c	;volatile
  3633                           
  3634                           ;dc_motor.c: 13:     TRISCbits.TRISC7=0;
  3635   0026CE  9E83               	bcf	131,7,c	;volatile
  3636                           
  3637                           ;dc_motor.c: 14:     LATGbits.LATG6=0;
  3638   0026D0  9C7F               	bcf	127,6,c	;volatile
  3639                           
  3640                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
  3641   0026D2  9C87               	bcf	135,6,c	;volatile
  3642   0026D4                     
  3643                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3644   0026D4  0E05               	movlw	5
  3645   0026D6  010E               	movlb	14	; () banked
  3646   0026D8  6F74               	movwf	116,b	;volatile
  3647                           
  3648                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3649   0026DA  0E06               	movlw	6
  3650   0026DC  6F76               	movwf	118,b	;volatile
  3651                           
  3652                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3653   0026DE  0E07               	movlw	7
  3654   0026E0  6F69               	movwf	105,b	;volatile
  3655                           
  3656                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3657   0026E2  0E08               	movlw	8
  3658   0026E4  6F88               	movwf	136,b	;volatile
  3659                           
  3660                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
  3661   0026E6  50BD               	movf	189,w,c	;volatile
  3662   0026E8  0B8F               	andlw	-113
  3663   0026EA  0930               	iorlw	48
  3664   0026EC  6EBD               	movwf	189,c	;volatile
  3665                           
  3666                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3667   0026EE  0EE0               	movlw	-32
  3668   0026F0  16BE               	andwf	190,f,c	;volatile
  3669                           
  3670                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3671   0026F2  50BF               	movf	191,w,c	;volatile
  3672   0026F4  0BF0               	andlw	-16
  3673   0026F6  0901               	iorlw	1
  3674   0026F8  6EBF               	movwf	191,c	;volatile
  3675   0026FA                     
  3676                           ; BSR set to: 14
  3677                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  3678   0026FA  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3679   0026FE                     
  3680                           ; BSR set to: 14
  3681                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3682   0026FE  8EBD               	bsf	189,7,c	;volatile
  3683                           
  3684                           ;dc_motor.c: 35:     CCPR1H=0;
  3685   002700  0E00               	movlw	0
  3686   002702  6EAA               	movwf	170,c	;volatile
  3687                           
  3688                           ;dc_motor.c: 36:     CCPR2H=0;
  3689   002704  0E00               	movlw	0
  3690   002706  6EA6               	movwf	166,c	;volatile
  3691                           
  3692                           ;dc_motor.c: 37:     CCPR3H=0;
  3693   002708  0E00               	movlw	0
  3694   00270A  010F               	movlb	15	; () banked
  3695   00270C  6F25               	movwf	37,b	;volatile
  3696                           
  3697                           ;dc_motor.c: 38:     CCPR4H=0;
  3698   00270E  0E00               	movlw	0
  3699   002710  6F21               	movwf	33,b	;volatile
  3700                           
  3701                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3702   002712  0EFC               	movlw	-4
  3703   002714  16AD               	andwf	173,f,c	;volatile
  3704                           
  3705                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3706   002716  0EF3               	movlw	-13
  3707   002718  16AD               	andwf	173,f,c	;volatile
  3708                           
  3709                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3710   00271A  0ECF               	movlw	-49
  3711   00271C  16AD               	andwf	173,f,c	;volatile
  3712                           
  3713                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3714   00271E  0E3F               	movlw	-193
  3715   002720  16AD               	andwf	173,f,c	;volatile
  3716   002722                     
  3717                           ; BSR set to: 15
  3718                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3719   002722  88AB               	bsf	171,4,c	;volatile
  3720                           
  3721                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3722   002724  50AB               	movf	171,w,c	;volatile
  3723   002726  0BF0               	andlw	-16
  3724   002728  090C               	iorlw	12
  3725   00272A  6EAB               	movwf	171,c	;volatile
  3726   00272C                     
  3727                           ; BSR set to: 15
  3728                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3729   00272C  8EAB               	bsf	171,7,c	;volatile
  3730   00272E                     
  3731                           ; BSR set to: 15
  3732                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3733   00272E  88A7               	bsf	167,4,c	;volatile
  3734                           
  3735                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3736   002730  50A7               	movf	167,w,c	;volatile
  3737   002732  0BF0               	andlw	-16
  3738   002734  090C               	iorlw	12
  3739   002736  6EA7               	movwf	167,c	;volatile
  3740   002738                     
  3741                           ; BSR set to: 15
  3742                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3743   002738  8EA7               	bsf	167,7,c	;volatile
  3744   00273A                     
  3745                           ; BSR set to: 15
  3746                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3747   00273A  8926               	bsf	38,4,b	;volatile
  3748                           
  3749                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3750   00273C  5126               	movf	38,w,b	;volatile
  3751   00273E  0BF0               	andlw	-16
  3752   002740  090C               	iorlw	12
  3753   002742  6F26               	movwf	38,b	;volatile
  3754   002744                     
  3755                           ; BSR set to: 15
  3756                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3757   002744  8F26               	bsf	38,7,b	;volatile
  3758   002746                     
  3759                           ; BSR set to: 15
  3760                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3761   002746  8922               	bsf	34,4,b	;volatile
  3762                           
  3763                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3764   002748  5122               	movf	34,w,b	;volatile
  3765   00274A  0BF0               	andlw	-16
  3766   00274C  090C               	iorlw	12
  3767   00274E  6F22               	movwf	34,b	;volatile
  3768   002750                     
  3769                           ; BSR set to: 15
  3770                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3771   002750  8F22               	bsf	34,7,b	;volatile
  3772   002752                     
  3773                           ; BSR set to: 15
  3774   002752  0012               	return		;funcret
  3775   002754                     __end_of_initDCmotorsPWM:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _color_read *****************
  3779 ;; Defined at:
  3780 ;;		line 55 in file "color.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  RGBC            1    8[COMRAM] PTR struct RGBC_val
  3783 ;;		 -> main@RGBC(8), 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3797 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3799 ;;Total ram usage:        8 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 5
  3802 ;; This function calls:
  3803 ;;		_I2C_2_Master_Read
  3804 ;;		_I2C_2_Master_RepStart
  3805 ;;		_I2C_2_Master_Start
  3806 ;;		_I2C_2_Master_Stop
  3807 ;;		_I2C_2_Master_Write
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text17
  3814   001516                     __ptext17:
  3815                           	callstack 0
  3816   001516                     _color_read:
  3817                           	callstack 25
  3818   001516                     
  3819                           ;color.c: 55: void color_read(RGBC_val *RGBC);color.c: 56: {;color.c: 57:  I2C_2_Master_
      +                          Start();
  3820   001516  EC97  F016         	call	_I2C_2_Master_Start	;wreg free
  3821                           
  3822                           ;color.c: 58:  I2C_2_Master_Write(0x52 | 0x00);
  3823   00151A  0E52               	movlw	82
  3824   00151C  EC81  F016         	call	_I2C_2_Master_Write
  3825                           
  3826                           ;color.c: 59:  I2C_2_Master_Write(0xA0 | 0x16);
  3827   001520  0EB6               	movlw	182
  3828   001522  EC81  F016         	call	_I2C_2_Master_Write
  3829                           
  3830                           ;color.c: 60:  I2C_2_Master_RepStart();
  3831   001526  EC8D  F016         	call	_I2C_2_Master_RepStart	;wreg free
  3832                           
  3833                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x01);
  3834   00152A  0E53               	movlw	83
  3835   00152C  EC81  F016         	call	_I2C_2_Master_Write
  3836   001530                     
  3837                           ;color.c: 62:  RGBC->R=I2C_2_Master_Read(1);
  3838   001530  0E01               	movlw	1
  3839   001532  ECD3  F014         	call	_I2C_2_Master_Read
  3840   001536  6E0A               	movwf	??_color_read^0,c
  3841   001538  6A0B               	clrf	(??_color_read+1)^0,c
  3842   00153A  5009               	movf	color_read@RGBC^0,w,c
  3843   00153C  6ED9               	movwf	fsr2l,c
  3844   00153E  6ADA               	clrf	fsr2h,c
  3845   001540  C00A  FFDE         	movff	??_color_read,postinc2
  3846   001544  C00B  FFDD         	movff	??_color_read+1,postdec2
  3847   001548                     
  3848                           ;color.c: 63:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  3849   001548  5009               	movf	color_read@RGBC^0,w,c
  3850   00154A  6ED9               	movwf	fsr2l,c
  3851   00154C  6ADA               	clrf	fsr2h,c
  3852   00154E  CFDE F00A          	movff	postinc2,??_color_read
  3853   001552  CFDD F00B          	movff	postdec2,??_color_read+1
  3854   001556  0E00               	movlw	0
  3855   001558  ECD3  F014         	call	_I2C_2_Master_Read
  3856   00155C  6E0C               	movwf	(??_color_read+2)^0,c
  3857   00155E  500C               	movf	(??_color_read+2)^0,w,c
  3858   001560  6E0E               	movwf	(??_color_read+4)^0,c
  3859   001562  6A0D               	clrf	(??_color_read+3)^0,c
  3860   001564  500A               	movf	??_color_read^0,w,c
  3861   001566  100D               	iorwf	(??_color_read+3)^0,w,c
  3862   001568  6E0F               	movwf	(??_color_read+5)^0,c
  3863   00156A  500B               	movf	(??_color_read+1)^0,w,c
  3864   00156C  100E               	iorwf	(??_color_read+4)^0,w,c
  3865   00156E  6E10               	movwf	(??_color_read+6)^0,c
  3866   001570  5009               	movf	color_read@RGBC^0,w,c
  3867   001572  6ED9               	movwf	fsr2l,c
  3868   001574  6ADA               	clrf	fsr2h,c
  3869   001576  C00F  FFDE         	movff	??_color_read+5,postinc2
  3870   00157A  C010  FFDD         	movff	??_color_read+6,postdec2
  3871                           
  3872                           ;color.c: 64:  I2C_2_Master_Stop();
  3873   00157E  EC92  F016         	call	_I2C_2_Master_Stop	;wreg free
  3874                           
  3875                           ;color.c: 66:     I2C_2_Master_Start();
  3876   001582  EC97  F016         	call	_I2C_2_Master_Start	;wreg free
  3877                           
  3878                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  3879   001586  0E52               	movlw	82
  3880   001588  EC81  F016         	call	_I2C_2_Master_Write
  3881                           
  3882                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x18);
  3883   00158C  0EB8               	movlw	184
  3884   00158E  EC81  F016         	call	_I2C_2_Master_Write
  3885                           
  3886                           ;color.c: 69:  I2C_2_Master_RepStart();
  3887   001592  EC8D  F016         	call	_I2C_2_Master_RepStart	;wreg free
  3888                           
  3889                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  3890   001596  0E53               	movlw	83
  3891   001598  EC81  F016         	call	_I2C_2_Master_Write
  3892   00159C                     
  3893                           ;color.c: 71:  RGBC->G=I2C_2_Master_Read(1);
  3894   00159C  0E01               	movlw	1
  3895   00159E  ECD3  F014         	call	_I2C_2_Master_Read
  3896   0015A2  6E0A               	movwf	??_color_read^0,c
  3897   0015A4  6A0B               	clrf	(??_color_read+1)^0,c
  3898   0015A6  5009               	movf	color_read@RGBC^0,w,c
  3899   0015A8  6ED9               	movwf	fsr2l,c
  3900   0015AA  6ADA               	clrf	fsr2h,c
  3901   0015AC  0E02               	movlw	2
  3902   0015AE  26D9               	addwf	fsr2l,f,c
  3903   0015B0  C00A  FFDE         	movff	??_color_read,postinc2
  3904   0015B4  C00B  FFDD         	movff	??_color_read+1,postdec2
  3905   0015B8                     
  3906                           ;color.c: 72:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  3907   0015B8  5009               	movf	color_read@RGBC^0,w,c
  3908   0015BA  6ED9               	movwf	fsr2l,c
  3909   0015BC  6ADA               	clrf	fsr2h,c
  3910   0015BE  0E02               	movlw	2
  3911   0015C0  26D9               	addwf	fsr2l,f,c
  3912   0015C2  CFDE F00A          	movff	postinc2,??_color_read
  3913   0015C6  CFDD F00B          	movff	postdec2,??_color_read+1
  3914   0015CA  0E00               	movlw	0
  3915   0015CC  ECD3  F014         	call	_I2C_2_Master_Read
  3916   0015D0  6E0C               	movwf	(??_color_read+2)^0,c
  3917   0015D2  500C               	movf	(??_color_read+2)^0,w,c
  3918   0015D4  6E0E               	movwf	(??_color_read+4)^0,c
  3919   0015D6  6A0D               	clrf	(??_color_read+3)^0,c
  3920   0015D8  500A               	movf	??_color_read^0,w,c
  3921   0015DA  100D               	iorwf	(??_color_read+3)^0,w,c
  3922   0015DC  6E0F               	movwf	(??_color_read+5)^0,c
  3923   0015DE  500B               	movf	(??_color_read+1)^0,w,c
  3924   0015E0  100E               	iorwf	(??_color_read+4)^0,w,c
  3925   0015E2  6E10               	movwf	(??_color_read+6)^0,c
  3926   0015E4  5009               	movf	color_read@RGBC^0,w,c
  3927   0015E6  6ED9               	movwf	fsr2l,c
  3928   0015E8  6ADA               	clrf	fsr2h,c
  3929   0015EA  0E02               	movlw	2
  3930   0015EC  26D9               	addwf	fsr2l,f,c
  3931   0015EE  C00F  FFDE         	movff	??_color_read+5,postinc2
  3932   0015F2  C010  FFDD         	movff	??_color_read+6,postdec2
  3933                           
  3934                           ;color.c: 73:  I2C_2_Master_Stop();
  3935   0015F6  EC92  F016         	call	_I2C_2_Master_Stop	;wreg free
  3936                           
  3937                           ;color.c: 75:     I2C_2_Master_Start();
  3938   0015FA  EC97  F016         	call	_I2C_2_Master_Start	;wreg free
  3939                           
  3940                           ;color.c: 76:  I2C_2_Master_Write(0x52 | 0x00);
  3941   0015FE  0E52               	movlw	82
  3942   001600  EC81  F016         	call	_I2C_2_Master_Write
  3943                           
  3944                           ;color.c: 77:  I2C_2_Master_Write(0xA0 | 0x1A);
  3945   001604  0EBA               	movlw	186
  3946   001606  EC81  F016         	call	_I2C_2_Master_Write
  3947                           
  3948                           ;color.c: 78:  I2C_2_Master_RepStart();
  3949   00160A  EC8D  F016         	call	_I2C_2_Master_RepStart	;wreg free
  3950                           
  3951                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x01);
  3952   00160E  0E53               	movlw	83
  3953   001610  EC81  F016         	call	_I2C_2_Master_Write
  3954   001614                     
  3955                           ;color.c: 80:  RGBC->B=I2C_2_Master_Read(1);
  3956   001614  0E01               	movlw	1
  3957   001616  ECD3  F014         	call	_I2C_2_Master_Read
  3958   00161A  6E0A               	movwf	??_color_read^0,c
  3959   00161C  6A0B               	clrf	(??_color_read+1)^0,c
  3960   00161E  5009               	movf	color_read@RGBC^0,w,c
  3961   001620  6ED9               	movwf	fsr2l,c
  3962   001622  6ADA               	clrf	fsr2h,c
  3963   001624  0E04               	movlw	4
  3964   001626  26D9               	addwf	fsr2l,f,c
  3965   001628  C00A  FFDE         	movff	??_color_read,postinc2
  3966   00162C  C00B  FFDD         	movff	??_color_read+1,postdec2
  3967   001630                     
  3968                           ;color.c: 81:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  3969   001630  5009               	movf	color_read@RGBC^0,w,c
  3970   001632  6ED9               	movwf	fsr2l,c
  3971   001634  6ADA               	clrf	fsr2h,c
  3972   001636  0E04               	movlw	4
  3973   001638  26D9               	addwf	fsr2l,f,c
  3974   00163A  CFDE F00A          	movff	postinc2,??_color_read
  3975   00163E  CFDD F00B          	movff	postdec2,??_color_read+1
  3976   001642  0E00               	movlw	0
  3977   001644  ECD3  F014         	call	_I2C_2_Master_Read
  3978   001648  6E0C               	movwf	(??_color_read+2)^0,c
  3979   00164A  500C               	movf	(??_color_read+2)^0,w,c
  3980   00164C  6E0E               	movwf	(??_color_read+4)^0,c
  3981   00164E  6A0D               	clrf	(??_color_read+3)^0,c
  3982   001650  500A               	movf	??_color_read^0,w,c
  3983   001652  100D               	iorwf	(??_color_read+3)^0,w,c
  3984   001654  6E0F               	movwf	(??_color_read+5)^0,c
  3985   001656  500B               	movf	(??_color_read+1)^0,w,c
  3986   001658  100E               	iorwf	(??_color_read+4)^0,w,c
  3987   00165A  6E10               	movwf	(??_color_read+6)^0,c
  3988   00165C  5009               	movf	color_read@RGBC^0,w,c
  3989   00165E  6ED9               	movwf	fsr2l,c
  3990   001660  6ADA               	clrf	fsr2h,c
  3991   001662  0E04               	movlw	4
  3992   001664  26D9               	addwf	fsr2l,f,c
  3993   001666  C00F  FFDE         	movff	??_color_read+5,postinc2
  3994   00166A  C010  FFDD         	movff	??_color_read+6,postdec2
  3995                           
  3996                           ;color.c: 82:  I2C_2_Master_Stop();
  3997   00166E  EC92  F016         	call	_I2C_2_Master_Stop	;wreg free
  3998                           
  3999                           ;color.c: 84:     I2C_2_Master_Start();
  4000   001672  EC97  F016         	call	_I2C_2_Master_Start	;wreg free
  4001                           
  4002                           ;color.c: 85:  I2C_2_Master_Write(0x52 | 0x00);
  4003   001676  0E52               	movlw	82
  4004   001678  EC81  F016         	call	_I2C_2_Master_Write
  4005                           
  4006                           ;color.c: 86:  I2C_2_Master_Write(0xA0 | 0x14);
  4007   00167C  0EB4               	movlw	180
  4008   00167E  EC81  F016         	call	_I2C_2_Master_Write
  4009                           
  4010                           ;color.c: 87:  I2C_2_Master_RepStart();
  4011   001682  EC8D  F016         	call	_I2C_2_Master_RepStart	;wreg free
  4012                           
  4013                           ;color.c: 88:  I2C_2_Master_Write(0x52 | 0x01);
  4014   001686  0E53               	movlw	83
  4015   001688  EC81  F016         	call	_I2C_2_Master_Write
  4016   00168C                     
  4017                           ;color.c: 89:  RGBC->C=I2C_2_Master_Read(1);
  4018   00168C  0E01               	movlw	1
  4019   00168E  ECD3  F014         	call	_I2C_2_Master_Read
  4020   001692  6E0A               	movwf	??_color_read^0,c
  4021   001694  6A0B               	clrf	(??_color_read+1)^0,c
  4022   001696  5009               	movf	color_read@RGBC^0,w,c
  4023   001698  6ED9               	movwf	fsr2l,c
  4024   00169A  6ADA               	clrf	fsr2h,c
  4025   00169C  0E06               	movlw	6
  4026   00169E  26D9               	addwf	fsr2l,f,c
  4027   0016A0  C00A  FFDE         	movff	??_color_read,postinc2
  4028   0016A4  C00B  FFDD         	movff	??_color_read+1,postdec2
  4029   0016A8                     
  4030                           ;color.c: 90:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  4031   0016A8  5009               	movf	color_read@RGBC^0,w,c
  4032   0016AA  6ED9               	movwf	fsr2l,c
  4033   0016AC  6ADA               	clrf	fsr2h,c
  4034   0016AE  0E06               	movlw	6
  4035   0016B0  26D9               	addwf	fsr2l,f,c
  4036   0016B2  CFDE F00A          	movff	postinc2,??_color_read
  4037   0016B6  CFDD F00B          	movff	postdec2,??_color_read+1
  4038   0016BA  0E00               	movlw	0
  4039   0016BC  ECD3  F014         	call	_I2C_2_Master_Read
  4040   0016C0  6E0C               	movwf	(??_color_read+2)^0,c
  4041   0016C2  500C               	movf	(??_color_read+2)^0,w,c
  4042   0016C4  6E0E               	movwf	(??_color_read+4)^0,c
  4043   0016C6  6A0D               	clrf	(??_color_read+3)^0,c
  4044   0016C8  500A               	movf	??_color_read^0,w,c
  4045   0016CA  100D               	iorwf	(??_color_read+3)^0,w,c
  4046   0016CC  6E0F               	movwf	(??_color_read+5)^0,c
  4047   0016CE  500B               	movf	(??_color_read+1)^0,w,c
  4048   0016D0  100E               	iorwf	(??_color_read+4)^0,w,c
  4049   0016D2  6E10               	movwf	(??_color_read+6)^0,c
  4050   0016D4  5009               	movf	color_read@RGBC^0,w,c
  4051   0016D6  6ED9               	movwf	fsr2l,c
  4052   0016D8  6ADA               	clrf	fsr2h,c
  4053   0016DA  0E06               	movlw	6
  4054   0016DC  26D9               	addwf	fsr2l,f,c
  4055   0016DE  C00F  FFDE         	movff	??_color_read+5,postinc2
  4056   0016E2  C010  FFDD         	movff	??_color_read+6,postdec2
  4057                           
  4058                           ;color.c: 91:  I2C_2_Master_Stop();
  4059   0016E6  EC92  F016         	call	_I2C_2_Master_Stop	;wreg free
  4060   0016EA  0012               	return		;funcret
  4061   0016EC                     __end_of_color_read:
  4062                           	callstack 0
  4063                           
  4064 ;; *************** function _I2C_2_Master_RepStart *****************
  4065 ;; Defined at:
  4066 ;;		line 33 in file "i2c.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      void 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used: 1
  4086 ;; Hardware stack levels required when called: 4
  4087 ;; This function calls:
  4088 ;;		_I2C_2_Master_Idle
  4089 ;; This function is called by:
  4090 ;;		_color_read
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text18
  4095   002D1A                     __ptext18:
  4096                           	callstack 0
  4097   002D1A                     _I2C_2_Master_RepStart:
  4098                           	callstack 25
  4099   002D1A                     
  4100                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4101   002D1A  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4102   002D1E                     
  4103                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4104   002D1E  010E               	movlb	14	; () banked
  4105   002D20  83DA               	bsf	218,1,b	;volatile
  4106   002D22                     
  4107                           ; BSR set to: 14
  4108   002D22  0012               	return		;funcret
  4109   002D24                     __end_of_I2C_2_Master_RepStart:
  4110                           	callstack 0
  4111                           
  4112 ;; *************** function _I2C_2_Master_Read *****************
  4113 ;; Defined at:
  4114 ;;		line 51 in file "i2c.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  ack             1    wreg     unsigned char 
  4117 ;; Auto vars:     Size  Location     Type
  4118 ;;  ack             1    6[COMRAM] unsigned char 
  4119 ;;  tmp             1    7[COMRAM] unsigned char 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      unsigned char 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4132 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4133 ;;Total ram usage:        3 bytes
  4134 ;; Hardware stack levels used: 1
  4135 ;; Hardware stack levels required when called: 4
  4136 ;; This function calls:
  4137 ;;		_I2C_2_Master_Idle
  4138 ;; This function is called by:
  4139 ;;		_color_read
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text19
  4144   0029A6                     __ptext19:
  4145                           	callstack 0
  4146   0029A6                     _I2C_2_Master_Read:
  4147                           	callstack 25
  4148                           
  4149                           ; BSR set to: 14
  4150                           ;incstack = 0
  4151                           ;I2C_2_Master_Read@ack stored from wreg
  4152   0029A6  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  4153   0029A8                     
  4154                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4155   0029A8  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4156   0029AC                     
  4157                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4158   0029AC  010E               	movlb	14	; () banked
  4159   0029AE  87DA               	bsf	218,3,b	;volatile
  4160                           
  4161                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4162   0029B0  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4163   0029B4                     
  4164                           ;i2c.c: 57:   tmp = SSP2BUF;
  4165   0029B4  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4166                           
  4167                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4168   0029B8  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4169   0029BC                     
  4170                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4171   0029BC  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  4172   0029BE  B4D8               	btfsc	status,2,c
  4173   0029C0  EFE4  F014         	goto	u1491
  4174   0029C4  EFE8  F014         	goto	u1490
  4175   0029C8                     u1491:
  4176   0029C8  6A06               	clrf	??_I2C_2_Master_Read^0,c
  4177   0029CA  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  4178   0029CC  EFE9  F014         	goto	u1508
  4179   0029D0                     u1490:
  4180   0029D0  6A06               	clrf	??_I2C_2_Master_Read^0,c
  4181   0029D2                     u1508:
  4182   0029D2  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  4183   0029D4  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  4184   0029D6  010E               	movlb	14	; () banked
  4185   0029D8  51DA               	movf	218,w,b	;volatile
  4186   0029DA  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  4187   0029DC  0BDF               	andlw	-33
  4188   0029DE  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  4189   0029E0  6FDA               	movwf	218,b	;volatile
  4190   0029E2                     
  4191                           ; BSR set to: 14
  4192                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4193   0029E2  89DA               	bsf	218,4,b	;volatile
  4194   0029E4                     
  4195                           ; BSR set to: 14
  4196                           ;i2c.c: 61:   return tmp;
  4197   0029E4  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  4198   0029E6                     
  4199                           ; BSR set to: 14
  4200   0029E6  0012               	return		;funcret
  4201   0029E8                     __end_of_I2C_2_Master_Read:
  4202                           	callstack 0
  4203                           
  4204 ;; *************** function _color_normalise *****************
  4205 ;; Defined at:
  4206 ;;		line 95 in file "color.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  RGBC            8   30[COMRAM] struct RGBC_val
  4209 ;;  RGBC_n          1   38[COMRAM] PTR struct RGBC_val
  4210 ;;		 -> main@RGBC_n(8), 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4222 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4225 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4226 ;;Total ram usage:       11 bytes
  4227 ;; Hardware stack levels used: 1
  4228 ;; Hardware stack levels required when called: 4
  4229 ;; This function calls:
  4230 ;;		___aldiv
  4231 ;;		___lmul
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text20
  4238   002098                     __ptext20:
  4239                           	callstack 0
  4240   002098                     _color_normalise:
  4241                           	callstack 26
  4242   002098                     
  4243                           ;color.c: 113:     RGBC_n->C = RGBC.C;
  4244   002098  5027               	movf	color_normalise@RGBC_n^0,w,c
  4245   00209A  6ED9               	movwf	fsr2l,c
  4246   00209C  6ADA               	clrf	fsr2h,c
  4247   00209E  0E06               	movlw	6
  4248   0020A0  26D9               	addwf	fsr2l,f,c
  4249   0020A2  C025  FFDE         	movff	color_normalise@RGBC+6,postinc2
  4250   0020A6  C026  FFDD         	movff	color_normalise@RGBC+7,postdec2
  4251   0020AA                     
  4252                           ;color.c: 114:     RGBC_n->R = 1000L*RGBC.R/(RGBC.R+RGBC.G+RGBC.B);
  4253   0020AA  C01F  F005         	movff	color_normalise@RGBC,___lmul@multiplier
  4254   0020AE  C020  F006         	movff	color_normalise@RGBC+1,___lmul@multiplier+1
  4255   0020B2  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4256   0020B4  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4257   0020B6  0EE8               	movlw	232
  4258   0020B8  6E09               	movwf	___lmul@multiplicand^0,c
  4259   0020BA  0E03               	movlw	3
  4260   0020BC  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4261   0020BE  0E00               	movlw	0
  4262   0020C0  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4263   0020C2  0E00               	movlw	0
  4264   0020C4  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4265   0020C6  ECE4  F013         	call	___lmul	;wreg free
  4266   0020CA  C005  F011         	movff	?___lmul,___aldiv@dividend
  4267   0020CE  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4268   0020D2  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4269   0020D6  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4270   0020DA  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4271   0020DC  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4272   0020DE  6E28               	movwf	??_color_normalise^0,c
  4273   0020E0  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4274   0020E2  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4275   0020E4  6E29               	movwf	(??_color_normalise+1)^0,c
  4276   0020E6  501F               	movf	color_normalise@RGBC^0,w,c
  4277   0020E8  2628               	addwf	??_color_normalise^0,f,c
  4278   0020EA  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4279   0020EC  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4280   0020EE  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4281   0020F2  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4282   0020F6  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4283   0020F8  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4284   0020FA  ECED  F010         	call	___aldiv	;wreg free
  4285   0020FE  5027               	movf	color_normalise@RGBC_n^0,w,c
  4286   002100  6ED9               	movwf	fsr2l,c
  4287   002102  6ADA               	clrf	fsr2h,c
  4288   002104  C011  FFDE         	movff	?___aldiv,postinc2
  4289   002108  C012  FFDD         	movff	?___aldiv+1,postdec2
  4290   00210C                     
  4291                           ;color.c: 115:     RGBC_n->G = 1000L*RGBC.G/(RGBC.R+RGBC.G+RGBC.B);
  4292   00210C  C021  F005         	movff	color_normalise@RGBC+2,___lmul@multiplier
  4293   002110  C022  F006         	movff	color_normalise@RGBC+3,___lmul@multiplier+1
  4294   002114  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4295   002116  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4296   002118  0EE8               	movlw	232
  4297   00211A  6E09               	movwf	___lmul@multiplicand^0,c
  4298   00211C  0E03               	movlw	3
  4299   00211E  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4300   002120  0E00               	movlw	0
  4301   002122  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4302   002124  0E00               	movlw	0
  4303   002126  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4304   002128  ECE4  F013         	call	___lmul	;wreg free
  4305   00212C  C005  F011         	movff	?___lmul,___aldiv@dividend
  4306   002130  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4307   002134  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4308   002138  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4309   00213C  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4310   00213E  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4311   002140  6E28               	movwf	??_color_normalise^0,c
  4312   002142  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4313   002144  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4314   002146  6E29               	movwf	(??_color_normalise+1)^0,c
  4315   002148  501F               	movf	color_normalise@RGBC^0,w,c
  4316   00214A  2628               	addwf	??_color_normalise^0,f,c
  4317   00214C  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4318   00214E  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4319   002150  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4320   002154  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4321   002158  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4322   00215A  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4323   00215C  ECED  F010         	call	___aldiv	;wreg free
  4324   002160  5027               	movf	color_normalise@RGBC_n^0,w,c
  4325   002162  6ED9               	movwf	fsr2l,c
  4326   002164  6ADA               	clrf	fsr2h,c
  4327   002166  0E02               	movlw	2
  4328   002168  26D9               	addwf	fsr2l,f,c
  4329   00216A  C011  FFDE         	movff	?___aldiv,postinc2
  4330   00216E  C012  FFDD         	movff	?___aldiv+1,postdec2
  4331   002172                     
  4332                           ;color.c: 116:     RGBC_n->B = 1000L*RGBC.B/(RGBC.R+RGBC.G+RGBC.B);
  4333   002172  C023  F005         	movff	color_normalise@RGBC+4,___lmul@multiplier
  4334   002176  C024  F006         	movff	color_normalise@RGBC+5,___lmul@multiplier+1
  4335   00217A  6A07               	clrf	(___lmul@multiplier+2)^0,c
  4336   00217C  6A08               	clrf	(___lmul@multiplier+3)^0,c
  4337   00217E  0EE8               	movlw	232
  4338   002180  6E09               	movwf	___lmul@multiplicand^0,c
  4339   002182  0E03               	movlw	3
  4340   002184  6E0A               	movwf	(___lmul@multiplicand+1)^0,c
  4341   002186  0E00               	movlw	0
  4342   002188  6E0B               	movwf	(___lmul@multiplicand+2)^0,c
  4343   00218A  0E00               	movlw	0
  4344   00218C  6E0C               	movwf	(___lmul@multiplicand+3)^0,c
  4345   00218E  ECE4  F013         	call	___lmul	;wreg free
  4346   002192  C005  F011         	movff	?___lmul,___aldiv@dividend
  4347   002196  C006  F012         	movff	?___lmul+1,___aldiv@dividend+1
  4348   00219A  C007  F013         	movff	?___lmul+2,___aldiv@dividend+2
  4349   00219E  C008  F014         	movff	?___lmul+3,___aldiv@dividend+3
  4350   0021A2  5023               	movf	(color_normalise@RGBC+4)^0,w,c
  4351   0021A4  2421               	addwf	(color_normalise@RGBC+2)^0,w,c
  4352   0021A6  6E28               	movwf	??_color_normalise^0,c
  4353   0021A8  5024               	movf	(color_normalise@RGBC+5)^0,w,c
  4354   0021AA  2022               	addwfc	(color_normalise@RGBC+3)^0,w,c
  4355   0021AC  6E29               	movwf	(??_color_normalise+1)^0,c
  4356   0021AE  501F               	movf	color_normalise@RGBC^0,w,c
  4357   0021B0  2628               	addwf	??_color_normalise^0,f,c
  4358   0021B2  5020               	movf	(color_normalise@RGBC+1)^0,w,c
  4359   0021B4  2229               	addwfc	(??_color_normalise+1)^0,f,c
  4360   0021B6  C028  F015         	movff	??_color_normalise,___aldiv@divisor
  4361   0021BA  C029  F016         	movff	??_color_normalise+1,___aldiv@divisor+1
  4362   0021BE  6A17               	clrf	(___aldiv@divisor+2)^0,c
  4363   0021C0  6A18               	clrf	(___aldiv@divisor+3)^0,c
  4364   0021C2  ECED  F010         	call	___aldiv	;wreg free
  4365   0021C6  5027               	movf	color_normalise@RGBC_n^0,w,c
  4366   0021C8  6ED9               	movwf	fsr2l,c
  4367   0021CA  6ADA               	clrf	fsr2h,c
  4368   0021CC  0E04               	movlw	4
  4369   0021CE  26D9               	addwf	fsr2l,f,c
  4370   0021D0  C011  FFDE         	movff	?___aldiv,postinc2
  4371   0021D4  C012  FFDD         	movff	?___aldiv+1,postdec2
  4372   0021D8  0012               	return		;funcret
  4373   0021DA                     __end_of_color_normalise:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function ___lmul *****************
  4377 ;; Defined at:
  4378 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  multiplier      4    4[COMRAM] unsigned long 
  4381 ;;  multiplicand    4    8[COMRAM] unsigned long 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  product         4   12[COMRAM] unsigned long 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  4    4[COMRAM] unsigned long 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4393 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4396 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4397 ;;Total ram usage:       12 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 3
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_color_normalise
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text21
  4408   0027C8                     __ptext21:
  4409                           	callstack 0
  4410   0027C8                     ___lmul:
  4411                           	callstack 26
  4412   0027C8  0E00               	movlw	0
  4413   0027CA  6E0D               	movwf	___lmul@product^0,c
  4414   0027CC  0E00               	movlw	0
  4415   0027CE  6E0E               	movwf	(___lmul@product+1)^0,c
  4416   0027D0  0E00               	movlw	0
  4417   0027D2  6E0F               	movwf	(___lmul@product+2)^0,c
  4418   0027D4  0E00               	movlw	0
  4419   0027D6  6E10               	movwf	(___lmul@product+3)^0,c
  4420   0027D8                     l2697:
  4421   0027D8  A005               	btfss	___lmul@multiplier^0,0,c
  4422   0027DA  EFF1  F013         	goto	u1701
  4423   0027DE  EFF3  F013         	goto	u1700
  4424   0027E2                     u1701:
  4425   0027E2  EFFB  F013         	goto	l2701
  4426   0027E6                     u1700:
  4427   0027E6  5009               	movf	___lmul@multiplicand^0,w,c
  4428   0027E8  260D               	addwf	___lmul@product^0,f,c
  4429   0027EA  500A               	movf	(___lmul@multiplicand+1)^0,w,c
  4430   0027EC  220E               	addwfc	(___lmul@product+1)^0,f,c
  4431   0027EE  500B               	movf	(___lmul@multiplicand+2)^0,w,c
  4432   0027F0  220F               	addwfc	(___lmul@product+2)^0,f,c
  4433   0027F2  500C               	movf	(___lmul@multiplicand+3)^0,w,c
  4434   0027F4  2210               	addwfc	(___lmul@product+3)^0,f,c
  4435   0027F6                     l2701:
  4436   0027F6  90D8               	bcf	status,0,c
  4437   0027F8  3609               	rlcf	___lmul@multiplicand^0,f,c
  4438   0027FA  360A               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4439   0027FC  360B               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4440   0027FE  360C               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4441   002800  90D8               	bcf	status,0,c
  4442   002802  3208               	rrcf	(___lmul@multiplier+3)^0,f,c
  4443   002804  3207               	rrcf	(___lmul@multiplier+2)^0,f,c
  4444   002806  3206               	rrcf	(___lmul@multiplier+1)^0,f,c
  4445   002808  3205               	rrcf	___lmul@multiplier^0,f,c
  4446   00280A  5005               	movf	___lmul@multiplier^0,w,c
  4447   00280C  1006               	iorwf	(___lmul@multiplier+1)^0,w,c
  4448   00280E  1007               	iorwf	(___lmul@multiplier+2)^0,w,c
  4449   002810  1008               	iorwf	(___lmul@multiplier+3)^0,w,c
  4450   002812  A4D8               	btfss	status,2,c
  4451   002814  EF0E  F014         	goto	u1711
  4452   002818  EF10  F014         	goto	u1710
  4453   00281C                     u1711:
  4454   00281C  EFEC  F013         	goto	l2697
  4455   002820                     u1710:
  4456   002820  C00D  F005         	movff	___lmul@product,?___lmul
  4457   002824  C00E  F006         	movff	___lmul@product+1,?___lmul+1
  4458   002828  C00F  F007         	movff	___lmul@product+2,?___lmul+2
  4459   00282C  C010  F008         	movff	___lmul@product+3,?___lmul+3
  4460   002830  0012               	return		;funcret
  4461   002832                     __end_of___lmul:
  4462                           	callstack 0
  4463                           
  4464 ;; *************** function ___aldiv *****************
  4465 ;; Defined at:
  4466 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  dividend        4   16[COMRAM] long 
  4469 ;;  divisor         4   20[COMRAM] long 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  quotient        4   26[COMRAM] long 
  4472 ;;  sign            1   25[COMRAM] unsigned char 
  4473 ;;  counter         1   24[COMRAM] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  4   16[COMRAM] long 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4484 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;Total ram usage:       14 bytes
  4488 ;; Hardware stack levels used: 1
  4489 ;; Hardware stack levels required when called: 3
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_color_normalise
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text22
  4498   0021DA                     __ptext22:
  4499                           	callstack 0
  4500   0021DA                     ___aldiv:
  4501                           	callstack 26
  4502   0021DA  0E00               	movlw	0
  4503   0021DC  6E1A               	movwf	___aldiv@sign^0,c
  4504   0021DE  BE18               	btfsc	(___aldiv@divisor+3)^0,7,c
  4505   0021E0  EFF6  F010         	goto	u1720
  4506   0021E4  EFF4  F010         	goto	u1721
  4507   0021E8                     u1721:
  4508   0021E8  EF00  F011         	goto	l2713
  4509   0021EC                     u1720:
  4510   0021EC  1E18               	comf	(___aldiv@divisor+3)^0,f,c
  4511   0021EE  1E17               	comf	(___aldiv@divisor+2)^0,f,c
  4512   0021F0  1E16               	comf	(___aldiv@divisor+1)^0,f,c
  4513   0021F2  6C15               	negf	___aldiv@divisor^0,c
  4514   0021F4  0E00               	movlw	0
  4515   0021F6  2216               	addwfc	(___aldiv@divisor+1)^0,f,c
  4516   0021F8  2217               	addwfc	(___aldiv@divisor+2)^0,f,c
  4517   0021FA  2218               	addwfc	(___aldiv@divisor+3)^0,f,c
  4518   0021FC  0E01               	movlw	1
  4519   0021FE  6E1A               	movwf	___aldiv@sign^0,c
  4520   002200                     l2713:
  4521   002200  BE14               	btfsc	(___aldiv@dividend+3)^0,7,c
  4522   002202  EF07  F011         	goto	u1730
  4523   002206  EF05  F011         	goto	u1731
  4524   00220A                     u1731:
  4525   00220A  EF11  F011         	goto	l2719
  4526   00220E                     u1730:
  4527   00220E  1E14               	comf	(___aldiv@dividend+3)^0,f,c
  4528   002210  1E13               	comf	(___aldiv@dividend+2)^0,f,c
  4529   002212  1E12               	comf	(___aldiv@dividend+1)^0,f,c
  4530   002214  6C11               	negf	___aldiv@dividend^0,c
  4531   002216  0E00               	movlw	0
  4532   002218  2212               	addwfc	(___aldiv@dividend+1)^0,f,c
  4533   00221A  2213               	addwfc	(___aldiv@dividend+2)^0,f,c
  4534   00221C  2214               	addwfc	(___aldiv@dividend+3)^0,f,c
  4535   00221E  0E01               	movlw	1
  4536   002220  1A1A               	xorwf	___aldiv@sign^0,f,c
  4537   002222                     l2719:
  4538   002222  0E00               	movlw	0
  4539   002224  6E1B               	movwf	___aldiv@quotient^0,c
  4540   002226  0E00               	movlw	0
  4541   002228  6E1C               	movwf	(___aldiv@quotient+1)^0,c
  4542   00222A  0E00               	movlw	0
  4543   00222C  6E1D               	movwf	(___aldiv@quotient+2)^0,c
  4544   00222E  0E00               	movlw	0
  4545   002230  6E1E               	movwf	(___aldiv@quotient+3)^0,c
  4546   002232  5015               	movf	___aldiv@divisor^0,w,c
  4547   002234  1016               	iorwf	(___aldiv@divisor+1)^0,w,c
  4548   002236  1017               	iorwf	(___aldiv@divisor+2)^0,w,c
  4549   002238  1018               	iorwf	(___aldiv@divisor+3)^0,w,c
  4550   00223A  B4D8               	btfsc	status,2,c
  4551   00223C  EF22  F011         	goto	u1741
  4552   002240  EF24  F011         	goto	u1740
  4553   002244                     u1741:
  4554   002244  EF5A  F011         	goto	l2741
  4555   002248                     u1740:
  4556   002248  0E01               	movlw	1
  4557   00224A  6E19               	movwf	___aldiv@counter^0,c
  4558   00224C  EF2E  F011         	goto	l2727
  4559   002250                     l2725:
  4560   002250  90D8               	bcf	status,0,c
  4561   002252  3615               	rlcf	___aldiv@divisor^0,f,c
  4562   002254  3616               	rlcf	(___aldiv@divisor+1)^0,f,c
  4563   002256  3617               	rlcf	(___aldiv@divisor+2)^0,f,c
  4564   002258  3618               	rlcf	(___aldiv@divisor+3)^0,f,c
  4565   00225A  2A19               	incf	___aldiv@counter^0,f,c
  4566   00225C                     l2727:
  4567   00225C  AE18               	btfss	(___aldiv@divisor+3)^0,7,c
  4568   00225E  EF33  F011         	goto	u1751
  4569   002262  EF35  F011         	goto	u1750
  4570   002266                     u1751:
  4571   002266  EF28  F011         	goto	l2725
  4572   00226A                     u1750:
  4573   00226A                     l2729:
  4574   00226A  90D8               	bcf	status,0,c
  4575   00226C  361B               	rlcf	___aldiv@quotient^0,f,c
  4576   00226E  361C               	rlcf	(___aldiv@quotient+1)^0,f,c
  4577   002270  361D               	rlcf	(___aldiv@quotient+2)^0,f,c
  4578   002272  361E               	rlcf	(___aldiv@quotient+3)^0,f,c
  4579   002274  5015               	movf	___aldiv@divisor^0,w,c
  4580   002276  5C11               	subwf	___aldiv@dividend^0,w,c
  4581   002278  5016               	movf	(___aldiv@divisor+1)^0,w,c
  4582   00227A  5812               	subwfb	(___aldiv@dividend+1)^0,w,c
  4583   00227C  5017               	movf	(___aldiv@divisor+2)^0,w,c
  4584   00227E  5813               	subwfb	(___aldiv@dividend+2)^0,w,c
  4585   002280  5018               	movf	(___aldiv@divisor+3)^0,w,c
  4586   002282  5814               	subwfb	(___aldiv@dividend+3)^0,w,c
  4587   002284  A0D8               	btfss	status,0,c
  4588   002286  EF47  F011         	goto	u1761
  4589   00228A  EF49  F011         	goto	u1760
  4590   00228E                     u1761:
  4591   00228E  EF52  F011         	goto	l2737
  4592   002292                     u1760:
  4593   002292  5015               	movf	___aldiv@divisor^0,w,c
  4594   002294  5E11               	subwf	___aldiv@dividend^0,f,c
  4595   002296  5016               	movf	(___aldiv@divisor+1)^0,w,c
  4596   002298  5A12               	subwfb	(___aldiv@dividend+1)^0,f,c
  4597   00229A  5017               	movf	(___aldiv@divisor+2)^0,w,c
  4598   00229C  5A13               	subwfb	(___aldiv@dividend+2)^0,f,c
  4599   00229E  5018               	movf	(___aldiv@divisor+3)^0,w,c
  4600   0022A0  5A14               	subwfb	(___aldiv@dividend+3)^0,f,c
  4601   0022A2  801B               	bsf	___aldiv@quotient^0,0,c
  4602   0022A4                     l2737:
  4603   0022A4  90D8               	bcf	status,0,c
  4604   0022A6  3218               	rrcf	(___aldiv@divisor+3)^0,f,c
  4605   0022A8  3217               	rrcf	(___aldiv@divisor+2)^0,f,c
  4606   0022AA  3216               	rrcf	(___aldiv@divisor+1)^0,f,c
  4607   0022AC  3215               	rrcf	___aldiv@divisor^0,f,c
  4608   0022AE  2E19               	decfsz	___aldiv@counter^0,f,c
  4609   0022B0  EF35  F011         	goto	l2729
  4610   0022B4                     l2741:
  4611   0022B4  501A               	movf	___aldiv@sign^0,w,c
  4612   0022B6  B4D8               	btfsc	status,2,c
  4613   0022B8  EF60  F011         	goto	u1771
  4614   0022BC  EF62  F011         	goto	u1770
  4615   0022C0                     u1771:
  4616   0022C0  EF6A  F011         	goto	l2745
  4617   0022C4                     u1770:
  4618   0022C4  1E1E               	comf	(___aldiv@quotient+3)^0,f,c
  4619   0022C6  1E1D               	comf	(___aldiv@quotient+2)^0,f,c
  4620   0022C8  1E1C               	comf	(___aldiv@quotient+1)^0,f,c
  4621   0022CA  6C1B               	negf	___aldiv@quotient^0,c
  4622   0022CC  0E00               	movlw	0
  4623   0022CE  221C               	addwfc	(___aldiv@quotient+1)^0,f,c
  4624   0022D0  221D               	addwfc	(___aldiv@quotient+2)^0,f,c
  4625   0022D2  221E               	addwfc	(___aldiv@quotient+3)^0,f,c
  4626   0022D4                     l2745:
  4627   0022D4  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  4628   0022D8  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  4629   0022DC  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  4630   0022E0  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  4631   0022E4  0012               	return		;funcret
  4632   0022E6                     __end_of___aldiv:
  4633                           	callstack 0
  4634                           
  4635 ;; *************** function _color_detect *****************
  4636 ;; Defined at:
  4637 ;;		line 119 in file "color.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  RGBC_n          8    4[COMRAM] struct RGBC_val
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  color           1   12[COMRAM] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      unsigned char 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4651 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;Total ram usage:        9 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 3
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_main
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text23
  4666   0028FA                     __ptext23:
  4667                           	callstack 0
  4668   0028FA                     _color_detect:
  4669                           	callstack 27
  4670   0028FA                     
  4671                           ;color.c: 119: unsigned char color_detect(RGBC_val RGBC_n);color.c: 120: {;color.c: 121:
      +                               unsigned char color=0;
  4672   0028FA  0E00               	movlw	0
  4673   0028FC  6E0D               	movwf	color_detect@color^0,c
  4674   0028FE                     
  4675                           ;color.c: 122:     if (RGBC_n.R > 560) {
  4676   0028FE  0E31               	movlw	49
  4677   002900  5C05               	subwf	color_detect@RGBC_n^0,w,c
  4678   002902  0E02               	movlw	2
  4679   002904  5806               	subwfb	(color_detect@RGBC_n+1)^0,w,c
  4680   002906  A0D8               	btfss	status,0,c
  4681   002908  EF88  F014         	goto	u1921
  4682   00290C  EF8A  F014         	goto	u1920
  4683   002910                     u1921:
  4684   002910  EF8E  F014         	goto	l2935
  4685   002914                     u1920:
  4686   002914                     
  4687                           ;color.c: 123:         color = 1;
  4688   002914  0E01               	movlw	1
  4689   002916  6E0D               	movwf	color_detect@color^0,c
  4690                           
  4691                           ;color.c: 124:     }
  4692   002918  EFAA  F014         	goto	l123
  4693   00291C                     l2935:
  4694   00291C  0E23               	movlw	35
  4695   00291E  5C07               	subwf	(color_detect@RGBC_n+2)^0,w,c
  4696   002920  0E01               	movlw	1
  4697   002922  5808               	subwfb	(color_detect@RGBC_n+3)^0,w,c
  4698   002924  A0D8               	btfss	status,0,c
  4699   002926  EF97  F014         	goto	u1931
  4700   00292A  EF99  F014         	goto	u1930
  4701   00292E                     u1931:
  4702   00292E  EF9D  F014         	goto	l2939
  4703   002932                     u1930:
  4704   002932                     
  4705                           ;color.c: 126:         color = 2;
  4706   002932  0E02               	movlw	2
  4707   002934  6E0D               	movwf	color_detect@color^0,c
  4708                           
  4709                           ;color.c: 127:     }
  4710   002936  EFAA  F014         	goto	l123
  4711   00293A                     l2939:
  4712   00293A  500A               	movf	(color_detect@RGBC_n+5)^0,w,c
  4713   00293C  E109               	bnz	u1940
  4714   00293E  0EE7               	movlw	231
  4715   002940  5C09               	subwf	(color_detect@RGBC_n+4)^0,w,c
  4716   002942  A0D8               	btfss	status,0,c
  4717   002944  EFA6  F014         	goto	u1941
  4718   002948  EFA8  F014         	goto	u1940
  4719   00294C                     u1941:
  4720   00294C  EFAA  F014         	goto	l123
  4721   002950                     u1940:
  4722   002950                     
  4723                           ;color.c: 129:         color = 3;
  4724   002950  0E03               	movlw	3
  4725   002952  6E0D               	movwf	color_detect@color^0,c
  4726   002954                     l123:
  4727                           
  4728                           ;color.c: 149:     return color;
  4729   002954  500D               	movf	color_detect@color^0,w,c
  4730   002956  0012               	return		;funcret
  4731   002958                     __end_of_color_detect:
  4732                           	callstack 0
  4733                           
  4734 ;; *************** function _color_click_init *****************
  4735 ;; Defined at:
  4736 ;;		line 5 in file "color.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4752 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;Total ram usage:        1 bytes
  4755 ;; Hardware stack levels used: 1
  4756 ;; Hardware stack levels required when called: 6
  4757 ;; This function calls:
  4758 ;;		_I2C_2_Master_Init
  4759 ;;		_color_writetoaddr
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text24
  4766   002832                     __ptext24:
  4767                           	callstack 0
  4768   002832                     _color_click_init:
  4769                           	callstack 24
  4770   002832                     
  4771                           ;color.c: 8:     I2C_2_Master_Init();
  4772   002832  EC91  F015         	call	_I2C_2_Master_Init	;wreg free
  4773   002836                     
  4774                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  4775   002836  0E01               	movlw	1
  4776   002838  6E07               	movwf	color_writetoaddr@value^0,c
  4777   00283A  0E00               	movlw	0
  4778   00283C  EC1B  F016         	call	_color_writetoaddr
  4779   002840                     
  4780                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4781   002840  0E3F               	movlw	63
  4782   002842  6E09               	movwf	??_color_click_init^0,c
  4783   002844  0E55               	movlw	85
  4784   002846                     u2527:
  4785   002846  2EE8               	decfsz	wreg,f,c
  4786   002848  D7FE               	bra	u2527
  4787   00284A  2E09               	decfsz	??_color_click_init^0,f,c
  4788   00284C  D7FC               	bra	u2527
  4789   00284E  0000               	nop	
  4790   002850                     
  4791                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  4792   002850  0E03               	movlw	3
  4793   002852  6E07               	movwf	color_writetoaddr@value^0,c
  4794   002854  0E00               	movlw	0
  4795   002856  EC1B  F016         	call	_color_writetoaddr
  4796   00285A                     
  4797                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  4798   00285A  0ED5               	movlw	213
  4799   00285C  6E07               	movwf	color_writetoaddr@value^0,c
  4800   00285E  0E01               	movlw	1
  4801   002860  EC1B  F016         	call	_color_writetoaddr
  4802   002864                     
  4803                           ;color.c: 21:  color_writetoaddr(0x00, 0x13);
  4804   002864  0E13               	movlw	19
  4805   002866  6E07               	movwf	color_writetoaddr@value^0,c
  4806   002868  0E00               	movlw	0
  4807   00286A  EC1B  F016         	call	_color_writetoaddr
  4808   00286E                     
  4809                           ;color.c: 22:     color_writetoaddr(0x07, 0x07);
  4810   00286E  0E07               	movlw	7
  4811   002870  6E07               	movwf	color_writetoaddr@value^0,c
  4812   002872  0E07               	movlw	7
  4813   002874  EC1B  F016         	call	_color_writetoaddr
  4814   002878                     
  4815                           ;color.c: 23:     color_writetoaddr(0x06, 0xD0);
  4816   002878  0ED0               	movlw	208
  4817   00287A  6E07               	movwf	color_writetoaddr@value^0,c
  4818   00287C  0E06               	movlw	6
  4819   00287E  EC1B  F016         	call	_color_writetoaddr
  4820   002882                     
  4821                           ;color.c: 24:     color_writetoaddr(0x05, 0x00);
  4822   002882  0E00               	movlw	0
  4823   002884  6E07               	movwf	color_writetoaddr@value^0,c
  4824   002886  0E05               	movlw	5
  4825   002888  EC1B  F016         	call	_color_writetoaddr
  4826   00288C                     
  4827                           ;color.c: 25:     color_writetoaddr(0x04, 0x00);
  4828   00288C  0E00               	movlw	0
  4829   00288E  6E07               	movwf	color_writetoaddr@value^0,c
  4830   002890  0E04               	movlw	4
  4831   002892  EC1B  F016         	call	_color_writetoaddr
  4832   002896  0012               	return		;funcret
  4833   002898                     __end_of_color_click_init:
  4834                           	callstack 0
  4835                           
  4836 ;; *************** function _color_writetoaddr *****************
  4837 ;; Defined at:
  4838 ;;		line 31 in file "color.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  address         1    wreg     unsigned char 
  4841 ;;  value           1    6[COMRAM] unsigned char 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  address         1    7[COMRAM] unsigned char 
  4844 ;; Return value:  Size  Location     Type
  4845 ;;                  1    wreg      void 
  4846 ;; Registers used:
  4847 ;;		wreg, status,2, status,0, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4853 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4857 ;;Total ram usage:        2 bytes
  4858 ;; Hardware stack levels used: 1
  4859 ;; Hardware stack levels required when called: 5
  4860 ;; This function calls:
  4861 ;;		_I2C_2_Master_Start
  4862 ;;		_I2C_2_Master_Stop
  4863 ;;		_I2C_2_Master_Write
  4864 ;; This function is called by:
  4865 ;;		_color_click_init
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text25
  4870   002C36                     __ptext25:
  4871                           	callstack 0
  4872   002C36                     _color_writetoaddr:
  4873                           	callstack 24
  4874                           
  4875                           ;incstack = 0
  4876                           ;color_writetoaddr@address stored from wreg
  4877   002C36  6E08               	movwf	color_writetoaddr@address^0,c
  4878   002C38                     
  4879                           ;color.c: 32:     I2C_2_Master_Start();
  4880   002C38  EC97  F016         	call	_I2C_2_Master_Start	;wreg free
  4881                           
  4882                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  4883   002C3C  0E52               	movlw	82
  4884   002C3E  EC81  F016         	call	_I2C_2_Master_Write
  4885                           
  4886                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  4887   002C42  5008               	movf	color_writetoaddr@address^0,w,c
  4888   002C44  0980               	iorlw	128
  4889   002C46  EC81  F016         	call	_I2C_2_Master_Write
  4890                           
  4891                           ;color.c: 35:     I2C_2_Master_Write(value);
  4892   002C4A  5007               	movf	color_writetoaddr@value^0,w,c
  4893   002C4C  EC81  F016         	call	_I2C_2_Master_Write
  4894                           
  4895                           ;color.c: 36:     I2C_2_Master_Stop();
  4896   002C50  EC92  F016         	call	_I2C_2_Master_Stop	;wreg free
  4897   002C54  0012               	return		;funcret
  4898   002C56                     __end_of_color_writetoaddr:
  4899                           	callstack 0
  4900                           
  4901 ;; *************** function _I2C_2_Master_Write *****************
  4902 ;; Defined at:
  4903 ;;		line 45 in file "i2c.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  data_byte       1    wreg     unsigned char 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  data_byte       1    5[COMRAM] unsigned char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4921 ;;Total ram usage:        1 bytes
  4922 ;; Hardware stack levels used: 1
  4923 ;; Hardware stack levels required when called: 4
  4924 ;; This function calls:
  4925 ;;		_I2C_2_Master_Idle
  4926 ;; This function is called by:
  4927 ;;		_color_writetoaddr
  4928 ;;		_color_read
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text26
  4933   002D02                     __ptext26:
  4934                           	callstack 0
  4935   002D02                     _I2C_2_Master_Write:
  4936                           	callstack 25
  4937                           
  4938                           ;incstack = 0
  4939                           ;I2C_2_Master_Write@data_byte stored from wreg
  4940   002D02  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  4941   002D04                     
  4942                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4943   002D04  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4944   002D08                     
  4945                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4946   002D08  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4947   002D0C  0012               	return		;funcret
  4948   002D0E                     __end_of_I2C_2_Master_Write:
  4949                           	callstack 0
  4950                           
  4951 ;; *************** function _I2C_2_Master_Stop *****************
  4952 ;; Defined at:
  4953 ;;		line 39 in file "i2c.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;		None
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, status,2, status,0, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4971 ;;Total ram usage:        0 bytes
  4972 ;; Hardware stack levels used: 1
  4973 ;; Hardware stack levels required when called: 4
  4974 ;; This function calls:
  4975 ;;		_I2C_2_Master_Idle
  4976 ;; This function is called by:
  4977 ;;		_color_writetoaddr
  4978 ;;		_color_read
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text27
  4983   002D24                     __ptext27:
  4984                           	callstack 0
  4985   002D24                     _I2C_2_Master_Stop:
  4986                           	callstack 25
  4987   002D24                     
  4988                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4989   002D24  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  4990   002D28                     
  4991                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4992   002D28  010E               	movlb	14	; () banked
  4993   002D2A  85DA               	bsf	218,2,b	;volatile
  4994   002D2C                     
  4995                           ; BSR set to: 14
  4996   002D2C  0012               	return		;funcret
  4997   002D2E                     __end_of_I2C_2_Master_Stop:
  4998                           	callstack 0
  4999                           
  5000 ;; *************** function _I2C_2_Master_Start *****************
  5001 ;; Defined at:
  5002 ;;		line 27 in file "i2c.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;Total ram usage:        0 bytes
  5021 ;; Hardware stack levels used: 1
  5022 ;; Hardware stack levels required when called: 4
  5023 ;; This function calls:
  5024 ;;		_I2C_2_Master_Idle
  5025 ;; This function is called by:
  5026 ;;		_color_writetoaddr
  5027 ;;		_color_read
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text28
  5032   002D2E                     __ptext28:
  5033                           	callstack 0
  5034   002D2E                     _I2C_2_Master_Start:
  5035                           	callstack 25
  5036   002D2E                     
  5037                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5038   002D2E  ECBB  F015         	call	_I2C_2_Master_Idle	;wreg free
  5039   002D32                     
  5040                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5041   002D32  010E               	movlb	14	; () banked
  5042   002D34  81DA               	bsf	218,0,b	;volatile
  5043   002D36                     
  5044                           ; BSR set to: 14
  5045   002D36  0012               	return		;funcret
  5046   002D38                     __end_of_I2C_2_Master_Start:
  5047                           	callstack 0
  5048                           
  5049 ;; *************** function _I2C_2_Master_Idle *****************
  5050 ;; Defined at:
  5051 ;;		line 22 in file "i2c.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5069 ;;Total ram usage:        1 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 3
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_I2C_2_Master_Start
  5076 ;;		_I2C_2_Master_RepStart
  5077 ;;		_I2C_2_Master_Stop
  5078 ;;		_I2C_2_Master_Write
  5079 ;;		_I2C_2_Master_Read
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text29
  5084   002B76                     __ptext29:
  5085                           	callstack 0
  5086   002B76                     _I2C_2_Master_Idle:
  5087                           	callstack 25
  5088   002B76                     l157:
  5089   002B76  010E               	movlb	14	; () banked
  5090   002B78  B5D8               	btfsc	216,2,b	;volatile
  5091   002B7A  EFC1  F015         	goto	u1131
  5092   002B7E  EFC3  F015         	goto	u1130
  5093   002B82                     u1131:
  5094   002B82  EFBB  F015         	goto	l157
  5095   002B86                     u1130:
  5096   002B86                     
  5097                           ; BSR set to: 14
  5098   002B86  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5099   002B8A  0E1F               	movlw	31
  5100   002B8C  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  5101   002B8E  A4D8               	btfss	status,2,c
  5102   002B90  EFCC  F015         	goto	u1141
  5103   002B94  EFCE  F015         	goto	u1140
  5104   002B98                     u1141:
  5105   002B98  EFBB  F015         	goto	l157
  5106   002B9C                     u1140:
  5107   002B9C                     
  5108                           ; BSR set to: 14
  5109   002B9C  0012               	return		;funcret
  5110   002B9E                     __end_of_I2C_2_Master_Idle:
  5111                           	callstack 0
  5112                           
  5113 ;; *************** function _I2C_2_Master_Init *****************
  5114 ;; Defined at:
  5115 ;;		line 4 in file "i2c.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;Total ram usage:        0 bytes
  5134 ;; Hardware stack levels used: 1
  5135 ;; Hardware stack levels required when called: 3
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_color_click_init
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text30
  5144   002B22                     __ptext30:
  5145                           	callstack 0
  5146   002B22                     _I2C_2_Master_Init:
  5147                           	callstack 26
  5148   002B22                     
  5149                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5150   002B22  010E               	movlb	14	; () banked
  5151   002B24  51D9               	movf	217,w,b	;volatile
  5152   002B26  0BF0               	andlw	-16
  5153   002B28  0908               	iorlw	8
  5154   002B2A  6FD9               	movwf	217,b	;volatile
  5155   002B2C                     
  5156                           ; BSR set to: 14
  5157                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5158   002B2C  8BD9               	bsf	217,5,b	;volatile
  5159                           
  5160                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5161   002B2E  0E9F               	movlw	159
  5162   002B30  6FD6               	movwf	214,b	;volatile
  5163   002B32                     
  5164                           ; BSR set to: 14
  5165                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5166   002B32  8A84               	bsf	132,5,c	;volatile
  5167   002B34                     
  5168                           ; BSR set to: 14
  5169                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5170   002B34  8C84               	bsf	132,6,c	;volatile
  5171   002B36                     
  5172                           ; BSR set to: 14
  5173                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5174   002B36  9BA7               	bcf	167,5,b	;volatile
  5175   002B38                     
  5176                           ; BSR set to: 14
  5177                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5178   002B38  9DA7               	bcf	167,6,b	;volatile
  5179                           
  5180                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5181   002B3A  0E1D               	movlw	29
  5182   002B3C  6F1D               	movwf	29,b	;volatile
  5183                           
  5184                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5185   002B3E  0E1E               	movlw	30
  5186   002B40  6F1C               	movwf	28,b	;volatile
  5187                           
  5188                           ;i2c.c: 18:   RD5PPS=0x1C;
  5189   002B42  0E1C               	movlw	28
  5190   002B44  6F6F               	movwf	111,b	;volatile
  5191                           
  5192                           ;i2c.c: 19:   RD6PPS=0x1B;
  5193   002B46  0E1B               	movlw	27
  5194   002B48  6F70               	movwf	112,b	;volatile
  5195   002B4A                     
  5196                           ; BSR set to: 14
  5197   002B4A  0012               	return		;funcret
  5198   002B4C                     __end_of_I2C_2_Master_Init:
  5199                           	callstack 0
  5200                           
  5201 ;; *************** function _calibration *****************
  5202 ;; Defined at:
  5203 ;;		line 296 in file "dc_motor.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  mL              1   34[COMRAM] PTR struct DC_motor
  5206 ;;		 -> main@motorL(10), 
  5207 ;;  mR              1   35[COMRAM] PTR struct DC_motor
  5208 ;;		 -> main@motorR(10), 
  5209 ;;  turnSpeed       1   36[COMRAM] unsigned char 
  5210 ;;  turnDuration    1   37[COMRAM] PTR unsigned char 
  5211 ;;		 -> main@turnDuration(1), 
  5212 ;;  turnRamp        1   38[COMRAM] unsigned char 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5224 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5227 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5228 ;;Total ram usage:        7 bytes
  5229 ;; Hardware stack levels used: 1
  5230 ;; Hardware stack levels required when called: 6
  5231 ;; This function calls:
  5232 ;;		_turnLeft
  5233 ;;		_turnRight
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text31
  5240   001DD4                     __ptext31:
  5241                           	callstack 0
  5242   001DD4                     _calibration:
  5243                           	callstack 24
  5244   001DD4                     l2833:
  5245                           
  5246                           ;dc_motor.c: 296: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 297: {;dc_motor.c: 299:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  5247   001DD4  C023  F017         	movff	calibration@mL,turnLeft@mL
  5248   001DD8  C024  F018         	movff	calibration@mR,turnLeft@mR
  5249   001DDC  C025  F019         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  5250   001DE0  5026               	movf	calibration@turnDuration^0,w,c
  5251   001DE2  6ED9               	movwf	fsr2l,c
  5252   001DE4  6ADA               	clrf	fsr2h,c
  5253   001DE6  50DF               	movf	indf2,w,c
  5254   001DE8  6E1A               	movwf	turnLeft@turnDuration^0,c
  5255   001DEA  C027  F01B         	movff	calibration@turnRamp,turnLeft@turnRamp
  5256   001DEE  EC0F  F00E         	call	_turnLeft	;wreg free
  5257   001DF2                     
  5258                           ;dc_motor.c: 300:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5259   001DF2  0E05               	movlw	5
  5260   001DF4  6E29               	movwf	(??_calibration+1)^0,c
  5261   001DF6  0E0F               	movlw	15
  5262   001DF8  6E28               	movwf	??_calibration^0,c
  5263   001DFA  0EF1               	movlw	241
  5264   001DFC                     u2537:
  5265   001DFC  2EE8               	decfsz	wreg,f,c
  5266   001DFE  D7FE               	bra	u2537
  5267   001E00  2E28               	decfsz	??_calibration^0,f,c
  5268   001E02  D7FC               	bra	u2537
  5269   001E04  2E29               	decfsz	(??_calibration+1)^0,f,c
  5270   001E06  D7FA               	bra	u2537
  5271   001E08  0000               	nop	
  5272   001E0A                     
  5273                           ;dc_motor.c: 301:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  5274   001E0A  C023  F017         	movff	calibration@mL,turnLeft@mL
  5275   001E0E  C024  F018         	movff	calibration@mR,turnLeft@mR
  5276   001E12  C025  F019         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  5277   001E16  5026               	movf	calibration@turnDuration^0,w,c
  5278   001E18  6ED9               	movwf	fsr2l,c
  5279   001E1A  6ADA               	clrf	fsr2h,c
  5280   001E1C  50DF               	movf	indf2,w,c
  5281   001E1E  6E1A               	movwf	turnLeft@turnDuration^0,c
  5282   001E20  C027  F01B         	movff	calibration@turnRamp,turnLeft@turnRamp
  5283   001E24  EC0F  F00E         	call	_turnLeft	;wreg free
  5284                           
  5285                           ;dc_motor.c: 302:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5286   001E28  0E05               	movlw	5
  5287   001E2A  6E29               	movwf	(??_calibration+1)^0,c
  5288   001E2C  0E0F               	movlw	15
  5289   001E2E  6E28               	movwf	??_calibration^0,c
  5290   001E30  0EF1               	movlw	241
  5291   001E32                     u2547:
  5292   001E32  2EE8               	decfsz	wreg,f,c
  5293   001E34  D7FE               	bra	u2547
  5294   001E36  2E28               	decfsz	??_calibration^0,f,c
  5295   001E38  D7FC               	bra	u2547
  5296   001E3A  2E29               	decfsz	(??_calibration+1)^0,f,c
  5297   001E3C  D7FA               	bra	u2547
  5298   001E3E  0000               	nop	
  5299   001E40                     
  5300                           ;dc_motor.c: 303:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  5301   001E40  C023  F017         	movff	calibration@mL,turnRight@mL
  5302   001E44  C024  F018         	movff	calibration@mR,turnRight@mR
  5303   001E48  C025  F019         	movff	calibration@turnSpeed,turnRight@turnSpeed
  5304   001E4C  5026               	movf	calibration@turnDuration^0,w,c
  5305   001E4E  6ED9               	movwf	fsr2l,c
  5306   001E50  6ADA               	clrf	fsr2h,c
  5307   001E52  50DF               	movf	indf2,w,c
  5308   001E54  6E1A               	movwf	turnRight@turnDuration^0,c
  5309   001E56  C027  F01B         	movff	calibration@turnRamp,turnRight@turnRamp
  5310   001E5A  EC34  F00D         	call	_turnRight	;wreg free
  5311   001E5E                     
  5312                           ;dc_motor.c: 304:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5313   001E5E  0E05               	movlw	5
  5314   001E60  6E29               	movwf	(??_calibration+1)^0,c
  5315   001E62  0E0F               	movlw	15
  5316   001E64  6E28               	movwf	??_calibration^0,c
  5317   001E66  0EF1               	movlw	241
  5318   001E68                     u2557:
  5319   001E68  2EE8               	decfsz	wreg,f,c
  5320   001E6A  D7FE               	bra	u2557
  5321   001E6C  2E28               	decfsz	??_calibration^0,f,c
  5322   001E6E  D7FC               	bra	u2557
  5323   001E70  2E29               	decfsz	(??_calibration+1)^0,f,c
  5324   001E72  D7FA               	bra	u2557
  5325   001E74  0000               	nop	
  5326                           
  5327                           ;dc_motor.c: 305:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  5328   001E76  C023  F017         	movff	calibration@mL,turnRight@mL
  5329   001E7A  C024  F018         	movff	calibration@mR,turnRight@mR
  5330   001E7E  C025  F019         	movff	calibration@turnSpeed,turnRight@turnSpeed
  5331   001E82  5026               	movf	calibration@turnDuration^0,w,c
  5332   001E84  6ED9               	movwf	fsr2l,c
  5333   001E86  6ADA               	clrf	fsr2h,c
  5334   001E88  50DF               	movf	indf2,w,c
  5335   001E8A  6E1A               	movwf	turnRight@turnDuration^0,c
  5336   001E8C  C027  F01B         	movff	calibration@turnRamp,turnRight@turnRamp
  5337   001E90  EC34  F00D         	call	_turnRight	;wreg free
  5338   001E94                     l525:
  5339   001E94  A48E               	btfss	142,2,c	;volatile
  5340   001E96  EF4F  F00F         	goto	u1831
  5341   001E9A  EF51  F00F         	goto	u1830
  5342   001E9E                     u1831:
  5343   001E9E  EF58  F00F         	goto	l529
  5344   001EA2                     u1830:
  5345   001EA2  B68E               	btfsc	142,3,c	;volatile
  5346   001EA4  EF56  F00F         	goto	u1841
  5347   001EA8  EF58  F00F         	goto	u1840
  5348   001EAC                     u1841:
  5349   001EAC  EF4A  F00F         	goto	l525
  5350   001EB0                     u1840:
  5351   001EB0                     l529:
  5352                           
  5353                           ;dc_motor.c: 310:         if (!PORTFbits.RF2 && *turnDuration>0) {
  5354   001EB0  B48E               	btfsc	142,2,c	;volatile
  5355   001EB2  EF5D  F00F         	goto	u1851
  5356   001EB6  EF5F  F00F         	goto	u1850
  5357   001EBA                     u1851:
  5358   001EBA  EF6E  F00F         	goto	l530
  5359   001EBE                     u1850:
  5360   001EBE  5026               	movf	calibration@turnDuration^0,w,c
  5361   001EC0  6ED9               	movwf	fsr2l,c
  5362   001EC2  6ADA               	clrf	fsr2h,c
  5363   001EC4  50DF               	movf	indf2,w,c
  5364   001EC6  B4D8               	btfsc	status,2,c
  5365   001EC8  EF68  F00F         	goto	u1861
  5366   001ECC  EF6A  F00F         	goto	u1860
  5367   001ED0                     u1861:
  5368   001ED0  EF6E  F00F         	goto	l530
  5369   001ED4                     u1860:
  5370   001ED4                     
  5371                           ;dc_motor.c: 311:             *turnDuration--;
  5372   001ED4  0626               	decf	calibration@turnDuration^0,f,c
  5373   001ED6                     
  5374                           ;dc_motor.c: 312:             LATDbits.LATD7 = 1;
  5375   001ED6  8E7C               	bsf	124,7,c	;volatile
  5376                           
  5377                           ;dc_motor.c: 313:         }
  5378   001ED8  EF77  F00F         	goto	l2855
  5379   001EDC                     l530:
  5380   001EDC  B68E               	btfsc	142,3,c	;volatile
  5381   001EDE  EF73  F00F         	goto	u1871
  5382   001EE2  EF75  F00F         	goto	u1870
  5383   001EE6                     u1871:
  5384   001EE6  EF77  F00F         	goto	l2855
  5385   001EEA                     u1870:
  5386   001EEA                     
  5387                           ;dc_motor.c: 316:             *turnDuration++;
  5388   001EEA  2A26               	incf	calibration@turnDuration^0,f,c
  5389   001EEC                     
  5390                           ;dc_motor.c: 317:             LATHbits.LATH3 = 1;
  5391   001EEC  8680               	bsf	128,3,c	;volatile
  5392   001EEE                     l2855:
  5393                           
  5394                           ;dc_motor.c: 320:         _delay((unsigned long)((500)*(64000000/4000.0)));
  5395   001EEE  0E29               	movlw	41
  5396   001EF0  6E29               	movwf	(??_calibration+1)^0,c
  5397   001EF2  0E96               	movlw	150
  5398   001EF4  6E28               	movwf	??_calibration^0,c
  5399   001EF6  0E7F               	movlw	127
  5400   001EF8                     u2567:
  5401   001EF8  2EE8               	decfsz	wreg,f,c
  5402   001EFA  D7FE               	bra	u2567
  5403   001EFC  2E28               	decfsz	??_calibration^0,f,c
  5404   001EFE  D7FC               	bra	u2567
  5405   001F00  2E29               	decfsz	(??_calibration+1)^0,f,c
  5406   001F02  D7FA               	bra	u2567
  5407   001F04  0000               	nop	
  5408   001F06                     
  5409                           ;dc_motor.c: 322:         if (!PORTFbits.RF3) {
  5410   001F06  B68E               	btfsc	142,3,c	;volatile
  5411   001F08  EF88  F00F         	goto	u1881
  5412   001F0C  EF8A  F00F         	goto	u1880
  5413   001F10                     u1881:
  5414   001F10  EF8D  F00F         	goto	l533
  5415   001F14                     u1880:
  5416   001F14                     
  5417                           ;dc_motor.c: 323:             *turnDuration--;
  5418   001F14  0626               	decf	calibration@turnDuration^0,f,c
  5419                           
  5420                           ;dc_motor.c: 324:             break;
  5421   001F16  EF91  F00F         	goto	l534
  5422   001F1A                     l533:
  5423                           
  5424                           ;dc_motor.c: 327:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5425   001F1A  9680               	bcf	128,3,c	;volatile
  5426   001F1C  9E7C               	bcf	124,7,c	;volatile
  5427   001F1E  EFEA  F00E         	goto	l2833
  5428   001F22                     l534:
  5429                           
  5430                           ;dc_motor.c: 341:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  5431   001F22  8680               	bsf	128,3,c	;volatile
  5432   001F24  8E7C               	bsf	124,7,c	;volatile
  5433   001F26                     
  5434                           ;dc_motor.c: 342:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5435   001F26  0E09               	movlw	9
  5436   001F28  6E29               	movwf	(??_calibration+1)^0,c
  5437   001F2A  0E1E               	movlw	30
  5438   001F2C  6E28               	movwf	??_calibration^0,c
  5439   001F2E  0EE4               	movlw	228
  5440   001F30                     u2577:
  5441   001F30  2EE8               	decfsz	wreg,f,c
  5442   001F32  D7FE               	bra	u2577
  5443   001F34  2E28               	decfsz	??_calibration^0,f,c
  5444   001F36  D7FC               	bra	u2577
  5445   001F38  2E29               	decfsz	(??_calibration+1)^0,f,c
  5446   001F3A  D7FA               	bra	u2577
  5447   001F3C  D000               	nop2	
  5448   001F3E                     
  5449                           ;dc_motor.c: 343:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  5450   001F3E  9680               	bcf	128,3,c	;volatile
  5451   001F40  9E7C               	bcf	124,7,c	;volatile
  5452   001F42  0012               	return		;funcret
  5453   001F44                     __end_of_calibration:
  5454                           	callstack 0
  5455                           
  5456 ;; *************** function _turnRight *****************
  5457 ;; Defined at:
  5458 ;;		line 214 in file "dc_motor.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  5461 ;;		 -> main@motorL(10), 
  5462 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  5463 ;;		 -> main@motorR(10), 
  5464 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  5465 ;;  turnDuration    1   25[COMRAM] unsigned char 
  5466 ;;  turnRamp        1   26[COMRAM] unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  cur_power       2   32[COMRAM] int 
  5469 ;;  i               2   30[COMRAM] int 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5479 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5480 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;Total ram usage:       12 bytes
  5484 ;; Hardware stack levels used: 1
  5485 ;; Hardware stack levels required when called: 5
  5486 ;; This function calls:
  5487 ;;		_setMotorPWM
  5488 ;; This function is called by:
  5489 ;;		_move
  5490 ;;		_calibration
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text32
  5495   001A68                     __ptext32:
  5496                           	callstack 0
  5497   001A68                     _turnRight:
  5498                           	callstack 24
  5499   001A68                     
  5500                           ;dc_motor.c: 214: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 215: {;dc_motor.c: 216:     mL->dir
      +                          ection = 1;
  5501   001A68  5017               	movf	turnRight@mL^0,w,c
  5502   001A6A  6ED9               	movwf	fsr2l,c
  5503   001A6C  6ADA               	clrf	fsr2h,c
  5504   001A6E  0E01               	movlw	1
  5505   001A70  26D9               	addwf	fsr2l,f,c
  5506   001A72  0E01               	movlw	1
  5507   001A74  6EDF               	movwf	indf2,c
  5508                           
  5509                           ;dc_motor.c: 217:     mR->direction = 0;
  5510   001A76  5018               	movf	turnRight@mR^0,w,c
  5511   001A78  6ED9               	movwf	fsr2l,c
  5512   001A7A  6ADA               	clrf	fsr2h,c
  5513   001A7C  0E01               	movlw	1
  5514   001A7E  26D9               	addwf	fsr2l,f,c
  5515   001A80  6ADF               	clrf	indf2,c
  5516   001A82                     
  5517                           ;dc_motor.c: 218:     int i;;dc_motor.c: 219:     int cur_power;;dc_motor.c: 220:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  5518   001A82  0E00               	movlw	0
  5519   001A84  6E22               	movwf	(turnRight@cur_power+1)^0,c
  5520   001A86  0E01               	movlw	1
  5521   001A88  6E21               	movwf	turnRight@cur_power^0,c
  5522   001A8A  EF89  F00D         	goto	l2573
  5523   001A8E                     l2559:
  5524                           
  5525                           ;dc_motor.c: 221:         mL->power = cur_power+mL->compensation;
  5526   001A8E  5017               	movf	turnRight@mL^0,w,c
  5527   001A90  6ED9               	movwf	fsr2l,c
  5528   001A92  6ADA               	clrf	fsr2h,c
  5529   001A94  5017               	movf	turnRight@mL^0,w,c
  5530   001A96  6EE1               	movwf	fsr1l,c
  5531   001A98  6AE2               	clrf	fsr1h,c
  5532   001A9A  0E09               	movlw	9
  5533   001A9C  26E1               	addwf	fsr1l,f,c
  5534   001A9E  50E7               	movf	indf1,w,c
  5535   001AA0  2421               	addwf	turnRight@cur_power^0,w,c
  5536   001AA2  6EDF               	movwf	indf2,c
  5537                           
  5538                           ;dc_motor.c: 222:         mR->power = cur_power+mR->compensation;
  5539   001AA4  5018               	movf	turnRight@mR^0,w,c
  5540   001AA6  6ED9               	movwf	fsr2l,c
  5541   001AA8  6ADA               	clrf	fsr2h,c
  5542   001AAA  5018               	movf	turnRight@mR^0,w,c
  5543   001AAC  6EE1               	movwf	fsr1l,c
  5544   001AAE  6AE2               	clrf	fsr1h,c
  5545   001AB0  0E09               	movlw	9
  5546   001AB2  26E1               	addwf	fsr1l,f,c
  5547   001AB4  50E7               	movf	indf1,w,c
  5548   001AB6  2421               	addwf	turnRight@cur_power^0,w,c
  5549   001AB8  6EDF               	movwf	indf2,c
  5550   001ABA                     
  5551                           ;dc_motor.c: 223:         setMotorPWM(mL);
  5552   001ABA  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  5553   001ABE  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5554   001AC2                     
  5555                           ;dc_motor.c: 224:         setMotorPWM(mR);
  5556   001AC2  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  5557   001AC6  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5558   001ACA                     
  5559                           ;dc_motor.c: 225:         for (i=0;i<turnRamp;i++) {
  5560   001ACA  0E00               	movlw	0
  5561   001ACC  6E20               	movwf	(turnRight@i+1)^0,c
  5562   001ACE  0E00               	movlw	0
  5563   001AD0  6E1F               	movwf	turnRight@i^0,c
  5564   001AD2  EF75  F00D         	goto	l483
  5565   001AD6                     l2567:
  5566                           
  5567                           ;dc_motor.c: 226:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5568   001AD6  0E68               	movlw	104
  5569   001AD8  6E1C               	movwf	??_turnRight^0,c
  5570   001ADA  0EE4               	movlw	228
  5571   001ADC                     u2587:
  5572   001ADC  2EE8               	decfsz	wreg,f,c
  5573   001ADE  D7FE               	bra	u2587
  5574   001AE0  2E1C               	decfsz	??_turnRight^0,f,c
  5575   001AE2  D7FC               	bra	u2587
  5576   001AE4  D000               	nop2	
  5577   001AE6                     
  5578                           ;dc_motor.c: 227:         }
  5579   001AE6  4A1F               	infsnz	turnRight@i^0,f,c
  5580   001AE8  2A20               	incf	(turnRight@i+1)^0,f,c
  5581   001AEA                     l483:
  5582   001AEA  501B               	movf	turnRight@turnRamp^0,w,c
  5583   001AEC  6E1C               	movwf	??_turnRight^0,c
  5584   001AEE  6A1D               	clrf	(??_turnRight+1)^0,c
  5585   001AF0  501C               	movf	??_turnRight^0,w,c
  5586   001AF2  5C1F               	subwf	turnRight@i^0,w,c
  5587   001AF4  5020               	movf	(turnRight@i+1)^0,w,c
  5588   001AF6  0A80               	xorlw	128
  5589   001AF8  6E1E               	movwf	(??_turnRight+2)^0,c
  5590   001AFA  501D               	movf	(??_turnRight+1)^0,w,c
  5591   001AFC  0A80               	xorlw	128
  5592   001AFE  581E               	subwfb	(??_turnRight+2)^0,w,c
  5593   001B00  A0D8               	btfss	status,0,c
  5594   001B02  EF85  F00D         	goto	u1551
  5595   001B06  EF87  F00D         	goto	u1550
  5596   001B0A                     u1551:
  5597   001B0A  EF6B  F00D         	goto	l2567
  5598   001B0E                     u1550:
  5599   001B0E                     
  5600                           ;dc_motor.c: 228:     }
  5601   001B0E  4A21               	infsnz	turnRight@cur_power^0,f,c
  5602   001B10  2A22               	incf	(turnRight@cur_power+1)^0,f,c
  5603   001B12                     l2573:
  5604   001B12  5019               	movf	turnRight@turnSpeed^0,w,c
  5605   001B14  6E1C               	movwf	??_turnRight^0,c
  5606   001B16  6A1D               	clrf	(??_turnRight+1)^0,c
  5607   001B18  5021               	movf	turnRight@cur_power^0,w,c
  5608   001B1A  5C1C               	subwf	??_turnRight^0,w,c
  5609   001B1C  501D               	movf	(??_turnRight+1)^0,w,c
  5610   001B1E  0A80               	xorlw	128
  5611   001B20  6E1E               	movwf	(??_turnRight+2)^0,c
  5612   001B22  5022               	movf	(turnRight@cur_power+1)^0,w,c
  5613   001B24  0A80               	xorlw	128
  5614   001B26  581E               	subwfb	(??_turnRight+2)^0,w,c
  5615   001B28  B0D8               	btfsc	status,0,c
  5616   001B2A  EF99  F00D         	goto	u1561
  5617   001B2E  EF9B  F00D         	goto	u1560
  5618   001B32                     u1561:
  5619   001B32  EF47  F00D         	goto	l2559
  5620   001B36                     u1560:
  5621   001B36                     
  5622                           ;dc_motor.c: 230:     for (i=0;i<turnDuration;i++) {
  5623   001B36  0E00               	movlw	0
  5624   001B38  6E20               	movwf	(turnRight@i+1)^0,c
  5625   001B3A  0E00               	movlw	0
  5626   001B3C  6E1F               	movwf	turnRight@i^0,c
  5627   001B3E  EFAB  F00D         	goto	l487
  5628   001B42                     l2577:
  5629                           
  5630                           ;dc_motor.c: 231:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5631   001B42  0E68               	movlw	104
  5632   001B44  6E1C               	movwf	??_turnRight^0,c
  5633   001B46  0EE4               	movlw	228
  5634   001B48                     u2597:
  5635   001B48  2EE8               	decfsz	wreg,f,c
  5636   001B4A  D7FE               	bra	u2597
  5637   001B4C  2E1C               	decfsz	??_turnRight^0,f,c
  5638   001B4E  D7FC               	bra	u2597
  5639   001B50  D000               	nop2	
  5640   001B52                     
  5641                           ;dc_motor.c: 232:         }
  5642   001B52  4A1F               	infsnz	turnRight@i^0,f,c
  5643   001B54  2A20               	incf	(turnRight@i+1)^0,f,c
  5644   001B56                     l487:
  5645   001B56  501A               	movf	turnRight@turnDuration^0,w,c
  5646   001B58  6E1C               	movwf	??_turnRight^0,c
  5647   001B5A  6A1D               	clrf	(??_turnRight+1)^0,c
  5648   001B5C  501C               	movf	??_turnRight^0,w,c
  5649   001B5E  5C1F               	subwf	turnRight@i^0,w,c
  5650   001B60  5020               	movf	(turnRight@i+1)^0,w,c
  5651   001B62  0A80               	xorlw	128
  5652   001B64  6E1E               	movwf	(??_turnRight+2)^0,c
  5653   001B66  501D               	movf	(??_turnRight+1)^0,w,c
  5654   001B68  0A80               	xorlw	128
  5655   001B6A  581E               	subwfb	(??_turnRight+2)^0,w,c
  5656   001B6C  A0D8               	btfss	status,0,c
  5657   001B6E  EFBB  F00D         	goto	u1571
  5658   001B72  EFBD  F00D         	goto	u1570
  5659   001B76                     u1571:
  5660   001B76  EFA1  F00D         	goto	l2577
  5661   001B7A                     u1570:
  5662   001B7A                     
  5663                           ;dc_motor.c: 234:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  5664   001B7A  C019  F021         	movff	turnRight@turnSpeed,turnRight@cur_power
  5665   001B7E  6A22               	clrf	(turnRight@cur_power+1)^0,c
  5666   001B80                     l2581:
  5667   001B80  BE22               	btfsc	(turnRight@cur_power+1)^0,7,c
  5668   001B82  EFC7  F00D         	goto	u1580
  5669   001B86  EFC5  F00D         	goto	u1581
  5670   001B8A                     u1581:
  5671   001B8A  EFC9  F00D         	goto	l2585
  5672   001B8E                     u1580:
  5673   001B8E  EF0E  F00E         	goto	l495
  5674   001B92                     l2585:
  5675                           
  5676                           ;dc_motor.c: 235:         mL->power = cur_power+mL->compensation;
  5677   001B92  5017               	movf	turnRight@mL^0,w,c
  5678   001B94  6ED9               	movwf	fsr2l,c
  5679   001B96  6ADA               	clrf	fsr2h,c
  5680   001B98  5017               	movf	turnRight@mL^0,w,c
  5681   001B9A  6EE1               	movwf	fsr1l,c
  5682   001B9C  6AE2               	clrf	fsr1h,c
  5683   001B9E  0E09               	movlw	9
  5684   001BA0  26E1               	addwf	fsr1l,f,c
  5685   001BA2  50E7               	movf	indf1,w,c
  5686   001BA4  2421               	addwf	turnRight@cur_power^0,w,c
  5687   001BA6  6EDF               	movwf	indf2,c
  5688                           
  5689                           ;dc_motor.c: 236:         mR->power = cur_power+mR->compensation;
  5690   001BA8  5018               	movf	turnRight@mR^0,w,c
  5691   001BAA  6ED9               	movwf	fsr2l,c
  5692   001BAC  6ADA               	clrf	fsr2h,c
  5693   001BAE  5018               	movf	turnRight@mR^0,w,c
  5694   001BB0  6EE1               	movwf	fsr1l,c
  5695   001BB2  6AE2               	clrf	fsr1h,c
  5696   001BB4  0E09               	movlw	9
  5697   001BB6  26E1               	addwf	fsr1l,f,c
  5698   001BB8  50E7               	movf	indf1,w,c
  5699   001BBA  2421               	addwf	turnRight@cur_power^0,w,c
  5700   001BBC  6EDF               	movwf	indf2,c
  5701   001BBE                     
  5702                           ;dc_motor.c: 237:         setMotorPWM(mL);
  5703   001BBE  C017  F012         	movff	turnRight@mL,setMotorPWM@m
  5704   001BC2  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5705   001BC6                     
  5706                           ;dc_motor.c: 238:         setMotorPWM(mR);
  5707   001BC6  C018  F012         	movff	turnRight@mR,setMotorPWM@m
  5708   001BCA  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5709   001BCE                     
  5710                           ;dc_motor.c: 239:         for (i=0;i<turnRamp;i++) {
  5711   001BCE  0E00               	movlw	0
  5712   001BD0  6E20               	movwf	(turnRight@i+1)^0,c
  5713   001BD2  0E00               	movlw	0
  5714   001BD4  6E1F               	movwf	turnRight@i^0,c
  5715   001BD6  EFF7  F00D         	goto	l492
  5716   001BDA                     l2593:
  5717                           
  5718                           ;dc_motor.c: 240:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5719   001BDA  0E68               	movlw	104
  5720   001BDC  6E1C               	movwf	??_turnRight^0,c
  5721   001BDE  0EE4               	movlw	228
  5722   001BE0                     u2607:
  5723   001BE0  2EE8               	decfsz	wreg,f,c
  5724   001BE2  D7FE               	bra	u2607
  5725   001BE4  2E1C               	decfsz	??_turnRight^0,f,c
  5726   001BE6  D7FC               	bra	u2607
  5727   001BE8  D000               	nop2	
  5728   001BEA                     
  5729                           ;dc_motor.c: 241:         }
  5730   001BEA  4A1F               	infsnz	turnRight@i^0,f,c
  5731   001BEC  2A20               	incf	(turnRight@i+1)^0,f,c
  5732   001BEE                     l492:
  5733   001BEE  501B               	movf	turnRight@turnRamp^0,w,c
  5734   001BF0  6E1C               	movwf	??_turnRight^0,c
  5735   001BF2  6A1D               	clrf	(??_turnRight+1)^0,c
  5736   001BF4  501C               	movf	??_turnRight^0,w,c
  5737   001BF6  5C1F               	subwf	turnRight@i^0,w,c
  5738   001BF8  5020               	movf	(turnRight@i+1)^0,w,c
  5739   001BFA  0A80               	xorlw	128
  5740   001BFC  6E1E               	movwf	(??_turnRight+2)^0,c
  5741   001BFE  501D               	movf	(??_turnRight+1)^0,w,c
  5742   001C00  0A80               	xorlw	128
  5743   001C02  581E               	subwfb	(??_turnRight+2)^0,w,c
  5744   001C04  A0D8               	btfss	status,0,c
  5745   001C06  EF07  F00E         	goto	u1591
  5746   001C0A  EF09  F00E         	goto	u1590
  5747   001C0E                     u1591:
  5748   001C0E  EFED  F00D         	goto	l2593
  5749   001C12                     u1590:
  5750   001C12                     
  5751                           ;dc_motor.c: 242:     }
  5752   001C12  0621               	decf	turnRight@cur_power^0,f,c
  5753   001C14  A0D8               	btfss	status,0,c
  5754   001C16  0622               	decf	(turnRight@cur_power+1)^0,f,c
  5755   001C18  EFC0  F00D         	goto	l2581
  5756   001C1C                     l495:
  5757   001C1C  0012               	return		;funcret
  5758   001C1E                     __end_of_turnRight:
  5759                           	callstack 0
  5760                           
  5761 ;; *************** function _turnLeft *****************
  5762 ;; Defined at:
  5763 ;;		line 182 in file "dc_motor.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  mL              1   22[COMRAM] PTR struct DC_motor
  5766 ;;		 -> main@motorL(10), 
  5767 ;;  mR              1   23[COMRAM] PTR struct DC_motor
  5768 ;;		 -> main@motorR(10), 
  5769 ;;  turnSpeed       1   24[COMRAM] unsigned char 
  5770 ;;  turnDuration    1   25[COMRAM] unsigned char 
  5771 ;;  turnRamp        1   26[COMRAM] unsigned char 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  cur_power       2   32[COMRAM] int 
  5774 ;;  i               2   30[COMRAM] int 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5784 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5785 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5786 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5787 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5788 ;;Total ram usage:       12 bytes
  5789 ;; Hardware stack levels used: 1
  5790 ;; Hardware stack levels required when called: 5
  5791 ;; This function calls:
  5792 ;;		_setMotorPWM
  5793 ;; This function is called by:
  5794 ;;		_move
  5795 ;;		_calibration
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text33
  5800   001C1E                     __ptext33:
  5801                           	callstack 0
  5802   001C1E                     _turnLeft:
  5803                           	callstack 24
  5804   001C1E                     
  5805                           ;dc_motor.c: 182: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 183: {;dc_motor.c: 184:     mL->dire
      +                          ction = 0;
  5806   001C1E  5017               	movf	turnLeft@mL^0,w,c
  5807   001C20  6ED9               	movwf	fsr2l,c
  5808   001C22  6ADA               	clrf	fsr2h,c
  5809   001C24  0E01               	movlw	1
  5810   001C26  26D9               	addwf	fsr2l,f,c
  5811   001C28  6ADF               	clrf	indf2,c
  5812                           
  5813                           ;dc_motor.c: 185:     mR->direction = 1;
  5814   001C2A  5018               	movf	turnLeft@mR^0,w,c
  5815   001C2C  6ED9               	movwf	fsr2l,c
  5816   001C2E  6ADA               	clrf	fsr2h,c
  5817   001C30  0E01               	movlw	1
  5818   001C32  26D9               	addwf	fsr2l,f,c
  5819   001C34  0E01               	movlw	1
  5820   001C36  6EDF               	movwf	indf2,c
  5821   001C38                     
  5822                           ;dc_motor.c: 186:     int i;;dc_motor.c: 187:     int cur_power;;dc_motor.c: 188:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  5823   001C38  0E00               	movlw	0
  5824   001C3A  6E22               	movwf	(turnLeft@cur_power+1)^0,c
  5825   001C3C  0E01               	movlw	1
  5826   001C3E  6E21               	movwf	turnLeft@cur_power^0,c
  5827   001C40  EF64  F00E         	goto	l2619
  5828   001C44                     l2605:
  5829                           
  5830                           ;dc_motor.c: 189:         mL->power = cur_power+mL->compensation;
  5831   001C44  5017               	movf	turnLeft@mL^0,w,c
  5832   001C46  6ED9               	movwf	fsr2l,c
  5833   001C48  6ADA               	clrf	fsr2h,c
  5834   001C4A  5017               	movf	turnLeft@mL^0,w,c
  5835   001C4C  6EE1               	movwf	fsr1l,c
  5836   001C4E  6AE2               	clrf	fsr1h,c
  5837   001C50  0E09               	movlw	9
  5838   001C52  26E1               	addwf	fsr1l,f,c
  5839   001C54  50E7               	movf	indf1,w,c
  5840   001C56  2421               	addwf	turnLeft@cur_power^0,w,c
  5841   001C58  6EDF               	movwf	indf2,c
  5842                           
  5843                           ;dc_motor.c: 190:         mR->power = cur_power+mR->compensation;
  5844   001C5A  5018               	movf	turnLeft@mR^0,w,c
  5845   001C5C  6ED9               	movwf	fsr2l,c
  5846   001C5E  6ADA               	clrf	fsr2h,c
  5847   001C60  5018               	movf	turnLeft@mR^0,w,c
  5848   001C62  6EE1               	movwf	fsr1l,c
  5849   001C64  6AE2               	clrf	fsr1h,c
  5850   001C66  0E09               	movlw	9
  5851   001C68  26E1               	addwf	fsr1l,f,c
  5852   001C6A  50E7               	movf	indf1,w,c
  5853   001C6C  2421               	addwf	turnLeft@cur_power^0,w,c
  5854   001C6E  6EDF               	movwf	indf2,c
  5855   001C70                     
  5856                           ;dc_motor.c: 191:         setMotorPWM(mL);
  5857   001C70  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  5858   001C74  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5859   001C78                     
  5860                           ;dc_motor.c: 192:         setMotorPWM(mR);
  5861   001C78  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  5862   001C7C  ECA2  F00F         	call	_setMotorPWM	;wreg free
  5863   001C80                     
  5864                           ;dc_motor.c: 193:         for (i=0;i<turnRamp;i++) {
  5865   001C80  0E00               	movlw	0
  5866   001C82  6E20               	movwf	(turnLeft@i+1)^0,c
  5867   001C84  0E00               	movlw	0
  5868   001C86  6E1F               	movwf	turnLeft@i^0,c
  5869   001C88  EF50  F00E         	goto	l466
  5870   001C8C                     l2613:
  5871                           
  5872                           ;dc_motor.c: 194:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5873   001C8C  0E68               	movlw	104
  5874   001C8E  6E1C               	movwf	??_turnLeft^0,c
  5875   001C90  0EE4               	movlw	228
  5876   001C92                     u2617:
  5877   001C92  2EE8               	decfsz	wreg,f,c
  5878   001C94  D7FE               	bra	u2617
  5879   001C96  2E1C               	decfsz	??_turnLeft^0,f,c
  5880   001C98  D7FC               	bra	u2617
  5881   001C9A  D000               	nop2	
  5882   001C9C                     
  5883                           ;dc_motor.c: 195:         }
  5884   001C9C  4A1F               	infsnz	turnLeft@i^0,f,c
  5885   001C9E  2A20               	incf	(turnLeft@i+1)^0,f,c
  5886   001CA0                     l466:
  5887   001CA0  501B               	movf	turnLeft@turnRamp^0,w,c
  5888   001CA2  6E1C               	movwf	??_turnLeft^0,c
  5889   001CA4  6A1D               	clrf	(??_turnLeft+1)^0,c
  5890   001CA6  501C               	movf	??_turnLeft^0,w,c
  5891   001CA8  5C1F               	subwf	turnLeft@i^0,w,c
  5892   001CAA  5020               	movf	(turnLeft@i+1)^0,w,c
  5893   001CAC  0A80               	xorlw	128
  5894   001CAE  6E1E               	movwf	(??_turnLeft+2)^0,c
  5895   001CB0  501D               	movf	(??_turnLeft+1)^0,w,c
  5896   001CB2  0A80               	xorlw	128
  5897   001CB4  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5898   001CB6  A0D8               	btfss	status,0,c
  5899   001CB8  EF60  F00E         	goto	u1601
  5900   001CBC  EF62  F00E         	goto	u1600
  5901   001CC0                     u1601:
  5902   001CC0  EF46  F00E         	goto	l2613
  5903   001CC4                     u1600:
  5904   001CC4                     
  5905                           ;dc_motor.c: 196:     }
  5906   001CC4  4A21               	infsnz	turnLeft@cur_power^0,f,c
  5907   001CC6  2A22               	incf	(turnLeft@cur_power+1)^0,f,c
  5908   001CC8                     l2619:
  5909   001CC8  5019               	movf	turnLeft@turnSpeed^0,w,c
  5910   001CCA  6E1C               	movwf	??_turnLeft^0,c
  5911   001CCC  6A1D               	clrf	(??_turnLeft+1)^0,c
  5912   001CCE  5021               	movf	turnLeft@cur_power^0,w,c
  5913   001CD0  5C1C               	subwf	??_turnLeft^0,w,c
  5914   001CD2  501D               	movf	(??_turnLeft+1)^0,w,c
  5915   001CD4  0A80               	xorlw	128
  5916   001CD6  6E1E               	movwf	(??_turnLeft+2)^0,c
  5917   001CD8  5022               	movf	(turnLeft@cur_power+1)^0,w,c
  5918   001CDA  0A80               	xorlw	128
  5919   001CDC  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5920   001CDE  B0D8               	btfsc	status,0,c
  5921   001CE0  EF74  F00E         	goto	u1611
  5922   001CE4  EF76  F00E         	goto	u1610
  5923   001CE8                     u1611:
  5924   001CE8  EF22  F00E         	goto	l2605
  5925   001CEC                     u1610:
  5926   001CEC                     
  5927                           ;dc_motor.c: 198:     for (i=0;i<turnDuration;i++) {
  5928   001CEC  0E00               	movlw	0
  5929   001CEE  6E20               	movwf	(turnLeft@i+1)^0,c
  5930   001CF0  0E00               	movlw	0
  5931   001CF2  6E1F               	movwf	turnLeft@i^0,c
  5932   001CF4  EF86  F00E         	goto	l470
  5933   001CF8                     l2623:
  5934                           
  5935                           ;dc_motor.c: 199:             _delay((unsigned long)((5)*(64000000/4000.0)));
  5936   001CF8  0E68               	movlw	104
  5937   001CFA  6E1C               	movwf	??_turnLeft^0,c
  5938   001CFC  0EE4               	movlw	228
  5939   001CFE                     u2627:
  5940   001CFE  2EE8               	decfsz	wreg,f,c
  5941   001D00  D7FE               	bra	u2627
  5942   001D02  2E1C               	decfsz	??_turnLeft^0,f,c
  5943   001D04  D7FC               	bra	u2627
  5944   001D06  D000               	nop2	
  5945   001D08                     
  5946                           ;dc_motor.c: 200:         }
  5947   001D08  4A1F               	infsnz	turnLeft@i^0,f,c
  5948   001D0A  2A20               	incf	(turnLeft@i+1)^0,f,c
  5949   001D0C                     l470:
  5950   001D0C  501A               	movf	turnLeft@turnDuration^0,w,c
  5951   001D0E  6E1C               	movwf	??_turnLeft^0,c
  5952   001D10  6A1D               	clrf	(??_turnLeft+1)^0,c
  5953   001D12  501C               	movf	??_turnLeft^0,w,c
  5954   001D14  5C1F               	subwf	turnLeft@i^0,w,c
  5955   001D16  5020               	movf	(turnLeft@i+1)^0,w,c
  5956   001D18  0A80               	xorlw	128
  5957   001D1A  6E1E               	movwf	(??_turnLeft+2)^0,c
  5958   001D1C  501D               	movf	(??_turnLeft+1)^0,w,c
  5959   001D1E  0A80               	xorlw	128
  5960   001D20  581E               	subwfb	(??_turnLeft+2)^0,w,c
  5961   001D22  A0D8               	btfss	status,0,c
  5962   001D24  EF96  F00E         	goto	u1621
  5963   001D28  EF98  F00E         	goto	u1620
  5964   001D2C                     u1621:
  5965   001D2C  EF7C  F00E         	goto	l2623
  5966   001D30                     u1620:
  5967   001D30                     
  5968                           ;dc_motor.c: 202:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  5969   001D30  C019  F021         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  5970   001D34  6A22               	clrf	(turnLeft@cur_power+1)^0,c
  5971   001D36                     l2627:
  5972   001D36  BE22               	btfsc	(turnLeft@cur_power+1)^0,7,c
  5973   001D38  EFA2  F00E         	goto	u1630
  5974   001D3C  EFA0  F00E         	goto	u1631
  5975   001D40                     u1631:
  5976   001D40  EFA4  F00E         	goto	l2631
  5977   001D44                     u1630:
  5978   001D44  EFE9  F00E         	goto	l478
  5979   001D48                     l2631:
  5980                           
  5981                           ;dc_motor.c: 203:         mL->power = cur_power+mL->compensation;
  5982   001D48  5017               	movf	turnLeft@mL^0,w,c
  5983   001D4A  6ED9               	movwf	fsr2l,c
  5984   001D4C  6ADA               	clrf	fsr2h,c
  5985   001D4E  5017               	movf	turnLeft@mL^0,w,c
  5986   001D50  6EE1               	movwf	fsr1l,c
  5987   001D52  6AE2               	clrf	fsr1h,c
  5988   001D54  0E09               	movlw	9
  5989   001D56  26E1               	addwf	fsr1l,f,c
  5990   001D58  50E7               	movf	indf1,w,c
  5991   001D5A  2421               	addwf	turnLeft@cur_power^0,w,c
  5992   001D5C  6EDF               	movwf	indf2,c
  5993                           
  5994                           ;dc_motor.c: 204:         mR->power = cur_power+mR->compensation;
  5995   001D5E  5018               	movf	turnLeft@mR^0,w,c
  5996   001D60  6ED9               	movwf	fsr2l,c
  5997   001D62  6ADA               	clrf	fsr2h,c
  5998   001D64  5018               	movf	turnLeft@mR^0,w,c
  5999   001D66  6EE1               	movwf	fsr1l,c
  6000   001D68  6AE2               	clrf	fsr1h,c
  6001   001D6A  0E09               	movlw	9
  6002   001D6C  26E1               	addwf	fsr1l,f,c
  6003   001D6E  50E7               	movf	indf1,w,c
  6004   001D70  2421               	addwf	turnLeft@cur_power^0,w,c
  6005   001D72  6EDF               	movwf	indf2,c
  6006   001D74                     
  6007                           ;dc_motor.c: 205:         setMotorPWM(mL);
  6008   001D74  C017  F012         	movff	turnLeft@mL,setMotorPWM@m
  6009   001D78  ECA2  F00F         	call	_setMotorPWM	;wreg free
  6010   001D7C                     
  6011                           ;dc_motor.c: 206:         setMotorPWM(mR);
  6012   001D7C  C018  F012         	movff	turnLeft@mR,setMotorPWM@m
  6013   001D80  ECA2  F00F         	call	_setMotorPWM	;wreg free
  6014   001D84                     
  6015                           ;dc_motor.c: 207:         for (i=0;i<turnRamp;i++) {
  6016   001D84  0E00               	movlw	0
  6017   001D86  6E20               	movwf	(turnLeft@i+1)^0,c
  6018   001D88  0E00               	movlw	0
  6019   001D8A  6E1F               	movwf	turnLeft@i^0,c
  6020   001D8C  EFD2  F00E         	goto	l475
  6021   001D90                     l2639:
  6022                           
  6023                           ;dc_motor.c: 208:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6024   001D90  0E68               	movlw	104
  6025   001D92  6E1C               	movwf	??_turnLeft^0,c
  6026   001D94  0EE4               	movlw	228
  6027   001D96                     u2637:
  6028   001D96  2EE8               	decfsz	wreg,f,c
  6029   001D98  D7FE               	bra	u2637
  6030   001D9A  2E1C               	decfsz	??_turnLeft^0,f,c
  6031   001D9C  D7FC               	bra	u2637
  6032   001D9E  D000               	nop2	
  6033   001DA0                     
  6034                           ;dc_motor.c: 209:         }
  6035   001DA0  4A1F               	infsnz	turnLeft@i^0,f,c
  6036   001DA2  2A20               	incf	(turnLeft@i+1)^0,f,c
  6037   001DA4                     l475:
  6038   001DA4  501B               	movf	turnLeft@turnRamp^0,w,c
  6039   001DA6  6E1C               	movwf	??_turnLeft^0,c
  6040   001DA8  6A1D               	clrf	(??_turnLeft+1)^0,c
  6041   001DAA  501C               	movf	??_turnLeft^0,w,c
  6042   001DAC  5C1F               	subwf	turnLeft@i^0,w,c
  6043   001DAE  5020               	movf	(turnLeft@i+1)^0,w,c
  6044   001DB0  0A80               	xorlw	128
  6045   001DB2  6E1E               	movwf	(??_turnLeft+2)^0,c
  6046   001DB4  501D               	movf	(??_turnLeft+1)^0,w,c
  6047   001DB6  0A80               	xorlw	128
  6048   001DB8  581E               	subwfb	(??_turnLeft+2)^0,w,c
  6049   001DBA  A0D8               	btfss	status,0,c
  6050   001DBC  EFE2  F00E         	goto	u1641
  6051   001DC0  EFE4  F00E         	goto	u1640
  6052   001DC4                     u1641:
  6053   001DC4  EFC8  F00E         	goto	l2639
  6054   001DC8                     u1640:
  6055   001DC8                     
  6056                           ;dc_motor.c: 210:     }
  6057   001DC8  0621               	decf	turnLeft@cur_power^0,f,c
  6058   001DCA  A0D8               	btfss	status,0,c
  6059   001DCC  0622               	decf	(turnLeft@cur_power+1)^0,f,c
  6060   001DCE  EF9B  F00E         	goto	l2627
  6061   001DD2                     l478:
  6062   001DD2  0012               	return		;funcret
  6063   001DD4                     __end_of_turnLeft:
  6064                           	callstack 0
  6065                           
  6066 ;; *************** function _setMotorPWM *****************
  6067 ;; Defined at:
  6068 ;;		line 65 in file "dc_motor.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  m               1   17[COMRAM] PTR struct DC_motor
  6071 ;;		 -> main@motorR(10), main@motorL(10), 
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;  negDuty         1   21[COMRAM] unsigned char 
  6074 ;;  posDuty         1   20[COMRAM] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      void 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6084 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;Total ram usage:        5 bytes
  6089 ;; Hardware stack levels used: 1
  6090 ;; Hardware stack levels required when called: 4
  6091 ;; This function calls:
  6092 ;;		___lwdiv
  6093 ;;		___wmul
  6094 ;; This function is called by:
  6095 ;;		_stop
  6096 ;;		_turnLeft
  6097 ;;		_turnRight
  6098 ;;		_fullSpeedAhead
  6099 ;;		_reverseOneSquare
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text34
  6104   001F44                     __ptext34:
  6105                           	callstack 0
  6106   001F44                     _setMotorPWM:
  6107                           	callstack 25
  6108   001F44                     
  6109                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  6110   001F44  5012               	movf	setMotorPWM@m^0,w,c
  6111   001F46  6ED9               	movwf	fsr2l,c
  6112   001F48  6ADA               	clrf	fsr2h,c
  6113   001F4A  0E02               	movlw	2
  6114   001F4C  26D9               	addwf	fsr2l,f,c
  6115   001F4E  50DF               	movf	indf2,w,c
  6116   001F50  B4D8               	btfsc	status,2,c
  6117   001F52  EFAD  F00F         	goto	u1351
  6118   001F56  EFAF  F00F         	goto	u1350
  6119   001F5A                     u1351:
  6120   001F5A  EFDF  F00F         	goto	l2415
  6121   001F5E                     u1350:
  6122   001F5E                     
  6123                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6124   001F5E  5012               	movf	setMotorPWM@m^0,w,c
  6125   001F60  6ED9               	movwf	fsr2l,c
  6126   001F62  6ADA               	clrf	fsr2h,c
  6127   001F64  50DF               	movf	indf2,w,c
  6128   001F66  6E13               	movwf	??_setMotorPWM^0,c
  6129   001F68  5013               	movf	??_setMotorPWM^0,w,c
  6130   001F6A  6E05               	movwf	___wmul@multiplier^0,c
  6131   001F6C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  6132   001F6E  5012               	movf	setMotorPWM@m^0,w,c
  6133   001F70  6ED9               	movwf	fsr2l,c
  6134   001F72  6ADA               	clrf	fsr2h,c
  6135   001F74  0E03               	movlw	3
  6136   001F76  26D9               	addwf	fsr2l,f,c
  6137   001F78  CFDE F007          	movff	postinc2,___wmul@multiplicand
  6138   001F7C  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  6139   001F80  ECE3  F015         	call	___wmul	;wreg free
  6140   001F84  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  6141   001F88  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  6142   001F8C  0E00               	movlw	0
  6143   001F8E  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6144   001F90  0E64               	movlw	100
  6145   001F92  6E0D               	movwf	___lwdiv@divisor^0,c
  6146   001F94  ECAA  F013         	call	___lwdiv	;wreg free
  6147   001F98  5012               	movf	setMotorPWM@m^0,w,c
  6148   001F9A  6ED9               	movwf	fsr2l,c
  6149   001F9C  6ADA               	clrf	fsr2h,c
  6150   001F9E  0E03               	movlw	3
  6151   001FA0  26D9               	addwf	fsr2l,f,c
  6152   001FA2  50DF               	movf	indf2,w,c
  6153   001FA4  6E14               	movwf	(??_setMotorPWM+1)^0,c
  6154   001FA6  500B               	movf	?___lwdiv^0,w,c
  6155   001FA8  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  6156   001FAA  6E15               	movwf	setMotorPWM@posDuty^0,c
  6157   001FAC                     
  6158                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  6159   001FAC  5012               	movf	setMotorPWM@m^0,w,c
  6160   001FAE  6ED9               	movwf	fsr2l,c
  6161   001FB0  6ADA               	clrf	fsr2h,c
  6162   001FB2  0E03               	movlw	3
  6163   001FB4  26D9               	addwf	fsr2l,f,c
  6164   001FB6  50DF               	movf	indf2,w,c
  6165   001FB8  6E16               	movwf	setMotorPWM@negDuty^0,c
  6166                           
  6167                           ;dc_motor.c: 72:     }
  6168   001FBA  EF00  F010         	goto	l2419
  6169   001FBE                     l2415:
  6170                           
  6171                           ;dc_motor.c: 74:         posDuty=0;
  6172   001FBE  0E00               	movlw	0
  6173   001FC0  6E15               	movwf	setMotorPWM@posDuty^0,c
  6174   001FC2                     
  6175                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6176   001FC2  5012               	movf	setMotorPWM@m^0,w,c
  6177   001FC4  6ED9               	movwf	fsr2l,c
  6178   001FC6  6ADA               	clrf	fsr2h,c
  6179   001FC8  50DF               	movf	indf2,w,c
  6180   001FCA  6E13               	movwf	??_setMotorPWM^0,c
  6181   001FCC  5013               	movf	??_setMotorPWM^0,w,c
  6182   001FCE  6E05               	movwf	___wmul@multiplier^0,c
  6183   001FD0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  6184   001FD2  5012               	movf	setMotorPWM@m^0,w,c
  6185   001FD4  6ED9               	movwf	fsr2l,c
  6186   001FD6  6ADA               	clrf	fsr2h,c
  6187   001FD8  0E03               	movlw	3
  6188   001FDA  26D9               	addwf	fsr2l,f,c
  6189   001FDC  CFDE F007          	movff	postinc2,___wmul@multiplicand
  6190   001FE0  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  6191   001FE4  ECE3  F015         	call	___wmul	;wreg free
  6192   001FE8  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  6193   001FEC  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  6194   001FF0  0E00               	movlw	0
  6195   001FF2  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6196   001FF4  0E64               	movlw	100
  6197   001FF6  6E0D               	movwf	___lwdiv@divisor^0,c
  6198   001FF8  ECAA  F013         	call	___lwdiv	;wreg free
  6199   001FFC  500B               	movf	?___lwdiv^0,w,c
  6200   001FFE  6E16               	movwf	setMotorPWM@negDuty^0,c
  6201   002000                     l2419:
  6202                           
  6203                           ;dc_motor.c: 78:     if (m->direction) {
  6204   002000  5012               	movf	setMotorPWM@m^0,w,c
  6205   002002  6ED9               	movwf	fsr2l,c
  6206   002004  6ADA               	clrf	fsr2h,c
  6207   002006  0E01               	movlw	1
  6208   002008  26D9               	addwf	fsr2l,f,c
  6209   00200A  50DF               	movf	indf2,w,c
  6210   00200C  B4D8               	btfsc	status,2,c
  6211   00200E  EF0B  F010         	goto	u1361
  6212   002012  EF0D  F010         	goto	u1360
  6213   002016                     u1361:
  6214   002016  EF2D  F010         	goto	l2423
  6215   00201A                     u1360:
  6216   00201A                     
  6217                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  6218   00201A  5012               	movf	setMotorPWM@m^0,w,c
  6219   00201C  6ED9               	movwf	fsr2l,c
  6220   00201E  6ADA               	clrf	fsr2h,c
  6221   002020  0E05               	movlw	5
  6222   002022  26D9               	addwf	fsr2l,f,c
  6223   002024  CFDE F013          	movff	postinc2,??_setMotorPWM
  6224   002028  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6225   00202C  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6226   002030  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6227   002034  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6228                           
  6229                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  6230   002038  5012               	movf	setMotorPWM@m^0,w,c
  6231   00203A  6ED9               	movwf	fsr2l,c
  6232   00203C  6ADA               	clrf	fsr2h,c
  6233   00203E  0E07               	movlw	7
  6234   002040  26D9               	addwf	fsr2l,f,c
  6235   002042  CFDE F013          	movff	postinc2,??_setMotorPWM
  6236   002046  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6237   00204A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6238   00204E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6239   002052  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6240                           
  6241                           ;dc_motor.c: 81:     } else {
  6242   002056  EF4B  F010         	goto	l435
  6243   00205A                     l2423:
  6244                           
  6245                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  6246   00205A  5012               	movf	setMotorPWM@m^0,w,c
  6247   00205C  6ED9               	movwf	fsr2l,c
  6248   00205E  6ADA               	clrf	fsr2h,c
  6249   002060  0E05               	movlw	5
  6250   002062  26D9               	addwf	fsr2l,f,c
  6251   002064  CFDE F013          	movff	postinc2,??_setMotorPWM
  6252   002068  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6253   00206C  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6254   002070  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6255   002074  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6256                           
  6257                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  6258   002078  5012               	movf	setMotorPWM@m^0,w,c
  6259   00207A  6ED9               	movwf	fsr2l,c
  6260   00207C  6ADA               	clrf	fsr2h,c
  6261   00207E  0E07               	movlw	7
  6262   002080  26D9               	addwf	fsr2l,f,c
  6263   002082  CFDE F013          	movff	postinc2,??_setMotorPWM
  6264   002086  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6265   00208A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6266   00208E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6267   002092  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6268   002096                     l435:
  6269   002096  0012               	return		;funcret
  6270   002098                     __end_of_setMotorPWM:
  6271                           	callstack 0
  6272                           
  6273 ;; *************** function ___wmul *****************
  6274 ;; Defined at:
  6275 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  multiplier      2    4[COMRAM] unsigned int 
  6278 ;;  multiplicand    2    6[COMRAM] unsigned int 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  product         2    8[COMRAM] unsigned int 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  2    4[COMRAM] unsigned int 
  6283 ;; Registers used:
  6284 ;;		wreg, status,2, status,0, prodl, prodh
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6293 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6294 ;;Total ram usage:        6 bytes
  6295 ;; Hardware stack levels used: 1
  6296 ;; Hardware stack levels required when called: 3
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_setMotorPWM
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text35
  6305   002BC6                     __ptext35:
  6306                           	callstack 0
  6307   002BC6                     ___wmul:
  6308                           	callstack 25
  6309   002BC6  5005               	movf	___wmul@multiplier^0,w,c
  6310   002BC8  0207               	mulwf	___wmul@multiplicand^0,c
  6311   002BCA  CFF3 F009          	movff	prodl,___wmul@product
  6312   002BCE  CFF4 F00A          	movff	prodh,___wmul@product+1
  6313   002BD2  5005               	movf	___wmul@multiplier^0,w,c
  6314   002BD4  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6315   002BD6  50F3               	movf	243,w,c
  6316   002BD8  260A               	addwf	(___wmul@product+1)^0,f,c
  6317   002BDA  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6318   002BDC  0207               	mulwf	___wmul@multiplicand^0,c
  6319   002BDE  50F3               	movf	243,w,c
  6320   002BE0  260A               	addwf	(___wmul@product+1)^0,f,c
  6321   002BE2  C009  F005         	movff	___wmul@product,?___wmul
  6322   002BE6  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6323   002BEA  0012               	return		;funcret
  6324   002BEC                     __end_of___wmul:
  6325                           	callstack 0
  6326                           
  6327 ;; *************** function ___lwdiv *****************
  6328 ;; Defined at:
  6329 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  dividend        2   10[COMRAM] unsigned int 
  6332 ;;  divisor         2   12[COMRAM] unsigned int 
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  quotient        2   14[COMRAM] unsigned int 
  6335 ;;  counter         1   16[COMRAM] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  2   10[COMRAM] unsigned int 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6346 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6348 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6349 ;;Total ram usage:        7 bytes
  6350 ;; Hardware stack levels used: 1
  6351 ;; Hardware stack levels required when called: 3
  6352 ;; This function calls:
  6353 ;;		Nothing
  6354 ;; This function is called by:
  6355 ;;		_setMotorPWM
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text36
  6360   002754                     __ptext36:
  6361                           	callstack 0
  6362   002754                     ___lwdiv:
  6363                           	callstack 25
  6364   002754  0E00               	movlw	0
  6365   002756  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  6366   002758  0E00               	movlw	0
  6367   00275A  6E0F               	movwf	___lwdiv@quotient^0,c
  6368   00275C  500D               	movf	___lwdiv@divisor^0,w,c
  6369   00275E  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6370   002760  B4D8               	btfsc	status,2,c
  6371   002762  EFB5  F013         	goto	u1271
  6372   002766  EFB7  F013         	goto	u1270
  6373   00276A                     u1271:
  6374   00276A  EFDF  F013         	goto	l1030
  6375   00276E                     u1270:
  6376   00276E  0E01               	movlw	1
  6377   002770  6E11               	movwf	___lwdiv@counter^0,c
  6378   002772  EFBF  F013         	goto	l2365
  6379   002776                     l2363:
  6380   002776  90D8               	bcf	status,0,c
  6381   002778  360D               	rlcf	___lwdiv@divisor^0,f,c
  6382   00277A  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6383   00277C  2A11               	incf	___lwdiv@counter^0,f,c
  6384   00277E                     l2365:
  6385   00277E  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  6386   002780  EFC4  F013         	goto	u1281
  6387   002784  EFC6  F013         	goto	u1280
  6388   002788                     u1281:
  6389   002788  EFBB  F013         	goto	l2363
  6390   00278C                     u1280:
  6391   00278C                     l2367:
  6392   00278C  90D8               	bcf	status,0,c
  6393   00278E  360F               	rlcf	___lwdiv@quotient^0,f,c
  6394   002790  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6395   002792  500D               	movf	___lwdiv@divisor^0,w,c
  6396   002794  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6397   002796  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6398   002798  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6399   00279A  A0D8               	btfss	status,0,c
  6400   00279C  EFD2  F013         	goto	u1291
  6401   0027A0  EFD4  F013         	goto	u1290
  6402   0027A4                     u1291:
  6403   0027A4  EFD9  F013         	goto	l2375
  6404   0027A8                     u1290:
  6405   0027A8  500D               	movf	___lwdiv@divisor^0,w,c
  6406   0027AA  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6407   0027AC  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6408   0027AE  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6409   0027B0  800F               	bsf	___lwdiv@quotient^0,0,c
  6410   0027B2                     l2375:
  6411   0027B2  90D8               	bcf	status,0,c
  6412   0027B4  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6413   0027B6  320D               	rrcf	___lwdiv@divisor^0,f,c
  6414   0027B8  2E11               	decfsz	___lwdiv@counter^0,f,c
  6415   0027BA  EFC6  F013         	goto	l2367
  6416   0027BE                     l1030:
  6417   0027BE  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6418   0027C2  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6419   0027C6  0012               	return		;funcret
  6420   0027C8                     __end_of___lwdiv:
  6421                           	callstack 0
  6422                           
  6423 ;; *************** function _batteryLevel *****************
  6424 ;; Defined at:
  6425 ;;		line 6 in file "battery.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  batteryQuart    1   13[COMRAM] unsigned char 
  6430 ;;  batteryVolta    1   12[COMRAM] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2, status,0, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6443 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6444 ;;Total ram usage:        2 bytes
  6445 ;; Hardware stack levels used: 1
  6446 ;; Hardware stack levels required when called: 4
  6447 ;; This function calls:
  6448 ;;		_ADC_getval
  6449 ;;		_ADC_init
  6450 ;;		___awdiv
  6451 ;; This function is called by:
  6452 ;;		_main
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text37
  6457   002958                     __ptext37:
  6458                           	callstack 0
  6459   002958                     _batteryLevel:
  6460                           	callstack 26
  6461   002958                     
  6462                           ;battery.c: 7:     ADC_init();
  6463   002958  EC47  F016         	call	_ADC_init	;wreg free
  6464                           
  6465                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  6466   00295C  EC60  F016         	call	_ADC_getval	;wreg free
  6467   002960  6E0D               	movwf	batteryLevel@batteryVoltage^0,c
  6468   002962                     
  6469                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  6470   002962  C00D  F005         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  6471   002966  6A06               	clrf	(___awdiv@dividend+1)^0,c
  6472   002968  0E00               	movlw	0
  6473   00296A  6E08               	movwf	(___awdiv@divisor+1)^0,c
  6474   00296C  0E18               	movlw	24
  6475   00296E  6E07               	movwf	___awdiv@divisor^0,c
  6476   002970  EC53  F012         	call	___awdiv	;wreg free
  6477   002974  5005               	movf	?___awdiv^0,w,c
  6478   002976  6E0E               	movwf	batteryLevel@batteryQuarter^0,c
  6479   002978                     
  6480                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  6481   002978  A20E               	btfss	batteryLevel@batteryQuarter^0,1,c
  6482   00297A  EFC1  F014         	goto	u1811
  6483   00297E  EFC3  F014         	goto	u1810
  6484   002982                     u1811:
  6485   002982  EFC6  F014         	goto	l359
  6486   002986                     u1810:
  6487   002986  8E7C               	bsf	124,7,c	;volatile
  6488   002988  EFC7  F014         	goto	l360
  6489   00298C                     l359:
  6490   00298C  9E7C               	bcf	124,7,c	;volatile
  6491   00298E                     l360:
  6492                           
  6493                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  6494   00298E  A00E               	btfss	batteryLevel@batteryQuarter^0,0,c
  6495   002990  EFCC  F014         	goto	u1821
  6496   002994  EFCE  F014         	goto	u1820
  6497   002998                     u1821:
  6498   002998  EFD1  F014         	goto	l361
  6499   00299C                     u1820:
  6500   00299C  8680               	bsf	128,3,c	;volatile
  6501   00299E  EFD2  F014         	goto	l363
  6502   0029A2                     l361:
  6503   0029A2  9680               	bcf	128,3,c	;volatile
  6504   0029A4                     l363:
  6505   0029A4  0012               	return		;funcret
  6506   0029A6                     __end_of_batteryLevel:
  6507                           	callstack 0
  6508                           
  6509 ;; *************** function ___awdiv *****************
  6510 ;; Defined at:
  6511 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  dividend        2    4[COMRAM] int 
  6514 ;;  divisor         2    6[COMRAM] int 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  quotient        2   10[COMRAM] int 
  6517 ;;  sign            1    9[COMRAM] unsigned char 
  6518 ;;  counter         1    8[COMRAM] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  2    4[COMRAM] int 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6528 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6529 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6531 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6532 ;;Total ram usage:        8 bytes
  6533 ;; Hardware stack levels used: 1
  6534 ;; Hardware stack levels required when called: 3
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_batteryLevel
  6539 ;;		_vfpfcnvrt
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text38
  6544   0024A6                     __ptext38:
  6545                           	callstack 0
  6546   0024A6                     ___awdiv:
  6547                           	callstack 24
  6548   0024A6  0E00               	movlw	0
  6549   0024A8  6E0A               	movwf	___awdiv@sign^0,c
  6550   0024AA  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  6551   0024AC  EF5C  F012         	goto	u1150
  6552   0024B0  EF5A  F012         	goto	u1151
  6553   0024B4                     u1151:
  6554   0024B4  EF62  F012         	goto	l2285
  6555   0024B8                     u1150:
  6556   0024B8  6C07               	negf	___awdiv@divisor^0,c
  6557   0024BA  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6558   0024BC  B0D8               	btfsc	status,0,c
  6559   0024BE  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6560   0024C0  0E01               	movlw	1
  6561   0024C2  6E0A               	movwf	___awdiv@sign^0,c
  6562   0024C4                     l2285:
  6563   0024C4  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  6564   0024C6  EF69  F012         	goto	u1160
  6565   0024CA  EF67  F012         	goto	u1161
  6566   0024CE                     u1161:
  6567   0024CE  EF6F  F012         	goto	l2291
  6568   0024D2                     u1160:
  6569   0024D2  6C05               	negf	___awdiv@dividend^0,c
  6570   0024D4  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6571   0024D6  B0D8               	btfsc	status,0,c
  6572   0024D8  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6573   0024DA  0E01               	movlw	1
  6574   0024DC  1A0A               	xorwf	___awdiv@sign^0,f,c
  6575   0024DE                     l2291:
  6576   0024DE  0E00               	movlw	0
  6577   0024E0  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6578   0024E2  0E00               	movlw	0
  6579   0024E4  6E0B               	movwf	___awdiv@quotient^0,c
  6580   0024E6  5007               	movf	___awdiv@divisor^0,w,c
  6581   0024E8  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6582   0024EA  B4D8               	btfsc	status,2,c
  6583   0024EC  EF7A  F012         	goto	u1171
  6584   0024F0  EF7C  F012         	goto	u1170
  6585   0024F4                     u1171:
  6586   0024F4  EFA4  F012         	goto	l2313
  6587   0024F8                     u1170:
  6588   0024F8  0E01               	movlw	1
  6589   0024FA  6E09               	movwf	___awdiv@counter^0,c
  6590   0024FC  EF84  F012         	goto	l2299
  6591   002500                     l2297:
  6592   002500  90D8               	bcf	status,0,c
  6593   002502  3607               	rlcf	___awdiv@divisor^0,f,c
  6594   002504  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6595   002506  2A09               	incf	___awdiv@counter^0,f,c
  6596   002508                     l2299:
  6597   002508  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6598   00250A  EF89  F012         	goto	u1181
  6599   00250E  EF8B  F012         	goto	u1180
  6600   002512                     u1181:
  6601   002512  EF80  F012         	goto	l2297
  6602   002516                     u1180:
  6603   002516                     l2301:
  6604   002516  90D8               	bcf	status,0,c
  6605   002518  360B               	rlcf	___awdiv@quotient^0,f,c
  6606   00251A  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6607   00251C  5007               	movf	___awdiv@divisor^0,w,c
  6608   00251E  5C05               	subwf	___awdiv@dividend^0,w,c
  6609   002520  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6610   002522  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6611   002524  A0D8               	btfss	status,0,c
  6612   002526  EF97  F012         	goto	u1191
  6613   00252A  EF99  F012         	goto	u1190
  6614   00252E                     u1191:
  6615   00252E  EF9E  F012         	goto	l2309
  6616   002532                     u1190:
  6617   002532  5007               	movf	___awdiv@divisor^0,w,c
  6618   002534  5E05               	subwf	___awdiv@dividend^0,f,c
  6619   002536  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6620   002538  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6621   00253A  800B               	bsf	___awdiv@quotient^0,0,c
  6622   00253C                     l2309:
  6623   00253C  90D8               	bcf	status,0,c
  6624   00253E  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6625   002540  3207               	rrcf	___awdiv@divisor^0,f,c
  6626   002542  2E09               	decfsz	___awdiv@counter^0,f,c
  6627   002544  EF8B  F012         	goto	l2301
  6628   002548                     l2313:
  6629   002548  500A               	movf	___awdiv@sign^0,w,c
  6630   00254A  B4D8               	btfsc	status,2,c
  6631   00254C  EFAA  F012         	goto	u1201
  6632   002550  EFAC  F012         	goto	u1200
  6633   002554                     u1201:
  6634   002554  EFB0  F012         	goto	l2317
  6635   002558                     u1200:
  6636   002558  6C0B               	negf	___awdiv@quotient^0,c
  6637   00255A  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6638   00255C  B0D8               	btfsc	status,0,c
  6639   00255E  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6640   002560                     l2317:
  6641   002560  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6642   002564  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6643   002568  0012               	return		;funcret
  6644   00256A                     __end_of___awdiv:
  6645                           	callstack 0
  6646                           
  6647 ;; *************** function _ADC_init *****************
  6648 ;; Defined at:
  6649 ;;		line 9 in file "ADC.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;Total ram usage:        0 bytes
  6668 ;; Hardware stack levels used: 1
  6669 ;; Hardware stack levels required when called: 3
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_batteryLevel
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text39
  6678   002C8E                     __ptext39:
  6679                           	callstack 0
  6680   002C8E                     _ADC_init:
  6681                           	callstack 26
  6682   002C8E                     
  6683                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  6684   002C8E  8C86               	bsf	134,6,c	;volatile
  6685                           
  6686                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  6687   002C90  010E               	movlb	14	; () banked
  6688   002C92  8DB4               	bsf	180,6,b	;volatile
  6689                           
  6690                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  6691   002C94  010F               	movlb	15	; () banked
  6692   002C96  9958               	bcf	88,4,b	;volatile
  6693   002C98                     
  6694                           ; BSR set to: 15
  6695                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  6696   002C98  0EFC               	movlw	-4
  6697   002C9A  1758               	andwf	88,f,b	;volatile
  6698                           
  6699                           ;ADC.c: 17:     ADPCH=0b101110;
  6700   002C9C  0E2E               	movlw	46
  6701   002C9E  6F5F               	movwf	95,b	;volatile
  6702   002CA0                     
  6703                           ; BSR set to: 15
  6704                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  6705   002CA0  9460               	bcf	96,2,c	;volatile
  6706   002CA2                     
  6707                           ; BSR set to: 15
  6708                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  6709   002CA2  8860               	bsf	96,4,c	;volatile
  6710   002CA4                     
  6711                           ; BSR set to: 15
  6712                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  6713   002CA4  8E60               	bsf	96,7,c	;volatile
  6714   002CA6                     
  6715                           ; BSR set to: 15
  6716   002CA6  0012               	return		;funcret
  6717   002CA8                     __end_of_ADC_init:
  6718                           	callstack 0
  6719                           
  6720 ;; *************** function _ADC_getval *****************
  6721 ;; Defined at:
  6722 ;;		line 23 in file "ADC.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  tmpval          1    4[COMRAM] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      unsigned char 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6739 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6740 ;;Total ram usage:        1 bytes
  6741 ;; Hardware stack levels used: 1
  6742 ;; Hardware stack levels required when called: 3
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_batteryLevel
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text40
  6751   002CC0                     __ptext40:
  6752                           	callstack 0
  6753   002CC0                     _ADC_getval:
  6754                           	callstack 26
  6755   002CC0                     
  6756                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  6757   002CC0  8060               	bsf	96,0,c	;volatile
  6758   002CC2                     l345:
  6759   002CC2  B060               	btfsc	96,0,c	;volatile
  6760   002CC4  EF66  F016         	goto	u1541
  6761   002CC8  EF68  F016         	goto	u1540
  6762   002CCC                     u1541:
  6763   002CCC  EF61  F016         	goto	l345
  6764   002CD0                     u1540:
  6765   002CD0                     
  6766                           ;ADC.c: 31:     tmpval = ADRESH;
  6767   002CD0  CF64 F005          	movff	3940,ADC_getval@tmpval	;volatile
  6768   002CD4                     
  6769                           ;ADC.c: 35:     return tmpval;
  6770   002CD4  5005               	movf	ADC_getval@tmpval^0,w,c
  6771   002CD6  0012               	return		;funcret
  6772   002CD8                     __end_of_ADC_getval:
  6773                           	callstack 0
  6774                           
  6775 ;; *************** function _TxBufferedString *****************
  6776 ;; Defined at:
  6777 ;;		line 66 in file "serial.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  string          2    5[COMRAM] PTR unsigned char 
  6780 ;;		 -> STR_4(1), STR_2(1), main@buf(40), 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6796 ;;Total ram usage:        2 bytes
  6797 ;; Hardware stack levels used: 1
  6798 ;; Hardware stack levels required when called: 4
  6799 ;; This function calls:
  6800 ;;		_putCharToTxBuf
  6801 ;; This function is called by:
  6802 ;;		_main
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text41
  6807   002898                     __ptext41:
  6808                           	callstack 0
  6809   002898                     _TxBufferedString:
  6810                           	callstack 26
  6811   002898                     
  6812                           ;serial.c: 67:     while(*string != 0){
  6813   002898  EF63  F014         	goto	l3053
  6814   00289C                     l3049:
  6815                           
  6816                           ;serial.c: 68:   putCharToTxBuf(*string++);
  6817   00289C  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6818   0028A0  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6819   0028A4  0E00               	movlw	low (__smallconst shr (0+16))
  6820   0028A6  6EF8               	movwf	tblptru,c
  6821   0028A8  0E0D               	movlw	(high __ramtop+-1)
  6822   0028AA  64F7               	cpfsgt	tblptrh,c
  6823   0028AC  D003               	bra	u2037
  6824   0028AE  0008               	tblrd		*
  6825   0028B0  50F5               	movf	tablat,w,c
  6826   0028B2  D005               	bra	u2030
  6827   0028B4                     u2037:
  6828   0028B4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6829   0028B8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6830   0028BC  50EF               	movf	indf0,w,c
  6831   0028BE                     u2030:
  6832   0028BE  ECA6  F015         	call	_putCharToTxBuf
  6833   0028C2  4A06               	infsnz	TxBufferedString@string^0,f,c
  6834   0028C4  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  6835   0028C6                     l3053:
  6836                           
  6837                           ;serial.c: 67:     while(*string != 0){
  6838   0028C6  C006  FFF6         	movff	TxBufferedString@string,tblptrl
  6839   0028CA  C007  FFF7         	movff	TxBufferedString@string+1,tblptrh
  6840   0028CE  0E00               	movlw	low (__smallconst shr (0+16))
  6841   0028D0  6EF8               	movwf	tblptru,c
  6842   0028D2  0E0D               	movlw	(high __ramtop+-1)
  6843   0028D4  64F7               	cpfsgt	tblptrh,c
  6844   0028D6  D003               	bra	u2047
  6845   0028D8  0008               	tblrd		*
  6846   0028DA  50F5               	movf	tablat,w,c
  6847   0028DC  D005               	bra	u2040
  6848   0028DE                     u2047:
  6849   0028DE  CFF6 FFE9          	movff	tblptrl,fsr0l
  6850   0028E2  CFF7 FFEA          	movff	tblptrh,fsr0h
  6851   0028E6  50EF               	movf	indf0,w,c
  6852   0028E8                     u2040:
  6853   0028E8  0900               	iorlw	0
  6854   0028EA  A4D8               	btfss	status,2,c
  6855   0028EC  EF7A  F014         	goto	u2051
  6856   0028F0  EF7C  F014         	goto	u2050
  6857   0028F4                     u2051:
  6858   0028F4  EF4E  F014         	goto	l3049
  6859   0028F8                     u2050:
  6860   0028F8  0012               	return		;funcret
  6861   0028FA                     __end_of_TxBufferedString:
  6862                           	callstack 0
  6863                           
  6864 ;; *************** function _putCharToTxBuf *****************
  6865 ;; Defined at:
  6866 ;;		line 53 in file "serial.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  byte            1    wreg     unsigned char 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  byte            1    4[COMRAM] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;Total ram usage:        1 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 3
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_TxBufferedString
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text42
  6895   002B4C                     __ptext42:
  6896                           	callstack 0
  6897   002B4C                     _putCharToTxBuf:
  6898                           	callstack 26
  6899                           
  6900                           ;incstack = 0
  6901                           ;putCharToTxBuf@byte stored from wreg
  6902   002B4C  6E05               	movwf	putCharToTxBuf@byte^0,c
  6903   002B4E                     
  6904                           ;serial.c: 54:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  6905   002B4E  0E3B               	movlw	59
  6906   002B50  6457               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  6907   002B52  EFAD  F015         	goto	u1531
  6908   002B56  EFAF  F015         	goto	u1530
  6909   002B5A                     u1531:
  6910   002B5A  EFB1  F015         	goto	l2535
  6911   002B5E                     u1530:
  6912   002B5E  0E00               	movlw	0
  6913   002B60  6E57               	movwf	_TxBufWriteCnt^0,c	;volatile
  6914   002B62                     l2535:
  6915                           
  6916                           ;serial.c: 55:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  6917   002B62  0E00               	movlw	low _EUSART4TXbuf
  6918   002B64  2457               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  6919   002B66  6ED9               	movwf	fsr2l,c
  6920   002B68  6ADA               	clrf	fsr2h,c
  6921   002B6A  0E01               	movlw	high _EUSART4TXbuf
  6922   002B6C  22DA               	addwfc	fsr2h,f,c
  6923   002B6E  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  6924   002B72  2A57               	incf	_TxBufWriteCnt^0,f,c	;volatile
  6925   002B74  0012               	return		;funcret
  6926   002B76                     __end_of_putCharToTxBuf:
  6927                           	callstack 0
  6928                           
  6929 ;; *************** function _Interrupts_init *****************
  6930 ;; Defined at:
  6931 ;;		line 10 in file "interrupts.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		None
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6949 ;;Total ram usage:        0 bytes
  6950 ;; Hardware stack levels used: 1
  6951 ;; Hardware stack levels required when called: 3
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text43
  6960   002CF0                     __ptext43:
  6961                           	callstack 0
  6962   002CF0                     _Interrupts_init:
  6963                           	callstack 27
  6964   002CF0                     
  6965                           ;interrupts.c: 12:  TRISBbits.TRISB0=1;
  6966   002CF0  8082               	bsf	130,0,c	;volatile
  6967                           
  6968                           ;interrupts.c: 13:     ANSELBbits.ANSELB0=0;
  6969   002CF2  010E               	movlb	14	; () banked
  6970   002CF4  919A               	bcf	154,0,b	;volatile
  6971                           
  6972                           ;interrupts.c: 14:     PIE0bits.INT0IE=1;
  6973   002CF6  8129               	bsf	41,0,b	;volatile
  6974                           
  6975                           ;interrupts.c: 15:     IPR0bits.INT0IP=1;
  6976   002CF8  811F               	bsf	31,0,b	;volatile
  6977                           
  6978                           ;interrupts.c: 19:     PIE4bits.RC4IE=1;
  6979   002CFA  872D               	bsf	45,3,b	;volatile
  6980                           
  6981                           ;interrupts.c: 20:     INTCONbits.PEIE=1;
  6982   002CFC  8CF2               	bsf	242,6,c	;volatile
  6983                           
  6984                           ;interrupts.c: 21:     INTCONbits.GIE=1;
  6985   002CFE  8EF2               	bsf	242,7,c	;volatile
  6986   002D00                     
  6987                           ; BSR set to: 14
  6988   002D00  0012               	return		;funcret
  6989   002D02                     __end_of_Interrupts_init:
  6990                           	callstack 0
  6991                           
  6992 ;; *************** function _Buggy_init *****************
  6993 ;; Defined at:
  6994 ;;		line 7 in file "buggysetup.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;		None
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;		None
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      void 
  7001 ;; Registers used:
  7002 ;;		None
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7012 ;;Total ram usage:        0 bytes
  7013 ;; Hardware stack levels used: 1
  7014 ;; Hardware stack levels required when called: 3
  7015 ;; This function calls:
  7016 ;;		Nothing
  7017 ;; This function is called by:
  7018 ;;		_main
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text44
  7023   002A26                     __ptext44:
  7024                           	callstack 0
  7025   002A26                     _Buggy_init:
  7026                           	callstack 27
  7027   002A26                     
  7028                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
  7029   002A26  9E7C               	bcf	124,7,c	;volatile
  7030                           
  7031                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
  7032   002A28  9E84               	bcf	132,7,c	;volatile
  7033                           
  7034                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
  7035   002A2A  9680               	bcf	128,3,c	;volatile
  7036                           
  7037                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
  7038   002A2C  9688               	bcf	136,3,c	;volatile
  7039                           
  7040                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
  7041   002A2E  8486               	bsf	134,2,c	;volatile
  7042                           
  7043                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
  7044   002A30  010E               	movlb	14	; () banked
  7045   002A32  95B4               	bcf	180,2,b	;volatile
  7046                           
  7047                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
  7048   002A34  8686               	bsf	134,3,c	;volatile
  7049                           
  7050                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
  7051   002A36  97B4               	bcf	180,3,b	;volatile
  7052                           
  7053                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
  7054   002A38  9280               	bcf	128,1,c	;volatile
  7055                           
  7056                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
  7057   002A3A  9288               	bcf	136,1,c	;volatile
  7058                           
  7059                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
  7060   002A3C  987C               	bcf	124,4,c	;volatile
  7061                           
  7062                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
  7063   002A3E  9884               	bcf	132,4,c	;volatile
  7064                           
  7065                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
  7066   002A40  967C               	bcf	124,3,c	;volatile
  7067                           
  7068                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
  7069   002A42  9684               	bcf	132,3,c	;volatile
  7070                           
  7071                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
  7072   002A44  97A7               	bcf	167,3,b	;volatile
  7073                           
  7074                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
  7075   002A46  9080               	bcf	128,0,c	;volatile
  7076                           
  7077                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
  7078   002A48  9088               	bcf	136,0,c	;volatile
  7079                           
  7080                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
  7081   002A4A  907E               	bcf	126,0,c	;volatile
  7082                           
  7083                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
  7084   002A4C  9086               	bcf	134,0,c	;volatile
  7085                           
  7086                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
  7087   002A4E  907F               	bcf	127,0,c	;volatile
  7088                           
  7089                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
  7090   002A50  9087               	bcf	135,0,c	;volatile
  7091                           
  7092                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
  7093   002A52  9E7D               	bcf	125,7,c	;volatile
  7094                           
  7095                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
  7096   002A54  9E85               	bcf	133,7,c	;volatile
  7097                           
  7098                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
  7099   002A56  9679               	bcf	121,3,c	;volatile
  7100                           
  7101                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
  7102   002A58  9681               	bcf	129,3,c	;volatile
  7103   002A5A                     
  7104                           ; BSR set to: 14
  7105   002A5A  0012               	return		;funcret
  7106   002A5C                     __end_of_Buggy_init:
  7107                           	callstack 0
  7108                           
  7109 ;; *************** function _HighISR *****************
  7110 ;; Defined at:
  7111 ;;		line 29 in file "interrupts.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;Total ram usage:        2 bytes
  7130 ;; Hardware stack levels used: 1
  7131 ;; Hardware stack levels required when called: 2
  7132 ;; This function calls:
  7133 ;;		_getCharFromTxBuf
  7134 ;;		_putCharToRxBuf
  7135 ;;		i2_I2C_2_Master_Start
  7136 ;;		i2_I2C_2_Master_Stop
  7137 ;;		i2_I2C_2_Master_Write
  7138 ;;		i2_isDataInTxBuf
  7139 ;; This function is called by:
  7140 ;;		Interrupt level 2
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           	psect	intcode
  7145   000008                     __pintcode:
  7146                           	callstack 0
  7147   000008                     _HighISR:
  7148                           	callstack 23
  7149                           
  7150                           ; BSR set to: 14
  7151                           ;incstack = 0
  7152   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7153   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  7154   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  7155   000012                     
  7156                           ;interrupts.c: 33:     if(PIR0bits.INT0IF){
  7157   000012  010E               	movlb	14	; () banked
  7158   000014  A133               	btfss	51,0,b	;volatile
  7159   000016  EF0F  F000         	goto	i2u217_41
  7160   00001A  EF11  F000         	goto	i2u217_40
  7161   00001E                     i2u217_41:
  7162   00001E  EF1E  F000         	goto	i2l3205
  7163   000022                     i2u217_40:
  7164   000022                     
  7165                           ; BSR set to: 14
  7166                           ;interrupts.c: 34:  LATHbits.LATH3 = 1;
  7167   000022  8680               	bsf	128,3,c	;volatile
  7168   000024                     
  7169                           ; BSR set to: 14
  7170                           ;interrupts.c: 36:     I2C_2_Master_Start();
  7171   000024  ECA1  F016         	call	i2_I2C_2_Master_Start	;wreg free
  7172                           
  7173                           ;interrupts.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  7174   000028  0E52               	movlw	82
  7175   00002A  EC87  F016         	call	i2_I2C_2_Master_Write
  7176                           
  7177                           ;interrupts.c: 38:  I2C_2_Master_Write(0b11100110);
  7178   00002E  0EE6               	movlw	230
  7179   000030  EC87  F016         	call	i2_I2C_2_Master_Write
  7180                           
  7181                           ;interrupts.c: 39:  I2C_2_Master_Stop();
  7182   000034  EC9C  F016         	call	i2_I2C_2_Master_Stop	;wreg free
  7183   000038                     
  7184                           ;interrupts.c: 41:     PIR0bits.INT0IF = 0;
  7185   000038  010E               	movlb	14	; () banked
  7186   00003A  9133               	bcf	51,0,b	;volatile
  7187   00003C                     i2l3205:
  7188                           
  7189                           ; BSR set to: 14
  7190                           ;interrupts.c: 44:     if(PIR4bits.RC4IF){
  7191   00003C  A737               	btfss	55,3,b	;volatile
  7192   00003E  EF23  F000         	goto	i2u218_41
  7193   000042  EF25  F000         	goto	i2u218_40
  7194   000046                     i2u218_41:
  7195   000046  EF28  F000         	goto	i2l3209
  7196   00004A                     i2u218_40:
  7197   00004A                     
  7198                           ; BSR set to: 14
  7199                           ;interrupts.c: 46:     putCharToRxBuf(RC4REG);
  7200   00004A  51E3               	movf	227,w,b	;volatile
  7201   00004C  ECF6  F015         	call	_putCharToRxBuf
  7202   000050                     i2l3209:
  7203                           
  7204                           ;interrupts.c: 50:     if(PIR4bits.TX4IF){
  7205   000050  010E               	movlb	14	; () banked
  7206   000052  A537               	btfss	55,2,b	;volatile
  7207   000054  EF2E  F000         	goto	i2u219_41
  7208   000058  EF30  F000         	goto	i2u219_40
  7209   00005C                     i2u219_41:
  7210   00005C  EF40  F000         	goto	i2l264
  7211   000060                     i2u219_40:
  7212   000060                     
  7213                           ; BSR set to: 14
  7214                           ;interrupts.c: 52:     TX4REG = getCharFromTxBuf();
  7215   000060  EC7B  F015         	call	_getCharFromTxBuf	;wreg free
  7216   000064  010E               	movlb	14	; () banked
  7217   000066  6FE4               	movwf	228,b	;volatile
  7218   000068                     
  7219                           ; BSR set to: 14
  7220                           ;interrupts.c: 53:     if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
  7221   000068  EC6C  F016         	call	i2_isDataInTxBuf	;wreg free
  7222   00006C  0900               	iorlw	0
  7223   00006E  A4D8               	btfss	status,2,c
  7224   000070  EF3C  F000         	goto	i2u220_41
  7225   000074  EF3E  F000         	goto	i2u220_40
  7226   000078                     i2u220_41:
  7227   000078  EF40  F000         	goto	i2l264
  7228   00007C                     i2u220_40:
  7229   00007C  010E               	movlb	14	; () banked
  7230   00007E  952D               	bcf	45,2,b	;volatile
  7231   000080                     i2l264:
  7232   000080  C004  FFDA         	movff	??_HighISR+1,fsr2h
  7233   000084  C003  FFD9         	movff	??_HighISR,fsr2l
  7234   000088  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7235   00008A  0011               	retfie		f
  7236   00008C                     __end_of_HighISR:
  7237                           	callstack 0
  7238                           
  7239 ;; *************** function i2_isDataInTxBuf *****************
  7240 ;; Defined at:
  7241 ;;		line 61 in file "serial.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;		None
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  1    wreg      unsigned char 
  7248 ;; Registers used:
  7249 ;;		wreg, status,2, status,0
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7259 ;;Total ram usage:        0 bytes
  7260 ;; Hardware stack levels used: 1
  7261 ;; This function calls:
  7262 ;;		Nothing
  7263 ;; This function is called by:
  7264 ;;		_HighISR
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text46
  7269   002CD8                     __ptext46:
  7270                           	callstack 0
  7271   002CD8                     i2_isDataInTxBuf:
  7272                           	callstack 24
  7273   002CD8                     
  7274                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
  7275   002CD8  5056               	movf	_TxBufReadCnt^0,w,c	;volatile
  7276   002CDA  1857               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  7277   002CDC  A4D8               	btfss	status,2,c
  7278   002CDE  EF73  F016         	goto	i2u96_41
  7279   002CE2  EF76  F016         	goto	i2u96_40
  7280   002CE6                     i2u96_41:
  7281   002CE6  0E01               	movlw	1
  7282   002CE8  EF77  F016         	goto	i2u97_40
  7283   002CEC                     i2u96_40:
  7284   002CEC  0E00               	movlw	0
  7285   002CEE                     i2u97_40:
  7286   002CEE  0012               	return		;funcret
  7287   002CF0                     __end_ofi2_isDataInTxBuf:
  7288                           	callstack 0
  7289                           
  7290 ;; *************** function i2_I2C_2_Master_Write *****************
  7291 ;; Defined at:
  7292 ;;		line 45 in file "i2c.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  data_byte       1    wreg     unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  data_byte       1    1[COMRAM] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7310 ;;Total ram usage:        1 bytes
  7311 ;; Hardware stack levels used: 1
  7312 ;; Hardware stack levels required when called: 1
  7313 ;; This function calls:
  7314 ;;		i2_I2C_2_Master_Idle
  7315 ;; This function is called by:
  7316 ;;		_HighISR
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text47
  7321   002D0E                     __ptext47:
  7322                           	callstack 0
  7323   002D0E                     i2_I2C_2_Master_Write:
  7324                           	callstack 23
  7325                           
  7326                           ;incstack = 0
  7327                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7328   002D0E  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7329   002D10                     
  7330                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7331   002D10  ECCF  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7332   002D14                     
  7333                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7334   002D14  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7335   002D18  0012               	return		;funcret
  7336   002D1A                     __end_ofi2_I2C_2_Master_Write:
  7337                           	callstack 0
  7338                           
  7339 ;; *************** function i2_I2C_2_Master_Stop *****************
  7340 ;; Defined at:
  7341 ;;		line 39 in file "i2c.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      void 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7359 ;;Total ram usage:        0 bytes
  7360 ;; Hardware stack levels used: 1
  7361 ;; Hardware stack levels required when called: 1
  7362 ;; This function calls:
  7363 ;;		i2_I2C_2_Master_Idle
  7364 ;; This function is called by:
  7365 ;;		_HighISR
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text48
  7370   002D38                     __ptext48:
  7371                           	callstack 0
  7372   002D38                     i2_I2C_2_Master_Stop:
  7373                           	callstack 23
  7374   002D38                     
  7375                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7376   002D38  ECCF  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7377   002D3C                     
  7378                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7379   002D3C  010E               	movlb	14	; () banked
  7380   002D3E  85DA               	bsf	218,2,b	;volatile
  7381   002D40                     
  7382                           ; BSR set to: 14
  7383   002D40  0012               	return		;funcret
  7384   002D42                     __end_ofi2_I2C_2_Master_Stop:
  7385                           	callstack 0
  7386                           
  7387 ;; *************** function i2_I2C_2_Master_Start *****************
  7388 ;; Defined at:
  7389 ;;		line 27 in file "i2c.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7407 ;;Total ram usage:        0 bytes
  7408 ;; Hardware stack levels used: 1
  7409 ;; Hardware stack levels required when called: 1
  7410 ;; This function calls:
  7411 ;;		i2_I2C_2_Master_Idle
  7412 ;; This function is called by:
  7413 ;;		_HighISR
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text49
  7418   002D42                     __ptext49:
  7419                           	callstack 0
  7420   002D42                     i2_I2C_2_Master_Start:
  7421                           	callstack 23
  7422   002D42                     
  7423                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7424   002D42  ECCF  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7425   002D46                     
  7426                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7427   002D46  010E               	movlb	14	; () banked
  7428   002D48  81DA               	bsf	218,0,b	;volatile
  7429   002D4A                     
  7430                           ; BSR set to: 14
  7431   002D4A  0012               	return		;funcret
  7432   002D4C                     __end_ofi2_I2C_2_Master_Start:
  7433                           	callstack 0
  7434                           
  7435 ;; *************** function i2_I2C_2_Master_Idle *****************
  7436 ;; Defined at:
  7437 ;;		line 22 in file "i2c.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      void 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7455 ;;Total ram usage:        1 bytes
  7456 ;; Hardware stack levels used: 1
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		i2_I2C_2_Master_Start
  7461 ;;		i2_I2C_2_Master_Stop
  7462 ;;		i2_I2C_2_Master_Write
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           	psect	text50
  7467   002B9E                     __ptext50:
  7468                           	callstack 0
  7469   002B9E                     i2_I2C_2_Master_Idle:
  7470                           	callstack 23
  7471   002B9E                     i2l157:
  7472   002B9E  010E               	movlb	14	; () banked
  7473   002BA0  B5D8               	btfsc	216,2,b	;volatile
  7474   002BA2  EFD5  F015         	goto	i2u179_41
  7475   002BA6  EFD7  F015         	goto	i2u179_40
  7476   002BAA                     i2u179_41:
  7477   002BAA  EFCF  F015         	goto	i2l157
  7478   002BAE                     i2u179_40:
  7479   002BAE                     
  7480                           ; BSR set to: 14
  7481   002BAE  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7482   002BB2  0E1F               	movlw	31
  7483   002BB4  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7484   002BB6  A4D8               	btfss	status,2,c
  7485   002BB8  EFE0  F015         	goto	i2u180_41
  7486   002BBC  EFE2  F015         	goto	i2u180_40
  7487   002BC0                     i2u180_41:
  7488   002BC0  EFCF  F015         	goto	i2l157
  7489   002BC4                     i2u180_40:
  7490   002BC4                     
  7491                           ; BSR set to: 14
  7492   002BC4  0012               	return		;funcret
  7493   002BC6                     __end_ofi2_I2C_2_Master_Idle:
  7494                           	callstack 0
  7495                           
  7496 ;; *************** function _putCharToRxBuf *****************
  7497 ;; Defined at:
  7498 ;;		line 33 in file "serial.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  byte            1    wreg     unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  byte            1    0[COMRAM] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7516 ;;Total ram usage:        1 bytes
  7517 ;; Hardware stack levels used: 1
  7518 ;; This function calls:
  7519 ;;		Nothing
  7520 ;; This function is called by:
  7521 ;;		_HighISR
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text51
  7526   002BEC                     __ptext51:
  7527                           	callstack 0
  7528   002BEC                     _putCharToRxBuf:
  7529                           	callstack 24
  7530                           
  7531                           ; BSR set to: 14
  7532                           ;incstack = 0
  7533                           ;putCharToRxBuf@byte stored from wreg
  7534   002BEC  6E01               	movwf	putCharToRxBuf@byte^0,c
  7535   002BEE                     
  7536                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  7537   002BEE  0E13               	movlw	19
  7538   002BF0  6459               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  7539   002BF2  EFFD  F015         	goto	i2u94_41
  7540   002BF6  EFFF  F015         	goto	i2u94_40
  7541   002BFA                     i2u94_41:
  7542   002BFA  EF01  F016         	goto	i2l2085
  7543   002BFE                     i2u94_40:
  7544   002BFE  0E00               	movlw	0
  7545   002C00  6E59               	movwf	_RxBufWriteCnt^0,c	;volatile
  7546   002C02                     i2l2085:
  7547                           
  7548                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  7549   002C02  5059               	movf	_RxBufWriteCnt^0,w,c
  7550   002C04  0F3D               	addlw	low _EUSART4RXbuf
  7551   002C06  6ED9               	movwf	fsr2l,c
  7552   002C08  6ADA               	clrf	fsr2h,c
  7553   002C0A  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  7554   002C0E  2A59               	incf	_RxBufWriteCnt^0,f,c	;volatile
  7555   002C10  0012               	return		;funcret
  7556   002C12                     __end_of_putCharToRxBuf:
  7557                           	callstack 0
  7558                           
  7559 ;; *************** function _getCharFromTxBuf *****************
  7560 ;; Defined at:
  7561 ;;		line 47 in file "serial.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      unsigned char 
  7568 ;; Registers used:
  7569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7579 ;;Total ram usage:        2 bytes
  7580 ;; Hardware stack levels used: 1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_HighISR
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text52
  7589   002AF6                     __ptext52:
  7590                           	callstack 0
  7591   002AF6                     _getCharFromTxBuf:
  7592                           	callstack 24
  7593   002AF6                     
  7594                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  7595   002AF6  0E3B               	movlw	59
  7596   002AF8  6456               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  7597   002AFA  EF81  F015         	goto	i2u206_41
  7598   002AFE  EF83  F015         	goto	i2u206_40
  7599   002B02                     i2u206_41:
  7600   002B02  EF85  F015         	goto	i2l3059
  7601   002B06                     i2u206_40:
  7602   002B06  0E00               	movlw	0
  7603   002B08  6E56               	movwf	_TxBufReadCnt^0,c	;volatile
  7604   002B0A                     i2l3059:
  7605                           
  7606                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
  7607   002B0A  2A56               	incf	_TxBufReadCnt^0,f,c	;volatile
  7608   002B0C  0456               	decf	_TxBufReadCnt^0,w,c	;volatile
  7609   002B0E  6E01               	movwf	??_getCharFromTxBuf^0,c
  7610   002B10  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  7611   002B12  0E00               	movlw	low _EUSART4TXbuf
  7612   002B14  2401               	addwf	??_getCharFromTxBuf^0,w,c
  7613   002B16  6ED9               	movwf	fsr2l,c
  7614   002B18  0E01               	movlw	high _EUSART4TXbuf
  7615   002B1A  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  7616   002B1C  6EDA               	movwf	fsr2h,c
  7617   002B1E  50DF               	movf	indf2,w,c
  7618   002B20  0012               	return		;funcret
  7619   002B22                     __end_of_getCharFromTxBuf:
  7620                           	callstack 0
  7621                           
  7622                           	psect	rparam
  7623   000000                     
  7624                           	psect	temp
  7625   00005A                     btemp:
  7626                           	callstack 0
  7627   00005A                     	ds	1
  7628   000000                     int$flags	set	btemp
  7629   000000                     wtemp8	set	btemp+1
  7630   000000                     ttemp5	set	btemp+1
  7631   000000                     ttemp6	set	btemp+4
  7632   000000                     ttemp7	set	btemp+8
  7633                           
  7634                           	psect	config
  7635                           
  7636                           ;Config register CONFIG1L @ 0x300000
  7637                           ;	External Oscillator mode Selection bits
  7638                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7639                           ;	Power-up default value for COSC bits
  7640                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7641   300000                     	org	3145728
  7642   300000  AA                 	db	170
  7643                           
  7644                           ;Config register CONFIG1H @ 0x300001
  7645                           ;	unspecified, using default values
  7646                           ;	Clock Out Enable bit
  7647                           ;	CLKOUTEN = 0x1, unprogrammed default
  7648                           ;	Clock Switch Enable bit
  7649                           ;	CSWEN = 0x1, unprogrammed default
  7650                           ;	Fail-Safe Clock Monitor Enable bit
  7651                           ;	FCMEN = 0x1, unprogrammed default
  7652   300001                     	org	3145729
  7653   300001  FF                 	db	255
  7654                           
  7655                           ;Config register CONFIG3L @ 0x300004
  7656                           ;	WDT Period Select bits
  7657                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7658                           ;	WDT operating mode
  7659                           ;	WDTE = OFF, WDT Disabled
  7660   300004                     	org	3145732
  7661   300004  9F                 	db	159
  7662                           
  7663                           ;Config register CONFIG3H @ 0x300005
  7664                           ;	unspecified, using default values
  7665                           ;	WDT Window Select bits
  7666                           ;	WDTCWS = 0x7, unprogrammed default
  7667                           ;	WDT input clock selector
  7668                           ;	WDTCCS = 0x7, unprogrammed default
  7669   300005                     	org	3145733
  7670   300005  FF                 	db	255
  7671                           tosu	equ	0xFFF
  7672                           tosh	equ	0xFFE
  7673                           tosl	equ	0xFFD
  7674                           stkptr	equ	0xFFC
  7675                           pclatu	equ	0xFFB
  7676                           pclath	equ	0xFFA
  7677                           pcl	equ	0xFF9
  7678                           tblptru	equ	0xFF8
  7679                           tblptrh	equ	0xFF7
  7680                           tblptrl	equ	0xFF6
  7681                           tablat	equ	0xFF5
  7682                           prodh	equ	0xFF4
  7683                           prodl	equ	0xFF3
  7684                           indf0	equ	0xFEF
  7685                           postinc0	equ	0xFEE
  7686                           postdec0	equ	0xFED
  7687                           preinc0	equ	0xFEC
  7688                           plusw0	equ	0xFEB
  7689                           fsr0h	equ	0xFEA
  7690                           fsr0l	equ	0xFE9
  7691                           wreg	equ	0xFE8
  7692                           indf1	equ	0xFE7
  7693                           postinc1	equ	0xFE6
  7694                           postdec1	equ	0xFE5
  7695                           preinc1	equ	0xFE4
  7696                           plusw1	equ	0xFE3
  7697                           fsr1h	equ	0xFE2
  7698                           fsr1l	equ	0xFE1
  7699                           bsr	equ	0xFE0
  7700                           indf2	equ	0xFDF
  7701                           postinc2	equ	0xFDE
  7702                           postdec2	equ	0xFDD
  7703                           preinc2	equ	0xFDC
  7704                           plusw2	equ	0xFDB
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8

Data Sizes:
    Strings     97
    Constant    0
    Data        0
    BSS         161
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160     87     159
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    calibration@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    calibration@turnDuration	PTR unsigned char  size(1) Largest target is 1
		 -> main@turnDuration(BANK0[1]), 

    color_normalise@RGBC_n	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_n(BANK0[8]), 

    color_read@RGBC	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    move@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    move@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    S2938$buffer	PTR unsigned char  size(2) Largest target is 0

    S2938$source	PTR const unsigned char  size(2) Largest target is 0

    S50DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S50DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), main@motorR(BANK0[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), STR_3(CODE[43]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 40
		 -> main@buf(BANK0[40]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllllll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllllll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), STR_2(CODE[1]), STR_4(CODE[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), STR_3(CODE[43]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), STR_3(CODE[43]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 54
		 -> STR_1(CODE[54]), STR_3(CODE[43]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _move->_reverseOneSquare
    _move->_turnLeft
    _move->_turnRight
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_normalise->___aldiv
    ___aldiv->___lmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf
    _HighISR->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                89    89      0   64286
                                              0 BANK0     87    87      0
                         _Buggy_init
                    _Interrupts_init
                   _TxBufferedString
                       _batteryLevel
                        _calibration
                   _color_click_init
                       _color_detect
                    _color_normalise
                         _color_read
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                               _move
                          _sendTxBuf
                            _sprintf
                               _stop
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stop                                                10     7      3    2913
                                             22 COMRAM    10     7      3
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             33    15     18    3591
                                             29 COMRAM    31    13     18
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    3088
                                             25 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2738
                                             14 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _move                                                11     2      9   28188
                                             34 COMRAM    11     2      9
                     _fullSpeedAhead
                   _reverseOneSquare
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    12     7      5    3737
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                      11     7      4    5029
                                             22 COMRAM    11     7      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           8     7      1     635
                                              8 COMRAM     8     7      1
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_normalise                                     11     2      9    2117
                                             30 COMRAM    11     2      9
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_detect                                         9     1      8     170
                                              4 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     674
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration                                          7     2      5   17031
                                             34 COMRAM     7     2      5
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           12     7      5    7113
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            12     7      5    8633
                                             22 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             17 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     695
                                             12 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     371
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      37
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (7) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (8) i2_I2C_2_Master_Idle                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _TxBufferedString
     _putCharToTxBuf
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_detect
   _color_normalise
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _move
     _fullSpeedAhead
     _reverseOneSquare
       _setMotorPWM
     _turnLeft
     _turnRight
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _stop
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_I2C_2_Master_Start
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Idle
   i2_I2C_2_Master_Write
     i2_I2C_2_Master_Idle
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRllllhh     37      0       0      45        0.0%
BITBIGSFRhlh        32      0       0      33        0.0%
BITBIGSFRllhlll     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      57        0.0%
BITBIGSFRllllll     26      0       0      64        0.0%
BITBIGSFRllllll     20      0       0      48        0.0%
BITBIGSFRllhh       17      0       0      37        0.0%
BITBIGSFRllhlll     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll     11      0       0      52        0.0%
BITBIGSFRhllh        E      0       0      34        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      50        0.0%
BITBIGSFRllllll      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      61        0.0%
BITBIGSFRllllhl      8      0       0      46        0.0%
BITBIGSFRllhlll      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      63        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      5      0       0      59        0.0%
BITBIGSFRllhlhh      5      0       0      38        0.0%
BITBIGSFRllhlll      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      58        0.0%
BITBIGSFRllllll      3      0       0      60        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRlllh        2      0       0      44        0.0%
BITBIGSFRlh          2      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      53        0.0%
BITBIGSFRllllll      1      0       0      62        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRhlll        1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      65        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 22:10:49 2024

                    _white_Light 2C12                               l71 1282                               l69 1274  
                   ___awdiv@sign 000A              ___wmul@multiplicand 0007                 main@turnDuration 0092  
              ??_Interrupts_init 0005                              l111 2C2E                              l105 2896  
                            l113 2C34                              l123 2954                              l108 2C54  
                            l116 16EA                              l206 2A5A                              l127 2956  
                            l119 21D8                              l160 2B9C                              l314 2B74  
                            l154 2B4A                              l323 28F8                              l163 2D36  
                            l172 2D0C                              l500 2458                              l157 2B76  
                            l317 2CBE                              l342 2CA6                              l166 2D22  
                            l255 2D00                              l175 29E6                              l327 2C8C  
                            l360 298E                              l504 24A4                              l345 2CC2  
                            l361 29A2                              l169 2D2C                              l521 18AE  
                            l513 17D8                              l530 1EDC                              l347 2CD0  
                            l363 29A4                              l435 2096                              l515 17FC  
                            l451 11DC                              l348 2CD6                              l428 2752  
                            l533 1F1A                              l525 1E94                              l509 176C  
                            l453 11DC                              l461 23D2                              l470 1D0C  
                            l534 1F22                              l550 2820                              l518 1870  
                            l359 298C                              l551 2830                              l295 2C72  
                            l472 1D30                              l536 1F42                              l529 1EB0  
                            l466 1CA0                              l618 22E4                              l458 2394  
                            l539 2BEA                              l475 1DA4                              l483 1AEA  
                            l492 1BEE                              l478 1DD2                              l495 1C1C  
                            l487 1B56                              l489 1B7A                              l770 2568  
                            l783 2618                              _abs 2A90                     ___awmod@sign 000A  
                  ?_color_detect 0005                              wreg 0FE8                      main@ambient 008B  
                _color_normalise 2098                             l1030 27BE                             ?_abs 000B  
                           l1037 27C6                             l3001 1164                             l1217 2A8E  
                           l2301 2516                             l3005 1180                             l1261 2A24  
                           l2311 2542                             l2303 251C                             l3007 1192  
                           l1255 1A66                             l3031 2A5C                             l1280 26C2  
                           l2305 2532                             l2313 2548                             l2401 2D04  
                           l3017 11AE                             l2321 256A                             l1265 2AAA  
                           l3033 2A64                             l3051 28C2                             l2315 2558  
                           l2307 253A                             l2411 1F5E                             l2403 2D08  
                           l3019 11C0                             l3043 2C74                             l2331 2596  
                           l2323 256E                             l1291 2D4C                             l3035 2A6C  
                           l1268 2AC2                             l3053 28C6                             l2317 2560  
                           l2309 253C                             l2421 201A                             l2413 1FAC  
                           l2501 2B34                             l2405 2D24                             l3045 2C88  
                           l2341 25CE                             l2333 259E                             l2325 257C  
                           l3037 2A74                             l3301 136A                             l3221 11E6  
                           l3047 2898                             l2271 2BC6                             l2423 205A  
                           l2415 1FBE                             l2503 2B36                             l2407 2D28  
                           l2511 2D1E                             l2351 2608                             l2343 25E4  
                           l2335 25B0                             l2327 2584                             l2431 18E6  
                           l3039 2A84                             l3311 1420                             l3303 1384  
                           l3231 1206                             l3223 11EA                             l3049 289C  
                           l2281 24B8                             l2361 276E                             l2273 2BE2  
                           l2417 1FC2                             l2409 1F44                             l2601 1C1E  
                           l2505 2B38                             l2521 29E2                             l2513 29A8  
                           l2353 2610                             l2345 25EC                             l2337 25B8  
                           l2329 2588                             l2441 1944                             l2433 18EA  
                           l2425 18B0                             l3313 1424                             l3305 139E  
                           l3321 1460                             l3241 1224                             l3233 120C  
                           l3225 11EE                             l3217 11DE                             l2531 2B4E  
                           l2291 24DE                             l2283 24C0                             l2371 27A8  
                           l2363 2776                             l2419 2000                             l2611 1C80  
                           l2603 1C38                             l2267 2B76                             l2507 2C38  
                           l2523 29E4                             l2515 29AC                             l2347 25F2  
                           l2339 25C0                             l2451 19C4                             l2443 194E  
                           l2435 18F4                             l2427 18D2                             l3331 14F0  
                           l3323 1468                             l3315 142E                             l3307 13AE  
                           l3251 123C                             l3243 122C                             l3235 1210  
                           l3227 11FA                             l3219 11E2                             l2533 2B5E  
                           l2541 2C98                             l2293 24E6                             l2285 24C4  
                           l2277 24A6                             l2373 27B0                             l2365 277E  
                           l2357 2754                             l2621 1CEC                             l2613 1C8C  
                           l2605 1C44                             l2269 2B86                             l2701 27F6  
                           l2517 29B4                             l2509 2D1A                             l2349 25F8  
                           l2381 262A                             l2461 1A20                             l2453 19D4  
                           l2445 1966                             l2437 1910                             l2429 18DA  
                           l3333 14FA                             l3325 148E                             l3317 1432  
                           l3309 13D6                             l3261 125C                             l3253 1244  
                           l3245 1230                             l3237 1214                             l3229 11FA  
                           l2535 2B62                             l2551 2CD4                             l2543 2CA0  
                           l2295 24F8                             l2287 24D2                             l2279 24AA  
                           l2375 27B2                             l2367 278C                             l2359 275C  
                           l2631 1D48                             l2623 1CF8                             l2615 1C9C  
                           l2607 1C70                             l2711 21FC                             l2703 2800  
                           l2519 29BC                             l2527 2CA8                             l2383 263A  
                           l2455 19E4                             l2463 1A22                             l2447 1996  
                           l2439 192C                             l3335 14FE                             l3327 14A8  
                           l3319 1442                             l3271 1270                             l3263 1260  
                           l3255 124C                             l3247 1234                             l3239 121C  
                           l2537 2B72                             l2545 2CA2                             l2297 2500  
                           l2289 24DA                             l2377 27B8                             l2369 2792  
                           l2641 1DA0                             l2633 1D74                             l2625 1D08  
                           l2617 1CC4                             l2609 1C78                             l2561 1ABA  
                           l2721 2232                             l2713 2200                             l2705 21DA  
                           l2801 26D4                             l2481 2428                             l2393 2A90  
                           l2385 2644                             l2457 19F4                             l2449 19B2  
                           l2465 1A38                             l3329 14EC                             l3281 12D6  
                           l3273 128A                             l3265 1264                             l3257 1254  
                           l3249 1238                             l2547 2CA4                             l2539 2C8E  
                           l2299 2508                             l2643 1DC8                             l2635 1D7C  
                           l2627 1D36                             l2619 1CC8                             l2571 1B0E  
                           l2563 1AC2                             l2555 1A68                             l2731 2274  
                           l2723 2248                             l2715 220E                             l2707 21DE  
                           l2811 272E                             l2803 26FA                             l2491 247C  
                           l2483 2430                             l2475 23D4                             l2651 1710  
                           l2395 2A9E                             l2387 2660                             l2379 261A  
                           l2459 1A06                             l3291 1304                             l3283 12DE  
                           l3275 12A2                             l3267 1268                             l3259 1258  
                           l2549 2CC0                             l2637 1D84                             l2581 1B80  
                           l2565 1ACA                             l2573 1B12                             l2557 1A82  
                           l2397 2D2E                             l2733 2292                             l2725 2250  
                           l2741 22B4                             l2717 221E                             l2709 21EC  
                           l2821 2750                             l2813 2738                             l2805 26FE  
                           l2485 2438                             l2493 2480                             l2477 23F0  
                           l2661 1768                             l2653 173C                             l2389 2692  
                           l2469 1A44                             l3293 130C                             l3285 12E6  
                           l3277 12BA                             l3269 126C                             l2831 299C  
                           l2823 2958                             l2639 1D90                             l2591 1BCE  
                           l2575 1B36                             l2567 1AD6                             l2559 1A8E  
                           l2495 2B22                             l2399 2D32                             l2743 22C4  
                           l2735 22A2                             l2727 225C                             l2719 2222  
                           l2815 273A                             l2807 2722                             l2487 2444  
                           l2479 23FC                             l2671 17D4                             l2663 1790  
                           l2655 1744                             l2647 16EC                             l2751 29F0  
                           l2911 2380                             l2903 2338                             l3295 1330  
                           l3287 12EA                             l3279 12BE                             l2825 2962  
                           l2593 1BDA                             l2585 1B92                             l2577 1B42  
                           l2569 1AE6                             l2841 1E5E                             l2833 1DD4  
                           l2497 2B2C                             l2745 22D4                             l2737 22A4  
                           l2729 226A                             l2921 2098                             l2817 2744  
                           l2809 272C                             l2489 2454                             l2681 1848  
                           l2673 1802                             l2657 174C                             l2665 1794  
                           l2649 1704                             l2753 2A00                             l2913 2390  
                           l2905 2364                             l3297 1352                             l3289 12F0  
                           l2763 2A26                             l2827 2978                             l2595 1BEA  
                           l2587 1BBE                             l2579 1B52                             l2851 1EEA  
                           l2843 1EA2                             l2835 1DF2                             l2499 2B32  
                           l2771 2850                             l2931 28FE                             l2739 22AE  
                           l2923 20AA                             l2819 2746                             l2683 1850  
                           l2667 17B8                             l2659 1758                             l2755 2A1C  
                           l2915 23B8                             l2907 236C                             l3299 1362  
                           l2829 2986                             l2597 1C12                             l2589 1BC6  
                           l2853 1EEC                             l2845 1EBE                             l2837 1E0A  
                           l2781 2882                             l2773 285A                             l2765 2832  
                           l2941 2950                             l2933 2914                             l2925 210C  
                           l2685 185C                             l2693 189E                             l2677 1814  
                           l2669 17C4                             l2749 29E8                             l2909 2374  
                           l2871 1F26                             l2855 1EEE                             l2847 1ED4  
                           l2839 1E40                             l2783 288C                             l2775 2864  
                           l2767 2836                             l2935 291C                             l2695 27C8  
                           l2927 2172                             l2791 2C62                             l2687 186C  
                           l2679 1840                             l2951 0EA4                             l2919 23C2  
                           l2785 2CF0                             l2873 1F3E                             l2857 1F06  
                           l2849 1ED6                             l2777 286E                             l2769 2840  
                           l2937 2932                             l2929 28FA                             l2697 27D8  
                           l2881 159C                             l2793 2C6C                             l2689 1894  
                           l2961 0F2E                             l2953 0ED4                             l2945 0E64  
                           l2859 1F14                             l2779 2878                             l2939 293A  
                           l2699 27E6                             l2891 16A8                             l2883 15B8  
                           l2875 1516                             l2795 2C6E                             l2787 2C56  
                           l2971 0FA4                             l2947 0E74                             l2955 0EEC  
                           l2885 1614                             l2877 1530                             l2797 2C70  
                           l2789 2C60                             l2973 0FD4                             l2981 1038  
                           l2957 0EFE                             l2965 0F62                             l2949 0E8C  
                           l2893 2C14                             l2887 1630                             l2879 1548  
                           l2799 26C4                             l2991 10C2                             l2983 104A  
                           l2975 0FEC                             l2967 0F74                             l2959 0F16  
                           l2895 2C24                             l2889 168C                             l2985 1062  
                           l2993 10F2                             l2977 101C                             l2969 0F8C  
                           l2897 22E6                             l2995 1104                             l2987 107A  
                           l2899 2326                             l2997 111C                             l2989 10AA  
                           l2999 1134                             STR_1 0E01                             STR_2 0E36  
                           STR_3 0E37                             STR_4 0E36                             u1200 2558  
                           u2000 1192                             u1201 2554                             u2001 118E  
                           u1130 2B86                             u2010 11C0                             u1210 257C  
                           u1131 2B82                             u2011 11BC                             u1211 2578  
                           u1140 2B9C                             u2020 2C88                             u1220 2596  
                           u1300 262A                             u1141 2B98                             u2021 2C84  
                           u1221 2592                             u1301 2626                             u2030 28BE  
                           u1150 24B8                             u1230 25B0                             u1310 263A  
                           u1151 24B4                             u1231 25AC                             u1311 2636  
                           u2040 28E8                             u1160 24D2                             u1240 25CE  
                           u1320 2660                             u1400 1962                             u1161 24CE  
                           u1241 25CA                             u1321 265C                             u1401 195C  
                           u2050 28F8                             u1170 24F8                             u1250 25E4  
                           u1330 2692                             u1410 1964                             u2051 28F4  
                           u1171 24F4                             u1251 25E0                             u1331 268E  
                           u2211 11F4                             u1180 2516                             u1260 2608  
                           u1340 2A9E                             u1420 19C4                             u2220 1282  
                           u2037 28B4                             u1181 2512                             u1261 2604  
                           u1341 2A9A                             u1421 19C0                             u2301 1498  
                           u2221 127E                             u1190 2532                             u1270 276E  
                           u1350 1F5E                             u1510 2CBC                             u1430 19D4  
                           u2230 1330                             u2047 28DE                             u1191 252E  
                           u1271 276A                             u1351 1F5A                             u1511 2CB6  
                           u1431 19D0                             u2231 132C                             u1280 278C  
                           u1360 201A                             u1600 1CC4                             u1520 2CBE  
                           u1440 19E4                             u2240 1352                     _BAUD4CONbits 0EE9  
                           u1281 2788                             u1361 2016                             u1601 1CC0  
                           u1441 19E0                             u2241 134E                             u1530 2B5E  
                           u1290 27A8                             u1610 1CEC                             u1450 19F4  
                           u1370 18D2                             u1531 2B5A                             u1291 27A4  
                           u1611 1CE8                             u1451 19F0                             u1371 18CE  
                           u2251 1374                             u1540 2CD0                             u1620 1D30  
                           u1700 27E6                             u1508 29D2                             u1460 1A34  
                           u1380 1910                             u1541 2CCC                             u1621 1D2C  
                           u1701 27E2                             u1461 1A30                             u1381 190C  
                           u2261 138E                             u2317 1296                             u1630 1D44  
                           u1550 1B0E                             u1710 2820                             u1470 247C  
                           u1390 192C                             u2270 13AE                             u1631 1D40  
                           u1551 1B0A                             u1711 281C                             u1471 2478  
                           u2407 0FC6                             u1391 1928                             u2271 13AA  
                           u2327 12CA                             u1640 1DC8                             u1560 1B36  
                           u1720 21EC                             u1480 24A4                             u2280 147C  
                           u1641 1DC4                             u1561 1B32                             u1721 21E8  
                           u1481 24A0                             u2417 0FF6                             u2281 1472  
                           u2337 144E                             u1810 2986                             u1570 1B7A  
                           u1730 220E                             u1490 29D0                             u1650 1790  
                           _T2PR 0FBC                             u1811 2982                             u1571 1B76  
                           u1731 220A                             u1491 29C8                             u2507 1862  
                           u1651 178C                             u2427 1026                             u2347 2386  
                           u1820 299C                             u1580 1B8E                             u1740 2248  
                           u1660 17B8                             u1900 2334                             u1821 2998  
                           u1581 1B8A                             u1741 2244                             u2517 244A  
                           u1661 17B4                             u2437 106C                             u2357 0E96  
                           u1901 2330                             u1590 1C12                             u1830 1EA2  
                           u1750 226A                             u1670 17FC                             u1910 23B8  
                           u1591 1C0E                             u2607 1BE0                             u1831 1E9E  
                           u2527 2846                             u1751 2266                             u1671 17F8  
                           u2447 109C                             u2367 0EC6                             u1911 23B4  
                           u1840 1EB0                             u1920 2914                             u1760 2292  
                           u1680 1810                             u2617 1C92                             u1841 1EAC  
                           u2537 1DFC                             u1921 2910                             u1761 228E  
                           u1681 180C                             u2457 10CC                             u2377 0F20  
                           u1850 1EBE                             u1930 2932                             u1770 22C4  
                           u1690 1894                             u2298 1480                             u2627 1CFE  
                           u1851 1EBA                             u2547 1E32                             u1931 292E  
                           u1771 22C0                             u1691 1890                             u2467 1126  
                           u2387 0F50                             u1860 1ED4                             u1940 2950  
                           u1780 2A1C                             u2637 1D96                             u1861 1ED0  
                           u2557 1E68                             u1941 294C                             u2477 1156  
                           u2397 0F96                             u1781 2A18                             u1870 1EEA  
                           u1950 0E74                             u2567 1EF8                             u1871 1EE6  
                           u2487 175E                             u1951 0E70                             u1880 1F14  
                           u1960 0EFE                             u2577 1F30                             u1881 1F10  
                           u2497 17CA                             u1961 0EFA                             u1970 0F74  
                           u1890 2C24                             u2587 1ADC                             u1971 0F70  
                           u1891 2C20                             u1980 104A                             u2597 1B48  
                           u1981 1046                             u1990 1104                             u1991 1100  
                           abs@a 000B                             _dbuf 00DF                             _main 11DE  
                           _prec 0053                             _move 0E64                             fsr0h 0FEA  
                           fsr1h 0FE2                             indf0 0FEF                             fsr2h 0FDA  
                           fsr0l 0FE9                             indf1 0FE7                             indf2 0FDF  
                           fsr1l 0FE1                             fsr2l 0FD9                             btemp 005A  
                           _stop 22E6                             prodh 0FF4                             prodl 0FF3  
                           start 008C              main@reverseDuration 008A                 __end_of_ADC_init 2CA8  
                __end_of_HighISR 008C                     ___param_bank 0000                            ??_abs 000D  
           __end_of_batteryLevel 29A6                  __end_of___aldiv 22E6                            ?_main 0001  
                          _ADPCH 0F5F                  __end_of___awdiv 256A                            ?_move 0023  
                __end_of___awmod 261A                            ?_stop 0017                  ___awdiv@divisor 0007  
                __end_of___lwdiv 27C8                            i2l310 2B20                            i2l303 2C10  
                          i2l160 2BC4                            i2l163 2D4A                            i2l172 2D18  
                          i2l157 2B9E                            i2l317 2CEE                            i2l264 0080  
                          i2l169 2D40                  ___awdiv@counter 0009                   ??_color_detect 000D  
                   vfpfcnvrt@fmt 0010              ___lmul@multiplicand 0009       __end_of_I2C_2_Master_Start 2D38  
     __end_of_I2C_2_Master_Write 2D0E                            _flags 0055                       _Buggy_init 2A26  
                          _fputc 261A                            _width 0051                            _putch 2D4C  
                          tablat 0FF5                            plusw0 0FEB                            plusw2 0FDB  
                          ttemp5 005B                            ttemp6 005E                            ttemp7 0062  
                          stop@i 001D                            status 0FD8                            wtemp8 005B  
                __end_of_sprintf 2A90                color_detect@color 000D                     main@turnRamp 008F  
          _I2C_2_Master_RepStart 2D1A               putCharToRxBuf@byte 0001                  __initialization 2AC4  
                   __end_of_main 1516                     __end_of_move 11DE                  i2_isDataInTxBuf 2CD8  
                   __end_of_stop 23D4               putCharToTxBuf@byte 0005              move@reverseDuration 0027  
                         ??_main 0060                           ??_move 002C                           ??_stop 001A  
                  __activetblptr 0002                    calibration@mL 0023                    calibration@mR 0024  
        __end_of_color_normalise 21DA                     ?_setMotorPWM 0012                           ?_fputc 0005  
                         _ADRESH 0F64                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                 ___awdiv@dividend 0005  
                         ?_putch 0001                           _RC0PPS 0E62                           _RC4REG 0EE3  
                         _RE2PPS 0E74                           _RC7PPS 0E69                           _RD5PPS 0E6F  
                         _RE4PPS 0E76                           _RD6PPS 0E70                           i2l2109 2CD8  
                         i2l2081 2BEE                           i2l3201 0024                           i2l2083 2BFE  
                         i2l3211 0060                           i2l3203 0038                           i2l2085 2C02  
                         i2l3213 0068                           i2l3205 003C                           i2l3055 2AF6  
                         i2l2087 2C0E                           i2l3063 2D42                           i2l3071 2D10  
                         i2l3215 007C                           i2l3207 004A                           i2l3057 2B06  
                         i2l3065 2D46                           i2l3073 2D14                           i2l3209 0050  
                         i2l3059 2B0A                           i2l3067 2D38                           i2l3069 2D3C  
                         i2l3197 0012                           i2l3199 0022                           i2l2761 2BAE  
                         i2l2759 2B9E                           _RG6PPS 0E88                    vfpfcnvrt@done 0013  
                      ??_HighISR 0003         __end_of_color_click_init 2898                           _RX4PPS 0E15  
                         _TX4REG 0EE4                     ??_ADC_getval 0005              calibration@turnRamp 0027  
        calibration@turnDuration 0026                     _CCPTMRS0bits 0FAD                     vfprintf@cfmt 001D  
               _getCharFromTxBuf 2AF6                           ___lmul 27C8                        ??___aldiv 0019  
                         ___wmul 2BC6                        ??___awdiv 0009                        ??___awmod 0009  
                      ??___lwdiv 000F               color_detect@RGBC_n 0005                           clear_0 2ACA  
                         clear_1 2AD6                           clear_2 2AE2                 ___awdiv@quotient 000B  
                ___awmod@divisor 0007                           isa$std 0001                  ___awmod@counter 0009  
                         fputc@c 0005                ?_TxBufferedString 0006                           move@mL 0023  
                         move@mR 0024                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8                        ?_ADC_init 0001  
             ??_TxBufferedString 0008                           putch@c 0001                 __end_of_vfprintf 2A26  
                         stop@mL 0017                           stop@mR 0018                      ?_Buggy_init 0001  
              ??_initDCmotorsPWM 0007                        ??_sprintf 0030               __end_of_ADC_getval 2CD8  
               __end_of_turnLeft 1DD4            __end_of_isDataInTxBuf 2CC0                       __accesstop 0060  
        __end_of__initialization 2AE8                  fullSpeedAhead@i 001E                    main@turnSpeed 008E  
         ?_I2C_2_Master_RepStart 0001          __end_ofi2_isDataInTxBuf 2CF0                    ___rparam_used 0001  
           __end_of_color_detect 2958                  _Interrupts_init 2CF0                   __pcstackCOMRAM 0001  
                   ?_white_Light 0001                    __end_of_fputc 26C4                    __end_of_putch 2D4E  
               _reverseOneSquare 16EC                 ?_color_normalise 001F                       ??_ADC_init 0005  
                        ??_fputc 0008                          ??_putch 0005                     _batteryLevel 2958  
                     __pbssBANK0 00B7                       __pbssBANK1 0100                _color_writetoaddr 2C36  
                   _T2CLKCONbits 0FBF               ?_color_writetoaddr 0007                          ?___lmul 0005  
                        ?___wmul 0005                   ___lmul@product 000D              ??_color_writetoaddr 0008  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5       fullSpeedAhead@straightRamp 001A  
          turnRight@turnDuration 001A                          i2u94_40 2BFE                          i2u94_41 2BFA  
                        i2u96_40 2CEC                          i2u96_41 2CE6                          i2u97_40 2CEE  
                        _SSP2ADD 0ED6                          _SSP2BUF 0ED5                       _color_read 1516  
        __end_of_Interrupts_init 2D02           color_writetoaddr@value 0007                          _HighISR 0008  
      __end_of_color_writetoaddr 2C56                 ?i2_isDataInTxBuf 0001                        _ADREFbits 0F58  
             _I2C_2_Master_Start 2D2E                       _initUSART4 2C56              i2_I2C_2_Master_Idle 2B9E  
             _I2C_2_Master_Write 2D02                          __Hparam 0000              i2_I2C_2_Master_Stop 2D38  
                        __Lparam 0000             calibration@turnSpeed 0025                          ___aldiv 21DA  
                        ___awdiv 24A6                          ___awmod 256A                    ??_calibration 0028  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 2754              ?_I2C_2_Master_Write 0001  
                      ?_vfprintf 001A                     __psmallconst 0E00                          __pcinit 2AC4  
                        __ramtop 0E00                        ?_turnLeft 0017                          __ptext0 11DE  
                        __ptext1 2C12                          __ptext2 22E6                          __ptext3 2A5C  
                        __ptext4 29E8                          __ptext5 18B0                          __ptext6 261A  
                        __ptext7 2D4C                          __ptext8 2A90                          __ptext9 256A  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 0FBD             ?i2_I2C_2_Master_Stop 0001  
               ___awmod@dividend 0005                 ___aldiv@dividend 0011                        _T2HLTbits 0FBE  
                  _RxBufWriteCnt 0059         __end_of_getCharFromTxBuf 2B22                          main@buf 0062  
                        _sprintf 2A5C             ??_I2C_2_Master_Start 0006             ??_I2C_2_Master_Write 0006  
          color_normalise@RGBC_n 0027             end_of_initialization 2AE8                __end_of_sendTxBuf 2C8E  
               ADC_getval@tmpval 0005                reverseOneSquare@i 001F                          fputc@fp 0007  
                  __Lmediumconst 0000                ?_color_click_init 0001               ??_color_click_init 0009  
              __end_of_vfpfcnvrt 1A68                 ___aldiv@quotient 001B       batteryLevel@batteryQuarter 000E  
                        postdec2 0FDD                          postinc0 0FEE                          postinc1 0FE6  
                        postinc2 0FDE                 vfpfcnvrt@convarg 0015       batteryLevel@batteryVoltage 000D  
                     main@F14564 00B7                       ??_vfprintf 001D                  _initDCmotorsPWM 26C4  
                     ??_turnLeft 001C                        _PORTFbits 0F8E               setMotorPWM@negDuty 0016  
          ??i2_I2C_2_Master_Idle 0001                    move@turnSpeed 0029                __end_of_turnRight 1C1E  
          ??i2_I2C_2_Master_Stop 0002                       main@RGBC_n 0093              __end_of_calibration 1F44  
                   _color_detect 28FA                        _TRISAbits 0F81               setMotorPWM@posDuty 0015  
                      _TRISBbits 0F82                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 white_Light@state 0005                     ??_Buggy_init 0005  
               fullSpeedAhead@mL 0017                 fullSpeedAhead@mR 0018                      ?_color_read 0009  
       color_writetoaddr@address 0008          ??_I2C_2_Master_RepStart 0006         __end_of_reverseOneSquare 18B0  
               ?_Interrupts_init 0001                    stop@cur_power 001F                      _CCP1CONbits 0FAB  
                   _EUSART4RXbuf 003D                     _EUSART4TXbuf 0100                      _CCP2CONbits 0FA7  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
                     main@motorL 00AD                       main@motorR 00A3                   color_read@RGBC 0009  
                 _fullSpeedAhead 23D4                   __end_of___lmul 2832             turnLeft@turnDuration 001A  
                    vfpfcnvrt@ap 0011                      vfpfcnvrt@cp 0014                      vfpfcnvrt@fp 000F  
                 __end_of___wmul 2BEC               __end_of_Buggy_init 2A5C              start_initialization 2AC4  
                    __end_of_abs 2AC4                    _TxBufWriteCnt 0057          __end_of_initDCmotorsPWM 2754  
                    vfprintf@fmt 001B           __end_of_fullSpeedAhead 24A6               turnRight@cur_power 0021  
                       ??___lmul 000D                         ??___wmul 0009                   _putCharToRxBuf 2BEC  
                 _putCharToTxBuf 2B4C              color_normalise@RGBC 001F    i2I2C_2_Master_Write@data_byte 0002  
                    _calibration 1DD4     reverseOneSquare@straightRamp 001B     __end_ofi2_I2C_2_Master_Start 2D4C  
   __end_ofi2_I2C_2_Master_Write 2D1A                turnLeft@cur_power 0021                      __pbssCOMRAM 003D  
                  __pcstackBANK0 0060                         ?_HighISR 0001                 stop@straightRamp 0019  
               ___lwdiv@dividend 000B           __end_of_putCharToRxBuf 2C12           __end_of_putCharToTxBuf 2B76  
                ?_fullSpeedAhead 0017                        __pintcode 0008                         ?___aldiv 0011  
             turnRight@turnSpeed 0019                         ?___awdiv 0005                         ?___awmod 0005  
                       ?___lwdiv 000B           TxBufferedString@string 0006             I2C_2_Master_Read@ack 0007  
           I2C_2_Master_Read@tmp 0008                      __smallconst 0E00                _I2C_2_Master_Idle 2B76  
              _I2C_2_Master_Init 2B22                _I2C_2_Master_Read 29A6                turnLeft@turnSpeed 0019  
              _I2C_2_Master_Stop 2D24                     _RxBufReadCnt 0058                         _ADC_init 2C8E  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0013               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000F  
       initDCmotorsPWM@PWMperiod 0005                         ?_sprintf 001E                ?_getCharFromTxBuf 0001  
             ??_getCharFromTxBuf 0001                move@straightSpeed 0026                  ___aldiv@divisor 0015  
            ??_I2C_2_Master_Idle 0005                  ___aldiv@counter 0019              ??_I2C_2_Master_Init 0005  
            ??_I2C_2_Master_Read 0006                   ___wmul@product 0009                         _LATAbits 0F79  
            ??_I2C_2_Master_Stop 0006                         _LATCbits 0F7B                    _isDataInTxBuf 2CA8  
                       _LATDbits 0F7C                         _LATEbits 0F7D                         _LATFbits 0F7E  
               _TxBufferedString 2898                         _LATGbits 0F7F                         _LATHbits 0F80  
                      _sendTxBuf 2C74                         _IPR0bits 0E1F                         _PIE0bits 0E29  
                       _PIE4bits 0E2D                         i2u220_40 007C                         i2u220_41 0078  
                       i2u206_40 2B06                         i2u206_41 2B02                      turnRight@mL 0017  
                    turnRight@mR 0018                         i2u217_40 0022                         i2u217_41 001E  
                       i2u218_40 004A                         i2u218_41 0046                         i2u219_40 0060  
                       i2u219_41 005C                         i2u180_40 2BC4                         i2u180_41 2BC0  
                       _PIR0bits 0E33                         i2u179_40 2BAE                         i2u179_41 2BAA  
                       _PIR4bits 0E37                  ?_putCharToRxBuf 0001                 ?_initDCmotorsPWM 0005  
                ?_putCharToTxBuf 0001      fullSpeedAhead@straightSpeed 0019                         _SSP2CON2 0EDA  
                       _SSP2STAT 0ED8                     move@turnRamp 002B                        _vfpfcnvrt 18B0  
                     _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 2B9E        __end_of_I2C_2_Master_Init 2B4C  
      __end_of_I2C_2_Master_Read 29E8                ___wmul@multiplier 0005        __end_of_I2C_2_Master_Stop 2D2E  
                   setMotorPWM@m 0012      I2C_2_Master_Write@data_byte 0006                        main@color 0090  
                   _TxBufReadCnt 0056                        _turnRight 1A68                       vfpfcnvrt@c 0019  
                   ??_color_read 000A                ___lmul@multiplier 0005                   ?_isDataInTxBuf 0001  
  __end_of_I2C_2_Master_RepStart 2D24                ?_reverseOneSquare 0017              __end_of_setMotorPWM 2098  
                     ?_sendTxBuf 0001                     ??_initUSART4 0005             i2_I2C_2_Master_Start 2D42  
reverseOneSquare@reverseDuration 001A             i2_I2C_2_Master_Write 2D0E               ??_reverseOneSquare 001C  
                       __Hrparam 0000                ??_color_normalise 0028                       _ADC_getval 2CC0  
                     vfprintf@ap 001C                         __Lrparam 0000                       vfprintf@fp 001A  
                  ??_white_Light 0005      __end_ofi2_I2C_2_Master_Idle 2BC6      __end_ofi2_I2C_2_Master_Stop 2D42  
                     ?_vfpfcnvrt 000F               __end_of_color_read 16EC                       _ANSELBbits 0E9A  
                     _ANSELDbits 0EA7                       _ANSELFbits 0EB4                       sprintf@fmt 001F  
  reverseOneSquare@straightSpeed 0019                  ___lwdiv@divisor 000D               __end_of_initUSART4 2C74  
                ___lwdiv@counter 0011                turnRight@turnRamp 001B                       ?_turnRight 0017  
                       __ptext10 2C74                         __ptext11 2CA8                         __ptext20 2098  
                       __ptext12 0E64                         __ptext21 27C8                         __ptext13 16EC  
                       __ptext30 2B22                         __ptext22 21DA                         __ptext14 23D4  
                       __ptext31 1DD4                         __ptext23 28FA                         __ptext15 2C56  
                       __ptext40 2CC0                         __ptext32 1A68                         __ptext24 2832  
                       __ptext16 26C4                         __ptext41 2898                         __ptext33 1C1E  
                       __ptext25 2C36                         __ptext17 1516                         __ptext50 2B9E  
                       __ptext42 2B4C                         __ptext34 1F44                         __ptext26 2D02  
                       __ptext18 2D1A                         __ptext51 2BEC                         __ptext43 2CF0  
                       __ptext35 2BC6                         __ptext27 2D24                         __ptext19 29A6  
                       __ptext52 2AF6                         __ptext44 2A26                         __ptext36 2754  
                       __ptext28 2D2E                         __ptext37 2958                         __ptext29 2B76  
                       __ptext46 2CD8                         __ptext38 24A6                         __ptext47 2D0E  
                       __ptext39 2C8E                         __ptext48 2D38                         __ptext49 2D42  
                      move@color 0025                    ?_batteryLevel 0001                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                 turnLeft@turnRamp 001B                       turnLeft@mL 0017  
                     turnLeft@mR 0018            ?i2_I2C_2_Master_Start 0001                 move@straightRamp 0028  
          ?i2_I2C_2_Master_Write 0001                       turnRight@i 001F                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         main@RGBC 009B                         int$flags 005A  
                   ?_calibration 0023                         _vfprintf 29E8                         _turnLeft 1C1E  
        fullSpeedAhead@cur_power 0020              __end_of_white_Light 2C36                       _INTCONbits 0FF2  
              ??i2_isDataInTxBuf 0001        reverseOneSquare@cur_power 0021               reverseOneSquare@mL 0017  
             reverseOneSquare@mR 0018                 move@turnDuration 002A                   ??_batteryLevel 000D  
                    _setMotorPWM 1F44                  ??_isDataInTxBuf 0005                         intlevel2 0000  
                      sprintf@ap 0030                 ??_fullSpeedAhead 001B                      ??_sendTxBuf 0005  
                      turnLeft@i 001F                      ?_ADC_getval 0001                main@straightSpeed 008D  
                    ??_vfpfcnvrt 0012                 _color_click_init 2832         __end_of_TxBufferedString 28FA  
                       sprintf@f 0031                         sprintf@s 001E                       _SSP2DATPPS 0E1D  
                     _SSP2CLKPPS 0E1C                     ___aldiv@sign 001A                      ??_turnRight 001C  
               main@straightRamp 0091                       _TX4STAbits 0EE8           ??i2_I2C_2_Master_Start 0002  
         ??i2_I2C_2_Master_Write 0002                 ??_putCharToRxBuf 0001                 ??_putCharToTxBuf 0005  
