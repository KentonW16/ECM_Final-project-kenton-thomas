

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 16:30:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75   000000                     
    76                           ; Generated 21/07/2023 GMT
    77                           ; 
    78                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution. Publication is not required when
    92                           ;        this file is used in an embedded application.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F67K40 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110   000000                     
   111                           	psect	idataBANK1
   112   004932                     __pidataBANK1:
   113                           	callstack 0
   114                           
   115                           ;initializer for main@F14661
   116   004932  02                 	db	2
   117   004933  02                 	db	2
   118   004934  01                 	db	1
   119   004935  01                 	db	1
   120                           
   121                           ;initializer for _ambient
   122   004936  01F4               	dw	500
   123   000000                     _TRISCbits	set	3971
   124   000000                     _RC4STAbits	set	3815
   125   000000                     _SP4BRGH	set	3814
   126   000000                     _SP4BRGL	set	3813
   127   000000                     _TX4STAbits	set	3816
   128   000000                     _BAUD4CONbits	set	3817
   129   000000                     _TX4REG	set	3812
   130   000000                     _TRISBbits	set	3970
   131   000000                     _TRISAbits	set	3969
   132   000000                     _TRISEbits	set	3973
   133   000000                     _TRISGbits	set	3975
   134   000000                     _LATFbits	set	3966
   135   000000                     _TRISFbits	set	3974
   136   000000                     _TRISHbits	set	3976
   137   000000                     _TRISDbits	set	3972
   138   000000                     _LATEbits	set	3965
   139   000000                     _LATGbits	set	3967
   140   000000                     _LATHbits	set	3968
   141   000000                     _SSP2CON2bits	set	3802
   142   000000                     _TMR0IF	set	29085
   143   000000                     _TMR0IE	set	29005
   144   000000                     _RX4PPS	set	3605
   145   000000                     _SSP2CLKPPS	set	3612
   146   000000                     _SSP2DATPPS	set	3613
   147   000000                     _PIE0bits	set	3625
   148   000000                     _CCPR4H	set	3873
   149   000000                     _CCPR3H	set	3877
   150   000000                     _CCPR2H	set	4006
   151   000000                     _CCPR1H	set	4010
   152   000000                     _CCP1CONbits	set	4011
   153   000000                     _CCPTMRS0bits	set	4013
   154   000000                     _T2PR	set	4028
   155   000000                     _T2CONbits	set	4029
   156   000000                     _INTCONbits	set	4082
   157   000000                     _CCP2CONbits	set	4007
   158   000000                     _CCP3CONbits	set	3878
   159   000000                     _ADREFbits	set	3928
   160   000000                     _LATAbits	set	3961
   161   000000                     _LATDbits	set	3964
   162   000000                     _PORTFbits	set	3982
   163   000000                     _CCP4CONbits	set	3874
   164   000000                     _PIE4bits	set	3629
   165   000000                     _RD5PPS	set	3695
   166   000000                     _ANSELDbits	set	3751
   167   000000                     _SSP2ADD	set	3798
   168   000000                     _SSP2CON1bits	set	3801
   169   000000                     _LATCbits	set	3963
   170   000000                     _RC4REG	set	3811
   171   000000                     _SSP2CON2	set	3802
   172   000000                     _SSP2STAT	set	3800
   173   000000                     _ANSELFbits	set	3764
   174   000000                     _SSP2BUF	set	3797
   175   000000                     _IPR0bits	set	3615
   176   000000                     _RE2PPS	set	3700
   177   000000                     _ANSELBbits	set	3738
   178   000000                     _RD6PPS	set	3696
   179   000000                     _PIR0bits	set	3635
   180   000000                     _PIR4bits	set	3639
   181   000000                     _RC0PPS	set	3682
   182   000000                     _RC7PPS	set	3689
   183   000000                     _ADPCH	set	3935
   184   000000                     _ADRESH	set	3940
   185   000000                     _ADCON0bits	set	3936
   186   000000                     _RE4PPS	set	3702
   187   000000                     _RG6PPS	set	3720
   188   000000                     _TMR0L	set	4051
   189   000000                     _TMR0H	set	4052
   190   000000                     _T0CON0bits	set	4053
   191   000000                     _T0CON1bits	set	4054
   192   000000                     _T2CLKCONbits	set	4031
   193   000000                     _T2HLTbits	set	4030
   194                           
   195                           ; #config settings
   196                           
   197                           	psect	cinit
   198   004522                     __pcinit:
   199                           	callstack 0
   200   004522                     start_initialization:
   201                           	callstack 0
   202   004522                     __initialization:
   203                           	callstack 0
   204                           
   205                           ; Initialize objects allocated to BANK1 (6 bytes)
   206                           ; load TBLPTR registers with __pidataBANK1
   207   004522  0E32               	movlw	low __pidataBANK1
   208   004524  6EF6               	movwf	tblptrl,c
   209   004526  0E49               	movlw	high __pidataBANK1
   210   004528  6EF7               	movwf	tblptrh,c
   211   00452A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   212   00452C  6EF8               	movwf	tblptru,c
   213   00452E  EE01  F0D3         	lfsr	0,__pdataBANK1
   214   004532  EE10 F006          	lfsr	1,6
   215   004536                     copy_data0:
   216   004536  0009               	tblrd		*+
   217   004538  CFF5 FFEE          	movff	tablat,postinc0
   218   00453C  50E5               	movf	postdec1,w,c
   219   00453E  50E1               	movf	fsr1l,w,c
   220   004540  E1FA               	bnz	copy_data0
   221                           
   222                           ; Clear objects allocated to BANK2 (122 bytes)
   223   004542  EE02  F000         	lfsr	0,__pbssBANK2
   224   004546  0E7A               	movlw	122
   225   004548                     clear_0:
   226   004548  6AEE               	clrf	postinc0,c
   227   00454A  06E8               	decf	wreg,f,c
   228   00454C  E1FD               	bnz	clear_0
   229                           
   230                           ; Clear objects allocated to BANK1 (2 bytes)
   231   00454E  0101               	movlb	1
   232   004550  6BDA               	clrf	(__pbssBANK1+1)& (0+255),b
   233   004552  6BD9               	clrf	__pbssBANK1& (0+255),b
   234                           
   235                           ; Clear objects allocated to BANK0 (120 bytes)
   236   004554  EE00  F060         	lfsr	0,__pbssBANK0
   237   004558  0E78               	movlw	120
   238   00455A                     clear_1:
   239   00455A  6AEE               	clrf	postinc0,c
   240   00455C  06E8               	decf	wreg,f,c
   241   00455E  E1FD               	bnz	clear_1
   242                           
   243                           ; Clear objects allocated to COMRAM (4 bytes)
   244   004560  6A4C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   245   004562  6A4B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   246   004564  6A4A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   247   004566  6A49               	clrf	__pbssCOMRAM& (0+255),c
   248   004568                     end_of_initialization:
   249                           	callstack 0
   250   004568                     __end_of__initialization:
   251                           	callstack 0
   252   004568  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   253   00456A  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   254   00456C  0100               	movlb	0
   255   00456E  EF34  F014         	goto	_main	;jump to C main() function
   256                           
   257                           	psect	bssCOMRAM
   258   000049                     __pbssCOMRAM:
   259                           	callstack 0
   260   000049                     _TxBufReadCnt:
   261                           	callstack 0
   262   000049                     	ds	1
   263   00004A                     _TxBufWriteCnt:
   264                           	callstack 0
   265   00004A                     	ds	1
   266   00004B                     _RxBufReadCnt:
   267                           	callstack 0
   268   00004B                     	ds	1
   269   00004C                     _RxBufWriteCnt:
   270                           	callstack 0
   271   00004C                     	ds	1
   272                           
   273                           	psect	bssBANK0
   274   000060                     __pbssBANK0:
   275                           	callstack 0
   276   000060                     _EUSART4TXbuf:
   277                           	callstack 0
   278   000060                     	ds	60
   279   00009C                     	ds	40
   280   0000C4                     _EUSART4RXbuf:
   281                           	callstack 0
   282   0000C4                     	ds	20
   283                           
   284                           	psect	bssBANK1
   285   0001D9                     __pbssBANK1:
   286                           	callstack 0
   287   0001D9                     _lost:
   288                           	callstack 0
   289   0001D9                     	ds	1
   290   0001DA                     _brightnessChange:
   291                           	callstack 0
   292   0001DA                     	ds	1
   293                           
   294                           	psect	dataBANK1
   295   0001D3                     __pdataBANK1:
   296                           	callstack 0
   297   0001D3                     main@F14661:
   298                           	callstack 0
   299   0001D3                     	ds	4
   300   0001D7                     _ambient:
   301                           	callstack 0
   302   0001D7                     	ds	2
   303                           
   304                           	psect	bssBANK2
   305   000200                     __pbssBANK2:
   306                           	callstack 0
   307   000200                     	ds	82
   308   000252                     	ds	40
   309                           
   310                           	psect	cstackBANK1
   311   000100                     __pcstackBANK1:
   312                           	callstack 0
   313   000100                     main@buf:
   314                           	callstack 0
   315                           
   316                           ; 40 bytes @ 0x0
   317   000100                     	ds	40
   318   000128                     main@straightTime:
   319                           	callstack 0
   320                           
   321                           ; 82 bytes @ 0x28
   322   000128                     	ds	82
   323   00017A                     main@moveSequence:
   324                           	callstack 0
   325                           
   326                           ; 40 bytes @ 0x7A
   327   00017A                     	ds	40
   328   0001A2                     main@testSequence:
   329                           	callstack 0
   330                           
   331                           ; 4 bytes @ 0xA2
   332   0001A2                     	ds	4
   333   0001A6                     main@wall:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0xA6
   337   0001A6                     	ds	1
   338   0001A7                     main@ambientNew:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0xA7
   342   0001A7                     	ds	2
   343   0001A9                     main@reverseDuration:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0xA9
   347   0001A9                     	ds	1
   348   0001AA                     main@turnSpeed:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0xAA
   352   0001AA                     	ds	1
   353   0001AB                     main@turnRamp:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0xAB
   357   0001AB                     	ds	1
   358   0001AC                     main@HSV:
   359                           	callstack 0
   360                           
   361                           ; 6 bytes @ 0xAC
   362   0001AC                     	ds	6
   363   0001B2                     main@straightSpeed:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0xB2
   367   0001B2                     	ds	1
   368   0001B3                     main@color:
   369                           	callstack 0
   370                           
   371                           ; 1 bytes @ 0xB3
   372   0001B3                     	ds	1
   373   0001B4                     main@curMove:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0xB4
   377   0001B4                     	ds	1
   378   0001B5                     main@straightRamp:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0xB5
   382   0001B5                     	ds	1
   383   0001B6                     main@turnDuration:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0xB6
   387   0001B6                     	ds	1
   388   0001B7                     main@RGBC:
   389                           	callstack 0
   390                           
   391                           ; 8 bytes @ 0xB7
   392   0001B7                     	ds	8
   393   0001BF                     main@motorR:
   394                           	callstack 0
   395                           
   396                           ; 10 bytes @ 0xBF
   397   0001BF                     	ds	10
   398   0001C9                     main@motorL:
   399                           	callstack 0
   400                           
   401                           ; 10 bytes @ 0xC9
   402   0001C9                     	ds	10
   403                           
   404                           	psect	cstackBANK0
   405   0000D8                     __pcstackBANK0:
   406                           	callstack 0
   407   0000D8                     move@mL:
   408                           	callstack 0
   409   0000D8                     _rgb_2_hsv$3606:
   410                           	callstack 0
   411                           
   412                           ; 4 bytes @ 0x0
   413   0000D8                     	ds	2
   414   0000DA                     move@mR:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x2
   418   0000DA                     	ds	2
   419   0000DC                     move@color:
   420                           	callstack 0
   421   0000DC                     rgb_2_hsv@cmin:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0x4
   425   0000DC                     	ds	1
   426   0000DD                     move@moveSequence:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x5
   430   0000DD                     	ds	1
   431   0000DE                     _rgb_2_hsv$3604:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x6
   435   0000DE                     	ds	1
   436   0000DF                     move@straightTime:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x7
   440   0000DF                     	ds	1
   441   0000E0                     _rgb_2_hsv$3605:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x8
   445   0000E0                     	ds	1
   446   0000E1                     move@curMove:
   447                           	callstack 0
   448                           
   449                           ; 1 bytes @ 0x9
   450   0000E1                     	ds	1
   451   0000E2                     move@straightSpeed:
   452                           	callstack 0
   453   0000E2                     rgb_2_hsv@r:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0xA
   457   0000E2                     	ds	1
   458   0000E3                     move@reverseDuration:
   459                           	callstack 0
   460                           
   461                           ; 1 bytes @ 0xB
   462   0000E3                     	ds	1
   463   0000E4                     move@straightRamp:
   464                           	callstack 0
   465   0000E4                     rgb_2_hsv@cmax:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0xC
   469   0000E4                     	ds	1
   470   0000E5                     move@turnSpeed:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0xD
   474   0000E5                     	ds	1
   475   0000E6                     move@turnDuration:
   476                           	callstack 0
   477   0000E6                     rgb_2_hsv@diff:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0xE
   481   0000E6                     	ds	1
   482   0000E7                     move@turnRamp:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0xF
   486   0000E7                     	ds	3
   487   0000EA                     rgb_2_hsv@g:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x12
   491   0000EA                     	ds	2
   492   0000EC                     rgb_2_hsv@b:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x14
   496   0000EC                     	ds	2
   497                           
   498                           	psect	cstackCOMRAM
   499   000001                     __pcstackCOMRAM:
   500                           	callstack 0
   501   000001                     ??_getCharFromTxBuf:
   502   000001                     ??i2_I2C_2_Master_Idle:
   503   000001                     ?i2___lwdiv:
   504                           	callstack 0
   505   000001                     putCharToRxBuf@byte:
   506                           	callstack 0
   507   000001                     i2___lwdiv@dividend:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x0
   511   000001                     	ds	1
   512   000002                     i2I2C_2_Master_Write@data_byte:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x1
   516   000002                     	ds	1
   517   000003                     i2color_writetoaddr@value:
   518                           	callstack 0
   519   000003                     i2___lwdiv@divisor:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0x2
   523   000003                     	ds	1
   524   000004                     i2color_writetoaddr@address:
   525                           	callstack 0
   526                           
   527                           ; 1 bytes @ 0x3
   528   000004                     	ds	1
   529   000005                     i2___lwdiv@quotient:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x4
   533   000005                     	ds	2
   534   000007                     i2___lwdiv@counter:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x6
   538   000007                     	ds	1
   539   000008                     ??i2_color_clear_init_interrupts:
   540                           
   541                           ; 1 bytes @ 0x7
   542   000008                     	ds	1
   543   000009                     i2color_clear_init_interrupts@high_threshold:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x8
   547   000009                     	ds	2
   548   00000B                     i2color_clear_init_interrupts@low_threshold:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0xA
   552   00000B                     	ds	2
   553   00000D                     ??_HighISR:
   554                           
   555                           ; 1 bytes @ 0xC
   556   00000D                     	ds	3
   557   000010                     ??_I2C_2_Master_Idle:
   558   000010                     ?_get16bitTMR0val:
   559                           	callstack 0
   560   000010                     ?_max:
   561                           	callstack 0
   562   000010                     ?_min:
   563                           	callstack 0
   564   000010                     ?___wmul:
   565                           	callstack 0
   566   000010                     ?___awdiv:
   567                           	callstack 0
   568   000010                     ?___lmul:
   569                           	callstack 0
   570   000010                     white_Light@state:
   571                           	callstack 0
   572   000010                     ADC_getval@tmpval:
   573                           	callstack 0
   574   000010                     max@a:
   575                           	callstack 0
   576   000010                     min@a:
   577                           	callstack 0
   578   000010                     initDCmotorsPWM@PWMperiod:
   579                           	callstack 0
   580   000010                     ___wmul@multiplier:
   581                           	callstack 0
   582   000010                     ___awdiv@dividend:
   583                           	callstack 0
   584   000010                     ___lmul@multiplier:
   585                           	callstack 0
   586                           
   587                           ; 4 bytes @ 0xF
   588   000010                     	ds	1
   589   000011                     ??_I2C_2_Master_Read:
   590   000011                     I2C_2_Master_Write@data_byte:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x10
   594   000011                     	ds	1
   595   000012                     ??_get16bitTMR0val:
   596   000012                     color_writetoaddr@value:
   597                           	callstack 0
   598   000012                     I2C_2_Master_Read@ack:
   599                           	callstack 0
   600   000012                     max@b:
   601                           	callstack 0
   602   000012                     min@b:
   603                           	callstack 0
   604   000012                     ___wmul@multiplicand:
   605                           	callstack 0
   606   000012                     ___awdiv@divisor:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x11
   610   000012                     	ds	1
   611   000013                     color_writetoaddr@address:
   612                           	callstack 0
   613   000013                     I2C_2_Master_Read@tmp:
   614                           	callstack 0
   615                           
   616                           ; 1 bytes @ 0x12
   617   000013                     	ds	1
   618   000014                     ___awdiv@counter:
   619                           	callstack 0
   620   000014                     color_read@RGBC:
   621                           	callstack 0
   622   000014                     get16bitTMR0val@timer_low:
   623                           	callstack 0
   624   000014                     ___wmul@product:
   625                           	callstack 0
   626   000014                     ___lmul@multiplicand:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x13
   630   000014                     	ds	1
   631   000015                     ___awdiv@sign:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x14
   635   000015                     	ds	1
   636   000016                     ??_color_read:
   637   000016                     ?___lwdiv:
   638                           	callstack 0
   639   000016                     get16bitTMR0val@timer_high:
   640                           	callstack 0
   641   000016                     ___awdiv@quotient:
   642                           	callstack 0
   643   000016                     ___lwdiv@dividend:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x15
   647   000016                     	ds	2
   648   000018                     batteryLevel@batteryVoltage:
   649                           	callstack 0
   650   000018                     get16bitTMR0val@timer_val:
   651                           	callstack 0
   652   000018                     ___lwdiv@divisor:
   653                           	callstack 0
   654   000018                     ___lmul@product:
   655                           	callstack 0
   656                           
   657                           ; 4 bytes @ 0x17
   658   000018                     	ds	1
   659   000019                     batteryLevel@batteryQuarter:
   660                           	callstack 0
   661                           
   662                           ; 1 bytes @ 0x18
   663   000019                     	ds	1
   664   00001A                     ___lwdiv@quotient:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0x19
   668   00001A                     	ds	2
   669   00001C                     ?___lldiv:
   670                           	callstack 0
   671   00001C                     ?___aldiv:
   672                           	callstack 0
   673   00001C                     ___lwdiv@counter:
   674                           	callstack 0
   675   00001C                     ___lldiv@dividend:
   676                           	callstack 0
   677   00001C                     ___aldiv@dividend:
   678                           	callstack 0
   679                           
   680                           ; 4 bytes @ 0x1B
   681   00001C                     	ds	1
   682   00001D                     ??_color_clear_init_interrupts:
   683   00001D                     setMotorPWM@m:
   684                           	callstack 0
   685                           
   686                           ; 2 bytes @ 0x1C
   687   00001D                     	ds	1
   688   00001E                     color_clear_init_interrupts@high_threshold:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x1D
   692   00001E                     	ds	1
   693   00001F                     ??_setMotorPWM:
   694                           
   695                           ; 1 bytes @ 0x1E
   696   00001F                     	ds	1
   697   000020                     color_clear_init_interrupts@low_threshold:
   698                           	callstack 0
   699   000020                     ___lldiv@divisor:
   700                           	callstack 0
   701   000020                     ___aldiv@divisor:
   702                           	callstack 0
   703                           
   704                           ; 4 bytes @ 0x1F
   705   000020                     	ds	1
   706   000021                     setMotorPWM@posDuty:
   707                           	callstack 0
   708                           
   709                           ; 1 bytes @ 0x20
   710   000021                     	ds	1
   711   000022                     ??_color_click_init:
   712   000022                     setMotorPWM@negDuty:
   713                           	callstack 0
   714                           
   715                           ; 1 bytes @ 0x21
   716   000022                     	ds	1
   717   000023                     stop@mL:
   718                           	callstack 0
   719   000023                     turnLeft@mL:
   720                           	callstack 0
   721   000023                     turnRight@mL:
   722                           	callstack 0
   723   000023                     fullSpeedAhead@mL:
   724                           	callstack 0
   725   000023                     reverseOneSquare@mL:
   726                           	callstack 0
   727   000023                     wallAdjust@mL:
   728                           	callstack 0
   729   000023                     reverseShort@mL:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x22
   733   000023                     	ds	1
   734   000024                     ___aldiv@counter:
   735                           	callstack 0
   736   000024                     ___lldiv@quotient:
   737                           	callstack 0
   738                           
   739                           ; 4 bytes @ 0x23
   740   000024                     	ds	1
   741   000025                     ___aldiv@sign:
   742                           	callstack 0
   743   000025                     stop@mR:
   744                           	callstack 0
   745   000025                     turnLeft@mR:
   746                           	callstack 0
   747   000025                     turnRight@mR:
   748                           	callstack 0
   749   000025                     fullSpeedAhead@mR:
   750                           	callstack 0
   751   000025                     reverseOneSquare@mR:
   752                           	callstack 0
   753   000025                     wallAdjust@mR:
   754                           	callstack 0
   755   000025                     reverseShort@mR:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x24
   759   000025                     	ds	1
   760   000026                     ___aldiv@quotient:
   761                           	callstack 0
   762                           
   763                           ; 4 bytes @ 0x25
   764   000026                     	ds	1
   765   000027                     stop@straightRamp:
   766                           	callstack 0
   767   000027                     turnLeft@turnSpeed:
   768                           	callstack 0
   769   000027                     turnRight@turnSpeed:
   770                           	callstack 0
   771   000027                     fullSpeedAhead@straightSpeed:
   772                           	callstack 0
   773   000027                     reverseOneSquare@straightSpeed:
   774                           	callstack 0
   775   000027                     wallAdjust@straightSpeed:
   776                           	callstack 0
   777   000027                     reverseShort@straightSpeed:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0x26
   781   000027                     	ds	1
   782   000028                     ??_stop:
   783   000028                     turnLeft@turnDuration:
   784                           	callstack 0
   785   000028                     turnRight@turnDuration:
   786                           	callstack 0
   787   000028                     fullSpeedAhead@straightRamp:
   788                           	callstack 0
   789   000028                     reverseOneSquare@reverseDuration:
   790                           	callstack 0
   791   000028                     wallAdjust@straightRamp:
   792                           	callstack 0
   793   000028                     reverseShort@straightRamp:
   794                           	callstack 0
   795   000028                     ___lldiv@counter:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x27
   799   000028                     	ds	1
   800   000029                     ??_fullSpeedAhead:
   801   000029                     ??_wallAdjust:
   802   000029                     ??_reverseShort:
   803   000029                     turnLeft@turnRamp:
   804                           	callstack 0
   805   000029                     turnRight@turnRamp:
   806                           	callstack 0
   807   000029                     reverseOneSquare@straightRamp:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0x28
   811   000029                     	ds	1
   812   00002A                     ??_turnRight:
   813   00002A                     ??_turnLeft:
   814   00002A                     ??_reverseOneSquare:
   815   00002A                     rgb_2_hsv@RGBC:
   816                           	callstack 0
   817                           
   818                           ; 8 bytes @ 0x29
   819   00002A                     	ds	1
   820   00002B                     stop@i:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0x2A
   824   00002B                     	ds	1
   825   00002C                     wallAdjust@adjustDuration:
   826                           	callstack 0
   827   00002C                     reverseShort@reverseDuration:
   828                           	callstack 0
   829   00002C                     fullSpeedAhead@i:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x2B
   833   00002C                     	ds	1
   834   00002D                     wallAdjust@wallReverseDuration:
   835                           	callstack 0
   836   00002D                     stop@cur_power:
   837                           	callstack 0
   838   00002D                     turnLeft@i:
   839                           	callstack 0
   840   00002D                     turnRight@i:
   841                           	callstack 0
   842   00002D                     reverseOneSquare@i:
   843                           	callstack 0
   844   00002D                     reverseShort@i:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0x2C
   848   00002D                     	ds	1
   849   00002E                     fullSpeedAhead@cur_power:
   850                           	callstack 0
   851   00002E                     wallAdjust@i:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x2D
   855   00002E                     	ds	1
   856   00002F                     turnLeft@cur_power:
   857                           	callstack 0
   858   00002F                     turnRight@cur_power:
   859                           	callstack 0
   860   00002F                     reverseOneSquare@cur_power:
   861                           	callstack 0
   862   00002F                     reverseShort@cur_power:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0x2E
   866   00002F                     	ds	1
   867   000030                     wallAdjust@cur_power:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0x2F
   871   000030                     	ds	1
   872   000031                     returnHome@mL:
   873                           	callstack 0
   874   000031                     lostReturnHome@mL:
   875                           	callstack 0
   876   000031                     calibration@mL:
   877                           	callstack 0
   878                           
   879                           ; 2 bytes @ 0x30
   880   000031                     	ds	1
   881   000032                     rgb_2_hsv@HSV:
   882                           	callstack 0
   883                           
   884                           ; 2 bytes @ 0x31
   885   000032                     	ds	1
   886   000033                     returnHome@mR:
   887                           	callstack 0
   888   000033                     lostReturnHome@mR:
   889                           	callstack 0
   890   000033                     calibration@mR:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x32
   894   000033                     	ds	1
   895   000034                     ??_rgb_2_hsv:
   896                           
   897                           ; 1 bytes @ 0x33
   898   000034                     	ds	1
   899   000035                     calibration@turnSpeed:
   900                           	callstack 0
   901   000035                     returnHome@moveSequence:
   902                           	callstack 0
   903   000035                     lostReturnHome@moveSequence:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0x34
   907   000035                     	ds	1
   908   000036                     calibration@turnDuration:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x35
   912   000036                     	ds	1
   913   000037                     returnHome@straightTime:
   914                           	callstack 0
   915   000037                     lostReturnHome@straightTime:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x36
   919   000037                     	ds	1
   920   000038                     calibration@turnRamp:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x37
   924   000038                     	ds	1
   925   000039                     ??_calibration:
   926   000039                     returnHome@curMove:
   927                           	callstack 0
   928   000039                     lostReturnHome@curMove:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x38
   932   000039                     	ds	1
   933   00003A                     returnHome@straightSpeed:
   934                           	callstack 0
   935   00003A                     lostReturnHome@straightSpeed:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x39
   939   00003A                     	ds	1
   940   00003B                     returnHome@reverseDuration:
   941                           	callstack 0
   942   00003B                     lostReturnHome@reverseDuration:
   943                           	callstack 0
   944                           
   945                           ; 1 bytes @ 0x3A
   946   00003B                     	ds	1
   947   00003C                     returnHome@straightRamp:
   948                           	callstack 0
   949   00003C                     lostReturnHome@straightRamp:
   950                           	callstack 0
   951                           
   952                           ; 1 bytes @ 0x3B
   953   00003C                     	ds	1
   954   00003D                     returnHome@turnSpeed:
   955                           	callstack 0
   956   00003D                     lostReturnHome@turnSpeed:
   957                           	callstack 0
   958                           
   959                           ; 1 bytes @ 0x3C
   960   00003D                     	ds	1
   961   00003E                     returnHome@turnDuration:
   962                           	callstack 0
   963   00003E                     lostReturnHome@turnDuration:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x3D
   967   00003E                     	ds	1
   968   00003F                     returnHome@turnRamp:
   969                           	callstack 0
   970   00003F                     lostReturnHome@turnRamp:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0x3E
   974   00003F                     	ds	1
   975   000040                     ??_lostReturnHome:
   976   000040                     ??_returnHome:
   977                           
   978                           ; 1 bytes @ 0x3F
   979   000040                     	ds	4
   980   000044                     returnHome@i:
   981                           	callstack 0
   982   000044                     lostReturnHome@i:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x43
   986   000044                     	ds	1
   987   000045                     ??_move:
   988                           
   989                           ; 1 bytes @ 0x44
   990   000045                     	ds	2
   991   000047                     ??_main:
   992                           
   993                           ; 1 bytes @ 0x46
   994   000047                     	ds	2
   995                           
   996 ;;
   997 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   998 ;;
   999 ;; *************** function _main *****************
  1000 ;; Defined at:
  1001 ;;		line 28 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  straightTime   82   40[BANK1 ] unsigned int [41]
  1006 ;;  moveSequence   40  122[BANK1 ] unsigned char [40]
  1007 ;;  buf            40    0[BANK1 ] unsigned char [40]
  1008 ;;  motorL         10  201[BANK1 ] struct DC_motor
  1009 ;;  motorR         10  191[BANK1 ] struct DC_motor
  1010 ;;  RGBC            8  183[BANK1 ] struct RGBC_val
  1011 ;;  RGBC_n          8    0        struct RGBC_val
  1012 ;;  HSV             6  172[BANK1 ] struct HSV_val
  1013 ;;  white           6    0        struct HSV_calib
  1014 ;;  lightblue       6    0        struct HSV_calib
  1015 ;;  orange          6    0        struct HSV_calib
  1016 ;;  pink            6    0        struct HSV_calib
  1017 ;;  yellow          6    0        struct HSV_calib
  1018 ;;  blue            6    0        struct HSV_calib
  1019 ;;  green           6    0        struct HSV_calib
  1020 ;;  red             6    0        struct HSV_calib
  1021 ;;  testSequence    4  162[BANK1 ] unsigned char [4]
  1022 ;;  PWMcycle        2    0        unsigned int 
  1023 ;;  ambientNew      2  167[BANK1 ] unsigned int 
  1024 ;;  turnDuration    1  182[BANK1 ] unsigned char 
  1025 ;;  straightRamp    1  181[BANK1 ] unsigned char 
  1026 ;;  curMove         1  180[BANK1 ] unsigned char 
  1027 ;;  color           1  179[BANK1 ] unsigned char 
  1028 ;;  straightSpee    1  178[BANK1 ] unsigned char 
  1029 ;;  turnRamp        1  171[BANK1 ] unsigned char 
  1030 ;;  turnSpeed       1  170[BANK1 ] unsigned char 
  1031 ;;  reverseDurat    1  169[BANK1 ] unsigned char 
  1032 ;;  wall            1  166[BANK1 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1043 ;;      Locals:         0       0     211       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;      Totals:         2       0     211       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1046 ;;Total ram usage:      213 bytes
  1047 ;; Hardware stack levels required when called: 10
  1048 ;; This function calls:
  1049 ;;		_Buggy_init
  1050 ;;		_Interrupts_init
  1051 ;;		_Timer0_init
  1052 ;;		_batteryLevel
  1053 ;;		_calibration
  1054 ;;		_color_clear_init_interrupts
  1055 ;;		_color_click_init
  1056 ;;		_color_read
  1057 ;;		_fullSpeedAhead
  1058 ;;		_get16bitTMR0val
  1059 ;;		_initDCmotorsPWM
  1060 ;;		_initUSART4
  1061 ;;		_lostReturnHome
  1062 ;;		_move
  1063 ;;		_resetTimer
  1064 ;;		_rgb_2_hsv
  1065 ;;		_stop
  1066 ;;		_wallAdjust
  1067 ;;		_white_Light
  1068 ;; This function is called by:
  1069 ;;		Startup code after reset
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           	psect	text0
  1074   002868                     __ptext0:
  1075                           	callstack 0
  1076   002868                     _main:
  1077                           	callstack 21
  1078   002868                     
  1079                           ;main.c: 30:     char buf[40] = {0};
  1080   002868  EE21  F000         	lfsr	2,main@buf
  1081   00286C  0E27               	movlw	39
  1082   00286E                     u2901:
  1083   00286E  6ADE               	clrf	postinc2,c
  1084   002870  06E8               	decf	wreg,f,c
  1085   002872  E2FD               	bc	u2901
  1086   002874                     
  1087                           ;main.c: 33:     unsigned int ambientNew;;main.c: 34:     char wall = 0;
  1088   002874  0E00               	movlw	0
  1089   002876  0101               	movlb	1	; () banked
  1090   002878  6FA6               	movwf	main@wall& (0+255),b
  1091   00287A                     
  1092                           ; BSR set to: 1
  1093                           ;main.c: 35:     unsigned char color = 0;
  1094   00287A  0E00               	movlw	0
  1095   00287C  6FB3               	movwf	main@color& (0+255),b
  1096   00287E                     
  1097                           ; BSR set to: 1
  1098                           ;main.c: 36:     unsigned char moveSequence[40] = {0};
  1099   00287E  EE21  F07A         	lfsr	2,main@moveSequence
  1100   002882  0E27               	movlw	39
  1101   002884                     u2911:
  1102   002884  6ADE               	clrf	postinc2,c
  1103   002886  06E8               	decf	wreg,f,c
  1104   002888  E2FD               	bc	u2911
  1105   00288A                     
  1106                           ; BSR set to: 1
  1107                           ;main.c: 37:     unsigned int straightTime[41] = {0};
  1108   00288A  EE21  F028         	lfsr	2,main@straightTime
  1109   00288E  0E51               	movlw	81
  1110   002890                     u2921:
  1111   002890  6ADE               	clrf	postinc2,c
  1112   002892  06E8               	decf	wreg,f,c
  1113   002894  E2FD               	bc	u2921
  1114   002896                     
  1115                           ; BSR set to: 1
  1116                           ;main.c: 38:     char curMove = 0;
  1117   002896  0E00               	movlw	0
  1118   002898  6FB4               	movwf	main@curMove& (0+255),b
  1119   00289A                     
  1120                           ; BSR set to: 1
  1121                           ;main.c: 40:     unsigned char testSequence[4] = {2,2,1,1,8};
  1122   00289A  C1D3  F1A2         	movff	main@F14661,main@testSequence
  1123   00289E  C1D4  F1A3         	movff	main@F14661+1,main@testSequence+1
  1124   0028A2  C1D5  F1A4         	movff	main@F14661+2,main@testSequence+2
  1125   0028A6  C1D6  F1A5         	movff	main@F14661+3,main@testSequence+3
  1126   0028AA                     
  1127                           ; BSR set to: 1
  1128                           ;main.c: 43:     struct RGBC_val RGBC, RGBC_n;;main.c: 44:     struct HSV_val HSV;;main.
      +                          c: 45:     struct DC_motor motorL, motorR;;main.c: 48:     Buggy_init();
  1129   0028AA  EC1D  F023         	call	_Buggy_init	;wreg free
  1130   0028AE                     
  1131                           ;main.c: 49:     color_click_init();
  1132   0028AE  EC01  F023         	call	_color_click_init	;wreg free
  1133   0028B2                     
  1134                           ;main.c: 50:     Timer0_init();
  1135   0028B2  EC10  F024         	call	_Timer0_init	;wreg free
  1136   0028B6                     
  1137                           ;main.c: 51:     Interrupts_init();
  1138   0028B6  EC64  F024         	call	_Interrupts_init	;wreg free
  1139   0028BA                     
  1140                           ;main.c: 52:     initUSART4();
  1141   0028BA  EC30  F024         	call	_initUSART4	;wreg free
  1142   0028BE                     
  1143                           ;main.c: 53:     initDCmotorsPWM(PWMcycle);
  1144   0028BE  0E00               	movlw	0
  1145   0028C0  6E11               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1146   0028C2  0EC7               	movlw	199
  1147   0028C4  6E10               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1148   0028C6  ECA0  F021         	call	_initDCmotorsPWM	;wreg free
  1149   0028CA                     
  1150                           ;main.c: 55:     motorL.power=0;
  1151   0028CA  0E00               	movlw	0
  1152   0028CC  0101               	movlb	1	; () banked
  1153   0028CE  6FC9               	movwf	main@motorL& (0+255),b
  1154   0028D0                     
  1155                           ; BSR set to: 1
  1156                           ;main.c: 56:     motorL.direction=1;
  1157   0028D0  0E01               	movlw	1
  1158   0028D2  6FCA               	movwf	(main@motorL+1)& (0+255),b
  1159   0028D4                     
  1160                           ; BSR set to: 1
  1161                           ;main.c: 57:     motorL.brakemode=1;
  1162   0028D4  0E01               	movlw	1
  1163   0028D6  6FCB               	movwf	(main@motorL+2)& (0+255),b
  1164   0028D8                     
  1165                           ; BSR set to: 1
  1166                           ;main.c: 58:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1167   0028D8  0EAA               	movlw	170
  1168   0028DA  6FCE               	movwf	(main@motorL+5)& (0+255),b
  1169   0028DC  0E0F               	movlw	15
  1170   0028DE  6FCF               	movwf	(main@motorL+6)& (0+255),b
  1171   0028E0                     
  1172                           ; BSR set to: 1
  1173                           ;main.c: 59:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1174   0028E0  0EA6               	movlw	166
  1175   0028E2  6FD0               	movwf	(main@motorL+7)& (0+255),b
  1176   0028E4  0E0F               	movlw	15
  1177   0028E6  6FD1               	movwf	(main@motorL+8)& (0+255),b
  1178   0028E8                     
  1179                           ; BSR set to: 1
  1180                           ;main.c: 60:     motorL.PWMperiod=PWMcycle;
  1181   0028E8  0E00               	movlw	0
  1182   0028EA  6FCD               	movwf	(main@motorL+4)& (0+255),b
  1183   0028EC  0EC7               	movlw	199
  1184   0028EE  6FCC               	movwf	(main@motorL+3)& (0+255),b
  1185   0028F0                     
  1186                           ; BSR set to: 1
  1187                           ;main.c: 61:     motorL.compensation=0;
  1188   0028F0  0E00               	movlw	0
  1189   0028F2  6FD2               	movwf	(main@motorL+9)& (0+255),b
  1190   0028F4                     
  1191                           ; BSR set to: 1
  1192                           ;main.c: 63:     motorR.power=0;
  1193   0028F4  0E00               	movlw	0
  1194   0028F6  6FBF               	movwf	main@motorR& (0+255),b
  1195   0028F8                     
  1196                           ; BSR set to: 1
  1197                           ;main.c: 64:     motorR.direction=1;
  1198   0028F8  0E01               	movlw	1
  1199   0028FA  6FC0               	movwf	(main@motorR+1)& (0+255),b
  1200   0028FC                     
  1201                           ; BSR set to: 1
  1202                           ;main.c: 65:     motorR.brakemode=1;
  1203   0028FC  0E01               	movlw	1
  1204   0028FE  6FC1               	movwf	(main@motorR+2)& (0+255),b
  1205   002900                     
  1206                           ; BSR set to: 1
  1207                           ;main.c: 66:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1208   002900  0E25               	movlw	37
  1209   002902  6FC4               	movwf	(main@motorR+5)& (0+255),b
  1210   002904  0E0F               	movlw	15
  1211   002906  6FC5               	movwf	(main@motorR+6)& (0+255),b
  1212   002908                     
  1213                           ; BSR set to: 1
  1214                           ;main.c: 67:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1215   002908  0E21               	movlw	33
  1216   00290A  6FC6               	movwf	(main@motorR+7)& (0+255),b
  1217   00290C  0E0F               	movlw	15
  1218   00290E  6FC7               	movwf	(main@motorR+8)& (0+255),b
  1219   002910                     
  1220                           ; BSR set to: 1
  1221                           ;main.c: 68:     motorR.PWMperiod=PWMcycle;
  1222   002910  0E00               	movlw	0
  1223   002912  6FC3               	movwf	(main@motorR+4)& (0+255),b
  1224   002914  0EC7               	movlw	199
  1225   002916  6FC2               	movwf	(main@motorR+3)& (0+255),b
  1226   002918                     
  1227                           ; BSR set to: 1
  1228                           ;main.c: 69:     motorR.compensation=0;
  1229   002918  0E00               	movlw	0
  1230   00291A  6FC8               	movwf	(main@motorR+9)& (0+255),b
  1231   00291C                     
  1232                           ; BSR set to: 1
  1233                           ;main.c: 72:     char straightSpeed=20;
  1234   00291C  0E14               	movlw	20
  1235   00291E  6FB2               	movwf	main@straightSpeed& (0+255),b
  1236   002920                     
  1237                           ; BSR set to: 1
  1238                           ;main.c: 73:     unsigned char straightRamp=2;
  1239   002920  0E02               	movlw	2
  1240   002922  6FB5               	movwf	main@straightRamp& (0+255),b
  1241   002924                     
  1242                           ; BSR set to: 1
  1243                           ;main.c: 75:     unsigned char reverseDuration=400;
  1244   002924  0E90               	movlw	144
  1245   002926  6FA9               	movwf	main@reverseDuration& (0+255),b
  1246   002928                     
  1247                           ; BSR set to: 1
  1248                           ;main.c: 77:     char turnSpeed=40;
  1249   002928  0E28               	movlw	40
  1250   00292A  6FAA               	movwf	main@turnSpeed& (0+255),b
  1251   00292C                     
  1252                           ; BSR set to: 1
  1253                           ;main.c: 78:     unsigned char turnDuration=10;
  1254   00292C  0E0A               	movlw	10
  1255   00292E  6FB6               	movwf	main@turnDuration& (0+255),b
  1256   002930                     
  1257                           ; BSR set to: 1
  1258                           ;main.c: 79:     unsigned char turnRamp=1;
  1259   002930  0E01               	movlw	1
  1260   002932  6FAB               	movwf	main@turnRamp& (0+255),b
  1261   002934                     
  1262                           ; BSR set to: 1
  1263                           ;main.c: 82:     batteryLevel();
  1264   002934  ECB9  F022         	call	_batteryLevel	;wreg free
  1265   002938                     l89:
  1266   002938  B48E               	btfsc	142,2,c	;volatile
  1267   00293A  EFA1  F014         	goto	u2931
  1268   00293E  EFA3  F014         	goto	u2930
  1269   002942                     u2931:
  1270   002942  EF9C  F014         	goto	l89
  1271   002946                     u2930:
  1272   002946                     
  1273                           ;main.c: 95:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  1274   002946  9680               	bcf	128,3,c	;volatile
  1275   002948  9E7C               	bcf	124,7,c	;volatile
  1276                           
  1277                           ;main.c: 98:     LATHbits.LATH1=LATDbits.LATD3=1;
  1278   00294A  867C               	bsf	124,3,c	;volatile
  1279   00294C  8280               	bsf	128,1,c	;volatile
  1280   00294E                     
  1281                           ;main.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1282   00294E  0E29               	movlw	41
  1283   002950  6E48               	movwf	(??_main+1)^0,c
  1284   002952  0E96               	movlw	150
  1285   002954  6E47               	movwf	??_main^0,c
  1286   002956  0E7F               	movlw	127
  1287   002958                     u3297:
  1288   002958  2EE8               	decfsz	wreg,f,c
  1289   00295A  D7FE               	bra	u3297
  1290   00295C  2E47               	decfsz	??_main^0,f,c
  1291   00295E  D7FC               	bra	u3297
  1292   002960  2E48               	decfsz	(??_main+1)^0,f,c
  1293   002962  D7FA               	bra	u3297
  1294   002964  0000               	nop	
  1295   002966                     
  1296                           ;main.c: 102:     struct HSV_calib red, green, blue, yellow, pink, orange, lightblue, wh
      +                          ite;;main.c: 106:     calibration(&motorL, &motorR, turnSpeed, &turnDuration, turnRamp);
  1297   002966  0EC9               	movlw	low main@motorL
  1298   002968  6E31               	movwf	calibration@mL^0,c
  1299   00296A  0E01               	movlw	high main@motorL
  1300   00296C  6E32               	movwf	(calibration@mL+1)^0,c
  1301   00296E  0EBF               	movlw	low main@motorR
  1302   002970  6E33               	movwf	calibration@mR^0,c
  1303   002972  0E01               	movlw	high main@motorR
  1304   002974  6E34               	movwf	(calibration@mR+1)^0,c
  1305   002976  0E28               	movlw	40
  1306   002978  6E35               	movwf	calibration@turnSpeed^0,c
  1307   00297A  0EB6               	movlw	low main@turnDuration
  1308   00297C  6E36               	movwf	calibration@turnDuration^0,c
  1309   00297E  0E01               	movlw	high main@turnDuration
  1310   002980  6E37               	movwf	(calibration@turnDuration+1)^0,c
  1311   002982  0E01               	movlw	1
  1312   002984  6E38               	movwf	calibration@turnRamp^0,c
  1313   002986  EC07  F018         	call	_calibration	;wreg free
  1314   00298A                     
  1315                           ;main.c: 116:     white_Light(1);
  1316   00298A  0E01               	movlw	1
  1317   00298C  ECEE  F023         	call	_white_Light
  1318   002990                     
  1319                           ;main.c: 117:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1320   002990  0E52               	movlw	82
  1321   002992  6E48               	movwf	(??_main+1)^0,c
  1322   002994  0E2B               	movlw	43
  1323   002996  6E47               	movwf	??_main^0,c
  1324   002998  0E00               	movlw	0
  1325   00299A                     u3307:
  1326   00299A  2EE8               	decfsz	wreg,f,c
  1327   00299C  D7FE               	bra	u3307
  1328   00299E  2E47               	decfsz	??_main^0,f,c
  1329   0029A0  D7FC               	bra	u3307
  1330   0029A2  2E48               	decfsz	(??_main+1)^0,f,c
  1331   0029A4  D7FA               	bra	u3307
  1332   0029A6  D000               	nop2	
  1333   0029A8                     
  1334                           ;main.c: 120:     color_read(&RGBC);
  1335   0029A8  0EB7               	movlw	low main@RGBC
  1336   0029AA  6E14               	movwf	color_read@RGBC^0,c
  1337   0029AC  0E01               	movlw	high main@RGBC
  1338   0029AE  6E15               	movwf	(color_read@RGBC+1)^0,c
  1339   0029B0  EC4C  F01A         	call	_color_read	;wreg free
  1340   0029B4                     
  1341                           ;main.c: 121:     ambient=RGBC.C;
  1342   0029B4  C1BD  F1D7         	movff	main@RGBC+6,_ambient
  1343   0029B8  C1BE  F1D8         	movff	main@RGBC+7,_ambient+1
  1344   0029BC                     
  1345                           ;main.c: 122:     color_clear_init_interrupts();
  1346   0029BC  ECA8  F020         	call	_color_clear_init_interrupts	;wreg free
  1347   0029C0                     
  1348                           ;main.c: 123:     _delay((unsigned long)((10)*(64000000/4000.0)));
  1349   0029C0  0ED0               	movlw	208
  1350   0029C2  6E47               	movwf	??_main^0,c
  1351   0029C4  0ECA               	movlw	202
  1352   0029C6                     u3317:
  1353   0029C6  2EE8               	decfsz	wreg,f,c
  1354   0029C8  D7FE               	bra	u3317
  1355   0029CA  2E47               	decfsz	??_main^0,f,c
  1356   0029CC  D7FC               	bra	u3317
  1357   0029CE                     
  1358                           ;main.c: 126:     fullSpeedAhead(&motorL, &motorR, straightSpeed, straightRamp);
  1359   0029CE  0EC9               	movlw	low main@motorL
  1360   0029D0  6E23               	movwf	fullSpeedAhead@mL^0,c
  1361   0029D2  0E01               	movlw	high main@motorL
  1362   0029D4  6E24               	movwf	(fullSpeedAhead@mL+1)^0,c
  1363   0029D6  0EBF               	movlw	low main@motorR
  1364   0029D8  6E25               	movwf	fullSpeedAhead@mR^0,c
  1365   0029DA  0E01               	movlw	high main@motorR
  1366   0029DC  6E26               	movwf	(fullSpeedAhead@mR+1)^0,c
  1367   0029DE  0E14               	movlw	20
  1368   0029E0  6E27               	movwf	fullSpeedAhead@straightSpeed^0,c
  1369   0029E2  0E02               	movlw	2
  1370   0029E4  6E28               	movwf	fullSpeedAhead@straightRamp^0,c
  1371   0029E6  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  1372   0029EA                     
  1373                           ;main.c: 127:     resetTimer();
  1374   0029EA  EC7B  F024         	call	_resetTimer	;wreg free
  1375   0029EE                     
  1376                           ;main.c: 130:     brightnessChange=0;
  1377   0029EE  0E00               	movlw	0
  1378   0029F0  0101               	movlb	1	; () banked
  1379   0029F2  6FDA               	movwf	_brightnessChange& (0+255),b
  1380   0029F4                     
  1381                           ; BSR set to: 1
  1382                           ;main.c: 131:     lost=0;
  1383   0029F4  0E00               	movlw	0
  1384   0029F6  6FD9               	movwf	_lost& (0+255),b
  1385   0029F8                     l4293:
  1386                           
  1387                           ; BSR set to: 1
  1388                           ;main.c: 134:         if (brightnessChange == 1) {
  1389   0029F8  05DA               	decf	_brightnessChange& (0+255),w,b
  1390   0029FA  A4D8               	btfss	status,2,c
  1391   0029FC  EF02  F015         	goto	u2941
  1392   002A00  EF04  F015         	goto	u2940
  1393   002A04                     u2941:
  1394   002A04  EF30  F015         	goto	l4311
  1395   002A08                     u2940:
  1396   002A08                     
  1397                           ; BSR set to: 1
  1398                           ;main.c: 137:             color_read(&RGBC);
  1399   002A08  0EB7               	movlw	low main@RGBC
  1400   002A0A  6E14               	movwf	color_read@RGBC^0,c
  1401   002A0C  0E01               	movlw	high main@RGBC
  1402   002A0E  6E15               	movwf	(color_read@RGBC+1)^0,c
  1403   002A10  EC4C  F01A         	call	_color_read	;wreg free
  1404   002A14                     
  1405                           ;main.c: 138:             ambientNew=RGBC.C;
  1406   002A14  C1BD  F1A7         	movff	main@RGBC+6,main@ambientNew
  1407   002A18  C1BE  F1A8         	movff	main@RGBC+7,main@ambientNew+1
  1408   002A1C                     
  1409                           ;main.c: 140:             if (ambientNew <= ambient) {
  1410   002A1C  0101               	movlb	1	; () banked
  1411   002A1E  51A7               	movf	main@ambientNew& (0+255),w,b
  1412   002A20  5DD7               	subwf	_ambient& (0+255),w,b
  1413   002A22  51A8               	movf	(main@ambientNew+1)& (0+255),w,b
  1414   002A24  59D8               	subwfb	(_ambient+1)& (0+255),w,b
  1415   002A26  A0D8               	btfss	status,0,c
  1416   002A28  EF18  F015         	goto	u2951
  1417   002A2C  EF1A  F015         	goto	u2950
  1418   002A30                     u2951:
  1419   002A30  EF2C  F015         	goto	l4309
  1420   002A34                     u2950:
  1421   002A34                     
  1422                           ; BSR set to: 1
  1423                           ;main.c: 141:                 ambient = ambientNew;
  1424   002A34  C1A7  F1D7         	movff	main@ambientNew,_ambient
  1425   002A38  C1A8  F1D8         	movff	main@ambientNew+1,_ambient+1
  1426   002A3C                     
  1427                           ; BSR set to: 1
  1428                           ;main.c: 142:                 color_clear_init_interrupts();
  1429   002A3C  ECA8  F020         	call	_color_clear_init_interrupts	;wreg free
  1430   002A40                     
  1431                           ;main.c: 143:                 _delay((unsigned long)((10)*(64000000/4000.0)));
  1432   002A40  0ED0               	movlw	208
  1433   002A42  6E47               	movwf	??_main^0,c
  1434   002A44  0ECA               	movlw	202
  1435   002A46                     u3327:
  1436   002A46  2EE8               	decfsz	wreg,f,c
  1437   002A48  D7FE               	bra	u3327
  1438   002A4A  2E47               	decfsz	??_main^0,f,c
  1439   002A4C  D7FC               	bra	u3327
  1440   002A4E                     
  1441                           ;main.c: 144:                 brightnessChange = 0;
  1442   002A4E  0E00               	movlw	0
  1443   002A50  0101               	movlb	1	; () banked
  1444   002A52  6FDA               	movwf	_brightnessChange& (0+255),b
  1445                           
  1446                           ;main.c: 145:             }
  1447   002A54  EF30  F015         	goto	l4311
  1448   002A58                     l4309:
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 148:                 wall = 1;
  1452   002A58  0E01               	movlw	1
  1453   002A5A  6FA6               	movwf	main@wall& (0+255),b
  1454                           
  1455                           ;main.c: 149:                 brightnessChange = 0;
  1456   002A5C  0E00               	movlw	0
  1457   002A5E  6FDA               	movwf	_brightnessChange& (0+255),b
  1458   002A60                     l4311:
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;main.c: 153:         if (wall == 1) {
  1462   002A60  05A6               	decf	main@wall& (0+255),w,b
  1463   002A62  A4D8               	btfss	status,2,c
  1464   002A64  EF36  F015         	goto	u2961
  1465   002A68  EF38  F015         	goto	u2960
  1466   002A6C                     u2961:
  1467   002A6C  EFCF  F015         	goto	l4343
  1468   002A70                     u2960:
  1469   002A70                     
  1470                           ; BSR set to: 1
  1471                           ;main.c: 154:             PIE0bits.INT0IE=TMR0IE=0;
  1472   002A70  010E               	movlb	14	; () banked
  1473   002A72  9B29               	bcf	41,5,b	;volatile
  1474   002A74  AB29               	btfss	41,5,b	;volatile
  1475   002A76  D002               	bra	u2975
  1476   002A78  8129               	bsf	41,0,b	;volatile
  1477   002A7A  D002               	bra	u2977
  1478   002A7C                     u2975:
  1479   002A7C  010E               	movlb	14	; () banked
  1480   002A7E  9129               	bcf	41,0,b	;volatile
  1481   002A80                     u2977:
  1482   002A80                     
  1483                           ; BSR set to: 14
  1484                           ;main.c: 155:             straightTime[curMove] = get16bitTMR0val();
  1485   002A80  EC79  F023         	call	_get16bitTMR0val	;wreg free
  1486   002A84  0101               	movlb	1	; () banked
  1487   002A86  51B4               	movf	main@curMove& (0+255),w,b
  1488   002A88  0D02               	mullw	2
  1489   002A8A  0E28               	movlw	low main@straightTime
  1490   002A8C  24F3               	addwf	243,w,c
  1491   002A8E  6ED9               	movwf	fsr2l,c
  1492   002A90  0E01               	movlw	high main@straightTime
  1493   002A92  20F4               	addwfc	prodh,w,c
  1494   002A94  6EDA               	movwf	fsr2h,c
  1495   002A96  C010  FFDE         	movff	?_get16bitTMR0val,postinc2
  1496   002A9A  C011  FFDD         	movff	?_get16bitTMR0val+1,postdec2
  1497                           
  1498                           ;main.c: 158:             stop(&motorL, &motorR, straightRamp);
  1499   002A9E  0EC9               	movlw	low main@motorL
  1500   002AA0  6E23               	movwf	stop@mL^0,c
  1501   002AA2  0E01               	movlw	high main@motorL
  1502   002AA4  6E24               	movwf	(stop@mL+1)^0,c
  1503   002AA6  0EBF               	movlw	low main@motorR
  1504   002AA8  6E25               	movwf	stop@mR^0,c
  1505   002AAA  0E01               	movlw	high main@motorR
  1506   002AAC  6E26               	movwf	(stop@mR+1)^0,c
  1507   002AAE  C1B5  F027         	movff	main@straightRamp,stop@straightRamp
  1508   002AB2  EC4F  F01F         	call	_stop	;wreg free
  1509                           
  1510                           ;main.c: 159:             wallAdjust(&motorL, &motorR, straightSpeed, straightRamp);
  1511   002AB6  0EC9               	movlw	low main@motorL
  1512   002AB8  6E23               	movwf	wallAdjust@mL^0,c
  1513   002ABA  0E01               	movlw	high main@motorL
  1514   002ABC  6E24               	movwf	(wallAdjust@mL+1)^0,c
  1515   002ABE  0EBF               	movlw	low main@motorR
  1516   002AC0  6E25               	movwf	wallAdjust@mR^0,c
  1517   002AC2  0E01               	movlw	high main@motorR
  1518   002AC4  6E26               	movwf	(wallAdjust@mR+1)^0,c
  1519   002AC6  C1B2  F027         	movff	main@straightSpeed,wallAdjust@straightSpeed
  1520   002ACA  C1B5  F028         	movff	main@straightRamp,wallAdjust@straightRamp
  1521   002ACE  EC20  F016         	call	_wallAdjust	;wreg free
  1522   002AD2                     
  1523                           ;main.c: 160:             color_read(&RGBC);
  1524   002AD2  0EB7               	movlw	low main@RGBC
  1525   002AD4  6E14               	movwf	color_read@RGBC^0,c
  1526   002AD6  0E01               	movlw	high main@RGBC
  1527   002AD8  6E15               	movwf	(color_read@RGBC+1)^0,c
  1528   002ADA  EC4C  F01A         	call	_color_read	;wreg free
  1529   002ADE                     
  1530                           ;main.c: 162:             rgb_2_hsv(RGBC, &HSV);
  1531   002ADE  EE21  F0B7         	lfsr	2,main@RGBC
  1532   002AE2  EE00  F02A         	lfsr	0,rgb_2_hsv@RGBC
  1533   002AE6  0E07               	movlw	7
  1534   002AE8                     u2981:
  1535   002AE8  CFDB FFEB          	movff	plusw2,plusw0
  1536   002AEC  06E8               	decf	wreg,f,c
  1537   002AEE  E2FC               	bc	u2981
  1538   002AF0  0EAC               	movlw	low main@HSV
  1539   002AF2  6E32               	movwf	rgb_2_hsv@HSV^0,c
  1540   002AF4  0E01               	movlw	high main@HSV
  1541   002AF6  6E33               	movwf	(rgb_2_hsv@HSV+1)^0,c
  1542   002AF8  ECC6  F011         	call	_rgb_2_hsv	;wreg free
  1543   002AFC                     
  1544                           ;main.c: 164:             color = testSequence[curMove];
  1545   002AFC  0EA2               	movlw	low main@testSequence
  1546   002AFE  0101               	movlb	1	; () banked
  1547   002B00  25B4               	addwf	main@curMove& (0+255),w,b
  1548   002B02  6ED9               	movwf	fsr2l,c
  1549   002B04  6ADA               	clrf	fsr2h,c
  1550   002B06  0E01               	movlw	high main@testSequence
  1551   002B08  22DA               	addwfc	fsr2h,f,c
  1552   002B0A  50DF               	movf	indf2,w,c
  1553   002B0C  6FB3               	movwf	main@color& (0+255),b
  1554   002B0E                     
  1555                           ; BSR set to: 1
  1556                           ;main.c: 165:             moveSequence[curMove] = color;
  1557   002B0E  0E7A               	movlw	low main@moveSequence
  1558   002B10  25B4               	addwf	main@curMove& (0+255),w,b
  1559   002B12  6ED9               	movwf	fsr2l,c
  1560   002B14  6ADA               	clrf	fsr2h,c
  1561   002B16  0E01               	movlw	high main@moveSequence
  1562   002B18  22DA               	addwfc	fsr2h,f,c
  1563   002B1A  C1B3  FFDF         	movff	main@color,indf2
  1564   002B1E                     
  1565                           ; BSR set to: 1
  1566                           ;main.c: 168:             move(&motorL, &motorR, color, moveSequence, straightTime, curM
      +                          ove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  1567   002B1E  0EC9               	movlw	low main@motorL
  1568   002B20  0100               	movlb	0	; () banked
  1569   002B22  6FD8               	movwf	move@mL& (0+255),b
  1570   002B24  0E01               	movlw	high main@motorL
  1571   002B26  6FD9               	movwf	(move@mL+1)& (0+255),b
  1572   002B28  0EBF               	movlw	low main@motorR
  1573   002B2A  6FDA               	movwf	move@mR& (0+255),b
  1574   002B2C  0E01               	movlw	high main@motorR
  1575   002B2E  6FDB               	movwf	(move@mR+1)& (0+255),b
  1576   002B30  C1B3  F0DC         	movff	main@color,move@color
  1577   002B34  0E7A               	movlw	low main@moveSequence
  1578   002B36  6FDD               	movwf	move@moveSequence& (0+255),b
  1579   002B38  0E01               	movlw	high main@moveSequence
  1580   002B3A  6FDE               	movwf	(move@moveSequence+1)& (0+255),b
  1581   002B3C  0E28               	movlw	low main@straightTime
  1582   002B3E  6FDF               	movwf	move@straightTime& (0+255),b
  1583   002B40  0E01               	movlw	high main@straightTime
  1584   002B42  6FE0               	movwf	(move@straightTime+1)& (0+255),b
  1585   002B44  C1B4  F0E1         	movff	main@curMove,move@curMove
  1586   002B48  C1B2  F0E2         	movff	main@straightSpeed,move@straightSpeed
  1587   002B4C  C1A9  F0E3         	movff	main@reverseDuration,move@reverseDuration
  1588   002B50  C1B5  F0E4         	movff	main@straightRamp,move@straightRamp
  1589   002B54  C1AA  F0E5         	movff	main@turnSpeed,move@turnSpeed
  1590   002B58  C1B6  F0E6         	movff	main@turnDuration,move@turnDuration
  1591   002B5C  C1AB  F0E7         	movff	main@turnRamp,move@turnRamp
  1592   002B60  EC01  F007         	call	_move	;wreg free
  1593   002B64                     
  1594                           ;main.c: 171:             color_read(&RGBC);
  1595   002B64  0EB7               	movlw	low main@RGBC
  1596   002B66  6E14               	movwf	color_read@RGBC^0,c
  1597   002B68  0E01               	movlw	high main@RGBC
  1598   002B6A  6E15               	movwf	(color_read@RGBC+1)^0,c
  1599   002B6C  EC4C  F01A         	call	_color_read	;wreg free
  1600   002B70                     
  1601                           ;main.c: 172:             ambient=RGBC.C;
  1602   002B70  C1BD  F1D7         	movff	main@RGBC+6,_ambient
  1603   002B74  C1BE  F1D8         	movff	main@RGBC+7,_ambient+1
  1604   002B78                     
  1605                           ;main.c: 173:             color_clear_init_interrupts();
  1606   002B78  ECA8  F020         	call	_color_clear_init_interrupts	;wreg free
  1607   002B7C                     
  1608                           ;main.c: 174:             brightnessChange = 0;
  1609   002B7C  0E00               	movlw	0
  1610   002B7E  0101               	movlb	1	; () banked
  1611   002B80  6FDA               	movwf	_brightnessChange& (0+255),b
  1612   002B82                     
  1613                           ; BSR set to: 1
  1614                           ;main.c: 176:             curMove++;
  1615   002B82  2BB4               	incf	main@curMove& (0+255),f,b
  1616   002B84                     
  1617                           ; BSR set to: 1
  1618                           ;main.c: 177:             resetTimer();
  1619   002B84  EC7B  F024         	call	_resetTimer	;wreg free
  1620   002B88                     
  1621                           ;main.c: 178:             PIE0bits.INT0IE=TMR0IE=1;
  1622   002B88  010E               	movlb	14	; () banked
  1623   002B8A  8B29               	bsf	41,5,b	;volatile
  1624   002B8C  AB29               	btfss	41,5,b	;volatile
  1625   002B8E  D002               	bra	u2995
  1626   002B90  8129               	bsf	41,0,b	;volatile
  1627   002B92  D002               	bra	u2997
  1628   002B94                     u2995:
  1629   002B94  010E               	movlb	14	; () banked
  1630   002B96  9129               	bcf	41,0,b	;volatile
  1631   002B98                     u2997:
  1632   002B98                     
  1633                           ; BSR set to: 14
  1634                           ;main.c: 179:             wall = 0;
  1635   002B98  0E00               	movlw	0
  1636   002B9A  0101               	movlb	1	; () banked
  1637   002B9C  6FA6               	movwf	main@wall& (0+255),b
  1638   002B9E                     l4343:
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;main.c: 183:         if (lost == 1) {
  1642   002B9E  05D9               	decf	_lost& (0+255),w,b
  1643   002BA0  A4D8               	btfss	status,2,c
  1644   002BA2  EFD5  F015         	goto	u3001
  1645   002BA6  EFD7  F015         	goto	u3000
  1646   002BAA                     u3001:
  1647   002BAA  EF0C  F016         	goto	l4353
  1648   002BAE                     u3000:
  1649   002BAE                     
  1650                           ; BSR set to: 1
  1651                           ;main.c: 184:             PIE0bits.INT0IE=0;
  1652   002BAE  010E               	movlb	14	; () banked
  1653   002BB0  9129               	bcf	41,0,b	;volatile
  1654   002BB2                     
  1655                           ; BSR set to: 14
  1656                           ;main.c: 185:             stop(&motorL, &motorR, straightRamp);
  1657   002BB2  0EC9               	movlw	low main@motorL
  1658   002BB4  6E23               	movwf	stop@mL^0,c
  1659   002BB6  0E01               	movlw	high main@motorL
  1660   002BB8  6E24               	movwf	(stop@mL+1)^0,c
  1661   002BBA  0EBF               	movlw	low main@motorR
  1662   002BBC  6E25               	movwf	stop@mR^0,c
  1663   002BBE  0E01               	movlw	high main@motorR
  1664   002BC0  6E26               	movwf	(stop@mR+1)^0,c
  1665   002BC2  C1B5  F027         	movff	main@straightRamp,stop@straightRamp
  1666   002BC6  EC4F  F01F         	call	_stop	;wreg free
  1667                           
  1668                           ;main.c: 186:             lostReturnHome(&motorL, &motorR, moveSequence, straightTime, c
      +                          urMove, straightSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp)
      +                          ;
  1669   002BCA  0EC9               	movlw	low main@motorL
  1670   002BCC  6E31               	movwf	lostReturnHome@mL^0,c
  1671   002BCE  0E01               	movlw	high main@motorL
  1672   002BD0  6E32               	movwf	(lostReturnHome@mL+1)^0,c
  1673   002BD2  0EBF               	movlw	low main@motorR
  1674   002BD4  6E33               	movwf	lostReturnHome@mR^0,c
  1675   002BD6  0E01               	movlw	high main@motorR
  1676   002BD8  6E34               	movwf	(lostReturnHome@mR+1)^0,c
  1677   002BDA  0E7A               	movlw	low main@moveSequence
  1678   002BDC  6E35               	movwf	lostReturnHome@moveSequence^0,c
  1679   002BDE  0E01               	movlw	high main@moveSequence
  1680   002BE0  6E36               	movwf	(lostReturnHome@moveSequence+1)^0,c
  1681   002BE2  0E28               	movlw	low main@straightTime
  1682   002BE4  6E37               	movwf	lostReturnHome@straightTime^0,c
  1683   002BE6  0E01               	movlw	high main@straightTime
  1684   002BE8  6E38               	movwf	(lostReturnHome@straightTime+1)^0,c
  1685   002BEA  C1B4  F039         	movff	main@curMove,lostReturnHome@curMove
  1686   002BEE  C1B2  F03A         	movff	main@straightSpeed,lostReturnHome@straightSpeed
  1687   002BF2  C1A9  F03B         	movff	main@reverseDuration,lostReturnHome@reverseDuration
  1688   002BF6  C1B5  F03C         	movff	main@straightRamp,lostReturnHome@straightRamp
  1689   002BFA  C1AA  F03D         	movff	main@turnSpeed,lostReturnHome@turnSpeed
  1690   002BFE  C1B6  F03E         	movff	main@turnDuration,lostReturnHome@turnDuration
  1691   002C02  C1AB  F03F         	movff	main@turnRamp,lostReturnHome@turnRamp
  1692   002C06  EC74  F00E         	call	_lostReturnHome	;wreg free
  1693   002C0A                     
  1694                           ;main.c: 187:             PIE0bits.INT0IE=1;
  1695   002C0A  010E               	movlb	14	; () banked
  1696   002C0C  8129               	bsf	41,0,b	;volatile
  1697   002C0E                     
  1698                           ; BSR set to: 14
  1699                           ;main.c: 188:             lost = 0;
  1700   002C0E  0E00               	movlw	0
  1701   002C10  0101               	movlb	1	; () banked
  1702   002C12  6FD9               	movwf	_lost& (0+255),b
  1703                           
  1704                           ;main.c: 189:             break;
  1705   002C14  EF1E  F016         	goto	l103
  1706   002C18                     l4353:
  1707                           
  1708                           ; BSR set to: 1
  1709                           ;main.c: 192:         if (color == 8 || color == 9) {break;}
  1710   002C18  0E08               	movlw	8
  1711   002C1A  19B3               	xorwf	main@color& (0+255),w,b
  1712   002C1C  B4D8               	btfsc	status,2,c
  1713   002C1E  EF13  F016         	goto	u3011
  1714   002C22  EF15  F016         	goto	u3010
  1715   002C26                     u3011:
  1716   002C26  EF1E  F016         	goto	l103
  1717   002C2A                     u3010:
  1718   002C2A                     
  1719                           ; BSR set to: 1
  1720   002C2A  0E09               	movlw	9
  1721   002C2C  19B3               	xorwf	main@color& (0+255),w,b
  1722   002C2E  A4D8               	btfss	status,2,c
  1723   002C30  EF1C  F016         	goto	u3021
  1724   002C34  EF1E  F016         	goto	u3020
  1725   002C38                     u3021:
  1726   002C38  EFFC  F014         	goto	l4293
  1727   002C3C                     u3020:
  1728   002C3C                     l103:
  1729                           
  1730                           ; BSR set to: 1
  1731   002C3C  EF5F  F000         	goto	start
  1732   002C40                     __end_of_main:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _white_Light *****************
  1736 ;; Defined at:
  1737 ;;		line 62 in file "color.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  state           1    wreg     unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  state           1   15[COMRAM] unsigned char 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;Total ram usage:        1 bytes
  1756 ;; Hardware stack levels used: 1
  1757 ;; Hardware stack levels required when called: 5
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;;		_color_calibration
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text1
  1767   0047DC                     __ptext1:
  1768                           	callstack 0
  1769   0047DC                     _white_Light:
  1770                           	callstack 25
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;incstack = 0
  1774                           ;white_Light@state stored from wreg
  1775   0047DC  6E10               	movwf	white_Light@state^0,c
  1776   0047DE                     
  1777                           ;color.c: 62: void white_Light(char state);color.c: 63: {;color.c: 64:     if (state){
  1778   0047DE  5010               	movf	white_Light@state^0,w,c
  1779   0047E0  B4D8               	btfsc	status,2,c
  1780   0047E2  EFF5  F023         	goto	u2491
  1781   0047E6  EFF7  F023         	goto	u2490
  1782   0047EA                     u2491:
  1783   0047EA  EFFC  F023         	goto	l149
  1784   0047EE                     u2490:
  1785   0047EE                     
  1786                           ;color.c: 65:         LATGbits.LATG0 = 1;
  1787   0047EE  807F               	bsf	127,0,c	;volatile
  1788                           
  1789                           ;color.c: 66:         LATEbits.LATE7 = 1;
  1790   0047F0  8E7D               	bsf	125,7,c	;volatile
  1791                           
  1792                           ;color.c: 67:         LATAbits.LATA3 = 1;
  1793   0047F2  8679               	bsf	121,3,c	;volatile
  1794                           
  1795                           ;color.c: 68:     }
  1796   0047F4  EFFF  F023         	goto	l151
  1797   0047F8                     l149:
  1798                           
  1799                           ;color.c: 70:         LATGbits.LATG0 = 0;
  1800   0047F8  907F               	bcf	127,0,c	;volatile
  1801                           
  1802                           ;color.c: 71:         LATEbits.LATE7 = 0;
  1803   0047FA  9E7D               	bcf	125,7,c	;volatile
  1804                           
  1805                           ;color.c: 72:         LATAbits.LATA3 = 0;
  1806   0047FC  9679               	bcf	121,3,c	;volatile
  1807   0047FE                     l151:
  1808   0047FE  0012               	return		;funcret
  1809   004800                     __end_of_white_Light:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _wallAdjust *****************
  1813 ;; Defined at:
  1814 ;;		line 501 in file "dc_motor.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  1817 ;;		 -> main@motorL(10), 
  1818 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  1819 ;;		 -> main@motorR(10), 
  1820 ;;  straightSpee    1   38[COMRAM] unsigned char 
  1821 ;;  straightRamp    1   39[COMRAM] unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  cur_power       2   47[COMRAM] int 
  1824 ;;  i               2   45[COMRAM] int 
  1825 ;;  wallReverseD    1   44[COMRAM] unsigned char 
  1826 ;;  adjustDurati    1   43[COMRAM] unsigned char 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1836 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;Total ram usage:       15 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; Hardware stack levels required when called: 7
  1843 ;; This function calls:
  1844 ;;		_setMotorPWM
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text2
  1851   002C40                     __ptext2:
  1852                           	callstack 0
  1853   002C40                     _wallAdjust:
  1854                           	callstack 23
  1855   002C40                     
  1856                           ;dc_motor.c: 501: void wallAdjust(DC_motor *mL, DC_motor *mR, char straightSpeed, unsign
      +                          ed char straightRamp);dc_motor.c: 502: {;dc_motor.c: 503:     unsigned char adjustDurati
      +                          on = 200;
  1857   002C40  0EC8               	movlw	200
  1858   002C42  6E2C               	movwf	wallAdjust@adjustDuration^0,c
  1859                           
  1860                           ;dc_motor.c: 504:     unsigned char wallReverseDuration = 20;
  1861   002C44  0E14               	movlw	20
  1862   002C46  6E2D               	movwf	wallAdjust@wallReverseDuration^0,c
  1863   002C48                     
  1864                           ;dc_motor.c: 506:     mL->direction = 1;
  1865   002C48  EE20 F001          	lfsr	2,1
  1866   002C4C  5023               	movf	wallAdjust@mL^0,w,c
  1867   002C4E  26D9               	addwf	fsr2l,f,c
  1868   002C50  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1869   002C52  22DA               	addwfc	fsr2h,f,c
  1870   002C54  0E01               	movlw	1
  1871   002C56  6EDF               	movwf	indf2,c
  1872   002C58                     
  1873                           ;dc_motor.c: 507:     mR->direction = 1;
  1874   002C58  EE20 F001          	lfsr	2,1
  1875   002C5C  5025               	movf	wallAdjust@mR^0,w,c
  1876   002C5E  26D9               	addwf	fsr2l,f,c
  1877   002C60  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1878   002C62  22DA               	addwfc	fsr2h,f,c
  1879   002C64  0E01               	movlw	1
  1880   002C66  6EDF               	movwf	indf2,c
  1881                           
  1882                           ;dc_motor.c: 508:     int i;;dc_motor.c: 509:     int cur_power;;dc_motor.c: 510:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  1883   002C68  0E00               	movlw	0
  1884   002C6A  6E31               	movwf	(wallAdjust@cur_power+1)^0,c
  1885   002C6C  0E01               	movlw	1
  1886   002C6E  6E30               	movwf	wallAdjust@cur_power^0,c
  1887   002C70  EF84  F016         	goto	l3817
  1888   002C74                     l3803:
  1889                           
  1890                           ;dc_motor.c: 511:         mL->power = cur_power+mL->compensation;
  1891   002C74  EE20 F009          	lfsr	2,9
  1892   002C78  5023               	movf	wallAdjust@mL^0,w,c
  1893   002C7A  26D9               	addwf	fsr2l,f,c
  1894   002C7C  5024               	movf	(wallAdjust@mL+1)^0,w,c
  1895   002C7E  22DA               	addwfc	fsr2h,f,c
  1896   002C80  50DF               	movf	indf2,w,c
  1897   002C82  2430               	addwf	wallAdjust@cur_power^0,w,c
  1898   002C84  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  1899   002C88  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  1900   002C8C  6EDF               	movwf	indf2,c
  1901                           
  1902                           ;dc_motor.c: 512:         mR->power = cur_power+mR->compensation;
  1903   002C8E  EE20 F009          	lfsr	2,9
  1904   002C92  5025               	movf	wallAdjust@mR^0,w,c
  1905   002C94  26D9               	addwf	fsr2l,f,c
  1906   002C96  5026               	movf	(wallAdjust@mR+1)^0,w,c
  1907   002C98  22DA               	addwfc	fsr2h,f,c
  1908   002C9A  50DF               	movf	indf2,w,c
  1909   002C9C  2430               	addwf	wallAdjust@cur_power^0,w,c
  1910   002C9E  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  1911   002CA2  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  1912   002CA6  6EDF               	movwf	indf2,c
  1913   002CA8                     
  1914                           ;dc_motor.c: 513:         setMotorPWM(mL);
  1915   002CA8  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  1916   002CAC  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  1917   002CB0  EC13  F01E         	call	_setMotorPWM	;wreg free
  1918   002CB4                     
  1919                           ;dc_motor.c: 514:         setMotorPWM(mR);
  1920   002CB4  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  1921   002CB8  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  1922   002CBC  EC13  F01E         	call	_setMotorPWM	;wreg free
  1923   002CC0                     
  1924                           ;dc_motor.c: 515:         for (i=0;i<straightRamp;i++) {
  1925   002CC0  0E00               	movlw	0
  1926   002CC2  6E2F               	movwf	(wallAdjust@i+1)^0,c
  1927   002CC4  0E00               	movlw	0
  1928   002CC6  6E2E               	movwf	wallAdjust@i^0,c
  1929   002CC8  EF70  F016         	goto	l692
  1930   002CCC                     l3811:
  1931                           
  1932                           ;dc_motor.c: 516:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1933   002CCC  0E68               	movlw	104
  1934   002CCE  6E29               	movwf	??_wallAdjust^0,c
  1935   002CD0  0EE4               	movlw	228
  1936   002CD2                     u3337:
  1937   002CD2  2EE8               	decfsz	wreg,f,c
  1938   002CD4  D7FE               	bra	u3337
  1939   002CD6  2E29               	decfsz	??_wallAdjust^0,f,c
  1940   002CD8  D7FC               	bra	u3337
  1941   002CDA  D000               	nop2	
  1942   002CDC                     
  1943                           ;dc_motor.c: 517:         }
  1944   002CDC  4A2E               	infsnz	wallAdjust@i^0,f,c
  1945   002CDE  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  1946   002CE0                     l692:
  1947   002CE0  5028               	movf	wallAdjust@straightRamp^0,w,c
  1948   002CE2  6E29               	movwf	??_wallAdjust^0,c
  1949   002CE4  6A2A               	clrf	(??_wallAdjust+1)^0,c
  1950   002CE6  5029               	movf	??_wallAdjust^0,w,c
  1951   002CE8  5C2E               	subwf	wallAdjust@i^0,w,c
  1952   002CEA  502F               	movf	(wallAdjust@i+1)^0,w,c
  1953   002CEC  0A80               	xorlw	128
  1954   002CEE  6E2B               	movwf	(??_wallAdjust+2)^0,c
  1955   002CF0  502A               	movf	(??_wallAdjust+1)^0,w,c
  1956   002CF2  0A80               	xorlw	128
  1957   002CF4  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  1958   002CF6  A0D8               	btfss	status,0,c
  1959   002CF8  EF80  F016         	goto	u2501
  1960   002CFC  EF82  F016         	goto	u2500
  1961   002D00                     u2501:
  1962   002D00  EF66  F016         	goto	l3811
  1963   002D04                     u2500:
  1964   002D04                     
  1965                           ;dc_motor.c: 518:     }
  1966   002D04  4A30               	infsnz	wallAdjust@cur_power^0,f,c
  1967   002D06  2A31               	incf	(wallAdjust@cur_power+1)^0,f,c
  1968   002D08                     l3817:
  1969   002D08  5027               	movf	wallAdjust@straightSpeed^0,w,c
  1970   002D0A  6E29               	movwf	??_wallAdjust^0,c
  1971   002D0C  6A2A               	clrf	(??_wallAdjust+1)^0,c
  1972   002D0E  5030               	movf	wallAdjust@cur_power^0,w,c
  1973   002D10  5C29               	subwf	??_wallAdjust^0,w,c
  1974   002D12  502A               	movf	(??_wallAdjust+1)^0,w,c
  1975   002D14  0A80               	xorlw	128
  1976   002D16  6E2B               	movwf	(??_wallAdjust+2)^0,c
  1977   002D18  5031               	movf	(wallAdjust@cur_power+1)^0,w,c
  1978   002D1A  0A80               	xorlw	128
  1979   002D1C  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  1980   002D1E  B0D8               	btfsc	status,0,c
  1981   002D20  EF94  F016         	goto	u2511
  1982   002D24  EF96  F016         	goto	u2510
  1983   002D28                     u2511:
  1984   002D28  EF3A  F016         	goto	l3803
  1985   002D2C                     u2510:
  1986   002D2C                     
  1987                           ;dc_motor.c: 520:     for (i=0;i<adjustDuration;i++) {
  1988   002D2C  0E00               	movlw	0
  1989   002D2E  6E2F               	movwf	(wallAdjust@i+1)^0,c
  1990   002D30  0E00               	movlw	0
  1991   002D32  6E2E               	movwf	wallAdjust@i^0,c
  1992   002D34  EFA6  F016         	goto	l696
  1993   002D38                     l3821:
  1994                           
  1995                           ;dc_motor.c: 521:             _delay((unsigned long)((5)*(64000000/4000.0)));
  1996   002D38  0E68               	movlw	104
  1997   002D3A  6E29               	movwf	??_wallAdjust^0,c
  1998   002D3C  0EE4               	movlw	228
  1999   002D3E                     u3347:
  2000   002D3E  2EE8               	decfsz	wreg,f,c
  2001   002D40  D7FE               	bra	u3347
  2002   002D42  2E29               	decfsz	??_wallAdjust^0,f,c
  2003   002D44  D7FC               	bra	u3347
  2004   002D46  D000               	nop2	
  2005   002D48                     
  2006                           ;dc_motor.c: 522:         }
  2007   002D48  4A2E               	infsnz	wallAdjust@i^0,f,c
  2008   002D4A  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2009   002D4C                     l696:
  2010   002D4C  502C               	movf	wallAdjust@adjustDuration^0,w,c
  2011   002D4E  6E29               	movwf	??_wallAdjust^0,c
  2012   002D50  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2013   002D52  5029               	movf	??_wallAdjust^0,w,c
  2014   002D54  5C2E               	subwf	wallAdjust@i^0,w,c
  2015   002D56  502F               	movf	(wallAdjust@i+1)^0,w,c
  2016   002D58  0A80               	xorlw	128
  2017   002D5A  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2018   002D5C  502A               	movf	(??_wallAdjust+1)^0,w,c
  2019   002D5E  0A80               	xorlw	128
  2020   002D60  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2021   002D62  A0D8               	btfss	status,0,c
  2022   002D64  EFB6  F016         	goto	u2521
  2023   002D68  EFB8  F016         	goto	u2520
  2024   002D6C                     u2521:
  2025   002D6C  EF9C  F016         	goto	l3821
  2026   002D70                     u2520:
  2027   002D70                     
  2028                           ;dc_motor.c: 524:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2029   002D70  C027  F030         	movff	wallAdjust@straightSpeed,wallAdjust@cur_power
  2030   002D74  6A31               	clrf	(wallAdjust@cur_power+1)^0,c
  2031   002D76                     l3825:
  2032   002D76  BE31               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2033   002D78  EFC2  F016         	goto	u2530
  2034   002D7C  EFC0  F016         	goto	u2531
  2035   002D80                     u2531:
  2036   002D80  EFC4  F016         	goto	l3829
  2037   002D84                     u2530:
  2038   002D84  EF11  F017         	goto	l3845
  2039   002D88                     l3829:
  2040                           
  2041                           ;dc_motor.c: 525:         mL->power = cur_power+mL->compensation;
  2042   002D88  EE20 F009          	lfsr	2,9
  2043   002D8C  5023               	movf	wallAdjust@mL^0,w,c
  2044   002D8E  26D9               	addwf	fsr2l,f,c
  2045   002D90  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2046   002D92  22DA               	addwfc	fsr2h,f,c
  2047   002D94  50DF               	movf	indf2,w,c
  2048   002D96  2430               	addwf	wallAdjust@cur_power^0,w,c
  2049   002D98  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2050   002D9C  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2051   002DA0  6EDF               	movwf	indf2,c
  2052                           
  2053                           ;dc_motor.c: 526:         mR->power = cur_power+mR->compensation;
  2054   002DA2  EE20 F009          	lfsr	2,9
  2055   002DA6  5025               	movf	wallAdjust@mR^0,w,c
  2056   002DA8  26D9               	addwf	fsr2l,f,c
  2057   002DAA  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2058   002DAC  22DA               	addwfc	fsr2h,f,c
  2059   002DAE  50DF               	movf	indf2,w,c
  2060   002DB0  2430               	addwf	wallAdjust@cur_power^0,w,c
  2061   002DB2  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2062   002DB6  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2063   002DBA  6EDF               	movwf	indf2,c
  2064   002DBC                     
  2065                           ;dc_motor.c: 527:         setMotorPWM(mL);
  2066   002DBC  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2067   002DC0  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2068   002DC4  EC13  F01E         	call	_setMotorPWM	;wreg free
  2069   002DC8                     
  2070                           ;dc_motor.c: 528:         setMotorPWM(mR);
  2071   002DC8  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2072   002DCC  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2073   002DD0  EC13  F01E         	call	_setMotorPWM	;wreg free
  2074   002DD4                     
  2075                           ;dc_motor.c: 529:         for (i=0;i<straightRamp;i++) {
  2076   002DD4  0E00               	movlw	0
  2077   002DD6  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2078   002DD8  0E00               	movlw	0
  2079   002DDA  6E2E               	movwf	wallAdjust@i^0,c
  2080   002DDC  EFFA  F016         	goto	l701
  2081   002DE0                     l3837:
  2082                           
  2083                           ;dc_motor.c: 530:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2084   002DE0  0E68               	movlw	104
  2085   002DE2  6E29               	movwf	??_wallAdjust^0,c
  2086   002DE4  0EE4               	movlw	228
  2087   002DE6                     u3357:
  2088   002DE6  2EE8               	decfsz	wreg,f,c
  2089   002DE8  D7FE               	bra	u3357
  2090   002DEA  2E29               	decfsz	??_wallAdjust^0,f,c
  2091   002DEC  D7FC               	bra	u3357
  2092   002DEE  D000               	nop2	
  2093   002DF0                     
  2094                           ;dc_motor.c: 531:         }
  2095   002DF0  4A2E               	infsnz	wallAdjust@i^0,f,c
  2096   002DF2  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2097   002DF4                     l701:
  2098   002DF4  5028               	movf	wallAdjust@straightRamp^0,w,c
  2099   002DF6  6E29               	movwf	??_wallAdjust^0,c
  2100   002DF8  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2101   002DFA  5029               	movf	??_wallAdjust^0,w,c
  2102   002DFC  5C2E               	subwf	wallAdjust@i^0,w,c
  2103   002DFE  502F               	movf	(wallAdjust@i+1)^0,w,c
  2104   002E00  0A80               	xorlw	128
  2105   002E02  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2106   002E04  502A               	movf	(??_wallAdjust+1)^0,w,c
  2107   002E06  0A80               	xorlw	128
  2108   002E08  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2109   002E0A  A0D8               	btfss	status,0,c
  2110   002E0C  EF0A  F017         	goto	u2541
  2111   002E10  EF0C  F017         	goto	u2540
  2112   002E14                     u2541:
  2113   002E14  EFF0  F016         	goto	l3837
  2114   002E18                     u2540:
  2115   002E18                     
  2116                           ;dc_motor.c: 532:     }
  2117   002E18  0630               	decf	wallAdjust@cur_power^0,f,c
  2118   002E1A  A0D8               	btfss	status,0,c
  2119   002E1C  0631               	decf	(wallAdjust@cur_power+1)^0,f,c
  2120   002E1E  EFBB  F016         	goto	l3825
  2121   002E22                     l3845:
  2122                           
  2123                           ;dc_motor.c: 534:     mL->direction = 0;
  2124   002E22  EE20 F001          	lfsr	2,1
  2125   002E26  5023               	movf	wallAdjust@mL^0,w,c
  2126   002E28  26D9               	addwf	fsr2l,f,c
  2127   002E2A  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2128   002E2C  22DA               	addwfc	fsr2h,f,c
  2129   002E2E  6ADF               	clrf	indf2,c
  2130                           
  2131                           ;dc_motor.c: 535:     mR->direction = 0;
  2132   002E30  EE20 F001          	lfsr	2,1
  2133   002E34  5025               	movf	wallAdjust@mR^0,w,c
  2134   002E36  26D9               	addwf	fsr2l,f,c
  2135   002E38  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2136   002E3A  22DA               	addwfc	fsr2h,f,c
  2137   002E3C  6ADF               	clrf	indf2,c
  2138   002E3E                     
  2139                           ;dc_motor.c: 536:     for (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  2140   002E3E  0E00               	movlw	0
  2141   002E40  6E31               	movwf	(wallAdjust@cur_power+1)^0,c
  2142   002E42  0E01               	movlw	1
  2143   002E44  6E30               	movwf	wallAdjust@cur_power^0,c
  2144   002E46  EF6F  F017         	goto	l3863
  2145   002E4A                     l3849:
  2146                           
  2147                           ;dc_motor.c: 537:         mL->power = cur_power+mL->compensation;
  2148   002E4A  EE20 F009          	lfsr	2,9
  2149   002E4E  5023               	movf	wallAdjust@mL^0,w,c
  2150   002E50  26D9               	addwf	fsr2l,f,c
  2151   002E52  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2152   002E54  22DA               	addwfc	fsr2h,f,c
  2153   002E56  50DF               	movf	indf2,w,c
  2154   002E58  2430               	addwf	wallAdjust@cur_power^0,w,c
  2155   002E5A  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2156   002E5E  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2157   002E62  6EDF               	movwf	indf2,c
  2158                           
  2159                           ;dc_motor.c: 538:         mR->power = cur_power+mR->compensation;
  2160   002E64  EE20 F009          	lfsr	2,9
  2161   002E68  5025               	movf	wallAdjust@mR^0,w,c
  2162   002E6A  26D9               	addwf	fsr2l,f,c
  2163   002E6C  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2164   002E6E  22DA               	addwfc	fsr2h,f,c
  2165   002E70  50DF               	movf	indf2,w,c
  2166   002E72  2430               	addwf	wallAdjust@cur_power^0,w,c
  2167   002E74  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2168   002E78  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2169   002E7C  6EDF               	movwf	indf2,c
  2170   002E7E                     
  2171                           ;dc_motor.c: 539:         setMotorPWM(mL);
  2172   002E7E  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2173   002E82  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2174   002E86  EC13  F01E         	call	_setMotorPWM	;wreg free
  2175   002E8A                     
  2176                           ;dc_motor.c: 540:         setMotorPWM(mR);
  2177   002E8A  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2178   002E8E  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2179   002E92  EC13  F01E         	call	_setMotorPWM	;wreg free
  2180   002E96                     
  2181                           ;dc_motor.c: 541:         for (i=0;i<straightRamp;i++) {
  2182   002E96  0E00               	movlw	0
  2183   002E98  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2184   002E9A  0E00               	movlw	0
  2185   002E9C  6E2E               	movwf	wallAdjust@i^0,c
  2186   002E9E  EF5B  F017         	goto	l706
  2187   002EA2                     l3857:
  2188                           
  2189                           ;dc_motor.c: 542:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2190   002EA2  0E68               	movlw	104
  2191   002EA4  6E29               	movwf	??_wallAdjust^0,c
  2192   002EA6  0EE4               	movlw	228
  2193   002EA8                     u3367:
  2194   002EA8  2EE8               	decfsz	wreg,f,c
  2195   002EAA  D7FE               	bra	u3367
  2196   002EAC  2E29               	decfsz	??_wallAdjust^0,f,c
  2197   002EAE  D7FC               	bra	u3367
  2198   002EB0  D000               	nop2	
  2199   002EB2                     
  2200                           ;dc_motor.c: 543:         }
  2201   002EB2  4A2E               	infsnz	wallAdjust@i^0,f,c
  2202   002EB4  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2203   002EB6                     l706:
  2204   002EB6  5028               	movf	wallAdjust@straightRamp^0,w,c
  2205   002EB8  6E29               	movwf	??_wallAdjust^0,c
  2206   002EBA  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2207   002EBC  5029               	movf	??_wallAdjust^0,w,c
  2208   002EBE  5C2E               	subwf	wallAdjust@i^0,w,c
  2209   002EC0  502F               	movf	(wallAdjust@i+1)^0,w,c
  2210   002EC2  0A80               	xorlw	128
  2211   002EC4  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2212   002EC6  502A               	movf	(??_wallAdjust+1)^0,w,c
  2213   002EC8  0A80               	xorlw	128
  2214   002ECA  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2215   002ECC  A0D8               	btfss	status,0,c
  2216   002ECE  EF6B  F017         	goto	u2551
  2217   002ED2  EF6D  F017         	goto	u2550
  2218   002ED6                     u2551:
  2219   002ED6  EF51  F017         	goto	l3857
  2220   002EDA                     u2550:
  2221   002EDA                     
  2222                           ;dc_motor.c: 544:     }
  2223   002EDA  4A30               	infsnz	wallAdjust@cur_power^0,f,c
  2224   002EDC  2A31               	incf	(wallAdjust@cur_power+1)^0,f,c
  2225   002EDE                     l3863:
  2226   002EDE  5027               	movf	wallAdjust@straightSpeed^0,w,c
  2227   002EE0  6E29               	movwf	??_wallAdjust^0,c
  2228   002EE2  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2229   002EE4  5030               	movf	wallAdjust@cur_power^0,w,c
  2230   002EE6  5C29               	subwf	??_wallAdjust^0,w,c
  2231   002EE8  502A               	movf	(??_wallAdjust+1)^0,w,c
  2232   002EEA  0A80               	xorlw	128
  2233   002EEC  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2234   002EEE  5031               	movf	(wallAdjust@cur_power+1)^0,w,c
  2235   002EF0  0A80               	xorlw	128
  2236   002EF2  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2237   002EF4  B0D8               	btfsc	status,0,c
  2238   002EF6  EF7F  F017         	goto	u2561
  2239   002EFA  EF81  F017         	goto	u2560
  2240   002EFE                     u2561:
  2241   002EFE  EF25  F017         	goto	l3849
  2242   002F02                     u2560:
  2243   002F02                     
  2244                           ;dc_motor.c: 546:     for (i=0;i<wallReverseDuration;i++) {
  2245   002F02  0E00               	movlw	0
  2246   002F04  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2247   002F06  0E00               	movlw	0
  2248   002F08  6E2E               	movwf	wallAdjust@i^0,c
  2249   002F0A  EF91  F017         	goto	l710
  2250   002F0E                     l3867:
  2251                           
  2252                           ;dc_motor.c: 547:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2253   002F0E  0E68               	movlw	104
  2254   002F10  6E29               	movwf	??_wallAdjust^0,c
  2255   002F12  0EE4               	movlw	228
  2256   002F14                     u3377:
  2257   002F14  2EE8               	decfsz	wreg,f,c
  2258   002F16  D7FE               	bra	u3377
  2259   002F18  2E29               	decfsz	??_wallAdjust^0,f,c
  2260   002F1A  D7FC               	bra	u3377
  2261   002F1C  D000               	nop2	
  2262   002F1E                     
  2263                           ;dc_motor.c: 548:         }
  2264   002F1E  4A2E               	infsnz	wallAdjust@i^0,f,c
  2265   002F20  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2266   002F22                     l710:
  2267   002F22  502D               	movf	wallAdjust@wallReverseDuration^0,w,c
  2268   002F24  6E29               	movwf	??_wallAdjust^0,c
  2269   002F26  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2270   002F28  5029               	movf	??_wallAdjust^0,w,c
  2271   002F2A  5C2E               	subwf	wallAdjust@i^0,w,c
  2272   002F2C  502F               	movf	(wallAdjust@i+1)^0,w,c
  2273   002F2E  0A80               	xorlw	128
  2274   002F30  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2275   002F32  502A               	movf	(??_wallAdjust+1)^0,w,c
  2276   002F34  0A80               	xorlw	128
  2277   002F36  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2278   002F38  A0D8               	btfss	status,0,c
  2279   002F3A  EFA1  F017         	goto	u2571
  2280   002F3E  EFA3  F017         	goto	u2570
  2281   002F42                     u2571:
  2282   002F42  EF87  F017         	goto	l3867
  2283   002F46                     u2570:
  2284   002F46                     
  2285                           ;dc_motor.c: 550:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  2286   002F46  C027  F030         	movff	wallAdjust@straightSpeed,wallAdjust@cur_power
  2287   002F4A  6A31               	clrf	(wallAdjust@cur_power+1)^0,c
  2288   002F4C                     l3871:
  2289   002F4C  BE31               	btfsc	(wallAdjust@cur_power+1)^0,7,c
  2290   002F4E  EFAD  F017         	goto	u2580
  2291   002F52  EFAB  F017         	goto	u2581
  2292   002F56                     u2581:
  2293   002F56  EFAF  F017         	goto	l3875
  2294   002F5A                     u2580:
  2295   002F5A  EFFC  F017         	goto	l3891
  2296   002F5E                     l3875:
  2297                           
  2298                           ;dc_motor.c: 551:         mL->power = cur_power+mL->compensation;
  2299   002F5E  EE20 F009          	lfsr	2,9
  2300   002F62  5023               	movf	wallAdjust@mL^0,w,c
  2301   002F64  26D9               	addwf	fsr2l,f,c
  2302   002F66  5024               	movf	(wallAdjust@mL+1)^0,w,c
  2303   002F68  22DA               	addwfc	fsr2h,f,c
  2304   002F6A  50DF               	movf	indf2,w,c
  2305   002F6C  2430               	addwf	wallAdjust@cur_power^0,w,c
  2306   002F6E  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2307   002F72  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2308   002F76  6EDF               	movwf	indf2,c
  2309                           
  2310                           ;dc_motor.c: 552:         mR->power = cur_power+mR->compensation;
  2311   002F78  EE20 F009          	lfsr	2,9
  2312   002F7C  5025               	movf	wallAdjust@mR^0,w,c
  2313   002F7E  26D9               	addwf	fsr2l,f,c
  2314   002F80  5026               	movf	(wallAdjust@mR+1)^0,w,c
  2315   002F82  22DA               	addwfc	fsr2h,f,c
  2316   002F84  50DF               	movf	indf2,w,c
  2317   002F86  2430               	addwf	wallAdjust@cur_power^0,w,c
  2318   002F88  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2319   002F8C  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2320   002F90  6EDF               	movwf	indf2,c
  2321   002F92                     
  2322                           ;dc_motor.c: 553:         setMotorPWM(mL);
  2323   002F92  C023  F01D         	movff	wallAdjust@mL,setMotorPWM@m
  2324   002F96  C024  F01E         	movff	wallAdjust@mL+1,setMotorPWM@m+1
  2325   002F9A  EC13  F01E         	call	_setMotorPWM	;wreg free
  2326   002F9E                     
  2327                           ;dc_motor.c: 554:         setMotorPWM(mR);
  2328   002F9E  C025  F01D         	movff	wallAdjust@mR,setMotorPWM@m
  2329   002FA2  C026  F01E         	movff	wallAdjust@mR+1,setMotorPWM@m+1
  2330   002FA6  EC13  F01E         	call	_setMotorPWM	;wreg free
  2331   002FAA                     
  2332                           ;dc_motor.c: 555:         for (i=0;i<straightRamp;i++) {
  2333   002FAA  0E00               	movlw	0
  2334   002FAC  6E2F               	movwf	(wallAdjust@i+1)^0,c
  2335   002FAE  0E00               	movlw	0
  2336   002FB0  6E2E               	movwf	wallAdjust@i^0,c
  2337   002FB2  EFE5  F017         	goto	l715
  2338   002FB6                     l3883:
  2339                           
  2340                           ;dc_motor.c: 556:             _delay((unsigned long)((5)*(64000000/4000.0)));
  2341   002FB6  0E68               	movlw	104
  2342   002FB8  6E29               	movwf	??_wallAdjust^0,c
  2343   002FBA  0EE4               	movlw	228
  2344   002FBC                     u3387:
  2345   002FBC  2EE8               	decfsz	wreg,f,c
  2346   002FBE  D7FE               	bra	u3387
  2347   002FC0  2E29               	decfsz	??_wallAdjust^0,f,c
  2348   002FC2  D7FC               	bra	u3387
  2349   002FC4  D000               	nop2	
  2350   002FC6                     
  2351                           ;dc_motor.c: 557:         }
  2352   002FC6  4A2E               	infsnz	wallAdjust@i^0,f,c
  2353   002FC8  2A2F               	incf	(wallAdjust@i+1)^0,f,c
  2354   002FCA                     l715:
  2355   002FCA  5028               	movf	wallAdjust@straightRamp^0,w,c
  2356   002FCC  6E29               	movwf	??_wallAdjust^0,c
  2357   002FCE  6A2A               	clrf	(??_wallAdjust+1)^0,c
  2358   002FD0  5029               	movf	??_wallAdjust^0,w,c
  2359   002FD2  5C2E               	subwf	wallAdjust@i^0,w,c
  2360   002FD4  502F               	movf	(wallAdjust@i+1)^0,w,c
  2361   002FD6  0A80               	xorlw	128
  2362   002FD8  6E2B               	movwf	(??_wallAdjust+2)^0,c
  2363   002FDA  502A               	movf	(??_wallAdjust+1)^0,w,c
  2364   002FDC  0A80               	xorlw	128
  2365   002FDE  582B               	subwfb	(??_wallAdjust+2)^0,w,c
  2366   002FE0  A0D8               	btfss	status,0,c
  2367   002FE2  EFF5  F017         	goto	u2591
  2368   002FE6  EFF7  F017         	goto	u2590
  2369   002FEA                     u2591:
  2370   002FEA  EFDB  F017         	goto	l3883
  2371   002FEE                     u2590:
  2372   002FEE                     
  2373                           ;dc_motor.c: 558:     }
  2374   002FEE  0630               	decf	wallAdjust@cur_power^0,f,c
  2375   002FF0  A0D8               	btfss	status,0,c
  2376   002FF2  0631               	decf	(wallAdjust@cur_power+1)^0,f,c
  2377   002FF4  EFA6  F017         	goto	l3871
  2378   002FF8                     l3891:
  2379                           
  2380                           ;dc_motor.c: 559:     mL->power = 0;
  2381   002FF8  C023  FFD9         	movff	wallAdjust@mL,fsr2l
  2382   002FFC  C024  FFDA         	movff	wallAdjust@mL+1,fsr2h
  2383   003000  6ADF               	clrf	indf2,c
  2384                           
  2385                           ;dc_motor.c: 560:     mR->power = 0;
  2386   003002  C025  FFD9         	movff	wallAdjust@mR,fsr2l
  2387   003006  C026  FFDA         	movff	wallAdjust@mR+1,fsr2h
  2388   00300A  6ADF               	clrf	indf2,c
  2389   00300C  0012               	return		;funcret
  2390   00300E                     __end_of_wallAdjust:
  2391                           	callstack 0
  2392                           
  2393 ;; *************** function _rgb_2_hsv *****************
  2394 ;; Defined at:
  2395 ;;		line 279 in file "color.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  RGBC            8   41[COMRAM] struct RGBC_val
  2398 ;;  HSV             2   49[COMRAM] PTR struct HSV_val
  2399 ;;		 -> main@HSV(6), 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  diff            4   14[BANK0 ] unsigned long 
  2402 ;;  b               2   20[BANK0 ] unsigned int 
  2403 ;;  g               2   18[BANK0 ] unsigned int 
  2404 ;;  cmax            2   12[BANK0 ] unsigned int 
  2405 ;;  r               2   10[BANK0 ] unsigned int 
  2406 ;;  cmin            2    4[BANK0 ] unsigned int 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2416 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2419 ;;      Totals:        22      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2420 ;;Total ram usage:       44 bytes
  2421 ;; Hardware stack levels used: 1
  2422 ;; Hardware stack levels required when called: 6
  2423 ;; This function calls:
  2424 ;;		___aldiv
  2425 ;;		___lldiv
  2426 ;;		___lmul
  2427 ;;		_max
  2428 ;;		_min
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;;		_color_calibration
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text3
  2436   00238C                     __ptext3:
  2437                           	callstack 0
  2438   00238C                     _rgb_2_hsv:
  2439                           	callstack 24
  2440   00238C                     
  2441                           ;color.c: 282:     unsigned int r = (unsigned int)(RGBC.R*10000L/255);
  2442   00238C  C02A  F010         	movff	rgb_2_hsv@RGBC,___lmul@multiplier
  2443   002390  C02B  F011         	movff	rgb_2_hsv@RGBC+1,___lmul@multiplier+1
  2444   002394  6A12               	clrf	(___lmul@multiplier+2)^0,c
  2445   002396  6A13               	clrf	(___lmul@multiplier+3)^0,c
  2446   002398  0E10               	movlw	16
  2447   00239A  6E14               	movwf	___lmul@multiplicand^0,c
  2448   00239C  0E27               	movlw	39
  2449   00239E  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2450   0023A0  0E00               	movlw	0
  2451   0023A2  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2452   0023A4  0E00               	movlw	0
  2453   0023A6  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2454   0023A8  EC5C  F022         	call	___lmul	;wreg free
  2455   0023AC  C010  F01C         	movff	?___lmul,___aldiv@dividend
  2456   0023B0  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  2457   0023B4  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  2458   0023B8  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  2459   0023BC  0EFF               	movlw	255
  2460   0023BE  6E20               	movwf	___aldiv@divisor^0,c
  2461   0023C0  0E00               	movlw	0
  2462   0023C2  6E21               	movwf	(___aldiv@divisor+1)^0,c
  2463   0023C4  0E00               	movlw	0
  2464   0023C6  6E22               	movwf	(___aldiv@divisor+2)^0,c
  2465   0023C8  0E00               	movlw	0
  2466   0023CA  6E23               	movwf	(___aldiv@divisor+3)^0,c
  2467   0023CC  ECC9  F01E         	call	___aldiv	;wreg free
  2468   0023D0  C01C  F0E2         	movff	?___aldiv,rgb_2_hsv@r
  2469   0023D4  C01D  F0E3         	movff	?___aldiv+1,rgb_2_hsv@r+1
  2470                           
  2471                           ;color.c: 283:     unsigned int g = (unsigned int)(RGBC.G*10000L/255);
  2472   0023D8  C02C  F010         	movff	rgb_2_hsv@RGBC+2,___lmul@multiplier
  2473   0023DC  C02D  F011         	movff	rgb_2_hsv@RGBC+3,___lmul@multiplier+1
  2474   0023E0  6A12               	clrf	(___lmul@multiplier+2)^0,c
  2475   0023E2  6A13               	clrf	(___lmul@multiplier+3)^0,c
  2476   0023E4  0E10               	movlw	16
  2477   0023E6  6E14               	movwf	___lmul@multiplicand^0,c
  2478   0023E8  0E27               	movlw	39
  2479   0023EA  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2480   0023EC  0E00               	movlw	0
  2481   0023EE  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2482   0023F0  0E00               	movlw	0
  2483   0023F2  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2484   0023F4  EC5C  F022         	call	___lmul	;wreg free
  2485   0023F8  C010  F01C         	movff	?___lmul,___aldiv@dividend
  2486   0023FC  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  2487   002400  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  2488   002404  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  2489   002408  0EFF               	movlw	255
  2490   00240A  6E20               	movwf	___aldiv@divisor^0,c
  2491   00240C  0E00               	movlw	0
  2492   00240E  6E21               	movwf	(___aldiv@divisor+1)^0,c
  2493   002410  0E00               	movlw	0
  2494   002412  6E22               	movwf	(___aldiv@divisor+2)^0,c
  2495   002414  0E00               	movlw	0
  2496   002416  6E23               	movwf	(___aldiv@divisor+3)^0,c
  2497   002418  ECC9  F01E         	call	___aldiv	;wreg free
  2498   00241C  C01C  F0EA         	movff	?___aldiv,rgb_2_hsv@g
  2499   002420  C01D  F0EB         	movff	?___aldiv+1,rgb_2_hsv@g+1
  2500                           
  2501                           ;color.c: 284:     unsigned int b = (unsigned int)(RGBC.B*10000L/255);
  2502   002424  C02E  F010         	movff	rgb_2_hsv@RGBC+4,___lmul@multiplier
  2503   002428  C02F  F011         	movff	rgb_2_hsv@RGBC+5,___lmul@multiplier+1
  2504   00242C  6A12               	clrf	(___lmul@multiplier+2)^0,c
  2505   00242E  6A13               	clrf	(___lmul@multiplier+3)^0,c
  2506   002430  0E10               	movlw	16
  2507   002432  6E14               	movwf	___lmul@multiplicand^0,c
  2508   002434  0E27               	movlw	39
  2509   002436  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2510   002438  0E00               	movlw	0
  2511   00243A  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2512   00243C  0E00               	movlw	0
  2513   00243E  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2514   002440  EC5C  F022         	call	___lmul	;wreg free
  2515   002444  C010  F01C         	movff	?___lmul,___aldiv@dividend
  2516   002448  C011  F01D         	movff	?___lmul+1,___aldiv@dividend+1
  2517   00244C  C012  F01E         	movff	?___lmul+2,___aldiv@dividend+2
  2518   002450  C013  F01F         	movff	?___lmul+3,___aldiv@dividend+3
  2519   002454  0EFF               	movlw	255
  2520   002456  6E20               	movwf	___aldiv@divisor^0,c
  2521   002458  0E00               	movlw	0
  2522   00245A  6E21               	movwf	(___aldiv@divisor+1)^0,c
  2523   00245C  0E00               	movlw	0
  2524   00245E  6E22               	movwf	(___aldiv@divisor+2)^0,c
  2525   002460  0E00               	movlw	0
  2526   002462  6E23               	movwf	(___aldiv@divisor+3)^0,c
  2527   002464  ECC9  F01E         	call	___aldiv	;wreg free
  2528   002468  C01C  F0EC         	movff	?___aldiv,rgb_2_hsv@b
  2529   00246C  C01D  F0ED         	movff	?___aldiv+1,rgb_2_hsv@b+1
  2530                           
  2531                           ;color.c: 287:     unsigned int cmax = max(r, max(g, b));
  2532   002470  C0EA  F010         	movff	rgb_2_hsv@g,max@a
  2533   002474  C0EB  F011         	movff	rgb_2_hsv@g+1,max@a+1
  2534   002478  C0EC  F012         	movff	rgb_2_hsv@b,max@b
  2535   00247C  C0ED  F013         	movff	rgb_2_hsv@b+1,max@b+1
  2536   002480  EC4E  F023         	call	_max	;wreg free
  2537   002484  C010  F0DE         	movff	?_max,_rgb_2_hsv$3604
  2538   002488  C011  F0DF         	movff	?_max+1,_rgb_2_hsv$3604+1
  2539                           
  2540                           ;color.c: 287:     unsigned int cmax = max(r, max(g, b));
  2541   00248C  C0E2  F010         	movff	rgb_2_hsv@r,max@a
  2542   002490  C0E3  F011         	movff	rgb_2_hsv@r+1,max@a+1
  2543   002494  C0DE  F012         	movff	_rgb_2_hsv$3604,max@b
  2544   002498  C0DF  F013         	movff	_rgb_2_hsv$3604+1,max@b+1
  2545   00249C  EC4E  F023         	call	_max	;wreg free
  2546   0024A0  C010  F0E4         	movff	?_max,rgb_2_hsv@cmax
  2547   0024A4  C011  F0E5         	movff	?_max+1,rgb_2_hsv@cmax+1
  2548                           
  2549                           ;color.c: 288:     unsigned int cmin = min(r, min(g, b));
  2550   0024A8  C0EA  F010         	movff	rgb_2_hsv@g,min@a
  2551   0024AC  C0EB  F011         	movff	rgb_2_hsv@g+1,min@a+1
  2552   0024B0  C0EC  F012         	movff	rgb_2_hsv@b,min@b
  2553   0024B4  C0ED  F013         	movff	rgb_2_hsv@b+1,min@b+1
  2554   0024B8  EC38  F023         	call	_min	;wreg free
  2555   0024BC  C010  F0E0         	movff	?_min,_rgb_2_hsv$3605
  2556   0024C0  C011  F0E1         	movff	?_min+1,_rgb_2_hsv$3605+1
  2557                           
  2558                           ;color.c: 288:     unsigned int cmin = min(r, min(g, b));
  2559   0024C4  C0E2  F010         	movff	rgb_2_hsv@r,min@a
  2560   0024C8  C0E3  F011         	movff	rgb_2_hsv@r+1,min@a+1
  2561   0024CC  C0E0  F012         	movff	_rgb_2_hsv$3605,min@b
  2562   0024D0  C0E1  F013         	movff	_rgb_2_hsv$3605+1,min@b+1
  2563   0024D4  EC38  F023         	call	_min	;wreg free
  2564   0024D8  C010  F0DC         	movff	?_min,rgb_2_hsv@cmin
  2565   0024DC  C011  F0DD         	movff	?_min+1,rgb_2_hsv@cmin+1
  2566   0024E0                     
  2567                           ;color.c: 289:     unsigned long diff = cmax - cmin;
  2568   0024E0  0100               	movlb	0	; () banked
  2569   0024E2  51DC               	movf	rgb_2_hsv@cmin& (0+255),w,b
  2570   0024E4  5DE4               	subwf	rgb_2_hsv@cmax& (0+255),w,b
  2571   0024E6  6E34               	movwf	??_rgb_2_hsv^0,c
  2572   0024E8  51DD               	movf	(rgb_2_hsv@cmin+1)& (0+255),w,b
  2573   0024EA  59E5               	subwfb	(rgb_2_hsv@cmax+1)& (0+255),w,b
  2574   0024EC  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  2575   0024EE  C034  F0E6         	movff	??_rgb_2_hsv,rgb_2_hsv@diff
  2576   0024F2  C035  F0E7         	movff	??_rgb_2_hsv+1,rgb_2_hsv@diff+1
  2577   0024F6  6BE8               	clrf	(rgb_2_hsv@diff+2)& (0+255),b
  2578   0024F8  6BE9               	clrf	(rgb_2_hsv@diff+3)& (0+255),b
  2579   0024FA                     
  2580                           ; BSR set to: 0
  2581                           ;color.c: 292:     if (cmax == r){
  2582   0024FA  51E2               	movf	rgb_2_hsv@r& (0+255),w,b
  2583   0024FC  19E4               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  2584   0024FE  E107               	bnz	u2601
  2585   002500  51E3               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  2586   002502  19E5               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  2587   002504  A4D8               	btfss	status,2,c
  2588   002506  EF87  F012         	goto	u2601
  2589   00250A  EF89  F012         	goto	u2600
  2590   00250E                     u2601:
  2591   00250E  EF30  F013         	goto	l3909
  2592   002512                     u2600:
  2593   002512                     
  2594                           ; BSR set to: 0
  2595                           ;color.c: 293:         if (g > b){HSV->H = (unsigned int)((g-b)*6000L/diff);}
  2596   002512  51EA               	movf	rgb_2_hsv@g& (0+255),w,b
  2597   002514  5DEC               	subwf	rgb_2_hsv@b& (0+255),w,b
  2598   002516  51EB               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  2599   002518  59ED               	subwfb	(rgb_2_hsv@b+1)& (0+255),w,b
  2600   00251A  B0D8               	btfsc	status,0,c
  2601   00251C  EF92  F012         	goto	u2611
  2602   002520  EF94  F012         	goto	u2610
  2603   002524                     u2611:
  2604   002524  EFC6  F012         	goto	l3903
  2605   002528                     u2610:
  2606   002528                     
  2607                           ; BSR set to: 0
  2608   002528  51EC               	movf	rgb_2_hsv@b& (0+255),w,b
  2609   00252A  5DEA               	subwf	rgb_2_hsv@g& (0+255),w,b
  2610   00252C  6E34               	movwf	??_rgb_2_hsv^0,c
  2611   00252E  51ED               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  2612   002530  59EB               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  2613   002532  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  2614   002534  C034  F010         	movff	??_rgb_2_hsv,___lmul@multiplier
  2615   002538  C035  F011         	movff	??_rgb_2_hsv+1,___lmul@multiplier+1
  2616   00253C  6A12               	clrf	(___lmul@multiplier+2)^0,c
  2617   00253E  6A13               	clrf	(___lmul@multiplier+3)^0,c
  2618   002540  0E70               	movlw	112
  2619   002542  6E14               	movwf	___lmul@multiplicand^0,c
  2620   002544  0E17               	movlw	23
  2621   002546  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2622   002548  0E00               	movlw	0
  2623   00254A  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2624   00254C  0E00               	movlw	0
  2625   00254E  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2626   002550  EC5C  F022         	call	___lmul	;wreg free
  2627   002554  C010  F01C         	movff	?___lmul,___lldiv@dividend
  2628   002558  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  2629   00255C  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  2630   002560  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  2631   002564  C0E6  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  2632   002568  C0E7  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  2633   00256C  C0E8  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  2634   002570  C0E9  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  2635   002574  EC4E  F021         	call	___lldiv	;wreg free
  2636   002578  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  2637   00257C  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  2638   002580  C01C  FFDE         	movff	?___lldiv,postinc2
  2639   002584  C01D  FFDD         	movff	?___lldiv+1,postdec2
  2640   002588  EFE8  F013         	goto	l220
  2641   00258C                     l3903:
  2642                           
  2643                           ; BSR set to: 0
  2644   00258C  51EC               	movf	rgb_2_hsv@b& (0+255),w,b
  2645   00258E  5DEA               	subwf	rgb_2_hsv@g& (0+255),w,b
  2646   002590  51ED               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  2647   002592  59EB               	subwfb	(rgb_2_hsv@g+1)& (0+255),w,b
  2648   002594  B0D8               	btfsc	status,0,c
  2649   002596  EFCF  F012         	goto	u2621
  2650   00259A  EFD1  F012         	goto	u2620
  2651   00259E                     u2621:
  2652   00259E  EFE8  F013         	goto	l220
  2653   0025A2                     u2620:
  2654   0025A2                     
  2655                           ; BSR set to: 0
  2656   0025A2  51EC               	movf	rgb_2_hsv@b& (0+255),w,b
  2657   0025A4  6E34               	movwf	??_rgb_2_hsv^0,c
  2658   0025A6  51ED               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  2659   0025A8  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  2660   0025AA  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  2661   0025AC  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  2662   0025AE  C0E6  F010         	movff	rgb_2_hsv@diff,___lmul@multiplier
  2663   0025B2  C0E7  F011         	movff	rgb_2_hsv@diff+1,___lmul@multiplier+1
  2664   0025B6  C0E8  F012         	movff	rgb_2_hsv@diff+2,___lmul@multiplier+2
  2665   0025BA  C0E9  F013         	movff	rgb_2_hsv@diff+3,___lmul@multiplier+3
  2666   0025BE  0E06               	movlw	6
  2667   0025C0  6E14               	movwf	___lmul@multiplicand^0,c
  2668   0025C2  0E00               	movlw	0
  2669   0025C4  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2670   0025C6  0E00               	movlw	0
  2671   0025C8  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2672   0025CA  0E00               	movlw	0
  2673   0025CC  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2674   0025CE  EC5C  F022         	call	___lmul	;wreg free
  2675   0025D2  0100               	movlb	0	; () banked
  2676   0025D4  51EA               	movf	rgb_2_hsv@g& (0+255),w,b
  2677   0025D6  2410               	addwf	?___lmul^0,w,c
  2678   0025D8  6E38               	movwf	(??_rgb_2_hsv+4)^0,c
  2679   0025DA  51EB               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  2680   0025DC  2011               	addwfc	(?___lmul+1)^0,w,c
  2681   0025DE  6E39               	movwf	(??_rgb_2_hsv+5)^0,c
  2682   0025E0  0E00               	movlw	0
  2683   0025E2  2012               	addwfc	(?___lmul+2)^0,w,c
  2684   0025E4  6E3A               	movwf	(??_rgb_2_hsv+6)^0,c
  2685   0025E6  0E00               	movlw	0
  2686   0025E8  2013               	addwfc	(?___lmul+3)^0,w,c
  2687   0025EA  6E3B               	movwf	(??_rgb_2_hsv+7)^0,c
  2688   0025EC  5034               	movf	??_rgb_2_hsv^0,w,c
  2689   0025EE  5C38               	subwf	(??_rgb_2_hsv+4)^0,w,c
  2690   0025F0  6FD8               	movwf	_rgb_2_hsv$3606& (0+255),b
  2691   0025F2  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  2692   0025F4  5839               	subwfb	(??_rgb_2_hsv+5)^0,w,c
  2693   0025F6  6FD9               	movwf	(_rgb_2_hsv$3606+1)& (0+255),b
  2694   0025F8  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  2695   0025FA  583A               	subwfb	(??_rgb_2_hsv+6)^0,w,c
  2696   0025FC  6FDA               	movwf	(_rgb_2_hsv$3606+2)& (0+255),b
  2697   0025FE  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  2698   002600  583B               	subwfb	(??_rgb_2_hsv+7)^0,w,c
  2699   002602  6FDB               	movwf	(_rgb_2_hsv$3606+3)& (0+255),b
  2700   002604                     
  2701                           ; BSR set to: 0
  2702   002604  C0D8  F010         	movff	_rgb_2_hsv$3606,___lmul@multiplier
  2703   002608  C0D9  F011         	movff	_rgb_2_hsv$3606+1,___lmul@multiplier+1
  2704   00260C  C0DA  F012         	movff	_rgb_2_hsv$3606+2,___lmul@multiplier+2
  2705   002610  C0DB  F013         	movff	_rgb_2_hsv$3606+3,___lmul@multiplier+3
  2706   002614  0E70               	movlw	112
  2707   002616  6E14               	movwf	___lmul@multiplicand^0,c
  2708   002618  0E17               	movlw	23
  2709   00261A  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2710   00261C  0E00               	movlw	0
  2711   00261E  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2712   002620  0E00               	movlw	0
  2713   002622  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2714   002624  EC5C  F022         	call	___lmul	;wreg free
  2715   002628  C010  F01C         	movff	?___lmul,___lldiv@dividend
  2716   00262C  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  2717   002630  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  2718   002634  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  2719   002638  C0E6  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  2720   00263C  C0E7  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  2721   002640  C0E8  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  2722   002644  C0E9  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  2723   002648  EC4E  F021         	call	___lldiv	;wreg free
  2724   00264C  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  2725   002650  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  2726   002654  C01C  FFDE         	movff	?___lldiv,postinc2
  2727   002658  C01D  FFDD         	movff	?___lldiv+1,postdec2
  2728   00265C  EFE8  F013         	goto	l220
  2729   002660                     l3909:
  2730                           
  2731                           ; BSR set to: 0
  2732   002660  51EA               	movf	rgb_2_hsv@g& (0+255),w,b
  2733   002662  19E4               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  2734   002664  E107               	bnz	u2631
  2735   002666  51EB               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  2736   002668  19E5               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  2737   00266A  A4D8               	btfss	status,2,c
  2738   00266C  EF3A  F013         	goto	u2631
  2739   002670  EF3C  F013         	goto	u2630
  2740   002674                     u2631:
  2741   002674  EF89  F013         	goto	l3913
  2742   002678                     u2630:
  2743   002678                     
  2744                           ; BSR set to: 0
  2745   002678  51E2               	movf	rgb_2_hsv@r& (0+255),w,b
  2746   00267A  6E34               	movwf	??_rgb_2_hsv^0,c
  2747   00267C  51E3               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  2748   00267E  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  2749   002680  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  2750   002682  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  2751   002684  90D8               	bcf	status,0,c
  2752   002686  35E6               	rlcf	rgb_2_hsv@diff& (0+255),w,b
  2753   002688  6E38               	movwf	(??_rgb_2_hsv+4)^0,c
  2754   00268A  35E7               	rlcf	(rgb_2_hsv@diff+1)& (0+255),w,b
  2755   00268C  6E39               	movwf	(??_rgb_2_hsv+5)^0,c
  2756   00268E  35E8               	rlcf	(rgb_2_hsv@diff+2)& (0+255),w,b
  2757   002690  6E3A               	movwf	(??_rgb_2_hsv+6)^0,c
  2758   002692  35E9               	rlcf	(rgb_2_hsv@diff+3)& (0+255),w,b
  2759   002694  6E3B               	movwf	(??_rgb_2_hsv+7)^0,c
  2760   002696  51EC               	movf	rgb_2_hsv@b& (0+255),w,b
  2761   002698  2438               	addwf	(??_rgb_2_hsv+4)^0,w,c
  2762   00269A  6E3C               	movwf	(??_rgb_2_hsv+8)^0,c
  2763   00269C  51ED               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  2764   00269E  2039               	addwfc	(??_rgb_2_hsv+5)^0,w,c
  2765   0026A0  6E3D               	movwf	(??_rgb_2_hsv+9)^0,c
  2766   0026A2  0E00               	movlw	0
  2767   0026A4  203A               	addwfc	(??_rgb_2_hsv+6)^0,w,c
  2768   0026A6  6E3E               	movwf	(??_rgb_2_hsv+10)^0,c
  2769   0026A8  0E00               	movlw	0
  2770   0026AA  203B               	addwfc	(??_rgb_2_hsv+7)^0,w,c
  2771   0026AC  6E3F               	movwf	(??_rgb_2_hsv+11)^0,c
  2772   0026AE  5034               	movf	??_rgb_2_hsv^0,w,c
  2773   0026B0  5C3C               	subwf	(??_rgb_2_hsv+8)^0,w,c
  2774   0026B2  6E10               	movwf	___lmul@multiplier^0,c
  2775   0026B4  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  2776   0026B6  583D               	subwfb	(??_rgb_2_hsv+9)^0,w,c
  2777   0026B8  6E11               	movwf	(___lmul@multiplier+1)^0,c
  2778   0026BA  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  2779   0026BC  583E               	subwfb	(??_rgb_2_hsv+10)^0,w,c
  2780   0026BE  6E12               	movwf	(___lmul@multiplier+2)^0,c
  2781   0026C0  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  2782   0026C2  583F               	subwfb	(??_rgb_2_hsv+11)^0,w,c
  2783   0026C4  6E13               	movwf	(___lmul@multiplier+3)^0,c
  2784   0026C6  0E70               	movlw	112
  2785   0026C8  6E14               	movwf	___lmul@multiplicand^0,c
  2786   0026CA  0E17               	movlw	23
  2787   0026CC  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2788   0026CE  0E00               	movlw	0
  2789   0026D0  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2790   0026D2  0E00               	movlw	0
  2791   0026D4  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2792   0026D6  EC5C  F022         	call	___lmul	;wreg free
  2793   0026DA  C010  F01C         	movff	?___lmul,___lldiv@dividend
  2794   0026DE  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  2795   0026E2  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  2796   0026E6  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  2797   0026EA  C0E6  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  2798   0026EE  C0E7  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  2799   0026F2  C0E8  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  2800   0026F6  C0E9  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  2801   0026FA  EC4E  F021         	call	___lldiv	;wreg free
  2802   0026FE  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  2803   002702  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  2804   002706  C01C  FFDE         	movff	?___lldiv,postinc2
  2805   00270A  C01D  FFDD         	movff	?___lldiv+1,postdec2
  2806   00270E  EFE8  F013         	goto	l220
  2807   002712                     l3913:
  2808                           
  2809                           ; BSR set to: 0
  2810   002712  51EC               	movf	rgb_2_hsv@b& (0+255),w,b
  2811   002714  19E4               	xorwf	rgb_2_hsv@cmax& (0+255),w,b
  2812   002716  E107               	bnz	u2641
  2813   002718  51ED               	movf	(rgb_2_hsv@b+1)& (0+255),w,b
  2814   00271A  19E5               	xorwf	(rgb_2_hsv@cmax+1)& (0+255),w,b
  2815   00271C  A4D8               	btfss	status,2,c
  2816   00271E  EF93  F013         	goto	u2641
  2817   002722  EF95  F013         	goto	u2640
  2818   002726                     u2641:
  2819   002726  EFE8  F013         	goto	l220
  2820   00272A                     u2640:
  2821   00272A                     
  2822                           ; BSR set to: 0
  2823   00272A  51EA               	movf	rgb_2_hsv@g& (0+255),w,b
  2824   00272C  6E34               	movwf	??_rgb_2_hsv^0,c
  2825   00272E  51EB               	movf	(rgb_2_hsv@g+1)& (0+255),w,b
  2826   002730  6E35               	movwf	(??_rgb_2_hsv+1)^0,c
  2827   002732  6A36               	clrf	(??_rgb_2_hsv+2)^0,c
  2828   002734  6A37               	clrf	(??_rgb_2_hsv+3)^0,c
  2829   002736  C0E6  F038         	movff	rgb_2_hsv@diff,??_rgb_2_hsv+4
  2830   00273A  C0E7  F039         	movff	rgb_2_hsv@diff+1,??_rgb_2_hsv+5
  2831   00273E  C0E8  F03A         	movff	rgb_2_hsv@diff+2,??_rgb_2_hsv+6
  2832   002742  C0E9  F03B         	movff	rgb_2_hsv@diff+3,??_rgb_2_hsv+7
  2833   002746  0E02               	movlw	2
  2834   002748                     u2655:
  2835   002748  90D8               	bcf	status,0,c
  2836   00274A  3638               	rlcf	(??_rgb_2_hsv+4)^0,f,c
  2837   00274C  3639               	rlcf	(??_rgb_2_hsv+5)^0,f,c
  2838   00274E  363A               	rlcf	(??_rgb_2_hsv+6)^0,f,c
  2839   002750  363B               	rlcf	(??_rgb_2_hsv+7)^0,f,c
  2840   002752  2EE8               	decfsz	wreg,f,c
  2841   002754  EFA4  F013         	goto	u2655
  2842   002758  51E2               	movf	rgb_2_hsv@r& (0+255),w,b
  2843   00275A  2438               	addwf	(??_rgb_2_hsv+4)^0,w,c
  2844   00275C  6E3C               	movwf	(??_rgb_2_hsv+8)^0,c
  2845   00275E  51E3               	movf	(rgb_2_hsv@r+1)& (0+255),w,b
  2846   002760  2039               	addwfc	(??_rgb_2_hsv+5)^0,w,c
  2847   002762  6E3D               	movwf	(??_rgb_2_hsv+9)^0,c
  2848   002764  0E00               	movlw	0
  2849   002766  203A               	addwfc	(??_rgb_2_hsv+6)^0,w,c
  2850   002768  6E3E               	movwf	(??_rgb_2_hsv+10)^0,c
  2851   00276A  0E00               	movlw	0
  2852   00276C  203B               	addwfc	(??_rgb_2_hsv+7)^0,w,c
  2853   00276E  6E3F               	movwf	(??_rgb_2_hsv+11)^0,c
  2854   002770  5034               	movf	??_rgb_2_hsv^0,w,c
  2855   002772  5C3C               	subwf	(??_rgb_2_hsv+8)^0,w,c
  2856   002774  6E10               	movwf	___lmul@multiplier^0,c
  2857   002776  5035               	movf	(??_rgb_2_hsv+1)^0,w,c
  2858   002778  583D               	subwfb	(??_rgb_2_hsv+9)^0,w,c
  2859   00277A  6E11               	movwf	(___lmul@multiplier+1)^0,c
  2860   00277C  5036               	movf	(??_rgb_2_hsv+2)^0,w,c
  2861   00277E  583E               	subwfb	(??_rgb_2_hsv+10)^0,w,c
  2862   002780  6E12               	movwf	(___lmul@multiplier+2)^0,c
  2863   002782  5037               	movf	(??_rgb_2_hsv+3)^0,w,c
  2864   002784  583F               	subwfb	(??_rgb_2_hsv+11)^0,w,c
  2865   002786  6E13               	movwf	(___lmul@multiplier+3)^0,c
  2866   002788  0E70               	movlw	112
  2867   00278A  6E14               	movwf	___lmul@multiplicand^0,c
  2868   00278C  0E17               	movlw	23
  2869   00278E  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2870   002790  0E00               	movlw	0
  2871   002792  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2872   002794  0E00               	movlw	0
  2873   002796  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2874   002798  EC5C  F022         	call	___lmul	;wreg free
  2875   00279C  C010  F01C         	movff	?___lmul,___lldiv@dividend
  2876   0027A0  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  2877   0027A4  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  2878   0027A8  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  2879   0027AC  C0E6  F020         	movff	rgb_2_hsv@diff,___lldiv@divisor
  2880   0027B0  C0E7  F021         	movff	rgb_2_hsv@diff+1,___lldiv@divisor+1
  2881   0027B4  C0E8  F022         	movff	rgb_2_hsv@diff+2,___lldiv@divisor+2
  2882   0027B8  C0E9  F023         	movff	rgb_2_hsv@diff+3,___lldiv@divisor+3
  2883   0027BC  EC4E  F021         	call	___lldiv	;wreg free
  2884   0027C0  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  2885   0027C4  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  2886   0027C8  C01C  FFDE         	movff	?___lldiv,postinc2
  2887   0027CC  C01D  FFDD         	movff	?___lldiv+1,postdec2
  2888   0027D0                     l220:
  2889                           
  2890                           ;color.c: 301:     HSV->S = (unsigned int)((diff * 10000)/cmax);
  2891   0027D0  C0E6  F010         	movff	rgb_2_hsv@diff,___lmul@multiplier
  2892   0027D4  C0E7  F011         	movff	rgb_2_hsv@diff+1,___lmul@multiplier+1
  2893   0027D8  C0E8  F012         	movff	rgb_2_hsv@diff+2,___lmul@multiplier+2
  2894   0027DC  C0E9  F013         	movff	rgb_2_hsv@diff+3,___lmul@multiplier+3
  2895   0027E0  0E10               	movlw	16
  2896   0027E2  6E14               	movwf	___lmul@multiplicand^0,c
  2897   0027E4  0E27               	movlw	39
  2898   0027E6  6E15               	movwf	(___lmul@multiplicand+1)^0,c
  2899   0027E8  0E00               	movlw	0
  2900   0027EA  6E16               	movwf	(___lmul@multiplicand+2)^0,c
  2901   0027EC  0E00               	movlw	0
  2902   0027EE  6E17               	movwf	(___lmul@multiplicand+3)^0,c
  2903   0027F0  EC5C  F022         	call	___lmul	;wreg free
  2904   0027F4  C010  F01C         	movff	?___lmul,___lldiv@dividend
  2905   0027F8  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  2906   0027FC  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  2907   002800  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  2908   002804  C0E4  F020         	movff	rgb_2_hsv@cmax,___lldiv@divisor
  2909   002808  C0E5  F021         	movff	rgb_2_hsv@cmax+1,___lldiv@divisor+1
  2910   00280C  6A22               	clrf	(___lldiv@divisor+2)^0,c
  2911   00280E  6A23               	clrf	(___lldiv@divisor+3)^0,c
  2912   002810  EC4E  F021         	call	___lldiv	;wreg free
  2913   002814  EE20 F002          	lfsr	2,2
  2914   002818  5032               	movf	rgb_2_hsv@HSV^0,w,c
  2915   00281A  26D9               	addwf	fsr2l,f,c
  2916   00281C  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  2917   00281E  22DA               	addwfc	fsr2h,f,c
  2918   002820  C01C  FFDE         	movff	?___lldiv,postinc2
  2919   002824  C01D  FFDD         	movff	?___lldiv+1,postdec2
  2920   002828                     
  2921                           ;color.c: 303:     if (HSV->S == 0){HSV->H = 0;}
  2922   002828  EE20 F002          	lfsr	2,2
  2923   00282C  5032               	movf	rgb_2_hsv@HSV^0,w,c
  2924   00282E  26D9               	addwf	fsr2l,f,c
  2925   002830  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  2926   002832  22DA               	addwfc	fsr2h,f,c
  2927   002834  50DE               	movf	postinc2,w,c
  2928   002836  10DE               	iorwf	postinc2,w,c
  2929   002838  A4D8               	btfss	status,2,c
  2930   00283A  EF21  F014         	goto	u2661
  2931   00283E  EF23  F014         	goto	u2660
  2932   002842                     u2661:
  2933   002842  EF29  F014         	goto	l3921
  2934   002846                     u2660:
  2935   002846  C032  FFD9         	movff	rgb_2_hsv@HSV,fsr2l
  2936   00284A  C033  FFDA         	movff	rgb_2_hsv@HSV+1,fsr2h
  2937   00284E  6ADE               	clrf	postinc2,c
  2938   002850  6ADD               	clrf	postdec2,c
  2939   002852                     l3921:
  2940                           
  2941                           ;color.c: 306:     HSV->V = cmax;
  2942   002852  EE20 F004          	lfsr	2,4
  2943   002856  5032               	movf	rgb_2_hsv@HSV^0,w,c
  2944   002858  26D9               	addwf	fsr2l,f,c
  2945   00285A  5033               	movf	(rgb_2_hsv@HSV+1)^0,w,c
  2946   00285C  22DA               	addwfc	fsr2h,f,c
  2947   00285E  C0E4  FFDE         	movff	rgb_2_hsv@cmax,postinc2
  2948   002862  C0E5  FFDD         	movff	rgb_2_hsv@cmax+1,postdec2
  2949   002866  0012               	return		;funcret
  2950   002868                     __end_of_rgb_2_hsv:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _min *****************
  2954 ;; Defined at:
  2955 ;;		line 274 in file "color.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  a               2   15[COMRAM] unsigned int 
  2958 ;;  b               2   17[COMRAM] unsigned int 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  2   15[COMRAM] unsigned int 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2970 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;Total ram usage:        4 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 5
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_rgb_2_hsv
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text4
  2985   004670                     __ptext4:
  2986                           	callstack 0
  2987   004670                     _min:
  2988                           	callstack 24
  2989   004670                     
  2990                           ;color.c: 275:     if (a < b){return a;}
  2991   004670  5012               	movf	min@b^0,w,c
  2992   004672  5C10               	subwf	min@a^0,w,c
  2993   004674  5013               	movf	(min@b+1)^0,w,c
  2994   004676  5811               	subwfb	(min@a+1)^0,w,c
  2995   004678  B0D8               	btfsc	status,0,c
  2996   00467A  EF41  F023         	goto	u2041
  2997   00467E  EF43  F023         	goto	u2040
  2998   004682                     u2041:
  2999   004682  EF49  F023         	goto	l211
  3000   004686                     u2040:
  3001   004686  C010  F010         	movff	min@a,?_min
  3002   00468A  C011  F011         	movff	min@a+1,?_min+1
  3003   00468E  EF4D  F023         	goto	l212
  3004   004692                     l211:
  3005   004692  C012  F010         	movff	min@b,?_min
  3006   004696  C013  F011         	movff	min@b+1,?_min+1
  3007   00469A                     l212:
  3008   00469A  0012               	return		;funcret
  3009   00469C                     __end_of_min:
  3010                           	callstack 0
  3011                           
  3012 ;; *************** function _max *****************
  3013 ;; Defined at:
  3014 ;;		line 269 in file "color.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  a               2   15[COMRAM] unsigned int 
  3017 ;;  b               2   17[COMRAM] unsigned int 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2   15[COMRAM] unsigned int 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3032 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3033 ;;Total ram usage:        4 bytes
  3034 ;; Hardware stack levels used: 1
  3035 ;; Hardware stack levels required when called: 5
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_rgb_2_hsv
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text5
  3044   00469C                     __ptext5:
  3045                           	callstack 0
  3046   00469C                     _max:
  3047                           	callstack 24
  3048   00469C                     
  3049                           ;color.c: 270:     if (a > b){return a;}
  3050   00469C  5010               	movf	max@a^0,w,c
  3051   00469E  5C12               	subwf	max@b^0,w,c
  3052   0046A0  5011               	movf	(max@a+1)^0,w,c
  3053   0046A2  5813               	subwfb	(max@b+1)^0,w,c
  3054   0046A4  B0D8               	btfsc	status,0,c
  3055   0046A6  EF57  F023         	goto	u2031
  3056   0046AA  EF59  F023         	goto	u2030
  3057   0046AE                     u2031:
  3058   0046AE  EF5F  F023         	goto	l206
  3059   0046B2                     u2030:
  3060   0046B2  C010  F010         	movff	max@a,?_max
  3061   0046B6  C011  F011         	movff	max@a+1,?_max+1
  3062   0046BA  EF63  F023         	goto	l207
  3063   0046BE                     l206:
  3064   0046BE  C012  F010         	movff	max@b,?_max
  3065   0046C2  C013  F011         	movff	max@b+1,?_max+1
  3066   0046C6                     l207:
  3067   0046C6  0012               	return		;funcret
  3068   0046C8                     __end_of_max:
  3069                           	callstack 0
  3070                           
  3071 ;; *************** function ___lmul *****************
  3072 ;; Defined at:
  3073 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  multiplier      4   15[COMRAM] unsigned long 
  3076 ;;  multiplicand    4   19[COMRAM] unsigned long 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  product         4   23[COMRAM] unsigned long 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  4   15[COMRAM] unsigned long 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3088 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3089 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;Total ram usage:       12 bytes
  3093 ;; Hardware stack levels used: 1
  3094 ;; Hardware stack levels required when called: 5
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_rgb_2_hsv
  3099 ;;		_color_normalise
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text6
  3104   0044B8                     __ptext6:
  3105                           	callstack 0
  3106   0044B8                     ___lmul:
  3107                           	callstack 24
  3108   0044B8  0E00               	movlw	0
  3109   0044BA  6E18               	movwf	___lmul@product^0,c
  3110   0044BC  0E00               	movlw	0
  3111   0044BE  6E19               	movwf	(___lmul@product+1)^0,c
  3112   0044C0  0E00               	movlw	0
  3113   0044C2  6E1A               	movwf	(___lmul@product+2)^0,c
  3114   0044C4  0E00               	movlw	0
  3115   0044C6  6E1B               	movwf	(___lmul@product+3)^0,c
  3116   0044C8                     l3521:
  3117   0044C8  A010               	btfss	___lmul@multiplier^0,0,c
  3118   0044CA  EF69  F022         	goto	u2211
  3119   0044CE  EF6B  F022         	goto	u2210
  3120   0044D2                     u2211:
  3121   0044D2  EF73  F022         	goto	l3525
  3122   0044D6                     u2210:
  3123   0044D6  5014               	movf	___lmul@multiplicand^0,w,c
  3124   0044D8  2618               	addwf	___lmul@product^0,f,c
  3125   0044DA  5015               	movf	(___lmul@multiplicand+1)^0,w,c
  3126   0044DC  2219               	addwfc	(___lmul@product+1)^0,f,c
  3127   0044DE  5016               	movf	(___lmul@multiplicand+2)^0,w,c
  3128   0044E0  221A               	addwfc	(___lmul@product+2)^0,f,c
  3129   0044E2  5017               	movf	(___lmul@multiplicand+3)^0,w,c
  3130   0044E4  221B               	addwfc	(___lmul@product+3)^0,f,c
  3131   0044E6                     l3525:
  3132   0044E6  90D8               	bcf	status,0,c
  3133   0044E8  3614               	rlcf	___lmul@multiplicand^0,f,c
  3134   0044EA  3615               	rlcf	(___lmul@multiplicand+1)^0,f,c
  3135   0044EC  3616               	rlcf	(___lmul@multiplicand+2)^0,f,c
  3136   0044EE  3617               	rlcf	(___lmul@multiplicand+3)^0,f,c
  3137   0044F0  90D8               	bcf	status,0,c
  3138   0044F2  3213               	rrcf	(___lmul@multiplier+3)^0,f,c
  3139   0044F4  3212               	rrcf	(___lmul@multiplier+2)^0,f,c
  3140   0044F6  3211               	rrcf	(___lmul@multiplier+1)^0,f,c
  3141   0044F8  3210               	rrcf	___lmul@multiplier^0,f,c
  3142   0044FA  5010               	movf	___lmul@multiplier^0,w,c
  3143   0044FC  1011               	iorwf	(___lmul@multiplier+1)^0,w,c
  3144   0044FE  1012               	iorwf	(___lmul@multiplier+2)^0,w,c
  3145   004500  1013               	iorwf	(___lmul@multiplier+3)^0,w,c
  3146   004502  A4D8               	btfss	status,2,c
  3147   004504  EF86  F022         	goto	u2221
  3148   004508  EF88  F022         	goto	u2220
  3149   00450C                     u2221:
  3150   00450C  EF64  F022         	goto	l3521
  3151   004510                     u2220:
  3152   004510  C018  F010         	movff	___lmul@product,?___lmul
  3153   004514  C019  F011         	movff	___lmul@product+1,?___lmul+1
  3154   004518  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  3155   00451C  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  3156   004520  0012               	return		;funcret
  3157   004522                     __end_of___lmul:
  3158                           	callstack 0
  3159                           
  3160 ;; *************** function ___lldiv *****************
  3161 ;; Defined at:
  3162 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  dividend        4   27[COMRAM] unsigned long 
  3165 ;;  divisor         4   31[COMRAM] unsigned long 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  quotient        4   35[COMRAM] unsigned long 
  3168 ;;  counter         1   39[COMRAM] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  4   27[COMRAM] unsigned long 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3178 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;Total ram usage:       13 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 5
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_rgb_2_hsv
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text7
  3193   00429C                     __ptext7:
  3194                           	callstack 0
  3195   00429C                     ___lldiv:
  3196                           	callstack 24
  3197   00429C  0E00               	movlw	0
  3198   00429E  6E24               	movwf	___lldiv@quotient^0,c
  3199   0042A0  0E00               	movlw	0
  3200   0042A2  6E25               	movwf	(___lldiv@quotient+1)^0,c
  3201   0042A4  0E00               	movlw	0
  3202   0042A6  6E26               	movwf	(___lldiv@quotient+2)^0,c
  3203   0042A8  0E00               	movlw	0
  3204   0042AA  6E27               	movwf	(___lldiv@quotient+3)^0,c
  3205   0042AC  5020               	movf	___lldiv@divisor^0,w,c
  3206   0042AE  1021               	iorwf	(___lldiv@divisor+1)^0,w,c
  3207   0042B0  1022               	iorwf	(___lldiv@divisor+2)^0,w,c
  3208   0042B2  1023               	iorwf	(___lldiv@divisor+3)^0,w,c
  3209   0042B4  B4D8               	btfsc	status,2,c
  3210   0042B6  EF5F  F021         	goto	u2231
  3211   0042BA  EF61  F021         	goto	u2230
  3212   0042BE                     u2231:
  3213   0042BE  EF97  F021         	goto	l797
  3214   0042C2                     u2230:
  3215   0042C2  0E01               	movlw	1
  3216   0042C4  6E28               	movwf	___lldiv@counter^0,c
  3217   0042C6  EF6B  F021         	goto	l3537
  3218   0042CA                     l3535:
  3219   0042CA  90D8               	bcf	status,0,c
  3220   0042CC  3620               	rlcf	___lldiv@divisor^0,f,c
  3221   0042CE  3621               	rlcf	(___lldiv@divisor+1)^0,f,c
  3222   0042D0  3622               	rlcf	(___lldiv@divisor+2)^0,f,c
  3223   0042D2  3623               	rlcf	(___lldiv@divisor+3)^0,f,c
  3224   0042D4  2A28               	incf	___lldiv@counter^0,f,c
  3225   0042D6                     l3537:
  3226   0042D6  AE23               	btfss	(___lldiv@divisor+3)^0,7,c
  3227   0042D8  EF70  F021         	goto	u2241
  3228   0042DC  EF72  F021         	goto	u2240
  3229   0042E0                     u2241:
  3230   0042E0  EF65  F021         	goto	l3535
  3231   0042E4                     u2240:
  3232   0042E4                     l3539:
  3233   0042E4  90D8               	bcf	status,0,c
  3234   0042E6  3624               	rlcf	___lldiv@quotient^0,f,c
  3235   0042E8  3625               	rlcf	(___lldiv@quotient+1)^0,f,c
  3236   0042EA  3626               	rlcf	(___lldiv@quotient+2)^0,f,c
  3237   0042EC  3627               	rlcf	(___lldiv@quotient+3)^0,f,c
  3238   0042EE  5020               	movf	___lldiv@divisor^0,w,c
  3239   0042F0  5C1C               	subwf	___lldiv@dividend^0,w,c
  3240   0042F2  5021               	movf	(___lldiv@divisor+1)^0,w,c
  3241   0042F4  581D               	subwfb	(___lldiv@dividend+1)^0,w,c
  3242   0042F6  5022               	movf	(___lldiv@divisor+2)^0,w,c
  3243   0042F8  581E               	subwfb	(___lldiv@dividend+2)^0,w,c
  3244   0042FA  5023               	movf	(___lldiv@divisor+3)^0,w,c
  3245   0042FC  581F               	subwfb	(___lldiv@dividend+3)^0,w,c
  3246   0042FE  A0D8               	btfss	status,0,c
  3247   004300  EF84  F021         	goto	u2251
  3248   004304  EF86  F021         	goto	u2250
  3249   004308                     u2251:
  3250   004308  EF8F  F021         	goto	l3547
  3251   00430C                     u2250:
  3252   00430C  5020               	movf	___lldiv@divisor^0,w,c
  3253   00430E  5E1C               	subwf	___lldiv@dividend^0,f,c
  3254   004310  5021               	movf	(___lldiv@divisor+1)^0,w,c
  3255   004312  5A1D               	subwfb	(___lldiv@dividend+1)^0,f,c
  3256   004314  5022               	movf	(___lldiv@divisor+2)^0,w,c
  3257   004316  5A1E               	subwfb	(___lldiv@dividend+2)^0,f,c
  3258   004318  5023               	movf	(___lldiv@divisor+3)^0,w,c
  3259   00431A  5A1F               	subwfb	(___lldiv@dividend+3)^0,f,c
  3260   00431C  8024               	bsf	___lldiv@quotient^0,0,c
  3261   00431E                     l3547:
  3262   00431E  90D8               	bcf	status,0,c
  3263   004320  3223               	rrcf	(___lldiv@divisor+3)^0,f,c
  3264   004322  3222               	rrcf	(___lldiv@divisor+2)^0,f,c
  3265   004324  3221               	rrcf	(___lldiv@divisor+1)^0,f,c
  3266   004326  3220               	rrcf	___lldiv@divisor^0,f,c
  3267   004328  2E28               	decfsz	___lldiv@counter^0,f,c
  3268   00432A  EF72  F021         	goto	l3539
  3269   00432E                     l797:
  3270   00432E  C024  F01C         	movff	___lldiv@quotient,?___lldiv
  3271   004332  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
  3272   004336  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
  3273   00433A  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
  3274   00433E  0012               	return		;funcret
  3275   004340                     __end_of___lldiv:
  3276                           	callstack 0
  3277                           
  3278 ;; *************** function ___aldiv *****************
  3279 ;; Defined at:
  3280 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  dividend        4   27[COMRAM] long 
  3283 ;;  divisor         4   31[COMRAM] long 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  quotient        4   37[COMRAM] long 
  3286 ;;  sign            1   36[COMRAM] unsigned char 
  3287 ;;  counter         1   35[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  4   27[COMRAM] long 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3297 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3298 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3300 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3301 ;;Total ram usage:       14 bytes
  3302 ;; Hardware stack levels used: 1
  3303 ;; Hardware stack levels required when called: 5
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_rgb_2_hsv
  3308 ;;		_color_normalise
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text8
  3313   003D92                     __ptext8:
  3314                           	callstack 0
  3315   003D92                     ___aldiv:
  3316                           	callstack 24
  3317   003D92  0E00               	movlw	0
  3318   003D94  6E25               	movwf	___aldiv@sign^0,c
  3319   003D96  BE23               	btfsc	(___aldiv@divisor+3)^0,7,c
  3320   003D98  EFD2  F01E         	goto	u2260
  3321   003D9C  EFD0  F01E         	goto	u2261
  3322   003DA0                     u2261:
  3323   003DA0  EFDC  F01E         	goto	l3559
  3324   003DA4                     u2260:
  3325   003DA4  1E23               	comf	(___aldiv@divisor+3)^0,f,c
  3326   003DA6  1E22               	comf	(___aldiv@divisor+2)^0,f,c
  3327   003DA8  1E21               	comf	(___aldiv@divisor+1)^0,f,c
  3328   003DAA  6C20               	negf	___aldiv@divisor^0,c
  3329   003DAC  0E00               	movlw	0
  3330   003DAE  2221               	addwfc	(___aldiv@divisor+1)^0,f,c
  3331   003DB0  2222               	addwfc	(___aldiv@divisor+2)^0,f,c
  3332   003DB2  2223               	addwfc	(___aldiv@divisor+3)^0,f,c
  3333   003DB4  0E01               	movlw	1
  3334   003DB6  6E25               	movwf	___aldiv@sign^0,c
  3335   003DB8                     l3559:
  3336   003DB8  BE1F               	btfsc	(___aldiv@dividend+3)^0,7,c
  3337   003DBA  EFE3  F01E         	goto	u2270
  3338   003DBE  EFE1  F01E         	goto	u2271
  3339   003DC2                     u2271:
  3340   003DC2  EFED  F01E         	goto	l3565
  3341   003DC6                     u2270:
  3342   003DC6  1E1F               	comf	(___aldiv@dividend+3)^0,f,c
  3343   003DC8  1E1E               	comf	(___aldiv@dividend+2)^0,f,c
  3344   003DCA  1E1D               	comf	(___aldiv@dividend+1)^0,f,c
  3345   003DCC  6C1C               	negf	___aldiv@dividend^0,c
  3346   003DCE  0E00               	movlw	0
  3347   003DD0  221D               	addwfc	(___aldiv@dividend+1)^0,f,c
  3348   003DD2  221E               	addwfc	(___aldiv@dividend+2)^0,f,c
  3349   003DD4  221F               	addwfc	(___aldiv@dividend+3)^0,f,c
  3350   003DD6  0E01               	movlw	1
  3351   003DD8  1A25               	xorwf	___aldiv@sign^0,f,c
  3352   003DDA                     l3565:
  3353   003DDA  0E00               	movlw	0
  3354   003DDC  6E26               	movwf	___aldiv@quotient^0,c
  3355   003DDE  0E00               	movlw	0
  3356   003DE0  6E27               	movwf	(___aldiv@quotient+1)^0,c
  3357   003DE2  0E00               	movlw	0
  3358   003DE4  6E28               	movwf	(___aldiv@quotient+2)^0,c
  3359   003DE6  0E00               	movlw	0
  3360   003DE8  6E29               	movwf	(___aldiv@quotient+3)^0,c
  3361   003DEA  5020               	movf	___aldiv@divisor^0,w,c
  3362   003DEC  1021               	iorwf	(___aldiv@divisor+1)^0,w,c
  3363   003DEE  1022               	iorwf	(___aldiv@divisor+2)^0,w,c
  3364   003DF0  1023               	iorwf	(___aldiv@divisor+3)^0,w,c
  3365   003DF2  B4D8               	btfsc	status,2,c
  3366   003DF4  EFFE  F01E         	goto	u2281
  3367   003DF8  EF00  F01F         	goto	u2280
  3368   003DFC                     u2281:
  3369   003DFC  EF36  F01F         	goto	l3587
  3370   003E00                     u2280:
  3371   003E00  0E01               	movlw	1
  3372   003E02  6E24               	movwf	___aldiv@counter^0,c
  3373   003E04  EF0A  F01F         	goto	l3573
  3374   003E08                     l3571:
  3375   003E08  90D8               	bcf	status,0,c
  3376   003E0A  3620               	rlcf	___aldiv@divisor^0,f,c
  3377   003E0C  3621               	rlcf	(___aldiv@divisor+1)^0,f,c
  3378   003E0E  3622               	rlcf	(___aldiv@divisor+2)^0,f,c
  3379   003E10  3623               	rlcf	(___aldiv@divisor+3)^0,f,c
  3380   003E12  2A24               	incf	___aldiv@counter^0,f,c
  3381   003E14                     l3573:
  3382   003E14  AE23               	btfss	(___aldiv@divisor+3)^0,7,c
  3383   003E16  EF0F  F01F         	goto	u2291
  3384   003E1A  EF11  F01F         	goto	u2290
  3385   003E1E                     u2291:
  3386   003E1E  EF04  F01F         	goto	l3571
  3387   003E22                     u2290:
  3388   003E22                     l3575:
  3389   003E22  90D8               	bcf	status,0,c
  3390   003E24  3626               	rlcf	___aldiv@quotient^0,f,c
  3391   003E26  3627               	rlcf	(___aldiv@quotient+1)^0,f,c
  3392   003E28  3628               	rlcf	(___aldiv@quotient+2)^0,f,c
  3393   003E2A  3629               	rlcf	(___aldiv@quotient+3)^0,f,c
  3394   003E2C  5020               	movf	___aldiv@divisor^0,w,c
  3395   003E2E  5C1C               	subwf	___aldiv@dividend^0,w,c
  3396   003E30  5021               	movf	(___aldiv@divisor+1)^0,w,c
  3397   003E32  581D               	subwfb	(___aldiv@dividend+1)^0,w,c
  3398   003E34  5022               	movf	(___aldiv@divisor+2)^0,w,c
  3399   003E36  581E               	subwfb	(___aldiv@dividend+2)^0,w,c
  3400   003E38  5023               	movf	(___aldiv@divisor+3)^0,w,c
  3401   003E3A  581F               	subwfb	(___aldiv@dividend+3)^0,w,c
  3402   003E3C  A0D8               	btfss	status,0,c
  3403   003E3E  EF23  F01F         	goto	u2301
  3404   003E42  EF25  F01F         	goto	u2300
  3405   003E46                     u2301:
  3406   003E46  EF2E  F01F         	goto	l3583
  3407   003E4A                     u2300:
  3408   003E4A  5020               	movf	___aldiv@divisor^0,w,c
  3409   003E4C  5E1C               	subwf	___aldiv@dividend^0,f,c
  3410   003E4E  5021               	movf	(___aldiv@divisor+1)^0,w,c
  3411   003E50  5A1D               	subwfb	(___aldiv@dividend+1)^0,f,c
  3412   003E52  5022               	movf	(___aldiv@divisor+2)^0,w,c
  3413   003E54  5A1E               	subwfb	(___aldiv@dividend+2)^0,f,c
  3414   003E56  5023               	movf	(___aldiv@divisor+3)^0,w,c
  3415   003E58  5A1F               	subwfb	(___aldiv@dividend+3)^0,f,c
  3416   003E5A  8026               	bsf	___aldiv@quotient^0,0,c
  3417   003E5C                     l3583:
  3418   003E5C  90D8               	bcf	status,0,c
  3419   003E5E  3223               	rrcf	(___aldiv@divisor+3)^0,f,c
  3420   003E60  3222               	rrcf	(___aldiv@divisor+2)^0,f,c
  3421   003E62  3221               	rrcf	(___aldiv@divisor+1)^0,f,c
  3422   003E64  3220               	rrcf	___aldiv@divisor^0,f,c
  3423   003E66  2E24               	decfsz	___aldiv@counter^0,f,c
  3424   003E68  EF11  F01F         	goto	l3575
  3425   003E6C                     l3587:
  3426   003E6C  5025               	movf	___aldiv@sign^0,w,c
  3427   003E6E  B4D8               	btfsc	status,2,c
  3428   003E70  EF3C  F01F         	goto	u2311
  3429   003E74  EF3E  F01F         	goto	u2310
  3430   003E78                     u2311:
  3431   003E78  EF46  F01F         	goto	l3591
  3432   003E7C                     u2310:
  3433   003E7C  1E29               	comf	(___aldiv@quotient+3)^0,f,c
  3434   003E7E  1E28               	comf	(___aldiv@quotient+2)^0,f,c
  3435   003E80  1E27               	comf	(___aldiv@quotient+1)^0,f,c
  3436   003E82  6C26               	negf	___aldiv@quotient^0,c
  3437   003E84  0E00               	movlw	0
  3438   003E86  2227               	addwfc	(___aldiv@quotient+1)^0,f,c
  3439   003E88  2228               	addwfc	(___aldiv@quotient+2)^0,f,c
  3440   003E8A  2229               	addwfc	(___aldiv@quotient+3)^0,f,c
  3441   003E8C                     l3591:
  3442   003E8C  C026  F01C         	movff	___aldiv@quotient,?___aldiv
  3443   003E90  C027  F01D         	movff	___aldiv@quotient+1,?___aldiv+1
  3444   003E94  C028  F01E         	movff	___aldiv@quotient+2,?___aldiv+2
  3445   003E98  C029  F01F         	movff	___aldiv@quotient+3,?___aldiv+3
  3446   003E9C  0012               	return		;funcret
  3447   003E9E                     __end_of___aldiv:
  3448                           	callstack 0
  3449                           
  3450 ;; *************** function _move *****************
  3451 ;; Defined at:
  3452 ;;		line 91 in file "dc_motor.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  3455 ;;		 -> main@motorL(10), 
  3456 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  3457 ;;		 -> main@motorR(10), 
  3458 ;;  color           1    4[BANK0 ] unsigned char 
  3459 ;;  moveSequence    2    5[BANK0 ] PTR unsigned char 
  3460 ;;		 -> main@moveSequence(40), 
  3461 ;;  straightTime    2    7[BANK0 ] PTR unsigned int 
  3462 ;;		 -> main@straightTime(82), 
  3463 ;;  curMove         1    9[BANK0 ] unsigned char 
  3464 ;;  straightSpee    1   10[BANK0 ] unsigned char 
  3465 ;;  reverseDurat    1   11[BANK0 ] unsigned char 
  3466 ;;  straightRamp    1   12[BANK0 ] unsigned char 
  3467 ;;  turnSpeed       1   13[BANK0 ] unsigned char 
  3468 ;;  turnDuration    1   14[BANK0 ] unsigned char 
  3469 ;;  turnRamp        1   15[BANK0 ] unsigned char 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3481 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3484 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3485 ;;Total ram usage:       18 bytes
  3486 ;; Hardware stack levels used: 1
  3487 ;; Hardware stack levels required when called: 9
  3488 ;; This function calls:
  3489 ;;		_fullSpeedAhead
  3490 ;;		_returnHome
  3491 ;;		_reverseOneSquare
  3492 ;;		_reverseShort
  3493 ;;		_turnLeft
  3494 ;;		_turnRight
  3495 ;; This function is called by:
  3496 ;;		_main
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text9
  3501   000E02                     __ptext9:
  3502                           	callstack 0
  3503   000E02                     _move:
  3504                           	callstack 21
  3505   000E02                     
  3506                           ;dc_motor.c: 91: void move(DC_motor *mL, DC_motor *mR, char color, unsigned char *moveSe
      +                          quence, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reve
      +                          rseDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, uns
      +                          igned char turnRamp);dc_motor.c: 92: {;dc_motor.c: 93:     if (color == 1) {
  3507   000E02  0100               	movlb	0	; () banked
  3508   000E04  05DC               	decf	move@color& (0+255),w,b
  3509   000E06  A4D8               	btfss	status,2,c
  3510   000E08  EF08  F007         	goto	u2671
  3511   000E0C  EF0A  F007         	goto	u2670
  3512   000E10                     u2671:
  3513   000E10  EF6C  F007         	goto	l3935
  3514   000E14                     u2670:
  3515   000E14                     
  3516                           ; BSR set to: 0
  3517                           ;dc_motor.c: 94:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3518   000E14  C0D8  F023         	movff	move@mL,reverseShort@mL
  3519   000E18  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3520   000E1C  C0DA  F025         	movff	move@mR,reverseShort@mR
  3521   000E20  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3522   000E24  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3523   000E28  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3524   000E2C  EC54  F019         	call	_reverseShort	;wreg free
  3525   000E30                     
  3526                           ;dc_motor.c: 95:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3527   000E30  0E05               	movlw	5
  3528   000E32  6E46               	movwf	(??_move+1)^0,c
  3529   000E34  0E0F               	movlw	15
  3530   000E36  6E45               	movwf	??_move^0,c
  3531   000E38  0EF1               	movlw	241
  3532   000E3A                     u3397:
  3533   000E3A  2EE8               	decfsz	wreg,f,c
  3534   000E3C  D7FE               	bra	u3397
  3535   000E3E  2E45               	decfsz	??_move^0,f,c
  3536   000E40  D7FC               	bra	u3397
  3537   000E42  2E46               	decfsz	(??_move+1)^0,f,c
  3538   000E44  D7FA               	bra	u3397
  3539   000E46  0000               	nop	
  3540   000E48                     
  3541                           ;dc_motor.c: 96:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3542   000E48  C0D8  F023         	movff	move@mL,turnRight@mL
  3543   000E4C  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3544   000E50  C0DA  F025         	movff	move@mR,turnRight@mR
  3545   000E54  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3546   000E58  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3547   000E5C  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  3548   000E60  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  3549   000E64  EC39  F01C         	call	_turnRight	;wreg free
  3550                           
  3551                           ;dc_motor.c: 97:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3552   000E68  0E05               	movlw	5
  3553   000E6A  6E46               	movwf	(??_move+1)^0,c
  3554   000E6C  0E0F               	movlw	15
  3555   000E6E  6E45               	movwf	??_move^0,c
  3556   000E70  0EF1               	movlw	241
  3557   000E72                     u3407:
  3558   000E72  2EE8               	decfsz	wreg,f,c
  3559   000E74  D7FE               	bra	u3407
  3560   000E76  2E45               	decfsz	??_move^0,f,c
  3561   000E78  D7FC               	bra	u3407
  3562   000E7A  2E46               	decfsz	(??_move+1)^0,f,c
  3563   000E7C  D7FA               	bra	u3407
  3564   000E7E  0000               	nop	
  3565   000E80                     
  3566                           ;dc_motor.c: 98:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3567   000E80  C0D8  F023         	movff	move@mL,turnRight@mL
  3568   000E84  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3569   000E88  C0DA  F025         	movff	move@mR,turnRight@mR
  3570   000E8C  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3571   000E90  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3572   000E94  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  3573   000E98  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  3574   000E9C  EC39  F01C         	call	_turnRight	;wreg free
  3575   000EA0                     
  3576                           ;dc_motor.c: 99:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3577   000EA0  0E05               	movlw	5
  3578   000EA2  6E46               	movwf	(??_move+1)^0,c
  3579   000EA4  0E0F               	movlw	15
  3580   000EA6  6E45               	movwf	??_move^0,c
  3581   000EA8  0EF1               	movlw	241
  3582   000EAA                     u3417:
  3583   000EAA  2EE8               	decfsz	wreg,f,c
  3584   000EAC  D7FE               	bra	u3417
  3585   000EAE  2E45               	decfsz	??_move^0,f,c
  3586   000EB0  D7FC               	bra	u3417
  3587   000EB2  2E46               	decfsz	(??_move+1)^0,f,c
  3588   000EB4  D7FA               	bra	u3417
  3589   000EB6  0000               	nop	
  3590                           
  3591                           ;dc_motor.c: 100:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3592   000EB8  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3593   000EBC  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3594   000EC0  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3595   000EC4  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3596   000EC8  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3597   000ECC  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3598   000ED0  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  3599                           
  3600                           ;dc_motor.c: 101:     }
  3601   000ED4  EF15  F00B         	goto	l569
  3602   000ED8                     l3935:
  3603                           
  3604                           ; BSR set to: 0
  3605   000ED8  0E02               	movlw	2
  3606   000EDA  19DC               	xorwf	move@color& (0+255),w,b
  3607   000EDC  A4D8               	btfss	status,2,c
  3608   000EDE  EF73  F007         	goto	u2681
  3609   000EE2  EF75  F007         	goto	u2680
  3610   000EE6                     u2681:
  3611   000EE6  EFD7  F007         	goto	l3947
  3612   000EEA                     u2680:
  3613   000EEA                     
  3614                           ; BSR set to: 0
  3615                           ;dc_motor.c: 104:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3616   000EEA  C0D8  F023         	movff	move@mL,reverseShort@mL
  3617   000EEE  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3618   000EF2  C0DA  F025         	movff	move@mR,reverseShort@mR
  3619   000EF6  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3620   000EFA  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3621   000EFE  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3622   000F02  EC54  F019         	call	_reverseShort	;wreg free
  3623   000F06                     
  3624                           ;dc_motor.c: 105:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3625   000F06  0E05               	movlw	5
  3626   000F08  6E46               	movwf	(??_move+1)^0,c
  3627   000F0A  0E0F               	movlw	15
  3628   000F0C  6E45               	movwf	??_move^0,c
  3629   000F0E  0EF1               	movlw	241
  3630   000F10                     u3427:
  3631   000F10  2EE8               	decfsz	wreg,f,c
  3632   000F12  D7FE               	bra	u3427
  3633   000F14  2E45               	decfsz	??_move^0,f,c
  3634   000F16  D7FC               	bra	u3427
  3635   000F18  2E46               	decfsz	(??_move+1)^0,f,c
  3636   000F1A  D7FA               	bra	u3427
  3637   000F1C  0000               	nop	
  3638   000F1E                     
  3639                           ;dc_motor.c: 106:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3640   000F1E  C0D8  F023         	movff	move@mL,turnLeft@mL
  3641   000F22  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3642   000F26  C0DA  F025         	movff	move@mR,turnLeft@mR
  3643   000F2A  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3644   000F2E  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3645   000F32  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3646   000F36  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3647   000F3A  EC26  F01D         	call	_turnLeft	;wreg free
  3648                           
  3649                           ;dc_motor.c: 107:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3650   000F3E  0E05               	movlw	5
  3651   000F40  6E46               	movwf	(??_move+1)^0,c
  3652   000F42  0E0F               	movlw	15
  3653   000F44  6E45               	movwf	??_move^0,c
  3654   000F46  0EF1               	movlw	241
  3655   000F48                     u3437:
  3656   000F48  2EE8               	decfsz	wreg,f,c
  3657   000F4A  D7FE               	bra	u3437
  3658   000F4C  2E45               	decfsz	??_move^0,f,c
  3659   000F4E  D7FC               	bra	u3437
  3660   000F50  2E46               	decfsz	(??_move+1)^0,f,c
  3661   000F52  D7FA               	bra	u3437
  3662   000F54  0000               	nop	
  3663   000F56                     
  3664                           ;dc_motor.c: 108:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3665   000F56  C0D8  F023         	movff	move@mL,turnLeft@mL
  3666   000F5A  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3667   000F5E  C0DA  F025         	movff	move@mR,turnLeft@mR
  3668   000F62  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3669   000F66  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3670   000F6A  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3671   000F6E  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3672   000F72  EC26  F01D         	call	_turnLeft	;wreg free
  3673   000F76                     
  3674                           ;dc_motor.c: 109:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3675   000F76  0E05               	movlw	5
  3676   000F78  6E46               	movwf	(??_move+1)^0,c
  3677   000F7A  0E0F               	movlw	15
  3678   000F7C  6E45               	movwf	??_move^0,c
  3679   000F7E  0EF1               	movlw	241
  3680   000F80                     u3447:
  3681   000F80  2EE8               	decfsz	wreg,f,c
  3682   000F82  D7FE               	bra	u3447
  3683   000F84  2E45               	decfsz	??_move^0,f,c
  3684   000F86  D7FC               	bra	u3447
  3685   000F88  2E46               	decfsz	(??_move+1)^0,f,c
  3686   000F8A  D7FA               	bra	u3447
  3687   000F8C  0000               	nop	
  3688                           
  3689                           ;dc_motor.c: 110:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3690   000F8E  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3691   000F92  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3692   000F96  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3693   000F9A  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3694   000F9E  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3695   000FA2  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3696   000FA6  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  3697                           
  3698                           ;dc_motor.c: 111:     }
  3699   000FAA  EF15  F00B         	goto	l569
  3700   000FAE                     l3947:
  3701                           
  3702                           ; BSR set to: 0
  3703   000FAE  0E03               	movlw	3
  3704   000FB0  19DC               	xorwf	move@color& (0+255),w,b
  3705   000FB2  A4D8               	btfss	status,2,c
  3706   000FB4  EFDE  F007         	goto	u2691
  3707   000FB8  EFE0  F007         	goto	u2690
  3708   000FBC                     u2691:
  3709   000FBC  EF7A  F008         	goto	l3965
  3710   000FC0                     u2690:
  3711   000FC0                     
  3712                           ; BSR set to: 0
  3713                           ;dc_motor.c: 114:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3714   000FC0  C0D8  F023         	movff	move@mL,reverseShort@mL
  3715   000FC4  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3716   000FC8  C0DA  F025         	movff	move@mR,reverseShort@mR
  3717   000FCC  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3718   000FD0  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3719   000FD4  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3720   000FD8  EC54  F019         	call	_reverseShort	;wreg free
  3721   000FDC                     
  3722                           ;dc_motor.c: 115:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3723   000FDC  0E05               	movlw	5
  3724   000FDE  6E46               	movwf	(??_move+1)^0,c
  3725   000FE0  0E0F               	movlw	15
  3726   000FE2  6E45               	movwf	??_move^0,c
  3727   000FE4  0EF1               	movlw	241
  3728   000FE6                     u3457:
  3729   000FE6  2EE8               	decfsz	wreg,f,c
  3730   000FE8  D7FE               	bra	u3457
  3731   000FEA  2E45               	decfsz	??_move^0,f,c
  3732   000FEC  D7FC               	bra	u3457
  3733   000FEE  2E46               	decfsz	(??_move+1)^0,f,c
  3734   000FF0  D7FA               	bra	u3457
  3735   000FF2  0000               	nop	
  3736   000FF4                     
  3737                           ;dc_motor.c: 116:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3738   000FF4  C0D8  F023         	movff	move@mL,turnLeft@mL
  3739   000FF8  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3740   000FFC  C0DA  F025         	movff	move@mR,turnLeft@mR
  3741   001000  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3742   001004  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3743   001008  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3744   00100C  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3745   001010  EC26  F01D         	call	_turnLeft	;wreg free
  3746                           
  3747                           ;dc_motor.c: 117:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3748   001014  0E05               	movlw	5
  3749   001016  6E46               	movwf	(??_move+1)^0,c
  3750   001018  0E0F               	movlw	15
  3751   00101A  6E45               	movwf	??_move^0,c
  3752   00101C  0EF1               	movlw	241
  3753   00101E                     u3467:
  3754   00101E  2EE8               	decfsz	wreg,f,c
  3755   001020  D7FE               	bra	u3467
  3756   001022  2E45               	decfsz	??_move^0,f,c
  3757   001024  D7FC               	bra	u3467
  3758   001026  2E46               	decfsz	(??_move+1)^0,f,c
  3759   001028  D7FA               	bra	u3467
  3760   00102A  0000               	nop	
  3761   00102C                     
  3762                           ;dc_motor.c: 118:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3763   00102C  C0D8  F023         	movff	move@mL,turnLeft@mL
  3764   001030  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3765   001034  C0DA  F025         	movff	move@mR,turnLeft@mR
  3766   001038  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3767   00103C  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3768   001040  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3769   001044  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3770   001048  EC26  F01D         	call	_turnLeft	;wreg free
  3771   00104C                     
  3772                           ;dc_motor.c: 119:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3773   00104C  0E05               	movlw	5
  3774   00104E  6E46               	movwf	(??_move+1)^0,c
  3775   001050  0E0F               	movlw	15
  3776   001052  6E45               	movwf	??_move^0,c
  3777   001054  0EF1               	movlw	241
  3778   001056                     u3477:
  3779   001056  2EE8               	decfsz	wreg,f,c
  3780   001058  D7FE               	bra	u3477
  3781   00105A  2E45               	decfsz	??_move^0,f,c
  3782   00105C  D7FC               	bra	u3477
  3783   00105E  2E46               	decfsz	(??_move+1)^0,f,c
  3784   001060  D7FA               	bra	u3477
  3785   001062  0000               	nop	
  3786                           
  3787                           ;dc_motor.c: 120:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3788   001064  C0D8  F023         	movff	move@mL,turnLeft@mL
  3789   001068  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3790   00106C  C0DA  F025         	movff	move@mR,turnLeft@mR
  3791   001070  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3792   001074  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3793   001078  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3794   00107C  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3795   001080  EC26  F01D         	call	_turnLeft	;wreg free
  3796   001084                     
  3797                           ;dc_motor.c: 121:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3798   001084  0E05               	movlw	5
  3799   001086  6E46               	movwf	(??_move+1)^0,c
  3800   001088  0E0F               	movlw	15
  3801   00108A  6E45               	movwf	??_move^0,c
  3802   00108C  0EF1               	movlw	241
  3803   00108E                     u3487:
  3804   00108E  2EE8               	decfsz	wreg,f,c
  3805   001090  D7FE               	bra	u3487
  3806   001092  2E45               	decfsz	??_move^0,f,c
  3807   001094  D7FC               	bra	u3487
  3808   001096  2E46               	decfsz	(??_move+1)^0,f,c
  3809   001098  D7FA               	bra	u3487
  3810   00109A  0000               	nop	
  3811   00109C                     
  3812                           ;dc_motor.c: 122:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  3813   00109C  C0D8  F023         	movff	move@mL,turnLeft@mL
  3814   0010A0  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  3815   0010A4  C0DA  F025         	movff	move@mR,turnLeft@mR
  3816   0010A8  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  3817   0010AC  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  3818   0010B0  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  3819   0010B4  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  3820   0010B8  EC26  F01D         	call	_turnLeft	;wreg free
  3821                           
  3822                           ;dc_motor.c: 123:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3823   0010BC  0E05               	movlw	5
  3824   0010BE  6E46               	movwf	(??_move+1)^0,c
  3825   0010C0  0E0F               	movlw	15
  3826   0010C2  6E45               	movwf	??_move^0,c
  3827   0010C4  0EF1               	movlw	241
  3828   0010C6                     u3497:
  3829   0010C6  2EE8               	decfsz	wreg,f,c
  3830   0010C8  D7FE               	bra	u3497
  3831   0010CA  2E45               	decfsz	??_move^0,f,c
  3832   0010CC  D7FC               	bra	u3497
  3833   0010CE  2E46               	decfsz	(??_move+1)^0,f,c
  3834   0010D0  D7FA               	bra	u3497
  3835   0010D2  0000               	nop	
  3836   0010D4                     
  3837                           ;dc_motor.c: 124:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3838   0010D4  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3839   0010D8  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3840   0010DC  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3841   0010E0  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3842   0010E4  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3843   0010E8  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3844   0010EC  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  3845                           
  3846                           ;dc_motor.c: 125:     }
  3847   0010F0  EF15  F00B         	goto	l569
  3848   0010F4                     l3965:
  3849                           
  3850                           ; BSR set to: 0
  3851   0010F4  0E04               	movlw	4
  3852   0010F6  19DC               	xorwf	move@color& (0+255),w,b
  3853   0010F8  A4D8               	btfss	status,2,c
  3854   0010FA  EF81  F008         	goto	u2701
  3855   0010FE  EF83  F008         	goto	u2700
  3856   001102                     u2701:
  3857   001102  EF01  F009         	goto	l3981
  3858   001106                     u2700:
  3859   001106                     
  3860                           ; BSR set to: 0
  3861                           ;dc_motor.c: 128:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3862   001106  C0D8  F023         	movff	move@mL,reverseShort@mL
  3863   00110A  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3864   00110E  C0DA  F025         	movff	move@mR,reverseShort@mR
  3865   001112  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3866   001116  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3867   00111A  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3868   00111E  EC54  F019         	call	_reverseShort	;wreg free
  3869   001122                     
  3870                           ;dc_motor.c: 129:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3871   001122  0E05               	movlw	5
  3872   001124  6E46               	movwf	(??_move+1)^0,c
  3873   001126  0E0F               	movlw	15
  3874   001128  6E45               	movwf	??_move^0,c
  3875   00112A  0EF1               	movlw	241
  3876   00112C                     u3507:
  3877   00112C  2EE8               	decfsz	wreg,f,c
  3878   00112E  D7FE               	bra	u3507
  3879   001130  2E45               	decfsz	??_move^0,f,c
  3880   001132  D7FC               	bra	u3507
  3881   001134  2E46               	decfsz	(??_move+1)^0,f,c
  3882   001136  D7FA               	bra	u3507
  3883   001138  0000               	nop	
  3884   00113A                     
  3885                           ;dc_motor.c: 130:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  3886   00113A  C0D8  F023         	movff	move@mL,reverseOneSquare@mL
  3887   00113E  C0D9  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  3888   001142  C0DA  F025         	movff	move@mR,reverseOneSquare@mR
  3889   001146  C0DB  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  3890   00114A  C0E2  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  3891   00114E  C0E3  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  3892   001152  C0E4  F029         	movff	move@straightRamp,reverseOneSquare@straightRamp
  3893   001156  EC43  F01B         	call	_reverseOneSquare	;wreg free
  3894                           
  3895                           ;dc_motor.c: 131:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3896   00115A  0E05               	movlw	5
  3897   00115C  6E46               	movwf	(??_move+1)^0,c
  3898   00115E  0E0F               	movlw	15
  3899   001160  6E45               	movwf	??_move^0,c
  3900   001162  0EF1               	movlw	241
  3901   001164                     u3517:
  3902   001164  2EE8               	decfsz	wreg,f,c
  3903   001166  D7FE               	bra	u3517
  3904   001168  2E45               	decfsz	??_move^0,f,c
  3905   00116A  D7FC               	bra	u3517
  3906   00116C  2E46               	decfsz	(??_move+1)^0,f,c
  3907   00116E  D7FA               	bra	u3517
  3908   001170  0000               	nop	
  3909   001172                     
  3910                           ;dc_motor.c: 132:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3911   001172  C0D8  F023         	movff	move@mL,turnRight@mL
  3912   001176  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3913   00117A  C0DA  F025         	movff	move@mR,turnRight@mR
  3914   00117E  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3915   001182  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3916   001186  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  3917   00118A  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  3918   00118E  EC39  F01C         	call	_turnRight	;wreg free
  3919   001192                     
  3920                           ;dc_motor.c: 133:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3921   001192  0E05               	movlw	5
  3922   001194  6E46               	movwf	(??_move+1)^0,c
  3923   001196  0E0F               	movlw	15
  3924   001198  6E45               	movwf	??_move^0,c
  3925   00119A  0EF1               	movlw	241
  3926   00119C                     u3527:
  3927   00119C  2EE8               	decfsz	wreg,f,c
  3928   00119E  D7FE               	bra	u3527
  3929   0011A0  2E45               	decfsz	??_move^0,f,c
  3930   0011A2  D7FC               	bra	u3527
  3931   0011A4  2E46               	decfsz	(??_move+1)^0,f,c
  3932   0011A6  D7FA               	bra	u3527
  3933   0011A8  0000               	nop	
  3934                           
  3935                           ;dc_motor.c: 134:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  3936   0011AA  C0D8  F023         	movff	move@mL,turnRight@mL
  3937   0011AE  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  3938   0011B2  C0DA  F025         	movff	move@mR,turnRight@mR
  3939   0011B6  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  3940   0011BA  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  3941   0011BE  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  3942   0011C2  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  3943   0011C6  EC39  F01C         	call	_turnRight	;wreg free
  3944   0011CA                     
  3945                           ;dc_motor.c: 135:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3946   0011CA  0E05               	movlw	5
  3947   0011CC  6E46               	movwf	(??_move+1)^0,c
  3948   0011CE  0E0F               	movlw	15
  3949   0011D0  6E45               	movwf	??_move^0,c
  3950   0011D2  0EF1               	movlw	241
  3951   0011D4                     u3537:
  3952   0011D4  2EE8               	decfsz	wreg,f,c
  3953   0011D6  D7FE               	bra	u3537
  3954   0011D8  2E45               	decfsz	??_move^0,f,c
  3955   0011DA  D7FC               	bra	u3537
  3956   0011DC  2E46               	decfsz	(??_move+1)^0,f,c
  3957   0011DE  D7FA               	bra	u3537
  3958   0011E0  0000               	nop	
  3959   0011E2                     
  3960                           ;dc_motor.c: 136:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  3961   0011E2  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  3962   0011E6  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  3963   0011EA  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  3964   0011EE  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  3965   0011F2  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  3966   0011F6  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  3967   0011FA  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  3968                           
  3969                           ;dc_motor.c: 137:     }
  3970   0011FE  EF15  F00B         	goto	l569
  3971   001202                     l3981:
  3972                           
  3973                           ; BSR set to: 0
  3974   001202  0E05               	movlw	5
  3975   001204  19DC               	xorwf	move@color& (0+255),w,b
  3976   001206  A4D8               	btfss	status,2,c
  3977   001208  EF08  F009         	goto	u2711
  3978   00120C  EF0A  F009         	goto	u2710
  3979   001210                     u2711:
  3980   001210  EF88  F009         	goto	l3997
  3981   001214                     u2710:
  3982   001214                     
  3983                           ; BSR set to: 0
  3984                           ;dc_motor.c: 140:         reverseShort(mL, mR, straightSpeed, straightRamp);
  3985   001214  C0D8  F023         	movff	move@mL,reverseShort@mL
  3986   001218  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  3987   00121C  C0DA  F025         	movff	move@mR,reverseShort@mR
  3988   001220  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  3989   001224  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  3990   001228  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  3991   00122C  EC54  F019         	call	_reverseShort	;wreg free
  3992   001230                     
  3993                           ;dc_motor.c: 141:         _delay((unsigned long)((50)*(64000000/4000.0)));
  3994   001230  0E05               	movlw	5
  3995   001232  6E46               	movwf	(??_move+1)^0,c
  3996   001234  0E0F               	movlw	15
  3997   001236  6E45               	movwf	??_move^0,c
  3998   001238  0EF1               	movlw	241
  3999   00123A                     u3547:
  4000   00123A  2EE8               	decfsz	wreg,f,c
  4001   00123C  D7FE               	bra	u3547
  4002   00123E  2E45               	decfsz	??_move^0,f,c
  4003   001240  D7FC               	bra	u3547
  4004   001242  2E46               	decfsz	(??_move+1)^0,f,c
  4005   001244  D7FA               	bra	u3547
  4006   001246  0000               	nop	
  4007   001248                     
  4008                           ;dc_motor.c: 142:         reverseOneSquare(mL, mR, straightSpeed, reverseDuration, strai
      +                          ghtRamp);
  4009   001248  C0D8  F023         	movff	move@mL,reverseOneSquare@mL
  4010   00124C  C0D9  F024         	movff	move@mL+1,reverseOneSquare@mL+1
  4011   001250  C0DA  F025         	movff	move@mR,reverseOneSquare@mR
  4012   001254  C0DB  F026         	movff	move@mR+1,reverseOneSquare@mR+1
  4013   001258  C0E2  F027         	movff	move@straightSpeed,reverseOneSquare@straightSpeed
  4014   00125C  C0E3  F028         	movff	move@reverseDuration,reverseOneSquare@reverseDuration
  4015   001260  C0E4  F029         	movff	move@straightRamp,reverseOneSquare@straightRamp
  4016   001264  EC43  F01B         	call	_reverseOneSquare	;wreg free
  4017                           
  4018                           ;dc_motor.c: 143:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4019   001268  0E05               	movlw	5
  4020   00126A  6E46               	movwf	(??_move+1)^0,c
  4021   00126C  0E0F               	movlw	15
  4022   00126E  6E45               	movwf	??_move^0,c
  4023   001270  0EF1               	movlw	241
  4024   001272                     u3557:
  4025   001272  2EE8               	decfsz	wreg,f,c
  4026   001274  D7FE               	bra	u3557
  4027   001276  2E45               	decfsz	??_move^0,f,c
  4028   001278  D7FC               	bra	u3557
  4029   00127A  2E46               	decfsz	(??_move+1)^0,f,c
  4030   00127C  D7FA               	bra	u3557
  4031   00127E  0000               	nop	
  4032   001280                     
  4033                           ;dc_motor.c: 144:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4034   001280  C0D8  F023         	movff	move@mL,turnLeft@mL
  4035   001284  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  4036   001288  C0DA  F025         	movff	move@mR,turnLeft@mR
  4037   00128C  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  4038   001290  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  4039   001294  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  4040   001298  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  4041   00129C  EC26  F01D         	call	_turnLeft	;wreg free
  4042   0012A0                     
  4043                           ;dc_motor.c: 145:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4044   0012A0  0E05               	movlw	5
  4045   0012A2  6E46               	movwf	(??_move+1)^0,c
  4046   0012A4  0E0F               	movlw	15
  4047   0012A6  6E45               	movwf	??_move^0,c
  4048   0012A8  0EF1               	movlw	241
  4049   0012AA                     u3567:
  4050   0012AA  2EE8               	decfsz	wreg,f,c
  4051   0012AC  D7FE               	bra	u3567
  4052   0012AE  2E45               	decfsz	??_move^0,f,c
  4053   0012B0  D7FC               	bra	u3567
  4054   0012B2  2E46               	decfsz	(??_move+1)^0,f,c
  4055   0012B4  D7FA               	bra	u3567
  4056   0012B6  0000               	nop	
  4057                           
  4058                           ;dc_motor.c: 146:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4059   0012B8  C0D8  F023         	movff	move@mL,turnLeft@mL
  4060   0012BC  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  4061   0012C0  C0DA  F025         	movff	move@mR,turnLeft@mR
  4062   0012C4  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  4063   0012C8  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  4064   0012CC  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  4065   0012D0  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  4066   0012D4  EC26  F01D         	call	_turnLeft	;wreg free
  4067   0012D8                     
  4068                           ;dc_motor.c: 147:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4069   0012D8  0E05               	movlw	5
  4070   0012DA  6E46               	movwf	(??_move+1)^0,c
  4071   0012DC  0E0F               	movlw	15
  4072   0012DE  6E45               	movwf	??_move^0,c
  4073   0012E0  0EF1               	movlw	241
  4074   0012E2                     u3577:
  4075   0012E2  2EE8               	decfsz	wreg,f,c
  4076   0012E4  D7FE               	bra	u3577
  4077   0012E6  2E45               	decfsz	??_move^0,f,c
  4078   0012E8  D7FC               	bra	u3577
  4079   0012EA  2E46               	decfsz	(??_move+1)^0,f,c
  4080   0012EC  D7FA               	bra	u3577
  4081   0012EE  0000               	nop	
  4082   0012F0                     
  4083                           ;dc_motor.c: 148:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4084   0012F0  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  4085   0012F4  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  4086   0012F8  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  4087   0012FC  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  4088   001300  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  4089   001304  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  4090   001308  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  4091                           
  4092                           ;dc_motor.c: 149:     }
  4093   00130C  EF15  F00B         	goto	l569
  4094   001310                     l3997:
  4095                           
  4096                           ; BSR set to: 0
  4097   001310  0E06               	movlw	6
  4098   001312  19DC               	xorwf	move@color& (0+255),w,b
  4099   001314  A4D8               	btfss	status,2,c
  4100   001316  EF8F  F009         	goto	u2721
  4101   00131A  EF91  F009         	goto	u2720
  4102   00131E                     u2721:
  4103   00131E  EF0F  F00A         	goto	l4013
  4104   001322                     u2720:
  4105   001322                     
  4106                           ; BSR set to: 0
  4107                           ;dc_motor.c: 152:         reverseShort(mL, mR, straightSpeed, straightRamp);
  4108   001322  C0D8  F023         	movff	move@mL,reverseShort@mL
  4109   001326  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  4110   00132A  C0DA  F025         	movff	move@mR,reverseShort@mR
  4111   00132E  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  4112   001332  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  4113   001336  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  4114   00133A  EC54  F019         	call	_reverseShort	;wreg free
  4115   00133E                     
  4116                           ;dc_motor.c: 153:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4117   00133E  0E05               	movlw	5
  4118   001340  6E46               	movwf	(??_move+1)^0,c
  4119   001342  0E0F               	movlw	15
  4120   001344  6E45               	movwf	??_move^0,c
  4121   001346  0EF1               	movlw	241
  4122   001348                     u3587:
  4123   001348  2EE8               	decfsz	wreg,f,c
  4124   00134A  D7FE               	bra	u3587
  4125   00134C  2E45               	decfsz	??_move^0,f,c
  4126   00134E  D7FC               	bra	u3587
  4127   001350  2E46               	decfsz	(??_move+1)^0,f,c
  4128   001352  D7FA               	bra	u3587
  4129   001354  0000               	nop	
  4130   001356                     
  4131                           ;dc_motor.c: 154:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4132   001356  C0D8  F023         	movff	move@mL,turnRight@mL
  4133   00135A  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  4134   00135E  C0DA  F025         	movff	move@mR,turnRight@mR
  4135   001362  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  4136   001366  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  4137   00136A  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  4138   00136E  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  4139   001372  EC39  F01C         	call	_turnRight	;wreg free
  4140                           
  4141                           ;dc_motor.c: 155:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4142   001376  0E05               	movlw	5
  4143   001378  6E46               	movwf	(??_move+1)^0,c
  4144   00137A  0E0F               	movlw	15
  4145   00137C  6E45               	movwf	??_move^0,c
  4146   00137E  0EF1               	movlw	241
  4147   001380                     u3597:
  4148   001380  2EE8               	decfsz	wreg,f,c
  4149   001382  D7FE               	bra	u3597
  4150   001384  2E45               	decfsz	??_move^0,f,c
  4151   001386  D7FC               	bra	u3597
  4152   001388  2E46               	decfsz	(??_move+1)^0,f,c
  4153   00138A  D7FA               	bra	u3597
  4154   00138C  0000               	nop	
  4155   00138E                     
  4156                           ;dc_motor.c: 156:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4157   00138E  C0D8  F023         	movff	move@mL,turnRight@mL
  4158   001392  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  4159   001396  C0DA  F025         	movff	move@mR,turnRight@mR
  4160   00139A  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  4161   00139E  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  4162   0013A2  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  4163   0013A6  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  4164   0013AA  EC39  F01C         	call	_turnRight	;wreg free
  4165   0013AE                     
  4166                           ;dc_motor.c: 157:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4167   0013AE  0E05               	movlw	5
  4168   0013B0  6E46               	movwf	(??_move+1)^0,c
  4169   0013B2  0E0F               	movlw	15
  4170   0013B4  6E45               	movwf	??_move^0,c
  4171   0013B6  0EF1               	movlw	241
  4172   0013B8                     u3607:
  4173   0013B8  2EE8               	decfsz	wreg,f,c
  4174   0013BA  D7FE               	bra	u3607
  4175   0013BC  2E45               	decfsz	??_move^0,f,c
  4176   0013BE  D7FC               	bra	u3607
  4177   0013C0  2E46               	decfsz	(??_move+1)^0,f,c
  4178   0013C2  D7FA               	bra	u3607
  4179   0013C4  0000               	nop	
  4180                           
  4181                           ;dc_motor.c: 158:         turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  4182   0013C6  C0D8  F023         	movff	move@mL,turnRight@mL
  4183   0013CA  C0D9  F024         	movff	move@mL+1,turnRight@mL+1
  4184   0013CE  C0DA  F025         	movff	move@mR,turnRight@mR
  4185   0013D2  C0DB  F026         	movff	move@mR+1,turnRight@mR+1
  4186   0013D6  C0E5  F027         	movff	move@turnSpeed,turnRight@turnSpeed
  4187   0013DA  C0E6  F028         	movff	move@turnDuration,turnRight@turnDuration
  4188   0013DE  C0E7  F029         	movff	move@turnRamp,turnRight@turnRamp
  4189   0013E2  EC39  F01C         	call	_turnRight	;wreg free
  4190   0013E6                     
  4191                           ;dc_motor.c: 159:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4192   0013E6  0E05               	movlw	5
  4193   0013E8  6E46               	movwf	(??_move+1)^0,c
  4194   0013EA  0E0F               	movlw	15
  4195   0013EC  6E45               	movwf	??_move^0,c
  4196   0013EE  0EF1               	movlw	241
  4197   0013F0                     u3617:
  4198   0013F0  2EE8               	decfsz	wreg,f,c
  4199   0013F2  D7FE               	bra	u3617
  4200   0013F4  2E45               	decfsz	??_move^0,f,c
  4201   0013F6  D7FC               	bra	u3617
  4202   0013F8  2E46               	decfsz	(??_move+1)^0,f,c
  4203   0013FA  D7FA               	bra	u3617
  4204   0013FC  0000               	nop	
  4205   0013FE                     
  4206                           ;dc_motor.c: 160:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4207   0013FE  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  4208   001402  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  4209   001406  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  4210   00140A  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  4211   00140E  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  4212   001412  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  4213   001416  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  4214                           
  4215                           ;dc_motor.c: 161:     }
  4216   00141A  EF15  F00B         	goto	l569
  4217   00141E                     l4013:
  4218                           
  4219                           ; BSR set to: 0
  4220   00141E  0E07               	movlw	7
  4221   001420  19DC               	xorwf	move@color& (0+255),w,b
  4222   001422  A4D8               	btfss	status,2,c
  4223   001424  EF16  F00A         	goto	u2731
  4224   001428  EF18  F00A         	goto	u2730
  4225   00142C                     u2731:
  4226   00142C  EF96  F00A         	goto	l4029
  4227   001430                     u2730:
  4228   001430                     
  4229                           ; BSR set to: 0
  4230                           ;dc_motor.c: 164:         reverseShort(mL, mR, straightSpeed, straightRamp);
  4231   001430  C0D8  F023         	movff	move@mL,reverseShort@mL
  4232   001434  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  4233   001438  C0DA  F025         	movff	move@mR,reverseShort@mR
  4234   00143C  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  4235   001440  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  4236   001444  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  4237   001448  EC54  F019         	call	_reverseShort	;wreg free
  4238   00144C                     
  4239                           ;dc_motor.c: 165:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4240   00144C  0E05               	movlw	5
  4241   00144E  6E46               	movwf	(??_move+1)^0,c
  4242   001450  0E0F               	movlw	15
  4243   001452  6E45               	movwf	??_move^0,c
  4244   001454  0EF1               	movlw	241
  4245   001456                     u3627:
  4246   001456  2EE8               	decfsz	wreg,f,c
  4247   001458  D7FE               	bra	u3627
  4248   00145A  2E45               	decfsz	??_move^0,f,c
  4249   00145C  D7FC               	bra	u3627
  4250   00145E  2E46               	decfsz	(??_move+1)^0,f,c
  4251   001460  D7FA               	bra	u3627
  4252   001462  0000               	nop	
  4253   001464                     
  4254                           ;dc_motor.c: 166:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4255   001464  C0D8  F023         	movff	move@mL,turnLeft@mL
  4256   001468  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  4257   00146C  C0DA  F025         	movff	move@mR,turnLeft@mR
  4258   001470  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  4259   001474  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  4260   001478  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  4261   00147C  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  4262   001480  EC26  F01D         	call	_turnLeft	;wreg free
  4263                           
  4264                           ;dc_motor.c: 167:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4265   001484  0E05               	movlw	5
  4266   001486  6E46               	movwf	(??_move+1)^0,c
  4267   001488  0E0F               	movlw	15
  4268   00148A  6E45               	movwf	??_move^0,c
  4269   00148C  0EF1               	movlw	241
  4270   00148E                     u3637:
  4271   00148E  2EE8               	decfsz	wreg,f,c
  4272   001490  D7FE               	bra	u3637
  4273   001492  2E45               	decfsz	??_move^0,f,c
  4274   001494  D7FC               	bra	u3637
  4275   001496  2E46               	decfsz	(??_move+1)^0,f,c
  4276   001498  D7FA               	bra	u3637
  4277   00149A  0000               	nop	
  4278   00149C                     
  4279                           ;dc_motor.c: 168:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4280   00149C  C0D8  F023         	movff	move@mL,turnLeft@mL
  4281   0014A0  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  4282   0014A4  C0DA  F025         	movff	move@mR,turnLeft@mR
  4283   0014A8  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  4284   0014AC  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  4285   0014B0  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  4286   0014B4  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  4287   0014B8  EC26  F01D         	call	_turnLeft	;wreg free
  4288   0014BC                     
  4289                           ;dc_motor.c: 169:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4290   0014BC  0E05               	movlw	5
  4291   0014BE  6E46               	movwf	(??_move+1)^0,c
  4292   0014C0  0E0F               	movlw	15
  4293   0014C2  6E45               	movwf	??_move^0,c
  4294   0014C4  0EF1               	movlw	241
  4295   0014C6                     u3647:
  4296   0014C6  2EE8               	decfsz	wreg,f,c
  4297   0014C8  D7FE               	bra	u3647
  4298   0014CA  2E45               	decfsz	??_move^0,f,c
  4299   0014CC  D7FC               	bra	u3647
  4300   0014CE  2E46               	decfsz	(??_move+1)^0,f,c
  4301   0014D0  D7FA               	bra	u3647
  4302   0014D2  0000               	nop	
  4303                           
  4304                           ;dc_motor.c: 170:         turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4305   0014D4  C0D8  F023         	movff	move@mL,turnLeft@mL
  4306   0014D8  C0D9  F024         	movff	move@mL+1,turnLeft@mL+1
  4307   0014DC  C0DA  F025         	movff	move@mR,turnLeft@mR
  4308   0014E0  C0DB  F026         	movff	move@mR+1,turnLeft@mR+1
  4309   0014E4  C0E5  F027         	movff	move@turnSpeed,turnLeft@turnSpeed
  4310   0014E8  C0E6  F028         	movff	move@turnDuration,turnLeft@turnDuration
  4311   0014EC  C0E7  F029         	movff	move@turnRamp,turnLeft@turnRamp
  4312   0014F0  EC26  F01D         	call	_turnLeft	;wreg free
  4313   0014F4                     
  4314                           ;dc_motor.c: 171:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4315   0014F4  0E05               	movlw	5
  4316   0014F6  6E46               	movwf	(??_move+1)^0,c
  4317   0014F8  0E0F               	movlw	15
  4318   0014FA  6E45               	movwf	??_move^0,c
  4319   0014FC  0EF1               	movlw	241
  4320   0014FE                     u3657:
  4321   0014FE  2EE8               	decfsz	wreg,f,c
  4322   001500  D7FE               	bra	u3657
  4323   001502  2E45               	decfsz	??_move^0,f,c
  4324   001504  D7FC               	bra	u3657
  4325   001506  2E46               	decfsz	(??_move+1)^0,f,c
  4326   001508  D7FA               	bra	u3657
  4327   00150A  0000               	nop	
  4328   00150C                     
  4329                           ;dc_motor.c: 172:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4330   00150C  C0D8  F023         	movff	move@mL,fullSpeedAhead@mL
  4331   001510  C0D9  F024         	movff	move@mL+1,fullSpeedAhead@mL+1
  4332   001514  C0DA  F025         	movff	move@mR,fullSpeedAhead@mR
  4333   001518  C0DB  F026         	movff	move@mR+1,fullSpeedAhead@mR+1
  4334   00151C  C0E2  F027         	movff	move@straightSpeed,fullSpeedAhead@straightSpeed
  4335   001520  C0E4  F028         	movff	move@straightRamp,fullSpeedAhead@straightRamp
  4336   001524  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  4337                           
  4338                           ;dc_motor.c: 173:     }
  4339   001528  EF15  F00B         	goto	l569
  4340   00152C                     l4029:
  4341                           
  4342                           ; BSR set to: 0
  4343   00152C  0E08               	movlw	8
  4344   00152E  19DC               	xorwf	move@color& (0+255),w,b
  4345   001530  A4D8               	btfss	status,2,c
  4346   001532  EF9D  F00A         	goto	u2741
  4347   001536  EF9F  F00A         	goto	u2740
  4348   00153A                     u2741:
  4349   00153A  EFDB  F00A         	goto	l4037
  4350   00153E                     u2740:
  4351   00153E                     
  4352                           ; BSR set to: 0
  4353                           ;dc_motor.c: 176:         reverseShort(mL, mR, straightSpeed, straightRamp);
  4354   00153E  C0D8  F023         	movff	move@mL,reverseShort@mL
  4355   001542  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  4356   001546  C0DA  F025         	movff	move@mR,reverseShort@mR
  4357   00154A  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  4358   00154E  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  4359   001552  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  4360   001556  EC54  F019         	call	_reverseShort	;wreg free
  4361   00155A                     
  4362                           ;dc_motor.c: 177:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4363   00155A  0E05               	movlw	5
  4364   00155C  6E46               	movwf	(??_move+1)^0,c
  4365   00155E  0E0F               	movlw	15
  4366   001560  6E45               	movwf	??_move^0,c
  4367   001562  0EF1               	movlw	241
  4368   001564                     u3667:
  4369   001564  2EE8               	decfsz	wreg,f,c
  4370   001566  D7FE               	bra	u3667
  4371   001568  2E45               	decfsz	??_move^0,f,c
  4372   00156A  D7FC               	bra	u3667
  4373   00156C  2E46               	decfsz	(??_move+1)^0,f,c
  4374   00156E  D7FA               	bra	u3667
  4375   001570  0000               	nop	
  4376   001572                     
  4377                           ;dc_motor.c: 178:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  4378   001572  C0D8  F031         	movff	move@mL,returnHome@mL
  4379   001576  C0D9  F032         	movff	move@mL+1,returnHome@mL+1
  4380   00157A  C0DA  F033         	movff	move@mR,returnHome@mR
  4381   00157E  C0DB  F034         	movff	move@mR+1,returnHome@mR+1
  4382   001582  C0DD  F035         	movff	move@moveSequence,returnHome@moveSequence
  4383   001586  C0DE  F036         	movff	move@moveSequence+1,returnHome@moveSequence+1
  4384   00158A  C0DF  F037         	movff	move@straightTime,returnHome@straightTime
  4385   00158E  C0E0  F038         	movff	move@straightTime+1,returnHome@straightTime+1
  4386   001592  C0E1  F039         	movff	move@curMove,returnHome@curMove
  4387   001596  C0E2  F03A         	movff	move@straightSpeed,returnHome@straightSpeed
  4388   00159A  C0E3  F03B         	movff	move@reverseDuration,returnHome@reverseDuration
  4389   00159E  C0E4  F03C         	movff	move@straightRamp,returnHome@straightRamp
  4390   0015A2  C0E5  F03D         	movff	move@turnSpeed,returnHome@turnSpeed
  4391   0015A6  C0E6  F03E         	movff	move@turnDuration,returnHome@turnDuration
  4392   0015AA  C0E7  F03F         	movff	move@turnRamp,returnHome@turnRamp
  4393   0015AE  EC16  F00B         	call	_returnHome	;wreg free
  4394                           
  4395                           ;dc_motor.c: 179:     }
  4396   0015B2  EF15  F00B         	goto	l569
  4397   0015B6                     l4037:
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;dc_motor.c: 182:         reverseShort(mL, mR, straightSpeed, straightRamp);
  4401   0015B6  C0D8  F023         	movff	move@mL,reverseShort@mL
  4402   0015BA  C0D9  F024         	movff	move@mL+1,reverseShort@mL+1
  4403   0015BE  C0DA  F025         	movff	move@mR,reverseShort@mR
  4404   0015C2  C0DB  F026         	movff	move@mR+1,reverseShort@mR+1
  4405   0015C6  C0E2  F027         	movff	move@straightSpeed,reverseShort@straightSpeed
  4406   0015CA  C0E4  F028         	movff	move@straightRamp,reverseShort@straightRamp
  4407   0015CE  EC54  F019         	call	_reverseShort	;wreg free
  4408   0015D2                     
  4409                           ;dc_motor.c: 183:         _delay((unsigned long)((50)*(64000000/4000.0)));
  4410   0015D2  0E05               	movlw	5
  4411   0015D4  6E46               	movwf	(??_move+1)^0,c
  4412   0015D6  0E0F               	movlw	15
  4413   0015D8  6E45               	movwf	??_move^0,c
  4414   0015DA  0EF1               	movlw	241
  4415   0015DC                     u3677:
  4416   0015DC  2EE8               	decfsz	wreg,f,c
  4417   0015DE  D7FE               	bra	u3677
  4418   0015E0  2E45               	decfsz	??_move^0,f,c
  4419   0015E2  D7FC               	bra	u3677
  4420   0015E4  2E46               	decfsz	(??_move+1)^0,f,c
  4421   0015E6  D7FA               	bra	u3677
  4422   0015E8  0000               	nop	
  4423   0015EA                     
  4424                           ;dc_motor.c: 184:         returnHome(mL, mR, moveSequence, straightTime, curMove, straig
      +                          htSpeed, reverseDuration, straightRamp, turnSpeed, turnDuration, turnRamp);
  4425   0015EA  C0D8  F031         	movff	move@mL,returnHome@mL
  4426   0015EE  C0D9  F032         	movff	move@mL+1,returnHome@mL+1
  4427   0015F2  C0DA  F033         	movff	move@mR,returnHome@mR
  4428   0015F6  C0DB  F034         	movff	move@mR+1,returnHome@mR+1
  4429   0015FA  C0DD  F035         	movff	move@moveSequence,returnHome@moveSequence
  4430   0015FE  C0DE  F036         	movff	move@moveSequence+1,returnHome@moveSequence+1
  4431   001602  C0DF  F037         	movff	move@straightTime,returnHome@straightTime
  4432   001606  C0E0  F038         	movff	move@straightTime+1,returnHome@straightTime+1
  4433   00160A  C0E1  F039         	movff	move@curMove,returnHome@curMove
  4434   00160E  C0E2  F03A         	movff	move@straightSpeed,returnHome@straightSpeed
  4435   001612  C0E3  F03B         	movff	move@reverseDuration,returnHome@reverseDuration
  4436   001616  C0E4  F03C         	movff	move@straightRamp,returnHome@straightRamp
  4437   00161A  C0E5  F03D         	movff	move@turnSpeed,returnHome@turnSpeed
  4438   00161E  C0E6  F03E         	movff	move@turnDuration,returnHome@turnDuration
  4439   001622  C0E7  F03F         	movff	move@turnRamp,returnHome@turnRamp
  4440   001626  EC16  F00B         	call	_returnHome	;wreg free
  4441   00162A                     l569:
  4442   00162A  0012               	return		;funcret
  4443   00162C                     __end_of_move:
  4444                           	callstack 0
  4445                           
  4446 ;; *************** function _reverseShort *****************
  4447 ;; Defined at:
  4448 ;;		line 563 in file "dc_motor.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  4451 ;;		 -> main@motorL(10), 
  4452 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  4453 ;;		 -> main@motorR(10), 
  4454 ;;  straightSpee    1   38[COMRAM] unsigned char 
  4455 ;;  straightRamp    1   39[COMRAM] unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  cur_power       2   46[COMRAM] int 
  4458 ;;  i               2   44[COMRAM] int 
  4459 ;;  reverseDurat    1   43[COMRAM] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4469 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4472 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4473 ;;Total ram usage:       14 bytes
  4474 ;; Hardware stack levels used: 1
  4475 ;; Hardware stack levels required when called: 7
  4476 ;; This function calls:
  4477 ;;		_setMotorPWM
  4478 ;; This function is called by:
  4479 ;;		_move
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text10
  4484   0032A8                     __ptext10:
  4485                           	callstack 0
  4486   0032A8                     _reverseShort:
  4487                           	callstack 22
  4488   0032A8                     
  4489                           ;dc_motor.c: 563: void reverseShort(DC_motor *mL, DC_motor *mR, char straightSpeed, unsi
      +                          gned char straightRamp);dc_motor.c: 564: {;dc_motor.c: 565:     unsigned char reverseDur
      +                          ation = 20;
  4490   0032A8  0E14               	movlw	20
  4491   0032AA  6E2C               	movwf	reverseShort@reverseDuration^0,c
  4492   0032AC                     
  4493                           ;dc_motor.c: 567:     mL->direction = 0;
  4494   0032AC  EE20 F001          	lfsr	2,1
  4495   0032B0  5023               	movf	reverseShort@mL^0,w,c
  4496   0032B2  26D9               	addwf	fsr2l,f,c
  4497   0032B4  5024               	movf	(reverseShort@mL+1)^0,w,c
  4498   0032B6  22DA               	addwfc	fsr2h,f,c
  4499   0032B8  6ADF               	clrf	indf2,c
  4500   0032BA                     
  4501                           ;dc_motor.c: 568:     mR->direction = 0;
  4502   0032BA  EE20 F001          	lfsr	2,1
  4503   0032BE  5025               	movf	reverseShort@mR^0,w,c
  4504   0032C0  26D9               	addwf	fsr2l,f,c
  4505   0032C2  5026               	movf	(reverseShort@mR+1)^0,w,c
  4506   0032C4  22DA               	addwfc	fsr2h,f,c
  4507   0032C6  6ADF               	clrf	indf2,c
  4508                           
  4509                           ;dc_motor.c: 569:     int i;;dc_motor.c: 570:     int cur_power;;dc_motor.c: 571:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  4510   0032C8  0E00               	movlw	0
  4511   0032CA  6E30               	movwf	(reverseShort@cur_power+1)^0,c
  4512   0032CC  0E01               	movlw	1
  4513   0032CE  6E2F               	movwf	reverseShort@cur_power^0,c
  4514   0032D0  EFB4  F019         	goto	l3379
  4515   0032D4                     l3365:
  4516                           
  4517                           ;dc_motor.c: 572:         mL->power = cur_power+mL->compensation;
  4518   0032D4  EE20 F009          	lfsr	2,9
  4519   0032D8  5023               	movf	reverseShort@mL^0,w,c
  4520   0032DA  26D9               	addwf	fsr2l,f,c
  4521   0032DC  5024               	movf	(reverseShort@mL+1)^0,w,c
  4522   0032DE  22DA               	addwfc	fsr2h,f,c
  4523   0032E0  50DF               	movf	indf2,w,c
  4524   0032E2  242F               	addwf	reverseShort@cur_power^0,w,c
  4525   0032E4  C023  FFD9         	movff	reverseShort@mL,fsr2l
  4526   0032E8  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  4527   0032EC  6EDF               	movwf	indf2,c
  4528                           
  4529                           ;dc_motor.c: 573:         mR->power = cur_power+mR->compensation;
  4530   0032EE  EE20 F009          	lfsr	2,9
  4531   0032F2  5025               	movf	reverseShort@mR^0,w,c
  4532   0032F4  26D9               	addwf	fsr2l,f,c
  4533   0032F6  5026               	movf	(reverseShort@mR+1)^0,w,c
  4534   0032F8  22DA               	addwfc	fsr2h,f,c
  4535   0032FA  50DF               	movf	indf2,w,c
  4536   0032FC  242F               	addwf	reverseShort@cur_power^0,w,c
  4537   0032FE  C025  FFD9         	movff	reverseShort@mR,fsr2l
  4538   003302  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  4539   003306  6EDF               	movwf	indf2,c
  4540   003308                     
  4541                           ;dc_motor.c: 574:         setMotorPWM(mL);
  4542   003308  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  4543   00330C  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  4544   003310  EC13  F01E         	call	_setMotorPWM	;wreg free
  4545   003314                     
  4546                           ;dc_motor.c: 575:         setMotorPWM(mR);
  4547   003314  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  4548   003318  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  4549   00331C  EC13  F01E         	call	_setMotorPWM	;wreg free
  4550   003320                     
  4551                           ;dc_motor.c: 576:         for (i=0;i<straightRamp;i++) {
  4552   003320  0E00               	movlw	0
  4553   003322  6E2E               	movwf	(reverseShort@i+1)^0,c
  4554   003324  0E00               	movlw	0
  4555   003326  6E2D               	movwf	reverseShort@i^0,c
  4556   003328  EFA0  F019         	goto	l723
  4557   00332C                     l3373:
  4558                           
  4559                           ;dc_motor.c: 577:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4560   00332C  0E68               	movlw	104
  4561   00332E  6E29               	movwf	??_reverseShort^0,c
  4562   003330  0EE4               	movlw	228
  4563   003332                     u3687:
  4564   003332  2EE8               	decfsz	wreg,f,c
  4565   003334  D7FE               	bra	u3687
  4566   003336  2E29               	decfsz	??_reverseShort^0,f,c
  4567   003338  D7FC               	bra	u3687
  4568   00333A  D000               	nop2	
  4569   00333C                     
  4570                           ;dc_motor.c: 578:         }
  4571   00333C  4A2D               	infsnz	reverseShort@i^0,f,c
  4572   00333E  2A2E               	incf	(reverseShort@i+1)^0,f,c
  4573   003340                     l723:
  4574   003340  5028               	movf	reverseShort@straightRamp^0,w,c
  4575   003342  6E29               	movwf	??_reverseShort^0,c
  4576   003344  6A2A               	clrf	(??_reverseShort+1)^0,c
  4577   003346  5029               	movf	??_reverseShort^0,w,c
  4578   003348  5C2D               	subwf	reverseShort@i^0,w,c
  4579   00334A  502E               	movf	(reverseShort@i+1)^0,w,c
  4580   00334C  0A80               	xorlw	128
  4581   00334E  6E2B               	movwf	(??_reverseShort+2)^0,c
  4582   003350  502A               	movf	(??_reverseShort+1)^0,w,c
  4583   003352  0A80               	xorlw	128
  4584   003354  582B               	subwfb	(??_reverseShort+2)^0,w,c
  4585   003356  A0D8               	btfss	status,0,c
  4586   003358  EFB0  F019         	goto	u2061
  4587   00335C  EFB2  F019         	goto	u2060
  4588   003360                     u2061:
  4589   003360  EF96  F019         	goto	l3373
  4590   003364                     u2060:
  4591   003364                     
  4592                           ;dc_motor.c: 579:     }
  4593   003364  4A2F               	infsnz	reverseShort@cur_power^0,f,c
  4594   003366  2A30               	incf	(reverseShort@cur_power+1)^0,f,c
  4595   003368                     l3379:
  4596   003368  5027               	movf	reverseShort@straightSpeed^0,w,c
  4597   00336A  6E29               	movwf	??_reverseShort^0,c
  4598   00336C  6A2A               	clrf	(??_reverseShort+1)^0,c
  4599   00336E  502F               	movf	reverseShort@cur_power^0,w,c
  4600   003370  5C29               	subwf	??_reverseShort^0,w,c
  4601   003372  502A               	movf	(??_reverseShort+1)^0,w,c
  4602   003374  0A80               	xorlw	128
  4603   003376  6E2B               	movwf	(??_reverseShort+2)^0,c
  4604   003378  5030               	movf	(reverseShort@cur_power+1)^0,w,c
  4605   00337A  0A80               	xorlw	128
  4606   00337C  582B               	subwfb	(??_reverseShort+2)^0,w,c
  4607   00337E  B0D8               	btfsc	status,0,c
  4608   003380  EFC4  F019         	goto	u2071
  4609   003384  EFC6  F019         	goto	u2070
  4610   003388                     u2071:
  4611   003388  EF6A  F019         	goto	l3365
  4612   00338C                     u2070:
  4613   00338C                     
  4614                           ;dc_motor.c: 581:     for (i=0;i<reverseDuration;i++) {
  4615   00338C  0E00               	movlw	0
  4616   00338E  6E2E               	movwf	(reverseShort@i+1)^0,c
  4617   003390  0E00               	movlw	0
  4618   003392  6E2D               	movwf	reverseShort@i^0,c
  4619   003394  EFD6  F019         	goto	l727
  4620   003398                     l3383:
  4621                           
  4622                           ;dc_motor.c: 582:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4623   003398  0E68               	movlw	104
  4624   00339A  6E29               	movwf	??_reverseShort^0,c
  4625   00339C  0EE4               	movlw	228
  4626   00339E                     u3697:
  4627   00339E  2EE8               	decfsz	wreg,f,c
  4628   0033A0  D7FE               	bra	u3697
  4629   0033A2  2E29               	decfsz	??_reverseShort^0,f,c
  4630   0033A4  D7FC               	bra	u3697
  4631   0033A6  D000               	nop2	
  4632   0033A8                     
  4633                           ;dc_motor.c: 583:         }
  4634   0033A8  4A2D               	infsnz	reverseShort@i^0,f,c
  4635   0033AA  2A2E               	incf	(reverseShort@i+1)^0,f,c
  4636   0033AC                     l727:
  4637   0033AC  502C               	movf	reverseShort@reverseDuration^0,w,c
  4638   0033AE  6E29               	movwf	??_reverseShort^0,c
  4639   0033B0  6A2A               	clrf	(??_reverseShort+1)^0,c
  4640   0033B2  5029               	movf	??_reverseShort^0,w,c
  4641   0033B4  5C2D               	subwf	reverseShort@i^0,w,c
  4642   0033B6  502E               	movf	(reverseShort@i+1)^0,w,c
  4643   0033B8  0A80               	xorlw	128
  4644   0033BA  6E2B               	movwf	(??_reverseShort+2)^0,c
  4645   0033BC  502A               	movf	(??_reverseShort+1)^0,w,c
  4646   0033BE  0A80               	xorlw	128
  4647   0033C0  582B               	subwfb	(??_reverseShort+2)^0,w,c
  4648   0033C2  A0D8               	btfss	status,0,c
  4649   0033C4  EFE6  F019         	goto	u2081
  4650   0033C8  EFE8  F019         	goto	u2080
  4651   0033CC                     u2081:
  4652   0033CC  EFCC  F019         	goto	l3383
  4653   0033D0                     u2080:
  4654   0033D0                     
  4655                           ;dc_motor.c: 585:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  4656   0033D0  C027  F02F         	movff	reverseShort@straightSpeed,reverseShort@cur_power
  4657   0033D4  6A30               	clrf	(reverseShort@cur_power+1)^0,c
  4658   0033D6                     l3387:
  4659   0033D6  BE30               	btfsc	(reverseShort@cur_power+1)^0,7,c
  4660   0033D8  EFF2  F019         	goto	u2090
  4661   0033DC  EFF0  F019         	goto	u2091
  4662   0033E0                     u2091:
  4663   0033E0  EFF4  F019         	goto	l3391
  4664   0033E4                     u2090:
  4665   0033E4  EF41  F01A         	goto	l3407
  4666   0033E8                     l3391:
  4667                           
  4668                           ;dc_motor.c: 586:         mL->power = cur_power+mL->compensation;
  4669   0033E8  EE20 F009          	lfsr	2,9
  4670   0033EC  5023               	movf	reverseShort@mL^0,w,c
  4671   0033EE  26D9               	addwf	fsr2l,f,c
  4672   0033F0  5024               	movf	(reverseShort@mL+1)^0,w,c
  4673   0033F2  22DA               	addwfc	fsr2h,f,c
  4674   0033F4  50DF               	movf	indf2,w,c
  4675   0033F6  242F               	addwf	reverseShort@cur_power^0,w,c
  4676   0033F8  C023  FFD9         	movff	reverseShort@mL,fsr2l
  4677   0033FC  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  4678   003400  6EDF               	movwf	indf2,c
  4679                           
  4680                           ;dc_motor.c: 587:         mR->power = cur_power+mR->compensation;
  4681   003402  EE20 F009          	lfsr	2,9
  4682   003406  5025               	movf	reverseShort@mR^0,w,c
  4683   003408  26D9               	addwf	fsr2l,f,c
  4684   00340A  5026               	movf	(reverseShort@mR+1)^0,w,c
  4685   00340C  22DA               	addwfc	fsr2h,f,c
  4686   00340E  50DF               	movf	indf2,w,c
  4687   003410  242F               	addwf	reverseShort@cur_power^0,w,c
  4688   003412  C025  FFD9         	movff	reverseShort@mR,fsr2l
  4689   003416  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  4690   00341A  6EDF               	movwf	indf2,c
  4691   00341C                     
  4692                           ;dc_motor.c: 588:         setMotorPWM(mL);
  4693   00341C  C023  F01D         	movff	reverseShort@mL,setMotorPWM@m
  4694   003420  C024  F01E         	movff	reverseShort@mL+1,setMotorPWM@m+1
  4695   003424  EC13  F01E         	call	_setMotorPWM	;wreg free
  4696   003428                     
  4697                           ;dc_motor.c: 589:         setMotorPWM(mR);
  4698   003428  C025  F01D         	movff	reverseShort@mR,setMotorPWM@m
  4699   00342C  C026  F01E         	movff	reverseShort@mR+1,setMotorPWM@m+1
  4700   003430  EC13  F01E         	call	_setMotorPWM	;wreg free
  4701   003434                     
  4702                           ;dc_motor.c: 590:         for (i=0;i<straightRamp;i++) {
  4703   003434  0E00               	movlw	0
  4704   003436  6E2E               	movwf	(reverseShort@i+1)^0,c
  4705   003438  0E00               	movlw	0
  4706   00343A  6E2D               	movwf	reverseShort@i^0,c
  4707   00343C  EF2A  F01A         	goto	l732
  4708   003440                     l3399:
  4709                           
  4710                           ;dc_motor.c: 591:             _delay((unsigned long)((5)*(64000000/4000.0)));
  4711   003440  0E68               	movlw	104
  4712   003442  6E29               	movwf	??_reverseShort^0,c
  4713   003444  0EE4               	movlw	228
  4714   003446                     u3707:
  4715   003446  2EE8               	decfsz	wreg,f,c
  4716   003448  D7FE               	bra	u3707
  4717   00344A  2E29               	decfsz	??_reverseShort^0,f,c
  4718   00344C  D7FC               	bra	u3707
  4719   00344E  D000               	nop2	
  4720   003450                     
  4721                           ;dc_motor.c: 592:         }
  4722   003450  4A2D               	infsnz	reverseShort@i^0,f,c
  4723   003452  2A2E               	incf	(reverseShort@i+1)^0,f,c
  4724   003454                     l732:
  4725   003454  5028               	movf	reverseShort@straightRamp^0,w,c
  4726   003456  6E29               	movwf	??_reverseShort^0,c
  4727   003458  6A2A               	clrf	(??_reverseShort+1)^0,c
  4728   00345A  5029               	movf	??_reverseShort^0,w,c
  4729   00345C  5C2D               	subwf	reverseShort@i^0,w,c
  4730   00345E  502E               	movf	(reverseShort@i+1)^0,w,c
  4731   003460  0A80               	xorlw	128
  4732   003462  6E2B               	movwf	(??_reverseShort+2)^0,c
  4733   003464  502A               	movf	(??_reverseShort+1)^0,w,c
  4734   003466  0A80               	xorlw	128
  4735   003468  582B               	subwfb	(??_reverseShort+2)^0,w,c
  4736   00346A  A0D8               	btfss	status,0,c
  4737   00346C  EF3A  F01A         	goto	u2101
  4738   003470  EF3C  F01A         	goto	u2100
  4739   003474                     u2101:
  4740   003474  EF20  F01A         	goto	l3399
  4741   003478                     u2100:
  4742   003478                     
  4743                           ;dc_motor.c: 593:     }
  4744   003478  062F               	decf	reverseShort@cur_power^0,f,c
  4745   00347A  A0D8               	btfss	status,0,c
  4746   00347C  0630               	decf	(reverseShort@cur_power+1)^0,f,c
  4747   00347E  EFEB  F019         	goto	l3387
  4748   003482                     l3407:
  4749                           
  4750                           ;dc_motor.c: 594:     mL->power = 0;
  4751   003482  C023  FFD9         	movff	reverseShort@mL,fsr2l
  4752   003486  C024  FFDA         	movff	reverseShort@mL+1,fsr2h
  4753   00348A  6ADF               	clrf	indf2,c
  4754                           
  4755                           ;dc_motor.c: 595:     mR->power = 0;
  4756   00348C  C025  FFD9         	movff	reverseShort@mR,fsr2l
  4757   003490  C026  FFDA         	movff	reverseShort@mR+1,fsr2h
  4758   003494  6ADF               	clrf	indf2,c
  4759   003496  0012               	return		;funcret
  4760   003498                     __end_of_reverseShort:
  4761                           	callstack 0
  4762                           
  4763 ;; *************** function _returnHome *****************
  4764 ;; Defined at:
  4765 ;;		line 189 in file "dc_motor.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  4768 ;;		 -> main@motorL(10), 
  4769 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  4770 ;;		 -> main@motorR(10), 
  4771 ;;  moveSequence    2   52[COMRAM] PTR unsigned char 
  4772 ;;		 -> main@moveSequence(40), 
  4773 ;;  straightTime    2   54[COMRAM] PTR unsigned int 
  4774 ;;		 -> main@straightTime(82), 
  4775 ;;  curMove         1   56[COMRAM] unsigned char 
  4776 ;;  straightSpee    1   57[COMRAM] unsigned char 
  4777 ;;  reverseDurat    1   58[COMRAM] unsigned char 
  4778 ;;  straightRamp    1   59[COMRAM] unsigned char 
  4779 ;;  turnSpeed       1   60[COMRAM] unsigned char 
  4780 ;;  turnDuration    1   61[COMRAM] unsigned char 
  4781 ;;  turnRamp        1   62[COMRAM] unsigned char 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  i               1   67[COMRAM] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4793 ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4795 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4796 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4797 ;;Total ram usage:       20 bytes
  4798 ;; Hardware stack levels used: 1
  4799 ;; Hardware stack levels required when called: 8
  4800 ;; This function calls:
  4801 ;;		_fullSpeedAhead
  4802 ;;		_get16bitTMR0val
  4803 ;;		_resetTimer
  4804 ;;		_reverseOneSquare
  4805 ;;		_stop
  4806 ;;		_turnLeft
  4807 ;;		_turnRight
  4808 ;; This function is called by:
  4809 ;;		_move
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text11
  4814   00162C                     __ptext11:
  4815                           	callstack 0
  4816   00162C                     _returnHome:
  4817                           	callstack 21
  4818   00162C                     
  4819                           ;dc_motor.c: 189: void returnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSequenc
      +                          e, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char reverseDu
      +                          ration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsigned
      +                           char turnRamp);dc_motor.c: 190: {;dc_motor.c: 191:     turnLeft(mL, mR, turnSpeed, turn
      +                          Duration, turnRamp);
  4820   00162C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4821   001630  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4822   001634  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4823   001638  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4824   00163C  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4825   001640  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4826   001644  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4827   001648  EC26  F01D         	call	_turnLeft	;wreg free
  4828   00164C                     
  4829                           ;dc_motor.c: 192:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4830   00164C  0E05               	movlw	5
  4831   00164E  6E41               	movwf	(??_returnHome+1)^0,c
  4832   001650  0E0F               	movlw	15
  4833   001652  6E40               	movwf	??_returnHome^0,c
  4834   001654  0EF1               	movlw	241
  4835   001656                     u3717:
  4836   001656  2EE8               	decfsz	wreg,f,c
  4837   001658  D7FE               	bra	u3717
  4838   00165A  2E40               	decfsz	??_returnHome^0,f,c
  4839   00165C  D7FC               	bra	u3717
  4840   00165E  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4841   001660  D7FA               	bra	u3717
  4842   001662  0000               	nop	
  4843   001664                     
  4844                           ;dc_motor.c: 193:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4845   001664  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4846   001668  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4847   00166C  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4848   001670  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4849   001674  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4850   001678  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4851   00167C  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4852   001680  EC26  F01D         	call	_turnLeft	;wreg free
  4853                           
  4854                           ;dc_motor.c: 194:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4855   001684  0E05               	movlw	5
  4856   001686  6E41               	movwf	(??_returnHome+1)^0,c
  4857   001688  0E0F               	movlw	15
  4858   00168A  6E40               	movwf	??_returnHome^0,c
  4859   00168C  0EF1               	movlw	241
  4860   00168E                     u3727:
  4861   00168E  2EE8               	decfsz	wreg,f,c
  4862   001690  D7FE               	bra	u3727
  4863   001692  2E40               	decfsz	??_returnHome^0,f,c
  4864   001694  D7FC               	bra	u3727
  4865   001696  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4866   001698  D7FA               	bra	u3727
  4867   00169A  0000               	nop	
  4868   00169C                     
  4869                           ;dc_motor.c: 195:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4870   00169C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4871   0016A0  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4872   0016A4  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4873   0016A8  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4874   0016AC  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4875   0016B0  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4876   0016B4  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4877   0016B8  EC26  F01D         	call	_turnLeft	;wreg free
  4878   0016BC                     
  4879                           ;dc_motor.c: 196:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4880   0016BC  0E05               	movlw	5
  4881   0016BE  6E41               	movwf	(??_returnHome+1)^0,c
  4882   0016C0  0E0F               	movlw	15
  4883   0016C2  6E40               	movwf	??_returnHome^0,c
  4884   0016C4  0EF1               	movlw	241
  4885   0016C6                     u3737:
  4886   0016C6  2EE8               	decfsz	wreg,f,c
  4887   0016C8  D7FE               	bra	u3737
  4888   0016CA  2E40               	decfsz	??_returnHome^0,f,c
  4889   0016CC  D7FC               	bra	u3737
  4890   0016CE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4891   0016D0  D7FA               	bra	u3737
  4892   0016D2  0000               	nop	
  4893                           
  4894                           ;dc_motor.c: 197:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4895   0016D4  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4896   0016D8  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4897   0016DC  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4898   0016E0  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4899   0016E4  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4900   0016E8  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4901   0016EC  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4902   0016F0  EC26  F01D         	call	_turnLeft	;wreg free
  4903   0016F4                     
  4904                           ;dc_motor.c: 198:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4905   0016F4  0E05               	movlw	5
  4906   0016F6  6E41               	movwf	(??_returnHome+1)^0,c
  4907   0016F8  0E0F               	movlw	15
  4908   0016FA  6E40               	movwf	??_returnHome^0,c
  4909   0016FC  0EF1               	movlw	241
  4910   0016FE                     u3747:
  4911   0016FE  2EE8               	decfsz	wreg,f,c
  4912   001700  D7FE               	bra	u3747
  4913   001702  2E40               	decfsz	??_returnHome^0,f,c
  4914   001704  D7FC               	bra	u3747
  4915   001706  2E41               	decfsz	(??_returnHome+1)^0,f,c
  4916   001708  D7FA               	bra	u3747
  4917   00170A  0000               	nop	
  4918   00170C                     
  4919                           ;dc_motor.c: 199:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  4920   00170C  C031  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  4921   001710  C032  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  4922   001714  C033  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  4923   001718  C034  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  4924   00171C  C03A  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  4925   001720  C03C  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  4926   001724  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  4927   001728                     
  4928                           ;dc_motor.c: 200:     resetTimer();
  4929   001728  EC7B  F024         	call	_resetTimer	;wreg free
  4930   00172C                     l3425:
  4931   00172C  5039               	movf	returnHome@curMove^0,w,c
  4932   00172E  0D02               	mullw	2
  4933   001730  CFF3 F040          	movff	prodl,??_returnHome
  4934   001734  CFF4 F041          	movff	prodh,??_returnHome+1
  4935   001738  5040               	movf	??_returnHome^0,w,c
  4936   00173A  2437               	addwf	returnHome@straightTime^0,w,c
  4937   00173C  6ED9               	movwf	fsr2l,c
  4938   00173E  5041               	movf	(??_returnHome+1)^0,w,c
  4939   001740  2038               	addwfc	(returnHome@straightTime+1)^0,w,c
  4940   001742  6EDA               	movwf	fsr2h,c
  4941   001744  EC79  F023         	call	_get16bitTMR0val	;wreg free
  4942   001748  50DE               	movf	postinc2,w,c
  4943   00174A  5C10               	subwf	?_get16bitTMR0val^0,w,c
  4944   00174C  50DE               	movf	postinc2,w,c
  4945   00174E  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  4946   001750  A0D8               	btfss	status,0,c
  4947   001752  EFAD  F00B         	goto	u2111
  4948   001756  EFAF  F00B         	goto	u2110
  4949   00175A                     u2111:
  4950   00175A  EF96  F00B         	goto	l3425
  4951   00175E                     u2110:
  4952   00175E                     
  4953                           ;dc_motor.c: 202:     stop(mL, mR, straightRamp);
  4954   00175E  C031  F023         	movff	returnHome@mL,stop@mL
  4955   001762  C032  F024         	movff	returnHome@mL+1,stop@mL+1
  4956   001766  C033  F025         	movff	returnHome@mR,stop@mR
  4957   00176A  C034  F026         	movff	returnHome@mR+1,stop@mR+1
  4958   00176E  C03C  F027         	movff	returnHome@straightRamp,stop@straightRamp
  4959   001772  EC4F  F01F         	call	_stop	;wreg free
  4960   001776                     
  4961                           ;dc_motor.c: 204:     char i=curMove;
  4962   001776  C039  F044         	movff	returnHome@curMove,returnHome@i
  4963                           
  4964                           ;dc_motor.c: 205:     while (i>0) {
  4965   00177A  EF6B  F00E         	goto	l3517
  4966   00177E                     l3431:
  4967                           
  4968                           ;dc_motor.c: 206:         i--;
  4969   00177E  0644               	decf	returnHome@i^0,f,c
  4970   001780                     
  4971                           ;dc_motor.c: 208:         if (moveSequence[i] == 1) {
  4972   001780  5044               	movf	returnHome@i^0,w,c
  4973   001782  2435               	addwf	returnHome@moveSequence^0,w,c
  4974   001784  6ED9               	movwf	fsr2l,c
  4975   001786  0E00               	movlw	0
  4976   001788  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  4977   00178A  6EDA               	movwf	fsr2h,c
  4978   00178C  04DE               	decf	postinc2,w,c
  4979   00178E  A4D8               	btfss	status,2,c
  4980   001790  EFCC  F00B         	goto	u2121
  4981   001794  EFCE  F00B         	goto	u2120
  4982   001798                     u2121:
  4983   001798  EF08  F00C         	goto	l3441
  4984   00179C                     u2120:
  4985   00179C                     
  4986                           ;dc_motor.c: 209:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  4987   00179C  C031  F023         	movff	returnHome@mL,turnLeft@mL
  4988   0017A0  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  4989   0017A4  C033  F025         	movff	returnHome@mR,turnLeft@mR
  4990   0017A8  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  4991   0017AC  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  4992   0017B0  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  4993   0017B4  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  4994   0017B8  EC26  F01D         	call	_turnLeft	;wreg free
  4995   0017BC                     
  4996                           ;dc_motor.c: 210:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4997   0017BC  0E05               	movlw	5
  4998   0017BE  6E41               	movwf	(??_returnHome+1)^0,c
  4999   0017C0  0E0F               	movlw	15
  5000   0017C2  6E40               	movwf	??_returnHome^0,c
  5001   0017C4  0EF1               	movlw	241
  5002   0017C6                     u3757:
  5003   0017C6  2EE8               	decfsz	wreg,f,c
  5004   0017C8  D7FE               	bra	u3757
  5005   0017CA  2E40               	decfsz	??_returnHome^0,f,c
  5006   0017CC  D7FC               	bra	u3757
  5007   0017CE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5008   0017D0  D7FA               	bra	u3757
  5009   0017D2  0000               	nop	
  5010   0017D4                     
  5011                           ;dc_motor.c: 211:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5012   0017D4  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5013   0017D8  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5014   0017DC  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5015   0017E0  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5016   0017E4  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5017   0017E8  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5018   0017EC  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5019   0017F0  EC26  F01D         	call	_turnLeft	;wreg free
  5020                           
  5021                           ;dc_motor.c: 212:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5022   0017F4  0E05               	movlw	5
  5023   0017F6  6E41               	movwf	(??_returnHome+1)^0,c
  5024   0017F8  0E0F               	movlw	15
  5025   0017FA  6E40               	movwf	??_returnHome^0,c
  5026   0017FC  0EF1               	movlw	241
  5027   0017FE                     u3767:
  5028   0017FE  2EE8               	decfsz	wreg,f,c
  5029   001800  D7FE               	bra	u3767
  5030   001802  2E40               	decfsz	??_returnHome^0,f,c
  5031   001804  D7FC               	bra	u3767
  5032   001806  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5033   001808  D7FA               	bra	u3767
  5034   00180A  0000               	nop	
  5035                           
  5036                           ;dc_motor.c: 213:         }
  5037   00180C  EF36  F00E         	goto	l578
  5038   001810                     l3441:
  5039   001810  5044               	movf	returnHome@i^0,w,c
  5040   001812  2435               	addwf	returnHome@moveSequence^0,w,c
  5041   001814  6ED9               	movwf	fsr2l,c
  5042   001816  0E00               	movlw	0
  5043   001818  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5044   00181A  6EDA               	movwf	fsr2h,c
  5045   00181C  0E02               	movlw	2
  5046   00181E  18DE               	xorwf	postinc2,w,c
  5047   001820  A4D8               	btfss	status,2,c
  5048   001822  EF15  F00C         	goto	u2131
  5049   001826  EF17  F00C         	goto	u2130
  5050   00182A                     u2131:
  5051   00182A  EF51  F00C         	goto	l3449
  5052   00182E                     u2130:
  5053   00182E                     
  5054                           ;dc_motor.c: 216:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5055   00182E  C031  F023         	movff	returnHome@mL,turnRight@mL
  5056   001832  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5057   001836  C033  F025         	movff	returnHome@mR,turnRight@mR
  5058   00183A  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5059   00183E  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5060   001842  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5061   001846  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5062   00184A  EC39  F01C         	call	_turnRight	;wreg free
  5063   00184E                     
  5064                           ;dc_motor.c: 217:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5065   00184E  0E05               	movlw	5
  5066   001850  6E41               	movwf	(??_returnHome+1)^0,c
  5067   001852  0E0F               	movlw	15
  5068   001854  6E40               	movwf	??_returnHome^0,c
  5069   001856  0EF1               	movlw	241
  5070   001858                     u3777:
  5071   001858  2EE8               	decfsz	wreg,f,c
  5072   00185A  D7FE               	bra	u3777
  5073   00185C  2E40               	decfsz	??_returnHome^0,f,c
  5074   00185E  D7FC               	bra	u3777
  5075   001860  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5076   001862  D7FA               	bra	u3777
  5077   001864  0000               	nop	
  5078   001866                     
  5079                           ;dc_motor.c: 218:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5080   001866  C031  F023         	movff	returnHome@mL,turnRight@mL
  5081   00186A  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5082   00186E  C033  F025         	movff	returnHome@mR,turnRight@mR
  5083   001872  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5084   001876  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5085   00187A  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5086   00187E  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5087   001882  EC39  F01C         	call	_turnRight	;wreg free
  5088                           
  5089                           ;dc_motor.c: 219:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5090   001886  0E05               	movlw	5
  5091   001888  6E41               	movwf	(??_returnHome+1)^0,c
  5092   00188A  0E0F               	movlw	15
  5093   00188C  6E40               	movwf	??_returnHome^0,c
  5094   00188E  0EF1               	movlw	241
  5095   001890                     u3787:
  5096   001890  2EE8               	decfsz	wreg,f,c
  5097   001892  D7FE               	bra	u3787
  5098   001894  2E40               	decfsz	??_returnHome^0,f,c
  5099   001896  D7FC               	bra	u3787
  5100   001898  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5101   00189A  D7FA               	bra	u3787
  5102   00189C  0000               	nop	
  5103                           
  5104                           ;dc_motor.c: 220:         }
  5105   00189E  EF36  F00E         	goto	l578
  5106   0018A2                     l3449:
  5107   0018A2  5044               	movf	returnHome@i^0,w,c
  5108   0018A4  2435               	addwf	returnHome@moveSequence^0,w,c
  5109   0018A6  6ED9               	movwf	fsr2l,c
  5110   0018A8  0E00               	movlw	0
  5111   0018AA  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5112   0018AC  6EDA               	movwf	fsr2h,c
  5113   0018AE  0E03               	movlw	3
  5114   0018B0  18DE               	xorwf	postinc2,w,c
  5115   0018B2  A4D8               	btfss	status,2,c
  5116   0018B4  EF5E  F00C         	goto	u2141
  5117   0018B8  EF60  F00C         	goto	u2140
  5118   0018BC                     u2141:
  5119   0018BC  EFD2  F00C         	goto	l3463
  5120   0018C0                     u2140:
  5121   0018C0                     
  5122                           ;dc_motor.c: 223:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5123   0018C0  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5124   0018C4  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5125   0018C8  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5126   0018CC  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5127   0018D0  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5128   0018D4  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5129   0018D8  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5130   0018DC  EC26  F01D         	call	_turnLeft	;wreg free
  5131   0018E0                     
  5132                           ;dc_motor.c: 224:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5133   0018E0  0E05               	movlw	5
  5134   0018E2  6E41               	movwf	(??_returnHome+1)^0,c
  5135   0018E4  0E0F               	movlw	15
  5136   0018E6  6E40               	movwf	??_returnHome^0,c
  5137   0018E8  0EF1               	movlw	241
  5138   0018EA                     u3797:
  5139   0018EA  2EE8               	decfsz	wreg,f,c
  5140   0018EC  D7FE               	bra	u3797
  5141   0018EE  2E40               	decfsz	??_returnHome^0,f,c
  5142   0018F0  D7FC               	bra	u3797
  5143   0018F2  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5144   0018F4  D7FA               	bra	u3797
  5145   0018F6  0000               	nop	
  5146   0018F8                     
  5147                           ;dc_motor.c: 225:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5148   0018F8  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5149   0018FC  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5150   001900  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5151   001904  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5152   001908  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5153   00190C  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5154   001910  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5155   001914  EC26  F01D         	call	_turnLeft	;wreg free
  5156                           
  5157                           ;dc_motor.c: 226:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5158   001918  0E05               	movlw	5
  5159   00191A  6E41               	movwf	(??_returnHome+1)^0,c
  5160   00191C  0E0F               	movlw	15
  5161   00191E  6E40               	movwf	??_returnHome^0,c
  5162   001920  0EF1               	movlw	241
  5163   001922                     u3807:
  5164   001922  2EE8               	decfsz	wreg,f,c
  5165   001924  D7FE               	bra	u3807
  5166   001926  2E40               	decfsz	??_returnHome^0,f,c
  5167   001928  D7FC               	bra	u3807
  5168   00192A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5169   00192C  D7FA               	bra	u3807
  5170   00192E  0000               	nop	
  5171   001930                     
  5172                           ;dc_motor.c: 227:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5173   001930  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5174   001934  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5175   001938  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5176   00193C  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5177   001940  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5178   001944  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5179   001948  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5180   00194C  EC26  F01D         	call	_turnLeft	;wreg free
  5181   001950                     
  5182                           ;dc_motor.c: 228:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5183   001950  0E05               	movlw	5
  5184   001952  6E41               	movwf	(??_returnHome+1)^0,c
  5185   001954  0E0F               	movlw	15
  5186   001956  6E40               	movwf	??_returnHome^0,c
  5187   001958  0EF1               	movlw	241
  5188   00195A                     u3817:
  5189   00195A  2EE8               	decfsz	wreg,f,c
  5190   00195C  D7FE               	bra	u3817
  5191   00195E  2E40               	decfsz	??_returnHome^0,f,c
  5192   001960  D7FC               	bra	u3817
  5193   001962  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5194   001964  D7FA               	bra	u3817
  5195   001966  0000               	nop	
  5196                           
  5197                           ;dc_motor.c: 229:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5198   001968  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5199   00196C  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5200   001970  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5201   001974  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5202   001978  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5203   00197C  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5204   001980  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5205   001984  EC26  F01D         	call	_turnLeft	;wreg free
  5206   001988                     l3461:
  5207                           
  5208                           ;dc_motor.c: 230:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5209   001988  0E05               	movlw	5
  5210   00198A  6E41               	movwf	(??_returnHome+1)^0,c
  5211   00198C  0E0F               	movlw	15
  5212   00198E  6E40               	movwf	??_returnHome^0,c
  5213   001990  0EF1               	movlw	241
  5214   001992                     u3827:
  5215   001992  2EE8               	decfsz	wreg,f,c
  5216   001994  D7FE               	bra	u3827
  5217   001996  2E40               	decfsz	??_returnHome^0,f,c
  5218   001998  D7FC               	bra	u3827
  5219   00199A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5220   00199C  D7FA               	bra	u3827
  5221   00199E  0000               	nop	
  5222                           
  5223                           ;dc_motor.c: 231:         }
  5224   0019A0  EF36  F00E         	goto	l578
  5225   0019A4                     l3463:
  5226   0019A4  5044               	movf	returnHome@i^0,w,c
  5227   0019A6  2435               	addwf	returnHome@moveSequence^0,w,c
  5228   0019A8  6ED9               	movwf	fsr2l,c
  5229   0019AA  0E00               	movlw	0
  5230   0019AC  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5231   0019AE  6EDA               	movwf	fsr2h,c
  5232   0019B0  0E04               	movlw	4
  5233   0019B2  18DE               	xorwf	postinc2,w,c
  5234   0019B4  A4D8               	btfss	status,2,c
  5235   0019B6  EFDF  F00C         	goto	u2151
  5236   0019BA  EFE1  F00C         	goto	u2150
  5237   0019BE                     u2151:
  5238   0019BE  EF2B  F00D         	goto	l3475
  5239   0019C2                     u2150:
  5240   0019C2                     
  5241                           ;dc_motor.c: 234:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5242   0019C2  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5243   0019C6  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5244   0019CA  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5245   0019CE  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5246   0019D2  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5247   0019D6  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5248   0019DA  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5249   0019DE  EC26  F01D         	call	_turnLeft	;wreg free
  5250   0019E2                     
  5251                           ;dc_motor.c: 235:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5252   0019E2  0E05               	movlw	5
  5253   0019E4  6E41               	movwf	(??_returnHome+1)^0,c
  5254   0019E6  0E0F               	movlw	15
  5255   0019E8  6E40               	movwf	??_returnHome^0,c
  5256   0019EA  0EF1               	movlw	241
  5257   0019EC                     u3837:
  5258   0019EC  2EE8               	decfsz	wreg,f,c
  5259   0019EE  D7FE               	bra	u3837
  5260   0019F0  2E40               	decfsz	??_returnHome^0,f,c
  5261   0019F2  D7FC               	bra	u3837
  5262   0019F4  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5263   0019F6  D7FA               	bra	u3837
  5264   0019F8  0000               	nop	
  5265   0019FA                     
  5266                           ;dc_motor.c: 236:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5267   0019FA  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5268   0019FE  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5269   001A02  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5270   001A06  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5271   001A0A  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5272   001A0E  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5273   001A12  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5274   001A16  EC26  F01D         	call	_turnLeft	;wreg free
  5275                           
  5276                           ;dc_motor.c: 237:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5277   001A1A  0E05               	movlw	5
  5278   001A1C  6E41               	movwf	(??_returnHome+1)^0,c
  5279   001A1E  0E0F               	movlw	15
  5280   001A20  6E40               	movwf	??_returnHome^0,c
  5281   001A22  0EF1               	movlw	241
  5282   001A24                     u3847:
  5283   001A24  2EE8               	decfsz	wreg,f,c
  5284   001A26  D7FE               	bra	u3847
  5285   001A28  2E40               	decfsz	??_returnHome^0,f,c
  5286   001A2A  D7FC               	bra	u3847
  5287   001A2C  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5288   001A2E  D7FA               	bra	u3847
  5289   001A30  0000               	nop	
  5290   001A32                     
  5291                           ;dc_motor.c: 238:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  5292   001A32  C031  F023         	movff	returnHome@mL,reverseOneSquare@mL
  5293   001A36  C032  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  5294   001A3A  C033  F025         	movff	returnHome@mR,reverseOneSquare@mR
  5295   001A3E  C034  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  5296   001A42  C03A  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  5297   001A46  C03B  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  5298   001A4A  C03C  F029         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  5299   001A4E  EC43  F01B         	call	_reverseOneSquare	;wreg free
  5300   001A52  EFC4  F00C         	goto	l3461
  5301   001A56                     l3475:
  5302   001A56  5044               	movf	returnHome@i^0,w,c
  5303   001A58  2435               	addwf	returnHome@moveSequence^0,w,c
  5304   001A5A  6ED9               	movwf	fsr2l,c
  5305   001A5C  0E00               	movlw	0
  5306   001A5E  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5307   001A60  6EDA               	movwf	fsr2h,c
  5308   001A62  0E05               	movlw	5
  5309   001A64  18DE               	xorwf	postinc2,w,c
  5310   001A66  A4D8               	btfss	status,2,c
  5311   001A68  EF38  F00D         	goto	u2161
  5312   001A6C  EF3A  F00D         	goto	u2160
  5313   001A70                     u2161:
  5314   001A70  EF84  F00D         	goto	l3487
  5315   001A74                     u2160:
  5316   001A74                     
  5317                           ;dc_motor.c: 243:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5318   001A74  C031  F023         	movff	returnHome@mL,turnRight@mL
  5319   001A78  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5320   001A7C  C033  F025         	movff	returnHome@mR,turnRight@mR
  5321   001A80  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5322   001A84  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5323   001A88  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5324   001A8C  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5325   001A90  EC39  F01C         	call	_turnRight	;wreg free
  5326   001A94                     
  5327                           ;dc_motor.c: 244:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5328   001A94  0E05               	movlw	5
  5329   001A96  6E41               	movwf	(??_returnHome+1)^0,c
  5330   001A98  0E0F               	movlw	15
  5331   001A9A  6E40               	movwf	??_returnHome^0,c
  5332   001A9C  0EF1               	movlw	241
  5333   001A9E                     u3857:
  5334   001A9E  2EE8               	decfsz	wreg,f,c
  5335   001AA0  D7FE               	bra	u3857
  5336   001AA2  2E40               	decfsz	??_returnHome^0,f,c
  5337   001AA4  D7FC               	bra	u3857
  5338   001AA6  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5339   001AA8  D7FA               	bra	u3857
  5340   001AAA  0000               	nop	
  5341   001AAC                     
  5342                           ;dc_motor.c: 245:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5343   001AAC  C031  F023         	movff	returnHome@mL,turnRight@mL
  5344   001AB0  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5345   001AB4  C033  F025         	movff	returnHome@mR,turnRight@mR
  5346   001AB8  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5347   001ABC  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5348   001AC0  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5349   001AC4  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5350   001AC8  EC39  F01C         	call	_turnRight	;wreg free
  5351                           
  5352                           ;dc_motor.c: 246:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5353   001ACC  0E05               	movlw	5
  5354   001ACE  6E41               	movwf	(??_returnHome+1)^0,c
  5355   001AD0  0E0F               	movlw	15
  5356   001AD2  6E40               	movwf	??_returnHome^0,c
  5357   001AD4  0EF1               	movlw	241
  5358   001AD6                     u3867:
  5359   001AD6  2EE8               	decfsz	wreg,f,c
  5360   001AD8  D7FE               	bra	u3867
  5361   001ADA  2E40               	decfsz	??_returnHome^0,f,c
  5362   001ADC  D7FC               	bra	u3867
  5363   001ADE  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5364   001AE0  D7FA               	bra	u3867
  5365   001AE2  0000               	nop	
  5366   001AE4                     
  5367                           ;dc_motor.c: 247:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  5368   001AE4  C031  F023         	movff	returnHome@mL,reverseOneSquare@mL
  5369   001AE8  C032  F024         	movff	returnHome@mL+1,reverseOneSquare@mL+1
  5370   001AEC  C033  F025         	movff	returnHome@mR,reverseOneSquare@mR
  5371   001AF0  C034  F026         	movff	returnHome@mR+1,reverseOneSquare@mR+1
  5372   001AF4  C03A  F027         	movff	returnHome@straightSpeed,reverseOneSquare@straightSpeed
  5373   001AF8  C03B  F028         	movff	returnHome@reverseDuration,reverseOneSquare@reverseDuration
  5374   001AFC  C03C  F029         	movff	returnHome@straightRamp,reverseOneSquare@straightRamp
  5375   001B00  EC43  F01B         	call	_reverseOneSquare	;wreg free
  5376   001B04  EFC4  F00C         	goto	l3461
  5377   001B08                     l3487:
  5378   001B08  5044               	movf	returnHome@i^0,w,c
  5379   001B0A  2435               	addwf	returnHome@moveSequence^0,w,c
  5380   001B0C  6ED9               	movwf	fsr2l,c
  5381   001B0E  0E00               	movlw	0
  5382   001B10  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5383   001B12  6EDA               	movwf	fsr2h,c
  5384   001B14  0E06               	movlw	6
  5385   001B16  18DE               	xorwf	postinc2,w,c
  5386   001B18  A4D8               	btfss	status,2,c
  5387   001B1A  EF91  F00D         	goto	u2171
  5388   001B1E  EF93  F00D         	goto	u2170
  5389   001B22                     u2171:
  5390   001B22  EFDD  F00D         	goto	l3499
  5391   001B26                     u2170:
  5392   001B26                     
  5393                           ;dc_motor.c: 252:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5394   001B26  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5395   001B2A  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5396   001B2E  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5397   001B32  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5398   001B36  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5399   001B3A  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5400   001B3E  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5401   001B42  EC26  F01D         	call	_turnLeft	;wreg free
  5402   001B46                     
  5403                           ;dc_motor.c: 253:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5404   001B46  0E05               	movlw	5
  5405   001B48  6E41               	movwf	(??_returnHome+1)^0,c
  5406   001B4A  0E0F               	movlw	15
  5407   001B4C  6E40               	movwf	??_returnHome^0,c
  5408   001B4E  0EF1               	movlw	241
  5409   001B50                     u3877:
  5410   001B50  2EE8               	decfsz	wreg,f,c
  5411   001B52  D7FE               	bra	u3877
  5412   001B54  2E40               	decfsz	??_returnHome^0,f,c
  5413   001B56  D7FC               	bra	u3877
  5414   001B58  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5415   001B5A  D7FA               	bra	u3877
  5416   001B5C  0000               	nop	
  5417   001B5E                     
  5418                           ;dc_motor.c: 254:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5419   001B5E  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5420   001B62  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5421   001B66  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5422   001B6A  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5423   001B6E  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5424   001B72  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5425   001B76  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5426   001B7A  EC26  F01D         	call	_turnLeft	;wreg free
  5427                           
  5428                           ;dc_motor.c: 255:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5429   001B7E  0E05               	movlw	5
  5430   001B80  6E41               	movwf	(??_returnHome+1)^0,c
  5431   001B82  0E0F               	movlw	15
  5432   001B84  6E40               	movwf	??_returnHome^0,c
  5433   001B86  0EF1               	movlw	241
  5434   001B88                     u3887:
  5435   001B88  2EE8               	decfsz	wreg,f,c
  5436   001B8A  D7FE               	bra	u3887
  5437   001B8C  2E40               	decfsz	??_returnHome^0,f,c
  5438   001B8E  D7FC               	bra	u3887
  5439   001B90  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5440   001B92  D7FA               	bra	u3887
  5441   001B94  0000               	nop	
  5442   001B96                     
  5443                           ;dc_motor.c: 256:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5444   001B96  C031  F023         	movff	returnHome@mL,turnLeft@mL
  5445   001B9A  C032  F024         	movff	returnHome@mL+1,turnLeft@mL+1
  5446   001B9E  C033  F025         	movff	returnHome@mR,turnLeft@mR
  5447   001BA2  C034  F026         	movff	returnHome@mR+1,turnLeft@mR+1
  5448   001BA6  C03D  F027         	movff	returnHome@turnSpeed,turnLeft@turnSpeed
  5449   001BAA  C03E  F028         	movff	returnHome@turnDuration,turnLeft@turnDuration
  5450   001BAE  C03F  F029         	movff	returnHome@turnRamp,turnLeft@turnRamp
  5451   001BB2  EC26  F01D         	call	_turnLeft	;wreg free
  5452   001BB6  EFC4  F00C         	goto	l3461
  5453   001BBA                     l3499:
  5454   001BBA  5044               	movf	returnHome@i^0,w,c
  5455   001BBC  2435               	addwf	returnHome@moveSequence^0,w,c
  5456   001BBE  6ED9               	movwf	fsr2l,c
  5457   001BC0  0E00               	movlw	0
  5458   001BC2  2036               	addwfc	(returnHome@moveSequence+1)^0,w,c
  5459   001BC4  6EDA               	movwf	fsr2h,c
  5460   001BC6  0E07               	movlw	7
  5461   001BC8  18DE               	xorwf	postinc2,w,c
  5462   001BCA  A4D8               	btfss	status,2,c
  5463   001BCC  EFEA  F00D         	goto	u2181
  5464   001BD0  EFEC  F00D         	goto	u2180
  5465   001BD4                     u2181:
  5466   001BD4  EF36  F00E         	goto	l584
  5467   001BD8                     u2180:
  5468   001BD8                     
  5469                           ;dc_motor.c: 261:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5470   001BD8  C031  F023         	movff	returnHome@mL,turnRight@mL
  5471   001BDC  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5472   001BE0  C033  F025         	movff	returnHome@mR,turnRight@mR
  5473   001BE4  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5474   001BE8  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5475   001BEC  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5476   001BF0  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5477   001BF4  EC39  F01C         	call	_turnRight	;wreg free
  5478   001BF8                     
  5479                           ;dc_motor.c: 262:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5480   001BF8  0E05               	movlw	5
  5481   001BFA  6E41               	movwf	(??_returnHome+1)^0,c
  5482   001BFC  0E0F               	movlw	15
  5483   001BFE  6E40               	movwf	??_returnHome^0,c
  5484   001C00  0EF1               	movlw	241
  5485   001C02                     u3897:
  5486   001C02  2EE8               	decfsz	wreg,f,c
  5487   001C04  D7FE               	bra	u3897
  5488   001C06  2E40               	decfsz	??_returnHome^0,f,c
  5489   001C08  D7FC               	bra	u3897
  5490   001C0A  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5491   001C0C  D7FA               	bra	u3897
  5492   001C0E  0000               	nop	
  5493   001C10                     
  5494                           ;dc_motor.c: 263:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5495   001C10  C031  F023         	movff	returnHome@mL,turnRight@mL
  5496   001C14  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5497   001C18  C033  F025         	movff	returnHome@mR,turnRight@mR
  5498   001C1C  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5499   001C20  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5500   001C24  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5501   001C28  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5502   001C2C  EC39  F01C         	call	_turnRight	;wreg free
  5503                           
  5504                           ;dc_motor.c: 264:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5505   001C30  0E05               	movlw	5
  5506   001C32  6E41               	movwf	(??_returnHome+1)^0,c
  5507   001C34  0E0F               	movlw	15
  5508   001C36  6E40               	movwf	??_returnHome^0,c
  5509   001C38  0EF1               	movlw	241
  5510   001C3A                     u3907:
  5511   001C3A  2EE8               	decfsz	wreg,f,c
  5512   001C3C  D7FE               	bra	u3907
  5513   001C3E  2E40               	decfsz	??_returnHome^0,f,c
  5514   001C40  D7FC               	bra	u3907
  5515   001C42  2E41               	decfsz	(??_returnHome+1)^0,f,c
  5516   001C44  D7FA               	bra	u3907
  5517   001C46  0000               	nop	
  5518   001C48                     
  5519                           ;dc_motor.c: 265:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5520   001C48  C031  F023         	movff	returnHome@mL,turnRight@mL
  5521   001C4C  C032  F024         	movff	returnHome@mL+1,turnRight@mL+1
  5522   001C50  C033  F025         	movff	returnHome@mR,turnRight@mR
  5523   001C54  C034  F026         	movff	returnHome@mR+1,turnRight@mR+1
  5524   001C58  C03D  F027         	movff	returnHome@turnSpeed,turnRight@turnSpeed
  5525   001C5C  C03E  F028         	movff	returnHome@turnDuration,turnRight@turnDuration
  5526   001C60  C03F  F029         	movff	returnHome@turnRamp,turnRight@turnRamp
  5527   001C64  EC39  F01C         	call	_turnRight	;wreg free
  5528   001C68  EFC4  F00C         	goto	l3461
  5529   001C6C                     l584:
  5530   001C6C                     l578:
  5531                           
  5532                           ;dc_motor.c: 269:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  5533   001C6C  C031  F023         	movff	returnHome@mL,fullSpeedAhead@mL
  5534   001C70  C032  F024         	movff	returnHome@mL+1,fullSpeedAhead@mL+1
  5535   001C74  C033  F025         	movff	returnHome@mR,fullSpeedAhead@mR
  5536   001C78  C034  F026         	movff	returnHome@mR+1,fullSpeedAhead@mR+1
  5537   001C7C  C03A  F027         	movff	returnHome@straightSpeed,fullSpeedAhead@straightSpeed
  5538   001C80  C03C  F028         	movff	returnHome@straightRamp,fullSpeedAhead@straightRamp
  5539   001C84  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  5540   001C88                     
  5541                           ;dc_motor.c: 270:         resetTimer();
  5542   001C88  EC7B  F024         	call	_resetTimer	;wreg free
  5543   001C8C                     l3513:
  5544   001C8C  5044               	movf	returnHome@i^0,w,c
  5545   001C8E  0D02               	mullw	2
  5546   001C90  CFF3 F040          	movff	prodl,??_returnHome
  5547   001C94  CFF4 F041          	movff	prodh,??_returnHome+1
  5548   001C98  5040               	movf	??_returnHome^0,w,c
  5549   001C9A  2437               	addwf	returnHome@straightTime^0,w,c
  5550   001C9C  6ED9               	movwf	fsr2l,c
  5551   001C9E  5041               	movf	(??_returnHome+1)^0,w,c
  5552   001CA0  2038               	addwfc	(returnHome@straightTime+1)^0,w,c
  5553   001CA2  6EDA               	movwf	fsr2h,c
  5554   001CA4  EC79  F023         	call	_get16bitTMR0val	;wreg free
  5555   001CA8  50DE               	movf	postinc2,w,c
  5556   001CAA  5C10               	subwf	?_get16bitTMR0val^0,w,c
  5557   001CAC  50DE               	movf	postinc2,w,c
  5558   001CAE  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  5559   001CB0  A0D8               	btfss	status,0,c
  5560   001CB2  EF5D  F00E         	goto	u2191
  5561   001CB6  EF5F  F00E         	goto	u2190
  5562   001CBA                     u2191:
  5563   001CBA  EF46  F00E         	goto	l3513
  5564   001CBE                     u2190:
  5565   001CBE                     
  5566                           ;dc_motor.c: 272:         stop(mL, mR, straightRamp);
  5567   001CBE  C031  F023         	movff	returnHome@mL,stop@mL
  5568   001CC2  C032  F024         	movff	returnHome@mL+1,stop@mL+1
  5569   001CC6  C033  F025         	movff	returnHome@mR,stop@mR
  5570   001CCA  C034  F026         	movff	returnHome@mR+1,stop@mR+1
  5571   001CCE  C03C  F027         	movff	returnHome@straightRamp,stop@straightRamp
  5572   001CD2  EC4F  F01F         	call	_stop	;wreg free
  5573   001CD6                     l3517:
  5574                           
  5575                           ;dc_motor.c: 205:     while (i>0) {
  5576   001CD6  5044               	movf	returnHome@i^0,w,c
  5577   001CD8  A4D8               	btfss	status,2,c
  5578   001CDA  EF71  F00E         	goto	u2201
  5579   001CDE  EF73  F00E         	goto	u2200
  5580   001CE2                     u2201:
  5581   001CE2  EFBF  F00B         	goto	l3431
  5582   001CE6                     u2200:
  5583   001CE6  0012               	return		;funcret
  5584   001CE8                     __end_of_returnHome:
  5585                           	callstack 0
  5586                           
  5587 ;; *************** function _lostReturnHome *****************
  5588 ;; Defined at:
  5589 ;;		line 277 in file "dc_motor.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  5592 ;;		 -> main@motorL(10), 
  5593 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  5594 ;;		 -> main@motorR(10), 
  5595 ;;  moveSequence    2   52[COMRAM] PTR unsigned char 
  5596 ;;		 -> main@moveSequence(40), 
  5597 ;;  straightTime    2   54[COMRAM] PTR unsigned int 
  5598 ;;		 -> main@straightTime(82), 
  5599 ;;  curMove         1   56[COMRAM] unsigned char 
  5600 ;;  straightSpee    1   57[COMRAM] unsigned char 
  5601 ;;  reverseDurat    1   58[COMRAM] unsigned char 
  5602 ;;  straightRamp    1   59[COMRAM] unsigned char 
  5603 ;;  turnSpeed       1   60[COMRAM] unsigned char 
  5604 ;;  turnDuration    1   61[COMRAM] unsigned char 
  5605 ;;  turnRamp        1   62[COMRAM] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  i               1   67[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5617 ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5621 ;;Total ram usage:       20 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; Hardware stack levels required when called: 8
  5624 ;; This function calls:
  5625 ;;		_fullSpeedAhead
  5626 ;;		_get16bitTMR0val
  5627 ;;		_resetTimer
  5628 ;;		_reverseOneSquare
  5629 ;;		_stop
  5630 ;;		_turnLeft
  5631 ;;		_turnRight
  5632 ;; This function is called by:
  5633 ;;		_main
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text12
  5638   001CE8                     __ptext12:
  5639                           	callstack 0
  5640   001CE8                     _lostReturnHome:
  5641                           	callstack 22
  5642   001CE8                     
  5643                           ;dc_motor.c: 277: void lostReturnHome(DC_motor *mL, DC_motor *mR, unsigned char *moveSeq
      +                          uence, unsigned int *straightTime, char curMove, char straightSpeed, unsigned char rever
      +                          seDuration, unsigned char straightRamp, char turnSpeed, unsigned char turnDuration, unsi
      +                          gned char turnRamp);dc_motor.c: 278: {;dc_motor.c: 279:     LATDbits.LATD7 = LATHbits.LA
      +                          TH3 = 1;
  5644   001CE8  8680               	bsf	128,3,c	;volatile
  5645   001CEA  8E7C               	bsf	124,7,c	;volatile
  5646   001CEC                     
  5647                           ;dc_motor.c: 280:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5648   001CEC  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5649   001CF0  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5650   001CF4  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5651   001CF8  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5652   001CFC  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5653   001D00  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5654   001D04  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5655   001D08  EC26  F01D         	call	_turnLeft	;wreg free
  5656   001D0C                     
  5657                           ;dc_motor.c: 281:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5658   001D0C  0E05               	movlw	5
  5659   001D0E  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5660   001D10  0E0F               	movlw	15
  5661   001D12  6E40               	movwf	??_lostReturnHome^0,c
  5662   001D14  0EF1               	movlw	241
  5663   001D16                     u3917:
  5664   001D16  2EE8               	decfsz	wreg,f,c
  5665   001D18  D7FE               	bra	u3917
  5666   001D1A  2E40               	decfsz	??_lostReturnHome^0,f,c
  5667   001D1C  D7FC               	bra	u3917
  5668   001D1E  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5669   001D20  D7FA               	bra	u3917
  5670   001D22  0000               	nop	
  5671   001D24                     
  5672                           ;dc_motor.c: 282:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5673   001D24  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5674   001D28  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5675   001D2C  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5676   001D30  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5677   001D34  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5678   001D38  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5679   001D3C  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5680   001D40  EC26  F01D         	call	_turnLeft	;wreg free
  5681                           
  5682                           ;dc_motor.c: 283:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5683   001D44  0E05               	movlw	5
  5684   001D46  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5685   001D48  0E0F               	movlw	15
  5686   001D4A  6E40               	movwf	??_lostReturnHome^0,c
  5687   001D4C  0EF1               	movlw	241
  5688   001D4E                     u3927:
  5689   001D4E  2EE8               	decfsz	wreg,f,c
  5690   001D50  D7FE               	bra	u3927
  5691   001D52  2E40               	decfsz	??_lostReturnHome^0,f,c
  5692   001D54  D7FC               	bra	u3927
  5693   001D56  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5694   001D58  D7FA               	bra	u3927
  5695   001D5A  0000               	nop	
  5696   001D5C                     
  5697                           ;dc_motor.c: 284:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5698   001D5C  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5699   001D60  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5700   001D64  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5701   001D68  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5702   001D6C  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5703   001D70  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5704   001D74  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5705   001D78  EC26  F01D         	call	_turnLeft	;wreg free
  5706   001D7C                     
  5707                           ;dc_motor.c: 285:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5708   001D7C  0E05               	movlw	5
  5709   001D7E  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5710   001D80  0E0F               	movlw	15
  5711   001D82  6E40               	movwf	??_lostReturnHome^0,c
  5712   001D84  0EF1               	movlw	241
  5713   001D86                     u3937:
  5714   001D86  2EE8               	decfsz	wreg,f,c
  5715   001D88  D7FE               	bra	u3937
  5716   001D8A  2E40               	decfsz	??_lostReturnHome^0,f,c
  5717   001D8C  D7FC               	bra	u3937
  5718   001D8E  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5719   001D90  D7FA               	bra	u3937
  5720   001D92  0000               	nop	
  5721                           
  5722                           ;dc_motor.c: 286:     turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5723   001D94  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5724   001D98  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5725   001D9C  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5726   001DA0  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5727   001DA4  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5728   001DA8  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5729   001DAC  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5730   001DB0  EC26  F01D         	call	_turnLeft	;wreg free
  5731   001DB4                     
  5732                           ;dc_motor.c: 287:     _delay((unsigned long)((50)*(64000000/4000.0)));
  5733   001DB4  0E05               	movlw	5
  5734   001DB6  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5735   001DB8  0E0F               	movlw	15
  5736   001DBA  6E40               	movwf	??_lostReturnHome^0,c
  5737   001DBC  0EF1               	movlw	241
  5738   001DBE                     u3947:
  5739   001DBE  2EE8               	decfsz	wreg,f,c
  5740   001DC0  D7FE               	bra	u3947
  5741   001DC2  2E40               	decfsz	??_lostReturnHome^0,f,c
  5742   001DC4  D7FC               	bra	u3947
  5743   001DC6  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5744   001DC8  D7FA               	bra	u3947
  5745   001DCA  0000               	nop	
  5746   001DCC                     
  5747                           ;dc_motor.c: 288:     fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  5748   001DCC  C031  F023         	movff	lostReturnHome@mL,fullSpeedAhead@mL
  5749   001DD0  C032  F024         	movff	lostReturnHome@mL+1,fullSpeedAhead@mL+1
  5750   001DD4  C033  F025         	movff	lostReturnHome@mR,fullSpeedAhead@mR
  5751   001DD8  C034  F026         	movff	lostReturnHome@mR+1,fullSpeedAhead@mR+1
  5752   001DDC  C03A  F027         	movff	lostReturnHome@straightSpeed,fullSpeedAhead@straightSpeed
  5753   001DE0  C03C  F028         	movff	lostReturnHome@straightRamp,fullSpeedAhead@straightRamp
  5754   001DE4  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  5755   001DE8                     
  5756                           ;dc_motor.c: 289:     resetTimer();
  5757   001DE8  EC7B  F024         	call	_resetTimer	;wreg free
  5758   001DEC                     
  5759                           ;dc_motor.c: 290:     lost = 0;
  5760   001DEC  0E00               	movlw	0
  5761   001DEE  0101               	movlb	1	; () banked
  5762   001DF0  6FD9               	movwf	_lost& (0+255),b
  5763   001DF2                     l4063:
  5764                           
  5765                           ; BSR set to: 1
  5766   001DF2  51D9               	movf	_lost& (0+255),w,b
  5767   001DF4  B4D8               	btfsc	status,2,c
  5768   001DF6  EFFF  F00E         	goto	u2751
  5769   001DFA  EF01  F00F         	goto	u2750
  5770   001DFE                     u2751:
  5771   001DFE  EFF9  F00E         	goto	l4063
  5772   001E02                     u2750:
  5773   001E02                     
  5774                           ; BSR set to: 1
  5775                           ;dc_motor.c: 292:     stop(mL, mR, straightRamp);
  5776   001E02  C031  F023         	movff	lostReturnHome@mL,stop@mL
  5777   001E06  C032  F024         	movff	lostReturnHome@mL+1,stop@mL+1
  5778   001E0A  C033  F025         	movff	lostReturnHome@mR,stop@mR
  5779   001E0E  C034  F026         	movff	lostReturnHome@mR+1,stop@mR+1
  5780   001E12  C03C  F027         	movff	lostReturnHome@straightRamp,stop@straightRamp
  5781   001E16  EC4F  F01F         	call	_stop	;wreg free
  5782   001E1A                     
  5783                           ;dc_motor.c: 294:     char i=curMove;
  5784   001E1A  C039  F044         	movff	lostReturnHome@curMove,lostReturnHome@i
  5785                           
  5786                           ;dc_motor.c: 295:     while (i>0) {
  5787   001E1E  EFBD  F011         	goto	l4155
  5788   001E22                     l4069:
  5789                           
  5790                           ;dc_motor.c: 296:         i--;
  5791   001E22  0644               	decf	lostReturnHome@i^0,f,c
  5792   001E24                     
  5793                           ;dc_motor.c: 298:         if (moveSequence[i] == 1) {
  5794   001E24  5044               	movf	lostReturnHome@i^0,w,c
  5795   001E26  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  5796   001E28  6ED9               	movwf	fsr2l,c
  5797   001E2A  0E00               	movlw	0
  5798   001E2C  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  5799   001E2E  6EDA               	movwf	fsr2h,c
  5800   001E30  04DE               	decf	postinc2,w,c
  5801   001E32  A4D8               	btfss	status,2,c
  5802   001E34  EF1E  F00F         	goto	u2761
  5803   001E38  EF20  F00F         	goto	u2760
  5804   001E3C                     u2761:
  5805   001E3C  EF5A  F00F         	goto	l4079
  5806   001E40                     u2760:
  5807   001E40                     
  5808                           ;dc_motor.c: 299:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5809   001E40  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5810   001E44  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5811   001E48  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5812   001E4C  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5813   001E50  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5814   001E54  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5815   001E58  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5816   001E5C  EC26  F01D         	call	_turnLeft	;wreg free
  5817   001E60                     
  5818                           ;dc_motor.c: 300:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5819   001E60  0E05               	movlw	5
  5820   001E62  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5821   001E64  0E0F               	movlw	15
  5822   001E66  6E40               	movwf	??_lostReturnHome^0,c
  5823   001E68  0EF1               	movlw	241
  5824   001E6A                     u3957:
  5825   001E6A  2EE8               	decfsz	wreg,f,c
  5826   001E6C  D7FE               	bra	u3957
  5827   001E6E  2E40               	decfsz	??_lostReturnHome^0,f,c
  5828   001E70  D7FC               	bra	u3957
  5829   001E72  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5830   001E74  D7FA               	bra	u3957
  5831   001E76  0000               	nop	
  5832   001E78                     
  5833                           ;dc_motor.c: 301:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5834   001E78  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5835   001E7C  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5836   001E80  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5837   001E84  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5838   001E88  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5839   001E8C  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5840   001E90  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5841   001E94  EC26  F01D         	call	_turnLeft	;wreg free
  5842                           
  5843                           ;dc_motor.c: 302:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5844   001E98  0E05               	movlw	5
  5845   001E9A  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5846   001E9C  0E0F               	movlw	15
  5847   001E9E  6E40               	movwf	??_lostReturnHome^0,c
  5848   001EA0  0EF1               	movlw	241
  5849   001EA2                     u3967:
  5850   001EA2  2EE8               	decfsz	wreg,f,c
  5851   001EA4  D7FE               	bra	u3967
  5852   001EA6  2E40               	decfsz	??_lostReturnHome^0,f,c
  5853   001EA8  D7FC               	bra	u3967
  5854   001EAA  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5855   001EAC  D7FA               	bra	u3967
  5856   001EAE  0000               	nop	
  5857                           
  5858                           ;dc_motor.c: 303:         }
  5859   001EB0  EF88  F011         	goto	l603
  5860   001EB4                     l4079:
  5861   001EB4  5044               	movf	lostReturnHome@i^0,w,c
  5862   001EB6  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  5863   001EB8  6ED9               	movwf	fsr2l,c
  5864   001EBA  0E00               	movlw	0
  5865   001EBC  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  5866   001EBE  6EDA               	movwf	fsr2h,c
  5867   001EC0  0E02               	movlw	2
  5868   001EC2  18DE               	xorwf	postinc2,w,c
  5869   001EC4  A4D8               	btfss	status,2,c
  5870   001EC6  EF67  F00F         	goto	u2771
  5871   001ECA  EF69  F00F         	goto	u2770
  5872   001ECE                     u2771:
  5873   001ECE  EFA3  F00F         	goto	l4087
  5874   001ED2                     u2770:
  5875   001ED2                     
  5876                           ;dc_motor.c: 306:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5877   001ED2  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  5878   001ED6  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  5879   001EDA  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  5880   001EDE  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  5881   001EE2  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  5882   001EE6  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  5883   001EEA  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  5884   001EEE  EC39  F01C         	call	_turnRight	;wreg free
  5885   001EF2                     
  5886                           ;dc_motor.c: 307:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5887   001EF2  0E05               	movlw	5
  5888   001EF4  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5889   001EF6  0E0F               	movlw	15
  5890   001EF8  6E40               	movwf	??_lostReturnHome^0,c
  5891   001EFA  0EF1               	movlw	241
  5892   001EFC                     u3977:
  5893   001EFC  2EE8               	decfsz	wreg,f,c
  5894   001EFE  D7FE               	bra	u3977
  5895   001F00  2E40               	decfsz	??_lostReturnHome^0,f,c
  5896   001F02  D7FC               	bra	u3977
  5897   001F04  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5898   001F06  D7FA               	bra	u3977
  5899   001F08  0000               	nop	
  5900   001F0A                     
  5901                           ;dc_motor.c: 308:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  5902   001F0A  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  5903   001F0E  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  5904   001F12  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  5905   001F16  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  5906   001F1A  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  5907   001F1E  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  5908   001F22  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  5909   001F26  EC39  F01C         	call	_turnRight	;wreg free
  5910                           
  5911                           ;dc_motor.c: 309:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5912   001F2A  0E05               	movlw	5
  5913   001F2C  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5914   001F2E  0E0F               	movlw	15
  5915   001F30  6E40               	movwf	??_lostReturnHome^0,c
  5916   001F32  0EF1               	movlw	241
  5917   001F34                     u3987:
  5918   001F34  2EE8               	decfsz	wreg,f,c
  5919   001F36  D7FE               	bra	u3987
  5920   001F38  2E40               	decfsz	??_lostReturnHome^0,f,c
  5921   001F3A  D7FC               	bra	u3987
  5922   001F3C  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5923   001F3E  D7FA               	bra	u3987
  5924   001F40  0000               	nop	
  5925                           
  5926                           ;dc_motor.c: 310:         }
  5927   001F42  EF88  F011         	goto	l603
  5928   001F46                     l4087:
  5929   001F46  5044               	movf	lostReturnHome@i^0,w,c
  5930   001F48  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  5931   001F4A  6ED9               	movwf	fsr2l,c
  5932   001F4C  0E00               	movlw	0
  5933   001F4E  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  5934   001F50  6EDA               	movwf	fsr2h,c
  5935   001F52  0E03               	movlw	3
  5936   001F54  18DE               	xorwf	postinc2,w,c
  5937   001F56  A4D8               	btfss	status,2,c
  5938   001F58  EFB0  F00F         	goto	u2781
  5939   001F5C  EFB2  F00F         	goto	u2780
  5940   001F60                     u2781:
  5941   001F60  EF24  F010         	goto	l4101
  5942   001F64                     u2780:
  5943   001F64                     
  5944                           ;dc_motor.c: 313:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5945   001F64  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5946   001F68  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5947   001F6C  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5948   001F70  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5949   001F74  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5950   001F78  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5951   001F7C  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5952   001F80  EC26  F01D         	call	_turnLeft	;wreg free
  5953   001F84                     
  5954                           ;dc_motor.c: 314:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5955   001F84  0E05               	movlw	5
  5956   001F86  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5957   001F88  0E0F               	movlw	15
  5958   001F8A  6E40               	movwf	??_lostReturnHome^0,c
  5959   001F8C  0EF1               	movlw	241
  5960   001F8E                     u3997:
  5961   001F8E  2EE8               	decfsz	wreg,f,c
  5962   001F90  D7FE               	bra	u3997
  5963   001F92  2E40               	decfsz	??_lostReturnHome^0,f,c
  5964   001F94  D7FC               	bra	u3997
  5965   001F96  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5966   001F98  D7FA               	bra	u3997
  5967   001F9A  0000               	nop	
  5968   001F9C                     
  5969                           ;dc_motor.c: 315:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5970   001F9C  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5971   001FA0  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5972   001FA4  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5973   001FA8  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5974   001FAC  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  5975   001FB0  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  5976   001FB4  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  5977   001FB8  EC26  F01D         	call	_turnLeft	;wreg free
  5978                           
  5979                           ;dc_motor.c: 316:             _delay((unsigned long)((50)*(64000000/4000.0)));
  5980   001FBC  0E05               	movlw	5
  5981   001FBE  6E41               	movwf	(??_lostReturnHome+1)^0,c
  5982   001FC0  0E0F               	movlw	15
  5983   001FC2  6E40               	movwf	??_lostReturnHome^0,c
  5984   001FC4  0EF1               	movlw	241
  5985   001FC6                     u4007:
  5986   001FC6  2EE8               	decfsz	wreg,f,c
  5987   001FC8  D7FE               	bra	u4007
  5988   001FCA  2E40               	decfsz	??_lostReturnHome^0,f,c
  5989   001FCC  D7FC               	bra	u4007
  5990   001FCE  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  5991   001FD0  D7FA               	bra	u4007
  5992   001FD2  0000               	nop	
  5993   001FD4                     
  5994                           ;dc_motor.c: 317:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  5995   001FD4  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  5996   001FD8  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  5997   001FDC  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  5998   001FE0  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  5999   001FE4  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6000   001FE8  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6001   001FEC  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6002   001FF0  EC26  F01D         	call	_turnLeft	;wreg free
  6003   001FF4                     
  6004                           ;dc_motor.c: 318:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6005   001FF4  0E05               	movlw	5
  6006   001FF6  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6007   001FF8  0E0F               	movlw	15
  6008   001FFA  6E40               	movwf	??_lostReturnHome^0,c
  6009   001FFC  0EF1               	movlw	241
  6010   001FFE                     u4017:
  6011   001FFE  2EE8               	decfsz	wreg,f,c
  6012   002000  D7FE               	bra	u4017
  6013   002002  2E40               	decfsz	??_lostReturnHome^0,f,c
  6014   002004  D7FC               	bra	u4017
  6015   002006  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6016   002008  D7FA               	bra	u4017
  6017   00200A  0000               	nop	
  6018                           
  6019                           ;dc_motor.c: 319:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6020   00200C  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6021   002010  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6022   002014  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6023   002018  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6024   00201C  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6025   002020  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6026   002024  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6027   002028  EC26  F01D         	call	_turnLeft	;wreg free
  6028   00202C                     l4099:
  6029                           
  6030                           ;dc_motor.c: 320:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6031   00202C  0E05               	movlw	5
  6032   00202E  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6033   002030  0E0F               	movlw	15
  6034   002032  6E40               	movwf	??_lostReturnHome^0,c
  6035   002034  0EF1               	movlw	241
  6036   002036                     u4027:
  6037   002036  2EE8               	decfsz	wreg,f,c
  6038   002038  D7FE               	bra	u4027
  6039   00203A  2E40               	decfsz	??_lostReturnHome^0,f,c
  6040   00203C  D7FC               	bra	u4027
  6041   00203E  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6042   002040  D7FA               	bra	u4027
  6043   002042  0000               	nop	
  6044                           
  6045                           ;dc_motor.c: 321:         }
  6046   002044  EF88  F011         	goto	l603
  6047   002048                     l4101:
  6048   002048  5044               	movf	lostReturnHome@i^0,w,c
  6049   00204A  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  6050   00204C  6ED9               	movwf	fsr2l,c
  6051   00204E  0E00               	movlw	0
  6052   002050  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  6053   002052  6EDA               	movwf	fsr2h,c
  6054   002054  0E04               	movlw	4
  6055   002056  18DE               	xorwf	postinc2,w,c
  6056   002058  A4D8               	btfss	status,2,c
  6057   00205A  EF31  F010         	goto	u2791
  6058   00205E  EF33  F010         	goto	u2790
  6059   002062                     u2791:
  6060   002062  EF7D  F010         	goto	l4113
  6061   002066                     u2790:
  6062   002066                     
  6063                           ;dc_motor.c: 324:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6064   002066  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6065   00206A  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6066   00206E  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6067   002072  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6068   002076  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6069   00207A  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6070   00207E  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6071   002082  EC26  F01D         	call	_turnLeft	;wreg free
  6072   002086                     
  6073                           ;dc_motor.c: 325:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6074   002086  0E05               	movlw	5
  6075   002088  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6076   00208A  0E0F               	movlw	15
  6077   00208C  6E40               	movwf	??_lostReturnHome^0,c
  6078   00208E  0EF1               	movlw	241
  6079   002090                     u4037:
  6080   002090  2EE8               	decfsz	wreg,f,c
  6081   002092  D7FE               	bra	u4037
  6082   002094  2E40               	decfsz	??_lostReturnHome^0,f,c
  6083   002096  D7FC               	bra	u4037
  6084   002098  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6085   00209A  D7FA               	bra	u4037
  6086   00209C  0000               	nop	
  6087   00209E                     
  6088                           ;dc_motor.c: 326:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6089   00209E  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6090   0020A2  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6091   0020A6  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6092   0020AA  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6093   0020AE  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6094   0020B2  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6095   0020B6  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6096   0020BA  EC26  F01D         	call	_turnLeft	;wreg free
  6097                           
  6098                           ;dc_motor.c: 327:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6099   0020BE  0E05               	movlw	5
  6100   0020C0  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6101   0020C2  0E0F               	movlw	15
  6102   0020C4  6E40               	movwf	??_lostReturnHome^0,c
  6103   0020C6  0EF1               	movlw	241
  6104   0020C8                     u4047:
  6105   0020C8  2EE8               	decfsz	wreg,f,c
  6106   0020CA  D7FE               	bra	u4047
  6107   0020CC  2E40               	decfsz	??_lostReturnHome^0,f,c
  6108   0020CE  D7FC               	bra	u4047
  6109   0020D0  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6110   0020D2  D7FA               	bra	u4047
  6111   0020D4  0000               	nop	
  6112   0020D6                     
  6113                           ;dc_motor.c: 328:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  6114   0020D6  C031  F023         	movff	lostReturnHome@mL,reverseOneSquare@mL
  6115   0020DA  C032  F024         	movff	lostReturnHome@mL+1,reverseOneSquare@mL+1
  6116   0020DE  C033  F025         	movff	lostReturnHome@mR,reverseOneSquare@mR
  6117   0020E2  C034  F026         	movff	lostReturnHome@mR+1,reverseOneSquare@mR+1
  6118   0020E6  C03A  F027         	movff	lostReturnHome@straightSpeed,reverseOneSquare@straightSpeed
  6119   0020EA  C03B  F028         	movff	lostReturnHome@reverseDuration,reverseOneSquare@reverseDuration
  6120   0020EE  C03C  F029         	movff	lostReturnHome@straightRamp,reverseOneSquare@straightRamp
  6121   0020F2  EC43  F01B         	call	_reverseOneSquare	;wreg free
  6122   0020F6  EF16  F010         	goto	l4099
  6123   0020FA                     l4113:
  6124   0020FA  5044               	movf	lostReturnHome@i^0,w,c
  6125   0020FC  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  6126   0020FE  6ED9               	movwf	fsr2l,c
  6127   002100  0E00               	movlw	0
  6128   002102  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  6129   002104  6EDA               	movwf	fsr2h,c
  6130   002106  0E05               	movlw	5
  6131   002108  18DE               	xorwf	postinc2,w,c
  6132   00210A  A4D8               	btfss	status,2,c
  6133   00210C  EF8A  F010         	goto	u2801
  6134   002110  EF8C  F010         	goto	u2800
  6135   002114                     u2801:
  6136   002114  EFD6  F010         	goto	l4125
  6137   002118                     u2800:
  6138   002118                     
  6139                           ;dc_motor.c: 333:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  6140   002118  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  6141   00211C  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  6142   002120  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  6143   002124  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  6144   002128  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  6145   00212C  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  6146   002130  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  6147   002134  EC39  F01C         	call	_turnRight	;wreg free
  6148   002138                     
  6149                           ;dc_motor.c: 334:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6150   002138  0E05               	movlw	5
  6151   00213A  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6152   00213C  0E0F               	movlw	15
  6153   00213E  6E40               	movwf	??_lostReturnHome^0,c
  6154   002140  0EF1               	movlw	241
  6155   002142                     u4057:
  6156   002142  2EE8               	decfsz	wreg,f,c
  6157   002144  D7FE               	bra	u4057
  6158   002146  2E40               	decfsz	??_lostReturnHome^0,f,c
  6159   002148  D7FC               	bra	u4057
  6160   00214A  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6161   00214C  D7FA               	bra	u4057
  6162   00214E  0000               	nop	
  6163   002150                     
  6164                           ;dc_motor.c: 335:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  6165   002150  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  6166   002154  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  6167   002158  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  6168   00215C  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  6169   002160  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  6170   002164  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  6171   002168  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  6172   00216C  EC39  F01C         	call	_turnRight	;wreg free
  6173                           
  6174                           ;dc_motor.c: 336:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6175   002170  0E05               	movlw	5
  6176   002172  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6177   002174  0E0F               	movlw	15
  6178   002176  6E40               	movwf	??_lostReturnHome^0,c
  6179   002178  0EF1               	movlw	241
  6180   00217A                     u4067:
  6181   00217A  2EE8               	decfsz	wreg,f,c
  6182   00217C  D7FE               	bra	u4067
  6183   00217E  2E40               	decfsz	??_lostReturnHome^0,f,c
  6184   002180  D7FC               	bra	u4067
  6185   002182  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6186   002184  D7FA               	bra	u4067
  6187   002186  0000               	nop	
  6188   002188                     
  6189                           ;dc_motor.c: 337:             reverseOneSquare(mL, mR, straightSpeed, reverseDuration, s
      +                          traightRamp);
  6190   002188  C031  F023         	movff	lostReturnHome@mL,reverseOneSquare@mL
  6191   00218C  C032  F024         	movff	lostReturnHome@mL+1,reverseOneSquare@mL+1
  6192   002190  C033  F025         	movff	lostReturnHome@mR,reverseOneSquare@mR
  6193   002194  C034  F026         	movff	lostReturnHome@mR+1,reverseOneSquare@mR+1
  6194   002198  C03A  F027         	movff	lostReturnHome@straightSpeed,reverseOneSquare@straightSpeed
  6195   00219C  C03B  F028         	movff	lostReturnHome@reverseDuration,reverseOneSquare@reverseDuration
  6196   0021A0  C03C  F029         	movff	lostReturnHome@straightRamp,reverseOneSquare@straightRamp
  6197   0021A4  EC43  F01B         	call	_reverseOneSquare	;wreg free
  6198   0021A8  EF16  F010         	goto	l4099
  6199   0021AC                     l4125:
  6200   0021AC  5044               	movf	lostReturnHome@i^0,w,c
  6201   0021AE  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  6202   0021B0  6ED9               	movwf	fsr2l,c
  6203   0021B2  0E00               	movlw	0
  6204   0021B4  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  6205   0021B6  6EDA               	movwf	fsr2h,c
  6206   0021B8  0E06               	movlw	6
  6207   0021BA  18DE               	xorwf	postinc2,w,c
  6208   0021BC  A4D8               	btfss	status,2,c
  6209   0021BE  EFE3  F010         	goto	u2811
  6210   0021C2  EFE5  F010         	goto	u2810
  6211   0021C6                     u2811:
  6212   0021C6  EF2F  F011         	goto	l4137
  6213   0021CA                     u2810:
  6214   0021CA                     
  6215                           ;dc_motor.c: 342:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6216   0021CA  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6217   0021CE  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6218   0021D2  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6219   0021D6  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6220   0021DA  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6221   0021DE  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6222   0021E2  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6223   0021E6  EC26  F01D         	call	_turnLeft	;wreg free
  6224   0021EA                     
  6225                           ;dc_motor.c: 343:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6226   0021EA  0E05               	movlw	5
  6227   0021EC  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6228   0021EE  0E0F               	movlw	15
  6229   0021F0  6E40               	movwf	??_lostReturnHome^0,c
  6230   0021F2  0EF1               	movlw	241
  6231   0021F4                     u4077:
  6232   0021F4  2EE8               	decfsz	wreg,f,c
  6233   0021F6  D7FE               	bra	u4077
  6234   0021F8  2E40               	decfsz	??_lostReturnHome^0,f,c
  6235   0021FA  D7FC               	bra	u4077
  6236   0021FC  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6237   0021FE  D7FA               	bra	u4077
  6238   002200  0000               	nop	
  6239   002202                     
  6240                           ;dc_motor.c: 344:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6241   002202  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6242   002206  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6243   00220A  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6244   00220E  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6245   002212  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6246   002216  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6247   00221A  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6248   00221E  EC26  F01D         	call	_turnLeft	;wreg free
  6249                           
  6250                           ;dc_motor.c: 345:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6251   002222  0E05               	movlw	5
  6252   002224  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6253   002226  0E0F               	movlw	15
  6254   002228  6E40               	movwf	??_lostReturnHome^0,c
  6255   00222A  0EF1               	movlw	241
  6256   00222C                     u4087:
  6257   00222C  2EE8               	decfsz	wreg,f,c
  6258   00222E  D7FE               	bra	u4087
  6259   002230  2E40               	decfsz	??_lostReturnHome^0,f,c
  6260   002232  D7FC               	bra	u4087
  6261   002234  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6262   002236  D7FA               	bra	u4087
  6263   002238  0000               	nop	
  6264   00223A                     
  6265                           ;dc_motor.c: 346:             turnLeft(mL, mR, turnSpeed, turnDuration, turnRamp);
  6266   00223A  C031  F023         	movff	lostReturnHome@mL,turnLeft@mL
  6267   00223E  C032  F024         	movff	lostReturnHome@mL+1,turnLeft@mL+1
  6268   002242  C033  F025         	movff	lostReturnHome@mR,turnLeft@mR
  6269   002246  C034  F026         	movff	lostReturnHome@mR+1,turnLeft@mR+1
  6270   00224A  C03D  F027         	movff	lostReturnHome@turnSpeed,turnLeft@turnSpeed
  6271   00224E  C03E  F028         	movff	lostReturnHome@turnDuration,turnLeft@turnDuration
  6272   002252  C03F  F029         	movff	lostReturnHome@turnRamp,turnLeft@turnRamp
  6273   002256  EC26  F01D         	call	_turnLeft	;wreg free
  6274   00225A  EF16  F010         	goto	l4099
  6275   00225E                     l4137:
  6276   00225E  5044               	movf	lostReturnHome@i^0,w,c
  6277   002260  2435               	addwf	lostReturnHome@moveSequence^0,w,c
  6278   002262  6ED9               	movwf	fsr2l,c
  6279   002264  0E00               	movlw	0
  6280   002266  2036               	addwfc	(lostReturnHome@moveSequence+1)^0,w,c
  6281   002268  6EDA               	movwf	fsr2h,c
  6282   00226A  0E07               	movlw	7
  6283   00226C  18DE               	xorwf	postinc2,w,c
  6284   00226E  A4D8               	btfss	status,2,c
  6285   002270  EF3C  F011         	goto	u2821
  6286   002274  EF3E  F011         	goto	u2820
  6287   002278                     u2821:
  6288   002278  EF88  F011         	goto	l609
  6289   00227C                     u2820:
  6290   00227C                     
  6291                           ;dc_motor.c: 351:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  6292   00227C  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  6293   002280  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  6294   002284  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  6295   002288  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  6296   00228C  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  6297   002290  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  6298   002294  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  6299   002298  EC39  F01C         	call	_turnRight	;wreg free
  6300   00229C                     
  6301                           ;dc_motor.c: 352:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6302   00229C  0E05               	movlw	5
  6303   00229E  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6304   0022A0  0E0F               	movlw	15
  6305   0022A2  6E40               	movwf	??_lostReturnHome^0,c
  6306   0022A4  0EF1               	movlw	241
  6307   0022A6                     u4097:
  6308   0022A6  2EE8               	decfsz	wreg,f,c
  6309   0022A8  D7FE               	bra	u4097
  6310   0022AA  2E40               	decfsz	??_lostReturnHome^0,f,c
  6311   0022AC  D7FC               	bra	u4097
  6312   0022AE  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6313   0022B0  D7FA               	bra	u4097
  6314   0022B2  0000               	nop	
  6315   0022B4                     
  6316                           ;dc_motor.c: 353:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  6317   0022B4  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  6318   0022B8  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  6319   0022BC  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  6320   0022C0  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  6321   0022C4  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  6322   0022C8  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  6323   0022CC  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  6324   0022D0  EC39  F01C         	call	_turnRight	;wreg free
  6325                           
  6326                           ;dc_motor.c: 354:             _delay((unsigned long)((50)*(64000000/4000.0)));
  6327   0022D4  0E05               	movlw	5
  6328   0022D6  6E41               	movwf	(??_lostReturnHome+1)^0,c
  6329   0022D8  0E0F               	movlw	15
  6330   0022DA  6E40               	movwf	??_lostReturnHome^0,c
  6331   0022DC  0EF1               	movlw	241
  6332   0022DE                     u4107:
  6333   0022DE  2EE8               	decfsz	wreg,f,c
  6334   0022E0  D7FE               	bra	u4107
  6335   0022E2  2E40               	decfsz	??_lostReturnHome^0,f,c
  6336   0022E4  D7FC               	bra	u4107
  6337   0022E6  2E41               	decfsz	(??_lostReturnHome+1)^0,f,c
  6338   0022E8  D7FA               	bra	u4107
  6339   0022EA  0000               	nop	
  6340   0022EC                     
  6341                           ;dc_motor.c: 355:             turnRight(mL, mR, turnSpeed, turnDuration, turnRamp);
  6342   0022EC  C031  F023         	movff	lostReturnHome@mL,turnRight@mL
  6343   0022F0  C032  F024         	movff	lostReturnHome@mL+1,turnRight@mL+1
  6344   0022F4  C033  F025         	movff	lostReturnHome@mR,turnRight@mR
  6345   0022F8  C034  F026         	movff	lostReturnHome@mR+1,turnRight@mR+1
  6346   0022FC  C03D  F027         	movff	lostReturnHome@turnSpeed,turnRight@turnSpeed
  6347   002300  C03E  F028         	movff	lostReturnHome@turnDuration,turnRight@turnDuration
  6348   002304  C03F  F029         	movff	lostReturnHome@turnRamp,turnRight@turnRamp
  6349   002308  EC39  F01C         	call	_turnRight	;wreg free
  6350   00230C  EF16  F010         	goto	l4099
  6351   002310                     l609:
  6352   002310                     l603:
  6353                           
  6354                           ;dc_motor.c: 359:         fullSpeedAhead(mL, mR, straightSpeed, straightRamp);
  6355   002310  C031  F023         	movff	lostReturnHome@mL,fullSpeedAhead@mL
  6356   002314  C032  F024         	movff	lostReturnHome@mL+1,fullSpeedAhead@mL+1
  6357   002318  C033  F025         	movff	lostReturnHome@mR,fullSpeedAhead@mR
  6358   00231C  C034  F026         	movff	lostReturnHome@mR+1,fullSpeedAhead@mR+1
  6359   002320  C03A  F027         	movff	lostReturnHome@straightSpeed,fullSpeedAhead@straightSpeed
  6360   002324  C03C  F028         	movff	lostReturnHome@straightRamp,fullSpeedAhead@straightRamp
  6361   002328  ECD3  F01F         	call	_fullSpeedAhead	;wreg free
  6362   00232C                     
  6363                           ;dc_motor.c: 360:         resetTimer();
  6364   00232C  EC7B  F024         	call	_resetTimer	;wreg free
  6365   002330                     l4151:
  6366   002330  5044               	movf	lostReturnHome@i^0,w,c
  6367   002332  0D02               	mullw	2
  6368   002334  CFF3 F040          	movff	prodl,??_lostReturnHome
  6369   002338  CFF4 F041          	movff	prodh,??_lostReturnHome+1
  6370   00233C  5040               	movf	??_lostReturnHome^0,w,c
  6371   00233E  2437               	addwf	lostReturnHome@straightTime^0,w,c
  6372   002340  6ED9               	movwf	fsr2l,c
  6373   002342  5041               	movf	(??_lostReturnHome+1)^0,w,c
  6374   002344  2038               	addwfc	(lostReturnHome@straightTime+1)^0,w,c
  6375   002346  6EDA               	movwf	fsr2h,c
  6376   002348  EC79  F023         	call	_get16bitTMR0val	;wreg free
  6377   00234C  50DE               	movf	postinc2,w,c
  6378   00234E  5C10               	subwf	?_get16bitTMR0val^0,w,c
  6379   002350  50DE               	movf	postinc2,w,c
  6380   002352  5811               	subwfb	(?_get16bitTMR0val+1)^0,w,c
  6381   002354  A0D8               	btfss	status,0,c
  6382   002356  EFAF  F011         	goto	u2831
  6383   00235A  EFB1  F011         	goto	u2830
  6384   00235E                     u2831:
  6385   00235E  EF98  F011         	goto	l4151
  6386   002362                     u2830:
  6387   002362                     
  6388                           ;dc_motor.c: 362:         stop(mL, mR, straightRamp);
  6389   002362  C031  F023         	movff	lostReturnHome@mL,stop@mL
  6390   002366  C032  F024         	movff	lostReturnHome@mL+1,stop@mL+1
  6391   00236A  C033  F025         	movff	lostReturnHome@mR,stop@mR
  6392   00236E  C034  F026         	movff	lostReturnHome@mR+1,stop@mR+1
  6393   002372  C03C  F027         	movff	lostReturnHome@straightRamp,stop@straightRamp
  6394   002376  EC4F  F01F         	call	_stop	;wreg free
  6395   00237A                     l4155:
  6396                           
  6397                           ;dc_motor.c: 295:     while (i>0) {
  6398   00237A  5044               	movf	lostReturnHome@i^0,w,c
  6399   00237C  A4D8               	btfss	status,2,c
  6400   00237E  EFC3  F011         	goto	u2841
  6401   002382  EFC5  F011         	goto	u2840
  6402   002386                     u2841:
  6403   002386  EF11  F00F         	goto	l4069
  6404   00238A                     u2840:
  6405   00238A  0012               	return		;funcret
  6406   00238C                     __end_of_lostReturnHome:
  6407                           	callstack 0
  6408                           
  6409 ;; *************** function _stop *****************
  6410 ;; Defined at:
  6411 ;;		line 367 in file "dc_motor.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  6414 ;;		 -> main@motorL(10), 
  6415 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  6416 ;;		 -> main@motorR(10), 
  6417 ;;  straightRamp    1   38[COMRAM] unsigned char 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;  cur_power       2   44[COMRAM] int 
  6420 ;;  i               2   42[COMRAM] int 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6430 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;Total ram usage:       12 bytes
  6435 ;; Hardware stack levels used: 1
  6436 ;; Hardware stack levels required when called: 7
  6437 ;; This function calls:
  6438 ;;		_setMotorPWM
  6439 ;; This function is called by:
  6440 ;;		_main
  6441 ;;		_returnHome
  6442 ;;		_lostReturnHome
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text13
  6447   003E9E                     __ptext13:
  6448                           	callstack 0
  6449   003E9E                     _stop:
  6450                           	callstack 23
  6451   003E9E                     
  6452                           ;dc_motor.c: 367: void stop(DC_motor *mL, DC_motor *mR, unsigned char straightRamp);dc_m
      +                          otor.c: 368: {;dc_motor.c: 369:     mL->direction = 1;
  6453   003E9E  EE20 F001          	lfsr	2,1
  6454   003EA2  5023               	movf	stop@mL^0,w,c
  6455   003EA4  26D9               	addwf	fsr2l,f,c
  6456   003EA6  5024               	movf	(stop@mL+1)^0,w,c
  6457   003EA8  22DA               	addwfc	fsr2h,f,c
  6458   003EAA  0E01               	movlw	1
  6459   003EAC  6EDF               	movwf	indf2,c
  6460                           
  6461                           ;dc_motor.c: 370:     mR->direction = 1;
  6462   003EAE  EE20 F001          	lfsr	2,1
  6463   003EB2  5025               	movf	stop@mR^0,w,c
  6464   003EB4  26D9               	addwf	fsr2l,f,c
  6465   003EB6  5026               	movf	(stop@mR+1)^0,w,c
  6466   003EB8  22DA               	addwfc	fsr2h,f,c
  6467   003EBA  0E01               	movlw	1
  6468   003EBC  6EDF               	movwf	indf2,c
  6469                           
  6470                           ;dc_motor.c: 371:     int i;;dc_motor.c: 372:     int cur_power;;dc_motor.c: 373:     fo
      +                          r (cur_power=mL->power-mL->compensation;cur_power>=0;cur_power--) {
  6471   003EBE  C023  FFD9         	movff	stop@mL,fsr2l
  6472   003EC2  C024  FFDA         	movff	stop@mL+1,fsr2h
  6473   003EC6  50DF               	movf	indf2,w,c
  6474   003EC8  6E28               	movwf	??_stop^0,c
  6475   003ECA  EE20 F009          	lfsr	2,9
  6476   003ECE  5023               	movf	stop@mL^0,w,c
  6477   003ED0  26D9               	addwf	fsr2l,f,c
  6478   003ED2  5024               	movf	(stop@mL+1)^0,w,c
  6479   003ED4  22DA               	addwfc	fsr2h,f,c
  6480   003ED6  50DF               	movf	indf2,w,c
  6481   003ED8  6E29               	movwf	(??_stop+1)^0,c
  6482   003EDA  5029               	movf	(??_stop+1)^0,w,c
  6483   003EDC  5C28               	subwf	??_stop^0,w,c
  6484   003EDE  6E2D               	movwf	stop@cur_power^0,c
  6485   003EE0  6A2E               	clrf	(stop@cur_power+1)^0,c
  6486   003EE2  A0D8               	btfss	status,0,c
  6487   003EE4  062E               	decf	(stop@cur_power+1)^0,f,c
  6488   003EE6                     l3111:
  6489   003EE6  BE2E               	btfsc	(stop@cur_power+1)^0,7,c
  6490   003EE8  EF7A  F01F         	goto	u1840
  6491   003EEC  EF78  F01F         	goto	u1841
  6492   003EF0                     u1841:
  6493   003EF0  EF7C  F01F         	goto	l3115
  6494   003EF4                     u1840:
  6495   003EF4  EFC8  F01F         	goto	l3131
  6496   003EF8                     l3115:
  6497                           
  6498                           ;dc_motor.c: 374:         mL->power = cur_power+mL->compensation;
  6499   003EF8  EE20 F009          	lfsr	2,9
  6500   003EFC  5023               	movf	stop@mL^0,w,c
  6501   003EFE  26D9               	addwf	fsr2l,f,c
  6502   003F00  5024               	movf	(stop@mL+1)^0,w,c
  6503   003F02  22DA               	addwfc	fsr2h,f,c
  6504   003F04  50DF               	movf	indf2,w,c
  6505   003F06  242D               	addwf	stop@cur_power^0,w,c
  6506   003F08  C023  FFD9         	movff	stop@mL,fsr2l
  6507   003F0C  C024  FFDA         	movff	stop@mL+1,fsr2h
  6508   003F10  6EDF               	movwf	indf2,c
  6509                           
  6510                           ;dc_motor.c: 375:         mR->power = cur_power+mR->compensation;
  6511   003F12  EE20 F009          	lfsr	2,9
  6512   003F16  5025               	movf	stop@mR^0,w,c
  6513   003F18  26D9               	addwf	fsr2l,f,c
  6514   003F1A  5026               	movf	(stop@mR+1)^0,w,c
  6515   003F1C  22DA               	addwfc	fsr2h,f,c
  6516   003F1E  50DF               	movf	indf2,w,c
  6517   003F20  242D               	addwf	stop@cur_power^0,w,c
  6518   003F22  C025  FFD9         	movff	stop@mR,fsr2l
  6519   003F26  C026  FFDA         	movff	stop@mR+1,fsr2h
  6520   003F2A  6EDF               	movwf	indf2,c
  6521   003F2C                     
  6522                           ;dc_motor.c: 376:         setMotorPWM(mL);
  6523   003F2C  C023  F01D         	movff	stop@mL,setMotorPWM@m
  6524   003F30  C024  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  6525   003F34  EC13  F01E         	call	_setMotorPWM	;wreg free
  6526   003F38                     
  6527                           ;dc_motor.c: 377:         setMotorPWM(mR);
  6528   003F38  C025  F01D         	movff	stop@mR,setMotorPWM@m
  6529   003F3C  C026  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  6530   003F40  EC13  F01E         	call	_setMotorPWM	;wreg free
  6531   003F44                     
  6532                           ;dc_motor.c: 378:         for (i=0;i<straightRamp;i++) {
  6533   003F44  0E00               	movlw	0
  6534   003F46  6E2C               	movwf	(stop@i+1)^0,c
  6535   003F48  0E00               	movlw	0
  6536   003F4A  6E2B               	movwf	stop@i^0,c
  6537   003F4C  EFB1  F01F         	goto	l624
  6538   003F50                     l3123:
  6539                           
  6540                           ;dc_motor.c: 379:             _delay((unsigned long)((10)*(64000000/4000.0)));
  6541   003F50  0ED0               	movlw	208
  6542   003F52  6E28               	movwf	??_stop^0,c
  6543   003F54  0ECA               	movlw	202
  6544   003F56                     u4117:
  6545   003F56  2EE8               	decfsz	wreg,f,c
  6546   003F58  D7FE               	bra	u4117
  6547   003F5A  2E28               	decfsz	??_stop^0,f,c
  6548   003F5C  D7FC               	bra	u4117
  6549   003F5E                     
  6550                           ;dc_motor.c: 380:         }
  6551   003F5E  4A2B               	infsnz	stop@i^0,f,c
  6552   003F60  2A2C               	incf	(stop@i+1)^0,f,c
  6553   003F62                     l624:
  6554   003F62  5027               	movf	stop@straightRamp^0,w,c
  6555   003F64  6E28               	movwf	??_stop^0,c
  6556   003F66  6A29               	clrf	(??_stop+1)^0,c
  6557   003F68  5028               	movf	??_stop^0,w,c
  6558   003F6A  5C2B               	subwf	stop@i^0,w,c
  6559   003F6C  502C               	movf	(stop@i+1)^0,w,c
  6560   003F6E  0A80               	xorlw	128
  6561   003F70  6E2A               	movwf	(??_stop+2)^0,c
  6562   003F72  5029               	movf	(??_stop+1)^0,w,c
  6563   003F74  0A80               	xorlw	128
  6564   003F76  582A               	subwfb	(??_stop+2)^0,w,c
  6565   003F78  A0D8               	btfss	status,0,c
  6566   003F7A  EFC1  F01F         	goto	u1851
  6567   003F7E  EFC3  F01F         	goto	u1850
  6568   003F82                     u1851:
  6569   003F82  EFA8  F01F         	goto	l3123
  6570   003F86                     u1850:
  6571   003F86                     
  6572                           ;dc_motor.c: 381:     }
  6573   003F86  062D               	decf	stop@cur_power^0,f,c
  6574   003F88  A0D8               	btfss	status,0,c
  6575   003F8A  062E               	decf	(stop@cur_power+1)^0,f,c
  6576   003F8C  EF73  F01F         	goto	l3111
  6577   003F90                     l3131:
  6578                           
  6579                           ;dc_motor.c: 382:     mL->power = 0;
  6580   003F90  C023  FFD9         	movff	stop@mL,fsr2l
  6581   003F94  C024  FFDA         	movff	stop@mL+1,fsr2h
  6582   003F98  6ADF               	clrf	indf2,c
  6583                           
  6584                           ;dc_motor.c: 383:     mR->power = 0;
  6585   003F9A  C025  FFD9         	movff	stop@mR,fsr2l
  6586   003F9E  C026  FFDA         	movff	stop@mR+1,fsr2h
  6587   003FA2  6ADF               	clrf	indf2,c
  6588   003FA4  0012               	return		;funcret
  6589   003FA6                     __end_of_stop:
  6590                           	callstack 0
  6591                           
  6592 ;; *************** function _reverseOneSquare *****************
  6593 ;; Defined at:
  6594 ;;		line 468 in file "dc_motor.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  6597 ;;		 -> main@motorL(10), 
  6598 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  6599 ;;		 -> main@motorR(10), 
  6600 ;;  straightSpee    1   38[COMRAM] unsigned char 
  6601 ;;  reverseDurat    1   39[COMRAM] unsigned char 
  6602 ;;  straightRamp    1   40[COMRAM] unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  cur_power       2   46[COMRAM] int 
  6605 ;;  i               2   44[COMRAM] int 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6615 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6616 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6618 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6619 ;;Total ram usage:       14 bytes
  6620 ;; Hardware stack levels used: 1
  6621 ;; Hardware stack levels required when called: 7
  6622 ;; This function calls:
  6623 ;;		_setMotorPWM
  6624 ;; This function is called by:
  6625 ;;		_move
  6626 ;;		_returnHome
  6627 ;;		_lostReturnHome
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text14
  6632   003686                     __ptext14:
  6633                           	callstack 0
  6634   003686                     _reverseOneSquare:
  6635                           	callstack 22
  6636   003686                     
  6637                           ;dc_motor.c: 468: void reverseOneSquare(DC_motor *mL, DC_motor *mR, char straightSpeed, 
      +                          unsigned char reverseDuration, unsigned char straightRamp);dc_motor.c: 469: {;dc_motor.c
      +                          : 470:     mL->direction = 0;
  6638   003686  EE20 F001          	lfsr	2,1
  6639   00368A  5023               	movf	reverseOneSquare@mL^0,w,c
  6640   00368C  26D9               	addwf	fsr2l,f,c
  6641   00368E  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  6642   003690  22DA               	addwfc	fsr2h,f,c
  6643   003692  6ADF               	clrf	indf2,c
  6644                           
  6645                           ;dc_motor.c: 471:     mR->direction = 0;
  6646   003694  EE20 F001          	lfsr	2,1
  6647   003698  5025               	movf	reverseOneSquare@mR^0,w,c
  6648   00369A  26D9               	addwf	fsr2l,f,c
  6649   00369C  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  6650   00369E  22DA               	addwfc	fsr2h,f,c
  6651   0036A0  6ADF               	clrf	indf2,c
  6652   0036A2                     
  6653                           ;dc_motor.c: 472:     int i;;dc_motor.c: 473:     int cur_power;;dc_motor.c: 474:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  6654   0036A2  0E00               	movlw	0
  6655   0036A4  6E30               	movwf	(reverseOneSquare@cur_power+1)^0,c
  6656   0036A6  0E01               	movlw	1
  6657   0036A8  6E2F               	movwf	reverseOneSquare@cur_power^0,c
  6658   0036AA  EFA1  F01B         	goto	l3245
  6659   0036AE                     l3231:
  6660                           
  6661                           ;dc_motor.c: 475:         mL->power = cur_power+mL->compensation;
  6662   0036AE  EE20 F009          	lfsr	2,9
  6663   0036B2  5023               	movf	reverseOneSquare@mL^0,w,c
  6664   0036B4  26D9               	addwf	fsr2l,f,c
  6665   0036B6  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  6666   0036B8  22DA               	addwfc	fsr2h,f,c
  6667   0036BA  50DF               	movf	indf2,w,c
  6668   0036BC  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  6669   0036BE  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  6670   0036C2  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  6671   0036C6  6EDF               	movwf	indf2,c
  6672                           
  6673                           ;dc_motor.c: 476:         mR->power = cur_power+mR->compensation;
  6674   0036C8  EE20 F009          	lfsr	2,9
  6675   0036CC  5025               	movf	reverseOneSquare@mR^0,w,c
  6676   0036CE  26D9               	addwf	fsr2l,f,c
  6677   0036D0  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  6678   0036D2  22DA               	addwfc	fsr2h,f,c
  6679   0036D4  50DF               	movf	indf2,w,c
  6680   0036D6  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  6681   0036D8  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  6682   0036DC  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  6683   0036E0  6EDF               	movwf	indf2,c
  6684   0036E2                     
  6685                           ;dc_motor.c: 477:         setMotorPWM(mL);
  6686   0036E2  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  6687   0036E6  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  6688   0036EA  EC13  F01E         	call	_setMotorPWM	;wreg free
  6689   0036EE                     
  6690                           ;dc_motor.c: 478:         setMotorPWM(mR);
  6691   0036EE  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  6692   0036F2  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  6693   0036F6  EC13  F01E         	call	_setMotorPWM	;wreg free
  6694   0036FA                     
  6695                           ;dc_motor.c: 479:         for (i=0;i<straightRamp;i++) {
  6696   0036FA  0E00               	movlw	0
  6697   0036FC  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  6698   0036FE  0E00               	movlw	0
  6699   003700  6E2D               	movwf	reverseOneSquare@i^0,c
  6700   003702  EF8D  F01B         	goto	l675
  6701   003706                     l3239:
  6702                           
  6703                           ;dc_motor.c: 480:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6704   003706  0E68               	movlw	104
  6705   003708  6E2A               	movwf	??_reverseOneSquare^0,c
  6706   00370A  0EE4               	movlw	228
  6707   00370C                     u4127:
  6708   00370C  2EE8               	decfsz	wreg,f,c
  6709   00370E  D7FE               	bra	u4127
  6710   003710  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  6711   003712  D7FC               	bra	u4127
  6712   003714  D000               	nop2	
  6713   003716                     
  6714                           ;dc_motor.c: 481:         }
  6715   003716  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  6716   003718  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  6717   00371A                     l675:
  6718   00371A  5029               	movf	reverseOneSquare@straightRamp^0,w,c
  6719   00371C  6E2A               	movwf	??_reverseOneSquare^0,c
  6720   00371E  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  6721   003720  502A               	movf	??_reverseOneSquare^0,w,c
  6722   003722  5C2D               	subwf	reverseOneSquare@i^0,w,c
  6723   003724  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  6724   003726  0A80               	xorlw	128
  6725   003728  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  6726   00372A  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  6727   00372C  0A80               	xorlw	128
  6728   00372E  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  6729   003730  A0D8               	btfss	status,0,c
  6730   003732  EF9D  F01B         	goto	u1961
  6731   003736  EF9F  F01B         	goto	u1960
  6732   00373A                     u1961:
  6733   00373A  EF83  F01B         	goto	l3239
  6734   00373E                     u1960:
  6735   00373E                     
  6736                           ;dc_motor.c: 482:     }
  6737   00373E  4A2F               	infsnz	reverseOneSquare@cur_power^0,f,c
  6738   003740  2A30               	incf	(reverseOneSquare@cur_power+1)^0,f,c
  6739   003742                     l3245:
  6740   003742  5027               	movf	reverseOneSquare@straightSpeed^0,w,c
  6741   003744  6E2A               	movwf	??_reverseOneSquare^0,c
  6742   003746  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  6743   003748  502F               	movf	reverseOneSquare@cur_power^0,w,c
  6744   00374A  5C2A               	subwf	??_reverseOneSquare^0,w,c
  6745   00374C  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  6746   00374E  0A80               	xorlw	128
  6747   003750  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  6748   003752  5030               	movf	(reverseOneSquare@cur_power+1)^0,w,c
  6749   003754  0A80               	xorlw	128
  6750   003756  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  6751   003758  B0D8               	btfsc	status,0,c
  6752   00375A  EFB1  F01B         	goto	u1971
  6753   00375E  EFB3  F01B         	goto	u1970
  6754   003762                     u1971:
  6755   003762  EF57  F01B         	goto	l3231
  6756   003766                     u1970:
  6757   003766                     
  6758                           ;dc_motor.c: 484:     for (i=0;i<reverseDuration;i++) {
  6759   003766  0E00               	movlw	0
  6760   003768  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  6761   00376A  0E00               	movlw	0
  6762   00376C  6E2D               	movwf	reverseOneSquare@i^0,c
  6763   00376E  EFC3  F01B         	goto	l679
  6764   003772                     l3249:
  6765                           
  6766                           ;dc_motor.c: 485:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6767   003772  0E68               	movlw	104
  6768   003774  6E2A               	movwf	??_reverseOneSquare^0,c
  6769   003776  0EE4               	movlw	228
  6770   003778                     u4137:
  6771   003778  2EE8               	decfsz	wreg,f,c
  6772   00377A  D7FE               	bra	u4137
  6773   00377C  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  6774   00377E  D7FC               	bra	u4137
  6775   003780  D000               	nop2	
  6776   003782                     
  6777                           ;dc_motor.c: 486:         }
  6778   003782  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  6779   003784  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  6780   003786                     l679:
  6781   003786  5028               	movf	reverseOneSquare@reverseDuration^0,w,c
  6782   003788  6E2A               	movwf	??_reverseOneSquare^0,c
  6783   00378A  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  6784   00378C  502A               	movf	??_reverseOneSquare^0,w,c
  6785   00378E  5C2D               	subwf	reverseOneSquare@i^0,w,c
  6786   003790  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  6787   003792  0A80               	xorlw	128
  6788   003794  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  6789   003796  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  6790   003798  0A80               	xorlw	128
  6791   00379A  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  6792   00379C  A0D8               	btfss	status,0,c
  6793   00379E  EFD3  F01B         	goto	u1981
  6794   0037A2  EFD5  F01B         	goto	u1980
  6795   0037A6                     u1981:
  6796   0037A6  EFB9  F01B         	goto	l3249
  6797   0037AA                     u1980:
  6798   0037AA                     
  6799                           ;dc_motor.c: 488:     for (cur_power=straightSpeed;cur_power>=0;cur_power--) {
  6800   0037AA  C027  F02F         	movff	reverseOneSquare@straightSpeed,reverseOneSquare@cur_power
  6801   0037AE  6A30               	clrf	(reverseOneSquare@cur_power+1)^0,c
  6802   0037B0                     l3253:
  6803   0037B0  BE30               	btfsc	(reverseOneSquare@cur_power+1)^0,7,c
  6804   0037B2  EFDF  F01B         	goto	u1990
  6805   0037B6  EFDD  F01B         	goto	u1991
  6806   0037BA                     u1991:
  6807   0037BA  EFE1  F01B         	goto	l3257
  6808   0037BE                     u1990:
  6809   0037BE  EF2E  F01C         	goto	l3273
  6810   0037C2                     l3257:
  6811                           
  6812                           ;dc_motor.c: 489:         mL->power = cur_power+mL->compensation;
  6813   0037C2  EE20 F009          	lfsr	2,9
  6814   0037C6  5023               	movf	reverseOneSquare@mL^0,w,c
  6815   0037C8  26D9               	addwf	fsr2l,f,c
  6816   0037CA  5024               	movf	(reverseOneSquare@mL+1)^0,w,c
  6817   0037CC  22DA               	addwfc	fsr2h,f,c
  6818   0037CE  50DF               	movf	indf2,w,c
  6819   0037D0  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  6820   0037D2  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  6821   0037D6  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  6822   0037DA  6EDF               	movwf	indf2,c
  6823                           
  6824                           ;dc_motor.c: 490:         mR->power = cur_power+mR->compensation;
  6825   0037DC  EE20 F009          	lfsr	2,9
  6826   0037E0  5025               	movf	reverseOneSquare@mR^0,w,c
  6827   0037E2  26D9               	addwf	fsr2l,f,c
  6828   0037E4  5026               	movf	(reverseOneSquare@mR+1)^0,w,c
  6829   0037E6  22DA               	addwfc	fsr2h,f,c
  6830   0037E8  50DF               	movf	indf2,w,c
  6831   0037EA  242F               	addwf	reverseOneSquare@cur_power^0,w,c
  6832   0037EC  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  6833   0037F0  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  6834   0037F4  6EDF               	movwf	indf2,c
  6835   0037F6                     
  6836                           ;dc_motor.c: 491:         setMotorPWM(mL);
  6837   0037F6  C023  F01D         	movff	reverseOneSquare@mL,setMotorPWM@m
  6838   0037FA  C024  F01E         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  6839   0037FE  EC13  F01E         	call	_setMotorPWM	;wreg free
  6840   003802                     
  6841                           ;dc_motor.c: 492:         setMotorPWM(mR);
  6842   003802  C025  F01D         	movff	reverseOneSquare@mR,setMotorPWM@m
  6843   003806  C026  F01E         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  6844   00380A  EC13  F01E         	call	_setMotorPWM	;wreg free
  6845   00380E                     
  6846                           ;dc_motor.c: 493:         for (i=0;i<straightRamp;i++) {
  6847   00380E  0E00               	movlw	0
  6848   003810  6E2E               	movwf	(reverseOneSquare@i+1)^0,c
  6849   003812  0E00               	movlw	0
  6850   003814  6E2D               	movwf	reverseOneSquare@i^0,c
  6851   003816  EF17  F01C         	goto	l684
  6852   00381A                     l3265:
  6853                           
  6854                           ;dc_motor.c: 494:             _delay((unsigned long)((5)*(64000000/4000.0)));
  6855   00381A  0E68               	movlw	104
  6856   00381C  6E2A               	movwf	??_reverseOneSquare^0,c
  6857   00381E  0EE4               	movlw	228
  6858   003820                     u4147:
  6859   003820  2EE8               	decfsz	wreg,f,c
  6860   003822  D7FE               	bra	u4147
  6861   003824  2E2A               	decfsz	??_reverseOneSquare^0,f,c
  6862   003826  D7FC               	bra	u4147
  6863   003828  D000               	nop2	
  6864   00382A                     
  6865                           ;dc_motor.c: 495:         }
  6866   00382A  4A2D               	infsnz	reverseOneSquare@i^0,f,c
  6867   00382C  2A2E               	incf	(reverseOneSquare@i+1)^0,f,c
  6868   00382E                     l684:
  6869   00382E  5029               	movf	reverseOneSquare@straightRamp^0,w,c
  6870   003830  6E2A               	movwf	??_reverseOneSquare^0,c
  6871   003832  6A2B               	clrf	(??_reverseOneSquare+1)^0,c
  6872   003834  502A               	movf	??_reverseOneSquare^0,w,c
  6873   003836  5C2D               	subwf	reverseOneSquare@i^0,w,c
  6874   003838  502E               	movf	(reverseOneSquare@i+1)^0,w,c
  6875   00383A  0A80               	xorlw	128
  6876   00383C  6E2C               	movwf	(??_reverseOneSquare+2)^0,c
  6877   00383E  502B               	movf	(??_reverseOneSquare+1)^0,w,c
  6878   003840  0A80               	xorlw	128
  6879   003842  582C               	subwfb	(??_reverseOneSquare+2)^0,w,c
  6880   003844  A0D8               	btfss	status,0,c
  6881   003846  EF27  F01C         	goto	u2001
  6882   00384A  EF29  F01C         	goto	u2000
  6883   00384E                     u2001:
  6884   00384E  EF0D  F01C         	goto	l3265
  6885   003852                     u2000:
  6886   003852                     
  6887                           ;dc_motor.c: 496:     }
  6888   003852  062F               	decf	reverseOneSquare@cur_power^0,f,c
  6889   003854  A0D8               	btfss	status,0,c
  6890   003856  0630               	decf	(reverseOneSquare@cur_power+1)^0,f,c
  6891   003858  EFD8  F01B         	goto	l3253
  6892   00385C                     l3273:
  6893                           
  6894                           ;dc_motor.c: 497:     mL->power = 0;
  6895   00385C  C023  FFD9         	movff	reverseOneSquare@mL,fsr2l
  6896   003860  C024  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  6897   003864  6ADF               	clrf	indf2,c
  6898                           
  6899                           ;dc_motor.c: 498:     mR->power = 0;
  6900   003866  C025  FFD9         	movff	reverseOneSquare@mR,fsr2l
  6901   00386A  C026  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  6902   00386E  6ADF               	clrf	indf2,c
  6903   003870  0012               	return		;funcret
  6904   003872                     __end_of_reverseOneSquare:
  6905                           	callstack 0
  6906                           
  6907 ;; *************** function _resetTimer *****************
  6908 ;; Defined at:
  6909 ;;		line 23 in file "timers.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;		None
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      void 
  6916 ;; Registers used:
  6917 ;;		wreg, status,2
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6927 ;;Total ram usage:        0 bytes
  6928 ;; Hardware stack levels used: 1
  6929 ;; Hardware stack levels required when called: 5
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_main
  6934 ;;		_returnHome
  6935 ;;		_lostReturnHome
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text15
  6940   0048F6                     __ptext15:
  6941                           	callstack 0
  6942   0048F6                     _resetTimer:
  6943                           	callstack 25
  6944   0048F6                     
  6945                           ;timers.c: 25:     TMR0H=0;
  6946   0048F6  0E00               	movlw	0
  6947   0048F8  6ED4               	movwf	212,c	;volatile
  6948                           
  6949                           ;timers.c: 26:     TMR0L=0;
  6950   0048FA  0E00               	movlw	0
  6951   0048FC  6ED3               	movwf	211,c	;volatile
  6952   0048FE  0012               	return		;funcret
  6953   004900                     __end_of_resetTimer:
  6954                           	callstack 0
  6955                           
  6956 ;; *************** function _get16bitTMR0val *****************
  6957 ;; Defined at:
  6958 ;;		line 33 in file "timers.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;		None
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  timer_val       2   23[COMRAM] unsigned int 
  6963 ;;  timer_high      2   21[COMRAM] unsigned int 
  6964 ;;  timer_low       2   19[COMRAM] unsigned int 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  2   15[COMRAM] unsigned int 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2, status,0
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6975 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6976 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6977 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6978 ;;Total ram usage:       10 bytes
  6979 ;; Hardware stack levels used: 1
  6980 ;; Hardware stack levels required when called: 5
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_main
  6985 ;;		_returnHome
  6986 ;;		_lostReturnHome
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text16
  6991   0046F2                     __ptext16:
  6992                           	callstack 0
  6993   0046F2                     _get16bitTMR0val:
  6994                           	callstack 23
  6995   0046F2                     
  6996                           ;timers.c: 36:     unsigned int timer_low = TMR0L;
  6997   0046F2  CFD3 F014          	movff	4051,get16bitTMR0val@timer_low	;volatile
  6998   0046F6  6A15               	clrf	(get16bitTMR0val@timer_low+1)^0,c
  6999                           
  7000                           ;timers.c: 37:     unsigned int timer_high = TMR0H;
  7001   0046F8  CFD4 F016          	movff	4052,get16bitTMR0val@timer_high	;volatile
  7002   0046FC  6A17               	clrf	(get16bitTMR0val@timer_high+1)^0,c
  7003   0046FE                     
  7004                           ;timers.c: 38:     unsigned int timer_val = (timer_high<<8) | timer_low;
  7005   0046FE  5016               	movf	get16bitTMR0val@timer_high^0,w,c
  7006   004700  6E13               	movwf	(??_get16bitTMR0val+1)^0,c
  7007   004702  6A12               	clrf	??_get16bitTMR0val^0,c
  7008   004704  5014               	movf	get16bitTMR0val@timer_low^0,w,c
  7009   004706  1012               	iorwf	??_get16bitTMR0val^0,w,c
  7010   004708  6E18               	movwf	get16bitTMR0val@timer_val^0,c
  7011   00470A  5015               	movf	(get16bitTMR0val@timer_low+1)^0,w,c
  7012   00470C  1013               	iorwf	(??_get16bitTMR0val+1)^0,w,c
  7013   00470E  6E19               	movwf	(get16bitTMR0val@timer_val+1)^0,c
  7014   004710                     
  7015                           ;timers.c: 39:     return timer_val;
  7016   004710  C018  F010         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  7017   004714  C019  F011         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  7018   004718  0012               	return		;funcret
  7019   00471A                     __end_of_get16bitTMR0val:
  7020                           	callstack 0
  7021                           
  7022 ;; *************** function _fullSpeedAhead *****************
  7023 ;; Defined at:
  7024 ;;		line 451 in file "dc_motor.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  7027 ;;		 -> main@motorL(10), 
  7028 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  7029 ;;		 -> main@motorR(10), 
  7030 ;;  straightSpee    1   38[COMRAM] unsigned char 
  7031 ;;  straightRamp    1   39[COMRAM] unsigned char 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;  cur_power       2   45[COMRAM] int 
  7034 ;;  i               2   43[COMRAM] int 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      void 
  7037 ;; Registers used:
  7038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7044 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7046 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7047 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7048 ;;Total ram usage:       13 bytes
  7049 ;; Hardware stack levels used: 1
  7050 ;; Hardware stack levels required when called: 7
  7051 ;; This function calls:
  7052 ;;		_setMotorPWM
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;;		_move
  7056 ;;		_returnHome
  7057 ;;		_lostReturnHome
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text17
  7062   003FA6                     __ptext17:
  7063                           	callstack 0
  7064   003FA6                     _fullSpeedAhead:
  7065                           	callstack 21
  7066   003FA6                     
  7067                           ;dc_motor.c: 451: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char straightSpeed, un
      +                          signed char straightRamp);dc_motor.c: 452: {;dc_motor.c: 453:     mL->direction = 1;
  7068   003FA6  EE20 F001          	lfsr	2,1
  7069   003FAA  5023               	movf	fullSpeedAhead@mL^0,w,c
  7070   003FAC  26D9               	addwf	fsr2l,f,c
  7071   003FAE  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7072   003FB0  22DA               	addwfc	fsr2h,f,c
  7073   003FB2  0E01               	movlw	1
  7074   003FB4  6EDF               	movwf	indf2,c
  7075                           
  7076                           ;dc_motor.c: 454:     mR->direction = 1;
  7077   003FB6  EE20 F001          	lfsr	2,1
  7078   003FBA  5025               	movf	fullSpeedAhead@mR^0,w,c
  7079   003FBC  26D9               	addwf	fsr2l,f,c
  7080   003FBE  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7081   003FC0  22DA               	addwfc	fsr2h,f,c
  7082   003FC2  0E01               	movlw	1
  7083   003FC4  6EDF               	movwf	indf2,c
  7084   003FC6                     
  7085                           ;dc_motor.c: 455:     int i;;dc_motor.c: 456:     int cur_power;;dc_motor.c: 457:     fo
      +                          r (cur_power=1;cur_power<=straightSpeed;cur_power++) {
  7086   003FC6  0E00               	movlw	0
  7087   003FC8  6E2F               	movwf	(fullSpeedAhead@cur_power+1)^0,c
  7088   003FCA  0E01               	movlw	1
  7089   003FCC  6E2E               	movwf	fullSpeedAhead@cur_power^0,c
  7090   003FCE  EF33  F020         	goto	l3097
  7091   003FD2                     l3083:
  7092                           
  7093                           ;dc_motor.c: 458:         mL->power = cur_power+mL->compensation;
  7094   003FD2  EE20 F009          	lfsr	2,9
  7095   003FD6  5023               	movf	fullSpeedAhead@mL^0,w,c
  7096   003FD8  26D9               	addwf	fsr2l,f,c
  7097   003FDA  5024               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7098   003FDC  22DA               	addwfc	fsr2h,f,c
  7099   003FDE  50DF               	movf	indf2,w,c
  7100   003FE0  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  7101   003FE2  C023  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7102   003FE6  C024  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7103   003FEA  6EDF               	movwf	indf2,c
  7104                           
  7105                           ;dc_motor.c: 459:         mR->power = cur_power+mR->compensation;
  7106   003FEC  EE20 F009          	lfsr	2,9
  7107   003FF0  5025               	movf	fullSpeedAhead@mR^0,w,c
  7108   003FF2  26D9               	addwf	fsr2l,f,c
  7109   003FF4  5026               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7110   003FF6  22DA               	addwfc	fsr2h,f,c
  7111   003FF8  50DF               	movf	indf2,w,c
  7112   003FFA  242E               	addwf	fullSpeedAhead@cur_power^0,w,c
  7113   003FFC  C025  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7114   004000  C026  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7115   004004  6EDF               	movwf	indf2,c
  7116   004006                     
  7117                           ;dc_motor.c: 460:         setMotorPWM(mL);
  7118   004006  C023  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7119   00400A  C024  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7120   00400E  EC13  F01E         	call	_setMotorPWM	;wreg free
  7121   004012                     
  7122                           ;dc_motor.c: 461:         setMotorPWM(mR);
  7123   004012  C025  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7124   004016  C026  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7125   00401A  EC13  F01E         	call	_setMotorPWM	;wreg free
  7126   00401E                     
  7127                           ;dc_motor.c: 462:         for (i=0;i<straightRamp;i++) {
  7128   00401E  0E00               	movlw	0
  7129   004020  6E2D               	movwf	(fullSpeedAhead@i+1)^0,c
  7130   004022  0E00               	movlw	0
  7131   004024  6E2C               	movwf	fullSpeedAhead@i^0,c
  7132   004026  EF1F  F020         	goto	l666
  7133   00402A                     l3091:
  7134                           
  7135                           ;dc_motor.c: 463:             _delay((unsigned long)((5)*(64000000/4000.0)));
  7136   00402A  0E68               	movlw	104
  7137   00402C  6E29               	movwf	??_fullSpeedAhead^0,c
  7138   00402E  0EE4               	movlw	228
  7139   004030                     u4157:
  7140   004030  2EE8               	decfsz	wreg,f,c
  7141   004032  D7FE               	bra	u4157
  7142   004034  2E29               	decfsz	??_fullSpeedAhead^0,f,c
  7143   004036  D7FC               	bra	u4157
  7144   004038  D000               	nop2	
  7145   00403A                     
  7146                           ;dc_motor.c: 464:         }
  7147   00403A  4A2C               	infsnz	fullSpeedAhead@i^0,f,c
  7148   00403C  2A2D               	incf	(fullSpeedAhead@i+1)^0,f,c
  7149   00403E                     l666:
  7150   00403E  5028               	movf	fullSpeedAhead@straightRamp^0,w,c
  7151   004040  6E29               	movwf	??_fullSpeedAhead^0,c
  7152   004042  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  7153   004044  5029               	movf	??_fullSpeedAhead^0,w,c
  7154   004046  5C2C               	subwf	fullSpeedAhead@i^0,w,c
  7155   004048  502D               	movf	(fullSpeedAhead@i+1)^0,w,c
  7156   00404A  0A80               	xorlw	128
  7157   00404C  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  7158   00404E  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  7159   004050  0A80               	xorlw	128
  7160   004052  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  7161   004054  A0D8               	btfss	status,0,c
  7162   004056  EF2F  F020         	goto	u1821
  7163   00405A  EF31  F020         	goto	u1820
  7164   00405E                     u1821:
  7165   00405E  EF15  F020         	goto	l3091
  7166   004062                     u1820:
  7167   004062                     
  7168                           ;dc_motor.c: 465:     }
  7169   004062  4A2E               	infsnz	fullSpeedAhead@cur_power^0,f,c
  7170   004064  2A2F               	incf	(fullSpeedAhead@cur_power+1)^0,f,c
  7171   004066                     l3097:
  7172   004066  5027               	movf	fullSpeedAhead@straightSpeed^0,w,c
  7173   004068  6E29               	movwf	??_fullSpeedAhead^0,c
  7174   00406A  6A2A               	clrf	(??_fullSpeedAhead+1)^0,c
  7175   00406C  502E               	movf	fullSpeedAhead@cur_power^0,w,c
  7176   00406E  5C29               	subwf	??_fullSpeedAhead^0,w,c
  7177   004070  502A               	movf	(??_fullSpeedAhead+1)^0,w,c
  7178   004072  0A80               	xorlw	128
  7179   004074  6E2B               	movwf	(??_fullSpeedAhead+2)^0,c
  7180   004076  502F               	movf	(fullSpeedAhead@cur_power+1)^0,w,c
  7181   004078  0A80               	xorlw	128
  7182   00407A  582B               	subwfb	(??_fullSpeedAhead+2)^0,w,c
  7183   00407C  B0D8               	btfsc	status,0,c
  7184   00407E  EF43  F020         	goto	u1831
  7185   004082  EF45  F020         	goto	u1830
  7186   004086                     u1831:
  7187   004086  EFE9  F01F         	goto	l3083
  7188   00408A                     u1830:
  7189   00408A  0012               	return		;funcret
  7190   00408C                     __end_of_fullSpeedAhead:
  7191                           	callstack 0
  7192                           
  7193 ;; *************** function _initUSART4 *****************
  7194 ;; Defined at:
  7195 ;;		line 4 in file "serial.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;		None
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;		None
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      void 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7213 ;;Total ram usage:        0 bytes
  7214 ;; Hardware stack levels used: 1
  7215 ;; Hardware stack levels required when called: 5
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_main
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text18
  7224   004860                     __ptext18:
  7225                           	callstack 0
  7226   004860                     _initUSART4:
  7227                           	callstack 25
  7228   004860                     
  7229                           ;serial.c: 7:     RC0PPS = 0x12;
  7230   004860  0E12               	movlw	18
  7231   004862  010E               	movlb	14	; () banked
  7232   004864  6F62               	movwf	98,b	;volatile
  7233                           
  7234                           ;serial.c: 8:     RX4PPS = 0x11;
  7235   004866  0E11               	movlw	17
  7236   004868  6F15               	movwf	21,b	;volatile
  7237   00486A                     
  7238                           ; BSR set to: 14
  7239                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
  7240   00486A  97E9               	bcf	233,3,b	;volatile
  7241   00486C                     
  7242                           ; BSR set to: 14
  7243                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
  7244   00486C  95E8               	bcf	232,2,b	;volatile
  7245                           
  7246                           ;serial.c: 13:     SP4BRGL = 51;
  7247   00486E  0E33               	movlw	51
  7248   004870  6FE5               	movwf	229,b	;volatile
  7249                           
  7250                           ;serial.c: 14:     SP4BRGH = 0;
  7251   004872  0E00               	movlw	0
  7252   004874  6FE6               	movwf	230,b	;volatile
  7253   004876                     
  7254                           ; BSR set to: 14
  7255                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  7256   004876  89E7               	bsf	231,4,b	;volatile
  7257   004878                     
  7258                           ; BSR set to: 14
  7259                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  7260   004878  8BE8               	bsf	232,5,b	;volatile
  7261   00487A                     
  7262                           ; BSR set to: 14
  7263                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  7264   00487A  8FE7               	bsf	231,7,b	;volatile
  7265   00487C                     
  7266                           ; BSR set to: 14
  7267   00487C  0012               	return		;funcret
  7268   00487E                     __end_of_initUSART4:
  7269                           	callstack 0
  7270                           
  7271 ;; *************** function _initDCmotorsPWM *****************
  7272 ;; Defined at:
  7273 ;;		line 8 in file "dc_motor.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  PWMperiod       2   15[COMRAM] unsigned int 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;		None
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      void 
  7280 ;; Registers used:
  7281 ;;		wreg, status,2
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7291 ;;Total ram usage:        2 bytes
  7292 ;; Hardware stack levels used: 1
  7293 ;; Hardware stack levels required when called: 5
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_main
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text19
  7302   004340                     __ptext19:
  7303                           	callstack 0
  7304   004340                     _initDCmotorsPWM:
  7305                           	callstack 25
  7306   004340                     
  7307                           ;dc_motor.c: 11:     LATEbits.LATE2=0;
  7308   004340  947D               	bcf	125,2,c	;volatile
  7309                           
  7310                           ;dc_motor.c: 12:     TRISEbits.TRISE2=0;
  7311   004342  9485               	bcf	133,2,c	;volatile
  7312                           
  7313                           ;dc_motor.c: 13:     LATEbits.LATE4=0;
  7314   004344  987D               	bcf	125,4,c	;volatile
  7315                           
  7316                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  7317   004346  9885               	bcf	133,4,c	;volatile
  7318                           
  7319                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  7320   004348  9E7B               	bcf	123,7,c	;volatile
  7321                           
  7322                           ;dc_motor.c: 16:     TRISCbits.TRISC7=0;
  7323   00434A  9E83               	bcf	131,7,c	;volatile
  7324                           
  7325                           ;dc_motor.c: 17:     LATGbits.LATG6=0;
  7326   00434C  9C7F               	bcf	127,6,c	;volatile
  7327                           
  7328                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  7329   00434E  9C87               	bcf	135,6,c	;volatile
  7330   004350                     
  7331                           ;dc_motor.c: 21:     RE2PPS=0x05;
  7332   004350  0E05               	movlw	5
  7333   004352  010E               	movlb	14	; () banked
  7334   004354  6F74               	movwf	116,b	;volatile
  7335                           
  7336                           ;dc_motor.c: 22:     RE4PPS=0x06;
  7337   004356  0E06               	movlw	6
  7338   004358  6F76               	movwf	118,b	;volatile
  7339                           
  7340                           ;dc_motor.c: 23:     RC7PPS=0x07;
  7341   00435A  0E07               	movlw	7
  7342   00435C  6F69               	movwf	105,b	;volatile
  7343                           
  7344                           ;dc_motor.c: 24:     RG6PPS=0x08;
  7345   00435E  0E08               	movlw	8
  7346   004360  6F88               	movwf	136,b	;volatile
  7347                           
  7348                           ;dc_motor.c: 27:     T2CONbits.CKPS=0b011;
  7349   004362  50BD               	movf	189,w,c	;volatile
  7350   004364  0B8F               	andlw	-113
  7351   004366  0930               	iorlw	48
  7352   004368  6EBD               	movwf	189,c	;volatile
  7353                           
  7354                           ;dc_motor.c: 28:     T2HLTbits.MODE=0b00000;
  7355   00436A  0EE0               	movlw	-32
  7356   00436C  16BE               	andwf	190,f,c	;volatile
  7357                           
  7358                           ;dc_motor.c: 29:     T2CLKCONbits.CS=0b0001;
  7359   00436E  50BF               	movf	191,w,c	;volatile
  7360   004370  0BF0               	andlw	-16
  7361   004372  0901               	iorlw	1
  7362   004374  6EBF               	movwf	191,c	;volatile
  7363   004376                     
  7364                           ; BSR set to: 14
  7365                           ;dc_motor.c: 33:     T2PR=PWMperiod;
  7366   004376  C010  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  7367   00437A                     
  7368                           ; BSR set to: 14
  7369                           ;dc_motor.c: 34:     T2CONbits.ON=1;
  7370   00437A  8EBD               	bsf	189,7,c	;volatile
  7371                           
  7372                           ;dc_motor.c: 38:     CCPR1H=0;
  7373   00437C  0E00               	movlw	0
  7374   00437E  6EAA               	movwf	170,c	;volatile
  7375                           
  7376                           ;dc_motor.c: 39:     CCPR2H=0;
  7377   004380  0E00               	movlw	0
  7378   004382  6EA6               	movwf	166,c	;volatile
  7379                           
  7380                           ;dc_motor.c: 40:     CCPR3H=0;
  7381   004384  0E00               	movlw	0
  7382   004386  010F               	movlb	15	; () banked
  7383   004388  6F25               	movwf	37,b	;volatile
  7384                           
  7385                           ;dc_motor.c: 41:     CCPR4H=0;
  7386   00438A  0E00               	movlw	0
  7387   00438C  6F21               	movwf	33,b	;volatile
  7388                           
  7389                           ;dc_motor.c: 44:     CCPTMRS0bits.C1TSEL=0;
  7390   00438E  0EFC               	movlw	-4
  7391   004390  16AD               	andwf	173,f,c	;volatile
  7392                           
  7393                           ;dc_motor.c: 45:     CCPTMRS0bits.C2TSEL=0;
  7394   004392  0EF3               	movlw	-13
  7395   004394  16AD               	andwf	173,f,c	;volatile
  7396                           
  7397                           ;dc_motor.c: 46:     CCPTMRS0bits.C3TSEL=0;
  7398   004396  0ECF               	movlw	-49
  7399   004398  16AD               	andwf	173,f,c	;volatile
  7400                           
  7401                           ;dc_motor.c: 47:     CCPTMRS0bits.C4TSEL=0;
  7402   00439A  0E3F               	movlw	-193
  7403   00439C  16AD               	andwf	173,f,c	;volatile
  7404   00439E                     
  7405                           ; BSR set to: 15
  7406                           ;dc_motor.c: 50:     CCP1CONbits.FMT=1;
  7407   00439E  88AB               	bsf	171,4,c	;volatile
  7408                           
  7409                           ;dc_motor.c: 51:     CCP1CONbits.CCP1MODE=0b1100;
  7410   0043A0  50AB               	movf	171,w,c	;volatile
  7411   0043A2  0BF0               	andlw	-16
  7412   0043A4  090C               	iorlw	12
  7413   0043A6  6EAB               	movwf	171,c	;volatile
  7414   0043A8                     
  7415                           ; BSR set to: 15
  7416                           ;dc_motor.c: 52:     CCP1CONbits.EN=1;
  7417   0043A8  8EAB               	bsf	171,7,c	;volatile
  7418   0043AA                     
  7419                           ; BSR set to: 15
  7420                           ;dc_motor.c: 54:     CCP2CONbits.FMT=1;
  7421   0043AA  88A7               	bsf	167,4,c	;volatile
  7422                           
  7423                           ;dc_motor.c: 55:     CCP2CONbits.CCP2MODE=0b1100;
  7424   0043AC  50A7               	movf	167,w,c	;volatile
  7425   0043AE  0BF0               	andlw	-16
  7426   0043B0  090C               	iorlw	12
  7427   0043B2  6EA7               	movwf	167,c	;volatile
  7428   0043B4                     
  7429                           ; BSR set to: 15
  7430                           ;dc_motor.c: 56:     CCP2CONbits.EN=1;
  7431   0043B4  8EA7               	bsf	167,7,c	;volatile
  7432   0043B6                     
  7433                           ; BSR set to: 15
  7434                           ;dc_motor.c: 58:     CCP3CONbits.FMT=1;
  7435   0043B6  8926               	bsf	38,4,b	;volatile
  7436                           
  7437                           ;dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  7438   0043B8  5126               	movf	38,w,b	;volatile
  7439   0043BA  0BF0               	andlw	-16
  7440   0043BC  090C               	iorlw	12
  7441   0043BE  6F26               	movwf	38,b	;volatile
  7442   0043C0                     
  7443                           ; BSR set to: 15
  7444                           ;dc_motor.c: 60:     CCP3CONbits.EN=1;
  7445   0043C0  8F26               	bsf	38,7,b	;volatile
  7446   0043C2                     
  7447                           ; BSR set to: 15
  7448                           ;dc_motor.c: 62:     CCP4CONbits.FMT=1;
  7449   0043C2  8922               	bsf	34,4,b	;volatile
  7450                           
  7451                           ;dc_motor.c: 63:     CCP4CONbits.CCP4MODE=0b1100;
  7452   0043C4  5122               	movf	34,w,b	;volatile
  7453   0043C6  0BF0               	andlw	-16
  7454   0043C8  090C               	iorlw	12
  7455   0043CA  6F22               	movwf	34,b	;volatile
  7456   0043CC                     
  7457                           ; BSR set to: 15
  7458                           ;dc_motor.c: 64:     CCP4CONbits.EN=1;
  7459   0043CC  8F22               	bsf	34,7,b	;volatile
  7460   0043CE                     
  7461                           ; BSR set to: 15
  7462   0043CE  0012               	return		;funcret
  7463   0043D0                     __end_of_initDCmotorsPWM:
  7464                           	callstack 0
  7465                           
  7466 ;; *************** function _color_read *****************
  7467 ;; Defined at:
  7468 ;;		line 77 in file "color.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  RGBC            2   19[COMRAM] PTR struct RGBC_val
  7471 ;;		 -> main@RGBC(8), 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      void 
  7476 ;; Registers used:
  7477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7485 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7486 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7487 ;;Total ram usage:        9 bytes
  7488 ;; Hardware stack levels used: 1
  7489 ;; Hardware stack levels required when called: 7
  7490 ;; This function calls:
  7491 ;;		_I2C_2_Master_Read
  7492 ;;		_I2C_2_Master_RepStart
  7493 ;;		_I2C_2_Master_Start
  7494 ;;		_I2C_2_Master_Stop
  7495 ;;		_I2C_2_Master_Write
  7496 ;; This function is called by:
  7497 ;;		_main
  7498 ;;		_color_calibration
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text20
  7503   003498                     __ptext20:
  7504                           	callstack 0
  7505   003498                     _color_read:
  7506                           	callstack 23
  7507   003498                     
  7508                           ;color.c: 77: void color_read(RGBC_val *RGBC);color.c: 78: {;color.c: 79:  I2C_2_Master_
      +                          Start();
  7509   003498  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  7510                           
  7511                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  7512   00349C  0E52               	movlw	82
  7513   00349E  EC6F  F024         	call	_I2C_2_Master_Write
  7514                           
  7515                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x16);
  7516   0034A2  0EB6               	movlw	182
  7517   0034A4  EC6F  F024         	call	_I2C_2_Master_Write
  7518                           
  7519                           ;color.c: 82:  I2C_2_Master_RepStart();
  7520   0034A8  EC80  F024         	call	_I2C_2_Master_RepStart	;wreg free
  7521                           
  7522                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  7523   0034AC  0E53               	movlw	83
  7524   0034AE  EC6F  F024         	call	_I2C_2_Master_Write
  7525   0034B2                     
  7526                           ;color.c: 84:  RGBC->R=I2C_2_Master_Read(1);
  7527   0034B2  0E01               	movlw	1
  7528   0034B4  ECE0  F022         	call	_I2C_2_Master_Read
  7529   0034B8  6E16               	movwf	??_color_read^0,c
  7530   0034BA  6A17               	clrf	(??_color_read+1)^0,c
  7531   0034BC  C014  FFD9         	movff	color_read@RGBC,fsr2l
  7532   0034C0  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  7533   0034C4  C016  FFDE         	movff	??_color_read,postinc2
  7534   0034C8  C017  FFDD         	movff	??_color_read+1,postdec2
  7535   0034CC                     
  7536                           ;color.c: 85:  RGBC->R=RGBC->R | (I2C_2_Master_Read(0)<<8);
  7537   0034CC  C014  FFD9         	movff	color_read@RGBC,fsr2l
  7538   0034D0  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  7539   0034D4  CFDE F016          	movff	postinc2,??_color_read
  7540   0034D8  CFDD F017          	movff	postdec2,??_color_read+1
  7541   0034DC  0E00               	movlw	0
  7542   0034DE  ECE0  F022         	call	_I2C_2_Master_Read
  7543   0034E2  6E18               	movwf	(??_color_read+2)^0,c
  7544   0034E4  5018               	movf	(??_color_read+2)^0,w,c
  7545   0034E6  6E1A               	movwf	(??_color_read+4)^0,c
  7546   0034E8  6A19               	clrf	(??_color_read+3)^0,c
  7547   0034EA  5016               	movf	??_color_read^0,w,c
  7548   0034EC  1019               	iorwf	(??_color_read+3)^0,w,c
  7549   0034EE  6E1B               	movwf	(??_color_read+5)^0,c
  7550   0034F0  5017               	movf	(??_color_read+1)^0,w,c
  7551   0034F2  101A               	iorwf	(??_color_read+4)^0,w,c
  7552   0034F4  6E1C               	movwf	(??_color_read+6)^0,c
  7553   0034F6  C014  FFD9         	movff	color_read@RGBC,fsr2l
  7554   0034FA  C015  FFDA         	movff	color_read@RGBC+1,fsr2h
  7555   0034FE  C01B  FFDE         	movff	??_color_read+5,postinc2
  7556   003502  C01C  FFDD         	movff	??_color_read+6,postdec2
  7557                           
  7558                           ;color.c: 86:  I2C_2_Master_Stop();
  7559   003506  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  7560                           
  7561                           ;color.c: 88:     I2C_2_Master_Start();
  7562   00350A  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  7563                           
  7564                           ;color.c: 89:  I2C_2_Master_Write(0x52 | 0x00);
  7565   00350E  0E52               	movlw	82
  7566   003510  EC6F  F024         	call	_I2C_2_Master_Write
  7567                           
  7568                           ;color.c: 90:  I2C_2_Master_Write(0xA0 | 0x18);
  7569   003514  0EB8               	movlw	184
  7570   003516  EC6F  F024         	call	_I2C_2_Master_Write
  7571                           
  7572                           ;color.c: 91:  I2C_2_Master_RepStart();
  7573   00351A  EC80  F024         	call	_I2C_2_Master_RepStart	;wreg free
  7574                           
  7575                           ;color.c: 92:  I2C_2_Master_Write(0x52 | 0x01);
  7576   00351E  0E53               	movlw	83
  7577   003520  EC6F  F024         	call	_I2C_2_Master_Write
  7578   003524                     
  7579                           ;color.c: 93:  RGBC->G=I2C_2_Master_Read(1);
  7580   003524  0E01               	movlw	1
  7581   003526  ECE0  F022         	call	_I2C_2_Master_Read
  7582   00352A  6E16               	movwf	??_color_read^0,c
  7583   00352C  6A17               	clrf	(??_color_read+1)^0,c
  7584   00352E  EE20 F002          	lfsr	2,2
  7585   003532  5014               	movf	color_read@RGBC^0,w,c
  7586   003534  26D9               	addwf	fsr2l,f,c
  7587   003536  5015               	movf	(color_read@RGBC+1)^0,w,c
  7588   003538  22DA               	addwfc	fsr2h,f,c
  7589   00353A  C016  FFDE         	movff	??_color_read,postinc2
  7590   00353E  C017  FFDD         	movff	??_color_read+1,postdec2
  7591   003542                     
  7592                           ;color.c: 94:  RGBC->G=RGBC->G | (I2C_2_Master_Read(0)<<8);
  7593   003542  EE20 F002          	lfsr	2,2
  7594   003546  5014               	movf	color_read@RGBC^0,w,c
  7595   003548  26D9               	addwf	fsr2l,f,c
  7596   00354A  5015               	movf	(color_read@RGBC+1)^0,w,c
  7597   00354C  22DA               	addwfc	fsr2h,f,c
  7598   00354E  CFDE F016          	movff	postinc2,??_color_read
  7599   003552  CFDD F017          	movff	postdec2,??_color_read+1
  7600   003556  0E00               	movlw	0
  7601   003558  ECE0  F022         	call	_I2C_2_Master_Read
  7602   00355C  6E18               	movwf	(??_color_read+2)^0,c
  7603   00355E  5018               	movf	(??_color_read+2)^0,w,c
  7604   003560  6E1A               	movwf	(??_color_read+4)^0,c
  7605   003562  6A19               	clrf	(??_color_read+3)^0,c
  7606   003564  5016               	movf	??_color_read^0,w,c
  7607   003566  1019               	iorwf	(??_color_read+3)^0,w,c
  7608   003568  6E1B               	movwf	(??_color_read+5)^0,c
  7609   00356A  5017               	movf	(??_color_read+1)^0,w,c
  7610   00356C  101A               	iorwf	(??_color_read+4)^0,w,c
  7611   00356E  6E1C               	movwf	(??_color_read+6)^0,c
  7612   003570  EE20 F002          	lfsr	2,2
  7613   003574  5014               	movf	color_read@RGBC^0,w,c
  7614   003576  26D9               	addwf	fsr2l,f,c
  7615   003578  5015               	movf	(color_read@RGBC+1)^0,w,c
  7616   00357A  22DA               	addwfc	fsr2h,f,c
  7617   00357C  C01B  FFDE         	movff	??_color_read+5,postinc2
  7618   003580  C01C  FFDD         	movff	??_color_read+6,postdec2
  7619                           
  7620                           ;color.c: 95:  I2C_2_Master_Stop();
  7621   003584  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  7622                           
  7623                           ;color.c: 97:     I2C_2_Master_Start();
  7624   003588  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  7625                           
  7626                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  7627   00358C  0E52               	movlw	82
  7628   00358E  EC6F  F024         	call	_I2C_2_Master_Write
  7629                           
  7630                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x1A);
  7631   003592  0EBA               	movlw	186
  7632   003594  EC6F  F024         	call	_I2C_2_Master_Write
  7633                           
  7634                           ;color.c: 100:  I2C_2_Master_RepStart();
  7635   003598  EC80  F024         	call	_I2C_2_Master_RepStart	;wreg free
  7636                           
  7637                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  7638   00359C  0E53               	movlw	83
  7639   00359E  EC6F  F024         	call	_I2C_2_Master_Write
  7640   0035A2                     
  7641                           ;color.c: 102:  RGBC->B=I2C_2_Master_Read(1);
  7642   0035A2  0E01               	movlw	1
  7643   0035A4  ECE0  F022         	call	_I2C_2_Master_Read
  7644   0035A8  6E16               	movwf	??_color_read^0,c
  7645   0035AA  6A17               	clrf	(??_color_read+1)^0,c
  7646   0035AC  EE20 F004          	lfsr	2,4
  7647   0035B0  5014               	movf	color_read@RGBC^0,w,c
  7648   0035B2  26D9               	addwf	fsr2l,f,c
  7649   0035B4  5015               	movf	(color_read@RGBC+1)^0,w,c
  7650   0035B6  22DA               	addwfc	fsr2h,f,c
  7651   0035B8  C016  FFDE         	movff	??_color_read,postinc2
  7652   0035BC  C017  FFDD         	movff	??_color_read+1,postdec2
  7653   0035C0                     
  7654                           ;color.c: 103:  RGBC->B=RGBC->B | (I2C_2_Master_Read(0)<<8);
  7655   0035C0  EE20 F004          	lfsr	2,4
  7656   0035C4  5014               	movf	color_read@RGBC^0,w,c
  7657   0035C6  26D9               	addwf	fsr2l,f,c
  7658   0035C8  5015               	movf	(color_read@RGBC+1)^0,w,c
  7659   0035CA  22DA               	addwfc	fsr2h,f,c
  7660   0035CC  CFDE F016          	movff	postinc2,??_color_read
  7661   0035D0  CFDD F017          	movff	postdec2,??_color_read+1
  7662   0035D4  0E00               	movlw	0
  7663   0035D6  ECE0  F022         	call	_I2C_2_Master_Read
  7664   0035DA  6E18               	movwf	(??_color_read+2)^0,c
  7665   0035DC  5018               	movf	(??_color_read+2)^0,w,c
  7666   0035DE  6E1A               	movwf	(??_color_read+4)^0,c
  7667   0035E0  6A19               	clrf	(??_color_read+3)^0,c
  7668   0035E2  5016               	movf	??_color_read^0,w,c
  7669   0035E4  1019               	iorwf	(??_color_read+3)^0,w,c
  7670   0035E6  6E1B               	movwf	(??_color_read+5)^0,c
  7671   0035E8  5017               	movf	(??_color_read+1)^0,w,c
  7672   0035EA  101A               	iorwf	(??_color_read+4)^0,w,c
  7673   0035EC  6E1C               	movwf	(??_color_read+6)^0,c
  7674   0035EE  EE20 F004          	lfsr	2,4
  7675   0035F2  5014               	movf	color_read@RGBC^0,w,c
  7676   0035F4  26D9               	addwf	fsr2l,f,c
  7677   0035F6  5015               	movf	(color_read@RGBC+1)^0,w,c
  7678   0035F8  22DA               	addwfc	fsr2h,f,c
  7679   0035FA  C01B  FFDE         	movff	??_color_read+5,postinc2
  7680   0035FE  C01C  FFDD         	movff	??_color_read+6,postdec2
  7681                           
  7682                           ;color.c: 104:  I2C_2_Master_Stop();
  7683   003602  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  7684                           
  7685                           ;color.c: 106:     I2C_2_Master_Start();
  7686   003606  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  7687                           
  7688                           ;color.c: 107:  I2C_2_Master_Write(0x52 | 0x00);
  7689   00360A  0E52               	movlw	82
  7690   00360C  EC6F  F024         	call	_I2C_2_Master_Write
  7691                           
  7692                           ;color.c: 108:  I2C_2_Master_Write(0xA0 | 0x14);
  7693   003610  0EB4               	movlw	180
  7694   003612  EC6F  F024         	call	_I2C_2_Master_Write
  7695                           
  7696                           ;color.c: 109:  I2C_2_Master_RepStart();
  7697   003616  EC80  F024         	call	_I2C_2_Master_RepStart	;wreg free
  7698                           
  7699                           ;color.c: 110:  I2C_2_Master_Write(0x52 | 0x01);
  7700   00361A  0E53               	movlw	83
  7701   00361C  EC6F  F024         	call	_I2C_2_Master_Write
  7702   003620                     
  7703                           ;color.c: 111:  RGBC->C=I2C_2_Master_Read(1);
  7704   003620  0E01               	movlw	1
  7705   003622  ECE0  F022         	call	_I2C_2_Master_Read
  7706   003626  6E16               	movwf	??_color_read^0,c
  7707   003628  6A17               	clrf	(??_color_read+1)^0,c
  7708   00362A  EE20 F006          	lfsr	2,6
  7709   00362E  5014               	movf	color_read@RGBC^0,w,c
  7710   003630  26D9               	addwf	fsr2l,f,c
  7711   003632  5015               	movf	(color_read@RGBC+1)^0,w,c
  7712   003634  22DA               	addwfc	fsr2h,f,c
  7713   003636  C016  FFDE         	movff	??_color_read,postinc2
  7714   00363A  C017  FFDD         	movff	??_color_read+1,postdec2
  7715   00363E                     
  7716                           ;color.c: 112:  RGBC->C=RGBC->C | (I2C_2_Master_Read(0)<<8);
  7717   00363E  EE20 F006          	lfsr	2,6
  7718   003642  5014               	movf	color_read@RGBC^0,w,c
  7719   003644  26D9               	addwf	fsr2l,f,c
  7720   003646  5015               	movf	(color_read@RGBC+1)^0,w,c
  7721   003648  22DA               	addwfc	fsr2h,f,c
  7722   00364A  CFDE F016          	movff	postinc2,??_color_read
  7723   00364E  CFDD F017          	movff	postdec2,??_color_read+1
  7724   003652  0E00               	movlw	0
  7725   003654  ECE0  F022         	call	_I2C_2_Master_Read
  7726   003658  6E18               	movwf	(??_color_read+2)^0,c
  7727   00365A  5018               	movf	(??_color_read+2)^0,w,c
  7728   00365C  6E1A               	movwf	(??_color_read+4)^0,c
  7729   00365E  6A19               	clrf	(??_color_read+3)^0,c
  7730   003660  5016               	movf	??_color_read^0,w,c
  7731   003662  1019               	iorwf	(??_color_read+3)^0,w,c
  7732   003664  6E1B               	movwf	(??_color_read+5)^0,c
  7733   003666  5017               	movf	(??_color_read+1)^0,w,c
  7734   003668  101A               	iorwf	(??_color_read+4)^0,w,c
  7735   00366A  6E1C               	movwf	(??_color_read+6)^0,c
  7736   00366C  EE20 F006          	lfsr	2,6
  7737   003670  5014               	movf	color_read@RGBC^0,w,c
  7738   003672  26D9               	addwf	fsr2l,f,c
  7739   003674  5015               	movf	(color_read@RGBC+1)^0,w,c
  7740   003676  22DA               	addwfc	fsr2h,f,c
  7741   003678  C01B  FFDE         	movff	??_color_read+5,postinc2
  7742   00367C  C01C  FFDD         	movff	??_color_read+6,postdec2
  7743                           
  7744                           ;color.c: 113:  I2C_2_Master_Stop();
  7745   003680  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  7746   003684  0012               	return		;funcret
  7747   003686                     __end_of_color_read:
  7748                           	callstack 0
  7749                           
  7750 ;; *************** function _I2C_2_Master_RepStart *****************
  7751 ;; Defined at:
  7752 ;;		line 33 in file "i2c.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;		None
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      void 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7770 ;;Total ram usage:        0 bytes
  7771 ;; Hardware stack levels used: 1
  7772 ;; Hardware stack levels required when called: 6
  7773 ;; This function calls:
  7774 ;;		_I2C_2_Master_Idle
  7775 ;; This function is called by:
  7776 ;;		_color_read
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text21
  7781   004900                     __ptext21:
  7782                           	callstack 0
  7783   004900                     _I2C_2_Master_RepStart:
  7784                           	callstack 23
  7785   004900                     
  7786                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7787   004900  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  7788   004904                     
  7789                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7790   004904  010E               	movlb	14	; () banked
  7791   004906  83DA               	bsf	218,1,b	;volatile
  7792   004908                     
  7793                           ; BSR set to: 14
  7794   004908  0012               	return		;funcret
  7795   00490A                     __end_of_I2C_2_Master_RepStart:
  7796                           	callstack 0
  7797                           
  7798 ;; *************** function _I2C_2_Master_Read *****************
  7799 ;; Defined at:
  7800 ;;		line 51 in file "i2c.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  ack             1    wreg     unsigned char 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  ack             1   17[COMRAM] unsigned char 
  7805 ;;  tmp             1   18[COMRAM] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      unsigned char 
  7808 ;; Registers used:
  7809 ;;		wreg, status,2, status,0, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7816 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7818 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7819 ;;Total ram usage:        3 bytes
  7820 ;; Hardware stack levels used: 1
  7821 ;; Hardware stack levels required when called: 6
  7822 ;; This function calls:
  7823 ;;		_I2C_2_Master_Idle
  7824 ;; This function is called by:
  7825 ;;		_color_read
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text22
  7830   0045C0                     __ptext22:
  7831                           	callstack 0
  7832   0045C0                     _I2C_2_Master_Read:
  7833                           	callstack 23
  7834                           
  7835                           ; BSR set to: 14
  7836                           ;incstack = 0
  7837                           ;I2C_2_Master_Read@ack stored from wreg
  7838   0045C0  6E12               	movwf	I2C_2_Master_Read@ack^0,c
  7839   0045C2                     
  7840                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7841   0045C2  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  7842   0045C6                     
  7843                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7844   0045C6  010E               	movlb	14	; () banked
  7845   0045C8  87DA               	bsf	218,3,b	;volatile
  7846                           
  7847                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7848   0045CA  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  7849   0045CE                     
  7850                           ;i2c.c: 57:   tmp = SSP2BUF;
  7851   0045CE  CED5 F013          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7852                           
  7853                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7854   0045D2  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  7855   0045D6                     
  7856                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7857   0045D6  5012               	movf	I2C_2_Master_Read@ack^0,w,c
  7858   0045D8  B4D8               	btfsc	status,2,c
  7859   0045DA  EFF1  F022         	goto	u2011
  7860   0045DE  EFF5  F022         	goto	u2010
  7861   0045E2                     u2011:
  7862   0045E2  6A11               	clrf	??_I2C_2_Master_Read^0,c
  7863   0045E4  2A11               	incf	??_I2C_2_Master_Read^0,f,c
  7864   0045E6  EFF6  F022         	goto	u2028
  7865   0045EA                     u2010:
  7866   0045EA  6A11               	clrf	??_I2C_2_Master_Read^0,c
  7867   0045EC                     u2028:
  7868   0045EC  3A11               	swapf	??_I2C_2_Master_Read^0,f,c
  7869   0045EE  4611               	rlncf	??_I2C_2_Master_Read^0,f,c
  7870   0045F0  010E               	movlb	14	; () banked
  7871   0045F2  51DA               	movf	218,w,b	;volatile
  7872   0045F4  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  7873   0045F6  0BDF               	andlw	-33
  7874   0045F8  1811               	xorwf	??_I2C_2_Master_Read^0,w,c
  7875   0045FA  6FDA               	movwf	218,b	;volatile
  7876   0045FC                     
  7877                           ; BSR set to: 14
  7878                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7879   0045FC  89DA               	bsf	218,4,b	;volatile
  7880   0045FE                     
  7881                           ; BSR set to: 14
  7882                           ;i2c.c: 61:   return tmp;
  7883   0045FE  5013               	movf	I2C_2_Master_Read@tmp^0,w,c
  7884   004600                     
  7885                           ; BSR set to: 14
  7886   004600  0012               	return		;funcret
  7887   004602                     __end_of_I2C_2_Master_Read:
  7888                           	callstack 0
  7889                           
  7890 ;; *************** function _color_click_init *****************
  7891 ;; Defined at:
  7892 ;;		line 7 in file "color.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7910 ;;Total ram usage:        1 bytes
  7911 ;; Hardware stack levels used: 1
  7912 ;; Hardware stack levels required when called: 9
  7913 ;; This function calls:
  7914 ;;		_I2C_2_Master_Init
  7915 ;;		_color_clear_init_interrupts
  7916 ;;		_color_writetoaddr
  7917 ;; This function is called by:
  7918 ;;		_main
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text23
  7923   004602                     __ptext23:
  7924                           	callstack 0
  7925   004602                     _color_click_init:
  7926                           	callstack 21
  7927   004602                     
  7928                           ;color.c: 10:     I2C_2_Master_Init();
  7929   004602  EC64  F023         	call	_I2C_2_Master_Init	;wreg free
  7930   004606                     
  7931                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  7932   004606  0E01               	movlw	1
  7933   004608  6E12               	movwf	color_writetoaddr@value^0,c
  7934   00460A  0E00               	movlw	0
  7935   00460C  EC00  F024         	call	_color_writetoaddr
  7936   004610                     
  7937                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7938   004610  0E3F               	movlw	63
  7939   004612  6E22               	movwf	??_color_click_init^0,c
  7940   004614  0E55               	movlw	85
  7941   004616                     u4167:
  7942   004616  2EE8               	decfsz	wreg,f,c
  7943   004618  D7FE               	bra	u4167
  7944   00461A  2E22               	decfsz	??_color_click_init^0,f,c
  7945   00461C  D7FC               	bra	u4167
  7946   00461E  0000               	nop	
  7947   004620                     
  7948                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  7949   004620  0E03               	movlw	3
  7950   004622  6E12               	movwf	color_writetoaddr@value^0,c
  7951   004624  0E00               	movlw	0
  7952   004626  EC00  F024         	call	_color_writetoaddr
  7953   00462A                     
  7954                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  7955   00462A  0ED5               	movlw	213
  7956   00462C  6E12               	movwf	color_writetoaddr@value^0,c
  7957   00462E  0E01               	movlw	1
  7958   004630  EC00  F024         	call	_color_writetoaddr
  7959   004634                     
  7960                           ;color.c: 23:     color_clear_init_interrupts();
  7961   004634  ECA8  F020         	call	_color_clear_init_interrupts	;wreg free
  7962   004638  0012               	return		;funcret
  7963   00463A                     __end_of_color_click_init:
  7964                           	callstack 0
  7965                           
  7966 ;; *************** function _color_clear_init_interrupts *****************
  7967 ;; Defined at:
  7968 ;;		line 27 in file "color.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;		None
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  low_threshol    2   31[COMRAM] unsigned int 
  7973 ;;  high_thresho    2   29[COMRAM] unsigned int 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7984 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;Total ram usage:        5 bytes
  7988 ;; Hardware stack levels used: 1
  7989 ;; Hardware stack levels required when called: 8
  7990 ;; This function calls:
  7991 ;;		_I2C_2_Master_Start
  7992 ;;		_I2C_2_Master_Stop
  7993 ;;		_I2C_2_Master_Write
  7994 ;;		___lwdiv
  7995 ;;		_color_writetoaddr
  7996 ;; This function is called by:
  7997 ;;		_main
  7998 ;;		_color_click_init
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           	psect	text24
  8003   004150                     __ptext24:
  8004                           	callstack 0
  8005   004150                     _color_clear_init_interrupts:
  8006                           	callstack 21
  8007   004150                     
  8008                           ;color.c: 29:     I2C_2_Master_Start();
  8009   004150  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  8010                           
  8011                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  8012   004154  0E52               	movlw	82
  8013   004156  EC6F  F024         	call	_I2C_2_Master_Write
  8014                           
  8015                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
  8016   00415A  0EE6               	movlw	230
  8017   00415C  EC6F  F024         	call	_I2C_2_Master_Write
  8018                           
  8019                           ;color.c: 32:     I2C_2_Master_Stop();
  8020   004160  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  8021                           
  8022                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/5);
  8023   004164  C1D7  F016         	movff	_ambient,___lwdiv@dividend
  8024   004168  C1D8  F017         	movff	_ambient+1,___lwdiv@dividend+1
  8025   00416C  0E00               	movlw	0
  8026   00416E  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  8027   004170  0E05               	movlw	5
  8028   004172  6E18               	movwf	___lwdiv@divisor^0,c
  8029   004174  ECE8  F021         	call	___lwdiv	;wreg free
  8030   004178  0101               	movlb	1	; () banked
  8031   00417A  51D7               	movf	_ambient& (0+255),w,b
  8032   00417C  2416               	addwf	?___lwdiv^0,w,c
  8033   00417E  6E1E               	movwf	color_clear_init_interrupts@high_threshold^0,c
  8034   004180  51D8               	movf	(_ambient+1)& (0+255),w,b
  8035   004182  2017               	addwfc	(?___lwdiv+1)^0,w,c
  8036   004184  6E1F               	movwf	(color_clear_init_interrupts@high_threshold+1)^0,c
  8037                           
  8038                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
  8039   004186  C1D7  F016         	movff	_ambient,___lwdiv@dividend
  8040   00418A  C1D8  F017         	movff	_ambient+1,___lwdiv@dividend+1
  8041   00418E  0E00               	movlw	0
  8042   004190  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  8043   004192  0E14               	movlw	20
  8044   004194  6E18               	movwf	___lwdiv@divisor^0,c
  8045   004196  ECE8  F021         	call	___lwdiv	;wreg free
  8046   00419A  5016               	movf	?___lwdiv^0,w,c
  8047   00419C  0101               	movlb	1	; () banked
  8048   00419E  5DD7               	subwf	_ambient& (0+255),w,b
  8049   0041A0  6E20               	movwf	color_clear_init_interrupts@low_threshold^0,c
  8050   0041A2  5017               	movf	(?___lwdiv+1)^0,w,c
  8051   0041A4  59D8               	subwfb	(_ambient+1)& (0+255),w,b
  8052   0041A6  6E21               	movwf	(color_clear_init_interrupts@low_threshold+1)^0,c
  8053                           
  8054                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
  8055   0041A8  0E13               	movlw	19
  8056   0041AA  6E12               	movwf	color_writetoaddr@value^0,c
  8057   0041AC  0E00               	movlw	0
  8058   0041AE  EC00  F024         	call	_color_writetoaddr
  8059   0041B2                     
  8060                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8061   0041B2  0E3F               	movlw	63
  8062   0041B4  6E1D               	movwf	??_color_clear_init_interrupts^0,c
  8063   0041B6  0E55               	movlw	85
  8064   0041B8                     u4177:
  8065   0041B8  2EE8               	decfsz	wreg,f,c
  8066   0041BA  D7FE               	bra	u4177
  8067   0041BC  2E1D               	decfsz	??_color_clear_init_interrupts^0,f,c
  8068   0041BE  D7FC               	bra	u4177
  8069   0041C0  0000               	nop	
  8070   0041C2                     
  8071                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
  8072   0041C2  501F               	movf	(color_clear_init_interrupts@high_threshold+1)^0,w,c
  8073   0041C4  6E12               	movwf	color_writetoaddr@value^0,c
  8074   0041C6  0E07               	movlw	7
  8075   0041C8  EC00  F024         	call	_color_writetoaddr
  8076   0041CC                     
  8077                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
  8078   0041CC  C01E  F012         	movff	color_clear_init_interrupts@high_threshold,color_writetoaddr@value
  8079   0041D0  0E06               	movlw	6
  8080   0041D2  EC00  F024         	call	_color_writetoaddr
  8081   0041D6                     
  8082                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
  8083   0041D6  5021               	movf	(color_clear_init_interrupts@low_threshold+1)^0,w,c
  8084   0041D8  6E12               	movwf	color_writetoaddr@value^0,c
  8085   0041DA  0E05               	movlw	5
  8086   0041DC  EC00  F024         	call	_color_writetoaddr
  8087   0041E0                     
  8088                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
  8089   0041E0  C020  F012         	movff	color_clear_init_interrupts@low_threshold,color_writetoaddr@value
  8090   0041E4  0E04               	movlw	4
  8091   0041E6  EC00  F024         	call	_color_writetoaddr
  8092   0041EA                     
  8093                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
  8094   0041EA  0E03               	movlw	3
  8095   0041EC  6E12               	movwf	color_writetoaddr@value^0,c
  8096   0041EE  0E0C               	movlw	12
  8097   0041F0  EC00  F024         	call	_color_writetoaddr
  8098   0041F4  0012               	return		;funcret
  8099   0041F6                     __end_of_color_clear_init_interrupts:
  8100                           	callstack 0
  8101                           
  8102 ;; *************** function _color_writetoaddr *****************
  8103 ;; Defined at:
  8104 ;;		line 53 in file "color.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  address         1    wreg     unsigned char 
  8107 ;;  value           1   17[COMRAM] unsigned char 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  address         1   18[COMRAM] unsigned char 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2, status,0, cstack
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8119 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8123 ;;Total ram usage:        2 bytes
  8124 ;; Hardware stack levels used: 1
  8125 ;; Hardware stack levels required when called: 7
  8126 ;; This function calls:
  8127 ;;		_I2C_2_Master_Start
  8128 ;;		_I2C_2_Master_Stop
  8129 ;;		_I2C_2_Master_Write
  8130 ;; This function is called by:
  8131 ;;		_color_click_init
  8132 ;;		_color_clear_init_interrupts
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text25
  8137   004800                     __ptext25:
  8138                           	callstack 0
  8139   004800                     _color_writetoaddr:
  8140                           	callstack 22
  8141                           
  8142                           ;incstack = 0
  8143                           ;color_writetoaddr@address stored from wreg
  8144   004800  6E13               	movwf	color_writetoaddr@address^0,c
  8145   004802                     
  8146                           ;color.c: 54:     I2C_2_Master_Start();
  8147   004802  EC8A  F024         	call	_I2C_2_Master_Start	;wreg free
  8148                           
  8149                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
  8150   004806  0E52               	movlw	82
  8151   004808  EC6F  F024         	call	_I2C_2_Master_Write
  8152                           
  8153                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
  8154   00480C  5013               	movf	color_writetoaddr@address^0,w,c
  8155   00480E  0980               	iorlw	128
  8156   004810  EC6F  F024         	call	_I2C_2_Master_Write
  8157                           
  8158                           ;color.c: 57:     I2C_2_Master_Write(value);
  8159   004814  5012               	movf	color_writetoaddr@value^0,w,c
  8160   004816  EC6F  F024         	call	_I2C_2_Master_Write
  8161                           
  8162                           ;color.c: 58:     I2C_2_Master_Stop();
  8163   00481A  EC85  F024         	call	_I2C_2_Master_Stop	;wreg free
  8164   00481E  0012               	return		;funcret
  8165   004820                     __end_of_color_writetoaddr:
  8166                           	callstack 0
  8167                           
  8168 ;; *************** function _I2C_2_Master_Write *****************
  8169 ;; Defined at:
  8170 ;;		line 45 in file "i2c.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  data_byte       1    wreg     unsigned char 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  data_byte       1   16[COMRAM] unsigned char 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		wreg, status,2, status,0, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8188 ;;Total ram usage:        1 bytes
  8189 ;; Hardware stack levels used: 1
  8190 ;; Hardware stack levels required when called: 6
  8191 ;; This function calls:
  8192 ;;		_I2C_2_Master_Idle
  8193 ;; This function is called by:
  8194 ;;		_color_clear_init_interrupts
  8195 ;;		_color_writetoaddr
  8196 ;;		_color_read
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text26
  8201   0048DE                     __ptext26:
  8202                           	callstack 0
  8203   0048DE                     _I2C_2_Master_Write:
  8204                           	callstack 23
  8205                           
  8206                           ;incstack = 0
  8207                           ;I2C_2_Master_Write@data_byte stored from wreg
  8208   0048DE  6E11               	movwf	I2C_2_Master_Write@data_byte^0,c
  8209   0048E0                     
  8210                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8211   0048E0  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  8212   0048E4                     
  8213                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8214   0048E4  C011  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8215   0048E8  0012               	return		;funcret
  8216   0048EA                     __end_of_I2C_2_Master_Write:
  8217                           	callstack 0
  8218                           
  8219 ;; *************** function _I2C_2_Master_Stop *****************
  8220 ;; Defined at:
  8221 ;;		line 39 in file "i2c.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  1    wreg      void 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2, status,0, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8239 ;;Total ram usage:        0 bytes
  8240 ;; Hardware stack levels used: 1
  8241 ;; Hardware stack levels required when called: 6
  8242 ;; This function calls:
  8243 ;;		_I2C_2_Master_Idle
  8244 ;; This function is called by:
  8245 ;;		_color_clear_init_interrupts
  8246 ;;		_color_writetoaddr
  8247 ;;		_color_read
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text27
  8252   00490A                     __ptext27:
  8253                           	callstack 0
  8254   00490A                     _I2C_2_Master_Stop:
  8255                           	callstack 23
  8256   00490A                     
  8257                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8258   00490A  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  8259   00490E                     
  8260                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8261   00490E  010E               	movlb	14	; () banked
  8262   004910  85DA               	bsf	218,2,b	;volatile
  8263   004912                     
  8264                           ; BSR set to: 14
  8265   004912  0012               	return		;funcret
  8266   004914                     __end_of_I2C_2_Master_Stop:
  8267                           	callstack 0
  8268                           
  8269 ;; *************** function _I2C_2_Master_Start *****************
  8270 ;; Defined at:
  8271 ;;		line 27 in file "i2c.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2, status,0, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8289 ;;Total ram usage:        0 bytes
  8290 ;; Hardware stack levels used: 1
  8291 ;; Hardware stack levels required when called: 6
  8292 ;; This function calls:
  8293 ;;		_I2C_2_Master_Idle
  8294 ;; This function is called by:
  8295 ;;		_color_clear_init_interrupts
  8296 ;;		_color_writetoaddr
  8297 ;;		_color_read
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text28
  8302   004914                     __ptext28:
  8303                           	callstack 0
  8304   004914                     _I2C_2_Master_Start:
  8305                           	callstack 23
  8306   004914                     
  8307                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8308   004914  EC8D  F023         	call	_I2C_2_Master_Idle	;wreg free
  8309   004918                     
  8310                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8311   004918  010E               	movlb	14	; () banked
  8312   00491A  81DA               	bsf	218,0,b	;volatile
  8313   00491C                     
  8314                           ; BSR set to: 14
  8315   00491C  0012               	return		;funcret
  8316   00491E                     __end_of_I2C_2_Master_Start:
  8317                           	callstack 0
  8318                           
  8319 ;; *************** function _I2C_2_Master_Idle *****************
  8320 ;; Defined at:
  8321 ;;		line 22 in file "i2c.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8339 ;;Total ram usage:        1 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; Hardware stack levels required when called: 5
  8342 ;; This function calls:
  8343 ;;		Nothing
  8344 ;; This function is called by:
  8345 ;;		_I2C_2_Master_Start
  8346 ;;		_I2C_2_Master_RepStart
  8347 ;;		_I2C_2_Master_Stop
  8348 ;;		_I2C_2_Master_Write
  8349 ;;		_I2C_2_Master_Read
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text29
  8354   00471A                     __ptext29:
  8355                           	callstack 0
  8356   00471A                     _I2C_2_Master_Idle:
  8357                           	callstack 23
  8358   00471A                     l255:
  8359   00471A  010E               	movlb	14	; () banked
  8360   00471C  B5D8               	btfsc	216,2,b	;volatile
  8361   00471E  EF93  F023         	goto	u1731
  8362   004722  EF95  F023         	goto	u1730
  8363   004726                     u1731:
  8364   004726  EF8D  F023         	goto	l255
  8365   00472A                     u1730:
  8366   00472A                     
  8367                           ; BSR set to: 14
  8368   00472A  CEDA F010          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8369   00472E  0E1F               	movlw	31
  8370   004730  1610               	andwf	??_I2C_2_Master_Idle^0,f,c
  8371   004732  A4D8               	btfss	status,2,c
  8372   004734  EF9E  F023         	goto	u1741
  8373   004738  EFA0  F023         	goto	u1740
  8374   00473C                     u1741:
  8375   00473C  EF8D  F023         	goto	l255
  8376   004740                     u1740:
  8377   004740                     
  8378                           ; BSR set to: 14
  8379   004740  0012               	return		;funcret
  8380   004742                     __end_of_I2C_2_Master_Idle:
  8381                           	callstack 0
  8382                           
  8383 ;; *************** function _I2C_2_Master_Init *****************
  8384 ;; Defined at:
  8385 ;;		line 4 in file "i2c.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;		None
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      void 
  8392 ;; Registers used:
  8393 ;;		wreg, status,2
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8403 ;;Total ram usage:        0 bytes
  8404 ;; Hardware stack levels used: 1
  8405 ;; Hardware stack levels required when called: 5
  8406 ;; This function calls:
  8407 ;;		Nothing
  8408 ;; This function is called by:
  8409 ;;		_color_click_init
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text30
  8414   0046C8                     __ptext30:
  8415                           	callstack 0
  8416   0046C8                     _I2C_2_Master_Init:
  8417                           	callstack 24
  8418   0046C8                     
  8419                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8420   0046C8  010E               	movlb	14	; () banked
  8421   0046CA  51D9               	movf	217,w,b	;volatile
  8422   0046CC  0BF0               	andlw	-16
  8423   0046CE  0908               	iorlw	8
  8424   0046D0  6FD9               	movwf	217,b	;volatile
  8425   0046D2                     
  8426                           ; BSR set to: 14
  8427                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8428   0046D2  8BD9               	bsf	217,5,b	;volatile
  8429                           
  8430                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8431   0046D4  0E9F               	movlw	159
  8432   0046D6  6FD6               	movwf	214,b	;volatile
  8433   0046D8                     
  8434                           ; BSR set to: 14
  8435                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8436   0046D8  8A84               	bsf	132,5,c	;volatile
  8437   0046DA                     
  8438                           ; BSR set to: 14
  8439                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8440   0046DA  8C84               	bsf	132,6,c	;volatile
  8441   0046DC                     
  8442                           ; BSR set to: 14
  8443                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8444   0046DC  9BA7               	bcf	167,5,b	;volatile
  8445   0046DE                     
  8446                           ; BSR set to: 14
  8447                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8448   0046DE  9DA7               	bcf	167,6,b	;volatile
  8449                           
  8450                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8451   0046E0  0E1D               	movlw	29
  8452   0046E2  6F1D               	movwf	29,b	;volatile
  8453                           
  8454                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8455   0046E4  0E1E               	movlw	30
  8456   0046E6  6F1C               	movwf	28,b	;volatile
  8457                           
  8458                           ;i2c.c: 18:   RD5PPS=0x1C;
  8459   0046E8  0E1C               	movlw	28
  8460   0046EA  6F6F               	movwf	111,b	;volatile
  8461                           
  8462                           ;i2c.c: 19:   RD6PPS=0x1B;
  8463   0046EC  0E1B               	movlw	27
  8464   0046EE  6F70               	movwf	112,b	;volatile
  8465   0046F0                     
  8466                           ; BSR set to: 14
  8467   0046F0  0012               	return		;funcret
  8468   0046F2                     __end_of_I2C_2_Master_Init:
  8469                           	callstack 0
  8470                           
  8471 ;; *************** function _calibration *****************
  8472 ;; Defined at:
  8473 ;;		line 598 in file "dc_motor.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  8476 ;;		 -> main@motorL(10), 
  8477 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  8478 ;;		 -> main@motorR(10), 
  8479 ;;  turnSpeed       1   52[COMRAM] unsigned char 
  8480 ;;  turnDuration    2   53[COMRAM] PTR unsigned char 
  8481 ;;		 -> main@turnDuration(1), 
  8482 ;;  turnRamp        1   55[COMRAM] unsigned char 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;		None
  8485 ;; Return value:  Size  Location     Type
  8486 ;;                  1    wreg      void 
  8487 ;; Registers used:
  8488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8489 ;; Tracked objects:
  8490 ;;		On entry : 0/0
  8491 ;;		On exit  : 0/0
  8492 ;;		Unchanged: 0/0
  8493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8494 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8497 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8498 ;;Total ram usage:       10 bytes
  8499 ;; Hardware stack levels used: 1
  8500 ;; Hardware stack levels required when called: 8
  8501 ;; This function calls:
  8502 ;;		_turnLeft
  8503 ;;		_turnRight
  8504 ;; This function is called by:
  8505 ;;		_main
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text31
  8510   00300E                     __ptext31:
  8511                           	callstack 0
  8512   00300E                     _calibration:
  8513                           	callstack 22
  8514   00300E                     
  8515                           ;dc_motor.c: 598: void calibration(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned 
      +                          char *turnDuration, unsigned char turnRamp);dc_motor.c: 599: {;dc_motor.c: 601:     turn
      +                          Left(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8516   00300E  C031  F023         	movff	calibration@mL,turnLeft@mL
  8517   003012  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  8518   003016  C033  F025         	movff	calibration@mR,turnLeft@mR
  8519   00301A  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  8520   00301E  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  8521   003022  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8522   003026  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8523   00302A  50DF               	movf	indf2,w,c
  8524   00302C  6E28               	movwf	turnLeft@turnDuration^0,c
  8525   00302E  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  8526   003032  EC26  F01D         	call	_turnLeft	;wreg free
  8527   003036                     
  8528                           ;dc_motor.c: 602:     _delay((unsigned long)((50)*(64000000/4000.0)));
  8529   003036  0E05               	movlw	5
  8530   003038  6E3A               	movwf	(??_calibration+1)^0,c
  8531   00303A  0E0F               	movlw	15
  8532   00303C  6E39               	movwf	??_calibration^0,c
  8533   00303E  0EF1               	movlw	241
  8534   003040                     u4187:
  8535   003040  2EE8               	decfsz	wreg,f,c
  8536   003042  D7FE               	bra	u4187
  8537   003044  2E39               	decfsz	??_calibration^0,f,c
  8538   003046  D7FC               	bra	u4187
  8539   003048  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8540   00304A  D7FA               	bra	u4187
  8541   00304C  0000               	nop	
  8542   00304E                     
  8543                           ;dc_motor.c: 603:     turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8544   00304E  C031  F023         	movff	calibration@mL,turnLeft@mL
  8545   003052  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  8546   003056  C033  F025         	movff	calibration@mR,turnLeft@mR
  8547   00305A  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  8548   00305E  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  8549   003062  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8550   003066  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8551   00306A  50DF               	movf	indf2,w,c
  8552   00306C  6E28               	movwf	turnLeft@turnDuration^0,c
  8553   00306E  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  8554   003072  EC26  F01D         	call	_turnLeft	;wreg free
  8555                           
  8556                           ;dc_motor.c: 604:     _delay((unsigned long)((50)*(64000000/4000.0)));
  8557   003076  0E05               	movlw	5
  8558   003078  6E3A               	movwf	(??_calibration+1)^0,c
  8559   00307A  0E0F               	movlw	15
  8560   00307C  6E39               	movwf	??_calibration^0,c
  8561   00307E  0EF1               	movlw	241
  8562   003080                     u4197:
  8563   003080  2EE8               	decfsz	wreg,f,c
  8564   003082  D7FE               	bra	u4197
  8565   003084  2E39               	decfsz	??_calibration^0,f,c
  8566   003086  D7FC               	bra	u4197
  8567   003088  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8568   00308A  D7FA               	bra	u4197
  8569   00308C  0000               	nop	
  8570   00308E                     
  8571                           ;dc_motor.c: 605:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8572   00308E  C031  F023         	movff	calibration@mL,turnRight@mL
  8573   003092  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  8574   003096  C033  F025         	movff	calibration@mR,turnRight@mR
  8575   00309A  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  8576   00309E  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  8577   0030A2  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8578   0030A6  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8579   0030AA  50DF               	movf	indf2,w,c
  8580   0030AC  6E28               	movwf	turnRight@turnDuration^0,c
  8581   0030AE  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  8582   0030B2  EC39  F01C         	call	_turnRight	;wreg free
  8583   0030B6                     
  8584                           ;dc_motor.c: 606:     _delay((unsigned long)((50)*(64000000/4000.0)));
  8585   0030B6  0E05               	movlw	5
  8586   0030B8  6E3A               	movwf	(??_calibration+1)^0,c
  8587   0030BA  0E0F               	movlw	15
  8588   0030BC  6E39               	movwf	??_calibration^0,c
  8589   0030BE  0EF1               	movlw	241
  8590   0030C0                     u4207:
  8591   0030C0  2EE8               	decfsz	wreg,f,c
  8592   0030C2  D7FE               	bra	u4207
  8593   0030C4  2E39               	decfsz	??_calibration^0,f,c
  8594   0030C6  D7FC               	bra	u4207
  8595   0030C8  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8596   0030CA  D7FA               	bra	u4207
  8597   0030CC  0000               	nop	
  8598                           
  8599                           ;dc_motor.c: 607:     turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8600   0030CE  C031  F023         	movff	calibration@mL,turnRight@mL
  8601   0030D2  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  8602   0030D6  C033  F025         	movff	calibration@mR,turnRight@mR
  8603   0030DA  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  8604   0030DE  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  8605   0030E2  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8606   0030E6  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8607   0030EA  50DF               	movf	indf2,w,c
  8608   0030EC  6E28               	movwf	turnRight@turnDuration^0,c
  8609   0030EE  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  8610   0030F2  EC39  F01C         	call	_turnRight	;wreg free
  8611   0030F6                     l739:
  8612   0030F6  A48E               	btfss	142,2,c	;volatile
  8613   0030F8  EF80  F018         	goto	u2431
  8614   0030FC  EF82  F018         	goto	u2430
  8615   003100                     u2431:
  8616   003100  EF89  F018         	goto	l743
  8617   003104                     u2430:
  8618   003104  B68E               	btfsc	142,3,c	;volatile
  8619   003106  EF87  F018         	goto	u2441
  8620   00310A  EF89  F018         	goto	u2440
  8621   00310E                     u2441:
  8622   00310E  EF7B  F018         	goto	l739
  8623   003112                     u2440:
  8624   003112                     l743:
  8625                           
  8626                           ;dc_motor.c: 612:         if (!PORTFbits.RF2 && *turnDuration>0) {
  8627   003112  B48E               	btfsc	142,2,c	;volatile
  8628   003114  EF8E  F018         	goto	u2451
  8629   003118  EF90  F018         	goto	u2450
  8630   00311C                     u2451:
  8631   00311C  EFA4  F018         	goto	l744
  8632   003120                     u2450:
  8633   003120  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8634   003124  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8635   003128  50DF               	movf	indf2,w,c
  8636   00312A  B4D8               	btfsc	status,2,c
  8637   00312C  EF9A  F018         	goto	u2461
  8638   003130  EF9C  F018         	goto	u2460
  8639   003134                     u2461:
  8640   003134  EFA4  F018         	goto	l744
  8641   003138                     u2460:
  8642   003138                     
  8643                           ;dc_motor.c: 613:             (*turnDuration)--;
  8644   003138  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8645   00313C  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8646   003140  06DF               	decf	indf2,f,c
  8647   003142                     
  8648                           ;dc_motor.c: 614:             LATDbits.LATD7 = 1;
  8649   003142  8E7C               	bsf	124,7,c	;volatile
  8650                           
  8651                           ;dc_motor.c: 615:         }
  8652   003144  EFB1  F018         	goto	l3755
  8653   003148                     l744:
  8654   003148  B68E               	btfsc	142,3,c	;volatile
  8655   00314A  EFA9  F018         	goto	u2471
  8656   00314E  EFAB  F018         	goto	u2470
  8657   003152                     u2471:
  8658   003152  EFB1  F018         	goto	l3755
  8659   003156                     u2470:
  8660   003156                     
  8661                           ;dc_motor.c: 618:             (*turnDuration)++;
  8662   003156  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8663   00315A  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8664   00315E  2ADF               	incf	indf2,f,c
  8665   003160                     
  8666                           ;dc_motor.c: 619:             LATHbits.LATH3 = 1;
  8667   003160  8680               	bsf	128,3,c	;volatile
  8668   003162                     l3755:
  8669                           
  8670                           ;dc_motor.c: 622:         _delay((unsigned long)((500)*(64000000/4000.0)));
  8671   003162  0E29               	movlw	41
  8672   003164  6E3A               	movwf	(??_calibration+1)^0,c
  8673   003166  0E96               	movlw	150
  8674   003168  6E39               	movwf	??_calibration^0,c
  8675   00316A  0E7F               	movlw	127
  8676   00316C                     u4217:
  8677   00316C  2EE8               	decfsz	wreg,f,c
  8678   00316E  D7FE               	bra	u4217
  8679   003170  2E39               	decfsz	??_calibration^0,f,c
  8680   003172  D7FC               	bra	u4217
  8681   003174  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8682   003176  D7FA               	bra	u4217
  8683   003178  0000               	nop	
  8684   00317A                     
  8685                           ;dc_motor.c: 624:         if (!PORTFbits.RF3) {
  8686   00317A  B68E               	btfsc	142,3,c	;volatile
  8687   00317C  EFC2  F018         	goto	u2481
  8688   003180  EFC4  F018         	goto	u2480
  8689   003184                     u2481:
  8690   003184  EFCB  F018         	goto	l747
  8691   003188                     u2480:
  8692   003188                     
  8693                           ;dc_motor.c: 625:             (*turnDuration)--;
  8694   003188  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8695   00318C  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8696   003190  06DF               	decf	indf2,f,c
  8697                           
  8698                           ;dc_motor.c: 626:             break;
  8699   003192  EF43  F019         	goto	l748
  8700   003196                     l747:
  8701                           
  8702                           ;dc_motor.c: 629:         LATDbits.LATD7 = LATHbits.LATH3 = 0;
  8703   003196  9680               	bcf	128,3,c	;volatile
  8704   003198  9E7C               	bcf	124,7,c	;volatile
  8705   00319A                     
  8706                           ;dc_motor.c: 632:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8707   00319A  C031  F023         	movff	calibration@mL,turnLeft@mL
  8708   00319E  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  8709   0031A2  C033  F025         	movff	calibration@mR,turnLeft@mR
  8710   0031A6  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  8711   0031AA  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  8712   0031AE  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8713   0031B2  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8714   0031B6  50DF               	movf	indf2,w,c
  8715   0031B8  6E28               	movwf	turnLeft@turnDuration^0,c
  8716   0031BA  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  8717   0031BE  EC26  F01D         	call	_turnLeft	;wreg free
  8718   0031C2                     
  8719                           ;dc_motor.c: 633:         _delay((unsigned long)((50)*(64000000/4000.0)));
  8720   0031C2  0E05               	movlw	5
  8721   0031C4  6E3A               	movwf	(??_calibration+1)^0,c
  8722   0031C6  0E0F               	movlw	15
  8723   0031C8  6E39               	movwf	??_calibration^0,c
  8724   0031CA  0EF1               	movlw	241
  8725   0031CC                     u4227:
  8726   0031CC  2EE8               	decfsz	wreg,f,c
  8727   0031CE  D7FE               	bra	u4227
  8728   0031D0  2E39               	decfsz	??_calibration^0,f,c
  8729   0031D2  D7FC               	bra	u4227
  8730   0031D4  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8731   0031D6  D7FA               	bra	u4227
  8732   0031D8  0000               	nop	
  8733   0031DA                     
  8734                           ;dc_motor.c: 634:         turnLeft(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8735   0031DA  C031  F023         	movff	calibration@mL,turnLeft@mL
  8736   0031DE  C032  F024         	movff	calibration@mL+1,turnLeft@mL+1
  8737   0031E2  C033  F025         	movff	calibration@mR,turnLeft@mR
  8738   0031E6  C034  F026         	movff	calibration@mR+1,turnLeft@mR+1
  8739   0031EA  C035  F027         	movff	calibration@turnSpeed,turnLeft@turnSpeed
  8740   0031EE  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8741   0031F2  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8742   0031F6  50DF               	movf	indf2,w,c
  8743   0031F8  6E28               	movwf	turnLeft@turnDuration^0,c
  8744   0031FA  C038  F029         	movff	calibration@turnRamp,turnLeft@turnRamp
  8745   0031FE  EC26  F01D         	call	_turnLeft	;wreg free
  8746                           
  8747                           ;dc_motor.c: 635:         _delay((unsigned long)((50)*(64000000/4000.0)));
  8748   003202  0E05               	movlw	5
  8749   003204  6E3A               	movwf	(??_calibration+1)^0,c
  8750   003206  0E0F               	movlw	15
  8751   003208  6E39               	movwf	??_calibration^0,c
  8752   00320A  0EF1               	movlw	241
  8753   00320C                     u4237:
  8754   00320C  2EE8               	decfsz	wreg,f,c
  8755   00320E  D7FE               	bra	u4237
  8756   003210  2E39               	decfsz	??_calibration^0,f,c
  8757   003212  D7FC               	bra	u4237
  8758   003214  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8759   003216  D7FA               	bra	u4237
  8760   003218  0000               	nop	
  8761   00321A                     
  8762                           ;dc_motor.c: 636:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8763   00321A  C031  F023         	movff	calibration@mL,turnRight@mL
  8764   00321E  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  8765   003222  C033  F025         	movff	calibration@mR,turnRight@mR
  8766   003226  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  8767   00322A  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  8768   00322E  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8769   003232  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8770   003236  50DF               	movf	indf2,w,c
  8771   003238  6E28               	movwf	turnRight@turnDuration^0,c
  8772   00323A  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  8773   00323E  EC39  F01C         	call	_turnRight	;wreg free
  8774   003242                     
  8775                           ;dc_motor.c: 637:         _delay((unsigned long)((50)*(64000000/4000.0)));
  8776   003242  0E05               	movlw	5
  8777   003244  6E3A               	movwf	(??_calibration+1)^0,c
  8778   003246  0E0F               	movlw	15
  8779   003248  6E39               	movwf	??_calibration^0,c
  8780   00324A  0EF1               	movlw	241
  8781   00324C                     u4247:
  8782   00324C  2EE8               	decfsz	wreg,f,c
  8783   00324E  D7FE               	bra	u4247
  8784   003250  2E39               	decfsz	??_calibration^0,f,c
  8785   003252  D7FC               	bra	u4247
  8786   003254  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8787   003256  D7FA               	bra	u4247
  8788   003258  0000               	nop	
  8789                           
  8790                           ;dc_motor.c: 638:         turnRight(mL, mR, turnSpeed, *turnDuration, turnRamp);
  8791   00325A  C031  F023         	movff	calibration@mL,turnRight@mL
  8792   00325E  C032  F024         	movff	calibration@mL+1,turnRight@mL+1
  8793   003262  C033  F025         	movff	calibration@mR,turnRight@mR
  8794   003266  C034  F026         	movff	calibration@mR+1,turnRight@mR+1
  8795   00326A  C035  F027         	movff	calibration@turnSpeed,turnRight@turnSpeed
  8796   00326E  C036  FFD9         	movff	calibration@turnDuration,fsr2l
  8797   003272  C037  FFDA         	movff	calibration@turnDuration+1,fsr2h
  8798   003276  50DF               	movf	indf2,w,c
  8799   003278  6E28               	movwf	turnRight@turnDuration^0,c
  8800   00327A  C038  F029         	movff	calibration@turnRamp,turnRight@turnRamp
  8801   00327E  EC39  F01C         	call	_turnRight	;wreg free
  8802   003282  EF7B  F018         	goto	l739
  8803   003286                     l748:
  8804                           
  8805                           ;dc_motor.c: 643:     LATDbits.LATD7 = LATHbits.LATH3 = 1;
  8806   003286  8680               	bsf	128,3,c	;volatile
  8807   003288  8E7C               	bsf	124,7,c	;volatile
  8808   00328A                     
  8809                           ;dc_motor.c: 644:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8810   00328A  0E09               	movlw	9
  8811   00328C  6E3A               	movwf	(??_calibration+1)^0,c
  8812   00328E  0E1E               	movlw	30
  8813   003290  6E39               	movwf	??_calibration^0,c
  8814   003292  0EE4               	movlw	228
  8815   003294                     u4257:
  8816   003294  2EE8               	decfsz	wreg,f,c
  8817   003296  D7FE               	bra	u4257
  8818   003298  2E39               	decfsz	??_calibration^0,f,c
  8819   00329A  D7FC               	bra	u4257
  8820   00329C  2E3A               	decfsz	(??_calibration+1)^0,f,c
  8821   00329E  D7FA               	bra	u4257
  8822   0032A0  D000               	nop2	
  8823   0032A2                     
  8824                           ;dc_motor.c: 645:     LATDbits.LATD7 = LATHbits.LATH3 = 0;
  8825   0032A2  9680               	bcf	128,3,c	;volatile
  8826   0032A4  9E7C               	bcf	124,7,c	;volatile
  8827   0032A6  0012               	return		;funcret
  8828   0032A8                     __end_of_calibration:
  8829                           	callstack 0
  8830                           
  8831 ;; *************** function _turnRight *****************
  8832 ;; Defined at:
  8833 ;;		line 419 in file "dc_motor.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  8836 ;;		 -> main@motorL(10), 
  8837 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  8838 ;;		 -> main@motorR(10), 
  8839 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  8840 ;;  turnDuration    1   39[COMRAM] unsigned char 
  8841 ;;  turnRamp        1   40[COMRAM] unsigned char 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  cur_power       2   46[COMRAM] int 
  8844 ;;  i               2   44[COMRAM] int 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      void 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8854 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8855 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8856 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8857 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8858 ;;Total ram usage:       14 bytes
  8859 ;; Hardware stack levels used: 1
  8860 ;; Hardware stack levels required when called: 7
  8861 ;; This function calls:
  8862 ;;		_setMotorPWM
  8863 ;; This function is called by:
  8864 ;;		_move
  8865 ;;		_returnHome
  8866 ;;		_lostReturnHome
  8867 ;;		_calibration
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text32
  8872   003872                     __ptext32:
  8873                           	callstack 0
  8874   003872                     _turnRight:
  8875                           	callstack 22
  8876   003872                     
  8877                           ;dc_motor.c: 419: void turnRight(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned ch
      +                          ar turnDuration, unsigned char turnRamp);dc_motor.c: 420: {;dc_motor.c: 421:     mL->dir
      +                          ection = 1;
  8878   003872  EE20 F001          	lfsr	2,1
  8879   003876  5023               	movf	turnRight@mL^0,w,c
  8880   003878  26D9               	addwf	fsr2l,f,c
  8881   00387A  5024               	movf	(turnRight@mL+1)^0,w,c
  8882   00387C  22DA               	addwfc	fsr2h,f,c
  8883   00387E  0E01               	movlw	1
  8884   003880  6EDF               	movwf	indf2,c
  8885                           
  8886                           ;dc_motor.c: 422:     mR->direction = 0;
  8887   003882  EE20 F001          	lfsr	2,1
  8888   003886  5025               	movf	turnRight@mR^0,w,c
  8889   003888  26D9               	addwf	fsr2l,f,c
  8890   00388A  5026               	movf	(turnRight@mR+1)^0,w,c
  8891   00388C  22DA               	addwfc	fsr2h,f,c
  8892   00388E  6ADF               	clrf	indf2,c
  8893   003890                     
  8894                           ;dc_motor.c: 423:     int i;;dc_motor.c: 424:     int cur_power;;dc_motor.c: 425:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  8895   003890  0E00               	movlw	0
  8896   003892  6E30               	movwf	(turnRight@cur_power+1)^0,c
  8897   003894  0E01               	movlw	1
  8898   003896  6E2F               	movwf	turnRight@cur_power^0,c
  8899   003898  EF98  F01C         	goto	l3153
  8900   00389C                     l3139:
  8901                           
  8902                           ;dc_motor.c: 426:         mL->power = cur_power+mL->compensation;
  8903   00389C  EE20 F009          	lfsr	2,9
  8904   0038A0  5023               	movf	turnRight@mL^0,w,c
  8905   0038A2  26D9               	addwf	fsr2l,f,c
  8906   0038A4  5024               	movf	(turnRight@mL+1)^0,w,c
  8907   0038A6  22DA               	addwfc	fsr2h,f,c
  8908   0038A8  50DF               	movf	indf2,w,c
  8909   0038AA  242F               	addwf	turnRight@cur_power^0,w,c
  8910   0038AC  C023  FFD9         	movff	turnRight@mL,fsr2l
  8911   0038B0  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  8912   0038B4  6EDF               	movwf	indf2,c
  8913                           
  8914                           ;dc_motor.c: 427:         mR->power = cur_power+mR->compensation;
  8915   0038B6  EE20 F009          	lfsr	2,9
  8916   0038BA  5025               	movf	turnRight@mR^0,w,c
  8917   0038BC  26D9               	addwf	fsr2l,f,c
  8918   0038BE  5026               	movf	(turnRight@mR+1)^0,w,c
  8919   0038C0  22DA               	addwfc	fsr2h,f,c
  8920   0038C2  50DF               	movf	indf2,w,c
  8921   0038C4  242F               	addwf	turnRight@cur_power^0,w,c
  8922   0038C6  C025  FFD9         	movff	turnRight@mR,fsr2l
  8923   0038CA  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  8924   0038CE  6EDF               	movwf	indf2,c
  8925   0038D0                     
  8926                           ;dc_motor.c: 428:         setMotorPWM(mL);
  8927   0038D0  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  8928   0038D4  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  8929   0038D8  EC13  F01E         	call	_setMotorPWM	;wreg free
  8930   0038DC                     
  8931                           ;dc_motor.c: 429:         setMotorPWM(mR);
  8932   0038DC  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  8933   0038E0  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  8934   0038E4  EC13  F01E         	call	_setMotorPWM	;wreg free
  8935   0038E8                     
  8936                           ;dc_motor.c: 430:         for (i=0;i<turnRamp;i++) {
  8937   0038E8  0E00               	movlw	0
  8938   0038EA  6E2E               	movwf	(turnRight@i+1)^0,c
  8939   0038EC  0E00               	movlw	0
  8940   0038EE  6E2D               	movwf	turnRight@i^0,c
  8941   0038F0  EF84  F01C         	goto	l649
  8942   0038F4                     l3147:
  8943                           
  8944                           ;dc_motor.c: 431:             _delay((unsigned long)((5)*(64000000/4000.0)));
  8945   0038F4  0E68               	movlw	104
  8946   0038F6  6E2A               	movwf	??_turnRight^0,c
  8947   0038F8  0EE4               	movlw	228
  8948   0038FA                     u4267:
  8949   0038FA  2EE8               	decfsz	wreg,f,c
  8950   0038FC  D7FE               	bra	u4267
  8951   0038FE  2E2A               	decfsz	??_turnRight^0,f,c
  8952   003900  D7FC               	bra	u4267
  8953   003902  D000               	nop2	
  8954   003904                     
  8955                           ;dc_motor.c: 432:         }
  8956   003904  4A2D               	infsnz	turnRight@i^0,f,c
  8957   003906  2A2E               	incf	(turnRight@i+1)^0,f,c
  8958   003908                     l649:
  8959   003908  5029               	movf	turnRight@turnRamp^0,w,c
  8960   00390A  6E2A               	movwf	??_turnRight^0,c
  8961   00390C  6A2B               	clrf	(??_turnRight+1)^0,c
  8962   00390E  502A               	movf	??_turnRight^0,w,c
  8963   003910  5C2D               	subwf	turnRight@i^0,w,c
  8964   003912  502E               	movf	(turnRight@i+1)^0,w,c
  8965   003914  0A80               	xorlw	128
  8966   003916  6E2C               	movwf	(??_turnRight+2)^0,c
  8967   003918  502B               	movf	(??_turnRight+1)^0,w,c
  8968   00391A  0A80               	xorlw	128
  8969   00391C  582C               	subwfb	(??_turnRight+2)^0,w,c
  8970   00391E  A0D8               	btfss	status,0,c
  8971   003920  EF94  F01C         	goto	u1861
  8972   003924  EF96  F01C         	goto	u1860
  8973   003928                     u1861:
  8974   003928  EF7A  F01C         	goto	l3147
  8975   00392C                     u1860:
  8976   00392C                     
  8977                           ;dc_motor.c: 433:     }
  8978   00392C  4A2F               	infsnz	turnRight@cur_power^0,f,c
  8979   00392E  2A30               	incf	(turnRight@cur_power+1)^0,f,c
  8980   003930                     l3153:
  8981   003930  5027               	movf	turnRight@turnSpeed^0,w,c
  8982   003932  6E2A               	movwf	??_turnRight^0,c
  8983   003934  6A2B               	clrf	(??_turnRight+1)^0,c
  8984   003936  502F               	movf	turnRight@cur_power^0,w,c
  8985   003938  5C2A               	subwf	??_turnRight^0,w,c
  8986   00393A  502B               	movf	(??_turnRight+1)^0,w,c
  8987   00393C  0A80               	xorlw	128
  8988   00393E  6E2C               	movwf	(??_turnRight+2)^0,c
  8989   003940  5030               	movf	(turnRight@cur_power+1)^0,w,c
  8990   003942  0A80               	xorlw	128
  8991   003944  582C               	subwfb	(??_turnRight+2)^0,w,c
  8992   003946  B0D8               	btfsc	status,0,c
  8993   003948  EFA8  F01C         	goto	u1871
  8994   00394C  EFAA  F01C         	goto	u1870
  8995   003950                     u1871:
  8996   003950  EF4E  F01C         	goto	l3139
  8997   003954                     u1870:
  8998   003954                     
  8999                           ;dc_motor.c: 435:     for (i=0;i<turnDuration;i++) {
  9000   003954  0E00               	movlw	0
  9001   003956  6E2E               	movwf	(turnRight@i+1)^0,c
  9002   003958  0E00               	movlw	0
  9003   00395A  6E2D               	movwf	turnRight@i^0,c
  9004   00395C  EFBA  F01C         	goto	l653
  9005   003960                     l3157:
  9006                           
  9007                           ;dc_motor.c: 436:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9008   003960  0E68               	movlw	104
  9009   003962  6E2A               	movwf	??_turnRight^0,c
  9010   003964  0EE4               	movlw	228
  9011   003966                     u4277:
  9012   003966  2EE8               	decfsz	wreg,f,c
  9013   003968  D7FE               	bra	u4277
  9014   00396A  2E2A               	decfsz	??_turnRight^0,f,c
  9015   00396C  D7FC               	bra	u4277
  9016   00396E  D000               	nop2	
  9017   003970                     
  9018                           ;dc_motor.c: 437:         }
  9019   003970  4A2D               	infsnz	turnRight@i^0,f,c
  9020   003972  2A2E               	incf	(turnRight@i+1)^0,f,c
  9021   003974                     l653:
  9022   003974  5028               	movf	turnRight@turnDuration^0,w,c
  9023   003976  6E2A               	movwf	??_turnRight^0,c
  9024   003978  6A2B               	clrf	(??_turnRight+1)^0,c
  9025   00397A  502A               	movf	??_turnRight^0,w,c
  9026   00397C  5C2D               	subwf	turnRight@i^0,w,c
  9027   00397E  502E               	movf	(turnRight@i+1)^0,w,c
  9028   003980  0A80               	xorlw	128
  9029   003982  6E2C               	movwf	(??_turnRight+2)^0,c
  9030   003984  502B               	movf	(??_turnRight+1)^0,w,c
  9031   003986  0A80               	xorlw	128
  9032   003988  582C               	subwfb	(??_turnRight+2)^0,w,c
  9033   00398A  A0D8               	btfss	status,0,c
  9034   00398C  EFCA  F01C         	goto	u1881
  9035   003990  EFCC  F01C         	goto	u1880
  9036   003994                     u1881:
  9037   003994  EFB0  F01C         	goto	l3157
  9038   003998                     u1880:
  9039   003998                     
  9040                           ;dc_motor.c: 439:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  9041   003998  C027  F02F         	movff	turnRight@turnSpeed,turnRight@cur_power
  9042   00399C  6A30               	clrf	(turnRight@cur_power+1)^0,c
  9043   00399E                     l3161:
  9044   00399E  BE30               	btfsc	(turnRight@cur_power+1)^0,7,c
  9045   0039A0  EFD6  F01C         	goto	u1890
  9046   0039A4  EFD4  F01C         	goto	u1891
  9047   0039A8                     u1891:
  9048   0039A8  EFD8  F01C         	goto	l3165
  9049   0039AC                     u1890:
  9050   0039AC  EF25  F01D         	goto	l661
  9051   0039B0                     l3165:
  9052                           
  9053                           ;dc_motor.c: 440:         mL->power = cur_power+mL->compensation;
  9054   0039B0  EE20 F009          	lfsr	2,9
  9055   0039B4  5023               	movf	turnRight@mL^0,w,c
  9056   0039B6  26D9               	addwf	fsr2l,f,c
  9057   0039B8  5024               	movf	(turnRight@mL+1)^0,w,c
  9058   0039BA  22DA               	addwfc	fsr2h,f,c
  9059   0039BC  50DF               	movf	indf2,w,c
  9060   0039BE  242F               	addwf	turnRight@cur_power^0,w,c
  9061   0039C0  C023  FFD9         	movff	turnRight@mL,fsr2l
  9062   0039C4  C024  FFDA         	movff	turnRight@mL+1,fsr2h
  9063   0039C8  6EDF               	movwf	indf2,c
  9064                           
  9065                           ;dc_motor.c: 441:         mR->power = cur_power+mR->compensation;
  9066   0039CA  EE20 F009          	lfsr	2,9
  9067   0039CE  5025               	movf	turnRight@mR^0,w,c
  9068   0039D0  26D9               	addwf	fsr2l,f,c
  9069   0039D2  5026               	movf	(turnRight@mR+1)^0,w,c
  9070   0039D4  22DA               	addwfc	fsr2h,f,c
  9071   0039D6  50DF               	movf	indf2,w,c
  9072   0039D8  242F               	addwf	turnRight@cur_power^0,w,c
  9073   0039DA  C025  FFD9         	movff	turnRight@mR,fsr2l
  9074   0039DE  C026  FFDA         	movff	turnRight@mR+1,fsr2h
  9075   0039E2  6EDF               	movwf	indf2,c
  9076   0039E4                     
  9077                           ;dc_motor.c: 442:         setMotorPWM(mL);
  9078   0039E4  C023  F01D         	movff	turnRight@mL,setMotorPWM@m
  9079   0039E8  C024  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  9080   0039EC  EC13  F01E         	call	_setMotorPWM	;wreg free
  9081   0039F0                     
  9082                           ;dc_motor.c: 443:         setMotorPWM(mR);
  9083   0039F0  C025  F01D         	movff	turnRight@mR,setMotorPWM@m
  9084   0039F4  C026  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  9085   0039F8  EC13  F01E         	call	_setMotorPWM	;wreg free
  9086   0039FC                     
  9087                           ;dc_motor.c: 444:         for (i=0;i<turnRamp;i++) {
  9088   0039FC  0E00               	movlw	0
  9089   0039FE  6E2E               	movwf	(turnRight@i+1)^0,c
  9090   003A00  0E00               	movlw	0
  9091   003A02  6E2D               	movwf	turnRight@i^0,c
  9092   003A04  EF0E  F01D         	goto	l658
  9093   003A08                     l3173:
  9094                           
  9095                           ;dc_motor.c: 445:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9096   003A08  0E68               	movlw	104
  9097   003A0A  6E2A               	movwf	??_turnRight^0,c
  9098   003A0C  0EE4               	movlw	228
  9099   003A0E                     u4287:
  9100   003A0E  2EE8               	decfsz	wreg,f,c
  9101   003A10  D7FE               	bra	u4287
  9102   003A12  2E2A               	decfsz	??_turnRight^0,f,c
  9103   003A14  D7FC               	bra	u4287
  9104   003A16  D000               	nop2	
  9105   003A18                     
  9106                           ;dc_motor.c: 446:         }
  9107   003A18  4A2D               	infsnz	turnRight@i^0,f,c
  9108   003A1A  2A2E               	incf	(turnRight@i+1)^0,f,c
  9109   003A1C                     l658:
  9110   003A1C  5029               	movf	turnRight@turnRamp^0,w,c
  9111   003A1E  6E2A               	movwf	??_turnRight^0,c
  9112   003A20  6A2B               	clrf	(??_turnRight+1)^0,c
  9113   003A22  502A               	movf	??_turnRight^0,w,c
  9114   003A24  5C2D               	subwf	turnRight@i^0,w,c
  9115   003A26  502E               	movf	(turnRight@i+1)^0,w,c
  9116   003A28  0A80               	xorlw	128
  9117   003A2A  6E2C               	movwf	(??_turnRight+2)^0,c
  9118   003A2C  502B               	movf	(??_turnRight+1)^0,w,c
  9119   003A2E  0A80               	xorlw	128
  9120   003A30  582C               	subwfb	(??_turnRight+2)^0,w,c
  9121   003A32  A0D8               	btfss	status,0,c
  9122   003A34  EF1E  F01D         	goto	u1901
  9123   003A38  EF20  F01D         	goto	u1900
  9124   003A3C                     u1901:
  9125   003A3C  EF04  F01D         	goto	l3173
  9126   003A40                     u1900:
  9127   003A40                     
  9128                           ;dc_motor.c: 447:     }
  9129   003A40  062F               	decf	turnRight@cur_power^0,f,c
  9130   003A42  A0D8               	btfss	status,0,c
  9131   003A44  0630               	decf	(turnRight@cur_power+1)^0,f,c
  9132   003A46  EFCF  F01C         	goto	l3161
  9133   003A4A                     l661:
  9134   003A4A  0012               	return		;funcret
  9135   003A4C                     __end_of_turnRight:
  9136                           	callstack 0
  9137                           
  9138 ;; *************** function _turnLeft *****************
  9139 ;; Defined at:
  9140 ;;		line 387 in file "dc_motor.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  9143 ;;		 -> main@motorL(10), 
  9144 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  9145 ;;		 -> main@motorR(10), 
  9146 ;;  turnSpeed       1   38[COMRAM] unsigned char 
  9147 ;;  turnDuration    1   39[COMRAM] unsigned char 
  9148 ;;  turnRamp        1   40[COMRAM] unsigned char 
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;  cur_power       2   46[COMRAM] int 
  9151 ;;  i               2   44[COMRAM] int 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9161 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9162 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9163 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9164 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9165 ;;Total ram usage:       14 bytes
  9166 ;; Hardware stack levels used: 1
  9167 ;; Hardware stack levels required when called: 7
  9168 ;; This function calls:
  9169 ;;		_setMotorPWM
  9170 ;; This function is called by:
  9171 ;;		_move
  9172 ;;		_returnHome
  9173 ;;		_lostReturnHome
  9174 ;;		_calibration
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	text33
  9179   003A4C                     __ptext33:
  9180                           	callstack 0
  9181   003A4C                     _turnLeft:
  9182                           	callstack 22
  9183   003A4C                     
  9184                           ;dc_motor.c: 387: void turnLeft(DC_motor *mL, DC_motor *mR, char turnSpeed, unsigned cha
      +                          r turnDuration, unsigned char turnRamp);dc_motor.c: 388: {;dc_motor.c: 389:     mL->dire
      +                          ction = 0;
  9185   003A4C  EE20 F001          	lfsr	2,1
  9186   003A50  5023               	movf	turnLeft@mL^0,w,c
  9187   003A52  26D9               	addwf	fsr2l,f,c
  9188   003A54  5024               	movf	(turnLeft@mL+1)^0,w,c
  9189   003A56  22DA               	addwfc	fsr2h,f,c
  9190   003A58  6ADF               	clrf	indf2,c
  9191                           
  9192                           ;dc_motor.c: 390:     mR->direction = 1;
  9193   003A5A  EE20 F001          	lfsr	2,1
  9194   003A5E  5025               	movf	turnLeft@mR^0,w,c
  9195   003A60  26D9               	addwf	fsr2l,f,c
  9196   003A62  5026               	movf	(turnLeft@mR+1)^0,w,c
  9197   003A64  22DA               	addwfc	fsr2h,f,c
  9198   003A66  0E01               	movlw	1
  9199   003A68  6EDF               	movwf	indf2,c
  9200   003A6A                     
  9201                           ;dc_motor.c: 391:     int i;;dc_motor.c: 392:     int cur_power;;dc_motor.c: 393:     fo
      +                          r (cur_power=1;cur_power<=turnSpeed;cur_power++) {
  9202   003A6A  0E00               	movlw	0
  9203   003A6C  6E30               	movwf	(turnLeft@cur_power+1)^0,c
  9204   003A6E  0E01               	movlw	1
  9205   003A70  6E2F               	movwf	turnLeft@cur_power^0,c
  9206   003A72  EF85  F01D         	goto	l3199
  9207   003A76                     l3185:
  9208                           
  9209                           ;dc_motor.c: 394:         mL->power = cur_power+mL->compensation;
  9210   003A76  EE20 F009          	lfsr	2,9
  9211   003A7A  5023               	movf	turnLeft@mL^0,w,c
  9212   003A7C  26D9               	addwf	fsr2l,f,c
  9213   003A7E  5024               	movf	(turnLeft@mL+1)^0,w,c
  9214   003A80  22DA               	addwfc	fsr2h,f,c
  9215   003A82  50DF               	movf	indf2,w,c
  9216   003A84  242F               	addwf	turnLeft@cur_power^0,w,c
  9217   003A86  C023  FFD9         	movff	turnLeft@mL,fsr2l
  9218   003A8A  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
  9219   003A8E  6EDF               	movwf	indf2,c
  9220                           
  9221                           ;dc_motor.c: 395:         mR->power = cur_power+mR->compensation;
  9222   003A90  EE20 F009          	lfsr	2,9
  9223   003A94  5025               	movf	turnLeft@mR^0,w,c
  9224   003A96  26D9               	addwf	fsr2l,f,c
  9225   003A98  5026               	movf	(turnLeft@mR+1)^0,w,c
  9226   003A9A  22DA               	addwfc	fsr2h,f,c
  9227   003A9C  50DF               	movf	indf2,w,c
  9228   003A9E  242F               	addwf	turnLeft@cur_power^0,w,c
  9229   003AA0  C025  FFD9         	movff	turnLeft@mR,fsr2l
  9230   003AA4  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
  9231   003AA8  6EDF               	movwf	indf2,c
  9232   003AAA                     
  9233                           ;dc_motor.c: 396:         setMotorPWM(mL);
  9234   003AAA  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
  9235   003AAE  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  9236   003AB2  EC13  F01E         	call	_setMotorPWM	;wreg free
  9237   003AB6                     
  9238                           ;dc_motor.c: 397:         setMotorPWM(mR);
  9239   003AB6  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
  9240   003ABA  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  9241   003ABE  EC13  F01E         	call	_setMotorPWM	;wreg free
  9242   003AC2                     
  9243                           ;dc_motor.c: 398:         for (i=0;i<turnRamp;i++) {
  9244   003AC2  0E00               	movlw	0
  9245   003AC4  6E2E               	movwf	(turnLeft@i+1)^0,c
  9246   003AC6  0E00               	movlw	0
  9247   003AC8  6E2D               	movwf	turnLeft@i^0,c
  9248   003ACA  EF71  F01D         	goto	l632
  9249   003ACE                     l3193:
  9250                           
  9251                           ;dc_motor.c: 399:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9252   003ACE  0E68               	movlw	104
  9253   003AD0  6E2A               	movwf	??_turnLeft^0,c
  9254   003AD2  0EE4               	movlw	228
  9255   003AD4                     u4297:
  9256   003AD4  2EE8               	decfsz	wreg,f,c
  9257   003AD6  D7FE               	bra	u4297
  9258   003AD8  2E2A               	decfsz	??_turnLeft^0,f,c
  9259   003ADA  D7FC               	bra	u4297
  9260   003ADC  D000               	nop2	
  9261   003ADE                     
  9262                           ;dc_motor.c: 400:         }
  9263   003ADE  4A2D               	infsnz	turnLeft@i^0,f,c
  9264   003AE0  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9265   003AE2                     l632:
  9266   003AE2  5029               	movf	turnLeft@turnRamp^0,w,c
  9267   003AE4  6E2A               	movwf	??_turnLeft^0,c
  9268   003AE6  6A2B               	clrf	(??_turnLeft+1)^0,c
  9269   003AE8  502A               	movf	??_turnLeft^0,w,c
  9270   003AEA  5C2D               	subwf	turnLeft@i^0,w,c
  9271   003AEC  502E               	movf	(turnLeft@i+1)^0,w,c
  9272   003AEE  0A80               	xorlw	128
  9273   003AF0  6E2C               	movwf	(??_turnLeft+2)^0,c
  9274   003AF2  502B               	movf	(??_turnLeft+1)^0,w,c
  9275   003AF4  0A80               	xorlw	128
  9276   003AF6  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9277   003AF8  A0D8               	btfss	status,0,c
  9278   003AFA  EF81  F01D         	goto	u1911
  9279   003AFE  EF83  F01D         	goto	u1910
  9280   003B02                     u1911:
  9281   003B02  EF67  F01D         	goto	l3193
  9282   003B06                     u1910:
  9283   003B06                     
  9284                           ;dc_motor.c: 401:     }
  9285   003B06  4A2F               	infsnz	turnLeft@cur_power^0,f,c
  9286   003B08  2A30               	incf	(turnLeft@cur_power+1)^0,f,c
  9287   003B0A                     l3199:
  9288   003B0A  5027               	movf	turnLeft@turnSpeed^0,w,c
  9289   003B0C  6E2A               	movwf	??_turnLeft^0,c
  9290   003B0E  6A2B               	clrf	(??_turnLeft+1)^0,c
  9291   003B10  502F               	movf	turnLeft@cur_power^0,w,c
  9292   003B12  5C2A               	subwf	??_turnLeft^0,w,c
  9293   003B14  502B               	movf	(??_turnLeft+1)^0,w,c
  9294   003B16  0A80               	xorlw	128
  9295   003B18  6E2C               	movwf	(??_turnLeft+2)^0,c
  9296   003B1A  5030               	movf	(turnLeft@cur_power+1)^0,w,c
  9297   003B1C  0A80               	xorlw	128
  9298   003B1E  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9299   003B20  B0D8               	btfsc	status,0,c
  9300   003B22  EF95  F01D         	goto	u1921
  9301   003B26  EF97  F01D         	goto	u1920
  9302   003B2A                     u1921:
  9303   003B2A  EF3B  F01D         	goto	l3185
  9304   003B2E                     u1920:
  9305   003B2E                     
  9306                           ;dc_motor.c: 403:     for (i=0;i<turnDuration;i++) {
  9307   003B2E  0E00               	movlw	0
  9308   003B30  6E2E               	movwf	(turnLeft@i+1)^0,c
  9309   003B32  0E00               	movlw	0
  9310   003B34  6E2D               	movwf	turnLeft@i^0,c
  9311   003B36  EFA7  F01D         	goto	l636
  9312   003B3A                     l3203:
  9313                           
  9314                           ;dc_motor.c: 404:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9315   003B3A  0E68               	movlw	104
  9316   003B3C  6E2A               	movwf	??_turnLeft^0,c
  9317   003B3E  0EE4               	movlw	228
  9318   003B40                     u4307:
  9319   003B40  2EE8               	decfsz	wreg,f,c
  9320   003B42  D7FE               	bra	u4307
  9321   003B44  2E2A               	decfsz	??_turnLeft^0,f,c
  9322   003B46  D7FC               	bra	u4307
  9323   003B48  D000               	nop2	
  9324   003B4A                     
  9325                           ;dc_motor.c: 405:         }
  9326   003B4A  4A2D               	infsnz	turnLeft@i^0,f,c
  9327   003B4C  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9328   003B4E                     l636:
  9329   003B4E  5028               	movf	turnLeft@turnDuration^0,w,c
  9330   003B50  6E2A               	movwf	??_turnLeft^0,c
  9331   003B52  6A2B               	clrf	(??_turnLeft+1)^0,c
  9332   003B54  502A               	movf	??_turnLeft^0,w,c
  9333   003B56  5C2D               	subwf	turnLeft@i^0,w,c
  9334   003B58  502E               	movf	(turnLeft@i+1)^0,w,c
  9335   003B5A  0A80               	xorlw	128
  9336   003B5C  6E2C               	movwf	(??_turnLeft+2)^0,c
  9337   003B5E  502B               	movf	(??_turnLeft+1)^0,w,c
  9338   003B60  0A80               	xorlw	128
  9339   003B62  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9340   003B64  A0D8               	btfss	status,0,c
  9341   003B66  EFB7  F01D         	goto	u1931
  9342   003B6A  EFB9  F01D         	goto	u1930
  9343   003B6E                     u1931:
  9344   003B6E  EF9D  F01D         	goto	l3203
  9345   003B72                     u1930:
  9346   003B72                     
  9347                           ;dc_motor.c: 407:     for (cur_power=turnSpeed;cur_power>=0;cur_power--) {
  9348   003B72  C027  F02F         	movff	turnLeft@turnSpeed,turnLeft@cur_power
  9349   003B76  6A30               	clrf	(turnLeft@cur_power+1)^0,c
  9350   003B78                     l3207:
  9351   003B78  BE30               	btfsc	(turnLeft@cur_power+1)^0,7,c
  9352   003B7A  EFC3  F01D         	goto	u1940
  9353   003B7E  EFC1  F01D         	goto	u1941
  9354   003B82                     u1941:
  9355   003B82  EFC5  F01D         	goto	l3211
  9356   003B86                     u1940:
  9357   003B86  EF12  F01E         	goto	l644
  9358   003B8A                     l3211:
  9359                           
  9360                           ;dc_motor.c: 408:         mL->power = cur_power+mL->compensation;
  9361   003B8A  EE20 F009          	lfsr	2,9
  9362   003B8E  5023               	movf	turnLeft@mL^0,w,c
  9363   003B90  26D9               	addwf	fsr2l,f,c
  9364   003B92  5024               	movf	(turnLeft@mL+1)^0,w,c
  9365   003B94  22DA               	addwfc	fsr2h,f,c
  9366   003B96  50DF               	movf	indf2,w,c
  9367   003B98  242F               	addwf	turnLeft@cur_power^0,w,c
  9368   003B9A  C023  FFD9         	movff	turnLeft@mL,fsr2l
  9369   003B9E  C024  FFDA         	movff	turnLeft@mL+1,fsr2h
  9370   003BA2  6EDF               	movwf	indf2,c
  9371                           
  9372                           ;dc_motor.c: 409:         mR->power = cur_power+mR->compensation;
  9373   003BA4  EE20 F009          	lfsr	2,9
  9374   003BA8  5025               	movf	turnLeft@mR^0,w,c
  9375   003BAA  26D9               	addwf	fsr2l,f,c
  9376   003BAC  5026               	movf	(turnLeft@mR+1)^0,w,c
  9377   003BAE  22DA               	addwfc	fsr2h,f,c
  9378   003BB0  50DF               	movf	indf2,w,c
  9379   003BB2  242F               	addwf	turnLeft@cur_power^0,w,c
  9380   003BB4  C025  FFD9         	movff	turnLeft@mR,fsr2l
  9381   003BB8  C026  FFDA         	movff	turnLeft@mR+1,fsr2h
  9382   003BBC  6EDF               	movwf	indf2,c
  9383   003BBE                     
  9384                           ;dc_motor.c: 410:         setMotorPWM(mL);
  9385   003BBE  C023  F01D         	movff	turnLeft@mL,setMotorPWM@m
  9386   003BC2  C024  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  9387   003BC6  EC13  F01E         	call	_setMotorPWM	;wreg free
  9388   003BCA                     
  9389                           ;dc_motor.c: 411:         setMotorPWM(mR);
  9390   003BCA  C025  F01D         	movff	turnLeft@mR,setMotorPWM@m
  9391   003BCE  C026  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  9392   003BD2  EC13  F01E         	call	_setMotorPWM	;wreg free
  9393   003BD6                     
  9394                           ;dc_motor.c: 412:         for (i=0;i<turnRamp;i++) {
  9395   003BD6  0E00               	movlw	0
  9396   003BD8  6E2E               	movwf	(turnLeft@i+1)^0,c
  9397   003BDA  0E00               	movlw	0
  9398   003BDC  6E2D               	movwf	turnLeft@i^0,c
  9399   003BDE  EFFB  F01D         	goto	l641
  9400   003BE2                     l3219:
  9401                           
  9402                           ;dc_motor.c: 413:             _delay((unsigned long)((5)*(64000000/4000.0)));
  9403   003BE2  0E68               	movlw	104
  9404   003BE4  6E2A               	movwf	??_turnLeft^0,c
  9405   003BE6  0EE4               	movlw	228
  9406   003BE8                     u4317:
  9407   003BE8  2EE8               	decfsz	wreg,f,c
  9408   003BEA  D7FE               	bra	u4317
  9409   003BEC  2E2A               	decfsz	??_turnLeft^0,f,c
  9410   003BEE  D7FC               	bra	u4317
  9411   003BF0  D000               	nop2	
  9412   003BF2                     
  9413                           ;dc_motor.c: 414:         }
  9414   003BF2  4A2D               	infsnz	turnLeft@i^0,f,c
  9415   003BF4  2A2E               	incf	(turnLeft@i+1)^0,f,c
  9416   003BF6                     l641:
  9417   003BF6  5029               	movf	turnLeft@turnRamp^0,w,c
  9418   003BF8  6E2A               	movwf	??_turnLeft^0,c
  9419   003BFA  6A2B               	clrf	(??_turnLeft+1)^0,c
  9420   003BFC  502A               	movf	??_turnLeft^0,w,c
  9421   003BFE  5C2D               	subwf	turnLeft@i^0,w,c
  9422   003C00  502E               	movf	(turnLeft@i+1)^0,w,c
  9423   003C02  0A80               	xorlw	128
  9424   003C04  6E2C               	movwf	(??_turnLeft+2)^0,c
  9425   003C06  502B               	movf	(??_turnLeft+1)^0,w,c
  9426   003C08  0A80               	xorlw	128
  9427   003C0A  582C               	subwfb	(??_turnLeft+2)^0,w,c
  9428   003C0C  A0D8               	btfss	status,0,c
  9429   003C0E  EF0B  F01E         	goto	u1951
  9430   003C12  EF0D  F01E         	goto	u1950
  9431   003C16                     u1951:
  9432   003C16  EFF1  F01D         	goto	l3219
  9433   003C1A                     u1950:
  9434   003C1A                     
  9435                           ;dc_motor.c: 415:     }
  9436   003C1A  062F               	decf	turnLeft@cur_power^0,f,c
  9437   003C1C  A0D8               	btfss	status,0,c
  9438   003C1E  0630               	decf	(turnLeft@cur_power+1)^0,f,c
  9439   003C20  EFBC  F01D         	goto	l3207
  9440   003C24                     l644:
  9441   003C24  0012               	return		;funcret
  9442   003C26                     __end_of_turnLeft:
  9443                           	callstack 0
  9444                           
  9445 ;; *************** function _setMotorPWM *****************
  9446 ;; Defined at:
  9447 ;;		line 68 in file "dc_motor.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  m               2   28[COMRAM] PTR struct DC_motor
  9450 ;;		 -> main@motorR(10), main@motorL(10), 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  negDuty         1   33[COMRAM] unsigned char 
  9453 ;;  posDuty         1   32[COMRAM] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  1    wreg      void 
  9456 ;; Registers used:
  9457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9467 ;;Total ram usage:        6 bytes
  9468 ;; Hardware stack levels used: 1
  9469 ;; Hardware stack levels required when called: 6
  9470 ;; This function calls:
  9471 ;;		___lwdiv
  9472 ;;		___wmul
  9473 ;; This function is called by:
  9474 ;;		_stop
  9475 ;;		_turnLeft
  9476 ;;		_turnRight
  9477 ;;		_fullSpeedAhead
  9478 ;;		_reverseOneSquare
  9479 ;;		_wallAdjust
  9480 ;;		_reverseShort
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text34
  9485   003C26                     __ptext34:
  9486                           	callstack 0
  9487   003C26                     _setMotorPWM:
  9488                           	callstack 23
  9489   003C26                     
  9490                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  9491   003C26  EE20 F002          	lfsr	2,2
  9492   003C2A  501D               	movf	setMotorPWM@m^0,w,c
  9493   003C2C  26D9               	addwf	fsr2l,f,c
  9494   003C2E  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9495   003C30  22DA               	addwfc	fsr2h,f,c
  9496   003C32  50DF               	movf	indf2,w,c
  9497   003C34  B4D8               	btfsc	status,2,c
  9498   003C36  EF1F  F01E         	goto	u1781
  9499   003C3A  EF21  F01E         	goto	u1780
  9500   003C3E                     u1781:
  9501   003C3E  EF55  F01E         	goto	l3065
  9502   003C42                     u1780:
  9503   003C42                     
  9504                           ;dc_motor.c: 73:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  9505   003C42  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  9506   003C46  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  9507   003C4A  50DF               	movf	indf2,w,c
  9508   003C4C  6E1F               	movwf	??_setMotorPWM^0,c
  9509   003C4E  501F               	movf	??_setMotorPWM^0,w,c
  9510   003C50  6E10               	movwf	___wmul@multiplier^0,c
  9511   003C52  6A11               	clrf	(___wmul@multiplier+1)^0,c
  9512   003C54  EE20 F003          	lfsr	2,3
  9513   003C58  501D               	movf	setMotorPWM@m^0,w,c
  9514   003C5A  26D9               	addwf	fsr2l,f,c
  9515   003C5C  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9516   003C5E  22DA               	addwfc	fsr2h,f,c
  9517   003C60  CFDE F012          	movff	postinc2,___wmul@multiplicand
  9518   003C64  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  9519   003C68  ECB5  F023         	call	___wmul	;wreg free
  9520   003C6C  C010  F016         	movff	?___wmul,___lwdiv@dividend
  9521   003C70  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
  9522   003C74  0E00               	movlw	0
  9523   003C76  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  9524   003C78  0E64               	movlw	100
  9525   003C7A  6E18               	movwf	___lwdiv@divisor^0,c
  9526   003C7C  ECE8  F021         	call	___lwdiv	;wreg free
  9527   003C80  EE20 F003          	lfsr	2,3
  9528   003C84  501D               	movf	setMotorPWM@m^0,w,c
  9529   003C86  26D9               	addwf	fsr2l,f,c
  9530   003C88  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9531   003C8A  22DA               	addwfc	fsr2h,f,c
  9532   003C8C  50DF               	movf	indf2,w,c
  9533   003C8E  6E20               	movwf	(??_setMotorPWM+1)^0,c
  9534   003C90  5016               	movf	?___lwdiv^0,w,c
  9535   003C92  5C20               	subwf	(??_setMotorPWM+1)^0,w,c
  9536   003C94  6E21               	movwf	setMotorPWM@posDuty^0,c
  9537   003C96                     
  9538                           ;dc_motor.c: 74:         negDuty=m->PWMperiod;
  9539   003C96  EE20 F003          	lfsr	2,3
  9540   003C9A  501D               	movf	setMotorPWM@m^0,w,c
  9541   003C9C  26D9               	addwf	fsr2l,f,c
  9542   003C9E  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9543   003CA0  22DA               	addwfc	fsr2h,f,c
  9544   003CA2  50DF               	movf	indf2,w,c
  9545   003CA4  6E22               	movwf	setMotorPWM@negDuty^0,c
  9546                           
  9547                           ;dc_motor.c: 75:     }
  9548   003CA6  EF78  F01E         	goto	l3069
  9549   003CAA                     l3065:
  9550                           
  9551                           ;dc_motor.c: 77:         posDuty=0;
  9552   003CAA  0E00               	movlw	0
  9553   003CAC  6E21               	movwf	setMotorPWM@posDuty^0,c
  9554   003CAE                     
  9555                           ;dc_motor.c: 78:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  9556   003CAE  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  9557   003CB2  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  9558   003CB6  50DF               	movf	indf2,w,c
  9559   003CB8  6E1F               	movwf	??_setMotorPWM^0,c
  9560   003CBA  501F               	movf	??_setMotorPWM^0,w,c
  9561   003CBC  6E10               	movwf	___wmul@multiplier^0,c
  9562   003CBE  6A11               	clrf	(___wmul@multiplier+1)^0,c
  9563   003CC0  EE20 F003          	lfsr	2,3
  9564   003CC4  501D               	movf	setMotorPWM@m^0,w,c
  9565   003CC6  26D9               	addwf	fsr2l,f,c
  9566   003CC8  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9567   003CCA  22DA               	addwfc	fsr2h,f,c
  9568   003CCC  CFDE F012          	movff	postinc2,___wmul@multiplicand
  9569   003CD0  CFDD F013          	movff	postdec2,___wmul@multiplicand+1
  9570   003CD4  ECB5  F023         	call	___wmul	;wreg free
  9571   003CD8  C010  F016         	movff	?___wmul,___lwdiv@dividend
  9572   003CDC  C011  F017         	movff	?___wmul+1,___lwdiv@dividend+1
  9573   003CE0  0E00               	movlw	0
  9574   003CE2  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  9575   003CE4  0E64               	movlw	100
  9576   003CE6  6E18               	movwf	___lwdiv@divisor^0,c
  9577   003CE8  ECE8  F021         	call	___lwdiv	;wreg free
  9578   003CEC  5016               	movf	?___lwdiv^0,w,c
  9579   003CEE  6E22               	movwf	setMotorPWM@negDuty^0,c
  9580   003CF0                     l3069:
  9581                           
  9582                           ;dc_motor.c: 81:     if (m->direction) {
  9583   003CF0  EE20 F001          	lfsr	2,1
  9584   003CF4  501D               	movf	setMotorPWM@m^0,w,c
  9585   003CF6  26D9               	addwf	fsr2l,f,c
  9586   003CF8  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9587   003CFA  22DA               	addwfc	fsr2h,f,c
  9588   003CFC  50DF               	movf	indf2,w,c
  9589   003CFE  B4D8               	btfsc	status,2,c
  9590   003D00  EF84  F01E         	goto	u1791
  9591   003D04  EF86  F01E         	goto	u1790
  9592   003D08                     u1791:
  9593   003D08  EFA8  F01E         	goto	l3073
  9594   003D0C                     u1790:
  9595   003D0C                     
  9596                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  9597   003D0C  EE20 F005          	lfsr	2,5
  9598   003D10  501D               	movf	setMotorPWM@m^0,w,c
  9599   003D12  26D9               	addwf	fsr2l,f,c
  9600   003D14  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9601   003D16  22DA               	addwfc	fsr2h,f,c
  9602   003D18  CFDE F01F          	movff	postinc2,??_setMotorPWM
  9603   003D1C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  9604   003D20  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  9605   003D24  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9606   003D28  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
  9607                           
  9608                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  9609   003D2C  EE20 F007          	lfsr	2,7
  9610   003D30  501D               	movf	setMotorPWM@m^0,w,c
  9611   003D32  26D9               	addwf	fsr2l,f,c
  9612   003D34  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9613   003D36  22DA               	addwfc	fsr2h,f,c
  9614   003D38  CFDE F01F          	movff	postinc2,??_setMotorPWM
  9615   003D3C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  9616   003D40  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  9617   003D44  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9618   003D48  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
  9619                           
  9620                           ;dc_motor.c: 84:     } else {
  9621   003D4C  EFC8  F01E         	goto	l550
  9622   003D50                     l3073:
  9623                           
  9624                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  9625   003D50  EE20 F005          	lfsr	2,5
  9626   003D54  501D               	movf	setMotorPWM@m^0,w,c
  9627   003D56  26D9               	addwf	fsr2l,f,c
  9628   003D58  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9629   003D5A  22DA               	addwfc	fsr2h,f,c
  9630   003D5C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  9631   003D60  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  9632   003D64  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  9633   003D68  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9634   003D6C  C022  FFDF         	movff	setMotorPWM@negDuty,indf2
  9635                           
  9636                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  9637   003D70  EE20 F007          	lfsr	2,7
  9638   003D74  501D               	movf	setMotorPWM@m^0,w,c
  9639   003D76  26D9               	addwf	fsr2l,f,c
  9640   003D78  501E               	movf	(setMotorPWM@m+1)^0,w,c
  9641   003D7A  22DA               	addwfc	fsr2h,f,c
  9642   003D7C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  9643   003D80  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  9644   003D84  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  9645   003D88  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9646   003D8C  C021  FFDF         	movff	setMotorPWM@posDuty,indf2
  9647   003D90                     l550:
  9648   003D90  0012               	return		;funcret
  9649   003D92                     __end_of_setMotorPWM:
  9650                           	callstack 0
  9651                           
  9652 ;; *************** function ___wmul *****************
  9653 ;; Defined at:
  9654 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;  multiplier      2   15[COMRAM] unsigned int 
  9657 ;;  multiplicand    2   17[COMRAM] unsigned int 
  9658 ;; Auto vars:     Size  Location     Type
  9659 ;;  product         2   19[COMRAM] unsigned int 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;                  2   15[COMRAM] unsigned int 
  9662 ;; Registers used:
  9663 ;;		wreg, status,2, status,0, prodl, prodh
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9673 ;;Total ram usage:        6 bytes
  9674 ;; Hardware stack levels used: 1
  9675 ;; Hardware stack levels required when called: 5
  9676 ;; This function calls:
  9677 ;;		Nothing
  9678 ;; This function is called by:
  9679 ;;		_setMotorPWM
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           	psect	text35
  9684   00476A                     __ptext35:
  9685                           	callstack 0
  9686   00476A                     ___wmul:
  9687                           	callstack 23
  9688   00476A  5010               	movf	___wmul@multiplier^0,w,c
  9689   00476C  0212               	mulwf	___wmul@multiplicand^0,c
  9690   00476E  CFF3 F014          	movff	prodl,___wmul@product
  9691   004772  CFF4 F015          	movff	prodh,___wmul@product+1
  9692   004776  5010               	movf	___wmul@multiplier^0,w,c
  9693   004778  0213               	mulwf	(___wmul@multiplicand+1)^0,c
  9694   00477A  50F3               	movf	243,w,c
  9695   00477C  2615               	addwf	(___wmul@product+1)^0,f,c
  9696   00477E  5011               	movf	(___wmul@multiplier+1)^0,w,c
  9697   004780  0212               	mulwf	___wmul@multiplicand^0,c
  9698   004782  50F3               	movf	243,w,c
  9699   004784  2615               	addwf	(___wmul@product+1)^0,f,c
  9700   004786  C014  F010         	movff	___wmul@product,?___wmul
  9701   00478A  C015  F011         	movff	___wmul@product+1,?___wmul+1
  9702   00478E  0012               	return		;funcret
  9703   004790                     __end_of___wmul:
  9704                           	callstack 0
  9705                           
  9706 ;; *************** function ___lwdiv *****************
  9707 ;; Defined at:
  9708 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  dividend        2   21[COMRAM] unsigned int 
  9711 ;;  divisor         2   23[COMRAM] unsigned int 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;  quotient        2   25[COMRAM] unsigned int 
  9714 ;;  counter         1   27[COMRAM] unsigned char 
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  2   21[COMRAM] unsigned int 
  9717 ;; Registers used:
  9718 ;;		wreg, status,2, status,0
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9725 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9727 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9728 ;;Total ram usage:        7 bytes
  9729 ;; Hardware stack levels used: 1
  9730 ;; Hardware stack levels required when called: 5
  9731 ;; This function calls:
  9732 ;;		Nothing
  9733 ;; This function is called by:
  9734 ;;		_color_clear_init_interrupts
  9735 ;;		_setMotorPWM
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	text36
  9740   0043D0                     __ptext36:
  9741                           	callstack 0
  9742   0043D0                     ___lwdiv:
  9743                           	callstack 23
  9744   0043D0  0E00               	movlw	0
  9745   0043D2  6E1B               	movwf	(___lwdiv@quotient+1)^0,c
  9746   0043D4  0E00               	movlw	0
  9747   0043D6  6E1A               	movwf	___lwdiv@quotient^0,c
  9748   0043D8  5018               	movf	___lwdiv@divisor^0,w,c
  9749   0043DA  1019               	iorwf	(___lwdiv@divisor+1)^0,w,c
  9750   0043DC  B4D8               	btfsc	status,2,c
  9751   0043DE  EFF3  F021         	goto	u1751
  9752   0043E2  EFF5  F021         	goto	u1750
  9753   0043E6                     u1751:
  9754   0043E6  EF1D  F022         	goto	l1261
  9755   0043EA                     u1750:
  9756   0043EA  0E01               	movlw	1
  9757   0043EC  6E1C               	movwf	___lwdiv@counter^0,c
  9758   0043EE  EFFD  F021         	goto	l3033
  9759   0043F2                     l3031:
  9760   0043F2  90D8               	bcf	status,0,c
  9761   0043F4  3618               	rlcf	___lwdiv@divisor^0,f,c
  9762   0043F6  3619               	rlcf	(___lwdiv@divisor+1)^0,f,c
  9763   0043F8  2A1C               	incf	___lwdiv@counter^0,f,c
  9764   0043FA                     l3033:
  9765   0043FA  AE19               	btfss	(___lwdiv@divisor+1)^0,7,c
  9766   0043FC  EF02  F022         	goto	u1761
  9767   004400  EF04  F022         	goto	u1760
  9768   004404                     u1761:
  9769   004404  EFF9  F021         	goto	l3031
  9770   004408                     u1760:
  9771   004408                     l3035:
  9772   004408  90D8               	bcf	status,0,c
  9773   00440A  361A               	rlcf	___lwdiv@quotient^0,f,c
  9774   00440C  361B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  9775   00440E  5018               	movf	___lwdiv@divisor^0,w,c
  9776   004410  5C16               	subwf	___lwdiv@dividend^0,w,c
  9777   004412  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  9778   004414  5817               	subwfb	(___lwdiv@dividend+1)^0,w,c
  9779   004416  A0D8               	btfss	status,0,c
  9780   004418  EF10  F022         	goto	u1771
  9781   00441C  EF12  F022         	goto	u1770
  9782   004420                     u1771:
  9783   004420  EF17  F022         	goto	l3043
  9784   004424                     u1770:
  9785   004424  5018               	movf	___lwdiv@divisor^0,w,c
  9786   004426  5E16               	subwf	___lwdiv@dividend^0,f,c
  9787   004428  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  9788   00442A  5A17               	subwfb	(___lwdiv@dividend+1)^0,f,c
  9789   00442C  801A               	bsf	___lwdiv@quotient^0,0,c
  9790   00442E                     l3043:
  9791   00442E  90D8               	bcf	status,0,c
  9792   004430  3219               	rrcf	(___lwdiv@divisor+1)^0,f,c
  9793   004432  3218               	rrcf	___lwdiv@divisor^0,f,c
  9794   004434  2E1C               	decfsz	___lwdiv@counter^0,f,c
  9795   004436  EF04  F022         	goto	l3035
  9796   00443A                     l1261:
  9797   00443A  C01A  F016         	movff	___lwdiv@quotient,?___lwdiv
  9798   00443E  C01B  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9799   004442  0012               	return		;funcret
  9800   004444                     __end_of___lwdiv:
  9801                           	callstack 0
  9802                           
  9803 ;; *************** function _batteryLevel *****************
  9804 ;; Defined at:
  9805 ;;		line 6 in file "battery.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  batteryQuart    1   24[COMRAM] unsigned char 
  9810 ;;  batteryVolta    1   23[COMRAM] unsigned char 
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  1    wreg      void 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0, cstack
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9824 ;;Total ram usage:        2 bytes
  9825 ;; Hardware stack levels used: 1
  9826 ;; Hardware stack levels required when called: 6
  9827 ;; This function calls:
  9828 ;;		_ADC_getval
  9829 ;;		_ADC_init
  9830 ;;		___awdiv
  9831 ;; This function is called by:
  9832 ;;		_main
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           	psect	text37
  9837   004572                     __ptext37:
  9838                           	callstack 0
  9839   004572                     _batteryLevel:
  9840                           	callstack 24
  9841   004572                     
  9842                           ;battery.c: 7:     ADC_init();
  9843   004572  EC3F  F024         	call	_ADC_init	;wreg free
  9844                           
  9845                           ;battery.c: 8:     unsigned char batteryVoltage;;battery.c: 9:     unsigned char battery
      +                          Quarter;;battery.c: 11:     batteryVoltage = ADC_getval();
  9846   004576  EC4C  F024         	call	_ADC_getval	;wreg free
  9847   00457A  6E18               	movwf	batteryLevel@batteryVoltage^0,c
  9848   00457C                     
  9849                           ;battery.c: 12:     batteryQuarter = batteryVoltage/24;
  9850   00457C  C018  F010         	movff	batteryLevel@batteryVoltage,___awdiv@dividend
  9851   004580  6A11               	clrf	(___awdiv@dividend+1)^0,c
  9852   004582  0E00               	movlw	0
  9853   004584  6E13               	movwf	(___awdiv@divisor+1)^0,c
  9854   004586  0E18               	movlw	24
  9855   004588  6E12               	movwf	___awdiv@divisor^0,c
  9856   00458A  EC46  F020         	call	___awdiv	;wreg free
  9857   00458E  5010               	movf	?___awdiv^0,w,c
  9858   004590  6E19               	movwf	batteryLevel@batteryQuarter^0,c
  9859   004592                     
  9860                           ;battery.c: 13:     if (batteryQuarter & 0b10) {LATDbits.LATD7=1;} else {LATDbits.LATD7=
      +                          0;}
  9861   004592  A219               	btfss	batteryLevel@batteryQuarter^0,1,c
  9862   004594  EFCE  F022         	goto	u2411
  9863   004598  EFD0  F022         	goto	u2410
  9864   00459C                     u2411:
  9865   00459C  EFD3  F022         	goto	l462
  9866   0045A0                     u2410:
  9867   0045A0  8E7C               	bsf	124,7,c	;volatile
  9868   0045A2  EFD4  F022         	goto	l463
  9869   0045A6                     l462:
  9870   0045A6  9E7C               	bcf	124,7,c	;volatile
  9871   0045A8                     l463:
  9872                           
  9873                           ;battery.c: 14:     if (batteryQuarter & 0b01) {LATHbits.LATH3=1;} else {LATHbits.LATH3=
      +                          0;}
  9874   0045A8  A019               	btfss	batteryLevel@batteryQuarter^0,0,c
  9875   0045AA  EFD9  F022         	goto	u2421
  9876   0045AE  EFDB  F022         	goto	u2420
  9877   0045B2                     u2421:
  9878   0045B2  EFDE  F022         	goto	l464
  9879   0045B6                     u2420:
  9880   0045B6  8680               	bsf	128,3,c	;volatile
  9881   0045B8  EFDF  F022         	goto	l466
  9882   0045BC                     l464:
  9883   0045BC  9680               	bcf	128,3,c	;volatile
  9884   0045BE                     l466:
  9885   0045BE  0012               	return		;funcret
  9886   0045C0                     __end_of_batteryLevel:
  9887                           	callstack 0
  9888                           
  9889 ;; *************** function ___awdiv *****************
  9890 ;; Defined at:
  9891 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  dividend        2   15[COMRAM] int 
  9894 ;;  divisor         2   17[COMRAM] int 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  quotient        2   21[COMRAM] int 
  9897 ;;  sign            1   20[COMRAM] unsigned char 
  9898 ;;  counter         1   19[COMRAM] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  2   15[COMRAM] int 
  9901 ;; Registers used:
  9902 ;;		wreg, status,2, status,0
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9909 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9911 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9912 ;;Total ram usage:        8 bytes
  9913 ;; Hardware stack levels used: 1
  9914 ;; Hardware stack levels required when called: 5
  9915 ;; This function calls:
  9916 ;;		Nothing
  9917 ;; This function is called by:
  9918 ;;		_batteryLevel
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text38
  9923   00408C                     __ptext38:
  9924                           	callstack 0
  9925   00408C                     ___awdiv:
  9926                           	callstack 24
  9927   00408C  0E00               	movlw	0
  9928   00408E  6E15               	movwf	___awdiv@sign^0,c
  9929   004090  BE13               	btfsc	(___awdiv@divisor+1)^0,7,c
  9930   004092  EF4F  F020         	goto	u2320
  9931   004096  EF4D  F020         	goto	u2321
  9932   00409A                     u2321:
  9933   00409A  EF55  F020         	goto	l3603
  9934   00409E                     u2320:
  9935   00409E  6C12               	negf	___awdiv@divisor^0,c
  9936   0040A0  1E13               	comf	(___awdiv@divisor+1)^0,f,c
  9937   0040A2  B0D8               	btfsc	status,0,c
  9938   0040A4  2A13               	incf	(___awdiv@divisor+1)^0,f,c
  9939   0040A6  0E01               	movlw	1
  9940   0040A8  6E15               	movwf	___awdiv@sign^0,c
  9941   0040AA                     l3603:
  9942   0040AA  BE11               	btfsc	(___awdiv@dividend+1)^0,7,c
  9943   0040AC  EF5C  F020         	goto	u2330
  9944   0040B0  EF5A  F020         	goto	u2331
  9945   0040B4                     u2331:
  9946   0040B4  EF62  F020         	goto	l3609
  9947   0040B8                     u2330:
  9948   0040B8  6C10               	negf	___awdiv@dividend^0,c
  9949   0040BA  1E11               	comf	(___awdiv@dividend+1)^0,f,c
  9950   0040BC  B0D8               	btfsc	status,0,c
  9951   0040BE  2A11               	incf	(___awdiv@dividend+1)^0,f,c
  9952   0040C0  0E01               	movlw	1
  9953   0040C2  1A15               	xorwf	___awdiv@sign^0,f,c
  9954   0040C4                     l3609:
  9955   0040C4  0E00               	movlw	0
  9956   0040C6  6E17               	movwf	(___awdiv@quotient+1)^0,c
  9957   0040C8  0E00               	movlw	0
  9958   0040CA  6E16               	movwf	___awdiv@quotient^0,c
  9959   0040CC  5012               	movf	___awdiv@divisor^0,w,c
  9960   0040CE  1013               	iorwf	(___awdiv@divisor+1)^0,w,c
  9961   0040D0  B4D8               	btfsc	status,2,c
  9962   0040D2  EF6D  F020         	goto	u2341
  9963   0040D6  EF6F  F020         	goto	u2340
  9964   0040DA                     u2341:
  9965   0040DA  EF97  F020         	goto	l3631
  9966   0040DE                     u2340:
  9967   0040DE  0E01               	movlw	1
  9968   0040E0  6E14               	movwf	___awdiv@counter^0,c
  9969   0040E2  EF77  F020         	goto	l3617
  9970   0040E6                     l3615:
  9971   0040E6  90D8               	bcf	status,0,c
  9972   0040E8  3612               	rlcf	___awdiv@divisor^0,f,c
  9973   0040EA  3613               	rlcf	(___awdiv@divisor+1)^0,f,c
  9974   0040EC  2A14               	incf	___awdiv@counter^0,f,c
  9975   0040EE                     l3617:
  9976   0040EE  AE13               	btfss	(___awdiv@divisor+1)^0,7,c
  9977   0040F0  EF7C  F020         	goto	u2351
  9978   0040F4  EF7E  F020         	goto	u2350
  9979   0040F8                     u2351:
  9980   0040F8  EF73  F020         	goto	l3615
  9981   0040FC                     u2350:
  9982   0040FC                     l3619:
  9983   0040FC  90D8               	bcf	status,0,c
  9984   0040FE  3616               	rlcf	___awdiv@quotient^0,f,c
  9985   004100  3617               	rlcf	(___awdiv@quotient+1)^0,f,c
  9986   004102  5012               	movf	___awdiv@divisor^0,w,c
  9987   004104  5C10               	subwf	___awdiv@dividend^0,w,c
  9988   004106  5013               	movf	(___awdiv@divisor+1)^0,w,c
  9989   004108  5811               	subwfb	(___awdiv@dividend+1)^0,w,c
  9990   00410A  A0D8               	btfss	status,0,c
  9991   00410C  EF8A  F020         	goto	u2361
  9992   004110  EF8C  F020         	goto	u2360
  9993   004114                     u2361:
  9994   004114  EF91  F020         	goto	l3627
  9995   004118                     u2360:
  9996   004118  5012               	movf	___awdiv@divisor^0,w,c
  9997   00411A  5E10               	subwf	___awdiv@dividend^0,f,c
  9998   00411C  5013               	movf	(___awdiv@divisor+1)^0,w,c
  9999   00411E  5A11               	subwfb	(___awdiv@dividend+1)^0,f,c
 10000   004120  8016               	bsf	___awdiv@quotient^0,0,c
 10001   004122                     l3627:
 10002   004122  90D8               	bcf	status,0,c
 10003   004124  3213               	rrcf	(___awdiv@divisor+1)^0,f,c
 10004   004126  3212               	rrcf	___awdiv@divisor^0,f,c
 10005   004128  2E14               	decfsz	___awdiv@counter^0,f,c
 10006   00412A  EF7E  F020         	goto	l3619
 10007   00412E                     l3631:
 10008   00412E  5015               	movf	___awdiv@sign^0,w,c
 10009   004130  B4D8               	btfsc	status,2,c
 10010   004132  EF9D  F020         	goto	u2371
 10011   004136  EF9F  F020         	goto	u2370
 10012   00413A                     u2371:
 10013   00413A  EFA3  F020         	goto	l3635
 10014   00413E                     u2370:
 10015   00413E  6C16               	negf	___awdiv@quotient^0,c
 10016   004140  1E17               	comf	(___awdiv@quotient+1)^0,f,c
 10017   004142  B0D8               	btfsc	status,0,c
 10018   004144  2A17               	incf	(___awdiv@quotient+1)^0,f,c
 10019   004146                     l3635:
 10020   004146  C016  F010         	movff	___awdiv@quotient,?___awdiv
 10021   00414A  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
 10022   00414E  0012               	return		;funcret
 10023   004150                     __end_of___awdiv:
 10024                           	callstack 0
 10025                           
 10026 ;; *************** function _ADC_init *****************
 10027 ;; Defined at:
 10028 ;;		line 9 in file "ADC.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg, status,2
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used: 1
 10048 ;; Hardware stack levels required when called: 5
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_batteryLevel
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text39
 10057   00487E                     __ptext39:
 10058                           	callstack 0
 10059   00487E                     _ADC_init:
 10060                           	callstack 24
 10061   00487E                     
 10062                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 10063   00487E  8C86               	bsf	134,6,c	;volatile
 10064                           
 10065                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 10066   004880  010E               	movlb	14	; () banked
 10067   004882  8DB4               	bsf	180,6,b	;volatile
 10068                           
 10069                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 10070   004884  010F               	movlb	15	; () banked
 10071   004886  9958               	bcf	88,4,b	;volatile
 10072   004888                     
 10073                           ; BSR set to: 15
 10074                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 10075   004888  0EFC               	movlw	-4
 10076   00488A  1758               	andwf	88,f,b	;volatile
 10077                           
 10078                           ;ADC.c: 17:     ADPCH=0b101110;
 10079   00488C  0E2E               	movlw	46
 10080   00488E  6F5F               	movwf	95,b	;volatile
 10081   004890                     
 10082                           ; BSR set to: 15
 10083                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 10084   004890  9460               	bcf	96,2,c	;volatile
 10085   004892                     
 10086                           ; BSR set to: 15
 10087                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 10088   004892  8860               	bsf	96,4,c	;volatile
 10089   004894                     
 10090                           ; BSR set to: 15
 10091                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 10092   004894  8E60               	bsf	96,7,c	;volatile
 10093   004896                     
 10094                           ; BSR set to: 15
 10095   004896  0012               	return		;funcret
 10096   004898                     __end_of_ADC_init:
 10097                           	callstack 0
 10098                           
 10099 ;; *************** function _ADC_getval *****************
 10100 ;; Defined at:
 10101 ;;		line 23 in file "ADC.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  tmpval          1   15[COMRAM] unsigned char 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      unsigned char 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10118 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10119 ;;Total ram usage:        1 bytes
 10120 ;; Hardware stack levels used: 1
 10121 ;; Hardware stack levels required when called: 5
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_batteryLevel
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text40
 10130   004898                     __ptext40:
 10131                           	callstack 0
 10132   004898                     _ADC_getval:
 10133                           	callstack 24
 10134   004898                     
 10135                           ;ADC.c: 25:     unsigned char tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
 10136   004898  8060               	bsf	96,0,c	;volatile
 10137   00489A                     l448:
 10138   00489A  B060               	btfsc	96,0,c	;volatile
 10139   00489C  EF52  F024         	goto	u2051
 10140   0048A0  EF54  F024         	goto	u2050
 10141   0048A4                     u2051:
 10142   0048A4  EF4D  F024         	goto	l448
 10143   0048A8                     u2050:
 10144   0048A8                     
 10145                           ;ADC.c: 31:     tmpval = ADRESH;
 10146   0048A8  CF64 F010          	movff	3940,ADC_getval@tmpval	;volatile
 10147   0048AC                     
 10148                           ;ADC.c: 35:     return tmpval;
 10149   0048AC  5010               	movf	ADC_getval@tmpval^0,w,c
 10150   0048AE  0012               	return		;funcret
 10151   0048B0                     __end_of_ADC_getval:
 10152                           	callstack 0
 10153                           
 10154 ;; *************** function _Timer0_init *****************
 10155 ;; Defined at:
 10156 ;;		line 7 in file "timers.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      void 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10174 ;;Total ram usage:        0 bytes
 10175 ;; Hardware stack levels used: 1
 10176 ;; Hardware stack levels required when called: 5
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_main
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text41
 10185   004820                     __ptext41:
 10186                           	callstack 0
 10187   004820                     _Timer0_init:
 10188                           	callstack 25
 10189   004820                     
 10190                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 10191   004820  50D6               	movf	214,w,c	;volatile
 10192   004822  0B1F               	andlw	-225
 10193   004824  0940               	iorlw	64
 10194   004826  6ED6               	movwf	214,c	;volatile
 10195   004828                     
 10196                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 10197   004828  88D6               	bsf	214,4,c	;volatile
 10198                           
 10199                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1011;
 10200   00482A  50D6               	movf	214,w,c	;volatile
 10201   00482C  0BF0               	andlw	-16
 10202   00482E  090B               	iorlw	11
 10203   004830  6ED6               	movwf	214,c	;volatile
 10204   004832                     
 10205                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 10206   004832  88D5               	bsf	213,4,c	;volatile
 10207                           
 10208                           ;timers.c: 15:     TMR0H=0;
 10209   004834  0E00               	movlw	0
 10210   004836  6ED4               	movwf	212,c	;volatile
 10211                           
 10212                           ;timers.c: 16:     TMR0L=0;
 10213   004838  0E00               	movlw	0
 10214   00483A  6ED3               	movwf	211,c	;volatile
 10215   00483C                     
 10216                           ;timers.c: 17:     T0CON0bits.T0EN=1;
 10217   00483C  8ED5               	bsf	213,7,c	;volatile
 10218   00483E  0012               	return		;funcret
 10219   004840                     __end_of_Timer0_init:
 10220                           	callstack 0
 10221                           
 10222 ;; *************** function _Interrupts_init *****************
 10223 ;; Defined at:
 10224 ;;		line 11 in file "interrupts.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;		None
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  1    wreg      void 
 10231 ;; Registers used:
 10232 ;;		None
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10242 ;;Total ram usage:        0 bytes
 10243 ;; Hardware stack levels used: 1
 10244 ;; Hardware stack levels required when called: 5
 10245 ;; This function calls:
 10246 ;;		Nothing
 10247 ;; This function is called by:
 10248 ;;		_main
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text42
 10253   0048C8                     __ptext42:
 10254                           	callstack 0
 10255   0048C8                     _Interrupts_init:
 10256                           	callstack 25
 10257   0048C8                     
 10258                           ;interrupts.c: 14:     TRISBbits.TRISB0=1;
 10259   0048C8  8082               	bsf	130,0,c	;volatile
 10260                           
 10261                           ;interrupts.c: 15:     ANSELBbits.ANSELB0=0;
 10262   0048CA  010E               	movlb	14	; () banked
 10263   0048CC  919A               	bcf	154,0,b	;volatile
 10264                           
 10265                           ;interrupts.c: 16:     PIE0bits.INT0IE=1;
 10266   0048CE  8129               	bsf	41,0,b	;volatile
 10267                           
 10268                           ;interrupts.c: 17:     IPR0bits.INT0IP = 1;
 10269   0048D0  811F               	bsf	31,0,b	;volatile
 10270                           
 10271                           ;interrupts.c: 18:     INTCONbits.INT0EDG = 0;
 10272   0048D2  90F2               	bcf	242,0,c	;volatile
 10273                           
 10274                           ;interrupts.c: 22:     TMR0IE=1;
 10275   0048D4  8B29               	bsf	41,5,b	;volatile
 10276                           
 10277                           ;interrupts.c: 23:     PIE4bits.RC4IE=1;
 10278   0048D6  872D               	bsf	45,3,b	;volatile
 10279                           
 10280                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
 10281   0048D8  8CF2               	bsf	242,6,c	;volatile
 10282                           
 10283                           ;interrupts.c: 25:     INTCONbits.GIE=1;
 10284   0048DA  8EF2               	bsf	242,7,c	;volatile
 10285   0048DC                     
 10286                           ; BSR set to: 14
 10287   0048DC  0012               	return		;funcret
 10288   0048DE                     __end_of_Interrupts_init:
 10289                           	callstack 0
 10290                           
 10291 ;; *************** function _Buggy_init *****************
 10292 ;; Defined at:
 10293 ;;		line 7 in file "buggysetup.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		None
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10311 ;;Total ram usage:        0 bytes
 10312 ;; Hardware stack levels used: 1
 10313 ;; Hardware stack levels required when called: 5
 10314 ;; This function calls:
 10315 ;;		Nothing
 10316 ;; This function is called by:
 10317 ;;		_main
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           	psect	text43
 10322   00463A                     __ptext43:
 10323                           	callstack 0
 10324   00463A                     _Buggy_init:
 10325                           	callstack 25
 10326   00463A                     
 10327                           ;buggysetup.c: 10:     LATDbits.LATD7=0;
 10328   00463A  9E7C               	bcf	124,7,c	;volatile
 10329                           
 10330                           ;buggysetup.c: 11:     TRISDbits.TRISD7=0;
 10331   00463C  9E84               	bcf	132,7,c	;volatile
 10332                           
 10333                           ;buggysetup.c: 14:     LATHbits.LATH3=0;
 10334   00463E  9680               	bcf	128,3,c	;volatile
 10335                           
 10336                           ;buggysetup.c: 15:     TRISHbits.TRISH3=0;
 10337   004640  9688               	bcf	136,3,c	;volatile
 10338                           
 10339                           ;buggysetup.c: 18:     TRISFbits.TRISF2=1;
 10340   004642  8486               	bsf	134,2,c	;volatile
 10341                           
 10342                           ;buggysetup.c: 19:     ANSELFbits.ANSELF2=0;
 10343   004644  010E               	movlb	14	; () banked
 10344   004646  95B4               	bcf	180,2,b	;volatile
 10345                           
 10346                           ;buggysetup.c: 22:     TRISFbits.TRISF3=1;
 10347   004648  8686               	bsf	134,3,c	;volatile
 10348                           
 10349                           ;buggysetup.c: 23:     ANSELFbits.ANSELF3=0;
 10350   00464A  97B4               	bcf	180,3,b	;volatile
 10351                           
 10352                           ;buggysetup.c: 33:     LATHbits.LATH1=0;
 10353   00464C  9280               	bcf	128,1,c	;volatile
 10354                           
 10355                           ;buggysetup.c: 34:     TRISHbits.TRISH1=0;
 10356   00464E  9288               	bcf	136,1,c	;volatile
 10357                           
 10358                           ;buggysetup.c: 37:     LATDbits.LATD4=0;
 10359   004650  987C               	bcf	124,4,c	;volatile
 10360                           
 10361                           ;buggysetup.c: 38:     TRISDbits.TRISD4=0;
 10362   004652  9884               	bcf	132,4,c	;volatile
 10363                           
 10364                           ;buggysetup.c: 41:     LATDbits.LATD3=0;
 10365   004654  967C               	bcf	124,3,c	;volatile
 10366                           
 10367                           ;buggysetup.c: 42:     TRISDbits.TRISD3=0;
 10368   004656  9684               	bcf	132,3,c	;volatile
 10369                           
 10370                           ;buggysetup.c: 43:     ANSELDbits.ANSELD3=0;
 10371   004658  97A7               	bcf	167,3,b	;volatile
 10372                           
 10373                           ;buggysetup.c: 46:     LATHbits.LATH0=0;
 10374   00465A  9080               	bcf	128,0,c	;volatile
 10375                           
 10376                           ;buggysetup.c: 47:     TRISHbits.TRISH0=0;
 10377   00465C  9088               	bcf	136,0,c	;volatile
 10378                           
 10379                           ;buggysetup.c: 50:     LATFbits.LATF0=0;
 10380   00465E  907E               	bcf	126,0,c	;volatile
 10381                           
 10382                           ;buggysetup.c: 51:     TRISFbits.TRISF0=0;
 10383   004660  9086               	bcf	134,0,c	;volatile
 10384                           
 10385                           ;buggysetup.c: 54:     LATGbits.LATG0 = 0;
 10386   004662  907F               	bcf	127,0,c	;volatile
 10387                           
 10388                           ;buggysetup.c: 55:     TRISGbits.TRISG0 = 0;
 10389   004664  9087               	bcf	135,0,c	;volatile
 10390                           
 10391                           ;buggysetup.c: 57:     LATEbits.LATE7 = 0;
 10392   004666  9E7D               	bcf	125,7,c	;volatile
 10393                           
 10394                           ;buggysetup.c: 58:     TRISEbits.TRISE7 = 0;
 10395   004668  9E85               	bcf	133,7,c	;volatile
 10396                           
 10397                           ;buggysetup.c: 60:     LATAbits.LATA3 = 0;
 10398   00466A  9679               	bcf	121,3,c	;volatile
 10399                           
 10400                           ;buggysetup.c: 61:     TRISAbits.TRISA3 = 0;
 10401   00466C  9681               	bcf	129,3,c	;volatile
 10402   00466E                     
 10403                           ; BSR set to: 14
 10404   00466E  0012               	return		;funcret
 10405   004670                     __end_of_Buggy_init:
 10406                           	callstack 0
 10407                           
 10408 ;; *************** function _HighISR *****************
 10409 ;; Defined at:
 10410 ;;		line 33 in file "interrupts.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;		None
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  1    wreg      void 
 10417 ;; Registers used:
 10418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10426 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10427 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10428 ;;Total ram usage:        3 bytes
 10429 ;; Hardware stack levels used: 1
 10430 ;; Hardware stack levels required when called: 4
 10431 ;; This function calls:
 10432 ;;		_getCharFromTxBuf
 10433 ;;		_isDataInTxBuf
 10434 ;;		_putCharToRxBuf
 10435 ;;		i2_color_clear_init_interrupts
 10436 ;; This function is called by:
 10437 ;;		Interrupt level 2
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	intcode
 10442   000008                     __pintcode:
 10443                           	callstack 0
 10444   000008                     _HighISR:
 10445                           	callstack 21
 10446                           
 10447                           ; BSR set to: 14
 10448                           ;incstack = 0
 10449   000008  824D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10450   00000A  CFD9 F00E          	movff	fsr2l,??_HighISR+1
 10451   00000E  CFDA F00F          	movff	fsr2h,??_HighISR+2
 10452   000012                     
 10453                           ;interrupts.c: 37:     if(PIR0bits.INT0IF){
 10454   000012  010E               	movlb	14	; () banked
 10455   000014  A133               	btfss	51,0,b	;volatile
 10456   000016  EF0F  F000         	goto	i2u319_41
 10457   00001A  EF11  F000         	goto	i2u319_40
 10458   00001E                     i2u319_41:
 10459   00001E  EF2A  F000         	goto	i2l4491
 10460   000022                     i2u319_40:
 10461   000022                     
 10462                           ; BSR set to: 14
 10463                           ;interrupts.c: 38:         brightnessChange = 1;
 10464   000022  0E01               	movlw	1
 10465   000024  0101               	movlb	1	; () banked
 10466   000026  6FDA               	movwf	_brightnessChange& (0+255),b
 10467   000028                     
 10468                           ; BSR set to: 1
 10469                           ;interrupts.c: 39:         color_clear_init_interrupts();
 10470   000028  ECFB  F020         	call	i2_color_clear_init_interrupts	;wreg free
 10471   00002C                     
 10472                           ;interrupts.c: 40:         PIR0bits.INT0IF = 0;
 10473   00002C  010E               	movlb	14	; () banked
 10474   00002E  9133               	bcf	51,0,b	;volatile
 10475   000030                     
 10476                           ; BSR set to: 14
 10477                           ;interrupts.c: 42:         LATHbits.LATH3 = !LATHbits.LATH3;
 10478   000030  A680               	btfss	128,3,c	;volatile
 10479   000032  EF1D  F000         	goto	i2u320_41
 10480   000036  EF21  F000         	goto	i2u320_40
 10481   00003A                     i2u320_41:
 10482   00003A  6A0D               	clrf	??_HighISR^0,c
 10483   00003C  2A0D               	incf	??_HighISR^0,f,c
 10484   00003E  EF22  F000         	goto	i2u321_48
 10485   000042                     i2u320_40:
 10486   000042  6A0D               	clrf	??_HighISR^0,c
 10487   000044                     i2u321_48:
 10488   000044  460D               	rlncf	??_HighISR^0,f,c
 10489   000046  460D               	rlncf	??_HighISR^0,f,c
 10490   000048  460D               	rlncf	??_HighISR^0,f,c
 10491   00004A  5080               	movf	128,w,c	;volatile
 10492   00004C  180D               	xorwf	??_HighISR^0,w,c
 10493   00004E  0BF7               	andlw	-9
 10494   000050  180D               	xorwf	??_HighISR^0,w,c
 10495   000052  6E80               	movwf	128,c	;volatile
 10496   000054                     i2l4491:
 10497                           
 10498                           ;interrupts.c: 47:     if(TMR0IF){
 10499   000054  010E               	movlb	14	; () banked
 10500   000056  AB33               	btfss	51,5,b	;volatile
 10501   000058  EF30  F000         	goto	i2u322_41
 10502   00005C  EF32  F000         	goto	i2u322_40
 10503   000060                     i2u322_41:
 10504   000060  EF37  F000         	goto	i2l4497
 10505   000064                     i2u322_40:
 10506   000064                     
 10507                           ; BSR set to: 14
 10508                           ;interrupts.c: 48:         lost = 1;
 10509   000064  0E01               	movlw	1
 10510   000066  0101               	movlb	1	; () banked
 10511   000068  6FD9               	movwf	_lost& (0+255),b
 10512   00006A                     
 10513                           ; BSR set to: 1
 10514                           ;interrupts.c: 49:         TMR0IF=0;
 10515   00006A  010E               	movlb	14	; () banked
 10516   00006C  9B33               	bcf	51,5,b	;volatile
 10517   00006E                     i2l4497:
 10518                           
 10519                           ; BSR set to: 14
 10520                           ;interrupts.c: 56:     if(PIR4bits.RC4IF){
 10521   00006E  A737               	btfss	55,3,b	;volatile
 10522   000070  EF3C  F000         	goto	i2u323_41
 10523   000074  EF3E  F000         	goto	i2u323_40
 10524   000078                     i2u323_41:
 10525   000078  EF41  F000         	goto	i2l4501
 10526   00007C                     i2u323_40:
 10527   00007C                     
 10528                           ; BSR set to: 14
 10529                           ;interrupts.c: 58:         putCharToRxBuf(RC4REG);
 10530   00007C  51E3               	movf	227,w,b	;volatile
 10531   00007E  ECC8  F023         	call	_putCharToRxBuf
 10532   000082                     i2l4501:
 10533                           
 10534                           ;interrupts.c: 62:     if(PIR4bits.TX4IF){
 10535   000082  010E               	movlb	14	; () banked
 10536   000084  A537               	btfss	55,2,b	;volatile
 10537   000086  EF47  F000         	goto	i2u324_41
 10538   00008A  EF49  F000         	goto	i2u324_40
 10539   00008E                     i2u324_41:
 10540   00008E  EF59  F000         	goto	i2l367
 10541   000092                     i2u324_40:
 10542   000092                     
 10543                           ; BSR set to: 14
 10544                           ;interrupts.c: 64:         TX4REG = getCharFromTxBuf();
 10545   000092  ECDB  F023         	call	_getCharFromTxBuf	;wreg free
 10546   000096  010E               	movlb	14	; () banked
 10547   000098  6FE4               	movwf	228,b	;volatile
 10548   00009A                     
 10549                           ; BSR set to: 14
 10550                           ;interrupts.c: 65:         if (!isDataInTxBuf()) {PIE4bits.TX4IE=0;}
 10551   00009A  EC58  F024         	call	_isDataInTxBuf	;wreg free
 10552   00009E  0900               	iorlw	0
 10553   0000A0  A4D8               	btfss	status,2,c
 10554   0000A2  EF55  F000         	goto	i2u325_41
 10555   0000A6  EF57  F000         	goto	i2u325_40
 10556   0000AA                     i2u325_41:
 10557   0000AA  EF59  F000         	goto	i2l367
 10558   0000AE                     i2u325_40:
 10559   0000AE  010E               	movlb	14	; () banked
 10560   0000B0  952D               	bcf	45,2,b	;volatile
 10561   0000B2                     i2l367:
 10562   0000B2  C00F  FFDA         	movff	??_HighISR+2,fsr2h
 10563   0000B6  C00E  FFD9         	movff	??_HighISR+1,fsr2l
 10564   0000BA  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10565   0000BC  0011               	retfie		f
 10566   0000BE                     __end_of_HighISR:
 10567                           	callstack 0
 10568                           
 10569 ;; *************** function i2_color_clear_init_interrupts *****************
 10570 ;; Defined at:
 10571 ;;		line 27 in file "color.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;  low_threshol    2   10[COMRAM] unsigned int 
 10576 ;;  high_thresho    2    8[COMRAM] unsigned int 
 10577 ;; Return value:  Size  Location     Type
 10578 ;;                  1    wreg      void 
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, status,0, cstack
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10587 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10589 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10590 ;;Total ram usage:        5 bytes
 10591 ;; Hardware stack levels used: 1
 10592 ;; Hardware stack levels required when called: 3
 10593 ;; This function calls:
 10594 ;;		i2_I2C_2_Master_Start
 10595 ;;		i2_I2C_2_Master_Stop
 10596 ;;		i2_I2C_2_Master_Write
 10597 ;;		i2___lwdiv
 10598 ;;		i2_color_writetoaddr
 10599 ;; This function is called by:
 10600 ;;		_HighISR
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           	psect	text45
 10605   0041F6                     __ptext45:
 10606                           	callstack 0
 10607   0041F6                     i2_color_clear_init_interrupts:
 10608                           	callstack 21
 10609   0041F6                     
 10610                           ;color.c: 29:     I2C_2_Master_Start();
 10611   0041F6  EC94  F024         	call	i2_I2C_2_Master_Start	;wreg free
 10612                           
 10613                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
 10614   0041FA  0E52               	movlw	82
 10615   0041FC  EC75  F024         	call	i2_I2C_2_Master_Write
 10616                           
 10617                           ;color.c: 31:     I2C_2_Master_Write(0b11100110);
 10618   004200  0EE6               	movlw	230
 10619   004202  EC75  F024         	call	i2_I2C_2_Master_Write
 10620                           
 10621                           ;color.c: 32:     I2C_2_Master_Stop();
 10622   004206  EC8F  F024         	call	i2_I2C_2_Master_Stop	;wreg free
 10623                           
 10624                           ;color.c: 38:     unsigned int high_threshold = ambient + (ambient/5);
 10625   00420A  C1D7  F001         	movff	_ambient,i2___lwdiv@dividend
 10626   00420E  C1D8  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 10627   004212  0E00               	movlw	0
 10628   004214  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 10629   004216  0E05               	movlw	5
 10630   004218  6E03               	movwf	i2___lwdiv@divisor^0,c
 10631   00421A  EC22  F022         	call	i2___lwdiv	;wreg free
 10632   00421E  0101               	movlb	1	; () banked
 10633   004220  51D7               	movf	_ambient& (0+255),w,b
 10634   004222  2401               	addwf	?i2___lwdiv^0,w,c
 10635   004224  6E09               	movwf	i2color_clear_init_interrupts@high_threshold^0,c
 10636   004226  51D8               	movf	(_ambient+1)& (0+255),w,b
 10637   004228  2002               	addwfc	(?i2___lwdiv+1)^0,w,c
 10638   00422A  6E0A               	movwf	(i2color_clear_init_interrupts@high_threshold+1)^0,c
 10639                           
 10640                           ;color.c: 39:     unsigned int low_threshold = ambient - (ambient/20);
 10641   00422C  C1D7  F001         	movff	_ambient,i2___lwdiv@dividend
 10642   004230  C1D8  F002         	movff	_ambient+1,i2___lwdiv@dividend+1
 10643   004234  0E00               	movlw	0
 10644   004236  6E04               	movwf	(i2___lwdiv@divisor+1)^0,c
 10645   004238  0E14               	movlw	20
 10646   00423A  6E03               	movwf	i2___lwdiv@divisor^0,c
 10647   00423C  EC22  F022         	call	i2___lwdiv	;wreg free
 10648   004240  5001               	movf	?i2___lwdiv^0,w,c
 10649   004242  0101               	movlb	1	; () banked
 10650   004244  5DD7               	subwf	_ambient& (0+255),w,b
 10651   004246  6E0B               	movwf	i2color_clear_init_interrupts@low_threshold^0,c
 10652   004248  5002               	movf	(?i2___lwdiv+1)^0,w,c
 10653   00424A  59D8               	subwfb	(_ambient+1)& (0+255),w,b
 10654   00424C  6E0C               	movwf	(i2color_clear_init_interrupts@low_threshold+1)^0,c
 10655                           
 10656                           ;color.c: 42:  color_writetoaddr(0x00, 0x13);
 10657   00424E  0E13               	movlw	19
 10658   004250  6E03               	movwf	i2color_writetoaddr@value^0,c
 10659   004252  0E00               	movlw	0
 10660   004254  EC20  F024         	call	i2_color_writetoaddr
 10661   004258                     
 10662                           ;color.c: 43:     _delay((unsigned long)((3)*(64000000/4000.0)));
 10663   004258  0E3F               	movlw	63
 10664   00425A  6E08               	movwf	??i2_color_clear_init_interrupts^0,c
 10665   00425C  0E55               	movlw	85
 10666   00425E                     i2u432_47:
 10667   00425E  2EE8               	decfsz	wreg,f,c
 10668   004260  D7FE               	bra	i2u432_47
 10669   004262  2E08               	decfsz	??i2_color_clear_init_interrupts^0,f,c
 10670   004264  D7FC               	bra	i2u432_47
 10671   004266  0000               	nop	
 10672   004268                     
 10673                           ;color.c: 44:     color_writetoaddr(0x07, (high_threshold >> 8));
 10674   004268  500A               	movf	(i2color_clear_init_interrupts@high_threshold+1)^0,w,c
 10675   00426A  6E03               	movwf	i2color_writetoaddr@value^0,c
 10676   00426C  0E07               	movlw	7
 10677   00426E  EC20  F024         	call	i2_color_writetoaddr
 10678   004272                     
 10679                           ;color.c: 45:     color_writetoaddr(0x06, (high_threshold & 0xFF));
 10680   004272  C009  F003         	movff	i2color_clear_init_interrupts@high_threshold,i2color_writetoaddr@value
 10681   004276  0E06               	movlw	6
 10682   004278  EC20  F024         	call	i2_color_writetoaddr
 10683   00427C                     
 10684                           ;color.c: 46:     color_writetoaddr(0x05, (low_threshold >> 8));
 10685   00427C  500C               	movf	(i2color_clear_init_interrupts@low_threshold+1)^0,w,c
 10686   00427E  6E03               	movwf	i2color_writetoaddr@value^0,c
 10687   004280  0E05               	movlw	5
 10688   004282  EC20  F024         	call	i2_color_writetoaddr
 10689   004286                     
 10690                           ;color.c: 47:     color_writetoaddr(0x04, (low_threshold & 0xFF));
 10691   004286  C00B  F003         	movff	i2color_clear_init_interrupts@low_threshold,i2color_writetoaddr@value
 10692   00428A  0E04               	movlw	4
 10693   00428C  EC20  F024         	call	i2_color_writetoaddr
 10694   004290                     
 10695                           ;color.c: 48:     color_writetoaddr(0x0C, 0b11);
 10696   004290  0E03               	movlw	3
 10697   004292  6E03               	movwf	i2color_writetoaddr@value^0,c
 10698   004294  0E0C               	movlw	12
 10699   004296  EC20  F024         	call	i2_color_writetoaddr
 10700   00429A  0012               	return		;funcret
 10701   00429C                     __end_ofi2_color_clear_init_interrupts:
 10702                           	callstack 0
 10703                           
 10704 ;; *************** function i2_color_writetoaddr *****************
 10705 ;; Defined at:
 10706 ;;		line 53 in file "color.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;  address         1    wreg     unsigned char 
 10709 ;;  value           1    2[COMRAM] unsigned char 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  address         1    3[COMRAM] unsigned char 
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10725 ;;Total ram usage:        2 bytes
 10726 ;; Hardware stack levels used: 1
 10727 ;; Hardware stack levels required when called: 2
 10728 ;; This function calls:
 10729 ;;		i2_I2C_2_Master_Start
 10730 ;;		i2_I2C_2_Master_Stop
 10731 ;;		i2_I2C_2_Master_Write
 10732 ;; This function is called by:
 10733 ;;		i2_color_clear_init_interrupts
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text46
 10738   004840                     __ptext46:
 10739                           	callstack 0
 10740   004840                     i2_color_writetoaddr:
 10741                           	callstack 21
 10742                           
 10743                           ;incstack = 0
 10744                           ;i2color_writetoaddr@address stored from wreg
 10745   004840  6E04               	movwf	i2color_writetoaddr@address^0,c
 10746   004842                     
 10747                           ;color.c: 54:     I2C_2_Master_Start();
 10748   004842  EC94  F024         	call	i2_I2C_2_Master_Start	;wreg free
 10749                           
 10750                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
 10751   004846  0E52               	movlw	82
 10752   004848  EC75  F024         	call	i2_I2C_2_Master_Write
 10753                           
 10754                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
 10755   00484C  5004               	movf	i2color_writetoaddr@address^0,w,c
 10756   00484E  0980               	iorlw	128
 10757   004850  EC75  F024         	call	i2_I2C_2_Master_Write
 10758                           
 10759                           ;color.c: 57:     I2C_2_Master_Write(value);
 10760   004854  5003               	movf	i2color_writetoaddr@value^0,w,c
 10761   004856  EC75  F024         	call	i2_I2C_2_Master_Write
 10762                           
 10763                           ;color.c: 58:     I2C_2_Master_Stop();
 10764   00485A  EC8F  F024         	call	i2_I2C_2_Master_Stop	;wreg free
 10765   00485E  0012               	return		;funcret
 10766   004860                     __end_ofi2_color_writetoaddr:
 10767                           	callstack 0
 10768                           
 10769 ;; *************** function i2_I2C_2_Master_Write *****************
 10770 ;; Defined at:
 10771 ;;		line 45 in file "i2c.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  data_byte       1    wreg     unsigned char 
 10774 ;; Auto vars:     Size  Location     Type
 10775 ;;  data_byte       1    1[COMRAM] unsigned char 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      void 
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0, cstack
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10789 ;;Total ram usage:        1 bytes
 10790 ;; Hardware stack levels used: 1
 10791 ;; Hardware stack levels required when called: 1
 10792 ;; This function calls:
 10793 ;;		i2_I2C_2_Master_Idle
 10794 ;; This function is called by:
 10795 ;;		i2_color_clear_init_interrupts
 10796 ;;		i2_color_writetoaddr
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           	psect	text47
 10801   0048EA                     __ptext47:
 10802                           	callstack 0
 10803   0048EA                     i2_I2C_2_Master_Write:
 10804                           	callstack 21
 10805                           
 10806                           ;incstack = 0
 10807                           ;i2I2C_2_Master_Write@data_byte stored from wreg
 10808   0048EA  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
 10809   0048EC                     
 10810                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 10811   0048EC  ECA1  F023         	call	i2_I2C_2_Master_Idle	;wreg free
 10812   0048F0                     
 10813                           ;i2c.c: 48:   SSP2BUF = data_byte;
 10814   0048F0  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
 10815   0048F4  0012               	return		;funcret
 10816   0048F6                     __end_ofi2_I2C_2_Master_Write:
 10817                           	callstack 0
 10818                           
 10819 ;; *************** function i2_I2C_2_Master_Stop *****************
 10820 ;; Defined at:
 10821 ;;		line 39 in file "i2c.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;		None
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  1    wreg      void 
 10828 ;; Registers used:
 10829 ;;		wreg, status,2, status,0, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10839 ;;Total ram usage:        0 bytes
 10840 ;; Hardware stack levels used: 1
 10841 ;; Hardware stack levels required when called: 1
 10842 ;; This function calls:
 10843 ;;		i2_I2C_2_Master_Idle
 10844 ;; This function is called by:
 10845 ;;		i2_color_clear_init_interrupts
 10846 ;;		i2_color_writetoaddr
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           	psect	text48
 10851   00491E                     __ptext48:
 10852                           	callstack 0
 10853   00491E                     i2_I2C_2_Master_Stop:
 10854                           	callstack 21
 10855   00491E                     
 10856                           ;i2c.c: 41:   I2C_2_Master_Idle();
 10857   00491E  ECA1  F023         	call	i2_I2C_2_Master_Idle	;wreg free
 10858   004922                     
 10859                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10860   004922  010E               	movlb	14	; () banked
 10861   004924  85DA               	bsf	218,2,b	;volatile
 10862   004926                     
 10863                           ; BSR set to: 14
 10864   004926  0012               	return		;funcret
 10865   004928                     __end_ofi2_I2C_2_Master_Stop:
 10866                           	callstack 0
 10867                           
 10868 ;; *************** function i2_I2C_2_Master_Start *****************
 10869 ;; Defined at:
 10870 ;;		line 27 in file "i2c.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;		None
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;		None
 10875 ;; Return value:  Size  Location     Type
 10876 ;;                  1    wreg      void 
 10877 ;; Registers used:
 10878 ;;		wreg, status,2, status,0, cstack
 10879 ;; Tracked objects:
 10880 ;;		On entry : 0/0
 10881 ;;		On exit  : 0/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10888 ;;Total ram usage:        0 bytes
 10889 ;; Hardware stack levels used: 1
 10890 ;; Hardware stack levels required when called: 1
 10891 ;; This function calls:
 10892 ;;		i2_I2C_2_Master_Idle
 10893 ;; This function is called by:
 10894 ;;		i2_color_clear_init_interrupts
 10895 ;;		i2_color_writetoaddr
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           	psect	text49
 10900   004928                     __ptext49:
 10901                           	callstack 0
 10902   004928                     i2_I2C_2_Master_Start:
 10903                           	callstack 21
 10904   004928                     
 10905                           ;i2c.c: 29:   I2C_2_Master_Idle();
 10906   004928  ECA1  F023         	call	i2_I2C_2_Master_Idle	;wreg free
 10907   00492C                     
 10908                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 10909   00492C  010E               	movlb	14	; () banked
 10910   00492E  81DA               	bsf	218,0,b	;volatile
 10911   004930                     
 10912                           ; BSR set to: 14
 10913   004930  0012               	return		;funcret
 10914   004932                     __end_ofi2_I2C_2_Master_Start:
 10915                           	callstack 0
 10916                           
 10917 ;; *************** function i2_I2C_2_Master_Idle *****************
 10918 ;; Defined at:
 10919 ;;		line 22 in file "i2c.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      void 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10937 ;;Total ram usage:        1 bytes
 10938 ;; Hardware stack levels used: 1
 10939 ;; This function calls:
 10940 ;;		Nothing
 10941 ;; This function is called by:
 10942 ;;		i2_I2C_2_Master_Start
 10943 ;;		i2_I2C_2_Master_Stop
 10944 ;;		i2_I2C_2_Master_Write
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           	psect	text50
 10949   004742                     __ptext50:
 10950                           	callstack 0
 10951   004742                     i2_I2C_2_Master_Idle:
 10952                           	callstack 21
 10953   004742                     i2l255:
 10954   004742  010E               	movlb	14	; () banked
 10955   004744  B5D8               	btfsc	216,2,b	;volatile
 10956   004746  EFA7  F023         	goto	i2u180_41
 10957   00474A  EFA9  F023         	goto	i2u180_40
 10958   00474E                     i2u180_41:
 10959   00474E  EFA1  F023         	goto	i2l255
 10960   004752                     i2u180_40:
 10961   004752                     
 10962                           ; BSR set to: 14
 10963   004752  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
 10964   004756  0E1F               	movlw	31
 10965   004758  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
 10966   00475A  A4D8               	btfss	status,2,c
 10967   00475C  EFB2  F023         	goto	i2u181_41
 10968   004760  EFB4  F023         	goto	i2u181_40
 10969   004764                     i2u181_41:
 10970   004764  EFA1  F023         	goto	i2l255
 10971   004768                     i2u181_40:
 10972   004768                     
 10973                           ; BSR set to: 14
 10974   004768  0012               	return		;funcret
 10975   00476A                     __end_ofi2_I2C_2_Master_Idle:
 10976                           	callstack 0
 10977                           
 10978 ;; *************** function i2___lwdiv *****************
 10979 ;; Defined at:
 10980 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  dividend        2    0[COMRAM] unsigned int 
 10983 ;;  divisor         2    2[COMRAM] unsigned int 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  quotient        2    4[COMRAM] unsigned int 
 10986 ;;  counter         1    6[COMRAM] unsigned char 
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  2    0[COMRAM] unsigned int 
 10989 ;; Registers used:
 10990 ;;		wreg, status,2, status,0
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10996 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10997 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10999 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11000 ;;Total ram usage:        7 bytes
 11001 ;; Hardware stack levels used: 1
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		i2_color_clear_init_interrupts
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           	psect	text51
 11010   004444                     __ptext51:
 11011                           	callstack 0
 11012   004444                     i2___lwdiv:
 11013                           	callstack 23
 11014   004444  0E00               	movlw	0
 11015   004446  6E06               	movwf	(i2___lwdiv@quotient+1)^0,c
 11016   004448  0E00               	movlw	0
 11017   00444A  6E05               	movwf	i2___lwdiv@quotient^0,c
 11018   00444C  5003               	movf	i2___lwdiv@divisor^0,w,c
 11019   00444E  1004               	iorwf	(i2___lwdiv@divisor+1)^0,w,c
 11020   004450  B4D8               	btfsc	status,2,c
 11021   004452  EF2D  F022         	goto	i2u238_41
 11022   004456  EF2F  F022         	goto	i2u238_40
 11023   00445A                     i2u238_41:
 11024   00445A  EF57  F022         	goto	i2l1261
 11025   00445E                     i2u238_40:
 11026   00445E  0E01               	movlw	1
 11027   004460  6E07               	movwf	i2___lwdiv@counter^0,c
 11028   004462  EF37  F022         	goto	i2l3649
 11029   004466                     i2l3647:
 11030   004466  90D8               	bcf	status,0,c
 11031   004468  3603               	rlcf	i2___lwdiv@divisor^0,f,c
 11032   00446A  3604               	rlcf	(i2___lwdiv@divisor+1)^0,f,c
 11033   00446C  2A07               	incf	i2___lwdiv@counter^0,f,c
 11034   00446E                     i2l3649:
 11035   00446E  AE04               	btfss	(i2___lwdiv@divisor+1)^0,7,c
 11036   004470  EF3C  F022         	goto	i2u239_41
 11037   004474  EF3E  F022         	goto	i2u239_40
 11038   004478                     i2u239_41:
 11039   004478  EF33  F022         	goto	i2l3647
 11040   00447C                     i2u239_40:
 11041   00447C                     i2l3651:
 11042   00447C  90D8               	bcf	status,0,c
 11043   00447E  3605               	rlcf	i2___lwdiv@quotient^0,f,c
 11044   004480  3606               	rlcf	(i2___lwdiv@quotient+1)^0,f,c
 11045   004482  5003               	movf	i2___lwdiv@divisor^0,w,c
 11046   004484  5C01               	subwf	i2___lwdiv@dividend^0,w,c
 11047   004486  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11048   004488  5802               	subwfb	(i2___lwdiv@dividend+1)^0,w,c
 11049   00448A  A0D8               	btfss	status,0,c
 11050   00448C  EF4A  F022         	goto	i2u240_41
 11051   004490  EF4C  F022         	goto	i2u240_40
 11052   004494                     i2u240_41:
 11053   004494  EF51  F022         	goto	i2l3659
 11054   004498                     i2u240_40:
 11055   004498  5003               	movf	i2___lwdiv@divisor^0,w,c
 11056   00449A  5E01               	subwf	i2___lwdiv@dividend^0,f,c
 11057   00449C  5004               	movf	(i2___lwdiv@divisor+1)^0,w,c
 11058   00449E  5A02               	subwfb	(i2___lwdiv@dividend+1)^0,f,c
 11059   0044A0  8005               	bsf	i2___lwdiv@quotient^0,0,c
 11060   0044A2                     i2l3659:
 11061   0044A2  90D8               	bcf	status,0,c
 11062   0044A4  3204               	rrcf	(i2___lwdiv@divisor+1)^0,f,c
 11063   0044A6  3203               	rrcf	i2___lwdiv@divisor^0,f,c
 11064   0044A8  2E07               	decfsz	i2___lwdiv@counter^0,f,c
 11065   0044AA  EF3E  F022         	goto	i2l3651
 11066   0044AE                     i2l1261:
 11067   0044AE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11068   0044B2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11069   0044B6  0012               	return		;funcret
 11070   0044B8                     __end_ofi2___lwdiv:
 11071                           	callstack 0
 11072                           
 11073 ;; *************** function _putCharToRxBuf *****************
 11074 ;; Defined at:
 11075 ;;		line 33 in file "serial.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  byte            1    wreg     unsigned char 
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  byte            1    0[COMRAM] unsigned char 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11093 ;;Total ram usage:        1 bytes
 11094 ;; Hardware stack levels used: 1
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_HighISR
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text52
 11103   004790                     __ptext52:
 11104                           	callstack 0
 11105   004790                     _putCharToRxBuf:
 11106                           	callstack 24
 11107                           
 11108                           ;incstack = 0
 11109                           ;putCharToRxBuf@byte stored from wreg
 11110   004790  6E01               	movwf	putCharToRxBuf@byte^0,c
 11111   004792                     
 11112                           ;serial.c: 34:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11113   004792  0E13               	movlw	19
 11114   004794  644C               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11115   004796  EFCF  F023         	goto	i2u285_41
 11116   00479A  EFD1  F023         	goto	i2u285_40
 11117   00479E                     i2u285_41:
 11118   00479E  EFD3  F023         	goto	i2l4161
 11119   0047A2                     i2u285_40:
 11120   0047A2  0E00               	movlw	0
 11121   0047A4  6E4C               	movwf	_RxBufWriteCnt^0,c	;volatile
 11122   0047A6                     i2l4161:
 11123                           
 11124                           ;serial.c: 35:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11125   0047A6  504C               	movf	_RxBufWriteCnt^0,w,c
 11126   0047A8  0FC4               	addlw	low _EUSART4RXbuf
 11127   0047AA  6ED9               	movwf	fsr2l,c
 11128   0047AC  6ADA               	clrf	fsr2h,c
 11129   0047AE  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11130   0047B2  2A4C               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11131   0047B4  0012               	return		;funcret
 11132   0047B6                     __end_of_putCharToRxBuf:
 11133                           	callstack 0
 11134                           
 11135 ;; *************** function _isDataInTxBuf *****************
 11136 ;; Defined at:
 11137 ;;		line 61 in file "serial.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  1    wreg      unsigned char 
 11144 ;; Registers used:
 11145 ;;		wreg, status,2, status,0
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11155 ;;Total ram usage:        0 bytes
 11156 ;; Hardware stack levels used: 1
 11157 ;; This function calls:
 11158 ;;		Nothing
 11159 ;; This function is called by:
 11160 ;;		_HighISR
 11161 ;;		_sendTxBuf
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           	psect	text53
 11166   0048B0                     __ptext53:
 11167                           	callstack 0
 11168   0048B0                     _isDataInTxBuf:
 11169                           	callstack 24
 11170   0048B0                     
 11171                           ;serial.c: 62:     return (TxBufWriteCnt!=TxBufReadCnt);
 11172   0048B0  5049               	movf	_TxBufReadCnt^0,w,c	;volatile
 11173   0048B2  184A               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11174   0048B4  A4D8               	btfss	status,2,c
 11175   0048B6  EF5F  F024         	goto	i2u287_41
 11176   0048BA  EF62  F024         	goto	i2u287_40
 11177   0048BE                     i2u287_41:
 11178   0048BE  0E01               	movlw	1
 11179   0048C0  EF63  F024         	goto	i2u288_40
 11180   0048C4                     i2u287_40:
 11181   0048C4  0E00               	movlw	0
 11182   0048C6                     i2u288_40:
 11183   0048C6  0012               	return		;funcret
 11184   0048C8                     __end_of_isDataInTxBuf:
 11185                           	callstack 0
 11186                           
 11187 ;; *************** function _getCharFromTxBuf *****************
 11188 ;; Defined at:
 11189 ;;		line 47 in file "serial.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;		None
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;		None
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      unsigned char 
 11196 ;; Registers used:
 11197 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11207 ;;Total ram usage:        1 bytes
 11208 ;; Hardware stack levels used: 1
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_HighISR
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text54
 11217   0047B6                     __ptext54:
 11218                           	callstack 0
 11219   0047B6                     _getCharFromTxBuf:
 11220                           	callstack 24
 11221   0047B6                     
 11222                           ;serial.c: 48:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11223   0047B6  0E3B               	movlw	59
 11224   0047B8  6449               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11225   0047BA  EFE1  F023         	goto	i2u286_41
 11226   0047BE  EFE3  F023         	goto	i2u286_40
 11227   0047C2                     i2u286_41:
 11228   0047C2  EFE5  F023         	goto	i2l4169
 11229   0047C6                     i2u286_40:
 11230   0047C6  0E00               	movlw	0
 11231   0047C8  6E49               	movwf	_TxBufReadCnt^0,c	;volatile
 11232   0047CA                     i2l4169:
 11233                           
 11234                           ;serial.c: 49:     return EUSART4TXbuf[TxBufReadCnt++];
 11235   0047CA  2A49               	incf	_TxBufReadCnt^0,f,c	;volatile
 11236   0047CC  0449               	decf	_TxBufReadCnt^0,w,c	;volatile
 11237   0047CE  6E01               	movwf	??_getCharFromTxBuf^0,c
 11238   0047D0  5001               	movf	??_getCharFromTxBuf^0,w,c
 11239   0047D2  0F60               	addlw	low _EUSART4TXbuf
 11240   0047D4  6ED9               	movwf	fsr2l,c
 11241   0047D6  6ADA               	clrf	fsr2h,c
 11242   0047D8  50DF               	movf	indf2,w,c
 11243   0047DA  0012               	return		;funcret
 11244   0047DC                     __end_of_getCharFromTxBuf:
 11245                           	callstack 0
 11246                           
 11247                           	psect	smallconst
 11248   000E00                     __psmallconst:
 11249                           	callstack 0
 11250   000E00  00                 	db	0
 11251   000E01  00                 	db	0	; dummy byte at the end
 11252   000000                     
 11253                           	psect	rparam
 11254   000000                     
 11255                           	psect	temp
 11256   00004D                     btemp:
 11257                           	callstack 0
 11258   00004D                     	ds	1
 11259   000000                     int$flags	set	btemp
 11260   000000                     wtemp8	set	btemp+1
 11261   000000                     ttemp5	set	btemp+1
 11262   000000                     ttemp6	set	btemp+4
 11263   000000                     ttemp7	set	btemp+8
 11264                           
 11265                           	psect	config
 11266                           
 11267                           ;Config register CONFIG1L @ 0x300000
 11268                           ;	External Oscillator mode Selection bits
 11269                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11270                           ;	Power-up default value for COSC bits
 11271                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11272   300000                     	org	3145728
 11273   300000  AA                 	db	170
 11274                           
 11275                           ;Config register CONFIG1H @ 0x300001
 11276                           ;	unspecified, using default values
 11277                           ;	Clock Out Enable bit
 11278                           ;	CLKOUTEN = 0x1, unprogrammed default
 11279                           ;	Clock Switch Enable bit
 11280                           ;	CSWEN = 0x1, unprogrammed default
 11281                           ;	Fail-Safe Clock Monitor Enable bit
 11282                           ;	FCMEN = 0x1, unprogrammed default
 11283   300001                     	org	3145729
 11284   300001  FF                 	db	255
 11285                           
 11286                           ;Config register CONFIG3L @ 0x300004
 11287                           ;	WDT Period Select bits
 11288                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11289                           ;	WDT operating mode
 11290                           ;	WDTE = OFF, WDT Disabled
 11291   300004                     	org	3145732
 11292   300004  9F                 	db	159
 11293                           
 11294                           ;Config register CONFIG3H @ 0x300005
 11295                           ;	unspecified, using default values
 11296                           ;	WDT Window Select bits
 11297                           ;	WDTCWS = 0x7, unprogrammed default
 11298                           ;	WDT input clock selector
 11299                           ;	WDTCCS = 0x7, unprogrammed default
 11300   300005                     	org	3145733
 11301   300005  FF                 	db	255
 11302                           tosu	equ	0xFFF
 11303                           tosh	equ	0xFFE
 11304                           tosl	equ	0xFFD
 11305                           stkptr	equ	0xFFC
 11306                           pclatu	equ	0xFFB
 11307                           pclath	equ	0xFFA
 11308                           pcl	equ	0xFF9
 11309                           tblptru	equ	0xFF8
 11310                           tblptrh	equ	0xFF7
 11311                           tblptrl	equ	0xFF6
 11312                           tablat	equ	0xFF5
 11313                           prodh	equ	0xFF4
 11314                           prodl	equ	0xFF3
 11315                           indf0	equ	0xFEF
 11316                           postinc0	equ	0xFEE
 11317                           postdec0	equ	0xFED
 11318                           preinc0	equ	0xFEC
 11319                           plusw0	equ	0xFEB
 11320                           fsr0h	equ	0xFEA
 11321                           fsr0l	equ	0xFE9
 11322                           wreg	equ	0xFE8
 11323                           indf1	equ	0xFE7
 11324                           postinc1	equ	0xFE6
 11325                           postdec1	equ	0xFE5
 11326                           preinc1	equ	0xFE4
 11327                           plusw1	equ	0xFE3
 11328                           fsr1h	equ	0xFE2
 11329                           fsr1l	equ	0xFE1
 11330                           bsr	equ	0xFE0
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           preinc2	equ	0xFDC
 11335                           plusw2	equ	0xFDB
 11336                           fsr2h	equ	0xFDA
 11337                           fsr2l	equ	0xFD9
 11338                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         248
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      76
    BANK0           160     22     142
    BANK1           256    211     219
    BANK2           256      0     122
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    calibration@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    calibration@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    calibration@turnDuration	PTR unsigned char  size(2) Largest target is 1
		 -> main@turnDuration(BANK1[1]), 

    color_read@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    lostReturnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    lostReturnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    lostReturnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    lostReturnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    move@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    move@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    returnHome@moveSequence	PTR unsigned char  size(2) Largest target is 40
		 -> main@moveSequence(BANK1[40]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    returnHome@straightTime	PTR unsigned int  size(2) Largest target is 82
		 -> main@straightTime(BANK1[82]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseOneSquare@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseOneSquare@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseOneSquare@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    reverseShort@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    reverseShort@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    reverseShort@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    reverseShort@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    rgb_2_hsv@HSV	PTR struct HSV_val size(2) Largest target is 6
		 -> main@HSV(BANK1[6]), 

    S33DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S33DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), main@motorR(BANK1[10]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    wallAdjust@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    wallAdjust@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    wallAdjust@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _wallAdjust->_setMotorPWM
    _rgb_2_hsv->___aldiv
    ___lldiv->___lmul
    ___aldiv->___lmul
    _move->_returnHome
    _reverseShort->_setMotorPWM
    _returnHome->_reverseOneSquare
    _returnHome->_turnLeft
    _returnHome->_turnRight
    _lostReturnHome->_reverseOneSquare
    _lostReturnHome->_turnLeft
    _lostReturnHome->_turnRight
    _stop->_setMotorPWM
    _reverseOneSquare->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_clear_init_interrupts
    _color_clear_init_interrupts->___lwdiv
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _calibration->_turnLeft
    _calibration->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _batteryLevel->___awdiv

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_color_clear_init_interrupts
    i2_color_clear_init_interrupts->i2___lwdiv
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_rgb_2_hsv

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               271   271      0  247855
                                             70 COMRAM     2     2      0
                                              0 BANK1    211   211      0
                         _Buggy_init
                    _Interrupts_init
                        _Timer0_init
                       _batteryLevel
                        _calibration
        _color_clear_init_interrupts
                   _color_click_init
                         _color_read
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                     _lostReturnHome
                               _move
                         _resetTimer
                          _rgb_2_hsv
                               _stop
                         _wallAdjust
                        _white_Light
 ---------------------------------------------------------------------------------
 (1) _white_Light                                          1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _wallAdjust                                          15     9      6    5147
                                             34 COMRAM    15     9      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _rgb_2_hsv                                           44    34     10    7439
                                             41 COMRAM    22    12     10
                                              0 BANK0     22    22      0
                            ___aldiv
                            ___lldiv
                             ___lmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  4     0      4     392
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  4     0      4     392
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2042
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     922
                                             27 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1212
                                             27 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _move                                                18     2     16  120174
                                             68 COMRAM     2     2      0
                                              0 BANK0     16     0     16
                     _fullSpeedAhead
                         _returnHome
                   _reverseOneSquare
                       _reverseShort
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _reverseShort                                        14     8      6    6930
                                             34 COMRAM    14     8      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _returnHome                                          20     5     15   59232
                                             48 COMRAM    20     5     15
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _lostReturnHome                                      20     5     15   58352
                                             48 COMRAM    20     5     15
                     _fullSpeedAhead
                    _get16bitTMR0val
                         _resetTimer
                   _reverseOneSquare
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _stop                                                12     7      5    5269
                                             34 COMRAM    12     7      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseOneSquare                                    14     7      7    6473
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _get16bitTMR0val                                     10     8      2      69
                                             15 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                      13     7      6    7461
                                             34 COMRAM    13     7      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read                                           9     7      2    1243
                                             19 COMRAM     9     7      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                             16 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    2274
                                             33 COMRAM     1     1      0
                  _I2C_2_Master_Init
        _color_clear_init_interrupts
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_clear_init_interrupts                          5     5      0    1524
                                             28 COMRAM     5     5      0
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
                            ___lwdiv
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             17 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                             16 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration                                         10     2      8   36246
                                             48 COMRAM    10     2      8
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     7      7   13649
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     7      7   21249
                                             34 COMRAM    14     7      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3501
                                             28 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                             21 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _batteryLevel                                         2     2      0     543
                                             23 COMRAM     2     2      0
                         _ADC_getval
                           _ADC_init
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_getval                                           1     1      0      23
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buggy_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              3     3      0     622
                                             12 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
      i2_color_clear_init_interrupts
 ---------------------------------------------------------------------------------
 (7) i2_color_clear_init_interrupts                        5     5      0     600
                                              7 COMRAM     5     5      0
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
                          i2___lwdiv
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buggy_init
   _Interrupts_init
   _Timer0_init
   _batteryLevel
     _ADC_getval
     _ADC_init
     ___awdiv
   _calibration
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
   _color_clear_init_interrupts
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
     ___lwdiv
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_clear_init_interrupts
     _color_writetoaddr
   _color_read
     _I2C_2_Master_Read
       _I2C_2_Master_Idle
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _lostReturnHome
     _fullSpeedAhead
     _get16bitTMR0val
     _resetTimer
     _reverseOneSquare
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
     _turnRight
   _move
     _fullSpeedAhead
     _returnHome
       _fullSpeedAhead
       _get16bitTMR0val
       _resetTimer
       _reverseOneSquare
       _stop
       _turnLeft
       _turnRight
     _reverseOneSquare
     _reverseShort
       _setMotorPWM
     _turnLeft
     _turnRight
   _resetTimer
   _rgb_2_hsv
     ___aldiv
       ___lmul (ARG)
     ___lldiv
       ___lmul (ARG)
     ___lmul
     _max
     _min
   _stop
   _wallAdjust
     _setMotorPWM
   _white_Light

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf
   i2_color_clear_init_interrupts
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle
     i2___lwdiv
     i2_color_writetoaddr
       i2_I2C_2_Master_Start
       i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      67        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      7A       9       47.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D3      DB       7       85.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     48      4C       1       80.9%
BITBIGSFRllllhh     37      0       0      46        0.0%
BITBIGSFRllhlll     31      0       0      44        0.0%
BITBIGSFRllllhl     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      65        0.0%
BITBIGSFRllllhl     20      0       0      49        0.0%
BITBIGSFRhlhh       1B      0       0      33        0.0%
BITBIGSFRllhh       17      0       0      38        0.0%
BITBIGSFRllhlll     14      0       0      41        0.0%
BITBIGSFRhlhl       13      0       0      34        0.0%
BITBIGSFRllllhl     11      0       0      52        0.0%
BITBIGSFRllllhl     11      0       0      53        0.0%
BITBIGSFRhllh        E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      51        0.0%
BITBIGSFRllllhl      C      0       0      50        0.0%
BITBIGSFRlllllh      9      0       0      62        0.0%
BITBIGSFRllllhh      8      0       0      47        0.0%
BITBIGSFRllhlll      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      64        0.0%
BITBIGSFRllllhl      6      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      60        0.0%
BITBIGSFRllhlhh      5      0       0      39        0.0%
BITBIGSFRllhlll      3      0       0      42        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRllllhl      3      0       0      55        0.0%
BITBIGSFRllllhl      3      0       0      61        0.0%
BITBIGSFRlllh        2      0       0      45        0.0%
BITBIGSFRlh          2      0       0      37        0.0%
BITBIGSFRllllhl      1      0       0      54        0.0%
BITBIGSFRlllllh      1      0       0      63        0.0%
BITBIGSFRllllhl      1      0       0      48        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRhlll        1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F      66        0.0%
DATA                 0      0     22F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 16:30:18 2024

                                _white_Light 47DC                                           l91 2946  
                                         l89 2938                                 ___awdiv@sign 0015  
                        ___wmul@multiplicand 0012                           i2___lwdiv@dividend 0001  
              wallAdjust@wallReverseDuration 002D                             main@turnDuration 01B6  
                          ??_Interrupts_init 0010                                          l103 2C3C  
                                        l211 4692                                          l140 4638  
                                        l212 469A                                          l220 27D0  
                                        l206 46BE                                          l143 41F4  
                                        l207 46C6                                          l151 47FE  
                                        l304 466E                                          l225 2866  
                                        l146 481E                                          l154 3684  
                                        l252 46F0                                          l261 491C  
                                        l149 47F8                                          l270 48E8  
                                        l255 471A                                          l264 4908  
                                        l273 4600                                          l450 48A8  
                                        l258 4740                                          l451 48AE  
                                        l267 4912                                          l603 2310  
                                        l357 48DC                                          l445 4896  
                                        l701 2DF4                                          l462 45A6  
                                        l550 3D90                                          l710 2F22  
                                        l463 45A8                                          l543 43CE  
                                        l448 489A                                          l464 45BC  
                                        l632 3AE2                                          l624 3F62  
                                        l712 2F46                                          l641 3BF6  
                                        l609 2310                                          l466 45BE  
                                        l706 2EB6                                          l627 3FA4  
                                        l619 238A                                          l723 3340  
                                        l715 2FCA                                          l644 3C24  
                                        l636 3B4E                                          l732 3454  
                                        l804 433E                                          l661 3A4A  
                                        l653 3974                                          l638 3B72  
                                        l750 32A6                                          l398 487C  
                                        l670 408A                                          l718 300C  
                                        l655 3998                                          l743 3112  
                                        l735 3496                                          l727 33AC  
                                        l744 3148                                          l584 1C6C  
                                        l761 483E                                          l649 3908  
                                        l681 37AA                                          l729 33D0  
                                        l569 162A                                          l770 478E  
                                        l658 3A1C                                          l666 403E  
                                        l594 1CE6                                          l578 1C6C  
                                        l747 3196                                          l739 30F6  
                                        l675 371A                                          l748 3286  
                                        l764 48FE                                          l684 382E  
                                        l692 2CE0                                          l781 4510  
                                        l782 4520                                          l767 4718  
                                        l687 3870                                          l679 3786  
                                        l696 2D4C                                          l849 3E9C  
                                        l698 2D70                                          l797 432E  
                                        _max 469C                                          _min 4670  
                                        prod 0FF3                          i2_color_writetoaddr 4840  
                                        wreg 0FE8    color_clear_init_interrupts@high_threshold 001E  
i2color_clear_init_interrupts@high_threshold 0009                                         l1001 414E  
                                       l1261 443A                                         l3021 4786  
                                       l3101 46F2                                         l3031 43F2  
                                       l3015 471A                                         l3103 46FE  
                                       l3111 3EE6                                         l3041 442C  
                                       l3033 43FA                                         l3025 43D0  
                                       l3201 3B2E                                         l3017 472A  
                                       l3105 4710                                         l3121 3F44  
                                       l4001 133E                                         l3043 442E  
                                       l3035 4408                                         l3027 43D8  
                                       l3019 476A                                         l3211 3B8A  
                                       l3203 3B3A                                         l3051 48E0  
                                       l3123 3F50                                         l3131 3F90  
                                       l3115 3EF8                                         l4011 13FE  
                                       l4003 1356                                         l1268 4442  
                                       l3045 4434                                         l3037 440E  
                                       l3029 43EA                                         l3061 3C42  
                                       l3221 3BF2                                         l3213 3BBE  
                                       l3205 3B4A                                         l3141 38D0  
                                       l3301 46C8                                         l3053 48E4  
                                       l3133 4802                                         l3125 3F5E  
                                       l3117 3F2C                                         l3109 3E9E  
                                       l4101 2048                                         l4021 149C  
                                       l4005 138E                                         l4013 141E  
                                       l3039 4424                                         l3071 3D0C  
                                       l3063 3C96                                         l3223 3C1A  
                                       l3215 3BCA                                         l3207 3B78  
                                       l3151 392C                                         l3143 38DC  
                                       l3135 3872                                         l3311 46DE  
                                       l3303 46D2                                         l3047 4914  
                                       l3055 490A                                         l3231 36AE  
                                       l3127 3F86                                         l3119 3F38  
                                       l4103 2066                                         l4031 153E  
                                       l4023 14BC                                         l4015 1430  
                                       l4007 13AE                                         l3073 3D50  
                                       l3065 3CAA                                         l3217 3BD6  
                                       l3161 399E                                         l3145 38E8  
                                       l3153 3930                                         l3137 3890  
                                       l3305 46D8                                         l3049 4918  
                                       l3057 490E                                         l3321 45CE  
                                       l3313 4900                                         l3081 3FC6  
                                       l3241 3716                                         l3233 36E2  
                                       l4121 2188                                         l4105 2086  
                                       l4113 20FA                                         l3401 3450  
                                       l4041 15EA                                         l4033 155A  
                                       l4025 14F4                                         l4017 144C  
                                       l4009 13E6                                         l4201 2874  
                                       l3067 3CAE                                         l3059 3C26  
                                       l3219 3BE2                                         l3171 39FC  
                                       l3155 3954                                         l3147 38F4  
                                       l3139 389C                                         l3307 46DA  
                                       l3323 45D6                                         l3315 4904  
                                       l3091 402A                                         l3083 3FD2  
                                       l3251 3782                                         l3243 373E  
                                       l3235 36EE                                         l3227 3686  
                                       l4131 2202                                         l4115 2118  
                                       l4107 209E                                         l4051 1D5C  
                                       l4043 1CE8                                         l3411 164C  
                                       l3403 3478                                         l4035 1572  
                                       l4027 150C                                         l4019 1464  
                                       l3331 469C                                         l4211 2896  
                                       l4203 2874                                         l3069 3CF0  
                                       l3181 3A4C                                         l3173 3A08  
                                       l3165 39B0                                         l3157 3960  
                                       l3149 3904                                         l3309 46DC  
                                       l3325 45FC                                         l3317 45C2  
                                       l3093 403A                                         l3085 4006  
                                       l3261 3802                                         l3253 37B0  
                                       l3237 36FA                                         l3245 3742  
                                       l3229 36A2                                         l4141 229C  
                                       l4133 223A                                         l4117 2138  
                                       l4125 21AC                                         l4109 20D6  
                                       l4061 1DEC                                         l4053 1D7C  
                                       l4045 1CEC                                         l3501 1BD8  
                                       l3421 170C                                         l3413 1664  
                                       l4037 15B6                                         l4029 152C  
                                       l3333 46B2                                         l4301 2A34  
                                       l4221 28B6                                         l4213 289A  
                                       l4205 287A                                         l3351 4894  
                                       l3343 487E                                         l3191 3AC2  
                                       l3183 3A6A                                         l3175 3A18  
                                       l3167 39E4                                         l3159 3970  
                                       l3327 45FE                                         l3319 45C6  
                                       l3095 4062                                         l3087 4012  
                                       l3079 3FA6                                         l3263 380E  
                                       l3247 3766                                         l3239 3706  
                                       l4151 2330                                         l4143 22B4  
                                       l4127 21CA                                         l4119 2150  
                                       l4071 1E24                                         l4063 1DF2  
                                       l4055 1DB4                                         l4047 1D0C  
                                       l3511 1C88                                         l3503 1BF8  
                                       l3431 177E                                         l3423 1728  
                                       l3415 169C                                         l3407 3482  
                                       l4039 15D2                                         l4303 2A3C  
                                       l4311 2A60                                         l4231 28D4  
                                       l4223 28BA                                         l4215 28AA  
                                       l4207 287E                                         l3353 4898  
                                       l3345 4888                                         l3601 40A6  
                                       l3193 3ACE                                         l3185 3A76  
                                       l3177 3A40                                         l3169 39F0  
                                       l3089 401E                                         l3097 4066  
                                       l3265 381A                                         l3273 385C  
                                       l3257 37C2                                         l3249 3772  
                                       l4153 2362                                         l4145 22EC  
                                       l4129 21EA                                         l4137 225E  
                                       l4081 1ED2                                         l4073 1E40  
                                       l4065 1E02                                         l4057 1DCC  
                                       l4049 1D24                                         l3513 1C8C  
                                       l3505 1C10                                         l3441 1810  
                                       l3433 1780                                         l3425 172C  
                                       l3417 16BC                                         l3409 162C  
                                       l3361 32AC                                         l3521 44C8  
                                       l3337 4670                                         l4321 2AFC  
                                       l4313 2A70                                         l4305 2A40  
                                       l4241 28F4                                         l4233 28D8  
                                       l4225 28BE                                         l4217 28AE  
                                       l4209 288A                                         l3355 48AC  
                                       l3347 4890                                         l3611 40CC  
                                       l3603 40AA                                         l3195 3ADE  
                                       l3187 3AAA                                         l3291 41C2  
                                       l3099 48F6                                         l3267 382A  
                                       l3259 37F6                                         l4139 227C  
                                       l4091 1F84                                         l4083 1EF2  
                                       l4075 1E60                                         l4155 237A  
                                       l4067 1E1A                                         l4059 1DE8  
                                       l3515 1CBE                                         l3507 1C48  
                                       l3451 18C0                                         l3443 182E  
                                       l3435 179C                                         l3427 175E  
                                       l3419 16F4                                         l3371 3320  
                                       l3363 32BA                                         l3531 42AC  
                                       l3523 44D6                                         l3339 4686  
                                       l4331 2B78                                         l4323 2B0E  
                                       l4315 2A80                                         l4307 2A4E  
                                       l4251 2910                                         l4243 28F8  
                                       l4235 28E0                                         l4227 28CA  
                                       l4219 28B2                                         l3349 4892  
                                       l3621 4102                                         l3613 40DE  
                                       l3605 40B8                                         l3197 3B06  
                                       l3189 3AB6                                         l3293 41CC  
                                       l3701 4350                                         l3269 3852  
                                       l4149 232C                                         l4093 1F9C  
                                       l4085 1F0A                                         l4077 1E78  
                                       l4069 1E22                                         l3461 1988  
                                       l3453 18E0                                         l3445 184E  
                                       l3437 17BC                                         l3517 1CD6  
                                       l3429 1776                                         l3381 338C  
                                       l3373 332C                                         l3365 32D4  
                                       l3541 42EE                                         l3533 42C2  
                                       l3525 44E6                                         l4341 2B98  
                                       l4333 2B7C                                         l4325 2B1E  
                                       l4317 2AD2                                         l4309 2A58  
                                       l4261 2928                                         l4253 2918  
                                       l4245 28FC                                         l4237 28E8  
                                       l4229 28D0                                         l3623 4118  
                                       l3615 40E6                                         l3631 412E  
                                       l3607 40C0                                         l3199 3B0A  
                                       l3295 41D6                                         l3287 4150  
                                       l3711 43AA                                         l3703 4376  
                                       l4095 1FD4                                         l4087 1F46  
                                       l4079 1EB4                                         l3471 1A32  
                                       l3455 18F8                                         l3463 19A4  
                                       l3447 1866                                         l3439 17D4  
                                       l3391 33E8                                         l3383 3398  
                                       l3375 333C                                         l3367 3308  
                                       l3359 32A8                                         l3551 3D92  
                                       l3543 430C                                         l3535 42CA  
                                       l3527 44F0                                         l3519 44B8  
                                       l4351 2C0E                                         l4335 2B82  
                                       l4327 2B64                                         l4319 2ADE  
                                       l4343 2B9E                                         l4271 2966  
                                       l4263 292C                                         l4255 291C  
                                       l4247 2900                                         l4239 28F0  
                                       l3633 413E                                         l3625 4120  
                                       l3617 40EE                                         l3609 40C4  
                                       l3297 41E0                                         l3289 41B2  
                                       l3721 43CC                                         l3713 43B4  
                                       l3705 437A                                         l4097 1FF4  
                                       l4089 1F64                                         l3481 1AAC  
                                       l3465 19C2                                         l3457 1930  
                                       l3449 18A2                                         l3393 341C  
                                       l3385 33A8                                         l3377 3364  
                                       l3369 3314                                         l3561 3DC6  
                                       l3553 3D96                                         l3545 431C  
                                       l3537 42D6                                         l3529 429C  
                                       l3801 2C58                                         l4345 2BAE  
                                       l4353 2C18                                         l4337 2B84  
                                       l4329 2B70                                         l4281 29BC  
                                       l4273 298A                                         l4265 2930  
                                       l4257 2920                                         l4249 2908  
                                       l3635 4146                                         l3627 4122  
                                       l3619 40FC                                         l3731 45B6  
                                       l3723 4572                                         l3299 41EA  
                                       l3715 43B6                                         l3707 439E  
                                       l4099 202C                                         l3491 1B46  
                                       l3483 1AE4                                         l3467 19E2  
                                       l3475 1A56                                         l3459 1950  
                                       l3395 3428                                         l3387 33D6  
                                       l3379 3368                                         l3571 3E08  
                                       l3563 3DD6                                         l3555 3DA4  
                                       l3547 431E                                         l3539 42E4  
                                       l3811 2CCC                                         l3803 2C74  
                                       l4355 2C2A                                         l4347 2BB2  
                                       l4339 2B88                                         l4291 29F4  
                                       l4283 29C0                                         l4275 2990  
                                       l4267 2934                                         l4259 2924  
                                       l3629 4128                                         l3725 457C  
                                       l3741 30B6                                         l3733 300E  
                                       l3717 43C0                                         l3709 43A8  
                                       l3493 1B5E                                         l3477 1A74  
                                       l3469 19FA                                         l3397 3434  
                                       l3581 3E5A                                         l3573 3E14  
                                       l3565 3DDA                                         l3557 3DB4  
                                       l3549 4328                                         l3901 2528  
                                       l3821 2D38                                         l3813 2CDC  
                                       l3805 2CA8                                         l4349 2C0A  
                                       l4293 29F8                                         l4285 29CE  
                                       l4277 29A8                                         l4269 294E  
                                       l3663 463A                                         l3727 4592  
                                       l3751 3156                                         l3743 3104  
                                       l3735 3036                                         l3671 4620  
                                       l3719 43C2                                         l3495 1B96  
                                       l3479 1A94                                         l3487 1B08  
                                       l3399 3440                                         l3591 3E8C  
                                       l3583 3E5C                                         l3575 3E22  
                                       l3567 3DEA                                         l3559 3DB8  
                                       l3911 2678                                         l3903 258C  
                                       l3831 2DBC                                         l3823 2D48  
                                       l3815 2D04                                         l3807 2CB4  
                                       l4295 2A08                                         l4287 29EA  
                                       l4279 29B4                                         l4199 2868  
                                       l3681 4832                                         l3729 45A0  
                                       l3761 319A                                         l3753 3160  
                                       l3745 3120                                         l3737 304E  
                                       l3673 462A                                         l3665 4602  
                                       l3489 1B26                                         l3585 3E66  
                                       l3577 3E2C                                         l3569 3E00  
                                       l3921 2852                                         l3913 2712  
                                       l3905 25A2                                         l3841 2E18  
                                       l3833 2DC8                                         l3825 2D76  
                                       l3809 2CC0                                         l3817 2D08  
                                       l4297 2A14                                         l4289 29EE  
                                       l3683 483C                                         l3595 408C  
                                       l3771 328A                                         l3763 31C2  
                                       l3755 3162                                         l3747 3138  
                                       l3739 308E                                         l3675 4634  
                                       l3667 4606                                         l3691 486C  
                                       l3499 1BBA                                         l3931 0E80  
                                       l3923 0E02                                         l3579 3E4A  
                                       l3587 3E6C                                         l3915 272A  
                                       l3907 2604                                         l3851 2E7E  
                                       l3835 2DD4                                         l3819 2D2C  
                                       l4299 2A1C                                         l3685 48C8  
                                       l3677 4820                                         l3597 4090  
                                       l3773 32A2                                         l3765 31DA  
                                       l3757 317A                                         l3749 3142  
                                       l3669 4610                                         l3781 34B2  
                                       l3693 4876                                         l3941 0F1E  
                                       l3933 0EA0                                         l3925 0E14  
                                       l3589 3E7C                                         l3917 2828  
                                       l3909 2660                                         l3861 2EDA  
                                       l3853 2E8A                                         l3837 2DE0  
                                       l3845 2E22                                         l3829 2D88  
                                       ?_max 0010                                         l3679 4828  
                                       l3599 409E                                         l3767 321A  
                                       l3759 3188                                         l3791 35C0  
                                       l3783 34CC                                         l3695 4878  
                                       l3687 4860                                         l3951 0FDC  
                                       l3943 0F56                                         l3927 0E30  
                                       l3935 0ED8                                         l3919 2846  
                                       l3871 2F4C                                         l3855 2E96  
                                       l3863 2EDE                                         l3847 2E3E  
                                       l3839 2DF0                                         l3775 47DE  
                                       l3769 3242                                         l3793 3620  
                                       l3785 3524                                         l3697 487A  
                                       l3689 486A                                         l3961 109C  
                                       l3953 0FF4                                         l3945 0F76  
                                       l3937 0EEA                                         l3929 0E48  
                                       l3881 2FAA                                         l3865 2F02  
                                       l3857 2EA2                                         l3849 2E4A  
                                       l3777 47EE                                  main@curMove 01B4  
                                       l3795 363E                                         l3787 3542  
                                       l3779 3498                                         l3699 4340  
                                       l3971 113A                                         l3963 10D4  
                                       l3955 102C                                         l3939 0F06  
                                       l3947 0FAE                                         l3883 2FB6  
                                       l3891 2FF8                                         l3875 2F5E  
                                       l3867 2F0E                                         l3859 2EB2  
                                       ?_min 0010                                         l3789 35A2  
                                       l3973 1172                                         l3981 1202  
                                       l3957 104C                                         l3949 0FC0  
                                       l3965 10F4                                         l3893 238C  
                                       l3885 2FC6                                         l3877 2F92  
                                       l3869 2F1E                                         l3797 2C40  
                                       l3991 12A0                                         l3983 1214  
                                       l3975 1192                                         l3967 1106  
                                       l3959 1084                                         l3895 24E0  
                                       l3887 2FEE                                         l3879 2F9E  
                                       l3799 2C48                                         l3993 12D8  
                                       l3985 1230                                         l3977 11CA  
                                       l3969 1122                                         l3897 24FA  
                                       l3995 12F0                                         l3987 1248  
                                       l3979 11E2                                         l3899 2512  
                                       l3989 1280                                         l3997 1310  
                                       l3999 1322                                         u2000 3852  
                                       u2001 384E                                         u2010 45EA  
                                       u2011 45E2                                         u2100 3478  
                                       u2101 3474                                         u2110 175E  
                                       u2030 46B2                                         u2111 175A  
                                       u2031 46AE                                         u2200 1CE6  
                                       u2120 179C                                         u2040 4686  
                                       u3000 2BAE                                         u2201 1CE2  
                                       u2121 1798                                         u2041 4682  
                                       u3001 2BAA                                         u2050 48A8  
                                       u2130 182E                                         u2210 44D6  
                                       u3010 2C2A                                         u2051 48A4  
                                       u2131 182A                                         u2211 44D2  
                                       u3011 2C26                                         u2028 45EC  
                                       u2140 18C0                                         u2060 3364  
                                       u2300 3E4A                                         u2220 4510  
                                       u3020 2C3C                                         u2141 18BC  
                                       u2061 3360                                         u2301 3E46  
                                       u2221 450C                                         u3021 2C38  
                                       u2150 19C2                                         u2070 338C  
                                       u2310 3E7C                                         u2230 42C2  
                                       u2151 19BE                                         u2071 3388  
                                       u2311 3E78                                         u2231 42BE  
                                       u2320 409E                                         u2160 1A74  
                                       u2080 33D0                                         u2240 42E4  
                               _BAUD4CONbits 0EE9                                         u2321 409A  
                                       u2161 1A70                                         u2081 33CC  
                                       u2241 42E0                                         u2330 40B8  
                                       u2410 45A0                                         u2170 1B26  
                                       u2090 33E4                                         u2250 430C  
                                       u2331 40B4                                         u2411 459C  
                                       u2171 1B22                                         u2091 33E0  
                                       u2251 4308                                         u2340 40DE  
                                       u2420 45B6                                         u2180 1BD8  
                                       u2260 3DA4                                         u2500 2D04  
                                       u2341 40DA                                         u2421 45B2  
                                       u2181 1BD4                                         u2261 3DA0  
                                       u2501 2D00                                         u2350 40FC  
                                       u2430 3104                                         u2190 1CBE  
                                       u2270 3DC6                                         u2510 2D2C  
                                       u2351 40F8                                         u2431 3100  
                                       u4007 1FC6                                         u2191 1CBA  
                                       u2271 3DC2                                         u2511 2D28  
                                       u2360 4118                                         u2440 3112  
                                       u2280 3E00                                         u2600 2512  
                                       u2520 2D70                                         u2361 4114  
                                       u2441 310E                                         u4017 1FFE  
                                       u2281 3DFC                                         u2601 250E  
                                       u2521 2D6C                                         u2370 413E  
                                       u2450 3120                                         u1730 472A  
                                       u2290 3E22                                         u2610 2528  
                                       u2530 2D84                                         _T2PR 0FBC  
                                       u2371 413A                                         u2451 311C  
                                       u1731 4726                                         u4107 22DE  
                                       u4027 2036                                         u2291 3E1E  
                                       u2611 2524                                         u2531 2D80  
                                       u3307 299A                                         u1900 3A40  
                                       u2460 3138                                         u1740 4740  
                                       u1820 4062                                         u2700 1106  
                                       u2620 25A2                                         u2540 2E18  
                                       u1901 3A3C                                         u2461 3134  
                                       u1741 473C                                         u1821 405E  
                                       u4117 3F56                                         u4037 2090  
                                       u2701 1102                                         u2621 259E  
                                       u2541 2E14                                         u3317 29C6  
                                       u1750 43EA                                         u1910 3B06  
                                       u2470 3156                                         u1830 408A  
                                       u2710 1214                                         u2630 2678  
                                       u2550 2EDA                                         u1751 43E6  
                                       u1911 3B02                                         u2471 3152  
                                       u4207 30C0                                         u1831 4086  
                                       u4127 370C                                         u4047 20C8  
                                       u2711 1210                                         u3407 0E72  
                                       u2631 2674                                         u2551 2ED6  
                                       u3327 2A46                                         u1760 4408  
                                       u1920 3B2E                                         u2480 3188  
                                       u1840 3EF4                                         u2800 2118  
                                       u2720 1322                                         u2640 272A  
                                       u2560 2F02                                         u1761 4404  
                                       u1921 3B2A                                         u2481 3184  
                                       u4217 316C                                         u4137 3778  
                                       u1841 3EF0                                         u4057 2142  
                                       u2801 2114                                         u2721 131E  
                                       u3417 0EAA                                         u2641 2726  
                                       u2561 2EFE                                         u3337 2CD2  
                                       u1770 4424                                         u1930 3B72  
                                       u1850 3F86                                         u2810 21CA  
                                       u2730 1430                                         u2570 2F46  
                                       u2490 47EE                                         u1771 4420  
                                       u1931 3B6E                                         u4307 3B40  
                                       u4227 31CC                                         u4147 3820  
                                       u1851 3F82                                         u2811 21C6  
                                       u4067 217A                                         u2731 142C  
                                       u3507 112C                                         u3427 0F10  
                                       u2571 2F42                                         u3347 2D3E  
                                       u2491 47EA                                         u1780 3C42  
                                       u1940 3B86                                         u1860 392C  
                                       u2820 227C                                         u2740 153E  
                                       u2660 2846                                         u2580 2F5A  
                                       u1781 3C3E                                         u4317 3BE8  
                                       u1941 3B82                                         u1861 3928  
                                       u4237 320C                                         u4157 4030  
                                       u2821 2278                                         u4077 21F4  
                                       u2741 153A                                         u3517 1164  
                                       u3437 0F48                                         u2661 2842  
                                       u2581 2F56                                         u3357 2DE6  
                                       u2901 286E                                         u1790 3D0C  
                                       u1950 3C1A                                         u1870 3954  
                                       u2830 2362                                         u2750 1E02  
                                       u2670 0E14                                         u2590 2FEE  
                                       u1791 3D08                                         u1951 3C16  
                                       u1871 3950                                         u4247 324C  
                                       u4167 4616                                         u2831 235E  
                                       u4087 222C                                         u2751 1DFE  
                                       u3607 13B8                                         u3527 119C  
                                       u3447 0F80                                         u2671 0E10  
                                       u2655 2748                                         u2591 2FEA  
                                       u3367 2EA8                                         u2911 2884  
                                       u1880 3998                                         u1960 373E  
                                       u2840 238A                                         u2760 1E40  
                                       u2680 0EEA                                         u1881 3994  
                                       u4257 3294                                         u4177 41B8  
                                       u1961 373A                                         u2841 2386  
                                       u4097 22A6                                         u2761 1E3C  
                                       u3617 13F0                                         u3537 11D4  
                                       u3457 0FE6                                         u2681 0EE6  
                                       u3377 2F14                                         u3297 2958  
                                       u2921 2890                                         u1890 39AC  
                                       u1970 3766                                         u2770 1ED2  
                                       u2690 0FC0                                         u2930 2946  
                                       u1891 39A8                                         u4267 38FA  
                                       u4187 3040                                         u1971 3762  
                                       u2771 1ECE                                         u3707 3446  
                                       u3627 1456                                         u3547 123A  
                                       u3467 101E                                         u2691 0FBC  
                                       u3387 2FBC                                         u2931 2942  
                                       u1980 37AA                                         u2780 1F64  
                                       u2940 2A08                                         u4277 3966  
                                       u4197 3080                                         u1981 37A6  
                                       u2781 1F60                                         u3717 1656  
                                       u3637 148E                                         u3557 1272  
                                       u3477 1056                                         u3397 0E3A  
                                       u2941 2A04                                         u1990 37BE  
                                       u2790 2066                                         u2950 2A34  
                                       u4287 3A0E                                         u1991 37BA  
                                       u2791 2062                                         u3807 1922  
                                       u3727 168E                                         u3647 14C6  
                                       u3567 12AA                                         u3487 108E  
                                       u2951 2A30                                         u2960 2A70  
                                       u4297 3AD4                                         u3817 195A  
                                       u3737 16C6                                         u3657 14FE  
                                       u3577 12E2                                         u3497 10C6  
                                       u2961 2A6C                                         u3907 1C3A  
                                       u3827 1992                                         u3747 16FE  
                                       u3667 1564                                         u3587 1348  
                                       u3917 1D16                                         u3837 19EC  
                                       u3757 17C6                                         u3677 15DC  
                                       u3597 1380                                         u2981 2AE8  
                                       u3927 1D4E                                         u3847 1A24  
                                       u3767 17FE                                         u3687 3332  
                                       u2975 2A7C                                         u3937 1D86  
                                       u3857 1A9E                                         u3777 1858  
                                       u3697 339E                                         u2977 2A80  
                                       u3947 1DBE                                         u3867 1AD6  
                                       u3787 1890                                         u2995 2B94  
                                       u3957 1E6A                                         u3877 1B50  
                                       u3797 18EA                                         u2997 2B98  
                                       u3967 1EA2                                         u3887 1B88  
                                       u3977 1EFC                                         u3897 1C02  
                                       u3987 1F34                                         u3997 1F8E  
                lostReturnHome@straightSpeed 003A                                         _main 2868  
                                       _move 0E02                                         _lost 01D9  
                         i2___lwdiv@quotient 0005                                         fsr2h 0FDA  
                                       indf2 0FDF                                         fsr1l 0FE1  
                                       fsr2l 0FD9                                         max@a 0010  
                                       max@b 0012                                         btemp 004D  
                                       _stop 3E9E                                         min@a 0010  
                                       min@b 0012                                         prodh 0FF4  
                                       prodl 0FF3                                         start 00BE  
                        main@reverseDuration 01A9                             __end_of_ADC_init 4898  
                       ?i2_color_writetoaddr 0003                              __end_of_HighISR 00BE  
                      lostReturnHome@curMove 0039                                 ___param_bank 0000  
                       __end_of_batteryLevel 45C0                                        ??_max 0014  
                                      ??_min 0014                              __end_of___aldiv 3E9E  
                                      ?_main 0001                                        _ADPCH 0F5F  
                            __end_of___awdiv 4150                                        ?_move 00D8  
                            __end_of___lldiv 4340                                        ?_stop 0023  
                            ___awdiv@divisor 0012                              __end_of___lwdiv 4444  
                                      i2l143 429A                                        i2l146 485E  
                                      i2l420 48C6                                        i2l413 47DA  
                                      i2l261 4930                                        i2l406 47B4  
                                      i2l270 48F4                                        i2l255 4742  
                                      i2l258 4768                                        i2l267 4926  
                                      i2l367 00B2                              ___awdiv@counter 0014  
                                      _TMR0H 0FD4                                        _TMR0L 0FD3  
                        ___lmul@multiplicand 0014                   __end_of_I2C_2_Master_Start 491E  
                 __end_of_I2C_2_Master_Write 48EA                                   _Buggy_init 463A  
                     returnHome@straightRamp 003C                       returnHome@straightTime 0037  
                                      tablat 0FF5                                        plusw0 0FEB  
                                      plusw2 0FDB                                        ttemp5 004E  
                                      ttemp6 0051                                        ttemp7 0055  
                                      stop@i 002B                                        status 0FD8  
                                      wtemp8 004E                        ??i2_color_writetoaddr 0004  
                               main@turnRamp 01AB                        _I2C_2_Master_RepStart 4900  
                         putCharToRxBuf@byte 0001                              __initialization 4522  
                  get16bitTMR0val@timer_high 0016                                 __end_of_main 2C40  
                               __end_of_move 162C                                 __end_of_stop 3FA6  
                        move@reverseDuration 00E3                              _get16bitTMR0val 46F2  
                                     ??_main 0047                                       ??_move 0045  
                                     ??_stop 0028                                __activetblptr 0000  
                              calibration@mL 0031                                calibration@mR 0033  
                     returnHome@turnDuration 003E                                 ?_setMotorPWM 001D  
                                     _ADRESH 0F64                                       _CCPR1H 0FAA  
                                     _CCPR2H 0FA6                                       _CCPR3H 0F25  
                                     _CCPR4H 0F21                             ___awdiv@dividend 0010  
                     lostReturnHome@turnRamp 003F                                       _RC0PPS 0E62  
                                     _RC4REG 0EE3                       wallAdjust@straightRamp 0028  
                                     _RE2PPS 0E74                                       _RC7PPS 0E69  
                                     _RD5PPS 0E6F                                       _RE4PPS 0E76  
                                     _RD6PPS 0E70                                       i2l1261 44AE  
                                     i2l1268 44B6                                       i2l3075 4742  
                                     i2l3077 4752                                       i2l4161 47A6  
                                     i2l3281 4922                                       i2l4163 47B2  
                                     i2l3275 4928                                       i2l3283 48EC  
                                     i2l4165 47B6                                       i2l4173 48B0  
                                     i2l4157 4792                                       i2l3277 492C  
                                     i2l3285 48F0                                       i2l4501 0082  
                                     i2l4167 47C6                                       i2l4159 47A2  
                                     i2l3279 491E                                       i2l4191 4272  
                                     i2l4503 0092                                       i2l4169 47CA  
                                     i2l3641 4444                                       i2l4193 427C  
                                     i2l4185 41F6                                       i2l4505 009A  
                                     i2l3651 447C                                       i2l3643 444C  
                                     i2l4195 4286                                       i2l4187 4258  
                                     i2l4507 00AE                                       i2l3661 44A8  
                                     i2l3653 4482                                       i2l3645 445E  
                                     i2l4197 4290                                       i2l4189 4268  
                                     i2l3655 4498                                       i2l3647 4466  
                                     i2l3639 4842                                       i2l3657 44A0  
                                     i2l3649 446E                                       i2l4481 0012  
                                     i2l3659 44A2                                       i2l4483 0022  
                                     i2l4491 0054                                       _RG6PPS 0E88  
                                     i2l4493 0064                                       i2l4485 0028  
                                     i2l4495 006A                                       i2l4487 002C  
                                     i2l4497 006E                                       i2l4489 0030  
                                     i2l4499 007C                                    ??_HighISR 000D  
                   __end_of_color_click_init 463A                                       _TMR0IE 714D  
                                     _TMR0IF 719D                                       _RX4PPS 0E15  
                                     _TX4REG 0EE4                                 ??_ADC_getval 0010  
                              ??_Timer0_init 0010                          calibration@turnRamp 0038  
                    calibration@turnDuration 0036                                 _CCPTMRS0bits 0FAD  
                           _getCharFromTxBuf 47B6                                       ___lmul 44B8  
                                  ??___aldiv 0024                                       ___wmul 476A  
                                  ??___awdiv 0014                                    ??___lldiv 0024  
                                  ??___lwdiv 001A                                       clear_0 4548  
                                     clear_1 455A                             ___awdiv@quotient 0016  
                                     isa$std 0001                      returnHome@straightSpeed 003A  
                                     move@mL 00D8                                       move@mR 00DA  
                          __end_ofi2___lwdiv 44B8                                 __mediumconst 0000  
                                     tblptrh 0FF7                                       tblptrl 0FF6  
                                     tblptru 0FF8                                    ?_ADC_init 0001  
                                     stop@mL 0023                                       stop@mR 0025  
                                ?_Buggy_init 0001                            ??_initDCmotorsPWM 0012  
                         __end_of_ADC_getval 48B0                   i2color_writetoaddr@address 0004  
                           __end_of_turnLeft 3C26                   lostReturnHome@moveSequence 0035  
                      __end_of_isDataInTxBuf 48C8                                   __accesstop 0060  
                    __end_of__initialization 4568                              fullSpeedAhead@i 002C  
                              main@turnSpeed 01AA                       ?_I2C_2_Master_RepStart 0001  
                              ___rparam_used 0001                    reverseShort@straightSpeed 0027  
              lostReturnHome@reverseDuration 003B                              _Interrupts_init 48C8  
                             __pcstackCOMRAM 0001                      __end_of_get16bitTMR0val 471A  
                               ?_white_Light 0001                                 __pidataBANK1 4932  
                   get16bitTMR0val@timer_low 0014                     get16bitTMR0val@timer_val 0018  
               ?_color_clear_init_interrupts 0001                             _reverseOneSquare 3686  
                        __end_of_Timer0_init 4840                               main@ambientNew 01A7  
                                 ??_ADC_init 0010                                 rgb_2_hsv@HSV 0032  
                               _batteryLevel 4572                                   __pbssBANK0 0060  
                                 __pbssBANK1 01D9                                   __pbssBANK2 0200  
                             _rgb_2_hsv$3604 00DE                               _rgb_2_hsv$3605 00E0  
                             _rgb_2_hsv$3606 00D8                            _color_writetoaddr 4800  
                               _T2CLKCONbits 0FBF                               _lostReturnHome 1CE8  
                   reverseShort@straightRamp 0028                           ?_color_writetoaddr 0012  
                                    ?___lmul 0010                                      ?___wmul 0010  
                   wallAdjust@adjustDuration 002C                               ___lmul@product 0018  
              ??_color_clear_init_interrupts 001D                                  move@curMove 00E1  
                    lostReturnHome@turnSpeed 003D                          ??_color_writetoaddr 0013  
                    wallAdjust@straightSpeed 0027                                      _SP4BRGH 0EE6  
                                    _SP4BRGL 0EE5                   fullSpeedAhead@straightRamp 0028  
                      turnRight@turnDuration 0028                                      _SSP2ADD 0ED6  
                                    _SSP2BUF 0ED5                             _brightnessChange 01DA  
                                 _color_read 3498                      __end_of_Interrupts_init 48DE  
                     color_writetoaddr@value 0012                                      _HighISR 0008  
                  __end_of_color_writetoaddr 4820                       __end_of_lostReturnHome 238C  
                                  _ADREFbits 0F58                           _I2C_2_Master_Start 4914  
                                 _initUSART4 4860                          i2_I2C_2_Master_Idle 4742  
                         _I2C_2_Master_Write 48DE                                      __Hparam 0000  
                        i2_I2C_2_Master_Stop 491E                                      __Lparam 0000  
                                wallAdjust@i 002E                                  _Timer0_init 4820  
                       calibration@turnSpeed 0035                             ?_get16bitTMR0val 0010  
                                    ___aldiv 3D92                                      ___awdiv 408C  
                            lostReturnHome@i 0044                                      ___lldiv 429C  
                              ??_calibration 0039                          ?_I2C_2_Master_Start 0001  
                                    ___lwdiv 43D0                          ?_I2C_2_Master_Write 0001  
                               __psmallconst 0E00                                      _ambient 01D7  
                                    __pcinit 4522                                      __ramtop 0E00  
                                  ?_turnLeft 0023                            __end_of_rgb_2_hsv 2868  
                                    __ptext0 2868                                      __ptext1 47DC  
                                    __ptext2 2C40                                      __ptext3 238C  
                                    __ptext4 4670                                      __ptext5 469C  
                                    __ptext6 44B8                                      __ptext7 429C  
                                    __ptext8 3D92                                      __ptext9 0E02  
                       ?i2_I2C_2_Master_Idle 0001                                    _T2CONbits 0FBD  
                              ?_reverseShort 0023                         ?i2_I2C_2_Master_Stop 0001  
                           ___aldiv@dividend 001C                                    _T2HLTbits 0FBE  
                              _RxBufWriteCnt 004C                                      main@HSV 01AC  
                   __end_of_getCharFromTxBuf 47DC                                      main@buf 0100  
                       ??_I2C_2_Master_Start 0011                         ??_I2C_2_Master_Write 0011  
                       end_of_initialization 4568              ??i2_color_clear_init_interrupts 0008  
                __end_ofi2_color_writetoaddr 4860                             ADC_getval@tmpval 0010  
                          reverseOneSquare@i 002D                            ?_color_click_init 0001  
                            ?_lostReturnHome 0031                                   _wallAdjust 2C40  
                            ___lldiv@divisor 0020                                   _resetTimer 48F6  
                         ??_color_click_init 0022                              ___lldiv@counter 0028  
                           ___aldiv@quotient 0026                   batteryLevel@batteryQuarter 0019  
                                    postdec1 0FE5                                      postdec2 0FDD  
                                    postinc0 0FEE                                      postinc2 0FDE  
                 batteryLevel@batteryVoltage 0018                                   main@F14650 009C  
                                 main@F14661 01D3                                   main@F14656 0252  
                                 main@F14658 0200                                   _returnHome 162C  
                            _initDCmotorsPWM 4340                                   ??_turnLeft 002A  
                                  _PORTFbits 0F8E                           setMotorPWM@negDuty 0022  
                             ??_reverseShort 0029                        ??i2_I2C_2_Master_Idle 0001  
                              move@turnSpeed 00E5                            __end_of_turnRight 3A4C  
                      ??i2_I2C_2_Master_Stop 0002                          __end_of_calibration 32A8  
                                returnHome@i 0044                                    _TRISAbits 0F81  
                         setMotorPWM@posDuty 0021                                    _TRISBbits 0F82  
                                  _TRISCbits 0F83                                    _TRISDbits 0F84  
                                  _TRISEbits 0F85                                    _TRISFbits 0F86  
                                  _TRISGbits 0F87                                    _TRISHbits 0F88  
                           white_Light@state 0010                                 ??_Buggy_init 0010  
                           fullSpeedAhead@mL 0023                             fullSpeedAhead@mR 0025  
                                ?_color_read 0014                            i2___lwdiv@divisor 0003  
                   color_writetoaddr@address 0013                                    i2___lwdiv 4444  
                    ??_I2C_2_Master_RepStart 0011                            i2___lwdiv@counter 0007  
                   __end_of_reverseOneSquare 3872                             ?_Interrupts_init 0001  
                reverseShort@reverseDuration 002C                                stop@cur_power 002D  
                                _CCP1CONbits 0FAB                                 _EUSART4RXbuf 00C4  
                        returnHome@turnSpeed 003D                                 _EUSART4TXbuf 0060  
                                _CCP2CONbits 0FA7                                  _CCP3CONbits 0F26  
                 lostReturnHome@straightRamp 003C                   lostReturnHome@straightTime 0037  
                                ?_initUSART4 0001                                  _CCP4CONbits 0F22  
                                 main@motorL 01C9                                   main@motorR 01BF  
                             color_read@RGBC 0014                               _fullSpeedAhead 3FA6  
                             __end_of___lmul 4522                         turnLeft@turnDuration 0028  
                             __end_of___wmul 4790                           __end_of_Buggy_init 4670  
                        start_initialization 4522                                  __end_of_max 46C8  
                                __end_of_min 469C                                _TxBufWriteCnt 004A  
                 lostReturnHome@turnDuration 003E                                   rgb_2_hsv@b 00EC  
                                 rgb_2_hsv@g 00EA                                   ?i2___lwdiv 0001  
                                 rgb_2_hsv@r 00E2                             move@moveSequence 00DD  
                        wallAdjust@cur_power 0030        __end_ofi2_color_clear_init_interrupts 429C  
              i2_color_clear_init_interrupts 41F6                                  ?_wallAdjust 0023  
                                ?_resetTimer 0001                      __end_of_initDCmotorsPWM 43D0  
                     __end_of_fullSpeedAhead 408C                           turnRight@cur_power 002F  
                                   ??___lmul 0018                                rgb_2_hsv@RGBC 002A  
                                   ??___wmul 0014                               _putCharToRxBuf 4790  
                                __pdataBANK1 01D3                                rgb_2_hsv@diff 00E6  
              i2I2C_2_Master_Write@data_byte 0002                                  _calibration 300E  
                              rgb_2_hsv@cmax 00E4                                rgb_2_hsv@cmin 00DC  
                                ?_returnHome 0031                 reverseOneSquare@straightRamp 0029  
               __end_ofi2_I2C_2_Master_Start 4932                 __end_ofi2_I2C_2_Master_Write 48F6  
                          turnLeft@cur_power 002F                                  __pbssCOMRAM 0049  
                              __pcstackBANK0 00D8                                __pcstackBANK1 0100  
                                   ?_HighISR 0001                         __end_of_reverseShort 3498  
                           stop@straightRamp 0027                             ___lwdiv@dividend 0016  
                               ?_Timer0_init 0001                       __end_of_putCharToRxBuf 47B6  
                            ?_fullSpeedAhead 0023                                    __pintcode 0008  
                                   ?___aldiv 001C                           turnRight@turnSpeed 0027  
                                   ?___awdiv 0010                                     ?___lldiv 001C  
                                   ?___lwdiv 0016                         I2C_2_Master_Read@ack 0012  
                       I2C_2_Master_Read@tmp 0013                                  __smallconst 0E00  
                             reverseShort@mL 0023                               reverseShort@mR 0025  
                           main@moveSequence 017A                            _I2C_2_Master_Idle 471A  
                          _I2C_2_Master_Init 46C8                            _I2C_2_Master_Read 45C0  
                          turnLeft@turnSpeed 0027                            _I2C_2_Master_Stop 490A  
                                  _rgb_2_hsv 238C                                 _RxBufReadCnt 004B  
                                   _ADC_init 487E                           ?_I2C_2_Master_Idle 0001  
                         ?_I2C_2_Master_Init 0001                           ?_I2C_2_Master_Read 0001  
                              ??_setMotorPWM 001F                           ?_I2C_2_Master_Stop 0001  
                           ___lwdiv@quotient 001A                     initDCmotorsPWM@PWMperiod 0010  
                          ?_getCharFromTxBuf 0001                                  ??i2___lwdiv 0005  
                           ??_lostReturnHome 0040                           ??_getCharFromTxBuf 0001  
                          move@straightSpeed 00E2                              ___aldiv@divisor 0020  
                        ??_I2C_2_Master_Idle 0010                              ___aldiv@counter 0024  
                        ??_I2C_2_Master_Init 0010                          ??_I2C_2_Master_Read 0011  
                             ___wmul@product 0014                                     _LATAbits 0F79  
                        ??_I2C_2_Master_Stop 0011                                     _LATCbits 0F7B  
                              _isDataInTxBuf 48B0                                     _LATDbits 0F7C  
                                   _LATEbits 0F7D                                     _LATFbits 0F7E  
                                   _LATGbits 0F7F                                     _LATHbits 0F80  
                                   _IPR0bits 0E1F                                     _PIE0bits 0E29  
                                   _PIE4bits 0E2D                                  turnRight@mL 0023  
                                turnRight@mR 0025                                     i2u240_40 4498  
                                   i2u320_40 0042                                     i2u240_41 4494  
                                   i2u320_41 003A                                     i2u322_40 0064  
                                   i2u321_48 0044                                     i2u322_41 0060  
                                   i2u323_40 007C                                     i2u323_41 0078  
                                   i2u180_40 4752                                     i2u324_40 0092  
                                   i2u180_41 474E                                     i2u324_41 008E  
                                   i2u181_40 4768                                     i2u325_40 00AE  
                                   i2u181_41 4764                                     i2u325_41 00AA  
                                   i2u238_40 445E                                     i2u238_41 445A  
                                   i2u239_40 447C                                     i2u319_40 0022  
                                   i2u239_41 4478                                     i2u319_41 001E  
                                   _PIR0bits 0E33                                     i2u432_47 425E  
                                   i2u285_40 47A2                                     i2u285_41 479E  
                                   i2u286_40 47C6                                     i2u286_41 47C2  
                                   i2u287_40 48C4                                     i2u287_41 48BE  
                                   _PIR4bits 0E37                                     i2u288_40 48C6  
                            ?_putCharToRxBuf 0001                             ?_initDCmotorsPWM 0010  
                fullSpeedAhead@straightSpeed 0027          __end_of_color_clear_init_interrupts 41F6  
             ?i2_color_clear_init_interrupts 0001                  _color_clear_init_interrupts 4150  
                                   _SSP2CON2 0EDA                                     _SSP2STAT 0ED8  
                               move@turnRamp 00E7                                   _ADCON0bits 0F60  
                  __end_of_I2C_2_Master_Idle 4742                    __end_of_I2C_2_Master_Init 46F2  
                  __end_of_I2C_2_Master_Read 4602                            ___wmul@multiplier 0010  
                  __end_of_I2C_2_Master_Stop 4914     color_clear_init_interrupts@low_threshold 0020  
 i2color_clear_init_interrupts@low_threshold 000B                                 setMotorPWM@m 001D  
                I2C_2_Master_Write@data_byte 0011                           returnHome@turnRamp 003F  
                                  main@color 01B3                                   ?_rgb_2_hsv 002A  
                               _TxBufReadCnt 0049                     i2color_writetoaddr@value 0003  
                                  _turnRight 3872                    returnHome@reverseDuration 003B  
                               ??_color_read 0016                            ___lmul@multiplier 0010  
                                  copy_data0 4536                               ?_isDataInTxBuf 0001  
              __end_of_I2C_2_Master_RepStart 490A                            ?_reverseOneSquare 0023  
                        __end_of_setMotorPWM 3D92                                 ??_initUSART4 0010  
                       i2_I2C_2_Master_Start 4928              reverseOneSquare@reverseDuration 0028  
                       i2_I2C_2_Master_Write 48EA                           ??_reverseOneSquare 002A  
                                   __Hrparam 0000                                   _ADC_getval 4898  
                           main@testSequence 01A2                                     __Lrparam 0000  
                               wallAdjust@mL 0023                                 wallAdjust@mR 0025  
                              ??_white_Light 0010                  __end_ofi2_I2C_2_Master_Idle 476A  
                __end_ofi2_I2C_2_Master_Stop 4928                             lostReturnHome@mL 0031  
                           lostReturnHome@mR 0033                           __end_of_color_read 3686  
                                 _ANSELBbits 0E9A                                   _ANSELDbits 0EA7  
                                 _ANSELFbits 0EB4                                   _T0CON0bits 0FD5  
                                 _T0CON1bits 0FD6                reverseOneSquare@straightSpeed 0027  
                            ___lwdiv@divisor 0018                       returnHome@moveSequence 0035  
                         __end_of_initUSART4 487E                              ___lwdiv@counter 001C  
                          turnRight@turnRamp 0029                                   ?_turnRight 0023  
                                   __ptext10 32A8                                     __ptext11 162C  
                                   __ptext20 3498                                     __ptext12 1CE8  
                                   __ptext21 4900                                     __ptext13 3E9E  
                                   __ptext30 46C8                                     __ptext22 45C0  
                                   __ptext14 3686                                     __ptext31 300E  
                                   __ptext23 4602                                     __ptext15 48F6  
                                   __ptext40 4898                                     __ptext32 3872  
                                   __ptext24 4150                                     __ptext16 46F2  
                                   __ptext41 4820                                     __ptext33 3A4C  
                                   __ptext25 4800                                     __ptext17 3FA6  
                                   __ptext50 4742                                     __ptext42 48C8  
                                   __ptext34 3C26                                     __ptext26 48DE  
                                   __ptext18 4860                                     __ptext51 4444  
                                   __ptext43 463A                                     __ptext35 476A  
                                   __ptext27 490A                                     __ptext19 4340  
                                   __ptext52 4790                                     __ptext36 43D0  
                                   __ptext28 4914                                     __ptext53 48B0  
                                   __ptext45 41F6                                     __ptext37 4572  
                                   __ptext29 471A                                     __ptext54 47B6  
                                   __ptext46 4840                                     __ptext38 408C  
                                   __ptext47 48EA                                     __ptext39 487E  
                                   __ptext48 491E                                     __ptext49 4928  
                                  move@color 00DC                                ?_batteryLevel 0001  
                               _SSP2CON1bits 0ED9                                 _SSP2CON2bits 0EDA  
                              reverseShort@i 002D                             turnLeft@turnRamp 0029  
                      reverseShort@cur_power 002F                                   turnLeft@mL 0023  
                                 turnLeft@mR 0025                        ?i2_I2C_2_Master_Start 0001  
                               ??_wallAdjust 0029                             move@straightRamp 00E4  
                      ?i2_I2C_2_Master_Write 0001                             move@straightTime 00DF  
                          returnHome@curMove 0039                                 ??_resetTimer 0010  
                                 turnRight@i 002D                                     isa$xinst 0000  
                                 _RC4STAbits 0EE7                                     main@RGBC 01B7  
                                   int$flags 004D                                 ?_calibration 0031  
                               ??_returnHome 0040                                     main@wall 01A6  
                                   _turnLeft 3A4C                      fullSpeedAhead@cur_power 002E  
                        __end_of_white_Light 4800                                   _INTCONbits 0FF2  
                               _reverseShort 32A8                    reverseOneSquare@cur_power 002F  
                                ??_rgb_2_hsv 0034                           __end_of_wallAdjust 300E  
                         reverseOneSquare@mL 0023                           reverseOneSquare@mR 0025  
                         __end_of_resetTimer 4900                             move@turnDuration 00E6  
                             ??_batteryLevel 0018                                  _setMotorPWM 3C26  
                          ??_get16bitTMR0val 0012                              ??_isDataInTxBuf 0001  
                                   intlevel2 0000                             ___lldiv@dividend 001C  
                           ??_fullSpeedAhead 0029                           __end_of_returnHome 1CE8  
                                  turnLeft@i 002D                                  ?_ADC_getval 0001  
                          main@straightSpeed 01B2                             _color_click_init 4602  
                                 _SSP2DATPPS 0E1D                             ___lldiv@quotient 0024  
                                 _SSP2CLKPPS 0E1C                                 ___aldiv@sign 0025  
                                ??_turnRight 002A                             main@straightRamp 01B5  
                           main@straightTime 0128                                   _TX4STAbits 0EE8  
                     ??i2_I2C_2_Master_Start 0002                       ??i2_I2C_2_Master_Write 0002  
                           ??_putCharToRxBuf 0001                                 returnHome@mL 0031  
                               returnHome@mR 0033  
